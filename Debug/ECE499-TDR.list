
ECE499-TDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc20  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800ce00  0800ce00  0001ce00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d324  0800d324  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d324  0800d324  0001d324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d32c  0800d32c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d32c  0800d32c  0001d32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d330  0800d330  0001d330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  200001e0  0800d514  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800d514  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002037a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e4d  00000000  00000000  0004058a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  000443d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b8  00000000  00000000  00045e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f61  00000000  00000000  00047700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002134a  00000000  00000000  0006b661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e283a  00000000  00000000  0008c9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016f1e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086a8  00000000  00000000  0016f238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cde8 	.word	0x0800cde8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800cde8 	.word	0x0800cde8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f007 fa2f 	bl	80084c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001066:	4b33      	ldr	r3, [pc, #204]	; (8001134 <MX_ADC1_Init+0xec>)
 8001068:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800106c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800106e:	4b31      	ldr	r3, [pc, #196]	; (8001134 <MX_ADC1_Init+0xec>)
 8001070:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001074:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8001076:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <MX_ADC1_Init+0xec>)
 8001078:	2218      	movs	r2, #24
 800107a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <MX_ADC1_Init+0xec>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001082:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <MX_ADC1_Init+0xec>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001088:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <MX_ADC1_Init+0xec>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108e:	4b29      	ldr	r3, [pc, #164]	; (8001134 <MX_ADC1_Init+0xec>)
 8001090:	2204      	movs	r2, #4
 8001092:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001094:	4b27      	ldr	r3, [pc, #156]	; (8001134 <MX_ADC1_Init+0xec>)
 8001096:	2200      	movs	r2, #0
 8001098:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <MX_ADC1_Init+0xec>)
 800109c:	2201      	movs	r2, #1
 800109e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <MX_ADC1_Init+0xec>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b23      	ldr	r3, [pc, #140]	; (8001134 <MX_ADC1_Init+0xec>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <MX_ADC1_Init+0xec>)
 80010b0:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80010b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <MX_ADC1_Init+0xec>)
 80010b8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80010bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <MX_ADC1_Init+0xec>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_ADC1_Init+0xec>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <MX_ADC1_Init+0xec>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d4:	4817      	ldr	r0, [pc, #92]	; (8001134 <MX_ADC1_Init+0xec>)
 80010d6:	f001 fb17 	bl	8002708 <HAL_ADC_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010e0:	f000 fbd4 	bl	800188c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	4619      	mov	r1, r3
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <MX_ADC1_Init+0xec>)
 80010f0:	f002 fdac 	bl	8003c4c <HAL_ADCEx_MultiModeConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010fa:	f000 fbc7 	bl	800188c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_ADC1_Init+0xf0>)
 8001100:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001102:	2306      	movs	r3, #6
 8001104:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800110a:	237f      	movs	r3, #127	; 0x7f
 800110c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800110e:	2304      	movs	r3, #4
 8001110:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <MX_ADC1_Init+0xec>)
 800111c:	f001 ff6a 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001126:	f000 fbb1 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	3730      	adds	r7, #48	; 0x30
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200001fc 	.word	0x200001fc
 8001138:	04300002 	.word	0x04300002

0800113c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b09a      	sub	sp, #104	; 0x68
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2244      	movs	r2, #68	; 0x44
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f007 f9b1 	bl	80084c4 <memset>
  if(adcHandle->Instance==ADC1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800116a:	d167      	bne.n	800123c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800116c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001170:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001172:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001176:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4618      	mov	r0, r3
 800117e:	f004 fcdf 	bl	8005b40 <HAL_RCCEx_PeriphCLKConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001188:	f000 fb80 	bl	800188c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800118c:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <HAL_ADC_MspInit+0x108>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	4a2c      	ldr	r2, [pc, #176]	; (8001244 <HAL_ADC_MspInit+0x108>)
 8001192:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001198:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <HAL_ADC_MspInit+0x108>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <HAL_ADC_MspInit+0x108>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	4a26      	ldr	r2, [pc, #152]	; (8001244 <HAL_ADC_MspInit+0x108>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_ADC_MspInit+0x108>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011bc:	2301      	movs	r3, #1
 80011be:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c0:	2303      	movs	r3, #3
 80011c2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	f003 fc1d 	bl	8004a10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <HAL_ADC_MspInit+0x10c>)
 80011d8:	4a1c      	ldr	r2, [pc, #112]	; (800124c <HAL_ADC_MspInit+0x110>)
 80011da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <HAL_ADC_MspInit+0x10c>)
 80011de:	2205      	movs	r2, #5
 80011e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_ADC_MspInit+0x10c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_ADC_MspInit+0x10c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <HAL_ADC_MspInit+0x10c>)
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_ADC_MspInit+0x10c>)
 80011f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_ADC_MspInit+0x10c>)
 80011fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001202:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <HAL_ADC_MspInit+0x10c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_ADC_MspInit+0x10c>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <HAL_ADC_MspInit+0x10c>)
 8001212:	f003 f923 	bl	800445c <HAL_DMA_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800121c:	f000 fb36 	bl	800188c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <HAL_ADC_MspInit+0x10c>)
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <HAL_ADC_MspInit+0x10c>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	2012      	movs	r0, #18
 8001232:	f002 fe8a 	bl	8003f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001236:	2012      	movs	r0, #18
 8001238:	f002 fea1 	bl	8003f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800123c:	bf00      	nop
 800123e:	3768      	adds	r7, #104	; 0x68
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000
 8001248:	20000268 	.word	0x20000268
 800124c:	40020008 	.word	0x40020008

08001250 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001256:	463b      	mov	r3, r7
 8001258:	2230      	movs	r2, #48	; 0x30
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f007 f931 	bl	80084c4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <MX_DAC1_Init+0x80>)
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <MX_DAC1_Init+0x84>)
 8001266:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001268:	4819      	ldr	r0, [pc, #100]	; (80012d0 <MX_DAC1_Init+0x80>)
 800126a:	f002 fea2 	bl	8003fb2 <HAL_DAC_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001274:	f000 fb0a 	bl	800188c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001278:	2302      	movs	r3, #2
 800127a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8001288:	230a      	movs	r3, #10
 800128a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	4619      	mov	r1, r3
 80012a2:	480b      	ldr	r0, [pc, #44]	; (80012d0 <MX_DAC1_Init+0x80>)
 80012a4:	f002 fefa 	bl	800409c <HAL_DAC_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80012ae:	f000 faed 	bl	800188c <Error_Handler>
  }

  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_2047) != HAL_OK)
 80012b2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80012b6:	2100      	movs	r1, #0
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_DAC1_Init+0x80>)
 80012ba:	f003 f897 	bl	80043ec <HAL_DACEx_TriangleWaveGenerate>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80012c4:	f000 fae2 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3730      	adds	r7, #48	; 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200002c8 	.word	0x200002c8
 80012d4:	50000800 	.word	0x50000800

080012d8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a15      	ldr	r2, [pc, #84]	; (800134c <HAL_DAC_MspInit+0x74>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d124      	bne.n	8001344 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_DAC_MspInit+0x78>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4a14      	ldr	r2, [pc, #80]	; (8001350 <HAL_DAC_MspInit+0x78>)
 8001300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_DAC_MspInit+0x78>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_DAC_MspInit+0x78>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_DAC_MspInit+0x78>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_DAC_MspInit+0x78>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800132a:	2310      	movs	r3, #16
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132e:	2303      	movs	r3, #3
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001340:	f003 fb66 	bl	8004a10 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	50000800 	.word	0x50000800
 8001350:	40021000 	.word	0x40021000

08001354 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_DMA_Init+0x70>)
 800135c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800135e:	4a19      	ldr	r2, [pc, #100]	; (80013c4 <MX_DMA_Init+0x70>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6493      	str	r3, [r2, #72]	; 0x48
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_DMA_Init+0x70>)
 8001368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_DMA_Init+0x70>)
 8001374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001376:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <MX_DMA_Init+0x70>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6493      	str	r3, [r2, #72]	; 0x48
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_DMA_Init+0x70>)
 8001380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	200b      	movs	r0, #11
 8001390:	f002 fddb 	bl	8003f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001394:	200b      	movs	r0, #11
 8001396:	f002 fdf2 	bl	8003f7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	200c      	movs	r0, #12
 80013a0:	f002 fdd3 	bl	8003f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013a4:	200c      	movs	r0, #12
 80013a6:	f002 fdea 	bl	8003f7e <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	205e      	movs	r0, #94	; 0x5e
 80013b0:	f002 fdcb 	bl	8003f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 80013b4:	205e      	movs	r0, #94	; 0x5e
 80013b6:	f002 fde2 	bl	8003f7e <HAL_NVIC_EnableIRQ>

}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000

080013c8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013de:	4b45      	ldr	r3, [pc, #276]	; (80014f4 <MX_GPIO_Init+0x12c>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	4a44      	ldr	r2, [pc, #272]	; (80014f4 <MX_GPIO_Init+0x12c>)
 80013e4:	f043 0320 	orr.w	r3, r3, #32
 80013e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ea:	4b42      	ldr	r3, [pc, #264]	; (80014f4 <MX_GPIO_Init+0x12c>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f003 0320 	and.w	r3, r3, #32
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013f6:	4b3f      	ldr	r3, [pc, #252]	; (80014f4 <MX_GPIO_Init+0x12c>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	4a3e      	ldr	r2, [pc, #248]	; (80014f4 <MX_GPIO_Init+0x12c>)
 80013fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001402:	4b3c      	ldr	r3, [pc, #240]	; (80014f4 <MX_GPIO_Init+0x12c>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <MX_GPIO_Init+0x12c>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a38      	ldr	r2, [pc, #224]	; (80014f4 <MX_GPIO_Init+0x12c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b36      	ldr	r3, [pc, #216]	; (80014f4 <MX_GPIO_Init+0x12c>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b33      	ldr	r3, [pc, #204]	; (80014f4 <MX_GPIO_Init+0x12c>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a32      	ldr	r2, [pc, #200]	; (80014f4 <MX_GPIO_Init+0x12c>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <MX_GPIO_Init+0x12c>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001444:	482c      	ldr	r0, [pc, #176]	; (80014f8 <MX_GPIO_Init+0x130>)
 8001446:	f003 fc65 	bl	8004d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800144a:	2303      	movs	r3, #3
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144e:	2303      	movs	r3, #3
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	4827      	ldr	r0, [pc, #156]	; (80014fc <MX_GPIO_Init+0x134>)
 800145e:	f003 fad7 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001468:	2303      	movs	r3, #3
 800146a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4822      	ldr	r0, [pc, #136]	; (8001500 <MX_GPIO_Init+0x138>)
 8001478:	f003 faca 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA6 PA8 PA9
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
 800147c:	f641 7342 	movw	r3, #8002	; 0x1f42
 8001480:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001482:	2303      	movs	r3, #3
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001494:	f003 fabc 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800149c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b0:	f003 faae 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 80014b4:	2369      	movs	r3, #105	; 0x69
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b8:	2303      	movs	r3, #3
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <MX_GPIO_Init+0x130>)
 80014c8:	f003 faa2 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <MX_GPIO_Init+0x130>)
 80014e6:	f003 fa93 	bl	8004a10 <HAL_GPIO_Init>

}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40021000 	.word	0x40021000
 80014f8:	48000400 	.word	0x48000400
 80014fc:	48001400 	.word	0x48001400
 8001500:	48001800 	.word	0x48001800

08001504 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_I2C1_Init+0x74>)
 800150a:	4a1c      	ldr	r2, [pc, #112]	; (800157c <MX_I2C1_Init+0x78>)
 800150c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_I2C1_Init+0x74>)
 8001510:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <MX_I2C1_Init+0x7c>)
 8001512:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_I2C1_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_I2C1_Init+0x74>)
 800151c:	2201      	movs	r2, #1
 800151e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_I2C1_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_I2C1_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_I2C1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_I2C1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_I2C1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800153e:	480e      	ldr	r0, [pc, #56]	; (8001578 <MX_I2C1_Init+0x74>)
 8001540:	f003 fc00 	bl	8004d44 <HAL_I2C_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800154a:	f000 f99f 	bl	800188c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800154e:	2100      	movs	r1, #0
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <MX_I2C1_Init+0x74>)
 8001552:	f003 fc86 	bl	8004e62 <HAL_I2CEx_ConfigAnalogFilter>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800155c:	f000 f996 	bl	800188c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001560:	2100      	movs	r1, #0
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_I2C1_Init+0x74>)
 8001564:	f003 fcc8 	bl	8004ef8 <HAL_I2CEx_ConfigDigitalFilter>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800156e:	f000 f98d 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200002dc 	.word	0x200002dc
 800157c:	40005400 	.word	0x40005400
 8001580:	00b03fdb 	.word	0x00b03fdb

08001584 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b09c      	sub	sp, #112	; 0x70
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800159c:	f107 0318 	add.w	r3, r7, #24
 80015a0:	2244      	movs	r2, #68	; 0x44
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f006 ff8d 	bl	80084c4 <memset>
  if(i2cHandle->Instance==I2C1)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a2d      	ldr	r2, [pc, #180]	; (8001664 <HAL_I2C_MspInit+0xe0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d153      	bne.n	800165c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015b4:	2340      	movs	r3, #64	; 0x40
 80015b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015bc:	f107 0318 	add.w	r3, r7, #24
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 fabd 	bl	8005b40 <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015cc:	f000 f95e 	bl	800188c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b25      	ldr	r3, [pc, #148]	; (8001668 <HAL_I2C_MspInit+0xe4>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	4a24      	ldr	r2, [pc, #144]	; (8001668 <HAL_I2C_MspInit+0xe4>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <HAL_I2C_MspInit+0xe4>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_I2C_MspInit+0xe4>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <HAL_I2C_MspInit+0xe4>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <HAL_I2C_MspInit+0xe4>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001604:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001606:	2312      	movs	r3, #18
 8001608:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001612:	2304      	movs	r3, #4
 8001614:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f003 f9f6 	bl	8004a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001628:	2312      	movs	r3, #18
 800162a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001634:	2304      	movs	r3, #4
 8001636:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800163c:	4619      	mov	r1, r3
 800163e:	480b      	ldr	r0, [pc, #44]	; (800166c <HAL_I2C_MspInit+0xe8>)
 8001640:	f003 f9e6 	bl	8004a10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_I2C_MspInit+0xe4>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001648:	4a07      	ldr	r2, [pc, #28]	; (8001668 <HAL_I2C_MspInit+0xe4>)
 800164a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800164e:	6593      	str	r3, [r2, #88]	; 0x58
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_I2C_MspInit+0xe4>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800165c:	bf00      	nop
 800165e:	3770      	adds	r7, #112	; 0x70
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40005400 	.word	0x40005400
 8001668:	40021000 	.word	0x40021000
 800166c:	48000400 	.word	0x48000400

08001670 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 1000);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	b29a      	uxth	r2, r3
 8001680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	4804      	ldr	r0, [pc, #16]	; (8001698 <_write+0x28>)
 8001688:	f006 f8d8 	bl	800783c <HAL_UART_Transmit>
	return len;
 800168c:	687b      	ldr	r3, [r7, #4]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200004c8 	.word	0x200004c8

0800169c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a2:	f000 fd34 	bl	800210e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a6:	f000 f895 	bl	80017d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016aa:	f7ff fe8d 	bl	80013c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80016ae:	f7ff fe51 	bl	8001354 <MX_DMA_Init>
  MX_I2C1_Init();
 80016b2:	f7ff ff27 	bl	8001504 <MX_I2C1_Init>
  MX_ADC1_Init();
 80016b6:	f7ff fcc7 	bl	8001048 <MX_ADC1_Init>
  MX_DAC1_Init();
 80016ba:	f7ff fdc9 	bl	8001250 <MX_DAC1_Init>
  MX_USART2_UART_Init();
 80016be:	f000 fc59 	bl	8001f74 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80016c2:	f000 fb03 	bl	8001ccc <MX_TIM6_Init>
  MX_TIM7_Init();
 80016c6:	f000 fb41 	bl	8001d4c <MX_TIM7_Init>
  MX_TIM3_Init();
 80016ca:	f000 fa89 	bl	8001be0 <MX_TIM3_Init>
  MX_TIM2_Init();
 80016ce:	f000 fa11 	bl	8001af4 <MX_TIM2_Init>
//	SSD1306_Init();
//	OLED_Startup();
//	HAL_Delay(2000);
//	SSD1306_Clear();

	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 80016d2:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <main+0x108>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <main+0x108>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0204 	bic.w	r2, r2, #4
 80016e0:	601a      	str	r2, [r3, #0]
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); //Ex means this fxn is specific to this MCU family and therefore found in the extension file drivers
 80016e2:	217f      	movs	r1, #127	; 0x7f
 80016e4:	4830      	ldr	r0, [pc, #192]	; (80017a8 <main+0x10c>)
 80016e6:	f002 fa1d 	bl	8003b24 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &valueADC, 1);
 80016ea:	2201      	movs	r2, #1
 80016ec:	492f      	ldr	r1, [pc, #188]	; (80017ac <main+0x110>)
 80016ee:	482e      	ldr	r0, [pc, #184]	; (80017a8 <main+0x10c>)
 80016f0:	f001 f994 	bl	8002a1c <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start(&htim2);
 80016f4:	482e      	ldr	r0, [pc, #184]	; (80017b0 <main+0x114>)
 80016f6:	f004 fc6b 	bl	8005fd0 <HAL_TIM_Base_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1 );
 80016fa:	2100      	movs	r1, #0
 80016fc:	482c      	ldr	r0, [pc, #176]	; (80017b0 <main+0x114>)
 80016fe:	f004 fd2b 	bl	8006158 <HAL_TIM_OC_Start>
	HAL_TIM_DMABurst_WriteStart(&htim2, TIM_DMABASE_CNT, TIM_DMABASE_CNT, (uint32_t*) &tim3Buffer, TIM_DMABURSTLENGTH_1TRANSFER);
 8001702:	2300      	movs	r3, #0
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <main+0x118>)
 8001708:	2209      	movs	r2, #9
 800170a:	2109      	movs	r1, #9
 800170c:	4828      	ldr	r0, [pc, #160]	; (80017b0 <main+0x114>)
 800170e:	f004 fef7 	bl	8006500 <HAL_TIM_DMABurst_WriteStart>

	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <main+0x108>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <main+0x108>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0204 	bic.w	r2, r2, #4
 8001720:	601a      	str	r2, [r3, #0]
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001722:	2100      	movs	r1, #0
 8001724:	4824      	ldr	r0, [pc, #144]	; (80017b8 <main+0x11c>)
 8001726:	f002 fc66 	bl	8003ff6 <HAL_DAC_Start>
	HAL_TIM_Base_Start(&htim7);	//start timer7 (which triggers ADC)
 800172a:	4824      	ldr	r0, [pc, #144]	; (80017bc <main+0x120>)
 800172c:	f004 fc50 	bl	8005fd0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6); //start timer6 which runs program for 8sec
 8001730:	4823      	ldr	r0, [pc, #140]	; (80017c0 <main+0x124>)
 8001732:	f004 fc4d 	bl	8005fd0 <HAL_TIM_Base_Start>
	//HAL_TIM_Base_Start(&htim15); //start timer15 which triggers ADC conversions at rate of 4MHz

	HAL_StatusTypeDef juicer2;

	HAL_TIM_Base_Start(&htim3);
 8001736:	4823      	ldr	r0, [pc, #140]	; (80017c4 <main+0x128>)
 8001738:	f004 fc4a 	bl	8005fd0 <HAL_TIM_Base_Start>

	juicer2 = HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1 );
 800173c:	2100      	movs	r1, #0
 800173e:	4821      	ldr	r0, [pc, #132]	; (80017c4 <main+0x128>)
 8001740:	f004 fd0a 	bl	8006158 <HAL_TIM_OC_Start>
 8001744:	4603      	mov	r3, r0
 8001746:	71fb      	strb	r3, [r7, #7]
//  DAC->CR &= ~DAC_CR_TSEL1;
//
//  // Enable DAC
//  DAC->CR |= DAC_CR_EN1;

  uint8_t juicer = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	71bb      	strb	r3, [r7, #6]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		if(TIM6->CNT != 0)
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <main+0x12c>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0fb      	beq.n	800174c <main+0xb0>
		{
			HAL_TIM_DMABurst_WriteStart(&htim2, TIM_DMABASE_CNT, TIM_DMA_CC2, (uint32_t*) &tim3Buffer, TIM_DMABURSTLENGTH_1TRANSFER);
 8001754:	2300      	movs	r3, #0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <main+0x118>)
 800175a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800175e:	2109      	movs	r1, #9
 8001760:	4813      	ldr	r0, [pc, #76]	; (80017b0 <main+0x114>)
 8001762:	f004 fecd 	bl	8006500 <HAL_TIM_DMABurst_WriteStart>
			HAL_TIM_DMABurst_WriteStop(&htim2, TIM_DMA_CC2);
 8001766:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800176a:	4811      	ldr	r0, [pc, #68]	; (80017b0 <main+0x114>)
 800176c:	f005 f83e 	bl	80067ec <HAL_TIM_DMABurst_WriteStop>
			HAL_Delay(1);
 8001770:	2001      	movs	r0, #1
 8001772:	f000 fd3d 	bl	80021f0 <HAL_Delay>
			printf("%ld\r\n", tim3Buffer);
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <main+0x118>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4619      	mov	r1, r3
 800177c:	4813      	ldr	r0, [pc, #76]	; (80017cc <main+0x130>)
 800177e:	f007 fd23 	bl	80091c8 <iprintf>
//				DAC->DHR12R1 = 0; //set DAC output voltage to "off" state, or 0V
//				DAC->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
//				juicer = 0;
//			}

			if(adcFlag)
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <main+0x134>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <main+0xf4>
			{
				//printf("%d\r\n", valueADC);

				adcFlag = RESET;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <main+0x134>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
			}
			//HAL_ADC_Start(&hadc1);
//			HAL_Delay(1);

			__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <main+0x108>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <main+0x108>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0204 	bic.w	r2, r2, #4
 800179e:	601a      	str	r2, [r3, #0]
		if(TIM6->CNT != 0)
 80017a0:	e7d4      	b.n	800174c <main+0xb0>
 80017a2:	bf00      	nop
 80017a4:	20000268 	.word	0x20000268
 80017a8:	200001fc 	.word	0x200001fc
 80017ac:	20000328 	.word	0x20000328
 80017b0:	20000338 	.word	0x20000338
 80017b4:	20000330 	.word	0x20000330
 80017b8:	200002c8 	.word	0x200002c8
 80017bc:	2000041c 	.word	0x2000041c
 80017c0:	200003d0 	.word	0x200003d0
 80017c4:	20000384 	.word	0x20000384
 80017c8:	40001000 	.word	0x40001000
 80017cc:	0800ce00 	.word	0x0800ce00
 80017d0:	2000032c 	.word	0x2000032c

080017d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b094      	sub	sp, #80	; 0x50
 80017d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	2238      	movs	r2, #56	; 0x38
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f006 fe6e 	bl	80084c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017fa:	f003 fbc9 	bl	8004f90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017fe:	2302      	movs	r3, #2
 8001800:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001808:	2340      	movs	r3, #64	; 0x40
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180c:	2302      	movs	r3, #2
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001810:	2302      	movs	r3, #2
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001814:	2301      	movs	r3, #1
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 15;
 8001818:	230f      	movs	r3, #15
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800181c:	2302      	movs	r3, #2
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001820:	2302      	movs	r3, #2
 8001822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001824:	2302      	movs	r3, #2
 8001826:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001828:	f107 0318 	add.w	r3, r7, #24
 800182c:	4618      	mov	r0, r3
 800182e:	f003 fc53 	bl	80050d8 <HAL_RCC_OscConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001838:	f000 f828 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183c:	230f      	movs	r3, #15
 800183e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001840:	2303      	movs	r3, #3
 8001842:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2103      	movs	r1, #3
 8001854:	4618      	mov	r0, r3
 8001856:	f003 ff57 	bl	8005708 <HAL_RCC_ClockConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001860:	f000 f814 	bl	800188c <Error_Handler>
  }
}
 8001864:	bf00      	nop
 8001866:	3750      	adds	r7, #80	; 0x50
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	adcFlag = SET;
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	2000032c 	.word	0x2000032c

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x8>
	...

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_MspInit+0x44>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_MspInit+0x44>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6613      	str	r3, [r2, #96]	; 0x60
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_MspInit+0x44>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x44>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x44>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6593      	str	r3, [r2, #88]	; 0x58
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x44>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <NMI_Handler+0x4>

080018e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <HardFault_Handler+0x4>

080018ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <MemManage_Handler+0x4>

080018f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <UsageFault_Handler+0x4>

080018fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192c:	f000 fc42 	bl	80021b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}

08001934 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <DMA1_Channel1_IRQHandler+0x10>)
 800193a:	f002 ff19 	bl	8004770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000268 	.word	0x20000268

08001948 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <DMA1_Channel2_IRQHandler+0x10>)
 800194e:	f002 ff0f 	bl	8004770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000468 	.word	0x20000468

0800195c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <ADC1_2_IRQHandler+0x10>)
 8001962:	f001 f90f 	bl	8002b84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200001fc 	.word	0x200001fc

08001970 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  return 1;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_kill>:

int _kill(int pid, int sig)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001998:	f006 fd6a 	bl	8008470 <__errno>
 800199c:	4603      	mov	r3, r0
 800199e:	2216      	movs	r2, #22
 80019a0:	601a      	str	r2, [r3, #0]
  return -1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <_exit>:

void _exit (int status)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019b6:	f04f 31ff 	mov.w	r1, #4294967295
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffe7 	bl	800198e <_kill>
  while (1) {}    /* Make sure we hang here */
 80019c0:	e7fe      	b.n	80019c0 <_exit+0x12>

080019c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	e00a      	b.n	80019ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019d4:	f3af 8000 	nop.w
 80019d8:	4601      	mov	r1, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	60ba      	str	r2, [r7, #8]
 80019e0:	b2ca      	uxtb	r2, r1
 80019e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	dbf0      	blt.n	80019d4 <_read+0x12>
  }

  return len;
 80019f2:	687b      	ldr	r3, [r7, #4]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a24:	605a      	str	r2, [r3, #4]
  return 0;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_isatty>:

int _isatty(int file)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a3c:	2301      	movs	r3, #1
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a6c:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <_sbrk+0x5c>)
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <_sbrk+0x60>)
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <_sbrk+0x64>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <_sbrk+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d207      	bcs.n	8001aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a94:	f006 fcec 	bl	8008470 <__errno>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	e009      	b.n	8001ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <_sbrk+0x64>)
 8001ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20008000 	.word	0x20008000
 8001ac4:	00000400 	.word	0x00000400
 8001ac8:	20000334 	.word	0x20000334
 8001acc:	20000570 	.word	0x20000570

08001ad0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <SystemInit+0x20>)
 8001ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ada:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <SystemInit+0x20>)
 8001adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
DMA_HandleTypeDef hdma_tim2_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08e      	sub	sp, #56	; 0x38
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b14:	463b      	mov	r3, r7
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
 8001b20:	611a      	str	r2, [r3, #16]
 8001b22:	615a      	str	r2, [r3, #20]
 8001b24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <MX_TIM2_Init+0xe8>)
 8001b28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20000;
 8001b2e:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <MX_TIM2_Init+0xe8>)
 8001b30:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b36:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <MX_TIM2_Init+0xe8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5;
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <MX_TIM2_Init+0xe8>)
 8001b3e:	2205      	movs	r2, #5
 8001b40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <MX_TIM2_Init+0xe8>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b48:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <MX_TIM2_Init+0xe8>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b4e:	4823      	ldr	r0, [pc, #140]	; (8001bdc <MX_TIM2_Init+0xe8>)
 8001b50:	f004 f9e6 	bl	8005f20 <HAL_TIM_Base_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b5a:	f7ff fe97 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	481c      	ldr	r0, [pc, #112]	; (8001bdc <MX_TIM2_Init+0xe8>)
 8001b6c:	f004 feb8 	bl	80068e0 <HAL_TIM_ConfigClockSource>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b76:	f7ff fe89 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001b7a:	4818      	ldr	r0, [pc, #96]	; (8001bdc <MX_TIM2_Init+0xe8>)
 8001b7c:	f004 fa8a 	bl	8006094 <HAL_TIM_OC_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b86:	f7ff fe81 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	4619      	mov	r1, r3
 8001b98:	4810      	ldr	r0, [pc, #64]	; (8001bdc <MX_TIM2_Init+0xe8>)
 8001b9a:	f005 fd45 	bl	8007628 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ba4:	f7ff fe72 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001ba8:	2330      	movs	r3, #48	; 0x30
 8001baa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4807      	ldr	r0, [pc, #28]	; (8001bdc <MX_TIM2_Init+0xe8>)
 8001bc0:	f004 fc24 	bl	800640c <HAL_TIM_OC_ConfigChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001bca:	f7ff fe5f 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bce:	4803      	ldr	r0, [pc, #12]	; (8001bdc <MX_TIM2_Init+0xe8>)
 8001bd0:	f000 f976 	bl	8001ec0 <HAL_TIM_MspPostInit>

}
 8001bd4:	bf00      	nop
 8001bd6:	3738      	adds	r7, #56	; 0x38
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000338 	.word	0x20000338

08001be0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08e      	sub	sp, #56	; 0x38
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c00:	463b      	mov	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]
 8001c0e:	615a      	str	r2, [r3, #20]
 8001c10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c12:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <MX_TIM3_Init+0xe4>)
 8001c14:	4a2c      	ldr	r2, [pc, #176]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <MX_TIM3_Init+0xe4>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <MX_TIM3_Init+0xe4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 29;
 8001c24:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <MX_TIM3_Init+0xe4>)
 8001c26:	221d      	movs	r2, #29
 8001c28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <MX_TIM3_Init+0xe4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <MX_TIM3_Init+0xe4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c36:	4823      	ldr	r0, [pc, #140]	; (8001cc4 <MX_TIM3_Init+0xe4>)
 8001c38:	f004 f972 	bl	8005f20 <HAL_TIM_Base_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c42:	f7ff fe23 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c50:	4619      	mov	r1, r3
 8001c52:	481c      	ldr	r0, [pc, #112]	; (8001cc4 <MX_TIM3_Init+0xe4>)
 8001c54:	f004 fe44 	bl	80068e0 <HAL_TIM_ConfigClockSource>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c5e:	f7ff fe15 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001c62:	4818      	ldr	r0, [pc, #96]	; (8001cc4 <MX_TIM3_Init+0xe4>)
 8001c64:	f004 fa16 	bl	8006094 <HAL_TIM_OC_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c6e:	f7ff fe0d 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c72:	2320      	movs	r3, #32
 8001c74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c7a:	f107 031c 	add.w	r3, r7, #28
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4810      	ldr	r0, [pc, #64]	; (8001cc4 <MX_TIM3_Init+0xe4>)
 8001c82:	f005 fcd1 	bl	8007628 <HAL_TIMEx_MasterConfigSynchronization>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c8c:	f7ff fdfe 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001c90:	2330      	movs	r3, #48	; 0x30
 8001c92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <MX_TIM3_Init+0xe4>)
 8001ca8:	f004 fbb0 	bl	800640c <HAL_TIM_OC_ConfigChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001cb2:	f7ff fdeb 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cb6:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <MX_TIM3_Init+0xe4>)
 8001cb8:	f000 f902 	bl	8001ec0 <HAL_TIM_MspPostInit>

}
 8001cbc:	bf00      	nop
 8001cbe:	3738      	adds	r7, #56	; 0x38
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000384 	.word	0x20000384
 8001cc8:	40000400 	.word	0x40000400

08001ccc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <MX_TIM6_Init+0x78>)
 8001cde:	4a1a      	ldr	r2, [pc, #104]	; (8001d48 <MX_TIM6_Init+0x7c>)
 8001ce0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40000;
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <MX_TIM6_Init+0x78>)
 8001ce4:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001ce8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <MX_TIM6_Init+0x78>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20999;
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <MX_TIM6_Init+0x78>)
 8001cf2:	f245 2207 	movw	r2, #20999	; 0x5207
 8001cf6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <MX_TIM6_Init+0x78>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cfe:	4811      	ldr	r0, [pc, #68]	; (8001d44 <MX_TIM6_Init+0x78>)
 8001d00:	f004 f90e 	bl	8005f20 <HAL_TIM_Base_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001d0a:	f7ff fdbf 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8001d0e:	2108      	movs	r1, #8
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <MX_TIM6_Init+0x78>)
 8001d12:	f004 fb21 	bl	8006358 <HAL_TIM_OnePulse_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM6_Init+0x54>
  {
    Error_Handler();
 8001d1c:	f7ff fdb6 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d20:	2300      	movs	r3, #0
 8001d22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_TIM6_Init+0x78>)
 8001d2e:	f005 fc7b 	bl	8007628 <HAL_TIMEx_MasterConfigSynchronization>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM6_Init+0x70>
  {
    Error_Handler();
 8001d38:	f7ff fda8 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	200003d0 	.word	0x200003d0
 8001d48:	40001000 	.word	0x40001000

08001d4c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <MX_TIM7_Init+0x64>)
 8001d5e:	4a15      	ldr	r2, [pc, #84]	; (8001db4 <MX_TIM7_Init+0x68>)
 8001d60:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1;
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <MX_TIM7_Init+0x64>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_TIM7_Init+0x64>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 59;
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <MX_TIM7_Init+0x64>)
 8001d70:	223b      	movs	r2, #59	; 0x3b
 8001d72:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_TIM7_Init+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d7a:	480d      	ldr	r0, [pc, #52]	; (8001db0 <MX_TIM7_Init+0x64>)
 8001d7c:	f004 f8d0 	bl	8005f20 <HAL_TIM_Base_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001d86:	f7ff fd81 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4806      	ldr	r0, [pc, #24]	; (8001db0 <MX_TIM7_Init+0x64>)
 8001d98:	f005 fc46 	bl	8007628 <HAL_TIMEx_MasterConfigSynchronization>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001da2:	f7ff fd73 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2000041c 	.word	0x2000041c
 8001db4:	40001400 	.word	0x40001400

08001db8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc8:	d135      	bne.n	8001e36 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dca:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <HAL_TIM_Base_MspInit+0xf0>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	4a36      	ldr	r2, [pc, #216]	; (8001ea8 <HAL_TIM_Base_MspInit+0xf0>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd6:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <HAL_TIM_Base_MspInit+0xf0>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8001de2:	4b32      	ldr	r3, [pc, #200]	; (8001eac <HAL_TIM_Base_MspInit+0xf4>)
 8001de4:	4a32      	ldr	r2, [pc, #200]	; (8001eb0 <HAL_TIM_Base_MspInit+0xf8>)
 8001de6:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 8001de8:	4b30      	ldr	r3, [pc, #192]	; (8001eac <HAL_TIM_Base_MspInit+0xf4>)
 8001dea:	223c      	movs	r2, #60	; 0x3c
 8001dec:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dee:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_TIM_Base_MspInit+0xf4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df4:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <HAL_TIM_Base_MspInit+0xf4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8001dfa:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <HAL_TIM_Base_MspInit+0xf4>)
 8001dfc:	2280      	movs	r2, #128	; 0x80
 8001dfe:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e00:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <HAL_TIM_Base_MspInit+0xf4>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e06:	4b29      	ldr	r3, [pc, #164]	; (8001eac <HAL_TIM_Base_MspInit+0xf4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <HAL_TIM_Base_MspInit+0xf4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <HAL_TIM_Base_MspInit+0xf4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8001e18:	4824      	ldr	r0, [pc, #144]	; (8001eac <HAL_TIM_Base_MspInit+0xf4>)
 8001e1a:	f002 fb1f 	bl	800445c <HAL_DMA_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8001e24:	f7ff fd32 	bl	800188c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a20      	ldr	r2, [pc, #128]	; (8001eac <HAL_TIM_Base_MspInit+0xf4>)
 8001e2c:	621a      	str	r2, [r3, #32]
 8001e2e:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <HAL_TIM_Base_MspInit+0xf4>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001e34:	e034      	b.n	8001ea0 <HAL_TIM_Base_MspInit+0xe8>
  else if(tim_baseHandle->Instance==TIM3)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	; (8001eb4 <HAL_TIM_Base_MspInit+0xfc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d10c      	bne.n	8001e5a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <HAL_TIM_Base_MspInit+0xf0>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <HAL_TIM_Base_MspInit+0xf0>)
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_TIM_Base_MspInit+0xf0>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693b      	ldr	r3, [r7, #16]
}
 8001e58:	e022      	b.n	8001ea0 <HAL_TIM_Base_MspInit+0xe8>
  else if(tim_baseHandle->Instance==TIM6)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a16      	ldr	r2, [pc, #88]	; (8001eb8 <HAL_TIM_Base_MspInit+0x100>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d10c      	bne.n	8001e7e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_TIM_Base_MspInit+0xf0>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	4a0f      	ldr	r2, [pc, #60]	; (8001ea8 <HAL_TIM_Base_MspInit+0xf0>)
 8001e6a:	f043 0310 	orr.w	r3, r3, #16
 8001e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <HAL_TIM_Base_MspInit+0xf0>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
}
 8001e7c:	e010      	b.n	8001ea0 <HAL_TIM_Base_MspInit+0xe8>
  else if(tim_baseHandle->Instance==TIM7)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <HAL_TIM_Base_MspInit+0x104>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d10b      	bne.n	8001ea0 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_TIM_Base_MspInit+0xf0>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <HAL_TIM_Base_MspInit+0xf0>)
 8001e8e:	f043 0320 	orr.w	r3, r3, #32
 8001e92:	6593      	str	r3, [r2, #88]	; 0x58
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <HAL_TIM_Base_MspInit+0xf0>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
}
 8001ea0:	bf00      	nop
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	20000468 	.word	0x20000468
 8001eb0:	4002001c 	.word	0x4002001c
 8001eb4:	40000400 	.word	0x40000400
 8001eb8:	40001000 	.word	0x40001000
 8001ebc:	40001400 	.word	0x40001400

08001ec0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee0:	d11d      	bne.n	8001f1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_TIM_MspPostInit+0xa8>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	4a20      	ldr	r2, [pc, #128]	; (8001f68 <HAL_TIM_MspPostInit+0xa8>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <HAL_TIM_MspPostInit+0xa8>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001efa:	2320      	movs	r3, #32
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f18:	f002 fd7a 	bl	8004a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f1c:	e020      	b.n	8001f60 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <HAL_TIM_MspPostInit+0xac>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d11b      	bne.n	8001f60 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_TIM_MspPostInit+0xa8>)
 8001f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2c:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <HAL_TIM_MspPostInit+0xa8>)
 8001f2e:	f043 0302 	orr.w	r3, r3, #2
 8001f32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <HAL_TIM_MspPostInit+0xa8>)
 8001f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f40:	2310      	movs	r3, #16
 8001f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f50:	2302      	movs	r3, #2
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <HAL_TIM_MspPostInit+0xb0>)
 8001f5c:	f002 fd58 	bl	8004a10 <HAL_GPIO_Init>
}
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	; 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40000400 	.word	0x40000400
 8001f70:	48000400 	.word	0x48000400

08001f74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <MX_USART2_UART_Init+0x90>)
 8001f7a:	4a23      	ldr	r2, [pc, #140]	; (8002008 <MX_USART2_UART_Init+0x94>)
 8001f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f7e:	4b21      	ldr	r3, [pc, #132]	; (8002004 <MX_USART2_UART_Init+0x90>)
 8001f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <MX_USART2_UART_Init+0x90>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <MX_USART2_UART_Init+0x90>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <MX_USART2_UART_Init+0x90>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <MX_USART2_UART_Init+0x90>)
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9e:	4b19      	ldr	r3, [pc, #100]	; (8002004 <MX_USART2_UART_Init+0x90>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa4:	4b17      	ldr	r3, [pc, #92]	; (8002004 <MX_USART2_UART_Init+0x90>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001faa:	4b16      	ldr	r3, [pc, #88]	; (8002004 <MX_USART2_UART_Init+0x90>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <MX_USART2_UART_Init+0x90>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <MX_USART2_UART_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fbc:	4811      	ldr	r0, [pc, #68]	; (8002004 <MX_USART2_UART_Init+0x90>)
 8001fbe:	f005 fbed 	bl	800779c <HAL_UART_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001fc8:	f7ff fc60 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fcc:	2100      	movs	r1, #0
 8001fce:	480d      	ldr	r0, [pc, #52]	; (8002004 <MX_USART2_UART_Init+0x90>)
 8001fd0:	f006 f984 	bl	80082dc <HAL_UARTEx_SetTxFifoThreshold>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001fda:	f7ff fc57 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4808      	ldr	r0, [pc, #32]	; (8002004 <MX_USART2_UART_Init+0x90>)
 8001fe2:	f006 f9b9 	bl	8008358 <HAL_UARTEx_SetRxFifoThreshold>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001fec:	f7ff fc4e 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ff0:	4804      	ldr	r0, [pc, #16]	; (8002004 <MX_USART2_UART_Init+0x90>)
 8001ff2:	f006 f93a 	bl	800826a <HAL_UARTEx_DisableFifoMode>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ffc:	f7ff fc46 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200004c8 	.word	0x200004c8
 8002008:	40004400 	.word	0x40004400

0800200c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b09a      	sub	sp, #104	; 0x68
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	2244      	movs	r2, #68	; 0x44
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f006 fa49 	bl	80084c4 <memset>
  if(uartHandle->Instance==USART2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HAL_UART_MspInit+0xa8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d136      	bne.n	80020aa <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800203c:	2302      	movs	r3, #2
 800203e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002040:	2300      	movs	r3, #0
 8002042:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	4618      	mov	r0, r3
 800204a:	f003 fd79 	bl	8005b40 <HAL_RCCEx_PeriphCLKConfig>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002054:	f7ff fc1a 	bl	800188c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002058:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_UART_MspInit+0xac>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	4a16      	ldr	r2, [pc, #88]	; (80020b8 <HAL_UART_MspInit+0xac>)
 800205e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002062:	6593      	str	r3, [r2, #88]	; 0x58
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_UART_MspInit+0xac>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_UART_MspInit+0xac>)
 8002072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002074:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <HAL_UART_MspInit+0xac>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_UART_MspInit+0xac>)
 800207e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002088:	230c      	movs	r3, #12
 800208a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002098:	2307      	movs	r3, #7
 800209a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020a0:	4619      	mov	r1, r3
 80020a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a6:	f002 fcb3 	bl	8004a10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020aa:	bf00      	nop
 80020ac:	3768      	adds	r7, #104	; 0x68
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40004400 	.word	0x40004400
 80020b8:	40021000 	.word	0x40021000

080020bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020bc:	480d      	ldr	r0, [pc, #52]	; (80020f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020c0:	480d      	ldr	r0, [pc, #52]	; (80020f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80020c2:	490e      	ldr	r1, [pc, #56]	; (80020fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80020c4:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <LoopForever+0xe>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020c8:	e002      	b.n	80020d0 <LoopCopyDataInit>

080020ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ce:	3304      	adds	r3, #4

080020d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d4:	d3f9      	bcc.n	80020ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020d8:	4c0b      	ldr	r4, [pc, #44]	; (8002108 <LoopForever+0x16>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020dc:	e001      	b.n	80020e2 <LoopFillZerobss>

080020de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e0:	3204      	adds	r2, #4

080020e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e4:	d3fb      	bcc.n	80020de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020e6:	f7ff fcf3 	bl	8001ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ea:	f006 f9c7 	bl	800847c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ee:	f7ff fad5 	bl	800169c <main>

080020f2 <LoopForever>:

LoopForever:
    b LoopForever
 80020f2:	e7fe      	b.n	80020f2 <LoopForever>
  ldr   r0, =_estack
 80020f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80020f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020fc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002100:	0800d334 	.word	0x0800d334
  ldr r2, =_sbss
 8002104:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002108:	2000056c 	.word	0x2000056c

0800210c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800210c:	e7fe      	b.n	800210c <COMP1_2_3_IRQHandler>

0800210e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002118:	2003      	movs	r0, #3
 800211a:	f001 ff0b 	bl	8003f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800211e:	2000      	movs	r0, #0
 8002120:	f000 f80e 	bl	8002140 <HAL_InitTick>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	71fb      	strb	r3, [r7, #7]
 800212e:	e001      	b.n	8002134 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002130:	f7ff fbb2 	bl	8001898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002134:	79fb      	ldrb	r3, [r7, #7]

}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800214c:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_InitTick+0x68>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d022      	beq.n	800219a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_InitTick+0x6c>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_InitTick+0x68>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002160:	fbb1 f3f3 	udiv	r3, r1, r3
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	4618      	mov	r0, r3
 800216a:	f001 ff16 	bl	8003f9a <HAL_SYSTICK_Config>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10f      	bne.n	8002194 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b0f      	cmp	r3, #15
 8002178:	d809      	bhi.n	800218e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800217a:	2200      	movs	r2, #0
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	f04f 30ff 	mov.w	r0, #4294967295
 8002182:	f001 fee2 	bl	8003f4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_InitTick+0x70>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	e007      	b.n	800219e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	e004      	b.n	800219e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e001      	b.n	800219e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000008 	.word	0x20000008
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000004 	.word	0x20000004

080021b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_IncTick+0x1c>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_IncTick+0x20>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	4a03      	ldr	r2, [pc, #12]	; (80021d0 <HAL_IncTick+0x1c>)
 80021c4:	6013      	str	r3, [r2, #0]
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	20000558 	.word	0x20000558
 80021d4:	20000008 	.word	0x20000008

080021d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return uwTick;
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_GetTick+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000558 	.word	0x20000558

080021f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff ffee 	bl	80021d8 <HAL_GetTick>
 80021fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d004      	beq.n	8002214 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_Delay+0x40>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4413      	add	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002214:	bf00      	nop
 8002216:	f7ff ffdf 	bl	80021d8 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	429a      	cmp	r2, r3
 8002224:	d8f7      	bhi.n	8002216 <HAL_Delay+0x26>
  {
  }
}
 8002226:	bf00      	nop
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000008 	.word	0x20000008

08002234 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	609a      	str	r2, [r3, #8]
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3360      	adds	r3, #96	; 0x60
 80022ae:	461a      	mov	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <LL_ADC_SetOffset+0x44>)
 80022be:	4013      	ands	r3, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022d4:	bf00      	nop
 80022d6:	371c      	adds	r7, #28
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	03fff000 	.word	0x03fff000

080022e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3360      	adds	r3, #96	; 0x60
 80022f2:	461a      	mov	r2, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3360      	adds	r3, #96	; 0x60
 8002320:	461a      	mov	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	431a      	orrs	r2, r3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800233a:	bf00      	nop
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002346:	b480      	push	{r7}
 8002348:	b087      	sub	sp, #28
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3360      	adds	r3, #96	; 0x60
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	431a      	orrs	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002370:	bf00      	nop
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3360      	adds	r3, #96	; 0x60
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	431a      	orrs	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80023a6:	bf00      	nop
 80023a8:	371c      	adds	r7, #28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	615a      	str	r2, [r3, #20]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023fe:	b480      	push	{r7}
 8002400:	b087      	sub	sp, #28
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3330      	adds	r3, #48	; 0x30
 800240e:	461a      	mov	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	4413      	add	r3, r2
 800241c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	211f      	movs	r1, #31
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	401a      	ands	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0e9b      	lsrs	r3, r3, #26
 8002436:	f003 011f 	and.w	r1, r3, #31
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	431a      	orrs	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800244a:	bf00      	nop
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3314      	adds	r3, #20
 800248c:	461a      	mov	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	0e5b      	lsrs	r3, r3, #25
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	4413      	add	r3, r2
 800249a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	0d1b      	lsrs	r3, r3, #20
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	2107      	movs	r1, #7
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	401a      	ands	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	0d1b      	lsrs	r3, r3, #20
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	431a      	orrs	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a0f      	ldr	r2, [pc, #60]	; (8002520 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d10a      	bne.n	80024fe <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f4:	431a      	orrs	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80024fc:	e00a      	b.n	8002514 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250a:	43db      	mvns	r3, r3
 800250c:	401a      	ands	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	407f0000 	.word	0x407f0000

08002524 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 031f 	and.w	r3, r3, #31
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800256c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6093      	str	r3, [r2, #8]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002594:	d101      	bne.n	800259a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80025b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025e4:	d101      	bne.n	80025ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002608:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800260c:	f043 0201 	orr.w	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002630:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002634:	f043 0202 	orr.w	r2, r3, #2
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <LL_ADC_IsEnabled+0x18>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <LL_ADC_IsEnabled+0x1a>
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b02      	cmp	r3, #2
 8002680:	d101      	bne.n	8002686 <LL_ADC_IsDisableOngoing+0x18>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <LL_ADC_IsDisableOngoing+0x1a>
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a8:	f043 0204 	orr.w	r2, r3, #4
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d101      	bne.n	80026d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d101      	bne.n	80026fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b089      	sub	sp, #36	; 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002714:	2300      	movs	r3, #0
 8002716:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e177      	b.n	8002a12 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7fe fd03 	bl	800113c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff19 	bl	8002580 <LL_ADC_IsDeepPowerDownEnabled>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d004      	beq.n	800275e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff feff 	bl	800255c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff ff34 	bl	80025d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d115      	bne.n	800279a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff18 	bl	80025a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002778:	4b9c      	ldr	r3, [pc, #624]	; (80029ec <HAL_ADC_Init+0x2e4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	099b      	lsrs	r3, r3, #6
 800277e:	4a9c      	ldr	r2, [pc, #624]	; (80029f0 <HAL_ADC_Init+0x2e8>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	3301      	adds	r3, #1
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800278c:	e002      	b.n	8002794 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	3b01      	subs	r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f9      	bne.n	800278e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ff16 	bl	80025d0 <LL_ADC_IsInternalRegulatorEnabled>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10d      	bne.n	80027c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ae:	f043 0210 	orr.w	r2, r3, #16
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ba:	f043 0201 	orr.w	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff76 	bl	80026bc <LL_ADC_REG_IsConversionOngoing>
 80027d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 8110 	bne.w	8002a00 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 810c 	bne.w	8002a00 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027f0:	f043 0202 	orr.w	r2, r3, #2
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff23 	bl	8002648 <LL_ADC_IsEnabled>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d111      	bne.n	800282c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002808:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800280c:	f7ff ff1c 	bl	8002648 <LL_ADC_IsEnabled>
 8002810:	4604      	mov	r4, r0
 8002812:	4878      	ldr	r0, [pc, #480]	; (80029f4 <HAL_ADC_Init+0x2ec>)
 8002814:	f7ff ff18 	bl	8002648 <LL_ADC_IsEnabled>
 8002818:	4603      	mov	r3, r0
 800281a:	4323      	orrs	r3, r4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4619      	mov	r1, r3
 8002826:	4874      	ldr	r0, [pc, #464]	; (80029f8 <HAL_ADC_Init+0x2f0>)
 8002828:	f7ff fd04 	bl	8002234 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7f5b      	ldrb	r3, [r3, #29]
 8002830:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002836:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800283c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002842:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800284a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002856:	2b01      	cmp	r3, #1
 8002858:	d106      	bne.n	8002868 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	3b01      	subs	r3, #1
 8002860:	045b      	lsls	r3, r3, #17
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d009      	beq.n	8002884 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	4b5c      	ldr	r3, [pc, #368]	; (80029fc <HAL_ADC_Init+0x2f4>)
 800288c:	4013      	ands	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	69b9      	ldr	r1, [r7, #24]
 8002894:	430b      	orrs	r3, r1
 8002896:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff02 	bl	80026bc <LL_ADC_REG_IsConversionOngoing>
 80028b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ff0f 	bl	80026e2 <LL_ADC_INJ_IsConversionOngoing>
 80028c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d16d      	bne.n	80029a8 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d16a      	bne.n	80029a8 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028d6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028de:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028ee:	f023 0302 	bic.w	r3, r3, #2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	69b9      	ldr	r1, [r7, #24]
 80028f8:	430b      	orrs	r3, r1
 80028fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d017      	beq.n	8002934 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002912:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800291c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6911      	ldr	r1, [r2, #16]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	430b      	orrs	r3, r1
 800292e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002932:	e013      	b.n	800295c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002942:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002954:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002958:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002962:	2b01      	cmp	r3, #1
 8002964:	d118      	bne.n	8002998 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002970:	f023 0304 	bic.w	r3, r3, #4
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800297c:	4311      	orrs	r1, r2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002982:	4311      	orrs	r1, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002988:	430a      	orrs	r2, r1
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	611a      	str	r2, [r3, #16]
 8002996:	e007      	b.n	80029a8 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d10c      	bne.n	80029ca <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f023 010f 	bic.w	r1, r3, #15
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	1e5a      	subs	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
 80029c8:	e007      	b.n	80029da <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 020f 	bic.w	r2, r2, #15
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80029ea:	e011      	b.n	8002a10 <HAL_ADC_Init+0x308>
 80029ec:	20000000 	.word	0x20000000
 80029f0:	053e2d63 	.word	0x053e2d63
 80029f4:	50000100 	.word	0x50000100
 80029f8:	50000300 	.word	0x50000300
 80029fc:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	f043 0210 	orr.w	r2, r3, #16
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a10:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	; 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd90      	pop	{r4, r7, pc}
 8002a1a:	bf00      	nop

08002a1c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a28:	4851      	ldr	r0, [pc, #324]	; (8002b70 <HAL_ADC_Start_DMA+0x154>)
 8002a2a:	f7ff fd7b 	bl	8002524 <LL_ADC_GetMultimode>
 8002a2e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fe41 	bl	80026bc <LL_ADC_REG_IsConversionOngoing>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f040 808f 	bne.w	8002b60 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_Start_DMA+0x34>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e08a      	b.n	8002b66 <HAL_ADC_Start_DMA+0x14a>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d002      	beq.n	8002a6a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2b09      	cmp	r3, #9
 8002a68:	d173      	bne.n	8002b52 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 feb2 	bl	80037d4 <ADC_Enable>
 8002a70:	4603      	mov	r3, r0
 8002a72:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d166      	bne.n	8002b48 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a38      	ldr	r2, [pc, #224]	; (8002b74 <HAL_ADC_Start_DMA+0x158>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d002      	beq.n	8002a9e <HAL_ADC_Start_DMA+0x82>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	e001      	b.n	8002aa2 <HAL_ADC_Start_DMA+0x86>
 8002a9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d002      	beq.n	8002ab0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d105      	bne.n	8002abc <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d006      	beq.n	8002ad6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002acc:	f023 0206 	bic.w	r2, r3, #6
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	661a      	str	r2, [r3, #96]	; 0x60
 8002ad4:	e002      	b.n	8002adc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	4a25      	ldr	r2, [pc, #148]	; (8002b78 <HAL_ADC_Start_DMA+0x15c>)
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	4a24      	ldr	r2, [pc, #144]	; (8002b7c <HAL_ADC_Start_DMA+0x160>)
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af0:	4a23      	ldr	r2, [pc, #140]	; (8002b80 <HAL_ADC_Start_DMA+0x164>)
 8002af2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	221c      	movs	r2, #28
 8002afa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0210 	orr.w	r2, r2, #16
 8002b12:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3340      	adds	r3, #64	; 0x40
 8002b2e:	4619      	mov	r1, r3
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f001 fd3a 	bl	80045ac <HAL_DMA_Start_IT>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fda7 	bl	8002694 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002b46:	e00d      	b.n	8002b64 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002b50:	e008      	b.n	8002b64 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002b5e:	e001      	b.n	8002b64 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b60:	2302      	movs	r3, #2
 8002b62:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	50000300 	.word	0x50000300
 8002b74:	50000100 	.word	0x50000100
 8002b78:	08003957 	.word	0x08003957
 8002b7c:	08003a2f 	.word	0x08003a2f
 8002b80:	08003a4b 	.word	0x08003a4b

08002b84 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ba0:	4883      	ldr	r0, [pc, #524]	; (8002db0 <HAL_ADC_IRQHandler+0x22c>)
 8002ba2:	f7ff fcbf 	bl	8002524 <LL_ADC_GetMultimode>
 8002ba6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d017      	beq.n	8002be2 <HAL_ADC_IRQHandler+0x5e>
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d012      	beq.n	8002be2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d105      	bne.n	8002bd4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f001 f82f 	bl	8003c38 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2202      	movs	r2, #2
 8002be0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <HAL_ADC_IRQHandler+0x72>
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8085 	beq.w	8002d0c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d07f      	beq.n	8002d0c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fbd5 	bl	80023d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d064      	beq.n	8002cfe <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a5e      	ldr	r2, [pc, #376]	; (8002db4 <HAL_ADC_IRQHandler+0x230>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d002      	beq.n	8002c44 <HAL_ADC_IRQHandler+0xc0>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	e001      	b.n	8002c48 <HAL_ADC_IRQHandler+0xc4>
 8002c44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d008      	beq.n	8002c62 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b05      	cmp	r3, #5
 8002c5a:	d002      	beq.n	8002c62 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b09      	cmp	r3, #9
 8002c60:	d104      	bne.n	8002c6c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	623b      	str	r3, [r7, #32]
 8002c6a:	e00d      	b.n	8002c88 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a50      	ldr	r2, [pc, #320]	; (8002db4 <HAL_ADC_IRQHandler+0x230>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d002      	beq.n	8002c7c <HAL_ADC_IRQHandler+0xf8>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	e001      	b.n	8002c80 <HAL_ADC_IRQHandler+0xfc>
 8002c7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c80:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d135      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d12e      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fd09 	bl	80026bc <LL_ADC_REG_IsConversionOngoing>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d11a      	bne.n	8002ce6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 020c 	bic.w	r2, r2, #12
 8002cbe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d112      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cdc:	f043 0201 	orr.w	r2, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ce4:	e00b      	b.n	8002cfe <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	f043 0210 	orr.w	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf6:	f043 0201 	orr.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe fdb4 	bl	800186c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	220c      	movs	r2, #12
 8002d0a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d004      	beq.n	8002d20 <HAL_ADC_IRQHandler+0x19c>
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10b      	bne.n	8002d38 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 809e 	beq.w	8002e68 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8098 	beq.w	8002e68 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fb7e 	bl	8002456 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002d5a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fb39 	bl	80023d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d66:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a11      	ldr	r2, [pc, #68]	; (8002db4 <HAL_ADC_IRQHandler+0x230>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d002      	beq.n	8002d78 <HAL_ADC_IRQHandler+0x1f4>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	e001      	b.n	8002d7c <HAL_ADC_IRQHandler+0x1f8>
 8002d78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d008      	beq.n	8002d96 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b06      	cmp	r3, #6
 8002d8e:	d002      	beq.n	8002d96 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b07      	cmp	r3, #7
 8002d94:	d104      	bne.n	8002da0 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	623b      	str	r3, [r7, #32]
 8002d9e:	e011      	b.n	8002dc4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a03      	ldr	r2, [pc, #12]	; (8002db4 <HAL_ADC_IRQHandler+0x230>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d006      	beq.n	8002db8 <HAL_ADC_IRQHandler+0x234>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	e005      	b.n	8002dbc <HAL_ADC_IRQHandler+0x238>
 8002db0:	50000300 	.word	0x50000300
 8002db4:	50000100 	.word	0x50000100
 8002db8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dbc:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d047      	beq.n	8002e5a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d007      	beq.n	8002de4 <HAL_ADC_IRQHandler+0x260>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d03f      	beq.n	8002e5a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d13a      	bne.n	8002e5a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d133      	bne.n	8002e5a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d12e      	bne.n	8002e5a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fc6e 	bl	80026e2 <LL_ADC_INJ_IsConversionOngoing>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11a      	bne.n	8002e42 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e1a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e20:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d112      	bne.n	8002e5a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e40:	e00b      	b.n	8002e5a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	f043 0210 	orr.w	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e52:	f043 0201 	orr.w	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fec4 	bl	8003be8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2260      	movs	r2, #96	; 0x60
 8002e66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d011      	beq.n	8002e96 <HAL_ADC_IRQHandler+0x312>
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f89f 	bl	8002fcc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d012      	beq.n	8002ec6 <HAL_ADC_IRQHandler+0x342>
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 feaa 	bl	8003c10 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ec4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d012      	beq.n	8002ef6 <HAL_ADC_IRQHandler+0x372>
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00d      	beq.n	8002ef6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fe9c 	bl	8003c24 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d036      	beq.n	8002f6e <HAL_ADC_IRQHandler+0x3ea>
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d031      	beq.n	8002f6e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002f12:	2301      	movs	r3, #1
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
 8002f16:	e014      	b.n	8002f42 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d008      	beq.n	8002f30 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f1e:	4825      	ldr	r0, [pc, #148]	; (8002fb4 <HAL_ADC_IRQHandler+0x430>)
 8002f20:	f7ff fb0e 	bl	8002540 <LL_ADC_GetMultiDMATransfer>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2e:	e008      	b.n	8002f42 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d10e      	bne.n	8002f66 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f58:	f043 0202 	orr.w	r2, r3, #2
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f83d 	bl	8002fe0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2210      	movs	r2, #16
 8002f6c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d018      	beq.n	8002faa <HAL_ADC_IRQHandler+0x426>
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d013      	beq.n	8002faa <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f92:	f043 0208 	orr.w	r2, r3, #8
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fe29 	bl	8003bfc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002faa:	bf00      	nop
 8002fac:	3728      	adds	r7, #40	; 0x28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	50000300 	.word	0x50000300

08002fb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b0b6      	sub	sp, #216	; 0xd8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x22>
 8003012:	2302      	movs	r3, #2
 8003014:	e3c8      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x7b4>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fb4a 	bl	80026bc <LL_ADC_REG_IsConversionOngoing>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	f040 83ad 	bne.w	800378a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	f7ff f9de 	bl	80023fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fb38 	bl	80026bc <LL_ADC_REG_IsConversionOngoing>
 800304c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fb44 	bl	80026e2 <LL_ADC_INJ_IsConversionOngoing>
 800305a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800305e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003062:	2b00      	cmp	r3, #0
 8003064:	f040 81d9 	bne.w	800341a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800306c:	2b00      	cmp	r3, #0
 800306e:	f040 81d4 	bne.w	800341a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800307a:	d10f      	bne.n	800309c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2200      	movs	r2, #0
 8003086:	4619      	mov	r1, r3
 8003088:	f7ff f9f8 	bl	800247c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff f98c 	bl	80023b2 <LL_ADC_SetSamplingTimeCommonConfig>
 800309a:	e00e      	b.n	80030ba <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	461a      	mov	r2, r3
 80030aa:	f7ff f9e7 	bl	800247c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff f97c 	bl	80023b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	08db      	lsrs	r3, r3, #3
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d022      	beq.n	8003122 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6919      	ldr	r1, [r3, #16]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030ec:	f7ff f8d6 	bl	800229c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6919      	ldr	r1, [r3, #16]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	461a      	mov	r2, r3
 80030fe:	f7ff f922 	bl	8002346 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6919      	ldr	r1, [r3, #16]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	7f1b      	ldrb	r3, [r3, #28]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d102      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x124>
 8003112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003116:	e000      	b.n	800311a <HAL_ADC_ConfigChannel+0x126>
 8003118:	2300      	movs	r3, #0
 800311a:	461a      	mov	r2, r3
 800311c:	f7ff f92e 	bl	800237c <LL_ADC_SetOffsetSaturation>
 8003120:	e17b      	b.n	800341a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff f8db 	bl	80022e4 <LL_ADC_GetOffsetChannel>
 800312e:	4603      	mov	r3, r0
 8003130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <HAL_ADC_ConfigChannel+0x15a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff f8d0 	bl	80022e4 <LL_ADC_GetOffsetChannel>
 8003144:	4603      	mov	r3, r0
 8003146:	0e9b      	lsrs	r3, r3, #26
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	e01e      	b.n	800318c <HAL_ADC_ConfigChannel+0x198>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2100      	movs	r1, #0
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff f8c5 	bl	80022e4 <LL_ADC_GetOffsetChannel>
 800315a:	4603      	mov	r3, r0
 800315c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800316c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003170:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003174:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800317c:	2320      	movs	r3, #32
 800317e:	e004      	b.n	800318a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003194:	2b00      	cmp	r3, #0
 8003196:	d105      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x1b0>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0e9b      	lsrs	r3, r3, #26
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	e018      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x1e2>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80031b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80031c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80031c8:	2320      	movs	r3, #32
 80031ca:	e004      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80031cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031d0:	fab3 f383 	clz	r3, r3
 80031d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d106      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2200      	movs	r2, #0
 80031e0:	2100      	movs	r1, #0
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff f894 	bl	8002310 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2101      	movs	r1, #1
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff f878 	bl	80022e4 <LL_ADC_GetOffsetChannel>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10a      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x220>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2101      	movs	r1, #1
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff f86d 	bl	80022e4 <LL_ADC_GetOffsetChannel>
 800320a:	4603      	mov	r3, r0
 800320c:	0e9b      	lsrs	r3, r3, #26
 800320e:	f003 021f 	and.w	r2, r3, #31
 8003212:	e01e      	b.n	8003252 <HAL_ADC_ConfigChannel+0x25e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2101      	movs	r1, #1
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff f862 	bl	80022e4 <LL_ADC_GetOffsetChannel>
 8003220:	4603      	mov	r3, r0
 8003222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800323a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003242:	2320      	movs	r3, #32
 8003244:	e004      	b.n	8003250 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003246:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325a:	2b00      	cmp	r3, #0
 800325c:	d105      	bne.n	800326a <HAL_ADC_ConfigChannel+0x276>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	0e9b      	lsrs	r3, r3, #26
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	e018      	b.n	800329c <HAL_ADC_ConfigChannel+0x2a8>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800327e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003282:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003286:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800328e:	2320      	movs	r3, #32
 8003290:	e004      	b.n	800329c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003292:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800329c:	429a      	cmp	r2, r3
 800329e:	d106      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2200      	movs	r2, #0
 80032a6:	2101      	movs	r1, #1
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff f831 	bl	8002310 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2102      	movs	r1, #2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff f815 	bl	80022e4 <LL_ADC_GetOffsetChannel>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <HAL_ADC_ConfigChannel+0x2e6>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2102      	movs	r1, #2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff f80a 	bl	80022e4 <LL_ADC_GetOffsetChannel>
 80032d0:	4603      	mov	r3, r0
 80032d2:	0e9b      	lsrs	r3, r3, #26
 80032d4:	f003 021f 	and.w	r2, r3, #31
 80032d8:	e01e      	b.n	8003318 <HAL_ADC_ConfigChannel+0x324>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2102      	movs	r1, #2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe ffff 	bl	80022e4 <LL_ADC_GetOffsetChannel>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032f0:	fa93 f3a3 	rbit	r3, r3
 80032f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003308:	2320      	movs	r3, #32
 800330a:	e004      	b.n	8003316 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800330c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003320:	2b00      	cmp	r3, #0
 8003322:	d105      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x33c>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	0e9b      	lsrs	r3, r3, #26
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	e016      	b.n	800335e <HAL_ADC_ConfigChannel+0x36a>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003350:	2320      	movs	r3, #32
 8003352:	e004      	b.n	800335e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003358:	fab3 f383 	clz	r3, r3
 800335c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800335e:	429a      	cmp	r2, r3
 8003360:	d106      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2200      	movs	r2, #0
 8003368:	2102      	movs	r1, #2
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe ffd0 	bl	8002310 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2103      	movs	r1, #3
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe ffb4 	bl	80022e4 <LL_ADC_GetOffsetChannel>
 800337c:	4603      	mov	r3, r0
 800337e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <HAL_ADC_ConfigChannel+0x3a8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2103      	movs	r1, #3
 800338c:	4618      	mov	r0, r3
 800338e:	f7fe ffa9 	bl	80022e4 <LL_ADC_GetOffsetChannel>
 8003392:	4603      	mov	r3, r0
 8003394:	0e9b      	lsrs	r3, r3, #26
 8003396:	f003 021f 	and.w	r2, r3, #31
 800339a:	e017      	b.n	80033cc <HAL_ADC_ConfigChannel+0x3d8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2103      	movs	r1, #3
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe ff9e 	bl	80022e4 <LL_ADC_GetOffsetChannel>
 80033a8:	4603      	mov	r3, r0
 80033aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80033b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80033b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80033be:	2320      	movs	r3, #32
 80033c0:	e003      	b.n	80033ca <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80033c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x3f0>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	0e9b      	lsrs	r3, r3, #26
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	e011      	b.n	8003408 <HAL_ADC_ConfigChannel+0x414>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80033fc:	2320      	movs	r3, #32
 80033fe:	e003      	b.n	8003408 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003402:	fab3 f383 	clz	r3, r3
 8003406:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003408:	429a      	cmp	r2, r3
 800340a:	d106      	bne.n	800341a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2200      	movs	r2, #0
 8003412:	2103      	movs	r1, #3
 8003414:	4618      	mov	r0, r3
 8003416:	f7fe ff7b 	bl	8002310 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff f912 	bl	8002648 <LL_ADC_IsEnabled>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	f040 8140 	bne.w	80036ac <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6819      	ldr	r1, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	461a      	mov	r2, r3
 800343a:	f7ff f84b 	bl	80024d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	4a8f      	ldr	r2, [pc, #572]	; (8003680 <HAL_ADC_ConfigChannel+0x68c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	f040 8131 	bne.w	80036ac <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10b      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x47e>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	0e9b      	lsrs	r3, r3, #26
 8003460:	3301      	adds	r3, #1
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2b09      	cmp	r3, #9
 8003468:	bf94      	ite	ls
 800346a:	2301      	movls	r3, #1
 800346c:	2300      	movhi	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	e019      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x4b2>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003482:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800348a:	2320      	movs	r3, #32
 800348c:	e003      	b.n	8003496 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800348e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003490:	fab3 f383 	clz	r3, r3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	3301      	adds	r3, #1
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2b09      	cmp	r3, #9
 800349e:	bf94      	ite	ls
 80034a0:	2301      	movls	r3, #1
 80034a2:	2300      	movhi	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d079      	beq.n	800359e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d107      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x4d2>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	0e9b      	lsrs	r3, r3, #26
 80034bc:	3301      	adds	r3, #1
 80034be:	069b      	lsls	r3, r3, #26
 80034c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034c4:	e015      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x4fe>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ce:	fa93 f3a3 	rbit	r3, r3
 80034d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80034d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80034de:	2320      	movs	r3, #32
 80034e0:	e003      	b.n	80034ea <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80034e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e4:	fab3 f383 	clz	r3, r3
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	069b      	lsls	r3, r3, #26
 80034ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x51e>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	0e9b      	lsrs	r3, r3, #26
 8003504:	3301      	adds	r3, #1
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	2101      	movs	r1, #1
 800350c:	fa01 f303 	lsl.w	r3, r1, r3
 8003510:	e017      	b.n	8003542 <HAL_ADC_ConfigChannel+0x54e>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003522:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800352a:	2320      	movs	r3, #32
 800352c:	e003      	b.n	8003536 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800352e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003530:	fab3 f383 	clz	r3, r3
 8003534:	b2db      	uxtb	r3, r3
 8003536:	3301      	adds	r3, #1
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	2101      	movs	r1, #1
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	ea42 0103 	orr.w	r1, r2, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x574>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	0e9b      	lsrs	r3, r3, #26
 8003558:	3301      	adds	r3, #1
 800355a:	f003 021f 	and.w	r2, r3, #31
 800355e:	4613      	mov	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4413      	add	r3, r2
 8003564:	051b      	lsls	r3, r3, #20
 8003566:	e018      	b.n	800359a <HAL_ADC_ConfigChannel+0x5a6>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003578:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800357a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003580:	2320      	movs	r3, #32
 8003582:	e003      	b.n	800358c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003586:	fab3 f383 	clz	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	3301      	adds	r3, #1
 800358e:	f003 021f 	and.w	r2, r3, #31
 8003592:	4613      	mov	r3, r2
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4413      	add	r3, r2
 8003598:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800359a:	430b      	orrs	r3, r1
 800359c:	e081      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d107      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x5c6>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	0e9b      	lsrs	r3, r3, #26
 80035b0:	3301      	adds	r3, #1
 80035b2:	069b      	lsls	r3, r3, #26
 80035b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035b8:	e015      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x5f2>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80035d2:	2320      	movs	r3, #32
 80035d4:	e003      	b.n	80035de <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	fab3 f383 	clz	r3, r3
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	3301      	adds	r3, #1
 80035e0:	069b      	lsls	r3, r3, #26
 80035e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x612>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	0e9b      	lsrs	r3, r3, #26
 80035f8:	3301      	adds	r3, #1
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f303 	lsl.w	r3, r1, r3
 8003604:	e017      	b.n	8003636 <HAL_ADC_ConfigChannel+0x642>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	61fb      	str	r3, [r7, #28]
  return result;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800361e:	2320      	movs	r3, #32
 8003620:	e003      	b.n	800362a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	3301      	adds	r3, #1
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	2101      	movs	r1, #1
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	ea42 0103 	orr.w	r1, r2, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10d      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x66e>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	0e9b      	lsrs	r3, r3, #26
 800364c:	3301      	adds	r3, #1
 800364e:	f003 021f 	and.w	r2, r3, #31
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	3b1e      	subs	r3, #30
 800365a:	051b      	lsls	r3, r3, #20
 800365c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003660:	e01e      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x6ac>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	613b      	str	r3, [r7, #16]
  return result;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800367a:	2320      	movs	r3, #32
 800367c:	e006      	b.n	800368c <HAL_ADC_ConfigChannel+0x698>
 800367e:	bf00      	nop
 8003680:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	3301      	adds	r3, #1
 800368e:	f003 021f 	and.w	r2, r3, #31
 8003692:	4613      	mov	r3, r2
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	4413      	add	r3, r2
 8003698:	3b1e      	subs	r3, #30
 800369a:	051b      	lsls	r3, r3, #20
 800369c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036a0:	430b      	orrs	r3, r1
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	6892      	ldr	r2, [r2, #8]
 80036a6:	4619      	mov	r1, r3
 80036a8:	f7fe fee8 	bl	800247c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <HAL_ADC_ConfigChannel+0x7bc>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d071      	beq.n	800379c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036b8:	483e      	ldr	r0, [pc, #248]	; (80037b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80036ba:	f7fe fde1 	bl	8002280 <LL_ADC_GetCommonPathInternalCh>
 80036be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a3c      	ldr	r2, [pc, #240]	; (80037b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_ADC_ConfigChannel+0x6e2>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a3a      	ldr	r2, [pc, #232]	; (80037bc <HAL_ADC_ConfigChannel+0x7c8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d127      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d121      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ea:	d157      	bne.n	800379c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036f4:	4619      	mov	r1, r3
 80036f6:	482f      	ldr	r0, [pc, #188]	; (80037b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80036f8:	f7fe fdaf 	bl	800225a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036fc:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <HAL_ADC_ConfigChannel+0x7cc>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	099b      	lsrs	r3, r3, #6
 8003702:	4a30      	ldr	r2, [pc, #192]	; (80037c4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	099b      	lsrs	r3, r3, #6
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	4613      	mov	r3, r2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003716:	e002      	b.n	800371e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3b01      	subs	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f9      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003724:	e03a      	b.n	800379c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a27      	ldr	r2, [pc, #156]	; (80037c8 <HAL_ADC_ConfigChannel+0x7d4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d113      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x764>
 8003730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10d      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a22      	ldr	r2, [pc, #136]	; (80037cc <HAL_ADC_ConfigChannel+0x7d8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d02a      	beq.n	800379c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800374a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800374e:	4619      	mov	r1, r3
 8003750:	4818      	ldr	r0, [pc, #96]	; (80037b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003752:	f7fe fd82 	bl	800225a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003756:	e021      	b.n	800379c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d11c      	bne.n	800379c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d116      	bne.n	800379c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a16      	ldr	r2, [pc, #88]	; (80037cc <HAL_ADC_ConfigChannel+0x7d8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d011      	beq.n	800379c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800377c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003780:	4619      	mov	r1, r3
 8003782:	480c      	ldr	r0, [pc, #48]	; (80037b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003784:	f7fe fd69 	bl	800225a <LL_ADC_SetCommonPathInternalCh>
 8003788:	e008      	b.n	800379c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378e:	f043 0220 	orr.w	r2, r3, #32
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80037a4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	37d8      	adds	r7, #216	; 0xd8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	80080000 	.word	0x80080000
 80037b4:	50000300 	.word	0x50000300
 80037b8:	c3210000 	.word	0xc3210000
 80037bc:	90c00010 	.word	0x90c00010
 80037c0:	20000000 	.word	0x20000000
 80037c4:	053e2d63 	.word	0x053e2d63
 80037c8:	c7520000 	.word	0xc7520000
 80037cc:	50000100 	.word	0x50000100
 80037d0:	cb840000 	.word	0xcb840000

080037d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe ff31 	bl	8002648 <LL_ADC_IsEnabled>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d14d      	bne.n	8003888 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	4b28      	ldr	r3, [pc, #160]	; (8003894 <ADC_Enable+0xc0>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	f043 0210 	orr.w	r2, r3, #16
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380a:	f043 0201 	orr.w	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e039      	b.n	800388a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe feec 	bl	80025f8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003820:	f7fe fcda 	bl	80021d8 <HAL_GetTick>
 8003824:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003826:	e028      	b.n	800387a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe ff0b 	bl	8002648 <LL_ADC_IsEnabled>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d104      	bne.n	8003842 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe fedb 	bl	80025f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003842:	f7fe fcc9 	bl	80021d8 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d914      	bls.n	800387a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b01      	cmp	r3, #1
 800385c:	d00d      	beq.n	800387a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	f043 0210 	orr.w	r2, r3, #16
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386e:	f043 0201 	orr.w	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e007      	b.n	800388a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d1cf      	bne.n	8003828 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	8000003f 	.word	0x8000003f

08003898 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe fee2 	bl	800266e <LL_ADC_IsDisableOngoing>
 80038aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fe fec9 	bl	8002648 <LL_ADC_IsEnabled>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d047      	beq.n	800394c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d144      	bne.n	800394c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 030d 	and.w	r3, r3, #13
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10c      	bne.n	80038ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fe fea3 	bl	8002620 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2203      	movs	r2, #3
 80038e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038e2:	f7fe fc79 	bl	80021d8 <HAL_GetTick>
 80038e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038e8:	e029      	b.n	800393e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e023      	b.n	800394e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003906:	f7fe fc67 	bl	80021d8 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d914      	bls.n	800393e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003926:	f043 0210 	orr.w	r2, r3, #16
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003932:	f043 0201 	orr.w	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e007      	b.n	800394e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1dc      	bne.n	8003906 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003968:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800396c:	2b00      	cmp	r3, #0
 800396e:	d14b      	bne.n	8003a08 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d021      	beq.n	80039ce <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fd22 	bl	80023d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d032      	beq.n	8003a00 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d12b      	bne.n	8003a00 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d11f      	bne.n	8003a00 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	f043 0201 	orr.w	r2, r3, #1
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80039cc:	e018      	b.n	8003a00 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d111      	bne.n	8003a00 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d105      	bne.n	8003a00 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	f043 0201 	orr.w	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7fd ff33 	bl	800186c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a06:	e00e      	b.n	8003a26 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff fae3 	bl	8002fe0 <HAL_ADC_ErrorCallback>
}
 8003a1a:	e004      	b.n	8003a26 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
}
 8003a26:	bf00      	nop
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f7ff fabb 	bl	8002fb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a68:	f043 0204 	orr.w	r2, r3, #4
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f7ff fab5 	bl	8002fe0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <LL_ADC_IsEnabled>:
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <LL_ADC_IsEnabled+0x18>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <LL_ADC_IsEnabled+0x1a>
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_ADC_StartCalibration>:
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003ab6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	609a      	str	r2, [r3, #8]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aea:	d101      	bne.n	8003af0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <LL_ADC_REG_IsConversionOngoing>:
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d101      	bne.n	8003b16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_ADCEx_Calibration_Start+0x1c>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e04d      	b.n	8003bdc <HAL_ADCEx_Calibration_Start+0xb8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff fea5 	bl	8003898 <ADC_Disable>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d136      	bne.n	8003bc6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b60:	f023 0302 	bic.w	r3, r3, #2
 8003b64:	f043 0202 	orr.w	r2, r3, #2
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6839      	ldr	r1, [r7, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff ff96 	bl	8003aa4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b78:	e014      	b.n	8003ba4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d90d      	bls.n	8003ba4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	f023 0312 	bic.w	r3, r3, #18
 8003b90:	f043 0210 	orr.w	r2, r3, #16
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e01b      	b.n	8003bdc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff94 	bl	8003ad6 <LL_ADC_IsCalibrationOnGoing>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e2      	bne.n	8003b7a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb8:	f023 0303 	bic.w	r3, r3, #3
 8003bbc:	f043 0201 	orr.w	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bc4:	e005      	b.n	8003bd2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bca:	f043 0210 	orr.w	r2, r3, #16
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	0004de01 	.word	0x0004de01

08003be8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003c4c:	b590      	push	{r4, r7, lr}
 8003c4e:	b0a1      	sub	sp, #132	; 0x84
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e08b      	b.n	8003d82 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003c72:	2300      	movs	r3, #0
 8003c74:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003c76:	2300      	movs	r3, #0
 8003c78:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c82:	d102      	bne.n	8003c8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c84:	4b41      	ldr	r3, [pc, #260]	; (8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c86:	60bb      	str	r3, [r7, #8]
 8003c88:	e001      	b.n	8003c8e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10b      	bne.n	8003cac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e06a      	b.n	8003d82 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff ff25 	bl	8003afe <LL_ADC_REG_IsConversionOngoing>
 8003cb4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff ff1f 	bl	8003afe <LL_ADC_REG_IsConversionOngoing>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d14c      	bne.n	8003d60 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003cc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d149      	bne.n	8003d60 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ccc:	4b30      	ldr	r3, [pc, #192]	; (8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003cce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d028      	beq.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cea:	035b      	lsls	r3, r3, #13
 8003cec:	430b      	orrs	r3, r1
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cf2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cf4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003cf8:	f7ff fec1 	bl	8003a7e <LL_ADC_IsEnabled>
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	4823      	ldr	r0, [pc, #140]	; (8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d00:	f7ff febd 	bl	8003a7e <LL_ADC_IsEnabled>
 8003d04:	4603      	mov	r3, r0
 8003d06:	4323      	orrs	r3, r4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d133      	bne.n	8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d14:	f023 030f 	bic.w	r3, r3, #15
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	6811      	ldr	r1, [r2, #0]
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	6892      	ldr	r2, [r2, #8]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	431a      	orrs	r2, r3
 8003d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d26:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d28:	e024      	b.n	8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d34:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d36:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003d3a:	f7ff fea0 	bl	8003a7e <LL_ADC_IsEnabled>
 8003d3e:	4604      	mov	r4, r0
 8003d40:	4812      	ldr	r0, [pc, #72]	; (8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d42:	f7ff fe9c 	bl	8003a7e <LL_ADC_IsEnabled>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4323      	orrs	r3, r4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d112      	bne.n	8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d56:	f023 030f 	bic.w	r3, r3, #15
 8003d5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d5c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d5e:	e009      	b.n	8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d64:	f043 0220 	orr.w	r2, r3, #32
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003d72:	e000      	b.n	8003d76 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3784      	adds	r7, #132	; 0x84
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd90      	pop	{r4, r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	50000100 	.word	0x50000100
 8003d90:	50000300 	.word	0x50000300

08003d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003db0:	4013      	ands	r3, r2
 8003db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dc6:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	60d3      	str	r3, [r2, #12]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <__NVIC_GetPriorityGrouping+0x18>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	0a1b      	lsrs	r3, r3, #8
 8003de6:	f003 0307 	and.w	r3, r3, #7
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	e000ed00 	.word	0xe000ed00

08003df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	db0b      	blt.n	8003e22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	f003 021f 	and.w	r2, r3, #31
 8003e10:	4907      	ldr	r1, [pc, #28]	; (8003e30 <__NVIC_EnableIRQ+0x38>)
 8003e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	2001      	movs	r0, #1
 8003e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000e100 	.word	0xe000e100

08003e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	6039      	str	r1, [r7, #0]
 8003e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	db0a      	blt.n	8003e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	490c      	ldr	r1, [pc, #48]	; (8003e80 <__NVIC_SetPriority+0x4c>)
 8003e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e52:	0112      	lsls	r2, r2, #4
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	440b      	add	r3, r1
 8003e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e5c:	e00a      	b.n	8003e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	4908      	ldr	r1, [pc, #32]	; (8003e84 <__NVIC_SetPriority+0x50>)
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	3b04      	subs	r3, #4
 8003e6c:	0112      	lsls	r2, r2, #4
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	440b      	add	r3, r1
 8003e72:	761a      	strb	r2, [r3, #24]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	e000e100 	.word	0xe000e100
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b089      	sub	sp, #36	; 0x24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	bf28      	it	cs
 8003ea6:	2304      	movcs	r3, #4
 8003ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3304      	adds	r3, #4
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d902      	bls.n	8003eb8 <NVIC_EncodePriority+0x30>
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3b03      	subs	r3, #3
 8003eb6:	e000      	b.n	8003eba <NVIC_EncodePriority+0x32>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	401a      	ands	r2, r3
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eda:	43d9      	mvns	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee0:	4313      	orrs	r3, r2
         );
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3724      	adds	r7, #36	; 0x24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f00:	d301      	bcc.n	8003f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f02:	2301      	movs	r3, #1
 8003f04:	e00f      	b.n	8003f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f06:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <SysTick_Config+0x40>)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f0e:	210f      	movs	r1, #15
 8003f10:	f04f 30ff 	mov.w	r0, #4294967295
 8003f14:	f7ff ff8e 	bl	8003e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <SysTick_Config+0x40>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f1e:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <SysTick_Config+0x40>)
 8003f20:	2207      	movs	r2, #7
 8003f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	e000e010 	.word	0xe000e010

08003f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ff29 	bl	8003d94 <__NVIC_SetPriorityGrouping>
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	4603      	mov	r3, r0
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f58:	f7ff ff40 	bl	8003ddc <__NVIC_GetPriorityGrouping>
 8003f5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	6978      	ldr	r0, [r7, #20]
 8003f64:	f7ff ff90 	bl	8003e88 <NVIC_EncodePriority>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f6e:	4611      	mov	r1, r2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff ff5f 	bl	8003e34 <__NVIC_SetPriority>
}
 8003f76:	bf00      	nop
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	4603      	mov	r3, r0
 8003f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff ff33 	bl	8003df8 <__NVIC_EnableIRQ>
}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff ffa4 	bl	8003ef0 <SysTick_Config>
 8003fa8:	4603      	mov	r3, r0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e014      	b.n	8003fee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	791b      	ldrb	r3, [r3, #4]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d105      	bne.n	8003fda <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7fd f97f 	bl	80012d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	795b      	ldrb	r3, [r3, #5]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_DAC_Start+0x16>
 8004008:	2302      	movs	r3, #2
 800400a:	e043      	b.n	8004094 <HAL_DAC_Start+0x9e>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2202      	movs	r2, #2
 8004016:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6819      	ldr	r1, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2201      	movs	r2, #1
 8004026:	409a      	lsls	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8004030:	2001      	movs	r0, #1
 8004032:	f7fe f8dd 	bl	80021f0 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10f      	bne.n	800405c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004046:	2b02      	cmp	r3, #2
 8004048:	d11d      	bne.n	8004086 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0201 	orr.w	r2, r2, #1
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	e014      	b.n	8004086 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2102      	movs	r1, #2
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	429a      	cmp	r2, r3
 8004074:	d107      	bne.n	8004086 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0202 	orr.w	r2, r2, #2
 8004084:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	; 0x28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	795b      	ldrb	r3, [r3, #5]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_DAC_ConfigChannel+0x18>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e192      	b.n	80043da <HAL_DAC_ConfigChannel+0x33e>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2202      	movs	r2, #2
 80040be:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d174      	bne.n	80041b2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80040c8:	f7fe f886 	bl	80021d8 <HAL_GetTick>
 80040cc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d134      	bne.n	800413e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040d4:	e011      	b.n	80040fa <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80040d6:	f7fe f87f 	bl	80021d8 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d90a      	bls.n	80040fa <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f043 0208 	orr.w	r2, r3, #8
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2203      	movs	r2, #3
 80040f4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e16f      	b.n	80043da <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e6      	bne.n	80040d6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004108:	2001      	movs	r0, #1
 800410a:	f7fe f871 	bl	80021f0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
 8004118:	e01e      	b.n	8004158 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800411a:	f7fe f85d 	bl	80021d8 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	d90a      	bls.n	800413e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f043 0208 	orr.w	r2, r3, #8
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2203      	movs	r2, #3
 8004138:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e14d      	b.n	80043da <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004144:	2b00      	cmp	r3, #0
 8004146:	dbe8      	blt.n	800411a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004148:	2001      	movs	r0, #1
 800414a:	f7fe f851 	bl	80021f0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004156:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004168:	fa01 f303 	lsl.w	r3, r1, r3
 800416c:	43db      	mvns	r3, r3
 800416e:	ea02 0103 	and.w	r1, r2, r3
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	409a      	lsls	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	21ff      	movs	r1, #255	; 0xff
 8004194:	fa01 f303 	lsl.w	r3, r1, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	ea02 0103 	and.w	r1, r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	409a      	lsls	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d11d      	bne.n	80041f6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	221f      	movs	r2, #31
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43db      	mvns	r3, r3
 80041d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d2:	4013      	ands	r3, r2
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ea:	4313      	orrs	r3, r2
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2207      	movs	r2, #7
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43db      	mvns	r3, r3
 800420c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420e:	4013      	ands	r3, r2
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d102      	bne.n	8004220 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800421a:	2300      	movs	r3, #0
 800421c:	623b      	str	r3, [r7, #32]
 800421e:	e00f      	b.n	8004240 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2b02      	cmp	r3, #2
 8004226:	d102      	bne.n	800422e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004228:	2301      	movs	r3, #1
 800422a:	623b      	str	r3, [r7, #32]
 800422c:	e008      	b.n	8004240 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d102      	bne.n	800423c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004236:	2301      	movs	r3, #1
 8004238:	623b      	str	r3, [r7, #32]
 800423a:	e001      	b.n	8004240 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800423c:	2300      	movs	r3, #0
 800423e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	6a3a      	ldr	r2, [r7, #32]
 800424c:	4313      	orrs	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43db      	mvns	r3, r3
 8004260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004262:	4013      	ands	r3, r2
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	791b      	ldrb	r3, [r3, #4]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d102      	bne.n	8004274 <HAL_DAC_ConfigChannel+0x1d8>
 800426e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004272:	e000      	b.n	8004276 <HAL_DAC_ConfigChannel+0x1da>
 8004274:	2300      	movs	r3, #0
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4313      	orrs	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428e:	4013      	ands	r3, r2
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	795b      	ldrb	r3, [r3, #5]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d102      	bne.n	80042a0 <HAL_DAC_ConfigChannel+0x204>
 800429a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800429e:	e000      	b.n	80042a2 <HAL_DAC_ConfigChannel+0x206>
 80042a0:	2300      	movs	r3, #0
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d114      	bne.n	80042e2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80042b8:	f001 fbc4 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 80042bc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	4a48      	ldr	r2, [pc, #288]	; (80043e4 <HAL_DAC_ConfigChannel+0x348>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d904      	bls.n	80042d0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
 80042ce:	e00f      	b.n	80042f0 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	4a45      	ldr	r2, [pc, #276]	; (80043e8 <HAL_DAC_ConfigChannel+0x34c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d90a      	bls.n	80042ee <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
 80042e0:	e006      	b.n	80042f0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e8:	4313      	orrs	r3, r2
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
 80042ec:	e000      	b.n	80042f0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80042ee:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fe:	4313      	orrs	r3, r2
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004308:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6819      	ldr	r1, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43da      	mvns	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	400a      	ands	r2, r1
 8004326:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	f640 72fe 	movw	r2, #4094	; 0xffe
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004342:	4013      	ands	r3, r2
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435a:	4313      	orrs	r3, r2
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004364:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6819      	ldr	r1, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	22c0      	movs	r2, #192	; 0xc0
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	43da      	mvns	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	400a      	ands	r2, r1
 8004380:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	089b      	lsrs	r3, r3, #2
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	089b      	lsrs	r3, r3, #2
 8004394:	021b      	lsls	r3, r3, #8
 8004396:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	f640 710f 	movw	r1, #3855	; 0xf0f
 80043b0:	fa01 f303 	lsl.w	r3, r1, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	ea02 0103 	and.w	r1, r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	409a      	lsls	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2201      	movs	r2, #1
 80043d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3728      	adds	r7, #40	; 0x28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	09896800 	.word	0x09896800
 80043e8:	04c4b400 	.word	0x04c4b400

080043ec <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	795b      	ldrb	r3, [r3, #5]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_DACEx_TriangleWaveGenerate+0x18>
 8004400:	2302      	movs	r3, #2
 8004402:	e024      	b.n	800444e <HAL_DACEx_TriangleWaveGenerate+0x62>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2202      	movs	r2, #2
 800440e:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8004420:	fa01 f303 	lsl.w	r3, r1, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	ea02 0103 	and.w	r1, r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	409a      	lsls	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e08d      	b.n	800458a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_DMA_Init+0x138>)
 8004476:	429a      	cmp	r2, r3
 8004478:	d80f      	bhi.n	800449a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	4b45      	ldr	r3, [pc, #276]	; (8004598 <HAL_DMA_Init+0x13c>)
 8004482:	4413      	add	r3, r2
 8004484:	4a45      	ldr	r2, [pc, #276]	; (800459c <HAL_DMA_Init+0x140>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	091b      	lsrs	r3, r3, #4
 800448c:	009a      	lsls	r2, r3, #2
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a42      	ldr	r2, [pc, #264]	; (80045a0 <HAL_DMA_Init+0x144>)
 8004496:	641a      	str	r2, [r3, #64]	; 0x40
 8004498:	e00e      	b.n	80044b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	4b40      	ldr	r3, [pc, #256]	; (80045a4 <HAL_DMA_Init+0x148>)
 80044a2:	4413      	add	r3, r2
 80044a4:	4a3d      	ldr	r2, [pc, #244]	; (800459c <HAL_DMA_Init+0x140>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	091b      	lsrs	r3, r3, #4
 80044ac:	009a      	lsls	r2, r3, #2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a3c      	ldr	r2, [pc, #240]	; (80045a8 <HAL_DMA_Init+0x14c>)
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80044ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fa1e 	bl	800494c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004518:	d102      	bne.n	8004520 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004534:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d010      	beq.n	8004560 <HAL_DMA_Init+0x104>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b04      	cmp	r3, #4
 8004544:	d80c      	bhi.n	8004560 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fa3e 	bl	80049c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800455c:	605a      	str	r2, [r3, #4]
 800455e:	e008      	b.n	8004572 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40020407 	.word	0x40020407
 8004598:	bffdfff8 	.word	0xbffdfff8
 800459c:	cccccccd 	.word	0xcccccccd
 80045a0:	40020000 	.word	0x40020000
 80045a4:	bffdfbf8 	.word	0xbffdfbf8
 80045a8:	40020400 	.word	0x40020400

080045ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_DMA_Start_IT+0x20>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e066      	b.n	800469a <HAL_DMA_Start_IT+0xee>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d155      	bne.n	800468c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f962 	bl	80048ce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	2b00      	cmp	r3, #0
 8004610:	d008      	beq.n	8004624 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 020e 	orr.w	r2, r2, #14
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e00f      	b.n	8004644 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0204 	bic.w	r2, r2, #4
 8004632:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 020a 	orr.w	r2, r2, #10
 8004642:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004660:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004666:	2b00      	cmp	r3, #0
 8004668:	d007      	beq.n	800467a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004678:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0201 	orr.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e005      	b.n	8004698 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004694:	2302      	movs	r3, #2
 8004696:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004698:	7dfb      	ldrb	r3, [r7, #23]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d00d      	beq.n	80046d6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2204      	movs	r2, #4
 80046be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
 80046d4:	e047      	b.n	8004766 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 020e 	bic.w	r2, r2, #14
 80046e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0201 	bic.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004704:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470a:	f003 021f 	and.w	r2, r3, #31
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	2101      	movs	r1, #1
 8004714:	fa01 f202 	lsl.w	r2, r1, r2
 8004718:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004722:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00c      	beq.n	8004746 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800473a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004744:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	4798      	blx	r3
    }
  }
  return status;
 8004766:	7bfb      	ldrb	r3, [r7, #15]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2204      	movs	r2, #4
 8004792:	409a      	lsls	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d026      	beq.n	80047ea <HAL_DMA_IRQHandler+0x7a>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d021      	beq.n	80047ea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d107      	bne.n	80047c4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0204 	bic.w	r2, r2, #4
 80047c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c8:	f003 021f 	and.w	r2, r3, #31
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	2104      	movs	r1, #4
 80047d2:	fa01 f202 	lsl.w	r2, r1, r2
 80047d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d071      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80047e8:	e06c      	b.n	80048c4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ee:	f003 031f 	and.w	r3, r3, #31
 80047f2:	2202      	movs	r2, #2
 80047f4:	409a      	lsls	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d02e      	beq.n	800485c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d029      	beq.n	800485c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10b      	bne.n	800482e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 020a 	bic.w	r2, r2, #10
 8004824:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	f003 021f 	and.w	r2, r3, #31
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	2102      	movs	r1, #2
 800483c:	fa01 f202 	lsl.w	r2, r1, r2
 8004840:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	2b00      	cmp	r3, #0
 8004850:	d038      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800485a:	e033      	b.n	80048c4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	2208      	movs	r2, #8
 8004866:	409a      	lsls	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4013      	ands	r3, r2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d02a      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d025      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 020e 	bic.w	r2, r2, #14
 8004888:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	f003 021f 	and.w	r2, r3, #31
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	2101      	movs	r1, #1
 8004898:	fa01 f202 	lsl.w	r2, r1, r2
 800489c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d004      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop
}
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048e4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d004      	beq.n	80048f8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048f6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fc:	f003 021f 	and.w	r2, r3, #31
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	2101      	movs	r1, #1
 8004906:	fa01 f202 	lsl.w	r2, r1, r2
 800490a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b10      	cmp	r3, #16
 800491a:	d108      	bne.n	800492e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800492c:	e007      	b.n	800493e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	60da      	str	r2, [r3, #12]
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	4b16      	ldr	r3, [pc, #88]	; (80049b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800495c:	429a      	cmp	r2, r3
 800495e:	d802      	bhi.n	8004966 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004960:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	e001      	b.n	800496a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004966:	4b15      	ldr	r3, [pc, #84]	; (80049bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004968:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	3b08      	subs	r3, #8
 8004976:	4a12      	ldr	r2, [pc, #72]	; (80049c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004978:	fba2 2303 	umull	r2, r3, r2, r3
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	089b      	lsrs	r3, r3, #2
 8004986:	009a      	lsls	r2, r3, #2
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	4413      	add	r3, r2
 800498c:	461a      	mov	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a0b      	ldr	r2, [pc, #44]	; (80049c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004996:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	2201      	movs	r2, #1
 80049a0:	409a      	lsls	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40020407 	.word	0x40020407
 80049b8:	40020800 	.word	0x40020800
 80049bc:	40020820 	.word	0x40020820
 80049c0:	cccccccd 	.word	0xcccccccd
 80049c4:	40020880 	.word	0x40020880

080049c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	461a      	mov	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a08      	ldr	r2, [pc, #32]	; (8004a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80049ea:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	2201      	movs	r2, #1
 80049f6:	409a      	lsls	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	1000823f 	.word	0x1000823f
 8004a0c:	40020940 	.word	0x40020940

08004a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a1e:	e15a      	b.n	8004cd6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	2101      	movs	r1, #1
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 814c 	beq.w	8004cd0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d005      	beq.n	8004a50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d130      	bne.n	8004ab2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4013      	ands	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a86:	2201      	movs	r2, #1
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4013      	ands	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	091b      	lsrs	r3, r3, #4
 8004a9c:	f003 0201 	and.w	r2, r3, #1
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d017      	beq.n	8004aee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	2203      	movs	r2, #3
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d123      	bne.n	8004b42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	08da      	lsrs	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3208      	adds	r2, #8
 8004b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	220f      	movs	r2, #15
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	43db      	mvns	r3, r3
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	691a      	ldr	r2, [r3, #16]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	08da      	lsrs	r2, r3, #3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3208      	adds	r2, #8
 8004b3c:	6939      	ldr	r1, [r7, #16]
 8004b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	43db      	mvns	r3, r3
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4013      	ands	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f003 0203 	and.w	r2, r3, #3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80a6 	beq.w	8004cd0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b84:	4b5b      	ldr	r3, [pc, #364]	; (8004cf4 <HAL_GPIO_Init+0x2e4>)
 8004b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b88:	4a5a      	ldr	r2, [pc, #360]	; (8004cf4 <HAL_GPIO_Init+0x2e4>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	6613      	str	r3, [r2, #96]	; 0x60
 8004b90:	4b58      	ldr	r3, [pc, #352]	; (8004cf4 <HAL_GPIO_Init+0x2e4>)
 8004b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b9c:	4a56      	ldr	r2, [pc, #344]	; (8004cf8 <HAL_GPIO_Init+0x2e8>)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	089b      	lsrs	r3, r3, #2
 8004ba2:	3302      	adds	r3, #2
 8004ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	220f      	movs	r2, #15
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004bc6:	d01f      	beq.n	8004c08 <HAL_GPIO_Init+0x1f8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a4c      	ldr	r2, [pc, #304]	; (8004cfc <HAL_GPIO_Init+0x2ec>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d019      	beq.n	8004c04 <HAL_GPIO_Init+0x1f4>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a4b      	ldr	r2, [pc, #300]	; (8004d00 <HAL_GPIO_Init+0x2f0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d013      	beq.n	8004c00 <HAL_GPIO_Init+0x1f0>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a4a      	ldr	r2, [pc, #296]	; (8004d04 <HAL_GPIO_Init+0x2f4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00d      	beq.n	8004bfc <HAL_GPIO_Init+0x1ec>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a49      	ldr	r2, [pc, #292]	; (8004d08 <HAL_GPIO_Init+0x2f8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d007      	beq.n	8004bf8 <HAL_GPIO_Init+0x1e8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a48      	ldr	r2, [pc, #288]	; (8004d0c <HAL_GPIO_Init+0x2fc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d101      	bne.n	8004bf4 <HAL_GPIO_Init+0x1e4>
 8004bf0:	2305      	movs	r3, #5
 8004bf2:	e00a      	b.n	8004c0a <HAL_GPIO_Init+0x1fa>
 8004bf4:	2306      	movs	r3, #6
 8004bf6:	e008      	b.n	8004c0a <HAL_GPIO_Init+0x1fa>
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	e006      	b.n	8004c0a <HAL_GPIO_Init+0x1fa>
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e004      	b.n	8004c0a <HAL_GPIO_Init+0x1fa>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e002      	b.n	8004c0a <HAL_GPIO_Init+0x1fa>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <HAL_GPIO_Init+0x1fa>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	f002 0203 	and.w	r2, r2, #3
 8004c10:	0092      	lsls	r2, r2, #2
 8004c12:	4093      	lsls	r3, r2
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c1a:	4937      	ldr	r1, [pc, #220]	; (8004cf8 <HAL_GPIO_Init+0x2e8>)
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	089b      	lsrs	r3, r3, #2
 8004c20:	3302      	adds	r3, #2
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c28:	4b39      	ldr	r3, [pc, #228]	; (8004d10 <HAL_GPIO_Init+0x300>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	43db      	mvns	r3, r3
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4013      	ands	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c4c:	4a30      	ldr	r2, [pc, #192]	; (8004d10 <HAL_GPIO_Init+0x300>)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c52:	4b2f      	ldr	r3, [pc, #188]	; (8004d10 <HAL_GPIO_Init+0x300>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c76:	4a26      	ldr	r2, [pc, #152]	; (8004d10 <HAL_GPIO_Init+0x300>)
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004c7c:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <HAL_GPIO_Init+0x300>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	43db      	mvns	r3, r3
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ca0:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <HAL_GPIO_Init+0x300>)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ca6:	4b1a      	ldr	r3, [pc, #104]	; (8004d10 <HAL_GPIO_Init+0x300>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cca:	4a11      	ldr	r2, [pc, #68]	; (8004d10 <HAL_GPIO_Init+0x300>)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f47f ae9d 	bne.w	8004a20 <HAL_GPIO_Init+0x10>
  }
}
 8004ce6:	bf00      	nop
 8004ce8:	bf00      	nop
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	40010000 	.word	0x40010000
 8004cfc:	48000400 	.word	0x48000400
 8004d00:	48000800 	.word	0x48000800
 8004d04:	48000c00 	.word	0x48000c00
 8004d08:	48001000 	.word	0x48001000
 8004d0c:	48001400 	.word	0x48001400
 8004d10:	40010400 	.word	0x40010400

08004d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	807b      	strh	r3, [r7, #2]
 8004d20:	4613      	mov	r3, r2
 8004d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d24:	787b      	ldrb	r3, [r7, #1]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d2a:	887a      	ldrh	r2, [r7, #2]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d30:	e002      	b.n	8004d38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d32:	887a      	ldrh	r2, [r7, #2]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e081      	b.n	8004e5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7fc fc0a 	bl	8001584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2224      	movs	r2, #36	; 0x24
 8004d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0201 	bic.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004da4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d107      	bne.n	8004dbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dba:	609a      	str	r2, [r3, #8]
 8004dbc:	e006      	b.n	8004dcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004dca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d104      	bne.n	8004dde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ddc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69d9      	ldr	r1, [r3, #28]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1a      	ldr	r2, [r3, #32]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	d138      	bne.n	8004eea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e032      	b.n	8004eec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2224      	movs	r2, #36	; 0x24
 8004e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004eb4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6819      	ldr	r1, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0201 	orr.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e000      	b.n	8004eec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004eea:	2302      	movs	r3, #2
  }
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d139      	bne.n	8004f82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e033      	b.n	8004f84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2224      	movs	r2, #36	; 0x24
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0201 	orr.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e000      	b.n	8004f84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f82:	2302      	movs	r3, #2
  }
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d141      	bne.n	8005022 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f9e:	4b4b      	ldr	r3, [pc, #300]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004faa:	d131      	bne.n	8005010 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fac:	4b47      	ldr	r3, [pc, #284]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb2:	4a46      	ldr	r2, [pc, #280]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fbc:	4b43      	ldr	r3, [pc, #268]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fc4:	4a41      	ldr	r2, [pc, #260]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fcc:	4b40      	ldr	r3, [pc, #256]	; (80050d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2232      	movs	r2, #50	; 0x32
 8004fd2:	fb02 f303 	mul.w	r3, r2, r3
 8004fd6:	4a3f      	ldr	r2, [pc, #252]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	0c9b      	lsrs	r3, r3, #18
 8004fde:	3301      	adds	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fe2:	e002      	b.n	8004fea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fea:	4b38      	ldr	r3, [pc, #224]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff6:	d102      	bne.n	8004ffe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f2      	bne.n	8004fe4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ffe:	4b33      	ldr	r3, [pc, #204]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500a:	d158      	bne.n	80050be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e057      	b.n	80050c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005010:	4b2e      	ldr	r3, [pc, #184]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005016:	4a2d      	ldr	r2, [pc, #180]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800501c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005020:	e04d      	b.n	80050be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005028:	d141      	bne.n	80050ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800502a:	4b28      	ldr	r3, [pc, #160]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005036:	d131      	bne.n	800509c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005038:	4b24      	ldr	r3, [pc, #144]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800503e:	4a23      	ldr	r2, [pc, #140]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005044:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005048:	4b20      	ldr	r3, [pc, #128]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005050:	4a1e      	ldr	r2, [pc, #120]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005056:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005058:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2232      	movs	r2, #50	; 0x32
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	4a1c      	ldr	r2, [pc, #112]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005064:	fba2 2303 	umull	r2, r3, r2, r3
 8005068:	0c9b      	lsrs	r3, r3, #18
 800506a:	3301      	adds	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800506e:	e002      	b.n	8005076 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3b01      	subs	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005076:	4b15      	ldr	r3, [pc, #84]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005082:	d102      	bne.n	800508a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f2      	bne.n	8005070 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800508a:	4b10      	ldr	r3, [pc, #64]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005096:	d112      	bne.n	80050be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e011      	b.n	80050c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050a2:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80050ac:	e007      	b.n	80050be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050ae:	4b07      	ldr	r3, [pc, #28]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050b6:	4a05      	ldr	r2, [pc, #20]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	40007000 	.word	0x40007000
 80050d0:	20000000 	.word	0x20000000
 80050d4:	431bde83 	.word	0x431bde83

080050d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e306      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d075      	beq.n	80051e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050f6:	4b97      	ldr	r3, [pc, #604]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 030c 	and.w	r3, r3, #12
 80050fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005100:	4b94      	ldr	r3, [pc, #592]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0303 	and.w	r3, r3, #3
 8005108:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b0c      	cmp	r3, #12
 800510e:	d102      	bne.n	8005116 <HAL_RCC_OscConfig+0x3e>
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b03      	cmp	r3, #3
 8005114:	d002      	beq.n	800511c <HAL_RCC_OscConfig+0x44>
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b08      	cmp	r3, #8
 800511a:	d10b      	bne.n	8005134 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800511c:	4b8d      	ldr	r3, [pc, #564]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d05b      	beq.n	80051e0 <HAL_RCC_OscConfig+0x108>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d157      	bne.n	80051e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e2e1      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513c:	d106      	bne.n	800514c <HAL_RCC_OscConfig+0x74>
 800513e:	4b85      	ldr	r3, [pc, #532]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a84      	ldr	r2, [pc, #528]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	e01d      	b.n	8005188 <HAL_RCC_OscConfig+0xb0>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005154:	d10c      	bne.n	8005170 <HAL_RCC_OscConfig+0x98>
 8005156:	4b7f      	ldr	r3, [pc, #508]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a7e      	ldr	r2, [pc, #504]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 800515c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	4b7c      	ldr	r3, [pc, #496]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a7b      	ldr	r2, [pc, #492]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	e00b      	b.n	8005188 <HAL_RCC_OscConfig+0xb0>
 8005170:	4b78      	ldr	r3, [pc, #480]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a77      	ldr	r2, [pc, #476]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	4b75      	ldr	r3, [pc, #468]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a74      	ldr	r2, [pc, #464]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d013      	beq.n	80051b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005190:	f7fd f822 	bl	80021d8 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005198:	f7fd f81e 	bl	80021d8 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b64      	cmp	r3, #100	; 0x64
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e2a6      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051aa:	4b6a      	ldr	r3, [pc, #424]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0f0      	beq.n	8005198 <HAL_RCC_OscConfig+0xc0>
 80051b6:	e014      	b.n	80051e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fd f80e 	bl	80021d8 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c0:	f7fd f80a 	bl	80021d8 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b64      	cmp	r3, #100	; 0x64
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e292      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051d2:	4b60      	ldr	r3, [pc, #384]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0xe8>
 80051de:	e000      	b.n	80051e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d075      	beq.n	80052da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051ee:	4b59      	ldr	r3, [pc, #356]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 030c 	and.w	r3, r3, #12
 80051f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051f8:	4b56      	ldr	r3, [pc, #344]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b0c      	cmp	r3, #12
 8005206:	d102      	bne.n	800520e <HAL_RCC_OscConfig+0x136>
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d002      	beq.n	8005214 <HAL_RCC_OscConfig+0x13c>
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b04      	cmp	r3, #4
 8005212:	d11f      	bne.n	8005254 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005214:	4b4f      	ldr	r3, [pc, #316]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <HAL_RCC_OscConfig+0x154>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e265      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800522c:	4b49      	ldr	r3, [pc, #292]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	061b      	lsls	r3, r3, #24
 800523a:	4946      	ldr	r1, [pc, #280]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 800523c:	4313      	orrs	r3, r2
 800523e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005240:	4b45      	ldr	r3, [pc, #276]	; (8005358 <HAL_RCC_OscConfig+0x280>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f7fc ff7b 	bl	8002140 <HAL_InitTick>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d043      	beq.n	80052d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e251      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d023      	beq.n	80052a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800525c:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a3c      	ldr	r2, [pc, #240]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005268:	f7fc ffb6 	bl	80021d8 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005270:	f7fc ffb2 	bl	80021d8 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e23a      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005282:	4b34      	ldr	r3, [pc, #208]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800528e:	4b31      	ldr	r3, [pc, #196]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	061b      	lsls	r3, r3, #24
 800529c:	492d      	ldr	r1, [pc, #180]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	604b      	str	r3, [r1, #4]
 80052a2:	e01a      	b.n	80052da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052a4:	4b2b      	ldr	r3, [pc, #172]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a2a      	ldr	r2, [pc, #168]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 80052aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fc ff92 	bl	80021d8 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b8:	f7fc ff8e 	bl	80021d8 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e216      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052ca:	4b22      	ldr	r3, [pc, #136]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1f0      	bne.n	80052b8 <HAL_RCC_OscConfig+0x1e0>
 80052d6:	e000      	b.n	80052da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d041      	beq.n	800536a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d01c      	beq.n	8005328 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ee:	4b19      	ldr	r3, [pc, #100]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 80052f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052f4:	4a17      	ldr	r2, [pc, #92]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 80052f6:	f043 0301 	orr.w	r3, r3, #1
 80052fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fe:	f7fc ff6b 	bl	80021d8 <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005304:	e008      	b.n	8005318 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005306:	f7fc ff67 	bl	80021d8 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e1ef      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005318:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 800531a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0ef      	beq.n	8005306 <HAL_RCC_OscConfig+0x22e>
 8005326:	e020      	b.n	800536a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005328:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 800532a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800532e:	4a09      	ldr	r2, [pc, #36]	; (8005354 <HAL_RCC_OscConfig+0x27c>)
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005338:	f7fc ff4e 	bl	80021d8 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800533e:	e00d      	b.n	800535c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005340:	f7fc ff4a 	bl	80021d8 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d906      	bls.n	800535c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e1d2      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
 8005352:	bf00      	nop
 8005354:	40021000 	.word	0x40021000
 8005358:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800535c:	4b8c      	ldr	r3, [pc, #560]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 800535e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1ea      	bne.n	8005340 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 80a6 	beq.w	80054c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005378:	2300      	movs	r3, #0
 800537a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800537c:	4b84      	ldr	r3, [pc, #528]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 800537e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCC_OscConfig+0x2b4>
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <HAL_RCC_OscConfig+0x2b6>
 800538c:	2300      	movs	r3, #0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00d      	beq.n	80053ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005392:	4b7f      	ldr	r3, [pc, #508]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005396:	4a7e      	ldr	r2, [pc, #504]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539c:	6593      	str	r3, [r2, #88]	; 0x58
 800539e:	4b7c      	ldr	r3, [pc, #496]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 80053a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053aa:	2301      	movs	r3, #1
 80053ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ae:	4b79      	ldr	r3, [pc, #484]	; (8005594 <HAL_RCC_OscConfig+0x4bc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d118      	bne.n	80053ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053ba:	4b76      	ldr	r3, [pc, #472]	; (8005594 <HAL_RCC_OscConfig+0x4bc>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a75      	ldr	r2, [pc, #468]	; (8005594 <HAL_RCC_OscConfig+0x4bc>)
 80053c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053c6:	f7fc ff07 	bl	80021d8 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ce:	f7fc ff03 	bl	80021d8 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e18b      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053e0:	4b6c      	ldr	r3, [pc, #432]	; (8005594 <HAL_RCC_OscConfig+0x4bc>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0f0      	beq.n	80053ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d108      	bne.n	8005406 <HAL_RCC_OscConfig+0x32e>
 80053f4:	4b66      	ldr	r3, [pc, #408]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 80053f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fa:	4a65      	ldr	r2, [pc, #404]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 80053fc:	f043 0301 	orr.w	r3, r3, #1
 8005400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005404:	e024      	b.n	8005450 <HAL_RCC_OscConfig+0x378>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b05      	cmp	r3, #5
 800540c:	d110      	bne.n	8005430 <HAL_RCC_OscConfig+0x358>
 800540e:	4b60      	ldr	r3, [pc, #384]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005414:	4a5e      	ldr	r2, [pc, #376]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005416:	f043 0304 	orr.w	r3, r3, #4
 800541a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800541e:	4b5c      	ldr	r3, [pc, #368]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005424:	4a5a      	ldr	r2, [pc, #360]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800542e:	e00f      	b.n	8005450 <HAL_RCC_OscConfig+0x378>
 8005430:	4b57      	ldr	r3, [pc, #348]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	4a56      	ldr	r2, [pc, #344]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005438:	f023 0301 	bic.w	r3, r3, #1
 800543c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005440:	4b53      	ldr	r3, [pc, #332]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005446:	4a52      	ldr	r2, [pc, #328]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005448:	f023 0304 	bic.w	r3, r3, #4
 800544c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d016      	beq.n	8005486 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005458:	f7fc febe 	bl	80021d8 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800545e:	e00a      	b.n	8005476 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005460:	f7fc feba 	bl	80021d8 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	f241 3288 	movw	r2, #5000	; 0x1388
 800546e:	4293      	cmp	r3, r2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e140      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005476:	4b46      	ldr	r3, [pc, #280]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0ed      	beq.n	8005460 <HAL_RCC_OscConfig+0x388>
 8005484:	e015      	b.n	80054b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005486:	f7fc fea7 	bl	80021d8 <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800548c:	e00a      	b.n	80054a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800548e:	f7fc fea3 	bl	80021d8 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	f241 3288 	movw	r2, #5000	; 0x1388
 800549c:	4293      	cmp	r3, r2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e129      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054a4:	4b3a      	ldr	r3, [pc, #232]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1ed      	bne.n	800548e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054b2:	7ffb      	ldrb	r3, [r7, #31]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d105      	bne.n	80054c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054b8:	4b35      	ldr	r3, [pc, #212]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 80054ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054bc:	4a34      	ldr	r2, [pc, #208]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 80054be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0320 	and.w	r3, r3, #32
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d03c      	beq.n	800554a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01c      	beq.n	8005512 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054d8:	4b2d      	ldr	r3, [pc, #180]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 80054da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054de:	4a2c      	ldr	r2, [pc, #176]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 80054e0:	f043 0301 	orr.w	r3, r3, #1
 80054e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e8:	f7fc fe76 	bl	80021d8 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054f0:	f7fc fe72 	bl	80021d8 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e0fa      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005502:	4b23      	ldr	r3, [pc, #140]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005504:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0ef      	beq.n	80054f0 <HAL_RCC_OscConfig+0x418>
 8005510:	e01b      	b.n	800554a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005512:	4b1f      	ldr	r3, [pc, #124]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005514:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005518:	4a1d      	ldr	r2, [pc, #116]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 800551a:	f023 0301 	bic.w	r3, r3, #1
 800551e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005522:	f7fc fe59 	bl	80021d8 <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800552a:	f7fc fe55 	bl	80021d8 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e0dd      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800553c:	4b14      	ldr	r3, [pc, #80]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 800553e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1ef      	bne.n	800552a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 80d1 	beq.w	80056f6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005554:	4b0e      	ldr	r3, [pc, #56]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 030c 	and.w	r3, r3, #12
 800555c:	2b0c      	cmp	r3, #12
 800555e:	f000 808b 	beq.w	8005678 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d15e      	bne.n	8005628 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800556a:	4b09      	ldr	r3, [pc, #36]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a08      	ldr	r2, [pc, #32]	; (8005590 <HAL_RCC_OscConfig+0x4b8>)
 8005570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005576:	f7fc fe2f 	bl	80021d8 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800557c:	e00c      	b.n	8005598 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800557e:	f7fc fe2b 	bl	80021d8 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d905      	bls.n	8005598 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e0b3      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
 8005590:	40021000 	.word	0x40021000
 8005594:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005598:	4b59      	ldr	r3, [pc, #356]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1ec      	bne.n	800557e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055a4:	4b56      	ldr	r3, [pc, #344]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	4b56      	ldr	r3, [pc, #344]	; (8005704 <HAL_RCC_OscConfig+0x62c>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6a11      	ldr	r1, [r2, #32]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055b4:	3a01      	subs	r2, #1
 80055b6:	0112      	lsls	r2, r2, #4
 80055b8:	4311      	orrs	r1, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80055be:	0212      	lsls	r2, r2, #8
 80055c0:	4311      	orrs	r1, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055c6:	0852      	lsrs	r2, r2, #1
 80055c8:	3a01      	subs	r2, #1
 80055ca:	0552      	lsls	r2, r2, #21
 80055cc:	4311      	orrs	r1, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055d2:	0852      	lsrs	r2, r2, #1
 80055d4:	3a01      	subs	r2, #1
 80055d6:	0652      	lsls	r2, r2, #25
 80055d8:	4311      	orrs	r1, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055de:	06d2      	lsls	r2, r2, #27
 80055e0:	430a      	orrs	r2, r1
 80055e2:	4947      	ldr	r1, [pc, #284]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055e8:	4b45      	ldr	r3, [pc, #276]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a44      	ldr	r2, [pc, #272]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 80055ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055f4:	4b42      	ldr	r3, [pc, #264]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	4a41      	ldr	r2, [pc, #260]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 80055fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005600:	f7fc fdea 	bl	80021d8 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005608:	f7fc fde6 	bl	80021d8 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e06e      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800561a:	4b39      	ldr	r3, [pc, #228]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f0      	beq.n	8005608 <HAL_RCC_OscConfig+0x530>
 8005626:	e066      	b.n	80056f6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005628:	4b35      	ldr	r3, [pc, #212]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a34      	ldr	r2, [pc, #208]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 800562e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005632:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005634:	4b32      	ldr	r3, [pc, #200]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	4a31      	ldr	r2, [pc, #196]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 800563a:	f023 0303 	bic.w	r3, r3, #3
 800563e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005640:	4b2f      	ldr	r3, [pc, #188]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4a2e      	ldr	r2, [pc, #184]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 8005646:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800564a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800564e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005650:	f7fc fdc2 	bl	80021d8 <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005658:	f7fc fdbe 	bl	80021d8 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e046      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800566a:	4b25      	ldr	r3, [pc, #148]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f0      	bne.n	8005658 <HAL_RCC_OscConfig+0x580>
 8005676:	e03e      	b.n	80056f6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e039      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005684:	4b1e      	ldr	r3, [pc, #120]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f003 0203 	and.w	r2, r3, #3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	429a      	cmp	r2, r3
 8005696:	d12c      	bne.n	80056f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	3b01      	subs	r3, #1
 80056a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d123      	bne.n	80056f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d11b      	bne.n	80056f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d113      	bne.n	80056f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	085b      	lsrs	r3, r3, #1
 80056d6:	3b01      	subs	r3, #1
 80056d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056da:	429a      	cmp	r2, r3
 80056dc:	d109      	bne.n	80056f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e8:	085b      	lsrs	r3, r3, #1
 80056ea:	3b01      	subs	r3, #1
 80056ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d001      	beq.n	80056f6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40021000 	.word	0x40021000
 8005704:	019f800c 	.word	0x019f800c

08005708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e11e      	b.n	800595e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005720:	4b91      	ldr	r3, [pc, #580]	; (8005968 <HAL_RCC_ClockConfig+0x260>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d910      	bls.n	8005750 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572e:	4b8e      	ldr	r3, [pc, #568]	; (8005968 <HAL_RCC_ClockConfig+0x260>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f023 020f 	bic.w	r2, r3, #15
 8005736:	498c      	ldr	r1, [pc, #560]	; (8005968 <HAL_RCC_ClockConfig+0x260>)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	4313      	orrs	r3, r2
 800573c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800573e:	4b8a      	ldr	r3, [pc, #552]	; (8005968 <HAL_RCC_ClockConfig+0x260>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d001      	beq.n	8005750 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e106      	b.n	800595e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d073      	beq.n	8005844 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2b03      	cmp	r3, #3
 8005762:	d129      	bne.n	80057b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005764:	4b81      	ldr	r3, [pc, #516]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0f4      	b.n	800595e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005774:	f000 f99e 	bl	8005ab4 <RCC_GetSysClockFreqFromPLLSource>
 8005778:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4a7c      	ldr	r2, [pc, #496]	; (8005970 <HAL_RCC_ClockConfig+0x268>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d93f      	bls.n	8005802 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005782:	4b7a      	ldr	r3, [pc, #488]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005796:	2b00      	cmp	r3, #0
 8005798:	d033      	beq.n	8005802 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d12f      	bne.n	8005802 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057a2:	4b72      	ldr	r3, [pc, #456]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057aa:	4a70      	ldr	r2, [pc, #448]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 80057ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057b2:	2380      	movs	r3, #128	; 0x80
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	e024      	b.n	8005802 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d107      	bne.n	80057d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057c0:	4b6a      	ldr	r3, [pc, #424]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d109      	bne.n	80057e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0c6      	b.n	800595e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057d0:	4b66      	ldr	r3, [pc, #408]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e0be      	b.n	800595e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80057e0:	f000 f8ce 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 80057e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4a61      	ldr	r2, [pc, #388]	; (8005970 <HAL_RCC_ClockConfig+0x268>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d909      	bls.n	8005802 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057ee:	4b5f      	ldr	r3, [pc, #380]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057f6:	4a5d      	ldr	r2, [pc, #372]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 80057f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80057fe:	2380      	movs	r3, #128	; 0x80
 8005800:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005802:	4b5a      	ldr	r3, [pc, #360]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f023 0203 	bic.w	r2, r3, #3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	4957      	ldr	r1, [pc, #348]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 8005810:	4313      	orrs	r3, r2
 8005812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005814:	f7fc fce0 	bl	80021d8 <HAL_GetTick>
 8005818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800581a:	e00a      	b.n	8005832 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800581c:	f7fc fcdc 	bl	80021d8 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f241 3288 	movw	r2, #5000	; 0x1388
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e095      	b.n	800595e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005832:	4b4e      	ldr	r3, [pc, #312]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 020c 	and.w	r2, r3, #12
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	429a      	cmp	r2, r3
 8005842:	d1eb      	bne.n	800581c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d023      	beq.n	8005898 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d005      	beq.n	8005868 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800585c:	4b43      	ldr	r3, [pc, #268]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	4a42      	ldr	r2, [pc, #264]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 8005862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005866:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005874:	4b3d      	ldr	r3, [pc, #244]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800587c:	4a3b      	ldr	r2, [pc, #236]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 800587e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005882:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005884:	4b39      	ldr	r3, [pc, #228]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	4936      	ldr	r1, [pc, #216]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 8005892:	4313      	orrs	r3, r2
 8005894:	608b      	str	r3, [r1, #8]
 8005896:	e008      	b.n	80058aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2b80      	cmp	r3, #128	; 0x80
 800589c:	d105      	bne.n	80058aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800589e:	4b33      	ldr	r3, [pc, #204]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	4a32      	ldr	r2, [pc, #200]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 80058a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058aa:	4b2f      	ldr	r3, [pc, #188]	; (8005968 <HAL_RCC_ClockConfig+0x260>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d21d      	bcs.n	80058f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b8:	4b2b      	ldr	r3, [pc, #172]	; (8005968 <HAL_RCC_ClockConfig+0x260>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f023 020f 	bic.w	r2, r3, #15
 80058c0:	4929      	ldr	r1, [pc, #164]	; (8005968 <HAL_RCC_ClockConfig+0x260>)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058c8:	f7fc fc86 	bl	80021d8 <HAL_GetTick>
 80058cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ce:	e00a      	b.n	80058e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058d0:	f7fc fc82 	bl	80021d8 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	f241 3288 	movw	r2, #5000	; 0x1388
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e03b      	b.n	800595e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e6:	4b20      	ldr	r3, [pc, #128]	; (8005968 <HAL_RCC_ClockConfig+0x260>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d1ed      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d008      	beq.n	8005912 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005900:	4b1a      	ldr	r3, [pc, #104]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	4917      	ldr	r1, [pc, #92]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 800590e:	4313      	orrs	r3, r2
 8005910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800591e:	4b13      	ldr	r3, [pc, #76]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	490f      	ldr	r1, [pc, #60]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 800592e:	4313      	orrs	r3, r2
 8005930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005932:	f000 f825 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 8005936:	4602      	mov	r2, r0
 8005938:	4b0c      	ldr	r3, [pc, #48]	; (800596c <HAL_RCC_ClockConfig+0x264>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	091b      	lsrs	r3, r3, #4
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	490c      	ldr	r1, [pc, #48]	; (8005974 <HAL_RCC_ClockConfig+0x26c>)
 8005944:	5ccb      	ldrb	r3, [r1, r3]
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	fa22 f303 	lsr.w	r3, r2, r3
 800594e:	4a0a      	ldr	r2, [pc, #40]	; (8005978 <HAL_RCC_ClockConfig+0x270>)
 8005950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005952:	4b0a      	ldr	r3, [pc, #40]	; (800597c <HAL_RCC_ClockConfig+0x274>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f7fc fbf2 	bl	8002140 <HAL_InitTick>
 800595c:	4603      	mov	r3, r0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40022000 	.word	0x40022000
 800596c:	40021000 	.word	0x40021000
 8005970:	04c4b400 	.word	0x04c4b400
 8005974:	0800ce38 	.word	0x0800ce38
 8005978:	20000000 	.word	0x20000000
 800597c:	20000004 	.word	0x20000004

08005980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005986:	4b2c      	ldr	r3, [pc, #176]	; (8005a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 030c 	and.w	r3, r3, #12
 800598e:	2b04      	cmp	r3, #4
 8005990:	d102      	bne.n	8005998 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005992:	4b2a      	ldr	r3, [pc, #168]	; (8005a3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	e047      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005998:	4b27      	ldr	r3, [pc, #156]	; (8005a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 030c 	and.w	r3, r3, #12
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d102      	bne.n	80059aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059a4:	4b26      	ldr	r3, [pc, #152]	; (8005a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	e03e      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80059aa:	4b23      	ldr	r3, [pc, #140]	; (8005a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 030c 	and.w	r3, r3, #12
 80059b2:	2b0c      	cmp	r3, #12
 80059b4:	d136      	bne.n	8005a24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059b6:	4b20      	ldr	r3, [pc, #128]	; (8005a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059c0:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	091b      	lsrs	r3, r3, #4
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	3301      	adds	r3, #1
 80059cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d10c      	bne.n	80059ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059d4:	4a1a      	ldr	r2, [pc, #104]	; (8005a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059dc:	4a16      	ldr	r2, [pc, #88]	; (8005a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059de:	68d2      	ldr	r2, [r2, #12]
 80059e0:	0a12      	lsrs	r2, r2, #8
 80059e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	617b      	str	r3, [r7, #20]
      break;
 80059ec:	e00c      	b.n	8005a08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059ee:	4a13      	ldr	r2, [pc, #76]	; (8005a3c <HAL_RCC_GetSysClockFreq+0xbc>)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f6:	4a10      	ldr	r2, [pc, #64]	; (8005a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059f8:	68d2      	ldr	r2, [r2, #12]
 80059fa:	0a12      	lsrs	r2, r2, #8
 80059fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a00:	fb02 f303 	mul.w	r3, r2, r3
 8005a04:	617b      	str	r3, [r7, #20]
      break;
 8005a06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a08:	4b0b      	ldr	r3, [pc, #44]	; (8005a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	0e5b      	lsrs	r3, r3, #25
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	3301      	adds	r3, #1
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	e001      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a28:	693b      	ldr	r3, [r7, #16]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	00f42400 	.word	0x00f42400
 8005a40:	007a1200 	.word	0x007a1200

08005a44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a48:	4b03      	ldr	r3, [pc, #12]	; (8005a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20000000 	.word	0x20000000

08005a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a60:	f7ff fff0 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 8005a64:	4602      	mov	r2, r0
 8005a66:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	0a1b      	lsrs	r3, r3, #8
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	4904      	ldr	r1, [pc, #16]	; (8005a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a72:	5ccb      	ldrb	r3, [r1, r3]
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40021000 	.word	0x40021000
 8005a84:	0800ce48 	.word	0x0800ce48

08005a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a8c:	f7ff ffda 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 8005a90:	4602      	mov	r2, r0
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	0adb      	lsrs	r3, r3, #11
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	4904      	ldr	r1, [pc, #16]	; (8005ab0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a9e:	5ccb      	ldrb	r3, [r1, r3]
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40021000 	.word	0x40021000
 8005ab0:	0800ce48 	.word	0x0800ce48

08005ab4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005aba:	4b1e      	ldr	r3, [pc, #120]	; (8005b34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ac4:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	091b      	lsrs	r3, r3, #4
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	3301      	adds	r3, #1
 8005ad0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d10c      	bne.n	8005af2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ad8:	4a17      	ldr	r2, [pc, #92]	; (8005b38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae0:	4a14      	ldr	r2, [pc, #80]	; (8005b34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ae2:	68d2      	ldr	r2, [r2, #12]
 8005ae4:	0a12      	lsrs	r2, r2, #8
 8005ae6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005aea:	fb02 f303 	mul.w	r3, r2, r3
 8005aee:	617b      	str	r3, [r7, #20]
    break;
 8005af0:	e00c      	b.n	8005b0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005af2:	4a12      	ldr	r2, [pc, #72]	; (8005b3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afa:	4a0e      	ldr	r2, [pc, #56]	; (8005b34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005afc:	68d2      	ldr	r2, [r2, #12]
 8005afe:	0a12      	lsrs	r2, r2, #8
 8005b00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b04:	fb02 f303 	mul.w	r3, r2, r3
 8005b08:	617b      	str	r3, [r7, #20]
    break;
 8005b0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b0c:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	0e5b      	lsrs	r3, r3, #25
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	3301      	adds	r3, #1
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b26:	687b      	ldr	r3, [r7, #4]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	371c      	adds	r7, #28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	40021000 	.word	0x40021000
 8005b38:	007a1200 	.word	0x007a1200
 8005b3c:	00f42400 	.word	0x00f42400

08005b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b48:	2300      	movs	r3, #0
 8005b4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8098 	beq.w	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b62:	4b43      	ldr	r3, [pc, #268]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10d      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b6e:	4b40      	ldr	r3, [pc, #256]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b72:	4a3f      	ldr	r2, [pc, #252]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b78:	6593      	str	r3, [r2, #88]	; 0x58
 8005b7a:	4b3d      	ldr	r3, [pc, #244]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b86:	2301      	movs	r3, #1
 8005b88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b8a:	4b3a      	ldr	r3, [pc, #232]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a39      	ldr	r2, [pc, #228]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b96:	f7fc fb1f 	bl	80021d8 <HAL_GetTick>
 8005b9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b9c:	e009      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b9e:	f7fc fb1b 	bl	80021d8 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d902      	bls.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	74fb      	strb	r3, [r7, #19]
        break;
 8005bb0:	e005      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bb2:	4b30      	ldr	r3, [pc, #192]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0ef      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005bbe:	7cfb      	ldrb	r3, [r7, #19]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d159      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bc4:	4b2a      	ldr	r3, [pc, #168]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01e      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d019      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005be0:	4b23      	ldr	r3, [pc, #140]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bec:	4b20      	ldr	r3, [pc, #128]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf2:	4a1f      	ldr	r2, [pc, #124]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bfc:	4b1c      	ldr	r3, [pc, #112]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c02:	4a1b      	ldr	r2, [pc, #108]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c0c:	4a18      	ldr	r2, [pc, #96]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d016      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fc fadb 	bl	80021d8 <HAL_GetTick>
 8005c22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c24:	e00b      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c26:	f7fc fad7 	bl	80021d8 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d902      	bls.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	74fb      	strb	r3, [r7, #19]
            break;
 8005c3c:	e006      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c3e:	4b0c      	ldr	r3, [pc, #48]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0ec      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005c4c:	7cfb      	ldrb	r3, [r7, #19]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10b      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c52:	4b07      	ldr	r3, [pc, #28]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	4903      	ldr	r1, [pc, #12]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c68:	e008      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c6a:	7cfb      	ldrb	r3, [r7, #19]
 8005c6c:	74bb      	strb	r3, [r7, #18]
 8005c6e:	e005      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c70:	40021000 	.word	0x40021000
 8005c74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c78:	7cfb      	ldrb	r3, [r7, #19]
 8005c7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c7c:	7c7b      	ldrb	r3, [r7, #17]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d105      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c82:	4ba6      	ldr	r3, [pc, #664]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c86:	4aa5      	ldr	r2, [pc, #660]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c8c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c9a:	4ba0      	ldr	r3, [pc, #640]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca0:	f023 0203 	bic.w	r2, r3, #3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	499c      	ldr	r1, [pc, #624]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00a      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cbc:	4b97      	ldr	r3, [pc, #604]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc2:	f023 020c 	bic.w	r2, r3, #12
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	4994      	ldr	r1, [pc, #592]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0304 	and.w	r3, r3, #4
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cde:	4b8f      	ldr	r3, [pc, #572]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	498b      	ldr	r1, [pc, #556]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0308 	and.w	r3, r3, #8
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00a      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d00:	4b86      	ldr	r3, [pc, #536]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	4983      	ldr	r1, [pc, #524]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00a      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d22:	4b7e      	ldr	r3, [pc, #504]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	497a      	ldr	r1, [pc, #488]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00a      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d44:	4b75      	ldr	r3, [pc, #468]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	4972      	ldr	r1, [pc, #456]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d66:	4b6d      	ldr	r3, [pc, #436]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	4969      	ldr	r1, [pc, #420]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d88:	4b64      	ldr	r3, [pc, #400]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	4961      	ldr	r1, [pc, #388]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005daa:	4b5c      	ldr	r3, [pc, #368]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	4958      	ldr	r1, [pc, #352]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d015      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dcc:	4b53      	ldr	r3, [pc, #332]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	4950      	ldr	r1, [pc, #320]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dea:	d105      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dec:	4b4b      	ldr	r3, [pc, #300]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4a4a      	ldr	r2, [pc, #296]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005df6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d015      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e04:	4b45      	ldr	r3, [pc, #276]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	4942      	ldr	r1, [pc, #264]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e22:	d105      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e24:	4b3d      	ldr	r3, [pc, #244]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	4a3c      	ldr	r2, [pc, #240]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d015      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e3c:	4b37      	ldr	r3, [pc, #220]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	4934      	ldr	r1, [pc, #208]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e5a:	d105      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e5c:	4b2f      	ldr	r3, [pc, #188]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	4a2e      	ldr	r2, [pc, #184]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d015      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e74:	4b29      	ldr	r3, [pc, #164]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e82:	4926      	ldr	r1, [pc, #152]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e92:	d105      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e94:	4b21      	ldr	r3, [pc, #132]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	4a20      	ldr	r2, [pc, #128]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d015      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005eac:	4b1b      	ldr	r3, [pc, #108]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	4918      	ldr	r1, [pc, #96]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eca:	d105      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ecc:	4b13      	ldr	r3, [pc, #76]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	4a12      	ldr	r2, [pc, #72]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ed6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d015      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ee4:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef2:	490a      	ldr	r1, [pc, #40]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f02:	d105      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f04:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4a04      	ldr	r2, [pc, #16]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f10:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	40021000 	.word	0x40021000

08005f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e049      	b.n	8005fc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fb ff36 	bl	8001db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	f000 ff1a 	bl	8006d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d001      	beq.n	8005fe8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e042      	b.n	800606e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a21      	ldr	r2, [pc, #132]	; (800607c <HAL_TIM_Base_Start+0xac>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d018      	beq.n	800602c <HAL_TIM_Base_Start+0x5c>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006002:	d013      	beq.n	800602c <HAL_TIM_Base_Start+0x5c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a1d      	ldr	r2, [pc, #116]	; (8006080 <HAL_TIM_Base_Start+0xb0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00e      	beq.n	800602c <HAL_TIM_Base_Start+0x5c>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a1c      	ldr	r2, [pc, #112]	; (8006084 <HAL_TIM_Base_Start+0xb4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d009      	beq.n	800602c <HAL_TIM_Base_Start+0x5c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a1a      	ldr	r2, [pc, #104]	; (8006088 <HAL_TIM_Base_Start+0xb8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d004      	beq.n	800602c <HAL_TIM_Base_Start+0x5c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a19      	ldr	r2, [pc, #100]	; (800608c <HAL_TIM_Base_Start+0xbc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d115      	bne.n	8006058 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	4b17      	ldr	r3, [pc, #92]	; (8006090 <HAL_TIM_Base_Start+0xc0>)
 8006034:	4013      	ands	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b06      	cmp	r3, #6
 800603c:	d015      	beq.n	800606a <HAL_TIM_Base_Start+0x9a>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006044:	d011      	beq.n	800606a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0201 	orr.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006056:	e008      	b.n	800606a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0201 	orr.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	e000      	b.n	800606c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	40012c00 	.word	0x40012c00
 8006080:	40000400 	.word	0x40000400
 8006084:	40000800 	.word	0x40000800
 8006088:	40013400 	.word	0x40013400
 800608c:	40014000 	.word	0x40014000
 8006090:	00010007 	.word	0x00010007

08006094 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e049      	b.n	800613a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f841 	bl	8006142 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4619      	mov	r1, r3
 80060d2:	4610      	mov	r0, r2
 80060d4:	f000 fe60 	bl	8006d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
	...

08006158 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d109      	bne.n	800617c <HAL_TIM_OC_Start+0x24>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b01      	cmp	r3, #1
 8006172:	bf14      	ite	ne
 8006174:	2301      	movne	r3, #1
 8006176:	2300      	moveq	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	e03c      	b.n	80061f6 <HAL_TIM_OC_Start+0x9e>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b04      	cmp	r3, #4
 8006180:	d109      	bne.n	8006196 <HAL_TIM_OC_Start+0x3e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b01      	cmp	r3, #1
 800618c:	bf14      	ite	ne
 800618e:	2301      	movne	r3, #1
 8006190:	2300      	moveq	r3, #0
 8006192:	b2db      	uxtb	r3, r3
 8006194:	e02f      	b.n	80061f6 <HAL_TIM_OC_Start+0x9e>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b08      	cmp	r3, #8
 800619a:	d109      	bne.n	80061b0 <HAL_TIM_OC_Start+0x58>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	bf14      	ite	ne
 80061a8:	2301      	movne	r3, #1
 80061aa:	2300      	moveq	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	e022      	b.n	80061f6 <HAL_TIM_OC_Start+0x9e>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b0c      	cmp	r3, #12
 80061b4:	d109      	bne.n	80061ca <HAL_TIM_OC_Start+0x72>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b01      	cmp	r3, #1
 80061c0:	bf14      	ite	ne
 80061c2:	2301      	movne	r3, #1
 80061c4:	2300      	moveq	r3, #0
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	e015      	b.n	80061f6 <HAL_TIM_OC_Start+0x9e>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b10      	cmp	r3, #16
 80061ce:	d109      	bne.n	80061e4 <HAL_TIM_OC_Start+0x8c>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b01      	cmp	r3, #1
 80061da:	bf14      	ite	ne
 80061dc:	2301      	movne	r3, #1
 80061de:	2300      	moveq	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	e008      	b.n	80061f6 <HAL_TIM_OC_Start+0x9e>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	bf14      	ite	ne
 80061f0:	2301      	movne	r3, #1
 80061f2:	2300      	moveq	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e097      	b.n	800632e <HAL_TIM_OC_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d104      	bne.n	800620e <HAL_TIM_OC_Start+0xb6>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800620c:	e023      	b.n	8006256 <HAL_TIM_OC_Start+0xfe>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b04      	cmp	r3, #4
 8006212:	d104      	bne.n	800621e <HAL_TIM_OC_Start+0xc6>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800621c:	e01b      	b.n	8006256 <HAL_TIM_OC_Start+0xfe>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b08      	cmp	r3, #8
 8006222:	d104      	bne.n	800622e <HAL_TIM_OC_Start+0xd6>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800622c:	e013      	b.n	8006256 <HAL_TIM_OC_Start+0xfe>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b0c      	cmp	r3, #12
 8006232:	d104      	bne.n	800623e <HAL_TIM_OC_Start+0xe6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800623c:	e00b      	b.n	8006256 <HAL_TIM_OC_Start+0xfe>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b10      	cmp	r3, #16
 8006242:	d104      	bne.n	800624e <HAL_TIM_OC_Start+0xf6>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800624c:	e003      	b.n	8006256 <HAL_TIM_OC_Start+0xfe>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2202      	movs	r2, #2
 8006252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2201      	movs	r2, #1
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f001 f9bc 	bl	80075dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a33      	ldr	r2, [pc, #204]	; (8006338 <HAL_TIM_OC_Start+0x1e0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <HAL_TIM_OC_Start+0x13e>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a32      	ldr	r2, [pc, #200]	; (800633c <HAL_TIM_OC_Start+0x1e4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00e      	beq.n	8006296 <HAL_TIM_OC_Start+0x13e>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a30      	ldr	r2, [pc, #192]	; (8006340 <HAL_TIM_OC_Start+0x1e8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d009      	beq.n	8006296 <HAL_TIM_OC_Start+0x13e>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a2f      	ldr	r2, [pc, #188]	; (8006344 <HAL_TIM_OC_Start+0x1ec>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_TIM_OC_Start+0x13e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a2d      	ldr	r2, [pc, #180]	; (8006348 <HAL_TIM_OC_Start+0x1f0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d101      	bne.n	800629a <HAL_TIM_OC_Start+0x142>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <HAL_TIM_OC_Start+0x144>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a20      	ldr	r2, [pc, #128]	; (8006338 <HAL_TIM_OC_Start+0x1e0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d018      	beq.n	80062ec <HAL_TIM_OC_Start+0x194>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c2:	d013      	beq.n	80062ec <HAL_TIM_OC_Start+0x194>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a20      	ldr	r2, [pc, #128]	; (800634c <HAL_TIM_OC_Start+0x1f4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00e      	beq.n	80062ec <HAL_TIM_OC_Start+0x194>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1f      	ldr	r2, [pc, #124]	; (8006350 <HAL_TIM_OC_Start+0x1f8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d009      	beq.n	80062ec <HAL_TIM_OC_Start+0x194>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a17      	ldr	r2, [pc, #92]	; (800633c <HAL_TIM_OC_Start+0x1e4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <HAL_TIM_OC_Start+0x194>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a16      	ldr	r2, [pc, #88]	; (8006340 <HAL_TIM_OC_Start+0x1e8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d115      	bne.n	8006318 <HAL_TIM_OC_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	4b18      	ldr	r3, [pc, #96]	; (8006354 <HAL_TIM_OC_Start+0x1fc>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b06      	cmp	r3, #6
 80062fc:	d015      	beq.n	800632a <HAL_TIM_OC_Start+0x1d2>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006304:	d011      	beq.n	800632a <HAL_TIM_OC_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0201 	orr.w	r2, r2, #1
 8006314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006316:	e008      	b.n	800632a <HAL_TIM_OC_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	e000      	b.n	800632c <HAL_TIM_OC_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	40012c00 	.word	0x40012c00
 800633c:	40013400 	.word	0x40013400
 8006340:	40014000 	.word	0x40014000
 8006344:	40014400 	.word	0x40014400
 8006348:	40014800 	.word	0x40014800
 800634c:	40000400 	.word	0x40000400
 8006350:	40000800 	.word	0x40000800
 8006354:	00010007 	.word	0x00010007

08006358 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e041      	b.n	80063f0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d106      	bne.n	8006386 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f839 	bl	80063f8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2202      	movs	r2, #2
 800638a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3304      	adds	r3, #4
 8006396:	4619      	mov	r1, r3
 8006398:	4610      	mov	r0, r2
 800639a:	f000 fcfd 	bl	8006d98 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0208 	bic.w	r2, r2, #8
 80063ac:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6819      	ldr	r1, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006422:	2b01      	cmp	r3, #1
 8006424:	d101      	bne.n	800642a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006426:	2302      	movs	r3, #2
 8006428:	e066      	b.n	80064f8 <HAL_TIM_OC_ConfigChannel+0xec>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b14      	cmp	r3, #20
 8006436:	d857      	bhi.n	80064e8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006438:	a201      	add	r2, pc, #4	; (adr r2, 8006440 <HAL_TIM_OC_ConfigChannel+0x34>)
 800643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643e:	bf00      	nop
 8006440:	08006495 	.word	0x08006495
 8006444:	080064e9 	.word	0x080064e9
 8006448:	080064e9 	.word	0x080064e9
 800644c:	080064e9 	.word	0x080064e9
 8006450:	080064a3 	.word	0x080064a3
 8006454:	080064e9 	.word	0x080064e9
 8006458:	080064e9 	.word	0x080064e9
 800645c:	080064e9 	.word	0x080064e9
 8006460:	080064b1 	.word	0x080064b1
 8006464:	080064e9 	.word	0x080064e9
 8006468:	080064e9 	.word	0x080064e9
 800646c:	080064e9 	.word	0x080064e9
 8006470:	080064bf 	.word	0x080064bf
 8006474:	080064e9 	.word	0x080064e9
 8006478:	080064e9 	.word	0x080064e9
 800647c:	080064e9 	.word	0x080064e9
 8006480:	080064cd 	.word	0x080064cd
 8006484:	080064e9 	.word	0x080064e9
 8006488:	080064e9 	.word	0x080064e9
 800648c:	080064e9 	.word	0x080064e9
 8006490:	080064db 	.word	0x080064db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fd0c 	bl	8006eb8 <TIM_OC1_SetConfig>
      break;
 80064a0:	e025      	b.n	80064ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68b9      	ldr	r1, [r7, #8]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fd95 	bl	8006fd8 <TIM_OC2_SetConfig>
      break;
 80064ae:	e01e      	b.n	80064ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fe18 	bl	80070ec <TIM_OC3_SetConfig>
      break;
 80064bc:	e017      	b.n	80064ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fe99 	bl	80071fc <TIM_OC4_SetConfig>
      break;
 80064ca:	e010      	b.n	80064ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68b9      	ldr	r1, [r7, #8]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 ff1c 	bl	8007310 <TIM_OC5_SetConfig>
      break;
 80064d8:	e009      	b.n	80064ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68b9      	ldr	r1, [r7, #8]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 ff79 	bl	80073d8 <TIM_OC6_SetConfig>
      break;
 80064e6:	e002      	b.n	80064ee <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
      break;
 80064ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_TIM_DMABurst_WriteStart>:
  * @note   This function should be used only when BurstLength is equal to DMA data transfer length.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                              uint32_t BurstRequestSrc, uint32_t *BurstBuffer, uint32_t  BurstLength)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af02      	add	r7, sp, #8
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;

  status = HAL_TIM_DMABurst_MultiWriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
                                            ((BurstLength) >> 8U) + 1U);
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	0a1b      	lsrs	r3, r3, #8
  status = HAL_TIM_DMABurst_MultiWriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
 8006512:	3301      	adds	r3, #1
 8006514:	9301      	str	r3, [sp, #4]
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 f807 	bl	8006534 <HAL_TIM_DMABurst_MultiWriteStart>
 8006526:	4603      	mov	r3, r0
 8006528:	75fb      	strb	r3, [r7, #23]



  return status;
 800652a:	7dfb      	ldrb	r3, [r7, #23]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_TIM_DMABurst_MultiWriteStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiWriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                                   uint32_t BurstRequestSrc, uint32_t *BurstBuffer,
                                                   uint32_t  BurstLength,  uint32_t  DataLength)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  assert_param(IS_TIM_DMA_DATA_LENGTH(DataLength));

  if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d101      	bne.n	8006556 <HAL_TIM_DMABurst_MultiWriteStart+0x22>
  {
    return HAL_BUSY;
 8006552:	2302      	movs	r3, #2
 8006554:	e133      	b.n	80067be <HAL_TIM_DMABurst_MultiWriteStart+0x28a>
  }
  else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b01      	cmp	r3, #1
 8006560:	d10b      	bne.n	800657a <HAL_TIM_DMABurst_MultiWriteStart+0x46>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d104      	bne.n	8006572 <HAL_TIM_DMABurst_MultiWriteStart+0x3e>
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <HAL_TIM_DMABurst_MultiWriteStart+0x3e>
    {
      return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e125      	b.n	80067be <HAL_TIM_DMABurst_MultiWriteStart+0x28a>
    }
    else
    {
      htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2202      	movs	r2, #2
 8006576:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  else
  {
    /* nothing to do */
  }

  switch (BurstRequestSrc)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006580:	f000 80de 	beq.w	8006740 <HAL_TIM_DMABurst_MultiWriteStart+0x20c>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800658a:	f200 80f5 	bhi.w	8006778 <HAL_TIM_DMABurst_MultiWriteStart+0x244>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006594:	f000 80b8 	beq.w	8006708 <HAL_TIM_DMABurst_MultiWriteStart+0x1d4>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800659e:	f200 80eb 	bhi.w	8006778 <HAL_TIM_DMABurst_MultiWriteStart+0x244>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a8:	f000 8092 	beq.w	80066d0 <HAL_TIM_DMABurst_MultiWriteStart+0x19c>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b2:	f200 80e1 	bhi.w	8006778 <HAL_TIM_DMABurst_MultiWriteStart+0x244>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065bc:	d06c      	beq.n	8006698 <HAL_TIM_DMABurst_MultiWriteStart+0x164>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c4:	f200 80d8 	bhi.w	8006778 <HAL_TIM_DMABurst_MultiWriteStart+0x244>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ce:	d047      	beq.n	8006660 <HAL_TIM_DMABurst_MultiWriteStart+0x12c>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d6:	f200 80cf 	bhi.w	8006778 <HAL_TIM_DMABurst_MultiWriteStart+0x244>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e0:	d004      	beq.n	80065ec <HAL_TIM_DMABurst_MultiWriteStart+0xb8>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065e8:	d01d      	beq.n	8006626 <HAL_TIM_DMABurst_MultiWriteStart+0xf2>
 80065ea:	e0c5      	b.n	8006778 <HAL_TIM_DMABurst_MultiWriteStart+0x244>
  {
    case TIM_DMA_UPDATE:
    {
      /* Set the DMA Period elapsed callbacks */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	4a75      	ldr	r2, [pc, #468]	; (80067c8 <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 80065f2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	4a74      	ldr	r2, [pc, #464]	; (80067cc <HAL_TIM_DMABurst_MultiWriteStart+0x298>)
 80065fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	4a73      	ldr	r2, [pc, #460]	; (80067d0 <HAL_TIM_DMABurst_MultiWriteStart+0x29c>)
 8006602:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a18      	ldr	r0, [r3, #32]
 8006608:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 8006612:	461a      	mov	r2, r3
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	f7fd ffc9 	bl	80045ac <HAL_DMA_Start_IT>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 80ae 	beq.w	800677e <HAL_TIM_DMABurst_MultiWriteStart+0x24a>
      {
        /* Return error status */
        return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e0cb      	b.n	80067be <HAL_TIM_DMABurst_MultiWriteStart+0x28a>
      break;
    }
    case TIM_DMA_CC1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	4a6a      	ldr	r2, [pc, #424]	; (80067d4 <HAL_TIM_DMABurst_MultiWriteStart+0x2a0>)
 800662c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	4a69      	ldr	r2, [pc, #420]	; (80067d8 <HAL_TIM_DMABurst_MultiWriteStart+0x2a4>)
 8006634:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	4a65      	ldr	r2, [pc, #404]	; (80067d0 <HAL_TIM_DMABurst_MultiWriteStart+0x29c>)
 800663c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006642:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 800664c:	461a      	mov	r2, r3
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	f7fd ffac 	bl	80045ac <HAL_DMA_Start_IT>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 8093 	beq.w	8006782 <HAL_TIM_DMABurst_MultiWriteStart+0x24e>
      {
        /* Return error status */
        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e0ae      	b.n	80067be <HAL_TIM_DMABurst_MultiWriteStart+0x28a>
      break;
    }
    case TIM_DMA_CC2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	4a5b      	ldr	r2, [pc, #364]	; (80067d4 <HAL_TIM_DMABurst_MultiWriteStart+0x2a0>)
 8006666:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	4a5a      	ldr	r2, [pc, #360]	; (80067d8 <HAL_TIM_DMABurst_MultiWriteStart+0x2a4>)
 800666e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	4a56      	ldr	r2, [pc, #344]	; (80067d0 <HAL_TIM_DMABurst_MultiWriteStart+0x29c>)
 8006676:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800667c:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 8006686:	461a      	mov	r2, r3
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	f7fd ff8f 	bl	80045ac <HAL_DMA_Start_IT>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d078      	beq.n	8006786 <HAL_TIM_DMABurst_MultiWriteStart+0x252>
      {
        /* Return error status */
        return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e092      	b.n	80067be <HAL_TIM_DMABurst_MultiWriteStart+0x28a>
      break;
    }
    case TIM_DMA_CC3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	4a4d      	ldr	r2, [pc, #308]	; (80067d4 <HAL_TIM_DMABurst_MultiWriteStart+0x2a0>)
 800669e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	4a4c      	ldr	r2, [pc, #304]	; (80067d8 <HAL_TIM_DMABurst_MultiWriteStart+0x2a4>)
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	4a48      	ldr	r2, [pc, #288]	; (80067d0 <HAL_TIM_DMABurst_MultiWriteStart+0x29c>)
 80066ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80066b4:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 80066be:	461a      	mov	r2, r3
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	f7fd ff73 	bl	80045ac <HAL_DMA_Start_IT>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d05e      	beq.n	800678a <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      {
        /* Return error status */
        return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e076      	b.n	80067be <HAL_TIM_DMABurst_MultiWriteStart+0x28a>
      break;
    }
    case TIM_DMA_CC4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	4a3f      	ldr	r2, [pc, #252]	; (80067d4 <HAL_TIM_DMABurst_MultiWriteStart+0x2a0>)
 80066d6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066dc:	4a3e      	ldr	r2, [pc, #248]	; (80067d8 <HAL_TIM_DMABurst_MultiWriteStart+0x2a4>)
 80066de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	4a3a      	ldr	r2, [pc, #232]	; (80067d0 <HAL_TIM_DMABurst_MultiWriteStart+0x29c>)
 80066e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066ec:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 80066f6:	461a      	mov	r2, r3
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	f7fd ff57 	bl	80045ac <HAL_DMA_Start_IT>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d044      	beq.n	800678e <HAL_TIM_DMABurst_MultiWriteStart+0x25a>
      {
        /* Return error status */
        return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e05a      	b.n	80067be <HAL_TIM_DMABurst_MultiWriteStart+0x28a>
      break;
    }
    case TIM_DMA_COM:
    {
      /* Set the DMA commutation callbacks */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670c:	4a33      	ldr	r2, [pc, #204]	; (80067dc <HAL_TIM_DMABurst_MultiWriteStart+0x2a8>)
 800670e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006714:	4a32      	ldr	r2, [pc, #200]	; (80067e0 <HAL_TIM_DMABurst_MultiWriteStart+0x2ac>)
 8006716:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671c:	4a2c      	ldr	r2, [pc, #176]	; (80067d0 <HAL_TIM_DMABurst_MultiWriteStart+0x29c>)
 800671e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006724:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 800672e:	461a      	mov	r2, r3
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	f7fd ff3b 	bl	80045ac <HAL_DMA_Start_IT>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d02a      	beq.n	8006792 <HAL_TIM_DMABurst_MultiWriteStart+0x25e>
      {
        /* Return error status */
        return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e03e      	b.n	80067be <HAL_TIM_DMABurst_MultiWriteStart+0x28a>
      break;
    }
    case TIM_DMA_TRIGGER:
    {
      /* Set the DMA trigger callbacks */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	4a27      	ldr	r2, [pc, #156]	; (80067e4 <HAL_TIM_DMABurst_MultiWriteStart+0x2b0>)
 8006746:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	4a26      	ldr	r2, [pc, #152]	; (80067e8 <HAL_TIM_DMABurst_MultiWriteStart+0x2b4>)
 800674e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006754:	4a1e      	ldr	r2, [pc, #120]	; (80067d0 <HAL_TIM_DMABurst_MultiWriteStart+0x29c>)
 8006756:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800675c:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 8006766:	461a      	mov	r2, r3
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	f7fd ff1f 	bl	80045ac <HAL_DMA_Start_IT>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d010      	beq.n	8006796 <HAL_TIM_DMABurst_MultiWriteStart+0x262>
      {
        /* Return error status */
        return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e022      	b.n	80067be <HAL_TIM_DMABurst_MultiWriteStart+0x28a>
      }
      break;
    }
    default:
      status = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	75fb      	strb	r3, [r7, #23]
      break;
 800677c:	e00c      	b.n	8006798 <HAL_TIM_DMABurst_MultiWriteStart+0x264>
      break;
 800677e:	bf00      	nop
 8006780:	e00a      	b.n	8006798 <HAL_TIM_DMABurst_MultiWriteStart+0x264>
      break;
 8006782:	bf00      	nop
 8006784:	e008      	b.n	8006798 <HAL_TIM_DMABurst_MultiWriteStart+0x264>
      break;
 8006786:	bf00      	nop
 8006788:	e006      	b.n	8006798 <HAL_TIM_DMABurst_MultiWriteStart+0x264>
      break;
 800678a:	bf00      	nop
 800678c:	e004      	b.n	8006798 <HAL_TIM_DMABurst_MultiWriteStart+0x264>
      break;
 800678e:	bf00      	nop
 8006790:	e002      	b.n	8006798 <HAL_TIM_DMABurst_MultiWriteStart+0x264>
      break;
 8006792:	bf00      	nop
 8006794:	e000      	b.n	8006798 <HAL_TIM_DMABurst_MultiWriteStart+0x264>
      break;
 8006796:	bf00      	nop
  }

  if (status == HAL_OK)
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10e      	bne.n	80067bc <HAL_TIM_DMABurst_MultiWriteStart+0x288>
  {
    /* Configure the DMA Burst Mode */
    htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68b9      	ldr	r1, [r7, #8]
 80067a4:	6a3a      	ldr	r2, [r7, #32]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
    /* Enable the TIM DMA Request */
    __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68d9      	ldr	r1, [r3, #12]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	60da      	str	r2, [r3, #12]
  }

  /* Return function status */
  return status;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	08006d03 	.word	0x08006d03
 80067cc:	08006d31 	.word	0x08006d31
 80067d0:	08006b61 	.word	0x08006b61
 80067d4:	08006bf3 	.word	0x08006bf3
 80067d8:	08006c9b 	.word	0x08006c9b
 80067dc:	08007755 	.word	0x08007755
 80067e0:	08007779 	.word	0x08007779
 80067e4:	08006d4d 	.word	0x08006d4d
 80067e8:	08006d7b 	.word	0x08006d7b

080067ec <HAL_TIM_DMABurst_WriteStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch (BurstRequestSrc)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006800:	d050      	beq.n	80068a4 <HAL_TIM_DMABurst_WriteStop+0xb8>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006808:	d852      	bhi.n	80068b0 <HAL_TIM_DMABurst_WriteStop+0xc4>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006810:	d042      	beq.n	8006898 <HAL_TIM_DMABurst_WriteStop+0xac>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006818:	d84a      	bhi.n	80068b0 <HAL_TIM_DMABurst_WriteStop+0xc4>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006820:	d034      	beq.n	800688c <HAL_TIM_DMABurst_WriteStop+0xa0>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006828:	d842      	bhi.n	80068b0 <HAL_TIM_DMABurst_WriteStop+0xc4>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006830:	d026      	beq.n	8006880 <HAL_TIM_DMABurst_WriteStop+0x94>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006838:	d83a      	bhi.n	80068b0 <HAL_TIM_DMABurst_WriteStop+0xc4>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006840:	d018      	beq.n	8006874 <HAL_TIM_DMABurst_WriteStop+0x88>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006848:	d832      	bhi.n	80068b0 <HAL_TIM_DMABurst_WriteStop+0xc4>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006850:	d004      	beq.n	800685c <HAL_TIM_DMABurst_WriteStop+0x70>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006858:	d006      	beq.n	8006868 <HAL_TIM_DMABurst_WriteStop+0x7c>
 800685a:	e029      	b.n	80068b0 <HAL_TIM_DMABurst_WriteStop+0xc4>
  {
    case TIM_DMA_UPDATE:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	4618      	mov	r0, r3
 8006862:	f7fd ff1e 	bl	80046a2 <HAL_DMA_Abort_IT>
      break;
 8006866:	e026      	b.n	80068b6 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC1:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	4618      	mov	r0, r3
 800686e:	f7fd ff18 	bl	80046a2 <HAL_DMA_Abort_IT>
      break;
 8006872:	e020      	b.n	80068b6 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC2:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006878:	4618      	mov	r0, r3
 800687a:	f7fd ff12 	bl	80046a2 <HAL_DMA_Abort_IT>
      break;
 800687e:	e01a      	b.n	80068b6 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC3:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	4618      	mov	r0, r3
 8006886:	f7fd ff0c 	bl	80046a2 <HAL_DMA_Abort_IT>
      break;
 800688a:	e014      	b.n	80068b6 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC4:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006890:	4618      	mov	r0, r3
 8006892:	f7fd ff06 	bl	80046a2 <HAL_DMA_Abort_IT>
      break;
 8006896:	e00e      	b.n	80068b6 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_COM:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689c:	4618      	mov	r0, r3
 800689e:	f7fd ff00 	bl	80046a2 <HAL_DMA_Abort_IT>
      break;
 80068a2:	e008      	b.n	80068b6 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_TRIGGER:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fd fefa 	bl	80046a2 <HAL_DMA_Abort_IT>
      break;
 80068ae:	e002      	b.n	80068b6 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    default:
      status = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	73fb      	strb	r3, [r7, #15]
      break;
 80068b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10c      	bne.n	80068d6 <HAL_TIM_DMABurst_WriteStop+0xea>
  {
    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68d9      	ldr	r1, [r3, #12]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	43da      	mvns	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	400a      	ands	r2, r1
 80068cc:	60da      	str	r2, [r3, #12]

    /* Change the DMA burst operation state */
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  }

  /* Return function status */
  return status;
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d101      	bne.n	80068fc <HAL_TIM_ConfigClockSource+0x1c>
 80068f8:	2302      	movs	r3, #2
 80068fa:	e0de      	b.n	8006aba <HAL_TIM_ConfigClockSource+0x1da>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800691a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800691e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006926:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a63      	ldr	r2, [pc, #396]	; (8006ac4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	f000 80a9 	beq.w	8006a8e <HAL_TIM_ConfigClockSource+0x1ae>
 800693c:	4a61      	ldr	r2, [pc, #388]	; (8006ac4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	f200 80ae 	bhi.w	8006aa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006944:	4a60      	ldr	r2, [pc, #384]	; (8006ac8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	f000 80a1 	beq.w	8006a8e <HAL_TIM_ConfigClockSource+0x1ae>
 800694c:	4a5e      	ldr	r2, [pc, #376]	; (8006ac8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	f200 80a6 	bhi.w	8006aa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006954:	4a5d      	ldr	r2, [pc, #372]	; (8006acc <HAL_TIM_ConfigClockSource+0x1ec>)
 8006956:	4293      	cmp	r3, r2
 8006958:	f000 8099 	beq.w	8006a8e <HAL_TIM_ConfigClockSource+0x1ae>
 800695c:	4a5b      	ldr	r2, [pc, #364]	; (8006acc <HAL_TIM_ConfigClockSource+0x1ec>)
 800695e:	4293      	cmp	r3, r2
 8006960:	f200 809e 	bhi.w	8006aa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006964:	4a5a      	ldr	r2, [pc, #360]	; (8006ad0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	f000 8091 	beq.w	8006a8e <HAL_TIM_ConfigClockSource+0x1ae>
 800696c:	4a58      	ldr	r2, [pc, #352]	; (8006ad0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	f200 8096 	bhi.w	8006aa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006974:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006978:	f000 8089 	beq.w	8006a8e <HAL_TIM_ConfigClockSource+0x1ae>
 800697c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006980:	f200 808e 	bhi.w	8006aa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006988:	d03e      	beq.n	8006a08 <HAL_TIM_ConfigClockSource+0x128>
 800698a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800698e:	f200 8087 	bhi.w	8006aa0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006996:	f000 8086 	beq.w	8006aa6 <HAL_TIM_ConfigClockSource+0x1c6>
 800699a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699e:	d87f      	bhi.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1c0>
 80069a0:	2b70      	cmp	r3, #112	; 0x70
 80069a2:	d01a      	beq.n	80069da <HAL_TIM_ConfigClockSource+0xfa>
 80069a4:	2b70      	cmp	r3, #112	; 0x70
 80069a6:	d87b      	bhi.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1c0>
 80069a8:	2b60      	cmp	r3, #96	; 0x60
 80069aa:	d050      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0x16e>
 80069ac:	2b60      	cmp	r3, #96	; 0x60
 80069ae:	d877      	bhi.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1c0>
 80069b0:	2b50      	cmp	r3, #80	; 0x50
 80069b2:	d03c      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x14e>
 80069b4:	2b50      	cmp	r3, #80	; 0x50
 80069b6:	d873      	bhi.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1c0>
 80069b8:	2b40      	cmp	r3, #64	; 0x40
 80069ba:	d058      	beq.n	8006a6e <HAL_TIM_ConfigClockSource+0x18e>
 80069bc:	2b40      	cmp	r3, #64	; 0x40
 80069be:	d86f      	bhi.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1c0>
 80069c0:	2b30      	cmp	r3, #48	; 0x30
 80069c2:	d064      	beq.n	8006a8e <HAL_TIM_ConfigClockSource+0x1ae>
 80069c4:	2b30      	cmp	r3, #48	; 0x30
 80069c6:	d86b      	bhi.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1c0>
 80069c8:	2b20      	cmp	r3, #32
 80069ca:	d060      	beq.n	8006a8e <HAL_TIM_ConfigClockSource+0x1ae>
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	d867      	bhi.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1c0>
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d05c      	beq.n	8006a8e <HAL_TIM_ConfigClockSource+0x1ae>
 80069d4:	2b10      	cmp	r3, #16
 80069d6:	d05a      	beq.n	8006a8e <HAL_TIM_ConfigClockSource+0x1ae>
 80069d8:	e062      	b.n	8006aa0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	6899      	ldr	r1, [r3, #8]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f000 fdd7 	bl	800759c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	609a      	str	r2, [r3, #8]
      break;
 8006a06:	e04f      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	6899      	ldr	r1, [r3, #8]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f000 fdc0 	bl	800759c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a2a:	609a      	str	r2, [r3, #8]
      break;
 8006a2c:	e03c      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	6859      	ldr	r1, [r3, #4]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f000 fd32 	bl	80074a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2150      	movs	r1, #80	; 0x50
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fd8b 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 8006a4c:	e02c      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6818      	ldr	r0, [r3, #0]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	6859      	ldr	r1, [r3, #4]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f000 fd51 	bl	8007502 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2160      	movs	r1, #96	; 0x60
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 fd7b 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 8006a6c:	e01c      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	6859      	ldr	r1, [r3, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f000 fd12 	bl	80074a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2140      	movs	r1, #64	; 0x40
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fd6b 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 8006a8c:	e00c      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4619      	mov	r1, r3
 8006a98:	4610      	mov	r0, r2
 8006a9a:	f000 fd62 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 8006a9e:	e003      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8006aa4:	e000      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006aa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	00100070 	.word	0x00100070
 8006ac8:	00100040 	.word	0x00100040
 8006acc:	00100030 	.word	0x00100030
 8006ad0:	00100020 	.word	0x00100020

08006ad4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d107      	bne.n	8006b88 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b86:	e02a      	b.n	8006bde <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d107      	bne.n	8006ba2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2202      	movs	r2, #2
 8006b96:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ba0:	e01d      	b.n	8006bde <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d107      	bne.n	8006bbc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2204      	movs	r2, #4
 8006bb0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bba:	e010      	b.n	8006bde <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d107      	bne.n	8006bd6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2208      	movs	r2, #8
 8006bca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bd4:	e003      	b.n	8006bde <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f7ff ffb4 	bl	8006b4c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	771a      	strb	r2, [r3, #28]
}
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d10b      	bne.n	8006c22 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d136      	bne.n	8006c86 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c20:	e031      	b.n	8006c86 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d10b      	bne.n	8006c44 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d125      	bne.n	8006c86 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c42:	e020      	b.n	8006c86 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d10b      	bne.n	8006c66 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2204      	movs	r2, #4
 8006c52:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d114      	bne.n	8006c86 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c64:	e00f      	b.n	8006c86 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d10a      	bne.n	8006c86 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2208      	movs	r2, #8
 8006c74:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d103      	bne.n	8006c86 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f7ff ff38 	bl	8006afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	771a      	strb	r2, [r3, #28]
}
 8006c92:	bf00      	nop
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d103      	bne.n	8006cba <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	771a      	strb	r2, [r3, #28]
 8006cb8:	e019      	b.n	8006cee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d103      	bne.n	8006ccc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	771a      	strb	r2, [r3, #28]
 8006cca:	e010      	b.n	8006cee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d103      	bne.n	8006cde <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2204      	movs	r2, #4
 8006cda:	771a      	strb	r2, [r3, #28]
 8006cdc:	e007      	b.n	8006cee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d102      	bne.n	8006cee <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2208      	movs	r2, #8
 8006cec:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f7ff ff0e 	bl	8006b10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	771a      	strb	r2, [r3, #28]
}
 8006cfa:	bf00      	nop
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0e:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d103      	bne.n	8006d22 <TIM_DMAPeriodElapsedCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f7ff fed6 	bl	8006ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8006d28:	bf00      	nop
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f7ff fed2 	bl	8006ae8 <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8006d44:	bf00      	nop
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <TIM_DMATriggerCplt>:
  * @brief  TIM DMA Trigger callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d58:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_TRIGGER]->Init.Mode == DMA_NORMAL)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d103      	bne.n	8006d6c <TIM_DMATriggerCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerCallback(htim);
#else
  HAL_TIM_TriggerCallback(htim);
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff fed9 	bl	8006b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8006d72:	bf00      	nop
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <TIM_DMATriggerHalfCplt>:
  * @brief  TIM DMA Trigger half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d86:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerHalfCpltCallback(htim);
#else
  HAL_TIM_TriggerHalfCpltCallback(htim);
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f7ff fed5 	bl	8006b38 <HAL_TIM_TriggerHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8006d8e:	bf00      	nop
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
	...

08006d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a3c      	ldr	r2, [pc, #240]	; (8006e9c <TIM_Base_SetConfig+0x104>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d00f      	beq.n	8006dd0 <TIM_Base_SetConfig+0x38>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db6:	d00b      	beq.n	8006dd0 <TIM_Base_SetConfig+0x38>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a39      	ldr	r2, [pc, #228]	; (8006ea0 <TIM_Base_SetConfig+0x108>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d007      	beq.n	8006dd0 <TIM_Base_SetConfig+0x38>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a38      	ldr	r2, [pc, #224]	; (8006ea4 <TIM_Base_SetConfig+0x10c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d003      	beq.n	8006dd0 <TIM_Base_SetConfig+0x38>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a37      	ldr	r2, [pc, #220]	; (8006ea8 <TIM_Base_SetConfig+0x110>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d108      	bne.n	8006de2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a2d      	ldr	r2, [pc, #180]	; (8006e9c <TIM_Base_SetConfig+0x104>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d01b      	beq.n	8006e22 <TIM_Base_SetConfig+0x8a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df0:	d017      	beq.n	8006e22 <TIM_Base_SetConfig+0x8a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a2a      	ldr	r2, [pc, #168]	; (8006ea0 <TIM_Base_SetConfig+0x108>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d013      	beq.n	8006e22 <TIM_Base_SetConfig+0x8a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a29      	ldr	r2, [pc, #164]	; (8006ea4 <TIM_Base_SetConfig+0x10c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00f      	beq.n	8006e22 <TIM_Base_SetConfig+0x8a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a28      	ldr	r2, [pc, #160]	; (8006ea8 <TIM_Base_SetConfig+0x110>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00b      	beq.n	8006e22 <TIM_Base_SetConfig+0x8a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a27      	ldr	r2, [pc, #156]	; (8006eac <TIM_Base_SetConfig+0x114>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d007      	beq.n	8006e22 <TIM_Base_SetConfig+0x8a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a26      	ldr	r2, [pc, #152]	; (8006eb0 <TIM_Base_SetConfig+0x118>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d003      	beq.n	8006e22 <TIM_Base_SetConfig+0x8a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a25      	ldr	r2, [pc, #148]	; (8006eb4 <TIM_Base_SetConfig+0x11c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d108      	bne.n	8006e34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a10      	ldr	r2, [pc, #64]	; (8006e9c <TIM_Base_SetConfig+0x104>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00f      	beq.n	8006e80 <TIM_Base_SetConfig+0xe8>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a11      	ldr	r2, [pc, #68]	; (8006ea8 <TIM_Base_SetConfig+0x110>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00b      	beq.n	8006e80 <TIM_Base_SetConfig+0xe8>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a10      	ldr	r2, [pc, #64]	; (8006eac <TIM_Base_SetConfig+0x114>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d007      	beq.n	8006e80 <TIM_Base_SetConfig+0xe8>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a0f      	ldr	r2, [pc, #60]	; (8006eb0 <TIM_Base_SetConfig+0x118>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d003      	beq.n	8006e80 <TIM_Base_SetConfig+0xe8>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a0e      	ldr	r2, [pc, #56]	; (8006eb4 <TIM_Base_SetConfig+0x11c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d103      	bne.n	8006e88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	691a      	ldr	r2, [r3, #16]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	615a      	str	r2, [r3, #20]
}
 8006e8e:	bf00      	nop
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40000400 	.word	0x40000400
 8006ea4:	40000800 	.word	0x40000800
 8006ea8:	40013400 	.word	0x40013400
 8006eac:	40014000 	.word	0x40014000
 8006eb0:	40014400 	.word	0x40014400
 8006eb4:	40014800 	.word	0x40014800

08006eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	f023 0201 	bic.w	r2, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0303 	bic.w	r3, r3, #3
 8006ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f023 0302 	bic.w	r3, r3, #2
 8006f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a2c      	ldr	r2, [pc, #176]	; (8006fc4 <TIM_OC1_SetConfig+0x10c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00f      	beq.n	8006f38 <TIM_OC1_SetConfig+0x80>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a2b      	ldr	r2, [pc, #172]	; (8006fc8 <TIM_OC1_SetConfig+0x110>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d00b      	beq.n	8006f38 <TIM_OC1_SetConfig+0x80>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a2a      	ldr	r2, [pc, #168]	; (8006fcc <TIM_OC1_SetConfig+0x114>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d007      	beq.n	8006f38 <TIM_OC1_SetConfig+0x80>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a29      	ldr	r2, [pc, #164]	; (8006fd0 <TIM_OC1_SetConfig+0x118>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d003      	beq.n	8006f38 <TIM_OC1_SetConfig+0x80>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a28      	ldr	r2, [pc, #160]	; (8006fd4 <TIM_OC1_SetConfig+0x11c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d10c      	bne.n	8006f52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f023 0308 	bic.w	r3, r3, #8
 8006f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f023 0304 	bic.w	r3, r3, #4
 8006f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a1b      	ldr	r2, [pc, #108]	; (8006fc4 <TIM_OC1_SetConfig+0x10c>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00f      	beq.n	8006f7a <TIM_OC1_SetConfig+0xc2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a1a      	ldr	r2, [pc, #104]	; (8006fc8 <TIM_OC1_SetConfig+0x110>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00b      	beq.n	8006f7a <TIM_OC1_SetConfig+0xc2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a19      	ldr	r2, [pc, #100]	; (8006fcc <TIM_OC1_SetConfig+0x114>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d007      	beq.n	8006f7a <TIM_OC1_SetConfig+0xc2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a18      	ldr	r2, [pc, #96]	; (8006fd0 <TIM_OC1_SetConfig+0x118>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d003      	beq.n	8006f7a <TIM_OC1_SetConfig+0xc2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a17      	ldr	r2, [pc, #92]	; (8006fd4 <TIM_OC1_SetConfig+0x11c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d111      	bne.n	8006f9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	621a      	str	r2, [r3, #32]
}
 8006fb8:	bf00      	nop
 8006fba:	371c      	adds	r7, #28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	40012c00 	.word	0x40012c00
 8006fc8:	40013400 	.word	0x40013400
 8006fcc:	40014000 	.word	0x40014000
 8006fd0:	40014400 	.word	0x40014400
 8006fd4:	40014800 	.word	0x40014800

08006fd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	f023 0210 	bic.w	r2, r3, #16
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800700a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f023 0320 	bic.w	r3, r3, #32
 8007026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	011b      	lsls	r3, r3, #4
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	4313      	orrs	r3, r2
 8007032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a28      	ldr	r2, [pc, #160]	; (80070d8 <TIM_OC2_SetConfig+0x100>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d003      	beq.n	8007044 <TIM_OC2_SetConfig+0x6c>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a27      	ldr	r2, [pc, #156]	; (80070dc <TIM_OC2_SetConfig+0x104>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d10d      	bne.n	8007060 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800704a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800705e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a1d      	ldr	r2, [pc, #116]	; (80070d8 <TIM_OC2_SetConfig+0x100>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00f      	beq.n	8007088 <TIM_OC2_SetConfig+0xb0>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a1c      	ldr	r2, [pc, #112]	; (80070dc <TIM_OC2_SetConfig+0x104>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00b      	beq.n	8007088 <TIM_OC2_SetConfig+0xb0>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a1b      	ldr	r2, [pc, #108]	; (80070e0 <TIM_OC2_SetConfig+0x108>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d007      	beq.n	8007088 <TIM_OC2_SetConfig+0xb0>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a1a      	ldr	r2, [pc, #104]	; (80070e4 <TIM_OC2_SetConfig+0x10c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d003      	beq.n	8007088 <TIM_OC2_SetConfig+0xb0>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a19      	ldr	r2, [pc, #100]	; (80070e8 <TIM_OC2_SetConfig+0x110>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d113      	bne.n	80070b0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800708e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007096:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	621a      	str	r2, [r3, #32]
}
 80070ca:	bf00      	nop
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40012c00 	.word	0x40012c00
 80070dc:	40013400 	.word	0x40013400
 80070e0:	40014000 	.word	0x40014000
 80070e4:	40014400 	.word	0x40014400
 80070e8:	40014800 	.word	0x40014800

080070ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800711a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0303 	bic.w	r3, r3, #3
 8007126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	021b      	lsls	r3, r3, #8
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a27      	ldr	r2, [pc, #156]	; (80071e8 <TIM_OC3_SetConfig+0xfc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d003      	beq.n	8007156 <TIM_OC3_SetConfig+0x6a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a26      	ldr	r2, [pc, #152]	; (80071ec <TIM_OC3_SetConfig+0x100>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d10d      	bne.n	8007172 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800715c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	021b      	lsls	r3, r3, #8
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4313      	orrs	r3, r2
 8007168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a1c      	ldr	r2, [pc, #112]	; (80071e8 <TIM_OC3_SetConfig+0xfc>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00f      	beq.n	800719a <TIM_OC3_SetConfig+0xae>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a1b      	ldr	r2, [pc, #108]	; (80071ec <TIM_OC3_SetConfig+0x100>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d00b      	beq.n	800719a <TIM_OC3_SetConfig+0xae>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a1a      	ldr	r2, [pc, #104]	; (80071f0 <TIM_OC3_SetConfig+0x104>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d007      	beq.n	800719a <TIM_OC3_SetConfig+0xae>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a19      	ldr	r2, [pc, #100]	; (80071f4 <TIM_OC3_SetConfig+0x108>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d003      	beq.n	800719a <TIM_OC3_SetConfig+0xae>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a18      	ldr	r2, [pc, #96]	; (80071f8 <TIM_OC3_SetConfig+0x10c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d113      	bne.n	80071c2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	621a      	str	r2, [r3, #32]
}
 80071dc:	bf00      	nop
 80071de:	371c      	adds	r7, #28
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	40012c00 	.word	0x40012c00
 80071ec:	40013400 	.word	0x40013400
 80071f0:	40014000 	.word	0x40014000
 80071f4:	40014400 	.word	0x40014400
 80071f8:	40014800 	.word	0x40014800

080071fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800722a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800722e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	021b      	lsls	r3, r3, #8
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4313      	orrs	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800724a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	031b      	lsls	r3, r3, #12
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	4313      	orrs	r3, r2
 8007256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a28      	ldr	r2, [pc, #160]	; (80072fc <TIM_OC4_SetConfig+0x100>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d003      	beq.n	8007268 <TIM_OC4_SetConfig+0x6c>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a27      	ldr	r2, [pc, #156]	; (8007300 <TIM_OC4_SetConfig+0x104>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d10d      	bne.n	8007284 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800726e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	031b      	lsls	r3, r3, #12
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4313      	orrs	r3, r2
 800727a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007282:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a1d      	ldr	r2, [pc, #116]	; (80072fc <TIM_OC4_SetConfig+0x100>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00f      	beq.n	80072ac <TIM_OC4_SetConfig+0xb0>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a1c      	ldr	r2, [pc, #112]	; (8007300 <TIM_OC4_SetConfig+0x104>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d00b      	beq.n	80072ac <TIM_OC4_SetConfig+0xb0>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a1b      	ldr	r2, [pc, #108]	; (8007304 <TIM_OC4_SetConfig+0x108>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d007      	beq.n	80072ac <TIM_OC4_SetConfig+0xb0>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a1a      	ldr	r2, [pc, #104]	; (8007308 <TIM_OC4_SetConfig+0x10c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d003      	beq.n	80072ac <TIM_OC4_SetConfig+0xb0>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a19      	ldr	r2, [pc, #100]	; (800730c <TIM_OC4_SetConfig+0x110>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d113      	bne.n	80072d4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072b2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072ba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	019b      	lsls	r3, r3, #6
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	019b      	lsls	r3, r3, #6
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	621a      	str	r2, [r3, #32]
}
 80072ee:	bf00      	nop
 80072f0:	371c      	adds	r7, #28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	40012c00 	.word	0x40012c00
 8007300:	40013400 	.word	0x40013400
 8007304:	40014000 	.word	0x40014000
 8007308:	40014400 	.word	0x40014400
 800730c:	40014800 	.word	0x40014800

08007310 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800733e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007354:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	041b      	lsls	r3, r3, #16
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a17      	ldr	r2, [pc, #92]	; (80073c4 <TIM_OC5_SetConfig+0xb4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d00f      	beq.n	800738a <TIM_OC5_SetConfig+0x7a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a16      	ldr	r2, [pc, #88]	; (80073c8 <TIM_OC5_SetConfig+0xb8>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00b      	beq.n	800738a <TIM_OC5_SetConfig+0x7a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a15      	ldr	r2, [pc, #84]	; (80073cc <TIM_OC5_SetConfig+0xbc>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d007      	beq.n	800738a <TIM_OC5_SetConfig+0x7a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a14      	ldr	r2, [pc, #80]	; (80073d0 <TIM_OC5_SetConfig+0xc0>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d003      	beq.n	800738a <TIM_OC5_SetConfig+0x7a>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a13      	ldr	r2, [pc, #76]	; (80073d4 <TIM_OC5_SetConfig+0xc4>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d109      	bne.n	800739e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007390:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	021b      	lsls	r3, r3, #8
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	4313      	orrs	r3, r2
 800739c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	621a      	str	r2, [r3, #32]
}
 80073b8:	bf00      	nop
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	40012c00 	.word	0x40012c00
 80073c8:	40013400 	.word	0x40013400
 80073cc:	40014000 	.word	0x40014000
 80073d0:	40014400 	.word	0x40014400
 80073d4:	40014800 	.word	0x40014800

080073d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800740a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	021b      	lsls	r3, r3, #8
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800741e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	051b      	lsls	r3, r3, #20
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	4313      	orrs	r3, r2
 800742a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a18      	ldr	r2, [pc, #96]	; (8007490 <TIM_OC6_SetConfig+0xb8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d00f      	beq.n	8007454 <TIM_OC6_SetConfig+0x7c>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a17      	ldr	r2, [pc, #92]	; (8007494 <TIM_OC6_SetConfig+0xbc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d00b      	beq.n	8007454 <TIM_OC6_SetConfig+0x7c>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a16      	ldr	r2, [pc, #88]	; (8007498 <TIM_OC6_SetConfig+0xc0>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d007      	beq.n	8007454 <TIM_OC6_SetConfig+0x7c>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a15      	ldr	r2, [pc, #84]	; (800749c <TIM_OC6_SetConfig+0xc4>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d003      	beq.n	8007454 <TIM_OC6_SetConfig+0x7c>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a14      	ldr	r2, [pc, #80]	; (80074a0 <TIM_OC6_SetConfig+0xc8>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d109      	bne.n	8007468 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800745a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	029b      	lsls	r3, r3, #10
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	4313      	orrs	r3, r2
 8007466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	621a      	str	r2, [r3, #32]
}
 8007482:	bf00      	nop
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40012c00 	.word	0x40012c00
 8007494:	40013400 	.word	0x40013400
 8007498:	40014000 	.word	0x40014000
 800749c:	40014400 	.word	0x40014400
 80074a0:	40014800 	.word	0x40014800

080074a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	f023 0201 	bic.w	r2, r3, #1
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f023 030a 	bic.w	r3, r3, #10
 80074e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	621a      	str	r2, [r3, #32]
}
 80074f6:	bf00      	nop
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007502:	b480      	push	{r7}
 8007504:	b087      	sub	sp, #28
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	f023 0210 	bic.w	r2, r3, #16
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800752c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	031b      	lsls	r3, r3, #12
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	4313      	orrs	r3, r2
 8007536:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800753e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	4313      	orrs	r3, r2
 8007548:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	621a      	str	r2, [r3, #32]
}
 8007556:	bf00      	nop
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	f043 0307 	orr.w	r3, r3, #7
 8007588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	609a      	str	r2, [r3, #8]
}
 8007590:	bf00      	nop
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	021a      	lsls	r2, r3, #8
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	431a      	orrs	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	609a      	str	r2, [r3, #8]
}
 80075d0:	bf00      	nop
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f003 031f 	and.w	r3, r3, #31
 80075ee:	2201      	movs	r2, #1
 80075f0:	fa02 f303 	lsl.w	r3, r2, r3
 80075f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6a1a      	ldr	r2, [r3, #32]
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	43db      	mvns	r3, r3
 80075fe:	401a      	ands	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a1a      	ldr	r2, [r3, #32]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f003 031f 	and.w	r3, r3, #31
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	fa01 f303 	lsl.w	r3, r1, r3
 8007614:	431a      	orrs	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	621a      	str	r2, [r3, #32]
}
 800761a:	bf00      	nop
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
	...

08007628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800763c:	2302      	movs	r3, #2
 800763e:	e065      	b.n	800770c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a2c      	ldr	r2, [pc, #176]	; (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d004      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a2b      	ldr	r2, [pc, #172]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d108      	bne.n	8007686 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800767a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	4313      	orrs	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800768c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007690:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	4313      	orrs	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a1b      	ldr	r2, [pc, #108]	; (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d018      	beq.n	80076e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b6:	d013      	beq.n	80076e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a18      	ldr	r2, [pc, #96]	; (8007720 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d00e      	beq.n	80076e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a17      	ldr	r2, [pc, #92]	; (8007724 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d009      	beq.n	80076e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a12      	ldr	r2, [pc, #72]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d004      	beq.n	80076e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a13      	ldr	r2, [pc, #76]	; (8007728 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d10c      	bne.n	80076fa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	40012c00 	.word	0x40012c00
 800771c:	40013400 	.word	0x40013400
 8007720:	40000400 	.word	0x40000400
 8007724:	40000800 	.word	0x40000800
 8007728:	40014000 	.word	0x40014000

0800772c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <TIMEx_DMACommutationCplt>:
  * @brief  TIM DMA Commutation callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007760:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationCallback(htim);
#else
  HAL_TIMEx_CommutCallback(htim);
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f7ff ffde 	bl	800772c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007770:	bf00      	nop
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <TIMEx_DMACommutationHalfCplt>:
  * @brief  TIM DMA Commutation half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationHalfCpltCallback(htim);
#else
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f7ff ffd6 	bl	8007740 <HAL_TIMEx_CommutHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007794:	bf00      	nop
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e042      	b.n	8007834 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d106      	bne.n	80077c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7fa fc23 	bl	800200c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2224      	movs	r2, #36	; 0x24
 80077ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 0201 	bic.w	r2, r2, #1
 80077dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f8c2 	bl	8007968 <UART_SetConfig>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d101      	bne.n	80077ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e022      	b.n	8007834 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fb82 	bl	8007f00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800780a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800781a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0201 	orr.w	r2, r2, #1
 800782a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fc09 	bl	8008044 <UART_CheckIdleState>
 8007832:	4603      	mov	r3, r0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08a      	sub	sp, #40	; 0x28
 8007840:	af02      	add	r7, sp, #8
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	603b      	str	r3, [r7, #0]
 8007848:	4613      	mov	r3, r2
 800784a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007852:	2b20      	cmp	r3, #32
 8007854:	f040 8083 	bne.w	800795e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <HAL_UART_Transmit+0x28>
 800785e:	88fb      	ldrh	r3, [r7, #6]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e07b      	b.n	8007960 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800786e:	2b01      	cmp	r3, #1
 8007870:	d101      	bne.n	8007876 <HAL_UART_Transmit+0x3a>
 8007872:	2302      	movs	r3, #2
 8007874:	e074      	b.n	8007960 <HAL_UART_Transmit+0x124>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2221      	movs	r2, #33	; 0x21
 800788a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800788e:	f7fa fca3 	bl	80021d8 <HAL_GetTick>
 8007892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	88fa      	ldrh	r2, [r7, #6]
 8007898:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	88fa      	ldrh	r2, [r7, #6]
 80078a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ac:	d108      	bne.n	80078c0 <HAL_UART_Transmit+0x84>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d104      	bne.n	80078c0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	61bb      	str	r3, [r7, #24]
 80078be:	e003      	b.n	80078c8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078c4:	2300      	movs	r3, #0
 80078c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80078d0:	e02c      	b.n	800792c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2200      	movs	r2, #0
 80078da:	2180      	movs	r1, #128	; 0x80
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 fbfc 	bl	80080da <UART_WaitOnFlagUntilTimeout>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e039      	b.n	8007960 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10b      	bne.n	800790a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007900:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	3302      	adds	r3, #2
 8007906:	61bb      	str	r3, [r7, #24]
 8007908:	e007      	b.n	800791a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	781a      	ldrb	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	3301      	adds	r3, #1
 8007918:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007920:	b29b      	uxth	r3, r3
 8007922:	3b01      	subs	r3, #1
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007932:	b29b      	uxth	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1cc      	bne.n	80078d2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	2200      	movs	r2, #0
 8007940:	2140      	movs	r1, #64	; 0x40
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 fbc9 	bl	80080da <UART_WaitOnFlagUntilTimeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e006      	b.n	8007960 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2220      	movs	r2, #32
 8007956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	e000      	b.n	8007960 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800795e:	2302      	movs	r3, #2
  }
}
 8007960:	4618      	mov	r0, r3
 8007962:	3720      	adds	r7, #32
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800796c:	b08c      	sub	sp, #48	; 0x30
 800796e:	af00      	add	r7, sp, #0
 8007970:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	431a      	orrs	r2, r3
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	431a      	orrs	r2, r3
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	69db      	ldr	r3, [r3, #28]
 800798c:	4313      	orrs	r3, r2
 800798e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	4bab      	ldr	r3, [pc, #684]	; (8007c44 <UART_SetConfig+0x2dc>)
 8007998:	4013      	ands	r3, r2
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	6812      	ldr	r2, [r2, #0]
 800799e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079a0:	430b      	orrs	r3, r1
 80079a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4aa0      	ldr	r2, [pc, #640]	; (8007c48 <UART_SetConfig+0x2e0>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d004      	beq.n	80079d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079d0:	4313      	orrs	r3, r2
 80079d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80079de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079e8:	430b      	orrs	r3, r1
 80079ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	f023 010f 	bic.w	r1, r3, #15
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a91      	ldr	r2, [pc, #580]	; (8007c4c <UART_SetConfig+0x2e4>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d125      	bne.n	8007a58 <UART_SetConfig+0xf0>
 8007a0c:	4b90      	ldr	r3, [pc, #576]	; (8007c50 <UART_SetConfig+0x2e8>)
 8007a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a12:	f003 0303 	and.w	r3, r3, #3
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d81a      	bhi.n	8007a50 <UART_SetConfig+0xe8>
 8007a1a:	a201      	add	r2, pc, #4	; (adr r2, 8007a20 <UART_SetConfig+0xb8>)
 8007a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a20:	08007a31 	.word	0x08007a31
 8007a24:	08007a41 	.word	0x08007a41
 8007a28:	08007a39 	.word	0x08007a39
 8007a2c:	08007a49 	.word	0x08007a49
 8007a30:	2301      	movs	r3, #1
 8007a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a36:	e0d6      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007a38:	2302      	movs	r3, #2
 8007a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a3e:	e0d2      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007a40:	2304      	movs	r3, #4
 8007a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a46:	e0ce      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007a48:	2308      	movs	r3, #8
 8007a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a4e:	e0ca      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007a50:	2310      	movs	r3, #16
 8007a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a56:	e0c6      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a7d      	ldr	r2, [pc, #500]	; (8007c54 <UART_SetConfig+0x2ec>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d138      	bne.n	8007ad4 <UART_SetConfig+0x16c>
 8007a62:	4b7b      	ldr	r3, [pc, #492]	; (8007c50 <UART_SetConfig+0x2e8>)
 8007a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a68:	f003 030c 	and.w	r3, r3, #12
 8007a6c:	2b0c      	cmp	r3, #12
 8007a6e:	d82d      	bhi.n	8007acc <UART_SetConfig+0x164>
 8007a70:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <UART_SetConfig+0x110>)
 8007a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a76:	bf00      	nop
 8007a78:	08007aad 	.word	0x08007aad
 8007a7c:	08007acd 	.word	0x08007acd
 8007a80:	08007acd 	.word	0x08007acd
 8007a84:	08007acd 	.word	0x08007acd
 8007a88:	08007abd 	.word	0x08007abd
 8007a8c:	08007acd 	.word	0x08007acd
 8007a90:	08007acd 	.word	0x08007acd
 8007a94:	08007acd 	.word	0x08007acd
 8007a98:	08007ab5 	.word	0x08007ab5
 8007a9c:	08007acd 	.word	0x08007acd
 8007aa0:	08007acd 	.word	0x08007acd
 8007aa4:	08007acd 	.word	0x08007acd
 8007aa8:	08007ac5 	.word	0x08007ac5
 8007aac:	2300      	movs	r3, #0
 8007aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ab2:	e098      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aba:	e094      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007abc:	2304      	movs	r3, #4
 8007abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ac2:	e090      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007ac4:	2308      	movs	r3, #8
 8007ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aca:	e08c      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007acc:	2310      	movs	r3, #16
 8007ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ad2:	e088      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a5f      	ldr	r2, [pc, #380]	; (8007c58 <UART_SetConfig+0x2f0>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d125      	bne.n	8007b2a <UART_SetConfig+0x1c2>
 8007ade:	4b5c      	ldr	r3, [pc, #368]	; (8007c50 <UART_SetConfig+0x2e8>)
 8007ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ae8:	2b30      	cmp	r3, #48	; 0x30
 8007aea:	d016      	beq.n	8007b1a <UART_SetConfig+0x1b2>
 8007aec:	2b30      	cmp	r3, #48	; 0x30
 8007aee:	d818      	bhi.n	8007b22 <UART_SetConfig+0x1ba>
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d00a      	beq.n	8007b0a <UART_SetConfig+0x1a2>
 8007af4:	2b20      	cmp	r3, #32
 8007af6:	d814      	bhi.n	8007b22 <UART_SetConfig+0x1ba>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <UART_SetConfig+0x19a>
 8007afc:	2b10      	cmp	r3, #16
 8007afe:	d008      	beq.n	8007b12 <UART_SetConfig+0x1aa>
 8007b00:	e00f      	b.n	8007b22 <UART_SetConfig+0x1ba>
 8007b02:	2300      	movs	r3, #0
 8007b04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b08:	e06d      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b10:	e069      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007b12:	2304      	movs	r3, #4
 8007b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b18:	e065      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007b1a:	2308      	movs	r3, #8
 8007b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b20:	e061      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007b22:	2310      	movs	r3, #16
 8007b24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b28:	e05d      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a4b      	ldr	r2, [pc, #300]	; (8007c5c <UART_SetConfig+0x2f4>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d125      	bne.n	8007b80 <UART_SetConfig+0x218>
 8007b34:	4b46      	ldr	r3, [pc, #280]	; (8007c50 <UART_SetConfig+0x2e8>)
 8007b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b3e:	2bc0      	cmp	r3, #192	; 0xc0
 8007b40:	d016      	beq.n	8007b70 <UART_SetConfig+0x208>
 8007b42:	2bc0      	cmp	r3, #192	; 0xc0
 8007b44:	d818      	bhi.n	8007b78 <UART_SetConfig+0x210>
 8007b46:	2b80      	cmp	r3, #128	; 0x80
 8007b48:	d00a      	beq.n	8007b60 <UART_SetConfig+0x1f8>
 8007b4a:	2b80      	cmp	r3, #128	; 0x80
 8007b4c:	d814      	bhi.n	8007b78 <UART_SetConfig+0x210>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <UART_SetConfig+0x1f0>
 8007b52:	2b40      	cmp	r3, #64	; 0x40
 8007b54:	d008      	beq.n	8007b68 <UART_SetConfig+0x200>
 8007b56:	e00f      	b.n	8007b78 <UART_SetConfig+0x210>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b5e:	e042      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007b60:	2302      	movs	r3, #2
 8007b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b66:	e03e      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007b68:	2304      	movs	r3, #4
 8007b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b6e:	e03a      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007b70:	2308      	movs	r3, #8
 8007b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b76:	e036      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007b78:	2310      	movs	r3, #16
 8007b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b7e:	e032      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a30      	ldr	r2, [pc, #192]	; (8007c48 <UART_SetConfig+0x2e0>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d12a      	bne.n	8007be0 <UART_SetConfig+0x278>
 8007b8a:	4b31      	ldr	r3, [pc, #196]	; (8007c50 <UART_SetConfig+0x2e8>)
 8007b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b98:	d01a      	beq.n	8007bd0 <UART_SetConfig+0x268>
 8007b9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b9e:	d81b      	bhi.n	8007bd8 <UART_SetConfig+0x270>
 8007ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ba4:	d00c      	beq.n	8007bc0 <UART_SetConfig+0x258>
 8007ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007baa:	d815      	bhi.n	8007bd8 <UART_SetConfig+0x270>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <UART_SetConfig+0x250>
 8007bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb4:	d008      	beq.n	8007bc8 <UART_SetConfig+0x260>
 8007bb6:	e00f      	b.n	8007bd8 <UART_SetConfig+0x270>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bbe:	e012      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bc6:	e00e      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007bc8:	2304      	movs	r3, #4
 8007bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bce:	e00a      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007bd0:	2308      	movs	r3, #8
 8007bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd6:	e006      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007bd8:	2310      	movs	r3, #16
 8007bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bde:	e002      	b.n	8007be6 <UART_SetConfig+0x27e>
 8007be0:	2310      	movs	r3, #16
 8007be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a17      	ldr	r2, [pc, #92]	; (8007c48 <UART_SetConfig+0x2e0>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	f040 80a8 	bne.w	8007d42 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bf6:	2b08      	cmp	r3, #8
 8007bf8:	d834      	bhi.n	8007c64 <UART_SetConfig+0x2fc>
 8007bfa:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <UART_SetConfig+0x298>)
 8007bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c00:	08007c25 	.word	0x08007c25
 8007c04:	08007c65 	.word	0x08007c65
 8007c08:	08007c2d 	.word	0x08007c2d
 8007c0c:	08007c65 	.word	0x08007c65
 8007c10:	08007c33 	.word	0x08007c33
 8007c14:	08007c65 	.word	0x08007c65
 8007c18:	08007c65 	.word	0x08007c65
 8007c1c:	08007c65 	.word	0x08007c65
 8007c20:	08007c3b 	.word	0x08007c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c24:	f7fd ff1a 	bl	8005a5c <HAL_RCC_GetPCLK1Freq>
 8007c28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c2a:	e021      	b.n	8007c70 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c2c:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <UART_SetConfig+0x2f8>)
 8007c2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c30:	e01e      	b.n	8007c70 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c32:	f7fd fea5 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 8007c36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c38:	e01a      	b.n	8007c70 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c40:	e016      	b.n	8007c70 <UART_SetConfig+0x308>
 8007c42:	bf00      	nop
 8007c44:	cfff69f3 	.word	0xcfff69f3
 8007c48:	40008000 	.word	0x40008000
 8007c4c:	40013800 	.word	0x40013800
 8007c50:	40021000 	.word	0x40021000
 8007c54:	40004400 	.word	0x40004400
 8007c58:	40004800 	.word	0x40004800
 8007c5c:	40004c00 	.word	0x40004c00
 8007c60:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007c6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 812a 	beq.w	8007ecc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	4a9e      	ldr	r2, [pc, #632]	; (8007ef8 <UART_SetConfig+0x590>)
 8007c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c82:	461a      	mov	r2, r3
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c8a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	4613      	mov	r3, r2
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	4413      	add	r3, r2
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d305      	bcc.n	8007ca8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d903      	bls.n	8007cb0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007cae:	e10d      	b.n	8007ecc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	60bb      	str	r3, [r7, #8]
 8007cb6:	60fa      	str	r2, [r7, #12]
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	4a8e      	ldr	r2, [pc, #568]	; (8007ef8 <UART_SetConfig+0x590>)
 8007cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	603b      	str	r3, [r7, #0]
 8007cc8:	607a      	str	r2, [r7, #4]
 8007cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cd2:	f7f9 f801 	bl	8000cd8 <__aeabi_uldivmod>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4610      	mov	r0, r2
 8007cdc:	4619      	mov	r1, r3
 8007cde:	f04f 0200 	mov.w	r2, #0
 8007ce2:	f04f 0300 	mov.w	r3, #0
 8007ce6:	020b      	lsls	r3, r1, #8
 8007ce8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cec:	0202      	lsls	r2, r0, #8
 8007cee:	6979      	ldr	r1, [r7, #20]
 8007cf0:	6849      	ldr	r1, [r1, #4]
 8007cf2:	0849      	lsrs	r1, r1, #1
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	eb12 0804 	adds.w	r8, r2, r4
 8007cfe:	eb43 0905 	adc.w	r9, r3, r5
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	469a      	mov	sl, r3
 8007d0a:	4693      	mov	fp, r2
 8007d0c:	4652      	mov	r2, sl
 8007d0e:	465b      	mov	r3, fp
 8007d10:	4640      	mov	r0, r8
 8007d12:	4649      	mov	r1, r9
 8007d14:	f7f8 ffe0 	bl	8000cd8 <__aeabi_uldivmod>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d26:	d308      	bcc.n	8007d3a <UART_SetConfig+0x3d2>
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d2e:	d204      	bcs.n	8007d3a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6a3a      	ldr	r2, [r7, #32]
 8007d36:	60da      	str	r2, [r3, #12]
 8007d38:	e0c8      	b.n	8007ecc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d40:	e0c4      	b.n	8007ecc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	69db      	ldr	r3, [r3, #28]
 8007d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d4a:	d167      	bne.n	8007e1c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007d4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	d828      	bhi.n	8007da6 <UART_SetConfig+0x43e>
 8007d54:	a201      	add	r2, pc, #4	; (adr r2, 8007d5c <UART_SetConfig+0x3f4>)
 8007d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5a:	bf00      	nop
 8007d5c:	08007d81 	.word	0x08007d81
 8007d60:	08007d89 	.word	0x08007d89
 8007d64:	08007d91 	.word	0x08007d91
 8007d68:	08007da7 	.word	0x08007da7
 8007d6c:	08007d97 	.word	0x08007d97
 8007d70:	08007da7 	.word	0x08007da7
 8007d74:	08007da7 	.word	0x08007da7
 8007d78:	08007da7 	.word	0x08007da7
 8007d7c:	08007d9f 	.word	0x08007d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d80:	f7fd fe6c 	bl	8005a5c <HAL_RCC_GetPCLK1Freq>
 8007d84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d86:	e014      	b.n	8007db2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d88:	f7fd fe7e 	bl	8005a88 <HAL_RCC_GetPCLK2Freq>
 8007d8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d8e:	e010      	b.n	8007db2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d90:	4b5a      	ldr	r3, [pc, #360]	; (8007efc <UART_SetConfig+0x594>)
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d94:	e00d      	b.n	8007db2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d96:	f7fd fdf3 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 8007d9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d9c:	e009      	b.n	8007db2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007da2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007da4:	e005      	b.n	8007db2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007db0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 8089 	beq.w	8007ecc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbe:	4a4e      	ldr	r2, [pc, #312]	; (8007ef8 <UART_SetConfig+0x590>)
 8007dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dcc:	005a      	lsls	r2, r3, #1
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	085b      	lsrs	r3, r3, #1
 8007dd4:	441a      	add	r2, r3
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	2b0f      	cmp	r3, #15
 8007de4:	d916      	bls.n	8007e14 <UART_SetConfig+0x4ac>
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dec:	d212      	bcs.n	8007e14 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	f023 030f 	bic.w	r3, r3, #15
 8007df6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	085b      	lsrs	r3, r3, #1
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f003 0307 	and.w	r3, r3, #7
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	8bfb      	ldrh	r3, [r7, #30]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	8bfa      	ldrh	r2, [r7, #30]
 8007e10:	60da      	str	r2, [r3, #12]
 8007e12:	e05b      	b.n	8007ecc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e1a:	e057      	b.n	8007ecc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d828      	bhi.n	8007e76 <UART_SetConfig+0x50e>
 8007e24:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <UART_SetConfig+0x4c4>)
 8007e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2a:	bf00      	nop
 8007e2c:	08007e51 	.word	0x08007e51
 8007e30:	08007e59 	.word	0x08007e59
 8007e34:	08007e61 	.word	0x08007e61
 8007e38:	08007e77 	.word	0x08007e77
 8007e3c:	08007e67 	.word	0x08007e67
 8007e40:	08007e77 	.word	0x08007e77
 8007e44:	08007e77 	.word	0x08007e77
 8007e48:	08007e77 	.word	0x08007e77
 8007e4c:	08007e6f 	.word	0x08007e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e50:	f7fd fe04 	bl	8005a5c <HAL_RCC_GetPCLK1Freq>
 8007e54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e56:	e014      	b.n	8007e82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e58:	f7fd fe16 	bl	8005a88 <HAL_RCC_GetPCLK2Freq>
 8007e5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e5e:	e010      	b.n	8007e82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e60:	4b26      	ldr	r3, [pc, #152]	; (8007efc <UART_SetConfig+0x594>)
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e64:	e00d      	b.n	8007e82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e66:	f7fd fd8b 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 8007e6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e6c:	e009      	b.n	8007e82 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e74:	e005      	b.n	8007e82 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e80:	bf00      	nop
    }

    if (pclk != 0U)
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d021      	beq.n	8007ecc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	4a1a      	ldr	r2, [pc, #104]	; (8007ef8 <UART_SetConfig+0x590>)
 8007e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e92:	461a      	mov	r2, r3
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	085b      	lsrs	r3, r3, #1
 8007ea0:	441a      	add	r2, r3
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eaa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	2b0f      	cmp	r3, #15
 8007eb0:	d909      	bls.n	8007ec6 <UART_SetConfig+0x55e>
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eb8:	d205      	bcs.n	8007ec6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60da      	str	r2, [r3, #12]
 8007ec4:	e002      	b.n	8007ecc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007ee8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3730      	adds	r7, #48	; 0x30
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ef6:	bf00      	nop
 8007ef8:	0800ce50 	.word	0x0800ce50
 8007efc:	00f42400 	.word	0x00f42400

08007f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00a      	beq.n	8007f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	430a      	orrs	r2, r1
 8007f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00a      	beq.n	8007f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	430a      	orrs	r2, r1
 8007f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00a      	beq.n	8007f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f72:	f003 0308 	and.w	r3, r3, #8
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	430a      	orrs	r2, r1
 8007f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f94:	f003 0310 	and.w	r3, r3, #16
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00a      	beq.n	8007fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb6:	f003 0320 	and.w	r3, r3, #32
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d01a      	beq.n	8008016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ffe:	d10a      	bne.n	8008016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	430a      	orrs	r2, r1
 8008014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00a      	beq.n	8008038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	605a      	str	r2, [r3, #4]
  }
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af02      	add	r7, sp, #8
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008054:	f7fa f8c0 	bl	80021d8 <HAL_GetTick>
 8008058:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0308 	and.w	r3, r3, #8
 8008064:	2b08      	cmp	r3, #8
 8008066:	d10e      	bne.n	8008086 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f82f 	bl	80080da <UART_WaitOnFlagUntilTimeout>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e025      	b.n	80080d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0304 	and.w	r3, r3, #4
 8008090:	2b04      	cmp	r3, #4
 8008092:	d10e      	bne.n	80080b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f819 	bl	80080da <UART_WaitOnFlagUntilTimeout>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e00f      	b.n	80080d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2220      	movs	r2, #32
 80080b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2220      	movs	r2, #32
 80080be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b09c      	sub	sp, #112	; 0x70
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	603b      	str	r3, [r7, #0]
 80080e6:	4613      	mov	r3, r2
 80080e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ea:	e0a9      	b.n	8008240 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f2:	f000 80a5 	beq.w	8008240 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080f6:	f7fa f86f 	bl	80021d8 <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008102:	429a      	cmp	r2, r3
 8008104:	d302      	bcc.n	800810c <UART_WaitOnFlagUntilTimeout+0x32>
 8008106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008108:	2b00      	cmp	r3, #0
 800810a:	d140      	bne.n	800818e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800811a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800811c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008120:	667b      	str	r3, [r7, #100]	; 0x64
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800812a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800812c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008130:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e6      	bne.n	800810c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3308      	adds	r3, #8
 8008144:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	f023 0301 	bic.w	r3, r3, #1
 8008154:	663b      	str	r3, [r7, #96]	; 0x60
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3308      	adds	r3, #8
 800815c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800815e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008160:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800816c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e5      	bne.n	800813e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2220      	movs	r2, #32
 8008176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2220      	movs	r2, #32
 800817e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e069      	b.n	8008262 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0304 	and.w	r3, r3, #4
 8008198:	2b00      	cmp	r3, #0
 800819a:	d051      	beq.n	8008240 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081aa:	d149      	bne.n	8008240 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	e853 3f00 	ldrex	r3, [r3]
 80081c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081d4:	637b      	str	r3, [r7, #52]	; 0x34
 80081d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081dc:	e841 2300 	strex	r3, r2, [r1]
 80081e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e6      	bne.n	80081b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3308      	adds	r3, #8
 80081ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	e853 3f00 	ldrex	r3, [r3]
 80081f6:	613b      	str	r3, [r7, #16]
   return(result);
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	f023 0301 	bic.w	r3, r3, #1
 80081fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3308      	adds	r3, #8
 8008206:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008208:	623a      	str	r2, [r7, #32]
 800820a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820c:	69f9      	ldr	r1, [r7, #28]
 800820e:	6a3a      	ldr	r2, [r7, #32]
 8008210:	e841 2300 	strex	r3, r2, [r1]
 8008214:	61bb      	str	r3, [r7, #24]
   return(result);
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e5      	bne.n	80081e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2220      	movs	r2, #32
 8008220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2220      	movs	r2, #32
 8008228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2220      	movs	r2, #32
 8008230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e010      	b.n	8008262 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	69da      	ldr	r2, [r3, #28]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	4013      	ands	r3, r2
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	429a      	cmp	r2, r3
 800824e:	bf0c      	ite	eq
 8008250:	2301      	moveq	r3, #1
 8008252:	2300      	movne	r3, #0
 8008254:	b2db      	uxtb	r3, r3
 8008256:	461a      	mov	r2, r3
 8008258:	79fb      	ldrb	r3, [r7, #7]
 800825a:	429a      	cmp	r2, r3
 800825c:	f43f af46 	beq.w	80080ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3770      	adds	r7, #112	; 0x70
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800826a:	b480      	push	{r7}
 800826c:	b085      	sub	sp, #20
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008278:	2b01      	cmp	r3, #1
 800827a:	d101      	bne.n	8008280 <HAL_UARTEx_DisableFifoMode+0x16>
 800827c:	2302      	movs	r3, #2
 800827e:	e027      	b.n	80082d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2224      	movs	r2, #36	; 0x24
 800828c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 0201 	bic.w	r2, r2, #1
 80082a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d101      	bne.n	80082f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80082f0:	2302      	movs	r3, #2
 80082f2:	e02d      	b.n	8008350 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2224      	movs	r2, #36	; 0x24
 8008300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 0201 	bic.w	r2, r2, #1
 800831a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f84f 	bl	80083d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2220      	movs	r2, #32
 8008342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008368:	2b01      	cmp	r3, #1
 800836a:	d101      	bne.n	8008370 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800836c:	2302      	movs	r3, #2
 800836e:	e02d      	b.n	80083cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2224      	movs	r2, #36	; 0x24
 800837c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 0201 	bic.w	r2, r2, #1
 8008396:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	430a      	orrs	r2, r1
 80083aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f811 	bl	80083d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d108      	bne.n	80083f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083f4:	e031      	b.n	800845a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083f6:	2308      	movs	r3, #8
 80083f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80083fa:	2308      	movs	r3, #8
 80083fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	0e5b      	lsrs	r3, r3, #25
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f003 0307 	and.w	r3, r3, #7
 800840c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	0f5b      	lsrs	r3, r3, #29
 8008416:	b2db      	uxtb	r3, r3
 8008418:	f003 0307 	and.w	r3, r3, #7
 800841c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	7b3a      	ldrb	r2, [r7, #12]
 8008422:	4911      	ldr	r1, [pc, #68]	; (8008468 <UARTEx_SetNbDataToProcess+0x94>)
 8008424:	5c8a      	ldrb	r2, [r1, r2]
 8008426:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800842a:	7b3a      	ldrb	r2, [r7, #12]
 800842c:	490f      	ldr	r1, [pc, #60]	; (800846c <UARTEx_SetNbDataToProcess+0x98>)
 800842e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008430:	fb93 f3f2 	sdiv	r3, r3, r2
 8008434:	b29a      	uxth	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	7b7a      	ldrb	r2, [r7, #13]
 8008440:	4909      	ldr	r1, [pc, #36]	; (8008468 <UARTEx_SetNbDataToProcess+0x94>)
 8008442:	5c8a      	ldrb	r2, [r1, r2]
 8008444:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008448:	7b7a      	ldrb	r2, [r7, #13]
 800844a:	4908      	ldr	r1, [pc, #32]	; (800846c <UARTEx_SetNbDataToProcess+0x98>)
 800844c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800844e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008452:	b29a      	uxth	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800845a:	bf00      	nop
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	0800ce68 	.word	0x0800ce68
 800846c:	0800ce70 	.word	0x0800ce70

08008470 <__errno>:
 8008470:	4b01      	ldr	r3, [pc, #4]	; (8008478 <__errno+0x8>)
 8008472:	6818      	ldr	r0, [r3, #0]
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	2000000c 	.word	0x2000000c

0800847c <__libc_init_array>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	4d0d      	ldr	r5, [pc, #52]	; (80084b4 <__libc_init_array+0x38>)
 8008480:	4c0d      	ldr	r4, [pc, #52]	; (80084b8 <__libc_init_array+0x3c>)
 8008482:	1b64      	subs	r4, r4, r5
 8008484:	10a4      	asrs	r4, r4, #2
 8008486:	2600      	movs	r6, #0
 8008488:	42a6      	cmp	r6, r4
 800848a:	d109      	bne.n	80084a0 <__libc_init_array+0x24>
 800848c:	4d0b      	ldr	r5, [pc, #44]	; (80084bc <__libc_init_array+0x40>)
 800848e:	4c0c      	ldr	r4, [pc, #48]	; (80084c0 <__libc_init_array+0x44>)
 8008490:	f004 fcaa 	bl	800cde8 <_init>
 8008494:	1b64      	subs	r4, r4, r5
 8008496:	10a4      	asrs	r4, r4, #2
 8008498:	2600      	movs	r6, #0
 800849a:	42a6      	cmp	r6, r4
 800849c:	d105      	bne.n	80084aa <__libc_init_array+0x2e>
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a4:	4798      	blx	r3
 80084a6:	3601      	adds	r6, #1
 80084a8:	e7ee      	b.n	8008488 <__libc_init_array+0xc>
 80084aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ae:	4798      	blx	r3
 80084b0:	3601      	adds	r6, #1
 80084b2:	e7f2      	b.n	800849a <__libc_init_array+0x1e>
 80084b4:	0800d32c 	.word	0x0800d32c
 80084b8:	0800d32c 	.word	0x0800d32c
 80084bc:	0800d32c 	.word	0x0800d32c
 80084c0:	0800d330 	.word	0x0800d330

080084c4 <memset>:
 80084c4:	4402      	add	r2, r0
 80084c6:	4603      	mov	r3, r0
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d100      	bne.n	80084ce <memset+0xa>
 80084cc:	4770      	bx	lr
 80084ce:	f803 1b01 	strb.w	r1, [r3], #1
 80084d2:	e7f9      	b.n	80084c8 <memset+0x4>

080084d4 <__cvt>:
 80084d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084d8:	ec55 4b10 	vmov	r4, r5, d0
 80084dc:	2d00      	cmp	r5, #0
 80084de:	460e      	mov	r6, r1
 80084e0:	4619      	mov	r1, r3
 80084e2:	462b      	mov	r3, r5
 80084e4:	bfbb      	ittet	lt
 80084e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80084ea:	461d      	movlt	r5, r3
 80084ec:	2300      	movge	r3, #0
 80084ee:	232d      	movlt	r3, #45	; 0x2d
 80084f0:	700b      	strb	r3, [r1, #0]
 80084f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80084f8:	4691      	mov	r9, r2
 80084fa:	f023 0820 	bic.w	r8, r3, #32
 80084fe:	bfbc      	itt	lt
 8008500:	4622      	movlt	r2, r4
 8008502:	4614      	movlt	r4, r2
 8008504:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008508:	d005      	beq.n	8008516 <__cvt+0x42>
 800850a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800850e:	d100      	bne.n	8008512 <__cvt+0x3e>
 8008510:	3601      	adds	r6, #1
 8008512:	2102      	movs	r1, #2
 8008514:	e000      	b.n	8008518 <__cvt+0x44>
 8008516:	2103      	movs	r1, #3
 8008518:	ab03      	add	r3, sp, #12
 800851a:	9301      	str	r3, [sp, #4]
 800851c:	ab02      	add	r3, sp, #8
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	ec45 4b10 	vmov	d0, r4, r5
 8008524:	4653      	mov	r3, sl
 8008526:	4632      	mov	r2, r6
 8008528:	f001 fdc6 	bl	800a0b8 <_dtoa_r>
 800852c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008530:	4607      	mov	r7, r0
 8008532:	d102      	bne.n	800853a <__cvt+0x66>
 8008534:	f019 0f01 	tst.w	r9, #1
 8008538:	d022      	beq.n	8008580 <__cvt+0xac>
 800853a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800853e:	eb07 0906 	add.w	r9, r7, r6
 8008542:	d110      	bne.n	8008566 <__cvt+0x92>
 8008544:	783b      	ldrb	r3, [r7, #0]
 8008546:	2b30      	cmp	r3, #48	; 0x30
 8008548:	d10a      	bne.n	8008560 <__cvt+0x8c>
 800854a:	2200      	movs	r2, #0
 800854c:	2300      	movs	r3, #0
 800854e:	4620      	mov	r0, r4
 8008550:	4629      	mov	r1, r5
 8008552:	f7f8 fae1 	bl	8000b18 <__aeabi_dcmpeq>
 8008556:	b918      	cbnz	r0, 8008560 <__cvt+0x8c>
 8008558:	f1c6 0601 	rsb	r6, r6, #1
 800855c:	f8ca 6000 	str.w	r6, [sl]
 8008560:	f8da 3000 	ldr.w	r3, [sl]
 8008564:	4499      	add	r9, r3
 8008566:	2200      	movs	r2, #0
 8008568:	2300      	movs	r3, #0
 800856a:	4620      	mov	r0, r4
 800856c:	4629      	mov	r1, r5
 800856e:	f7f8 fad3 	bl	8000b18 <__aeabi_dcmpeq>
 8008572:	b108      	cbz	r0, 8008578 <__cvt+0xa4>
 8008574:	f8cd 900c 	str.w	r9, [sp, #12]
 8008578:	2230      	movs	r2, #48	; 0x30
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	454b      	cmp	r3, r9
 800857e:	d307      	bcc.n	8008590 <__cvt+0xbc>
 8008580:	9b03      	ldr	r3, [sp, #12]
 8008582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008584:	1bdb      	subs	r3, r3, r7
 8008586:	4638      	mov	r0, r7
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	b004      	add	sp, #16
 800858c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008590:	1c59      	adds	r1, r3, #1
 8008592:	9103      	str	r1, [sp, #12]
 8008594:	701a      	strb	r2, [r3, #0]
 8008596:	e7f0      	b.n	800857a <__cvt+0xa6>

08008598 <__exponent>:
 8008598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800859a:	4603      	mov	r3, r0
 800859c:	2900      	cmp	r1, #0
 800859e:	bfb8      	it	lt
 80085a0:	4249      	neglt	r1, r1
 80085a2:	f803 2b02 	strb.w	r2, [r3], #2
 80085a6:	bfb4      	ite	lt
 80085a8:	222d      	movlt	r2, #45	; 0x2d
 80085aa:	222b      	movge	r2, #43	; 0x2b
 80085ac:	2909      	cmp	r1, #9
 80085ae:	7042      	strb	r2, [r0, #1]
 80085b0:	dd2a      	ble.n	8008608 <__exponent+0x70>
 80085b2:	f10d 0407 	add.w	r4, sp, #7
 80085b6:	46a4      	mov	ip, r4
 80085b8:	270a      	movs	r7, #10
 80085ba:	46a6      	mov	lr, r4
 80085bc:	460a      	mov	r2, r1
 80085be:	fb91 f6f7 	sdiv	r6, r1, r7
 80085c2:	fb07 1516 	mls	r5, r7, r6, r1
 80085c6:	3530      	adds	r5, #48	; 0x30
 80085c8:	2a63      	cmp	r2, #99	; 0x63
 80085ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80085ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085d2:	4631      	mov	r1, r6
 80085d4:	dcf1      	bgt.n	80085ba <__exponent+0x22>
 80085d6:	3130      	adds	r1, #48	; 0x30
 80085d8:	f1ae 0502 	sub.w	r5, lr, #2
 80085dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80085e0:	1c44      	adds	r4, r0, #1
 80085e2:	4629      	mov	r1, r5
 80085e4:	4561      	cmp	r1, ip
 80085e6:	d30a      	bcc.n	80085fe <__exponent+0x66>
 80085e8:	f10d 0209 	add.w	r2, sp, #9
 80085ec:	eba2 020e 	sub.w	r2, r2, lr
 80085f0:	4565      	cmp	r5, ip
 80085f2:	bf88      	it	hi
 80085f4:	2200      	movhi	r2, #0
 80085f6:	4413      	add	r3, r2
 80085f8:	1a18      	subs	r0, r3, r0
 80085fa:	b003      	add	sp, #12
 80085fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008602:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008606:	e7ed      	b.n	80085e4 <__exponent+0x4c>
 8008608:	2330      	movs	r3, #48	; 0x30
 800860a:	3130      	adds	r1, #48	; 0x30
 800860c:	7083      	strb	r3, [r0, #2]
 800860e:	70c1      	strb	r1, [r0, #3]
 8008610:	1d03      	adds	r3, r0, #4
 8008612:	e7f1      	b.n	80085f8 <__exponent+0x60>

08008614 <_printf_float>:
 8008614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008618:	ed2d 8b02 	vpush	{d8}
 800861c:	b08d      	sub	sp, #52	; 0x34
 800861e:	460c      	mov	r4, r1
 8008620:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008624:	4616      	mov	r6, r2
 8008626:	461f      	mov	r7, r3
 8008628:	4605      	mov	r5, r0
 800862a:	f002 ff97 	bl	800b55c <_localeconv_r>
 800862e:	f8d0 a000 	ldr.w	sl, [r0]
 8008632:	4650      	mov	r0, sl
 8008634:	f7f7 fdf4 	bl	8000220 <strlen>
 8008638:	2300      	movs	r3, #0
 800863a:	930a      	str	r3, [sp, #40]	; 0x28
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	9305      	str	r3, [sp, #20]
 8008640:	f8d8 3000 	ldr.w	r3, [r8]
 8008644:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008648:	3307      	adds	r3, #7
 800864a:	f023 0307 	bic.w	r3, r3, #7
 800864e:	f103 0208 	add.w	r2, r3, #8
 8008652:	f8c8 2000 	str.w	r2, [r8]
 8008656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800865e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008662:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008666:	9307      	str	r3, [sp, #28]
 8008668:	f8cd 8018 	str.w	r8, [sp, #24]
 800866c:	ee08 0a10 	vmov	s16, r0
 8008670:	4b9f      	ldr	r3, [pc, #636]	; (80088f0 <_printf_float+0x2dc>)
 8008672:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008676:	f04f 32ff 	mov.w	r2, #4294967295
 800867a:	f7f8 fa7f 	bl	8000b7c <__aeabi_dcmpun>
 800867e:	bb88      	cbnz	r0, 80086e4 <_printf_float+0xd0>
 8008680:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008684:	4b9a      	ldr	r3, [pc, #616]	; (80088f0 <_printf_float+0x2dc>)
 8008686:	f04f 32ff 	mov.w	r2, #4294967295
 800868a:	f7f8 fa59 	bl	8000b40 <__aeabi_dcmple>
 800868e:	bb48      	cbnz	r0, 80086e4 <_printf_float+0xd0>
 8008690:	2200      	movs	r2, #0
 8008692:	2300      	movs	r3, #0
 8008694:	4640      	mov	r0, r8
 8008696:	4649      	mov	r1, r9
 8008698:	f7f8 fa48 	bl	8000b2c <__aeabi_dcmplt>
 800869c:	b110      	cbz	r0, 80086a4 <_printf_float+0x90>
 800869e:	232d      	movs	r3, #45	; 0x2d
 80086a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a4:	4b93      	ldr	r3, [pc, #588]	; (80088f4 <_printf_float+0x2e0>)
 80086a6:	4894      	ldr	r0, [pc, #592]	; (80088f8 <_printf_float+0x2e4>)
 80086a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086ac:	bf94      	ite	ls
 80086ae:	4698      	movls	r8, r3
 80086b0:	4680      	movhi	r8, r0
 80086b2:	2303      	movs	r3, #3
 80086b4:	6123      	str	r3, [r4, #16]
 80086b6:	9b05      	ldr	r3, [sp, #20]
 80086b8:	f023 0204 	bic.w	r2, r3, #4
 80086bc:	6022      	str	r2, [r4, #0]
 80086be:	f04f 0900 	mov.w	r9, #0
 80086c2:	9700      	str	r7, [sp, #0]
 80086c4:	4633      	mov	r3, r6
 80086c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80086c8:	4621      	mov	r1, r4
 80086ca:	4628      	mov	r0, r5
 80086cc:	f000 f9d8 	bl	8008a80 <_printf_common>
 80086d0:	3001      	adds	r0, #1
 80086d2:	f040 8090 	bne.w	80087f6 <_printf_float+0x1e2>
 80086d6:	f04f 30ff 	mov.w	r0, #4294967295
 80086da:	b00d      	add	sp, #52	; 0x34
 80086dc:	ecbd 8b02 	vpop	{d8}
 80086e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e4:	4642      	mov	r2, r8
 80086e6:	464b      	mov	r3, r9
 80086e8:	4640      	mov	r0, r8
 80086ea:	4649      	mov	r1, r9
 80086ec:	f7f8 fa46 	bl	8000b7c <__aeabi_dcmpun>
 80086f0:	b140      	cbz	r0, 8008704 <_printf_float+0xf0>
 80086f2:	464b      	mov	r3, r9
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bfbc      	itt	lt
 80086f8:	232d      	movlt	r3, #45	; 0x2d
 80086fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80086fe:	487f      	ldr	r0, [pc, #508]	; (80088fc <_printf_float+0x2e8>)
 8008700:	4b7f      	ldr	r3, [pc, #508]	; (8008900 <_printf_float+0x2ec>)
 8008702:	e7d1      	b.n	80086a8 <_printf_float+0x94>
 8008704:	6863      	ldr	r3, [r4, #4]
 8008706:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800870a:	9206      	str	r2, [sp, #24]
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	d13f      	bne.n	8008790 <_printf_float+0x17c>
 8008710:	2306      	movs	r3, #6
 8008712:	6063      	str	r3, [r4, #4]
 8008714:	9b05      	ldr	r3, [sp, #20]
 8008716:	6861      	ldr	r1, [r4, #4]
 8008718:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800871c:	2300      	movs	r3, #0
 800871e:	9303      	str	r3, [sp, #12]
 8008720:	ab0a      	add	r3, sp, #40	; 0x28
 8008722:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008726:	ab09      	add	r3, sp, #36	; 0x24
 8008728:	ec49 8b10 	vmov	d0, r8, r9
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	6022      	str	r2, [r4, #0]
 8008730:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008734:	4628      	mov	r0, r5
 8008736:	f7ff fecd 	bl	80084d4 <__cvt>
 800873a:	9b06      	ldr	r3, [sp, #24]
 800873c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800873e:	2b47      	cmp	r3, #71	; 0x47
 8008740:	4680      	mov	r8, r0
 8008742:	d108      	bne.n	8008756 <_printf_float+0x142>
 8008744:	1cc8      	adds	r0, r1, #3
 8008746:	db02      	blt.n	800874e <_printf_float+0x13a>
 8008748:	6863      	ldr	r3, [r4, #4]
 800874a:	4299      	cmp	r1, r3
 800874c:	dd41      	ble.n	80087d2 <_printf_float+0x1be>
 800874e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008752:	fa5f fb8b 	uxtb.w	fp, fp
 8008756:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800875a:	d820      	bhi.n	800879e <_printf_float+0x18a>
 800875c:	3901      	subs	r1, #1
 800875e:	465a      	mov	r2, fp
 8008760:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008764:	9109      	str	r1, [sp, #36]	; 0x24
 8008766:	f7ff ff17 	bl	8008598 <__exponent>
 800876a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800876c:	1813      	adds	r3, r2, r0
 800876e:	2a01      	cmp	r2, #1
 8008770:	4681      	mov	r9, r0
 8008772:	6123      	str	r3, [r4, #16]
 8008774:	dc02      	bgt.n	800877c <_printf_float+0x168>
 8008776:	6822      	ldr	r2, [r4, #0]
 8008778:	07d2      	lsls	r2, r2, #31
 800877a:	d501      	bpl.n	8008780 <_printf_float+0x16c>
 800877c:	3301      	adds	r3, #1
 800877e:	6123      	str	r3, [r4, #16]
 8008780:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008784:	2b00      	cmp	r3, #0
 8008786:	d09c      	beq.n	80086c2 <_printf_float+0xae>
 8008788:	232d      	movs	r3, #45	; 0x2d
 800878a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800878e:	e798      	b.n	80086c2 <_printf_float+0xae>
 8008790:	9a06      	ldr	r2, [sp, #24]
 8008792:	2a47      	cmp	r2, #71	; 0x47
 8008794:	d1be      	bne.n	8008714 <_printf_float+0x100>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1bc      	bne.n	8008714 <_printf_float+0x100>
 800879a:	2301      	movs	r3, #1
 800879c:	e7b9      	b.n	8008712 <_printf_float+0xfe>
 800879e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087a2:	d118      	bne.n	80087d6 <_printf_float+0x1c2>
 80087a4:	2900      	cmp	r1, #0
 80087a6:	6863      	ldr	r3, [r4, #4]
 80087a8:	dd0b      	ble.n	80087c2 <_printf_float+0x1ae>
 80087aa:	6121      	str	r1, [r4, #16]
 80087ac:	b913      	cbnz	r3, 80087b4 <_printf_float+0x1a0>
 80087ae:	6822      	ldr	r2, [r4, #0]
 80087b0:	07d0      	lsls	r0, r2, #31
 80087b2:	d502      	bpl.n	80087ba <_printf_float+0x1a6>
 80087b4:	3301      	adds	r3, #1
 80087b6:	440b      	add	r3, r1
 80087b8:	6123      	str	r3, [r4, #16]
 80087ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80087bc:	f04f 0900 	mov.w	r9, #0
 80087c0:	e7de      	b.n	8008780 <_printf_float+0x16c>
 80087c2:	b913      	cbnz	r3, 80087ca <_printf_float+0x1b6>
 80087c4:	6822      	ldr	r2, [r4, #0]
 80087c6:	07d2      	lsls	r2, r2, #31
 80087c8:	d501      	bpl.n	80087ce <_printf_float+0x1ba>
 80087ca:	3302      	adds	r3, #2
 80087cc:	e7f4      	b.n	80087b8 <_printf_float+0x1a4>
 80087ce:	2301      	movs	r3, #1
 80087d0:	e7f2      	b.n	80087b8 <_printf_float+0x1a4>
 80087d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80087d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d8:	4299      	cmp	r1, r3
 80087da:	db05      	blt.n	80087e8 <_printf_float+0x1d4>
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	6121      	str	r1, [r4, #16]
 80087e0:	07d8      	lsls	r0, r3, #31
 80087e2:	d5ea      	bpl.n	80087ba <_printf_float+0x1a6>
 80087e4:	1c4b      	adds	r3, r1, #1
 80087e6:	e7e7      	b.n	80087b8 <_printf_float+0x1a4>
 80087e8:	2900      	cmp	r1, #0
 80087ea:	bfd4      	ite	le
 80087ec:	f1c1 0202 	rsble	r2, r1, #2
 80087f0:	2201      	movgt	r2, #1
 80087f2:	4413      	add	r3, r2
 80087f4:	e7e0      	b.n	80087b8 <_printf_float+0x1a4>
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	055a      	lsls	r2, r3, #21
 80087fa:	d407      	bmi.n	800880c <_printf_float+0x1f8>
 80087fc:	6923      	ldr	r3, [r4, #16]
 80087fe:	4642      	mov	r2, r8
 8008800:	4631      	mov	r1, r6
 8008802:	4628      	mov	r0, r5
 8008804:	47b8      	blx	r7
 8008806:	3001      	adds	r0, #1
 8008808:	d12c      	bne.n	8008864 <_printf_float+0x250>
 800880a:	e764      	b.n	80086d6 <_printf_float+0xc2>
 800880c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008810:	f240 80e0 	bls.w	80089d4 <_printf_float+0x3c0>
 8008814:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008818:	2200      	movs	r2, #0
 800881a:	2300      	movs	r3, #0
 800881c:	f7f8 f97c 	bl	8000b18 <__aeabi_dcmpeq>
 8008820:	2800      	cmp	r0, #0
 8008822:	d034      	beq.n	800888e <_printf_float+0x27a>
 8008824:	4a37      	ldr	r2, [pc, #220]	; (8008904 <_printf_float+0x2f0>)
 8008826:	2301      	movs	r3, #1
 8008828:	4631      	mov	r1, r6
 800882a:	4628      	mov	r0, r5
 800882c:	47b8      	blx	r7
 800882e:	3001      	adds	r0, #1
 8008830:	f43f af51 	beq.w	80086d6 <_printf_float+0xc2>
 8008834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008838:	429a      	cmp	r2, r3
 800883a:	db02      	blt.n	8008842 <_printf_float+0x22e>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	07d8      	lsls	r0, r3, #31
 8008840:	d510      	bpl.n	8008864 <_printf_float+0x250>
 8008842:	ee18 3a10 	vmov	r3, s16
 8008846:	4652      	mov	r2, sl
 8008848:	4631      	mov	r1, r6
 800884a:	4628      	mov	r0, r5
 800884c:	47b8      	blx	r7
 800884e:	3001      	adds	r0, #1
 8008850:	f43f af41 	beq.w	80086d6 <_printf_float+0xc2>
 8008854:	f04f 0800 	mov.w	r8, #0
 8008858:	f104 091a 	add.w	r9, r4, #26
 800885c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800885e:	3b01      	subs	r3, #1
 8008860:	4543      	cmp	r3, r8
 8008862:	dc09      	bgt.n	8008878 <_printf_float+0x264>
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	079b      	lsls	r3, r3, #30
 8008868:	f100 8105 	bmi.w	8008a76 <_printf_float+0x462>
 800886c:	68e0      	ldr	r0, [r4, #12]
 800886e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008870:	4298      	cmp	r0, r3
 8008872:	bfb8      	it	lt
 8008874:	4618      	movlt	r0, r3
 8008876:	e730      	b.n	80086da <_printf_float+0xc6>
 8008878:	2301      	movs	r3, #1
 800887a:	464a      	mov	r2, r9
 800887c:	4631      	mov	r1, r6
 800887e:	4628      	mov	r0, r5
 8008880:	47b8      	blx	r7
 8008882:	3001      	adds	r0, #1
 8008884:	f43f af27 	beq.w	80086d6 <_printf_float+0xc2>
 8008888:	f108 0801 	add.w	r8, r8, #1
 800888c:	e7e6      	b.n	800885c <_printf_float+0x248>
 800888e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008890:	2b00      	cmp	r3, #0
 8008892:	dc39      	bgt.n	8008908 <_printf_float+0x2f4>
 8008894:	4a1b      	ldr	r2, [pc, #108]	; (8008904 <_printf_float+0x2f0>)
 8008896:	2301      	movs	r3, #1
 8008898:	4631      	mov	r1, r6
 800889a:	4628      	mov	r0, r5
 800889c:	47b8      	blx	r7
 800889e:	3001      	adds	r0, #1
 80088a0:	f43f af19 	beq.w	80086d6 <_printf_float+0xc2>
 80088a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088a8:	4313      	orrs	r3, r2
 80088aa:	d102      	bne.n	80088b2 <_printf_float+0x29e>
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	07d9      	lsls	r1, r3, #31
 80088b0:	d5d8      	bpl.n	8008864 <_printf_float+0x250>
 80088b2:	ee18 3a10 	vmov	r3, s16
 80088b6:	4652      	mov	r2, sl
 80088b8:	4631      	mov	r1, r6
 80088ba:	4628      	mov	r0, r5
 80088bc:	47b8      	blx	r7
 80088be:	3001      	adds	r0, #1
 80088c0:	f43f af09 	beq.w	80086d6 <_printf_float+0xc2>
 80088c4:	f04f 0900 	mov.w	r9, #0
 80088c8:	f104 0a1a 	add.w	sl, r4, #26
 80088cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ce:	425b      	negs	r3, r3
 80088d0:	454b      	cmp	r3, r9
 80088d2:	dc01      	bgt.n	80088d8 <_printf_float+0x2c4>
 80088d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d6:	e792      	b.n	80087fe <_printf_float+0x1ea>
 80088d8:	2301      	movs	r3, #1
 80088da:	4652      	mov	r2, sl
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	f43f aef7 	beq.w	80086d6 <_printf_float+0xc2>
 80088e8:	f109 0901 	add.w	r9, r9, #1
 80088ec:	e7ee      	b.n	80088cc <_printf_float+0x2b8>
 80088ee:	bf00      	nop
 80088f0:	7fefffff 	.word	0x7fefffff
 80088f4:	0800ce7c 	.word	0x0800ce7c
 80088f8:	0800ce80 	.word	0x0800ce80
 80088fc:	0800ce88 	.word	0x0800ce88
 8008900:	0800ce84 	.word	0x0800ce84
 8008904:	0800ce8c 	.word	0x0800ce8c
 8008908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800890a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800890c:	429a      	cmp	r2, r3
 800890e:	bfa8      	it	ge
 8008910:	461a      	movge	r2, r3
 8008912:	2a00      	cmp	r2, #0
 8008914:	4691      	mov	r9, r2
 8008916:	dc37      	bgt.n	8008988 <_printf_float+0x374>
 8008918:	f04f 0b00 	mov.w	fp, #0
 800891c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008920:	f104 021a 	add.w	r2, r4, #26
 8008924:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008926:	9305      	str	r3, [sp, #20]
 8008928:	eba3 0309 	sub.w	r3, r3, r9
 800892c:	455b      	cmp	r3, fp
 800892e:	dc33      	bgt.n	8008998 <_printf_float+0x384>
 8008930:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008934:	429a      	cmp	r2, r3
 8008936:	db3b      	blt.n	80089b0 <_printf_float+0x39c>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	07da      	lsls	r2, r3, #31
 800893c:	d438      	bmi.n	80089b0 <_printf_float+0x39c>
 800893e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008940:	9a05      	ldr	r2, [sp, #20]
 8008942:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008944:	1a9a      	subs	r2, r3, r2
 8008946:	eba3 0901 	sub.w	r9, r3, r1
 800894a:	4591      	cmp	r9, r2
 800894c:	bfa8      	it	ge
 800894e:	4691      	movge	r9, r2
 8008950:	f1b9 0f00 	cmp.w	r9, #0
 8008954:	dc35      	bgt.n	80089c2 <_printf_float+0x3ae>
 8008956:	f04f 0800 	mov.w	r8, #0
 800895a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800895e:	f104 0a1a 	add.w	sl, r4, #26
 8008962:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008966:	1a9b      	subs	r3, r3, r2
 8008968:	eba3 0309 	sub.w	r3, r3, r9
 800896c:	4543      	cmp	r3, r8
 800896e:	f77f af79 	ble.w	8008864 <_printf_float+0x250>
 8008972:	2301      	movs	r3, #1
 8008974:	4652      	mov	r2, sl
 8008976:	4631      	mov	r1, r6
 8008978:	4628      	mov	r0, r5
 800897a:	47b8      	blx	r7
 800897c:	3001      	adds	r0, #1
 800897e:	f43f aeaa 	beq.w	80086d6 <_printf_float+0xc2>
 8008982:	f108 0801 	add.w	r8, r8, #1
 8008986:	e7ec      	b.n	8008962 <_printf_float+0x34e>
 8008988:	4613      	mov	r3, r2
 800898a:	4631      	mov	r1, r6
 800898c:	4642      	mov	r2, r8
 800898e:	4628      	mov	r0, r5
 8008990:	47b8      	blx	r7
 8008992:	3001      	adds	r0, #1
 8008994:	d1c0      	bne.n	8008918 <_printf_float+0x304>
 8008996:	e69e      	b.n	80086d6 <_printf_float+0xc2>
 8008998:	2301      	movs	r3, #1
 800899a:	4631      	mov	r1, r6
 800899c:	4628      	mov	r0, r5
 800899e:	9205      	str	r2, [sp, #20]
 80089a0:	47b8      	blx	r7
 80089a2:	3001      	adds	r0, #1
 80089a4:	f43f ae97 	beq.w	80086d6 <_printf_float+0xc2>
 80089a8:	9a05      	ldr	r2, [sp, #20]
 80089aa:	f10b 0b01 	add.w	fp, fp, #1
 80089ae:	e7b9      	b.n	8008924 <_printf_float+0x310>
 80089b0:	ee18 3a10 	vmov	r3, s16
 80089b4:	4652      	mov	r2, sl
 80089b6:	4631      	mov	r1, r6
 80089b8:	4628      	mov	r0, r5
 80089ba:	47b8      	blx	r7
 80089bc:	3001      	adds	r0, #1
 80089be:	d1be      	bne.n	800893e <_printf_float+0x32a>
 80089c0:	e689      	b.n	80086d6 <_printf_float+0xc2>
 80089c2:	9a05      	ldr	r2, [sp, #20]
 80089c4:	464b      	mov	r3, r9
 80089c6:	4442      	add	r2, r8
 80089c8:	4631      	mov	r1, r6
 80089ca:	4628      	mov	r0, r5
 80089cc:	47b8      	blx	r7
 80089ce:	3001      	adds	r0, #1
 80089d0:	d1c1      	bne.n	8008956 <_printf_float+0x342>
 80089d2:	e680      	b.n	80086d6 <_printf_float+0xc2>
 80089d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089d6:	2a01      	cmp	r2, #1
 80089d8:	dc01      	bgt.n	80089de <_printf_float+0x3ca>
 80089da:	07db      	lsls	r3, r3, #31
 80089dc:	d538      	bpl.n	8008a50 <_printf_float+0x43c>
 80089de:	2301      	movs	r3, #1
 80089e0:	4642      	mov	r2, r8
 80089e2:	4631      	mov	r1, r6
 80089e4:	4628      	mov	r0, r5
 80089e6:	47b8      	blx	r7
 80089e8:	3001      	adds	r0, #1
 80089ea:	f43f ae74 	beq.w	80086d6 <_printf_float+0xc2>
 80089ee:	ee18 3a10 	vmov	r3, s16
 80089f2:	4652      	mov	r2, sl
 80089f4:	4631      	mov	r1, r6
 80089f6:	4628      	mov	r0, r5
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	f43f ae6b 	beq.w	80086d6 <_printf_float+0xc2>
 8008a00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a04:	2200      	movs	r2, #0
 8008a06:	2300      	movs	r3, #0
 8008a08:	f7f8 f886 	bl	8000b18 <__aeabi_dcmpeq>
 8008a0c:	b9d8      	cbnz	r0, 8008a46 <_printf_float+0x432>
 8008a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a10:	f108 0201 	add.w	r2, r8, #1
 8008a14:	3b01      	subs	r3, #1
 8008a16:	4631      	mov	r1, r6
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b8      	blx	r7
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d10e      	bne.n	8008a3e <_printf_float+0x42a>
 8008a20:	e659      	b.n	80086d6 <_printf_float+0xc2>
 8008a22:	2301      	movs	r3, #1
 8008a24:	4652      	mov	r2, sl
 8008a26:	4631      	mov	r1, r6
 8008a28:	4628      	mov	r0, r5
 8008a2a:	47b8      	blx	r7
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	f43f ae52 	beq.w	80086d6 <_printf_float+0xc2>
 8008a32:	f108 0801 	add.w	r8, r8, #1
 8008a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	4543      	cmp	r3, r8
 8008a3c:	dcf1      	bgt.n	8008a22 <_printf_float+0x40e>
 8008a3e:	464b      	mov	r3, r9
 8008a40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a44:	e6dc      	b.n	8008800 <_printf_float+0x1ec>
 8008a46:	f04f 0800 	mov.w	r8, #0
 8008a4a:	f104 0a1a 	add.w	sl, r4, #26
 8008a4e:	e7f2      	b.n	8008a36 <_printf_float+0x422>
 8008a50:	2301      	movs	r3, #1
 8008a52:	4642      	mov	r2, r8
 8008a54:	e7df      	b.n	8008a16 <_printf_float+0x402>
 8008a56:	2301      	movs	r3, #1
 8008a58:	464a      	mov	r2, r9
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	47b8      	blx	r7
 8008a60:	3001      	adds	r0, #1
 8008a62:	f43f ae38 	beq.w	80086d6 <_printf_float+0xc2>
 8008a66:	f108 0801 	add.w	r8, r8, #1
 8008a6a:	68e3      	ldr	r3, [r4, #12]
 8008a6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a6e:	1a5b      	subs	r3, r3, r1
 8008a70:	4543      	cmp	r3, r8
 8008a72:	dcf0      	bgt.n	8008a56 <_printf_float+0x442>
 8008a74:	e6fa      	b.n	800886c <_printf_float+0x258>
 8008a76:	f04f 0800 	mov.w	r8, #0
 8008a7a:	f104 0919 	add.w	r9, r4, #25
 8008a7e:	e7f4      	b.n	8008a6a <_printf_float+0x456>

08008a80 <_printf_common>:
 8008a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a84:	4616      	mov	r6, r2
 8008a86:	4699      	mov	r9, r3
 8008a88:	688a      	ldr	r2, [r1, #8]
 8008a8a:	690b      	ldr	r3, [r1, #16]
 8008a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a90:	4293      	cmp	r3, r2
 8008a92:	bfb8      	it	lt
 8008a94:	4613      	movlt	r3, r2
 8008a96:	6033      	str	r3, [r6, #0]
 8008a98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a9c:	4607      	mov	r7, r0
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	b10a      	cbz	r2, 8008aa6 <_printf_common+0x26>
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	6033      	str	r3, [r6, #0]
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	0699      	lsls	r1, r3, #26
 8008aaa:	bf42      	ittt	mi
 8008aac:	6833      	ldrmi	r3, [r6, #0]
 8008aae:	3302      	addmi	r3, #2
 8008ab0:	6033      	strmi	r3, [r6, #0]
 8008ab2:	6825      	ldr	r5, [r4, #0]
 8008ab4:	f015 0506 	ands.w	r5, r5, #6
 8008ab8:	d106      	bne.n	8008ac8 <_printf_common+0x48>
 8008aba:	f104 0a19 	add.w	sl, r4, #25
 8008abe:	68e3      	ldr	r3, [r4, #12]
 8008ac0:	6832      	ldr	r2, [r6, #0]
 8008ac2:	1a9b      	subs	r3, r3, r2
 8008ac4:	42ab      	cmp	r3, r5
 8008ac6:	dc26      	bgt.n	8008b16 <_printf_common+0x96>
 8008ac8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008acc:	1e13      	subs	r3, r2, #0
 8008ace:	6822      	ldr	r2, [r4, #0]
 8008ad0:	bf18      	it	ne
 8008ad2:	2301      	movne	r3, #1
 8008ad4:	0692      	lsls	r2, r2, #26
 8008ad6:	d42b      	bmi.n	8008b30 <_printf_common+0xb0>
 8008ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008adc:	4649      	mov	r1, r9
 8008ade:	4638      	mov	r0, r7
 8008ae0:	47c0      	blx	r8
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	d01e      	beq.n	8008b24 <_printf_common+0xa4>
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	68e5      	ldr	r5, [r4, #12]
 8008aea:	6832      	ldr	r2, [r6, #0]
 8008aec:	f003 0306 	and.w	r3, r3, #6
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	bf08      	it	eq
 8008af4:	1aad      	subeq	r5, r5, r2
 8008af6:	68a3      	ldr	r3, [r4, #8]
 8008af8:	6922      	ldr	r2, [r4, #16]
 8008afa:	bf0c      	ite	eq
 8008afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b00:	2500      	movne	r5, #0
 8008b02:	4293      	cmp	r3, r2
 8008b04:	bfc4      	itt	gt
 8008b06:	1a9b      	subgt	r3, r3, r2
 8008b08:	18ed      	addgt	r5, r5, r3
 8008b0a:	2600      	movs	r6, #0
 8008b0c:	341a      	adds	r4, #26
 8008b0e:	42b5      	cmp	r5, r6
 8008b10:	d11a      	bne.n	8008b48 <_printf_common+0xc8>
 8008b12:	2000      	movs	r0, #0
 8008b14:	e008      	b.n	8008b28 <_printf_common+0xa8>
 8008b16:	2301      	movs	r3, #1
 8008b18:	4652      	mov	r2, sl
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	4638      	mov	r0, r7
 8008b1e:	47c0      	blx	r8
 8008b20:	3001      	adds	r0, #1
 8008b22:	d103      	bne.n	8008b2c <_printf_common+0xac>
 8008b24:	f04f 30ff 	mov.w	r0, #4294967295
 8008b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b2c:	3501      	adds	r5, #1
 8008b2e:	e7c6      	b.n	8008abe <_printf_common+0x3e>
 8008b30:	18e1      	adds	r1, r4, r3
 8008b32:	1c5a      	adds	r2, r3, #1
 8008b34:	2030      	movs	r0, #48	; 0x30
 8008b36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b3a:	4422      	add	r2, r4
 8008b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b44:	3302      	adds	r3, #2
 8008b46:	e7c7      	b.n	8008ad8 <_printf_common+0x58>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	4622      	mov	r2, r4
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	4638      	mov	r0, r7
 8008b50:	47c0      	blx	r8
 8008b52:	3001      	adds	r0, #1
 8008b54:	d0e6      	beq.n	8008b24 <_printf_common+0xa4>
 8008b56:	3601      	adds	r6, #1
 8008b58:	e7d9      	b.n	8008b0e <_printf_common+0x8e>
	...

08008b5c <_printf_i>:
 8008b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b60:	7e0f      	ldrb	r7, [r1, #24]
 8008b62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b64:	2f78      	cmp	r7, #120	; 0x78
 8008b66:	4691      	mov	r9, r2
 8008b68:	4680      	mov	r8, r0
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	469a      	mov	sl, r3
 8008b6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b72:	d807      	bhi.n	8008b84 <_printf_i+0x28>
 8008b74:	2f62      	cmp	r7, #98	; 0x62
 8008b76:	d80a      	bhi.n	8008b8e <_printf_i+0x32>
 8008b78:	2f00      	cmp	r7, #0
 8008b7a:	f000 80d8 	beq.w	8008d2e <_printf_i+0x1d2>
 8008b7e:	2f58      	cmp	r7, #88	; 0x58
 8008b80:	f000 80a3 	beq.w	8008cca <_printf_i+0x16e>
 8008b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b8c:	e03a      	b.n	8008c04 <_printf_i+0xa8>
 8008b8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b92:	2b15      	cmp	r3, #21
 8008b94:	d8f6      	bhi.n	8008b84 <_printf_i+0x28>
 8008b96:	a101      	add	r1, pc, #4	; (adr r1, 8008b9c <_printf_i+0x40>)
 8008b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b9c:	08008bf5 	.word	0x08008bf5
 8008ba0:	08008c09 	.word	0x08008c09
 8008ba4:	08008b85 	.word	0x08008b85
 8008ba8:	08008b85 	.word	0x08008b85
 8008bac:	08008b85 	.word	0x08008b85
 8008bb0:	08008b85 	.word	0x08008b85
 8008bb4:	08008c09 	.word	0x08008c09
 8008bb8:	08008b85 	.word	0x08008b85
 8008bbc:	08008b85 	.word	0x08008b85
 8008bc0:	08008b85 	.word	0x08008b85
 8008bc4:	08008b85 	.word	0x08008b85
 8008bc8:	08008d15 	.word	0x08008d15
 8008bcc:	08008c39 	.word	0x08008c39
 8008bd0:	08008cf7 	.word	0x08008cf7
 8008bd4:	08008b85 	.word	0x08008b85
 8008bd8:	08008b85 	.word	0x08008b85
 8008bdc:	08008d37 	.word	0x08008d37
 8008be0:	08008b85 	.word	0x08008b85
 8008be4:	08008c39 	.word	0x08008c39
 8008be8:	08008b85 	.word	0x08008b85
 8008bec:	08008b85 	.word	0x08008b85
 8008bf0:	08008cff 	.word	0x08008cff
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	1d1a      	adds	r2, r3, #4
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	602a      	str	r2, [r5, #0]
 8008bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c04:	2301      	movs	r3, #1
 8008c06:	e0a3      	b.n	8008d50 <_printf_i+0x1f4>
 8008c08:	6820      	ldr	r0, [r4, #0]
 8008c0a:	6829      	ldr	r1, [r5, #0]
 8008c0c:	0606      	lsls	r6, r0, #24
 8008c0e:	f101 0304 	add.w	r3, r1, #4
 8008c12:	d50a      	bpl.n	8008c2a <_printf_i+0xce>
 8008c14:	680e      	ldr	r6, [r1, #0]
 8008c16:	602b      	str	r3, [r5, #0]
 8008c18:	2e00      	cmp	r6, #0
 8008c1a:	da03      	bge.n	8008c24 <_printf_i+0xc8>
 8008c1c:	232d      	movs	r3, #45	; 0x2d
 8008c1e:	4276      	negs	r6, r6
 8008c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c24:	485e      	ldr	r0, [pc, #376]	; (8008da0 <_printf_i+0x244>)
 8008c26:	230a      	movs	r3, #10
 8008c28:	e019      	b.n	8008c5e <_printf_i+0x102>
 8008c2a:	680e      	ldr	r6, [r1, #0]
 8008c2c:	602b      	str	r3, [r5, #0]
 8008c2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c32:	bf18      	it	ne
 8008c34:	b236      	sxthne	r6, r6
 8008c36:	e7ef      	b.n	8008c18 <_printf_i+0xbc>
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	6820      	ldr	r0, [r4, #0]
 8008c3c:	1d19      	adds	r1, r3, #4
 8008c3e:	6029      	str	r1, [r5, #0]
 8008c40:	0601      	lsls	r1, r0, #24
 8008c42:	d501      	bpl.n	8008c48 <_printf_i+0xec>
 8008c44:	681e      	ldr	r6, [r3, #0]
 8008c46:	e002      	b.n	8008c4e <_printf_i+0xf2>
 8008c48:	0646      	lsls	r6, r0, #25
 8008c4a:	d5fb      	bpl.n	8008c44 <_printf_i+0xe8>
 8008c4c:	881e      	ldrh	r6, [r3, #0]
 8008c4e:	4854      	ldr	r0, [pc, #336]	; (8008da0 <_printf_i+0x244>)
 8008c50:	2f6f      	cmp	r7, #111	; 0x6f
 8008c52:	bf0c      	ite	eq
 8008c54:	2308      	moveq	r3, #8
 8008c56:	230a      	movne	r3, #10
 8008c58:	2100      	movs	r1, #0
 8008c5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c5e:	6865      	ldr	r5, [r4, #4]
 8008c60:	60a5      	str	r5, [r4, #8]
 8008c62:	2d00      	cmp	r5, #0
 8008c64:	bfa2      	ittt	ge
 8008c66:	6821      	ldrge	r1, [r4, #0]
 8008c68:	f021 0104 	bicge.w	r1, r1, #4
 8008c6c:	6021      	strge	r1, [r4, #0]
 8008c6e:	b90e      	cbnz	r6, 8008c74 <_printf_i+0x118>
 8008c70:	2d00      	cmp	r5, #0
 8008c72:	d04d      	beq.n	8008d10 <_printf_i+0x1b4>
 8008c74:	4615      	mov	r5, r2
 8008c76:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c7a:	fb03 6711 	mls	r7, r3, r1, r6
 8008c7e:	5dc7      	ldrb	r7, [r0, r7]
 8008c80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c84:	4637      	mov	r7, r6
 8008c86:	42bb      	cmp	r3, r7
 8008c88:	460e      	mov	r6, r1
 8008c8a:	d9f4      	bls.n	8008c76 <_printf_i+0x11a>
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d10b      	bne.n	8008ca8 <_printf_i+0x14c>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	07de      	lsls	r6, r3, #31
 8008c94:	d508      	bpl.n	8008ca8 <_printf_i+0x14c>
 8008c96:	6923      	ldr	r3, [r4, #16]
 8008c98:	6861      	ldr	r1, [r4, #4]
 8008c9a:	4299      	cmp	r1, r3
 8008c9c:	bfde      	ittt	le
 8008c9e:	2330      	movle	r3, #48	; 0x30
 8008ca0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ca4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ca8:	1b52      	subs	r2, r2, r5
 8008caa:	6122      	str	r2, [r4, #16]
 8008cac:	f8cd a000 	str.w	sl, [sp]
 8008cb0:	464b      	mov	r3, r9
 8008cb2:	aa03      	add	r2, sp, #12
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	4640      	mov	r0, r8
 8008cb8:	f7ff fee2 	bl	8008a80 <_printf_common>
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	d14c      	bne.n	8008d5a <_printf_i+0x1fe>
 8008cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc4:	b004      	add	sp, #16
 8008cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cca:	4835      	ldr	r0, [pc, #212]	; (8008da0 <_printf_i+0x244>)
 8008ccc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cd0:	6829      	ldr	r1, [r5, #0]
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cd8:	6029      	str	r1, [r5, #0]
 8008cda:	061d      	lsls	r5, r3, #24
 8008cdc:	d514      	bpl.n	8008d08 <_printf_i+0x1ac>
 8008cde:	07df      	lsls	r7, r3, #31
 8008ce0:	bf44      	itt	mi
 8008ce2:	f043 0320 	orrmi.w	r3, r3, #32
 8008ce6:	6023      	strmi	r3, [r4, #0]
 8008ce8:	b91e      	cbnz	r6, 8008cf2 <_printf_i+0x196>
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	f023 0320 	bic.w	r3, r3, #32
 8008cf0:	6023      	str	r3, [r4, #0]
 8008cf2:	2310      	movs	r3, #16
 8008cf4:	e7b0      	b.n	8008c58 <_printf_i+0xfc>
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	f043 0320 	orr.w	r3, r3, #32
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	2378      	movs	r3, #120	; 0x78
 8008d00:	4828      	ldr	r0, [pc, #160]	; (8008da4 <_printf_i+0x248>)
 8008d02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d06:	e7e3      	b.n	8008cd0 <_printf_i+0x174>
 8008d08:	0659      	lsls	r1, r3, #25
 8008d0a:	bf48      	it	mi
 8008d0c:	b2b6      	uxthmi	r6, r6
 8008d0e:	e7e6      	b.n	8008cde <_printf_i+0x182>
 8008d10:	4615      	mov	r5, r2
 8008d12:	e7bb      	b.n	8008c8c <_printf_i+0x130>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	6826      	ldr	r6, [r4, #0]
 8008d18:	6961      	ldr	r1, [r4, #20]
 8008d1a:	1d18      	adds	r0, r3, #4
 8008d1c:	6028      	str	r0, [r5, #0]
 8008d1e:	0635      	lsls	r5, r6, #24
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	d501      	bpl.n	8008d28 <_printf_i+0x1cc>
 8008d24:	6019      	str	r1, [r3, #0]
 8008d26:	e002      	b.n	8008d2e <_printf_i+0x1d2>
 8008d28:	0670      	lsls	r0, r6, #25
 8008d2a:	d5fb      	bpl.n	8008d24 <_printf_i+0x1c8>
 8008d2c:	8019      	strh	r1, [r3, #0]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	6123      	str	r3, [r4, #16]
 8008d32:	4615      	mov	r5, r2
 8008d34:	e7ba      	b.n	8008cac <_printf_i+0x150>
 8008d36:	682b      	ldr	r3, [r5, #0]
 8008d38:	1d1a      	adds	r2, r3, #4
 8008d3a:	602a      	str	r2, [r5, #0]
 8008d3c:	681d      	ldr	r5, [r3, #0]
 8008d3e:	6862      	ldr	r2, [r4, #4]
 8008d40:	2100      	movs	r1, #0
 8008d42:	4628      	mov	r0, r5
 8008d44:	f7f7 fa74 	bl	8000230 <memchr>
 8008d48:	b108      	cbz	r0, 8008d4e <_printf_i+0x1f2>
 8008d4a:	1b40      	subs	r0, r0, r5
 8008d4c:	6060      	str	r0, [r4, #4]
 8008d4e:	6863      	ldr	r3, [r4, #4]
 8008d50:	6123      	str	r3, [r4, #16]
 8008d52:	2300      	movs	r3, #0
 8008d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d58:	e7a8      	b.n	8008cac <_printf_i+0x150>
 8008d5a:	6923      	ldr	r3, [r4, #16]
 8008d5c:	462a      	mov	r2, r5
 8008d5e:	4649      	mov	r1, r9
 8008d60:	4640      	mov	r0, r8
 8008d62:	47d0      	blx	sl
 8008d64:	3001      	adds	r0, #1
 8008d66:	d0ab      	beq.n	8008cc0 <_printf_i+0x164>
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	079b      	lsls	r3, r3, #30
 8008d6c:	d413      	bmi.n	8008d96 <_printf_i+0x23a>
 8008d6e:	68e0      	ldr	r0, [r4, #12]
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	4298      	cmp	r0, r3
 8008d74:	bfb8      	it	lt
 8008d76:	4618      	movlt	r0, r3
 8008d78:	e7a4      	b.n	8008cc4 <_printf_i+0x168>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	4649      	mov	r1, r9
 8008d80:	4640      	mov	r0, r8
 8008d82:	47d0      	blx	sl
 8008d84:	3001      	adds	r0, #1
 8008d86:	d09b      	beq.n	8008cc0 <_printf_i+0x164>
 8008d88:	3501      	adds	r5, #1
 8008d8a:	68e3      	ldr	r3, [r4, #12]
 8008d8c:	9903      	ldr	r1, [sp, #12]
 8008d8e:	1a5b      	subs	r3, r3, r1
 8008d90:	42ab      	cmp	r3, r5
 8008d92:	dcf2      	bgt.n	8008d7a <_printf_i+0x21e>
 8008d94:	e7eb      	b.n	8008d6e <_printf_i+0x212>
 8008d96:	2500      	movs	r5, #0
 8008d98:	f104 0619 	add.w	r6, r4, #25
 8008d9c:	e7f5      	b.n	8008d8a <_printf_i+0x22e>
 8008d9e:	bf00      	nop
 8008da0:	0800ce8e 	.word	0x0800ce8e
 8008da4:	0800ce9f 	.word	0x0800ce9f

08008da8 <_scanf_float>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	b087      	sub	sp, #28
 8008dae:	4617      	mov	r7, r2
 8008db0:	9303      	str	r3, [sp, #12]
 8008db2:	688b      	ldr	r3, [r1, #8]
 8008db4:	1e5a      	subs	r2, r3, #1
 8008db6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008dba:	bf83      	ittte	hi
 8008dbc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008dc0:	195b      	addhi	r3, r3, r5
 8008dc2:	9302      	strhi	r3, [sp, #8]
 8008dc4:	2300      	movls	r3, #0
 8008dc6:	bf86      	itte	hi
 8008dc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008dcc:	608b      	strhi	r3, [r1, #8]
 8008dce:	9302      	strls	r3, [sp, #8]
 8008dd0:	680b      	ldr	r3, [r1, #0]
 8008dd2:	468b      	mov	fp, r1
 8008dd4:	2500      	movs	r5, #0
 8008dd6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008dda:	f84b 3b1c 	str.w	r3, [fp], #28
 8008dde:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008de2:	4680      	mov	r8, r0
 8008de4:	460c      	mov	r4, r1
 8008de6:	465e      	mov	r6, fp
 8008de8:	46aa      	mov	sl, r5
 8008dea:	46a9      	mov	r9, r5
 8008dec:	9501      	str	r5, [sp, #4]
 8008dee:	68a2      	ldr	r2, [r4, #8]
 8008df0:	b152      	cbz	r2, 8008e08 <_scanf_float+0x60>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	2b4e      	cmp	r3, #78	; 0x4e
 8008df8:	d864      	bhi.n	8008ec4 <_scanf_float+0x11c>
 8008dfa:	2b40      	cmp	r3, #64	; 0x40
 8008dfc:	d83c      	bhi.n	8008e78 <_scanf_float+0xd0>
 8008dfe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008e02:	b2c8      	uxtb	r0, r1
 8008e04:	280e      	cmp	r0, #14
 8008e06:	d93a      	bls.n	8008e7e <_scanf_float+0xd6>
 8008e08:	f1b9 0f00 	cmp.w	r9, #0
 8008e0c:	d003      	beq.n	8008e16 <_scanf_float+0x6e>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e1a:	f1ba 0f01 	cmp.w	sl, #1
 8008e1e:	f200 8113 	bhi.w	8009048 <_scanf_float+0x2a0>
 8008e22:	455e      	cmp	r6, fp
 8008e24:	f200 8105 	bhi.w	8009032 <_scanf_float+0x28a>
 8008e28:	2501      	movs	r5, #1
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	b007      	add	sp, #28
 8008e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e32:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008e36:	2a0d      	cmp	r2, #13
 8008e38:	d8e6      	bhi.n	8008e08 <_scanf_float+0x60>
 8008e3a:	a101      	add	r1, pc, #4	; (adr r1, 8008e40 <_scanf_float+0x98>)
 8008e3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e40:	08008f7f 	.word	0x08008f7f
 8008e44:	08008e09 	.word	0x08008e09
 8008e48:	08008e09 	.word	0x08008e09
 8008e4c:	08008e09 	.word	0x08008e09
 8008e50:	08008fdf 	.word	0x08008fdf
 8008e54:	08008fb7 	.word	0x08008fb7
 8008e58:	08008e09 	.word	0x08008e09
 8008e5c:	08008e09 	.word	0x08008e09
 8008e60:	08008f8d 	.word	0x08008f8d
 8008e64:	08008e09 	.word	0x08008e09
 8008e68:	08008e09 	.word	0x08008e09
 8008e6c:	08008e09 	.word	0x08008e09
 8008e70:	08008e09 	.word	0x08008e09
 8008e74:	08008f45 	.word	0x08008f45
 8008e78:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008e7c:	e7db      	b.n	8008e36 <_scanf_float+0x8e>
 8008e7e:	290e      	cmp	r1, #14
 8008e80:	d8c2      	bhi.n	8008e08 <_scanf_float+0x60>
 8008e82:	a001      	add	r0, pc, #4	; (adr r0, 8008e88 <_scanf_float+0xe0>)
 8008e84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008e88:	08008f37 	.word	0x08008f37
 8008e8c:	08008e09 	.word	0x08008e09
 8008e90:	08008f37 	.word	0x08008f37
 8008e94:	08008fcb 	.word	0x08008fcb
 8008e98:	08008e09 	.word	0x08008e09
 8008e9c:	08008ee5 	.word	0x08008ee5
 8008ea0:	08008f21 	.word	0x08008f21
 8008ea4:	08008f21 	.word	0x08008f21
 8008ea8:	08008f21 	.word	0x08008f21
 8008eac:	08008f21 	.word	0x08008f21
 8008eb0:	08008f21 	.word	0x08008f21
 8008eb4:	08008f21 	.word	0x08008f21
 8008eb8:	08008f21 	.word	0x08008f21
 8008ebc:	08008f21 	.word	0x08008f21
 8008ec0:	08008f21 	.word	0x08008f21
 8008ec4:	2b6e      	cmp	r3, #110	; 0x6e
 8008ec6:	d809      	bhi.n	8008edc <_scanf_float+0x134>
 8008ec8:	2b60      	cmp	r3, #96	; 0x60
 8008eca:	d8b2      	bhi.n	8008e32 <_scanf_float+0x8a>
 8008ecc:	2b54      	cmp	r3, #84	; 0x54
 8008ece:	d077      	beq.n	8008fc0 <_scanf_float+0x218>
 8008ed0:	2b59      	cmp	r3, #89	; 0x59
 8008ed2:	d199      	bne.n	8008e08 <_scanf_float+0x60>
 8008ed4:	2d07      	cmp	r5, #7
 8008ed6:	d197      	bne.n	8008e08 <_scanf_float+0x60>
 8008ed8:	2508      	movs	r5, #8
 8008eda:	e029      	b.n	8008f30 <_scanf_float+0x188>
 8008edc:	2b74      	cmp	r3, #116	; 0x74
 8008ede:	d06f      	beq.n	8008fc0 <_scanf_float+0x218>
 8008ee0:	2b79      	cmp	r3, #121	; 0x79
 8008ee2:	e7f6      	b.n	8008ed2 <_scanf_float+0x12a>
 8008ee4:	6821      	ldr	r1, [r4, #0]
 8008ee6:	05c8      	lsls	r0, r1, #23
 8008ee8:	d51a      	bpl.n	8008f20 <_scanf_float+0x178>
 8008eea:	9b02      	ldr	r3, [sp, #8]
 8008eec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ef0:	6021      	str	r1, [r4, #0]
 8008ef2:	f109 0901 	add.w	r9, r9, #1
 8008ef6:	b11b      	cbz	r3, 8008f00 <_scanf_float+0x158>
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	3201      	adds	r2, #1
 8008efc:	9302      	str	r3, [sp, #8]
 8008efe:	60a2      	str	r2, [r4, #8]
 8008f00:	68a3      	ldr	r3, [r4, #8]
 8008f02:	3b01      	subs	r3, #1
 8008f04:	60a3      	str	r3, [r4, #8]
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	6123      	str	r3, [r4, #16]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	607b      	str	r3, [r7, #4]
 8008f14:	f340 8084 	ble.w	8009020 <_scanf_float+0x278>
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	603b      	str	r3, [r7, #0]
 8008f1e:	e766      	b.n	8008dee <_scanf_float+0x46>
 8008f20:	eb1a 0f05 	cmn.w	sl, r5
 8008f24:	f47f af70 	bne.w	8008e08 <_scanf_float+0x60>
 8008f28:	6822      	ldr	r2, [r4, #0]
 8008f2a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008f2e:	6022      	str	r2, [r4, #0]
 8008f30:	f806 3b01 	strb.w	r3, [r6], #1
 8008f34:	e7e4      	b.n	8008f00 <_scanf_float+0x158>
 8008f36:	6822      	ldr	r2, [r4, #0]
 8008f38:	0610      	lsls	r0, r2, #24
 8008f3a:	f57f af65 	bpl.w	8008e08 <_scanf_float+0x60>
 8008f3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f42:	e7f4      	b.n	8008f2e <_scanf_float+0x186>
 8008f44:	f1ba 0f00 	cmp.w	sl, #0
 8008f48:	d10e      	bne.n	8008f68 <_scanf_float+0x1c0>
 8008f4a:	f1b9 0f00 	cmp.w	r9, #0
 8008f4e:	d10e      	bne.n	8008f6e <_scanf_float+0x1c6>
 8008f50:	6822      	ldr	r2, [r4, #0]
 8008f52:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f56:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f5a:	d108      	bne.n	8008f6e <_scanf_float+0x1c6>
 8008f5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f60:	6022      	str	r2, [r4, #0]
 8008f62:	f04f 0a01 	mov.w	sl, #1
 8008f66:	e7e3      	b.n	8008f30 <_scanf_float+0x188>
 8008f68:	f1ba 0f02 	cmp.w	sl, #2
 8008f6c:	d055      	beq.n	800901a <_scanf_float+0x272>
 8008f6e:	2d01      	cmp	r5, #1
 8008f70:	d002      	beq.n	8008f78 <_scanf_float+0x1d0>
 8008f72:	2d04      	cmp	r5, #4
 8008f74:	f47f af48 	bne.w	8008e08 <_scanf_float+0x60>
 8008f78:	3501      	adds	r5, #1
 8008f7a:	b2ed      	uxtb	r5, r5
 8008f7c:	e7d8      	b.n	8008f30 <_scanf_float+0x188>
 8008f7e:	f1ba 0f01 	cmp.w	sl, #1
 8008f82:	f47f af41 	bne.w	8008e08 <_scanf_float+0x60>
 8008f86:	f04f 0a02 	mov.w	sl, #2
 8008f8a:	e7d1      	b.n	8008f30 <_scanf_float+0x188>
 8008f8c:	b97d      	cbnz	r5, 8008fae <_scanf_float+0x206>
 8008f8e:	f1b9 0f00 	cmp.w	r9, #0
 8008f92:	f47f af3c 	bne.w	8008e0e <_scanf_float+0x66>
 8008f96:	6822      	ldr	r2, [r4, #0]
 8008f98:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f9c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008fa0:	f47f af39 	bne.w	8008e16 <_scanf_float+0x6e>
 8008fa4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fa8:	6022      	str	r2, [r4, #0]
 8008faa:	2501      	movs	r5, #1
 8008fac:	e7c0      	b.n	8008f30 <_scanf_float+0x188>
 8008fae:	2d03      	cmp	r5, #3
 8008fb0:	d0e2      	beq.n	8008f78 <_scanf_float+0x1d0>
 8008fb2:	2d05      	cmp	r5, #5
 8008fb4:	e7de      	b.n	8008f74 <_scanf_float+0x1cc>
 8008fb6:	2d02      	cmp	r5, #2
 8008fb8:	f47f af26 	bne.w	8008e08 <_scanf_float+0x60>
 8008fbc:	2503      	movs	r5, #3
 8008fbe:	e7b7      	b.n	8008f30 <_scanf_float+0x188>
 8008fc0:	2d06      	cmp	r5, #6
 8008fc2:	f47f af21 	bne.w	8008e08 <_scanf_float+0x60>
 8008fc6:	2507      	movs	r5, #7
 8008fc8:	e7b2      	b.n	8008f30 <_scanf_float+0x188>
 8008fca:	6822      	ldr	r2, [r4, #0]
 8008fcc:	0591      	lsls	r1, r2, #22
 8008fce:	f57f af1b 	bpl.w	8008e08 <_scanf_float+0x60>
 8008fd2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008fd6:	6022      	str	r2, [r4, #0]
 8008fd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008fdc:	e7a8      	b.n	8008f30 <_scanf_float+0x188>
 8008fde:	6822      	ldr	r2, [r4, #0]
 8008fe0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008fe4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008fe8:	d006      	beq.n	8008ff8 <_scanf_float+0x250>
 8008fea:	0550      	lsls	r0, r2, #21
 8008fec:	f57f af0c 	bpl.w	8008e08 <_scanf_float+0x60>
 8008ff0:	f1b9 0f00 	cmp.w	r9, #0
 8008ff4:	f43f af0f 	beq.w	8008e16 <_scanf_float+0x6e>
 8008ff8:	0591      	lsls	r1, r2, #22
 8008ffa:	bf58      	it	pl
 8008ffc:	9901      	ldrpl	r1, [sp, #4]
 8008ffe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009002:	bf58      	it	pl
 8009004:	eba9 0101 	subpl.w	r1, r9, r1
 8009008:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800900c:	bf58      	it	pl
 800900e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009012:	6022      	str	r2, [r4, #0]
 8009014:	f04f 0900 	mov.w	r9, #0
 8009018:	e78a      	b.n	8008f30 <_scanf_float+0x188>
 800901a:	f04f 0a03 	mov.w	sl, #3
 800901e:	e787      	b.n	8008f30 <_scanf_float+0x188>
 8009020:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009024:	4639      	mov	r1, r7
 8009026:	4640      	mov	r0, r8
 8009028:	4798      	blx	r3
 800902a:	2800      	cmp	r0, #0
 800902c:	f43f aedf 	beq.w	8008dee <_scanf_float+0x46>
 8009030:	e6ea      	b.n	8008e08 <_scanf_float+0x60>
 8009032:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009036:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800903a:	463a      	mov	r2, r7
 800903c:	4640      	mov	r0, r8
 800903e:	4798      	blx	r3
 8009040:	6923      	ldr	r3, [r4, #16]
 8009042:	3b01      	subs	r3, #1
 8009044:	6123      	str	r3, [r4, #16]
 8009046:	e6ec      	b.n	8008e22 <_scanf_float+0x7a>
 8009048:	1e6b      	subs	r3, r5, #1
 800904a:	2b06      	cmp	r3, #6
 800904c:	d825      	bhi.n	800909a <_scanf_float+0x2f2>
 800904e:	2d02      	cmp	r5, #2
 8009050:	d836      	bhi.n	80090c0 <_scanf_float+0x318>
 8009052:	455e      	cmp	r6, fp
 8009054:	f67f aee8 	bls.w	8008e28 <_scanf_float+0x80>
 8009058:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800905c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009060:	463a      	mov	r2, r7
 8009062:	4640      	mov	r0, r8
 8009064:	4798      	blx	r3
 8009066:	6923      	ldr	r3, [r4, #16]
 8009068:	3b01      	subs	r3, #1
 800906a:	6123      	str	r3, [r4, #16]
 800906c:	e7f1      	b.n	8009052 <_scanf_float+0x2aa>
 800906e:	9802      	ldr	r0, [sp, #8]
 8009070:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009074:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009078:	9002      	str	r0, [sp, #8]
 800907a:	463a      	mov	r2, r7
 800907c:	4640      	mov	r0, r8
 800907e:	4798      	blx	r3
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	3b01      	subs	r3, #1
 8009084:	6123      	str	r3, [r4, #16]
 8009086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800908a:	fa5f fa8a 	uxtb.w	sl, sl
 800908e:	f1ba 0f02 	cmp.w	sl, #2
 8009092:	d1ec      	bne.n	800906e <_scanf_float+0x2c6>
 8009094:	3d03      	subs	r5, #3
 8009096:	b2ed      	uxtb	r5, r5
 8009098:	1b76      	subs	r6, r6, r5
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	05da      	lsls	r2, r3, #23
 800909e:	d52f      	bpl.n	8009100 <_scanf_float+0x358>
 80090a0:	055b      	lsls	r3, r3, #21
 80090a2:	d510      	bpl.n	80090c6 <_scanf_float+0x31e>
 80090a4:	455e      	cmp	r6, fp
 80090a6:	f67f aebf 	bls.w	8008e28 <_scanf_float+0x80>
 80090aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090b2:	463a      	mov	r2, r7
 80090b4:	4640      	mov	r0, r8
 80090b6:	4798      	blx	r3
 80090b8:	6923      	ldr	r3, [r4, #16]
 80090ba:	3b01      	subs	r3, #1
 80090bc:	6123      	str	r3, [r4, #16]
 80090be:	e7f1      	b.n	80090a4 <_scanf_float+0x2fc>
 80090c0:	46aa      	mov	sl, r5
 80090c2:	9602      	str	r6, [sp, #8]
 80090c4:	e7df      	b.n	8009086 <_scanf_float+0x2de>
 80090c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80090ca:	6923      	ldr	r3, [r4, #16]
 80090cc:	2965      	cmp	r1, #101	; 0x65
 80090ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80090d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	d00c      	beq.n	80090f4 <_scanf_float+0x34c>
 80090da:	2945      	cmp	r1, #69	; 0x45
 80090dc:	d00a      	beq.n	80090f4 <_scanf_float+0x34c>
 80090de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090e2:	463a      	mov	r2, r7
 80090e4:	4640      	mov	r0, r8
 80090e6:	4798      	blx	r3
 80090e8:	6923      	ldr	r3, [r4, #16]
 80090ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	1eb5      	subs	r5, r6, #2
 80090f2:	6123      	str	r3, [r4, #16]
 80090f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090f8:	463a      	mov	r2, r7
 80090fa:	4640      	mov	r0, r8
 80090fc:	4798      	blx	r3
 80090fe:	462e      	mov	r6, r5
 8009100:	6825      	ldr	r5, [r4, #0]
 8009102:	f015 0510 	ands.w	r5, r5, #16
 8009106:	d159      	bne.n	80091bc <_scanf_float+0x414>
 8009108:	7035      	strb	r5, [r6, #0]
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009114:	d11b      	bne.n	800914e <_scanf_float+0x3a6>
 8009116:	9b01      	ldr	r3, [sp, #4]
 8009118:	454b      	cmp	r3, r9
 800911a:	eba3 0209 	sub.w	r2, r3, r9
 800911e:	d123      	bne.n	8009168 <_scanf_float+0x3c0>
 8009120:	2200      	movs	r2, #0
 8009122:	4659      	mov	r1, fp
 8009124:	4640      	mov	r0, r8
 8009126:	f000 feb1 	bl	8009e8c <_strtod_r>
 800912a:	6822      	ldr	r2, [r4, #0]
 800912c:	9b03      	ldr	r3, [sp, #12]
 800912e:	f012 0f02 	tst.w	r2, #2
 8009132:	ec57 6b10 	vmov	r6, r7, d0
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	d021      	beq.n	800917e <_scanf_float+0x3d6>
 800913a:	9903      	ldr	r1, [sp, #12]
 800913c:	1d1a      	adds	r2, r3, #4
 800913e:	600a      	str	r2, [r1, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	e9c3 6700 	strd	r6, r7, [r3]
 8009146:	68e3      	ldr	r3, [r4, #12]
 8009148:	3301      	adds	r3, #1
 800914a:	60e3      	str	r3, [r4, #12]
 800914c:	e66d      	b.n	8008e2a <_scanf_float+0x82>
 800914e:	9b04      	ldr	r3, [sp, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0e5      	beq.n	8009120 <_scanf_float+0x378>
 8009154:	9905      	ldr	r1, [sp, #20]
 8009156:	230a      	movs	r3, #10
 8009158:	462a      	mov	r2, r5
 800915a:	3101      	adds	r1, #1
 800915c:	4640      	mov	r0, r8
 800915e:	f000 ff1d 	bl	8009f9c <_strtol_r>
 8009162:	9b04      	ldr	r3, [sp, #16]
 8009164:	9e05      	ldr	r6, [sp, #20]
 8009166:	1ac2      	subs	r2, r0, r3
 8009168:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800916c:	429e      	cmp	r6, r3
 800916e:	bf28      	it	cs
 8009170:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009174:	4912      	ldr	r1, [pc, #72]	; (80091c0 <_scanf_float+0x418>)
 8009176:	4630      	mov	r0, r6
 8009178:	f000 f844 	bl	8009204 <siprintf>
 800917c:	e7d0      	b.n	8009120 <_scanf_float+0x378>
 800917e:	9903      	ldr	r1, [sp, #12]
 8009180:	f012 0f04 	tst.w	r2, #4
 8009184:	f103 0204 	add.w	r2, r3, #4
 8009188:	600a      	str	r2, [r1, #0]
 800918a:	d1d9      	bne.n	8009140 <_scanf_float+0x398>
 800918c:	f8d3 8000 	ldr.w	r8, [r3]
 8009190:	ee10 2a10 	vmov	r2, s0
 8009194:	ee10 0a10 	vmov	r0, s0
 8009198:	463b      	mov	r3, r7
 800919a:	4639      	mov	r1, r7
 800919c:	f7f7 fcee 	bl	8000b7c <__aeabi_dcmpun>
 80091a0:	b128      	cbz	r0, 80091ae <_scanf_float+0x406>
 80091a2:	4808      	ldr	r0, [pc, #32]	; (80091c4 <_scanf_float+0x41c>)
 80091a4:	f000 f828 	bl	80091f8 <nanf>
 80091a8:	ed88 0a00 	vstr	s0, [r8]
 80091ac:	e7cb      	b.n	8009146 <_scanf_float+0x39e>
 80091ae:	4630      	mov	r0, r6
 80091b0:	4639      	mov	r1, r7
 80091b2:	f7f7 fd41 	bl	8000c38 <__aeabi_d2f>
 80091b6:	f8c8 0000 	str.w	r0, [r8]
 80091ba:	e7c4      	b.n	8009146 <_scanf_float+0x39e>
 80091bc:	2500      	movs	r5, #0
 80091be:	e634      	b.n	8008e2a <_scanf_float+0x82>
 80091c0:	0800ceb0 	.word	0x0800ceb0
 80091c4:	0800d320 	.word	0x0800d320

080091c8 <iprintf>:
 80091c8:	b40f      	push	{r0, r1, r2, r3}
 80091ca:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <iprintf+0x2c>)
 80091cc:	b513      	push	{r0, r1, r4, lr}
 80091ce:	681c      	ldr	r4, [r3, #0]
 80091d0:	b124      	cbz	r4, 80091dc <iprintf+0x14>
 80091d2:	69a3      	ldr	r3, [r4, #24]
 80091d4:	b913      	cbnz	r3, 80091dc <iprintf+0x14>
 80091d6:	4620      	mov	r0, r4
 80091d8:	f001 fdb4 	bl	800ad44 <__sinit>
 80091dc:	ab05      	add	r3, sp, #20
 80091de:	9a04      	ldr	r2, [sp, #16]
 80091e0:	68a1      	ldr	r1, [r4, #8]
 80091e2:	9301      	str	r3, [sp, #4]
 80091e4:	4620      	mov	r0, r4
 80091e6:	f003 f927 	bl	800c438 <_vfiprintf_r>
 80091ea:	b002      	add	sp, #8
 80091ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f0:	b004      	add	sp, #16
 80091f2:	4770      	bx	lr
 80091f4:	2000000c 	.word	0x2000000c

080091f8 <nanf>:
 80091f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009200 <nanf+0x8>
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	7fc00000 	.word	0x7fc00000

08009204 <siprintf>:
 8009204:	b40e      	push	{r1, r2, r3}
 8009206:	b500      	push	{lr}
 8009208:	b09c      	sub	sp, #112	; 0x70
 800920a:	ab1d      	add	r3, sp, #116	; 0x74
 800920c:	9002      	str	r0, [sp, #8]
 800920e:	9006      	str	r0, [sp, #24]
 8009210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009214:	4809      	ldr	r0, [pc, #36]	; (800923c <siprintf+0x38>)
 8009216:	9107      	str	r1, [sp, #28]
 8009218:	9104      	str	r1, [sp, #16]
 800921a:	4909      	ldr	r1, [pc, #36]	; (8009240 <siprintf+0x3c>)
 800921c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009220:	9105      	str	r1, [sp, #20]
 8009222:	6800      	ldr	r0, [r0, #0]
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	a902      	add	r1, sp, #8
 8009228:	f002 ffdc 	bl	800c1e4 <_svfiprintf_r>
 800922c:	9b02      	ldr	r3, [sp, #8]
 800922e:	2200      	movs	r2, #0
 8009230:	701a      	strb	r2, [r3, #0]
 8009232:	b01c      	add	sp, #112	; 0x70
 8009234:	f85d eb04 	ldr.w	lr, [sp], #4
 8009238:	b003      	add	sp, #12
 800923a:	4770      	bx	lr
 800923c:	2000000c 	.word	0x2000000c
 8009240:	ffff0208 	.word	0xffff0208

08009244 <sulp>:
 8009244:	b570      	push	{r4, r5, r6, lr}
 8009246:	4604      	mov	r4, r0
 8009248:	460d      	mov	r5, r1
 800924a:	ec45 4b10 	vmov	d0, r4, r5
 800924e:	4616      	mov	r6, r2
 8009250:	f002 fd26 	bl	800bca0 <__ulp>
 8009254:	ec51 0b10 	vmov	r0, r1, d0
 8009258:	b17e      	cbz	r6, 800927a <sulp+0x36>
 800925a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800925e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009262:	2b00      	cmp	r3, #0
 8009264:	dd09      	ble.n	800927a <sulp+0x36>
 8009266:	051b      	lsls	r3, r3, #20
 8009268:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800926c:	2400      	movs	r4, #0
 800926e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009272:	4622      	mov	r2, r4
 8009274:	462b      	mov	r3, r5
 8009276:	f7f7 f9e7 	bl	8000648 <__aeabi_dmul>
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	0000      	movs	r0, r0
	...

08009280 <_strtod_l>:
 8009280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	ed2d 8b02 	vpush	{d8}
 8009288:	b09d      	sub	sp, #116	; 0x74
 800928a:	461f      	mov	r7, r3
 800928c:	2300      	movs	r3, #0
 800928e:	9318      	str	r3, [sp, #96]	; 0x60
 8009290:	4ba2      	ldr	r3, [pc, #648]	; (800951c <_strtod_l+0x29c>)
 8009292:	9213      	str	r2, [sp, #76]	; 0x4c
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	9305      	str	r3, [sp, #20]
 8009298:	4604      	mov	r4, r0
 800929a:	4618      	mov	r0, r3
 800929c:	4688      	mov	r8, r1
 800929e:	f7f6 ffbf 	bl	8000220 <strlen>
 80092a2:	f04f 0a00 	mov.w	sl, #0
 80092a6:	4605      	mov	r5, r0
 80092a8:	f04f 0b00 	mov.w	fp, #0
 80092ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80092b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092b2:	781a      	ldrb	r2, [r3, #0]
 80092b4:	2a2b      	cmp	r2, #43	; 0x2b
 80092b6:	d04e      	beq.n	8009356 <_strtod_l+0xd6>
 80092b8:	d83b      	bhi.n	8009332 <_strtod_l+0xb2>
 80092ba:	2a0d      	cmp	r2, #13
 80092bc:	d834      	bhi.n	8009328 <_strtod_l+0xa8>
 80092be:	2a08      	cmp	r2, #8
 80092c0:	d834      	bhi.n	800932c <_strtod_l+0xac>
 80092c2:	2a00      	cmp	r2, #0
 80092c4:	d03e      	beq.n	8009344 <_strtod_l+0xc4>
 80092c6:	2300      	movs	r3, #0
 80092c8:	930a      	str	r3, [sp, #40]	; 0x28
 80092ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80092cc:	7833      	ldrb	r3, [r6, #0]
 80092ce:	2b30      	cmp	r3, #48	; 0x30
 80092d0:	f040 80b0 	bne.w	8009434 <_strtod_l+0x1b4>
 80092d4:	7873      	ldrb	r3, [r6, #1]
 80092d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092da:	2b58      	cmp	r3, #88	; 0x58
 80092dc:	d168      	bne.n	80093b0 <_strtod_l+0x130>
 80092de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	ab18      	add	r3, sp, #96	; 0x60
 80092e4:	9702      	str	r7, [sp, #8]
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	4a8d      	ldr	r2, [pc, #564]	; (8009520 <_strtod_l+0x2a0>)
 80092ea:	ab19      	add	r3, sp, #100	; 0x64
 80092ec:	a917      	add	r1, sp, #92	; 0x5c
 80092ee:	4620      	mov	r0, r4
 80092f0:	f001 fe2c 	bl	800af4c <__gethex>
 80092f4:	f010 0707 	ands.w	r7, r0, #7
 80092f8:	4605      	mov	r5, r0
 80092fa:	d005      	beq.n	8009308 <_strtod_l+0x88>
 80092fc:	2f06      	cmp	r7, #6
 80092fe:	d12c      	bne.n	800935a <_strtod_l+0xda>
 8009300:	3601      	adds	r6, #1
 8009302:	2300      	movs	r3, #0
 8009304:	9617      	str	r6, [sp, #92]	; 0x5c
 8009306:	930a      	str	r3, [sp, #40]	; 0x28
 8009308:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800930a:	2b00      	cmp	r3, #0
 800930c:	f040 8590 	bne.w	8009e30 <_strtod_l+0xbb0>
 8009310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009312:	b1eb      	cbz	r3, 8009350 <_strtod_l+0xd0>
 8009314:	4652      	mov	r2, sl
 8009316:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800931a:	ec43 2b10 	vmov	d0, r2, r3
 800931e:	b01d      	add	sp, #116	; 0x74
 8009320:	ecbd 8b02 	vpop	{d8}
 8009324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009328:	2a20      	cmp	r2, #32
 800932a:	d1cc      	bne.n	80092c6 <_strtod_l+0x46>
 800932c:	3301      	adds	r3, #1
 800932e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009330:	e7be      	b.n	80092b0 <_strtod_l+0x30>
 8009332:	2a2d      	cmp	r2, #45	; 0x2d
 8009334:	d1c7      	bne.n	80092c6 <_strtod_l+0x46>
 8009336:	2201      	movs	r2, #1
 8009338:	920a      	str	r2, [sp, #40]	; 0x28
 800933a:	1c5a      	adds	r2, r3, #1
 800933c:	9217      	str	r2, [sp, #92]	; 0x5c
 800933e:	785b      	ldrb	r3, [r3, #1]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1c2      	bne.n	80092ca <_strtod_l+0x4a>
 8009344:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009346:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800934a:	2b00      	cmp	r3, #0
 800934c:	f040 856e 	bne.w	8009e2c <_strtod_l+0xbac>
 8009350:	4652      	mov	r2, sl
 8009352:	465b      	mov	r3, fp
 8009354:	e7e1      	b.n	800931a <_strtod_l+0x9a>
 8009356:	2200      	movs	r2, #0
 8009358:	e7ee      	b.n	8009338 <_strtod_l+0xb8>
 800935a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800935c:	b13a      	cbz	r2, 800936e <_strtod_l+0xee>
 800935e:	2135      	movs	r1, #53	; 0x35
 8009360:	a81a      	add	r0, sp, #104	; 0x68
 8009362:	f002 fda8 	bl	800beb6 <__copybits>
 8009366:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009368:	4620      	mov	r0, r4
 800936a:	f002 f967 	bl	800b63c <_Bfree>
 800936e:	3f01      	subs	r7, #1
 8009370:	2f04      	cmp	r7, #4
 8009372:	d806      	bhi.n	8009382 <_strtod_l+0x102>
 8009374:	e8df f007 	tbb	[pc, r7]
 8009378:	1714030a 	.word	0x1714030a
 800937c:	0a          	.byte	0x0a
 800937d:	00          	.byte	0x00
 800937e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009382:	0728      	lsls	r0, r5, #28
 8009384:	d5c0      	bpl.n	8009308 <_strtod_l+0x88>
 8009386:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800938a:	e7bd      	b.n	8009308 <_strtod_l+0x88>
 800938c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009390:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009392:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009396:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800939a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800939e:	e7f0      	b.n	8009382 <_strtod_l+0x102>
 80093a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009524 <_strtod_l+0x2a4>
 80093a4:	e7ed      	b.n	8009382 <_strtod_l+0x102>
 80093a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80093aa:	f04f 3aff 	mov.w	sl, #4294967295
 80093ae:	e7e8      	b.n	8009382 <_strtod_l+0x102>
 80093b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093b2:	1c5a      	adds	r2, r3, #1
 80093b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80093b6:	785b      	ldrb	r3, [r3, #1]
 80093b8:	2b30      	cmp	r3, #48	; 0x30
 80093ba:	d0f9      	beq.n	80093b0 <_strtod_l+0x130>
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0a3      	beq.n	8009308 <_strtod_l+0x88>
 80093c0:	2301      	movs	r3, #1
 80093c2:	f04f 0900 	mov.w	r9, #0
 80093c6:	9304      	str	r3, [sp, #16]
 80093c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093ca:	9308      	str	r3, [sp, #32]
 80093cc:	f8cd 901c 	str.w	r9, [sp, #28]
 80093d0:	464f      	mov	r7, r9
 80093d2:	220a      	movs	r2, #10
 80093d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80093d6:	7806      	ldrb	r6, [r0, #0]
 80093d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80093dc:	b2d9      	uxtb	r1, r3
 80093de:	2909      	cmp	r1, #9
 80093e0:	d92a      	bls.n	8009438 <_strtod_l+0x1b8>
 80093e2:	9905      	ldr	r1, [sp, #20]
 80093e4:	462a      	mov	r2, r5
 80093e6:	f003 f9b2 	bl	800c74e <strncmp>
 80093ea:	b398      	cbz	r0, 8009454 <_strtod_l+0x1d4>
 80093ec:	2000      	movs	r0, #0
 80093ee:	4632      	mov	r2, r6
 80093f0:	463d      	mov	r5, r7
 80093f2:	9005      	str	r0, [sp, #20]
 80093f4:	4603      	mov	r3, r0
 80093f6:	2a65      	cmp	r2, #101	; 0x65
 80093f8:	d001      	beq.n	80093fe <_strtod_l+0x17e>
 80093fa:	2a45      	cmp	r2, #69	; 0x45
 80093fc:	d118      	bne.n	8009430 <_strtod_l+0x1b0>
 80093fe:	b91d      	cbnz	r5, 8009408 <_strtod_l+0x188>
 8009400:	9a04      	ldr	r2, [sp, #16]
 8009402:	4302      	orrs	r2, r0
 8009404:	d09e      	beq.n	8009344 <_strtod_l+0xc4>
 8009406:	2500      	movs	r5, #0
 8009408:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800940c:	f108 0201 	add.w	r2, r8, #1
 8009410:	9217      	str	r2, [sp, #92]	; 0x5c
 8009412:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009416:	2a2b      	cmp	r2, #43	; 0x2b
 8009418:	d075      	beq.n	8009506 <_strtod_l+0x286>
 800941a:	2a2d      	cmp	r2, #45	; 0x2d
 800941c:	d07b      	beq.n	8009516 <_strtod_l+0x296>
 800941e:	f04f 0c00 	mov.w	ip, #0
 8009422:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009426:	2909      	cmp	r1, #9
 8009428:	f240 8082 	bls.w	8009530 <_strtod_l+0x2b0>
 800942c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009430:	2600      	movs	r6, #0
 8009432:	e09d      	b.n	8009570 <_strtod_l+0x2f0>
 8009434:	2300      	movs	r3, #0
 8009436:	e7c4      	b.n	80093c2 <_strtod_l+0x142>
 8009438:	2f08      	cmp	r7, #8
 800943a:	bfd8      	it	le
 800943c:	9907      	ldrle	r1, [sp, #28]
 800943e:	f100 0001 	add.w	r0, r0, #1
 8009442:	bfda      	itte	le
 8009444:	fb02 3301 	mlale	r3, r2, r1, r3
 8009448:	9307      	strle	r3, [sp, #28]
 800944a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800944e:	3701      	adds	r7, #1
 8009450:	9017      	str	r0, [sp, #92]	; 0x5c
 8009452:	e7bf      	b.n	80093d4 <_strtod_l+0x154>
 8009454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009456:	195a      	adds	r2, r3, r5
 8009458:	9217      	str	r2, [sp, #92]	; 0x5c
 800945a:	5d5a      	ldrb	r2, [r3, r5]
 800945c:	2f00      	cmp	r7, #0
 800945e:	d037      	beq.n	80094d0 <_strtod_l+0x250>
 8009460:	9005      	str	r0, [sp, #20]
 8009462:	463d      	mov	r5, r7
 8009464:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009468:	2b09      	cmp	r3, #9
 800946a:	d912      	bls.n	8009492 <_strtod_l+0x212>
 800946c:	2301      	movs	r3, #1
 800946e:	e7c2      	b.n	80093f6 <_strtod_l+0x176>
 8009470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009472:	1c5a      	adds	r2, r3, #1
 8009474:	9217      	str	r2, [sp, #92]	; 0x5c
 8009476:	785a      	ldrb	r2, [r3, #1]
 8009478:	3001      	adds	r0, #1
 800947a:	2a30      	cmp	r2, #48	; 0x30
 800947c:	d0f8      	beq.n	8009470 <_strtod_l+0x1f0>
 800947e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009482:	2b08      	cmp	r3, #8
 8009484:	f200 84d9 	bhi.w	8009e3a <_strtod_l+0xbba>
 8009488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800948a:	9005      	str	r0, [sp, #20]
 800948c:	2000      	movs	r0, #0
 800948e:	9308      	str	r3, [sp, #32]
 8009490:	4605      	mov	r5, r0
 8009492:	3a30      	subs	r2, #48	; 0x30
 8009494:	f100 0301 	add.w	r3, r0, #1
 8009498:	d014      	beq.n	80094c4 <_strtod_l+0x244>
 800949a:	9905      	ldr	r1, [sp, #20]
 800949c:	4419      	add	r1, r3
 800949e:	9105      	str	r1, [sp, #20]
 80094a0:	462b      	mov	r3, r5
 80094a2:	eb00 0e05 	add.w	lr, r0, r5
 80094a6:	210a      	movs	r1, #10
 80094a8:	4573      	cmp	r3, lr
 80094aa:	d113      	bne.n	80094d4 <_strtod_l+0x254>
 80094ac:	182b      	adds	r3, r5, r0
 80094ae:	2b08      	cmp	r3, #8
 80094b0:	f105 0501 	add.w	r5, r5, #1
 80094b4:	4405      	add	r5, r0
 80094b6:	dc1c      	bgt.n	80094f2 <_strtod_l+0x272>
 80094b8:	9907      	ldr	r1, [sp, #28]
 80094ba:	230a      	movs	r3, #10
 80094bc:	fb03 2301 	mla	r3, r3, r1, r2
 80094c0:	9307      	str	r3, [sp, #28]
 80094c2:	2300      	movs	r3, #0
 80094c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094c6:	1c51      	adds	r1, r2, #1
 80094c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80094ca:	7852      	ldrb	r2, [r2, #1]
 80094cc:	4618      	mov	r0, r3
 80094ce:	e7c9      	b.n	8009464 <_strtod_l+0x1e4>
 80094d0:	4638      	mov	r0, r7
 80094d2:	e7d2      	b.n	800947a <_strtod_l+0x1fa>
 80094d4:	2b08      	cmp	r3, #8
 80094d6:	dc04      	bgt.n	80094e2 <_strtod_l+0x262>
 80094d8:	9e07      	ldr	r6, [sp, #28]
 80094da:	434e      	muls	r6, r1
 80094dc:	9607      	str	r6, [sp, #28]
 80094de:	3301      	adds	r3, #1
 80094e0:	e7e2      	b.n	80094a8 <_strtod_l+0x228>
 80094e2:	f103 0c01 	add.w	ip, r3, #1
 80094e6:	f1bc 0f10 	cmp.w	ip, #16
 80094ea:	bfd8      	it	le
 80094ec:	fb01 f909 	mulle.w	r9, r1, r9
 80094f0:	e7f5      	b.n	80094de <_strtod_l+0x25e>
 80094f2:	2d10      	cmp	r5, #16
 80094f4:	bfdc      	itt	le
 80094f6:	230a      	movle	r3, #10
 80094f8:	fb03 2909 	mlale	r9, r3, r9, r2
 80094fc:	e7e1      	b.n	80094c2 <_strtod_l+0x242>
 80094fe:	2300      	movs	r3, #0
 8009500:	9305      	str	r3, [sp, #20]
 8009502:	2301      	movs	r3, #1
 8009504:	e77c      	b.n	8009400 <_strtod_l+0x180>
 8009506:	f04f 0c00 	mov.w	ip, #0
 800950a:	f108 0202 	add.w	r2, r8, #2
 800950e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009510:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009514:	e785      	b.n	8009422 <_strtod_l+0x1a2>
 8009516:	f04f 0c01 	mov.w	ip, #1
 800951a:	e7f6      	b.n	800950a <_strtod_l+0x28a>
 800951c:	0800d164 	.word	0x0800d164
 8009520:	0800ceb8 	.word	0x0800ceb8
 8009524:	7ff00000 	.word	0x7ff00000
 8009528:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800952a:	1c51      	adds	r1, r2, #1
 800952c:	9117      	str	r1, [sp, #92]	; 0x5c
 800952e:	7852      	ldrb	r2, [r2, #1]
 8009530:	2a30      	cmp	r2, #48	; 0x30
 8009532:	d0f9      	beq.n	8009528 <_strtod_l+0x2a8>
 8009534:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009538:	2908      	cmp	r1, #8
 800953a:	f63f af79 	bhi.w	8009430 <_strtod_l+0x1b0>
 800953e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009542:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009544:	9206      	str	r2, [sp, #24]
 8009546:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009548:	1c51      	adds	r1, r2, #1
 800954a:	9117      	str	r1, [sp, #92]	; 0x5c
 800954c:	7852      	ldrb	r2, [r2, #1]
 800954e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009552:	2e09      	cmp	r6, #9
 8009554:	d937      	bls.n	80095c6 <_strtod_l+0x346>
 8009556:	9e06      	ldr	r6, [sp, #24]
 8009558:	1b89      	subs	r1, r1, r6
 800955a:	2908      	cmp	r1, #8
 800955c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009560:	dc02      	bgt.n	8009568 <_strtod_l+0x2e8>
 8009562:	4576      	cmp	r6, lr
 8009564:	bfa8      	it	ge
 8009566:	4676      	movge	r6, lr
 8009568:	f1bc 0f00 	cmp.w	ip, #0
 800956c:	d000      	beq.n	8009570 <_strtod_l+0x2f0>
 800956e:	4276      	negs	r6, r6
 8009570:	2d00      	cmp	r5, #0
 8009572:	d14d      	bne.n	8009610 <_strtod_l+0x390>
 8009574:	9904      	ldr	r1, [sp, #16]
 8009576:	4301      	orrs	r1, r0
 8009578:	f47f aec6 	bne.w	8009308 <_strtod_l+0x88>
 800957c:	2b00      	cmp	r3, #0
 800957e:	f47f aee1 	bne.w	8009344 <_strtod_l+0xc4>
 8009582:	2a69      	cmp	r2, #105	; 0x69
 8009584:	d027      	beq.n	80095d6 <_strtod_l+0x356>
 8009586:	dc24      	bgt.n	80095d2 <_strtod_l+0x352>
 8009588:	2a49      	cmp	r2, #73	; 0x49
 800958a:	d024      	beq.n	80095d6 <_strtod_l+0x356>
 800958c:	2a4e      	cmp	r2, #78	; 0x4e
 800958e:	f47f aed9 	bne.w	8009344 <_strtod_l+0xc4>
 8009592:	499f      	ldr	r1, [pc, #636]	; (8009810 <_strtod_l+0x590>)
 8009594:	a817      	add	r0, sp, #92	; 0x5c
 8009596:	f001 ff31 	bl	800b3fc <__match>
 800959a:	2800      	cmp	r0, #0
 800959c:	f43f aed2 	beq.w	8009344 <_strtod_l+0xc4>
 80095a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	2b28      	cmp	r3, #40	; 0x28
 80095a6:	d12d      	bne.n	8009604 <_strtod_l+0x384>
 80095a8:	499a      	ldr	r1, [pc, #616]	; (8009814 <_strtod_l+0x594>)
 80095aa:	aa1a      	add	r2, sp, #104	; 0x68
 80095ac:	a817      	add	r0, sp, #92	; 0x5c
 80095ae:	f001 ff39 	bl	800b424 <__hexnan>
 80095b2:	2805      	cmp	r0, #5
 80095b4:	d126      	bne.n	8009604 <_strtod_l+0x384>
 80095b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80095bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80095c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80095c4:	e6a0      	b.n	8009308 <_strtod_l+0x88>
 80095c6:	210a      	movs	r1, #10
 80095c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80095cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80095d0:	e7b9      	b.n	8009546 <_strtod_l+0x2c6>
 80095d2:	2a6e      	cmp	r2, #110	; 0x6e
 80095d4:	e7db      	b.n	800958e <_strtod_l+0x30e>
 80095d6:	4990      	ldr	r1, [pc, #576]	; (8009818 <_strtod_l+0x598>)
 80095d8:	a817      	add	r0, sp, #92	; 0x5c
 80095da:	f001 ff0f 	bl	800b3fc <__match>
 80095de:	2800      	cmp	r0, #0
 80095e0:	f43f aeb0 	beq.w	8009344 <_strtod_l+0xc4>
 80095e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095e6:	498d      	ldr	r1, [pc, #564]	; (800981c <_strtod_l+0x59c>)
 80095e8:	3b01      	subs	r3, #1
 80095ea:	a817      	add	r0, sp, #92	; 0x5c
 80095ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80095ee:	f001 ff05 	bl	800b3fc <__match>
 80095f2:	b910      	cbnz	r0, 80095fa <_strtod_l+0x37a>
 80095f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095f6:	3301      	adds	r3, #1
 80095f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80095fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800982c <_strtod_l+0x5ac>
 80095fe:	f04f 0a00 	mov.w	sl, #0
 8009602:	e681      	b.n	8009308 <_strtod_l+0x88>
 8009604:	4886      	ldr	r0, [pc, #536]	; (8009820 <_strtod_l+0x5a0>)
 8009606:	f003 f847 	bl	800c698 <nan>
 800960a:	ec5b ab10 	vmov	sl, fp, d0
 800960e:	e67b      	b.n	8009308 <_strtod_l+0x88>
 8009610:	9b05      	ldr	r3, [sp, #20]
 8009612:	9807      	ldr	r0, [sp, #28]
 8009614:	1af3      	subs	r3, r6, r3
 8009616:	2f00      	cmp	r7, #0
 8009618:	bf08      	it	eq
 800961a:	462f      	moveq	r7, r5
 800961c:	2d10      	cmp	r5, #16
 800961e:	9306      	str	r3, [sp, #24]
 8009620:	46a8      	mov	r8, r5
 8009622:	bfa8      	it	ge
 8009624:	f04f 0810 	movge.w	r8, #16
 8009628:	f7f6 ff94 	bl	8000554 <__aeabi_ui2d>
 800962c:	2d09      	cmp	r5, #9
 800962e:	4682      	mov	sl, r0
 8009630:	468b      	mov	fp, r1
 8009632:	dd13      	ble.n	800965c <_strtod_l+0x3dc>
 8009634:	4b7b      	ldr	r3, [pc, #492]	; (8009824 <_strtod_l+0x5a4>)
 8009636:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800963a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800963e:	f7f7 f803 	bl	8000648 <__aeabi_dmul>
 8009642:	4682      	mov	sl, r0
 8009644:	4648      	mov	r0, r9
 8009646:	468b      	mov	fp, r1
 8009648:	f7f6 ff84 	bl	8000554 <__aeabi_ui2d>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4650      	mov	r0, sl
 8009652:	4659      	mov	r1, fp
 8009654:	f7f6 fe42 	bl	80002dc <__adddf3>
 8009658:	4682      	mov	sl, r0
 800965a:	468b      	mov	fp, r1
 800965c:	2d0f      	cmp	r5, #15
 800965e:	dc38      	bgt.n	80096d2 <_strtod_l+0x452>
 8009660:	9b06      	ldr	r3, [sp, #24]
 8009662:	2b00      	cmp	r3, #0
 8009664:	f43f ae50 	beq.w	8009308 <_strtod_l+0x88>
 8009668:	dd24      	ble.n	80096b4 <_strtod_l+0x434>
 800966a:	2b16      	cmp	r3, #22
 800966c:	dc0b      	bgt.n	8009686 <_strtod_l+0x406>
 800966e:	496d      	ldr	r1, [pc, #436]	; (8009824 <_strtod_l+0x5a4>)
 8009670:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009678:	4652      	mov	r2, sl
 800967a:	465b      	mov	r3, fp
 800967c:	f7f6 ffe4 	bl	8000648 <__aeabi_dmul>
 8009680:	4682      	mov	sl, r0
 8009682:	468b      	mov	fp, r1
 8009684:	e640      	b.n	8009308 <_strtod_l+0x88>
 8009686:	9a06      	ldr	r2, [sp, #24]
 8009688:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800968c:	4293      	cmp	r3, r2
 800968e:	db20      	blt.n	80096d2 <_strtod_l+0x452>
 8009690:	4c64      	ldr	r4, [pc, #400]	; (8009824 <_strtod_l+0x5a4>)
 8009692:	f1c5 050f 	rsb	r5, r5, #15
 8009696:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800969a:	4652      	mov	r2, sl
 800969c:	465b      	mov	r3, fp
 800969e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096a2:	f7f6 ffd1 	bl	8000648 <__aeabi_dmul>
 80096a6:	9b06      	ldr	r3, [sp, #24]
 80096a8:	1b5d      	subs	r5, r3, r5
 80096aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80096ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096b2:	e7e3      	b.n	800967c <_strtod_l+0x3fc>
 80096b4:	9b06      	ldr	r3, [sp, #24]
 80096b6:	3316      	adds	r3, #22
 80096b8:	db0b      	blt.n	80096d2 <_strtod_l+0x452>
 80096ba:	9b05      	ldr	r3, [sp, #20]
 80096bc:	1b9e      	subs	r6, r3, r6
 80096be:	4b59      	ldr	r3, [pc, #356]	; (8009824 <_strtod_l+0x5a4>)
 80096c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80096c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096c8:	4650      	mov	r0, sl
 80096ca:	4659      	mov	r1, fp
 80096cc:	f7f7 f8e6 	bl	800089c <__aeabi_ddiv>
 80096d0:	e7d6      	b.n	8009680 <_strtod_l+0x400>
 80096d2:	9b06      	ldr	r3, [sp, #24]
 80096d4:	eba5 0808 	sub.w	r8, r5, r8
 80096d8:	4498      	add	r8, r3
 80096da:	f1b8 0f00 	cmp.w	r8, #0
 80096de:	dd74      	ble.n	80097ca <_strtod_l+0x54a>
 80096e0:	f018 030f 	ands.w	r3, r8, #15
 80096e4:	d00a      	beq.n	80096fc <_strtod_l+0x47c>
 80096e6:	494f      	ldr	r1, [pc, #316]	; (8009824 <_strtod_l+0x5a4>)
 80096e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096ec:	4652      	mov	r2, sl
 80096ee:	465b      	mov	r3, fp
 80096f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096f4:	f7f6 ffa8 	bl	8000648 <__aeabi_dmul>
 80096f8:	4682      	mov	sl, r0
 80096fa:	468b      	mov	fp, r1
 80096fc:	f038 080f 	bics.w	r8, r8, #15
 8009700:	d04f      	beq.n	80097a2 <_strtod_l+0x522>
 8009702:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009706:	dd22      	ble.n	800974e <_strtod_l+0x4ce>
 8009708:	2500      	movs	r5, #0
 800970a:	462e      	mov	r6, r5
 800970c:	9507      	str	r5, [sp, #28]
 800970e:	9505      	str	r5, [sp, #20]
 8009710:	2322      	movs	r3, #34	; 0x22
 8009712:	f8df b118 	ldr.w	fp, [pc, #280]	; 800982c <_strtod_l+0x5ac>
 8009716:	6023      	str	r3, [r4, #0]
 8009718:	f04f 0a00 	mov.w	sl, #0
 800971c:	9b07      	ldr	r3, [sp, #28]
 800971e:	2b00      	cmp	r3, #0
 8009720:	f43f adf2 	beq.w	8009308 <_strtod_l+0x88>
 8009724:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009726:	4620      	mov	r0, r4
 8009728:	f001 ff88 	bl	800b63c <_Bfree>
 800972c:	9905      	ldr	r1, [sp, #20]
 800972e:	4620      	mov	r0, r4
 8009730:	f001 ff84 	bl	800b63c <_Bfree>
 8009734:	4631      	mov	r1, r6
 8009736:	4620      	mov	r0, r4
 8009738:	f001 ff80 	bl	800b63c <_Bfree>
 800973c:	9907      	ldr	r1, [sp, #28]
 800973e:	4620      	mov	r0, r4
 8009740:	f001 ff7c 	bl	800b63c <_Bfree>
 8009744:	4629      	mov	r1, r5
 8009746:	4620      	mov	r0, r4
 8009748:	f001 ff78 	bl	800b63c <_Bfree>
 800974c:	e5dc      	b.n	8009308 <_strtod_l+0x88>
 800974e:	4b36      	ldr	r3, [pc, #216]	; (8009828 <_strtod_l+0x5a8>)
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	2300      	movs	r3, #0
 8009754:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009758:	4650      	mov	r0, sl
 800975a:	4659      	mov	r1, fp
 800975c:	4699      	mov	r9, r3
 800975e:	f1b8 0f01 	cmp.w	r8, #1
 8009762:	dc21      	bgt.n	80097a8 <_strtod_l+0x528>
 8009764:	b10b      	cbz	r3, 800976a <_strtod_l+0x4ea>
 8009766:	4682      	mov	sl, r0
 8009768:	468b      	mov	fp, r1
 800976a:	4b2f      	ldr	r3, [pc, #188]	; (8009828 <_strtod_l+0x5a8>)
 800976c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009770:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009774:	4652      	mov	r2, sl
 8009776:	465b      	mov	r3, fp
 8009778:	e9d9 0100 	ldrd	r0, r1, [r9]
 800977c:	f7f6 ff64 	bl	8000648 <__aeabi_dmul>
 8009780:	4b2a      	ldr	r3, [pc, #168]	; (800982c <_strtod_l+0x5ac>)
 8009782:	460a      	mov	r2, r1
 8009784:	400b      	ands	r3, r1
 8009786:	492a      	ldr	r1, [pc, #168]	; (8009830 <_strtod_l+0x5b0>)
 8009788:	428b      	cmp	r3, r1
 800978a:	4682      	mov	sl, r0
 800978c:	d8bc      	bhi.n	8009708 <_strtod_l+0x488>
 800978e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009792:	428b      	cmp	r3, r1
 8009794:	bf86      	itte	hi
 8009796:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009834 <_strtod_l+0x5b4>
 800979a:	f04f 3aff 	movhi.w	sl, #4294967295
 800979e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80097a2:	2300      	movs	r3, #0
 80097a4:	9304      	str	r3, [sp, #16]
 80097a6:	e084      	b.n	80098b2 <_strtod_l+0x632>
 80097a8:	f018 0f01 	tst.w	r8, #1
 80097ac:	d005      	beq.n	80097ba <_strtod_l+0x53a>
 80097ae:	9b04      	ldr	r3, [sp, #16]
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	f7f6 ff48 	bl	8000648 <__aeabi_dmul>
 80097b8:	2301      	movs	r3, #1
 80097ba:	9a04      	ldr	r2, [sp, #16]
 80097bc:	3208      	adds	r2, #8
 80097be:	f109 0901 	add.w	r9, r9, #1
 80097c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80097c6:	9204      	str	r2, [sp, #16]
 80097c8:	e7c9      	b.n	800975e <_strtod_l+0x4de>
 80097ca:	d0ea      	beq.n	80097a2 <_strtod_l+0x522>
 80097cc:	f1c8 0800 	rsb	r8, r8, #0
 80097d0:	f018 020f 	ands.w	r2, r8, #15
 80097d4:	d00a      	beq.n	80097ec <_strtod_l+0x56c>
 80097d6:	4b13      	ldr	r3, [pc, #76]	; (8009824 <_strtod_l+0x5a4>)
 80097d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097dc:	4650      	mov	r0, sl
 80097de:	4659      	mov	r1, fp
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	f7f7 f85a 	bl	800089c <__aeabi_ddiv>
 80097e8:	4682      	mov	sl, r0
 80097ea:	468b      	mov	fp, r1
 80097ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 80097f0:	d0d7      	beq.n	80097a2 <_strtod_l+0x522>
 80097f2:	f1b8 0f1f 	cmp.w	r8, #31
 80097f6:	dd1f      	ble.n	8009838 <_strtod_l+0x5b8>
 80097f8:	2500      	movs	r5, #0
 80097fa:	462e      	mov	r6, r5
 80097fc:	9507      	str	r5, [sp, #28]
 80097fe:	9505      	str	r5, [sp, #20]
 8009800:	2322      	movs	r3, #34	; 0x22
 8009802:	f04f 0a00 	mov.w	sl, #0
 8009806:	f04f 0b00 	mov.w	fp, #0
 800980a:	6023      	str	r3, [r4, #0]
 800980c:	e786      	b.n	800971c <_strtod_l+0x49c>
 800980e:	bf00      	nop
 8009810:	0800ce89 	.word	0x0800ce89
 8009814:	0800cecc 	.word	0x0800cecc
 8009818:	0800ce81 	.word	0x0800ce81
 800981c:	0800d00c 	.word	0x0800d00c
 8009820:	0800d320 	.word	0x0800d320
 8009824:	0800d200 	.word	0x0800d200
 8009828:	0800d1d8 	.word	0x0800d1d8
 800982c:	7ff00000 	.word	0x7ff00000
 8009830:	7ca00000 	.word	0x7ca00000
 8009834:	7fefffff 	.word	0x7fefffff
 8009838:	f018 0310 	ands.w	r3, r8, #16
 800983c:	bf18      	it	ne
 800983e:	236a      	movne	r3, #106	; 0x6a
 8009840:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009bf0 <_strtod_l+0x970>
 8009844:	9304      	str	r3, [sp, #16]
 8009846:	4650      	mov	r0, sl
 8009848:	4659      	mov	r1, fp
 800984a:	2300      	movs	r3, #0
 800984c:	f018 0f01 	tst.w	r8, #1
 8009850:	d004      	beq.n	800985c <_strtod_l+0x5dc>
 8009852:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009856:	f7f6 fef7 	bl	8000648 <__aeabi_dmul>
 800985a:	2301      	movs	r3, #1
 800985c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009860:	f109 0908 	add.w	r9, r9, #8
 8009864:	d1f2      	bne.n	800984c <_strtod_l+0x5cc>
 8009866:	b10b      	cbz	r3, 800986c <_strtod_l+0x5ec>
 8009868:	4682      	mov	sl, r0
 800986a:	468b      	mov	fp, r1
 800986c:	9b04      	ldr	r3, [sp, #16]
 800986e:	b1c3      	cbz	r3, 80098a2 <_strtod_l+0x622>
 8009870:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009874:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009878:	2b00      	cmp	r3, #0
 800987a:	4659      	mov	r1, fp
 800987c:	dd11      	ble.n	80098a2 <_strtod_l+0x622>
 800987e:	2b1f      	cmp	r3, #31
 8009880:	f340 8124 	ble.w	8009acc <_strtod_l+0x84c>
 8009884:	2b34      	cmp	r3, #52	; 0x34
 8009886:	bfde      	ittt	le
 8009888:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800988c:	f04f 33ff 	movle.w	r3, #4294967295
 8009890:	fa03 f202 	lslle.w	r2, r3, r2
 8009894:	f04f 0a00 	mov.w	sl, #0
 8009898:	bfcc      	ite	gt
 800989a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800989e:	ea02 0b01 	andle.w	fp, r2, r1
 80098a2:	2200      	movs	r2, #0
 80098a4:	2300      	movs	r3, #0
 80098a6:	4650      	mov	r0, sl
 80098a8:	4659      	mov	r1, fp
 80098aa:	f7f7 f935 	bl	8000b18 <__aeabi_dcmpeq>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d1a2      	bne.n	80097f8 <_strtod_l+0x578>
 80098b2:	9b07      	ldr	r3, [sp, #28]
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	9908      	ldr	r1, [sp, #32]
 80098b8:	462b      	mov	r3, r5
 80098ba:	463a      	mov	r2, r7
 80098bc:	4620      	mov	r0, r4
 80098be:	f001 ff25 	bl	800b70c <__s2b>
 80098c2:	9007      	str	r0, [sp, #28]
 80098c4:	2800      	cmp	r0, #0
 80098c6:	f43f af1f 	beq.w	8009708 <_strtod_l+0x488>
 80098ca:	9b05      	ldr	r3, [sp, #20]
 80098cc:	1b9e      	subs	r6, r3, r6
 80098ce:	9b06      	ldr	r3, [sp, #24]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	bfb4      	ite	lt
 80098d4:	4633      	movlt	r3, r6
 80098d6:	2300      	movge	r3, #0
 80098d8:	930c      	str	r3, [sp, #48]	; 0x30
 80098da:	9b06      	ldr	r3, [sp, #24]
 80098dc:	2500      	movs	r5, #0
 80098de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80098e2:	9312      	str	r3, [sp, #72]	; 0x48
 80098e4:	462e      	mov	r6, r5
 80098e6:	9b07      	ldr	r3, [sp, #28]
 80098e8:	4620      	mov	r0, r4
 80098ea:	6859      	ldr	r1, [r3, #4]
 80098ec:	f001 fe66 	bl	800b5bc <_Balloc>
 80098f0:	9005      	str	r0, [sp, #20]
 80098f2:	2800      	cmp	r0, #0
 80098f4:	f43f af0c 	beq.w	8009710 <_strtod_l+0x490>
 80098f8:	9b07      	ldr	r3, [sp, #28]
 80098fa:	691a      	ldr	r2, [r3, #16]
 80098fc:	3202      	adds	r2, #2
 80098fe:	f103 010c 	add.w	r1, r3, #12
 8009902:	0092      	lsls	r2, r2, #2
 8009904:	300c      	adds	r0, #12
 8009906:	f001 fe4b 	bl	800b5a0 <memcpy>
 800990a:	ec4b ab10 	vmov	d0, sl, fp
 800990e:	aa1a      	add	r2, sp, #104	; 0x68
 8009910:	a919      	add	r1, sp, #100	; 0x64
 8009912:	4620      	mov	r0, r4
 8009914:	f002 fa40 	bl	800bd98 <__d2b>
 8009918:	ec4b ab18 	vmov	d8, sl, fp
 800991c:	9018      	str	r0, [sp, #96]	; 0x60
 800991e:	2800      	cmp	r0, #0
 8009920:	f43f aef6 	beq.w	8009710 <_strtod_l+0x490>
 8009924:	2101      	movs	r1, #1
 8009926:	4620      	mov	r0, r4
 8009928:	f001 ff8a 	bl	800b840 <__i2b>
 800992c:	4606      	mov	r6, r0
 800992e:	2800      	cmp	r0, #0
 8009930:	f43f aeee 	beq.w	8009710 <_strtod_l+0x490>
 8009934:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009936:	9904      	ldr	r1, [sp, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	bfab      	itete	ge
 800993c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800993e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009940:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009942:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009946:	bfac      	ite	ge
 8009948:	eb03 0902 	addge.w	r9, r3, r2
 800994c:	1ad7      	sublt	r7, r2, r3
 800994e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009950:	eba3 0801 	sub.w	r8, r3, r1
 8009954:	4490      	add	r8, r2
 8009956:	4ba1      	ldr	r3, [pc, #644]	; (8009bdc <_strtod_l+0x95c>)
 8009958:	f108 38ff 	add.w	r8, r8, #4294967295
 800995c:	4598      	cmp	r8, r3
 800995e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009962:	f280 80c7 	bge.w	8009af4 <_strtod_l+0x874>
 8009966:	eba3 0308 	sub.w	r3, r3, r8
 800996a:	2b1f      	cmp	r3, #31
 800996c:	eba2 0203 	sub.w	r2, r2, r3
 8009970:	f04f 0101 	mov.w	r1, #1
 8009974:	f300 80b1 	bgt.w	8009ada <_strtod_l+0x85a>
 8009978:	fa01 f303 	lsl.w	r3, r1, r3
 800997c:	930d      	str	r3, [sp, #52]	; 0x34
 800997e:	2300      	movs	r3, #0
 8009980:	9308      	str	r3, [sp, #32]
 8009982:	eb09 0802 	add.w	r8, r9, r2
 8009986:	9b04      	ldr	r3, [sp, #16]
 8009988:	45c1      	cmp	r9, r8
 800998a:	4417      	add	r7, r2
 800998c:	441f      	add	r7, r3
 800998e:	464b      	mov	r3, r9
 8009990:	bfa8      	it	ge
 8009992:	4643      	movge	r3, r8
 8009994:	42bb      	cmp	r3, r7
 8009996:	bfa8      	it	ge
 8009998:	463b      	movge	r3, r7
 800999a:	2b00      	cmp	r3, #0
 800999c:	bfc2      	ittt	gt
 800999e:	eba8 0803 	subgt.w	r8, r8, r3
 80099a2:	1aff      	subgt	r7, r7, r3
 80099a4:	eba9 0903 	subgt.w	r9, r9, r3
 80099a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	dd17      	ble.n	80099de <_strtod_l+0x75e>
 80099ae:	4631      	mov	r1, r6
 80099b0:	461a      	mov	r2, r3
 80099b2:	4620      	mov	r0, r4
 80099b4:	f002 f804 	bl	800b9c0 <__pow5mult>
 80099b8:	4606      	mov	r6, r0
 80099ba:	2800      	cmp	r0, #0
 80099bc:	f43f aea8 	beq.w	8009710 <_strtod_l+0x490>
 80099c0:	4601      	mov	r1, r0
 80099c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80099c4:	4620      	mov	r0, r4
 80099c6:	f001 ff51 	bl	800b86c <__multiply>
 80099ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80099cc:	2800      	cmp	r0, #0
 80099ce:	f43f ae9f 	beq.w	8009710 <_strtod_l+0x490>
 80099d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80099d4:	4620      	mov	r0, r4
 80099d6:	f001 fe31 	bl	800b63c <_Bfree>
 80099da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099dc:	9318      	str	r3, [sp, #96]	; 0x60
 80099de:	f1b8 0f00 	cmp.w	r8, #0
 80099e2:	f300 808c 	bgt.w	8009afe <_strtod_l+0x87e>
 80099e6:	9b06      	ldr	r3, [sp, #24]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	dd08      	ble.n	80099fe <_strtod_l+0x77e>
 80099ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099ee:	9905      	ldr	r1, [sp, #20]
 80099f0:	4620      	mov	r0, r4
 80099f2:	f001 ffe5 	bl	800b9c0 <__pow5mult>
 80099f6:	9005      	str	r0, [sp, #20]
 80099f8:	2800      	cmp	r0, #0
 80099fa:	f43f ae89 	beq.w	8009710 <_strtod_l+0x490>
 80099fe:	2f00      	cmp	r7, #0
 8009a00:	dd08      	ble.n	8009a14 <_strtod_l+0x794>
 8009a02:	9905      	ldr	r1, [sp, #20]
 8009a04:	463a      	mov	r2, r7
 8009a06:	4620      	mov	r0, r4
 8009a08:	f002 f834 	bl	800ba74 <__lshift>
 8009a0c:	9005      	str	r0, [sp, #20]
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	f43f ae7e 	beq.w	8009710 <_strtod_l+0x490>
 8009a14:	f1b9 0f00 	cmp.w	r9, #0
 8009a18:	dd08      	ble.n	8009a2c <_strtod_l+0x7ac>
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	464a      	mov	r2, r9
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f002 f828 	bl	800ba74 <__lshift>
 8009a24:	4606      	mov	r6, r0
 8009a26:	2800      	cmp	r0, #0
 8009a28:	f43f ae72 	beq.w	8009710 <_strtod_l+0x490>
 8009a2c:	9a05      	ldr	r2, [sp, #20]
 8009a2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a30:	4620      	mov	r0, r4
 8009a32:	f002 f8ab 	bl	800bb8c <__mdiff>
 8009a36:	4605      	mov	r5, r0
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	f43f ae69 	beq.w	8009710 <_strtod_l+0x490>
 8009a3e:	68c3      	ldr	r3, [r0, #12]
 8009a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a42:	2300      	movs	r3, #0
 8009a44:	60c3      	str	r3, [r0, #12]
 8009a46:	4631      	mov	r1, r6
 8009a48:	f002 f884 	bl	800bb54 <__mcmp>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	da60      	bge.n	8009b12 <_strtod_l+0x892>
 8009a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a52:	ea53 030a 	orrs.w	r3, r3, sl
 8009a56:	f040 8082 	bne.w	8009b5e <_strtod_l+0x8de>
 8009a5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d17d      	bne.n	8009b5e <_strtod_l+0x8de>
 8009a62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a66:	0d1b      	lsrs	r3, r3, #20
 8009a68:	051b      	lsls	r3, r3, #20
 8009a6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a6e:	d976      	bls.n	8009b5e <_strtod_l+0x8de>
 8009a70:	696b      	ldr	r3, [r5, #20]
 8009a72:	b913      	cbnz	r3, 8009a7a <_strtod_l+0x7fa>
 8009a74:	692b      	ldr	r3, [r5, #16]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	dd71      	ble.n	8009b5e <_strtod_l+0x8de>
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f001 fff8 	bl	800ba74 <__lshift>
 8009a84:	4631      	mov	r1, r6
 8009a86:	4605      	mov	r5, r0
 8009a88:	f002 f864 	bl	800bb54 <__mcmp>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	dd66      	ble.n	8009b5e <_strtod_l+0x8de>
 8009a90:	9904      	ldr	r1, [sp, #16]
 8009a92:	4a53      	ldr	r2, [pc, #332]	; (8009be0 <_strtod_l+0x960>)
 8009a94:	465b      	mov	r3, fp
 8009a96:	2900      	cmp	r1, #0
 8009a98:	f000 8081 	beq.w	8009b9e <_strtod_l+0x91e>
 8009a9c:	ea02 010b 	and.w	r1, r2, fp
 8009aa0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009aa4:	dc7b      	bgt.n	8009b9e <_strtod_l+0x91e>
 8009aa6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009aaa:	f77f aea9 	ble.w	8009800 <_strtod_l+0x580>
 8009aae:	4b4d      	ldr	r3, [pc, #308]	; (8009be4 <_strtod_l+0x964>)
 8009ab0:	4650      	mov	r0, sl
 8009ab2:	4659      	mov	r1, fp
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f7f6 fdc7 	bl	8000648 <__aeabi_dmul>
 8009aba:	460b      	mov	r3, r1
 8009abc:	4303      	orrs	r3, r0
 8009abe:	bf08      	it	eq
 8009ac0:	2322      	moveq	r3, #34	; 0x22
 8009ac2:	4682      	mov	sl, r0
 8009ac4:	468b      	mov	fp, r1
 8009ac6:	bf08      	it	eq
 8009ac8:	6023      	streq	r3, [r4, #0]
 8009aca:	e62b      	b.n	8009724 <_strtod_l+0x4a4>
 8009acc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad4:	ea03 0a0a 	and.w	sl, r3, sl
 8009ad8:	e6e3      	b.n	80098a2 <_strtod_l+0x622>
 8009ada:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009ade:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009ae2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009ae6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009aea:	fa01 f308 	lsl.w	r3, r1, r8
 8009aee:	9308      	str	r3, [sp, #32]
 8009af0:	910d      	str	r1, [sp, #52]	; 0x34
 8009af2:	e746      	b.n	8009982 <_strtod_l+0x702>
 8009af4:	2300      	movs	r3, #0
 8009af6:	9308      	str	r3, [sp, #32]
 8009af8:	2301      	movs	r3, #1
 8009afa:	930d      	str	r3, [sp, #52]	; 0x34
 8009afc:	e741      	b.n	8009982 <_strtod_l+0x702>
 8009afe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b00:	4642      	mov	r2, r8
 8009b02:	4620      	mov	r0, r4
 8009b04:	f001 ffb6 	bl	800ba74 <__lshift>
 8009b08:	9018      	str	r0, [sp, #96]	; 0x60
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	f47f af6b 	bne.w	80099e6 <_strtod_l+0x766>
 8009b10:	e5fe      	b.n	8009710 <_strtod_l+0x490>
 8009b12:	465f      	mov	r7, fp
 8009b14:	d16e      	bne.n	8009bf4 <_strtod_l+0x974>
 8009b16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b1c:	b342      	cbz	r2, 8009b70 <_strtod_l+0x8f0>
 8009b1e:	4a32      	ldr	r2, [pc, #200]	; (8009be8 <_strtod_l+0x968>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d128      	bne.n	8009b76 <_strtod_l+0x8f6>
 8009b24:	9b04      	ldr	r3, [sp, #16]
 8009b26:	4651      	mov	r1, sl
 8009b28:	b1eb      	cbz	r3, 8009b66 <_strtod_l+0x8e6>
 8009b2a:	4b2d      	ldr	r3, [pc, #180]	; (8009be0 <_strtod_l+0x960>)
 8009b2c:	403b      	ands	r3, r7
 8009b2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b32:	f04f 32ff 	mov.w	r2, #4294967295
 8009b36:	d819      	bhi.n	8009b6c <_strtod_l+0x8ec>
 8009b38:	0d1b      	lsrs	r3, r3, #20
 8009b3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b42:	4299      	cmp	r1, r3
 8009b44:	d117      	bne.n	8009b76 <_strtod_l+0x8f6>
 8009b46:	4b29      	ldr	r3, [pc, #164]	; (8009bec <_strtod_l+0x96c>)
 8009b48:	429f      	cmp	r7, r3
 8009b4a:	d102      	bne.n	8009b52 <_strtod_l+0x8d2>
 8009b4c:	3101      	adds	r1, #1
 8009b4e:	f43f addf 	beq.w	8009710 <_strtod_l+0x490>
 8009b52:	4b23      	ldr	r3, [pc, #140]	; (8009be0 <_strtod_l+0x960>)
 8009b54:	403b      	ands	r3, r7
 8009b56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009b5a:	f04f 0a00 	mov.w	sl, #0
 8009b5e:	9b04      	ldr	r3, [sp, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1a4      	bne.n	8009aae <_strtod_l+0x82e>
 8009b64:	e5de      	b.n	8009724 <_strtod_l+0x4a4>
 8009b66:	f04f 33ff 	mov.w	r3, #4294967295
 8009b6a:	e7ea      	b.n	8009b42 <_strtod_l+0x8c2>
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	e7e8      	b.n	8009b42 <_strtod_l+0x8c2>
 8009b70:	ea53 030a 	orrs.w	r3, r3, sl
 8009b74:	d08c      	beq.n	8009a90 <_strtod_l+0x810>
 8009b76:	9b08      	ldr	r3, [sp, #32]
 8009b78:	b1db      	cbz	r3, 8009bb2 <_strtod_l+0x932>
 8009b7a:	423b      	tst	r3, r7
 8009b7c:	d0ef      	beq.n	8009b5e <_strtod_l+0x8de>
 8009b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b80:	9a04      	ldr	r2, [sp, #16]
 8009b82:	4650      	mov	r0, sl
 8009b84:	4659      	mov	r1, fp
 8009b86:	b1c3      	cbz	r3, 8009bba <_strtod_l+0x93a>
 8009b88:	f7ff fb5c 	bl	8009244 <sulp>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	ec51 0b18 	vmov	r0, r1, d8
 8009b94:	f7f6 fba2 	bl	80002dc <__adddf3>
 8009b98:	4682      	mov	sl, r0
 8009b9a:	468b      	mov	fp, r1
 8009b9c:	e7df      	b.n	8009b5e <_strtod_l+0x8de>
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009ba4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009ba8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009bac:	f04f 3aff 	mov.w	sl, #4294967295
 8009bb0:	e7d5      	b.n	8009b5e <_strtod_l+0x8de>
 8009bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bb4:	ea13 0f0a 	tst.w	r3, sl
 8009bb8:	e7e0      	b.n	8009b7c <_strtod_l+0x8fc>
 8009bba:	f7ff fb43 	bl	8009244 <sulp>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	ec51 0b18 	vmov	r0, r1, d8
 8009bc6:	f7f6 fb87 	bl	80002d8 <__aeabi_dsub>
 8009bca:	2200      	movs	r2, #0
 8009bcc:	2300      	movs	r3, #0
 8009bce:	4682      	mov	sl, r0
 8009bd0:	468b      	mov	fp, r1
 8009bd2:	f7f6 ffa1 	bl	8000b18 <__aeabi_dcmpeq>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d0c1      	beq.n	8009b5e <_strtod_l+0x8de>
 8009bda:	e611      	b.n	8009800 <_strtod_l+0x580>
 8009bdc:	fffffc02 	.word	0xfffffc02
 8009be0:	7ff00000 	.word	0x7ff00000
 8009be4:	39500000 	.word	0x39500000
 8009be8:	000fffff 	.word	0x000fffff
 8009bec:	7fefffff 	.word	0x7fefffff
 8009bf0:	0800cee0 	.word	0x0800cee0
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f002 f92a 	bl	800be50 <__ratio>
 8009bfc:	ec59 8b10 	vmov	r8, r9, d0
 8009c00:	ee10 0a10 	vmov	r0, s0
 8009c04:	2200      	movs	r2, #0
 8009c06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	f7f6 ff98 	bl	8000b40 <__aeabi_dcmple>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d07a      	beq.n	8009d0a <_strtod_l+0xa8a>
 8009c14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d04a      	beq.n	8009cb0 <_strtod_l+0xa30>
 8009c1a:	4b95      	ldr	r3, [pc, #596]	; (8009e70 <_strtod_l+0xbf0>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009e70 <_strtod_l+0xbf0>
 8009c26:	f04f 0800 	mov.w	r8, #0
 8009c2a:	4b92      	ldr	r3, [pc, #584]	; (8009e74 <_strtod_l+0xbf4>)
 8009c2c:	403b      	ands	r3, r7
 8009c2e:	930d      	str	r3, [sp, #52]	; 0x34
 8009c30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c32:	4b91      	ldr	r3, [pc, #580]	; (8009e78 <_strtod_l+0xbf8>)
 8009c34:	429a      	cmp	r2, r3
 8009c36:	f040 80b0 	bne.w	8009d9a <_strtod_l+0xb1a>
 8009c3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009c42:	ec4b ab10 	vmov	d0, sl, fp
 8009c46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c4a:	f002 f829 	bl	800bca0 <__ulp>
 8009c4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c52:	ec53 2b10 	vmov	r2, r3, d0
 8009c56:	f7f6 fcf7 	bl	8000648 <__aeabi_dmul>
 8009c5a:	4652      	mov	r2, sl
 8009c5c:	465b      	mov	r3, fp
 8009c5e:	f7f6 fb3d 	bl	80002dc <__adddf3>
 8009c62:	460b      	mov	r3, r1
 8009c64:	4983      	ldr	r1, [pc, #524]	; (8009e74 <_strtod_l+0xbf4>)
 8009c66:	4a85      	ldr	r2, [pc, #532]	; (8009e7c <_strtod_l+0xbfc>)
 8009c68:	4019      	ands	r1, r3
 8009c6a:	4291      	cmp	r1, r2
 8009c6c:	4682      	mov	sl, r0
 8009c6e:	d960      	bls.n	8009d32 <_strtod_l+0xab2>
 8009c70:	ee18 3a90 	vmov	r3, s17
 8009c74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d104      	bne.n	8009c86 <_strtod_l+0xa06>
 8009c7c:	ee18 3a10 	vmov	r3, s16
 8009c80:	3301      	adds	r3, #1
 8009c82:	f43f ad45 	beq.w	8009710 <_strtod_l+0x490>
 8009c86:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009e88 <_strtod_l+0xc08>
 8009c8a:	f04f 3aff 	mov.w	sl, #4294967295
 8009c8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c90:	4620      	mov	r0, r4
 8009c92:	f001 fcd3 	bl	800b63c <_Bfree>
 8009c96:	9905      	ldr	r1, [sp, #20]
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f001 fccf 	bl	800b63c <_Bfree>
 8009c9e:	4631      	mov	r1, r6
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f001 fccb 	bl	800b63c <_Bfree>
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f001 fcc7 	bl	800b63c <_Bfree>
 8009cae:	e61a      	b.n	80098e6 <_strtod_l+0x666>
 8009cb0:	f1ba 0f00 	cmp.w	sl, #0
 8009cb4:	d11b      	bne.n	8009cee <_strtod_l+0xa6e>
 8009cb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cba:	b9f3      	cbnz	r3, 8009cfa <_strtod_l+0xa7a>
 8009cbc:	4b6c      	ldr	r3, [pc, #432]	; (8009e70 <_strtod_l+0xbf0>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	f7f6 ff32 	bl	8000b2c <__aeabi_dcmplt>
 8009cc8:	b9d0      	cbnz	r0, 8009d00 <_strtod_l+0xa80>
 8009cca:	4640      	mov	r0, r8
 8009ccc:	4649      	mov	r1, r9
 8009cce:	4b6c      	ldr	r3, [pc, #432]	; (8009e80 <_strtod_l+0xc00>)
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f7f6 fcb9 	bl	8000648 <__aeabi_dmul>
 8009cd6:	4680      	mov	r8, r0
 8009cd8:	4689      	mov	r9, r1
 8009cda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009cde:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009ce2:	9315      	str	r3, [sp, #84]	; 0x54
 8009ce4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009ce8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009cec:	e79d      	b.n	8009c2a <_strtod_l+0x9aa>
 8009cee:	f1ba 0f01 	cmp.w	sl, #1
 8009cf2:	d102      	bne.n	8009cfa <_strtod_l+0xa7a>
 8009cf4:	2f00      	cmp	r7, #0
 8009cf6:	f43f ad83 	beq.w	8009800 <_strtod_l+0x580>
 8009cfa:	4b62      	ldr	r3, [pc, #392]	; (8009e84 <_strtod_l+0xc04>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	e78e      	b.n	8009c1e <_strtod_l+0x99e>
 8009d00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009e80 <_strtod_l+0xc00>
 8009d04:	f04f 0800 	mov.w	r8, #0
 8009d08:	e7e7      	b.n	8009cda <_strtod_l+0xa5a>
 8009d0a:	4b5d      	ldr	r3, [pc, #372]	; (8009e80 <_strtod_l+0xc00>)
 8009d0c:	4640      	mov	r0, r8
 8009d0e:	4649      	mov	r1, r9
 8009d10:	2200      	movs	r2, #0
 8009d12:	f7f6 fc99 	bl	8000648 <__aeabi_dmul>
 8009d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d18:	4680      	mov	r8, r0
 8009d1a:	4689      	mov	r9, r1
 8009d1c:	b933      	cbnz	r3, 8009d2c <_strtod_l+0xaac>
 8009d1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d22:	900e      	str	r0, [sp, #56]	; 0x38
 8009d24:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009d2a:	e7dd      	b.n	8009ce8 <_strtod_l+0xa68>
 8009d2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009d30:	e7f9      	b.n	8009d26 <_strtod_l+0xaa6>
 8009d32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009d36:	9b04      	ldr	r3, [sp, #16]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1a8      	bne.n	8009c8e <_strtod_l+0xa0e>
 8009d3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d42:	0d1b      	lsrs	r3, r3, #20
 8009d44:	051b      	lsls	r3, r3, #20
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d1a1      	bne.n	8009c8e <_strtod_l+0xa0e>
 8009d4a:	4640      	mov	r0, r8
 8009d4c:	4649      	mov	r1, r9
 8009d4e:	f7f6 ffdb 	bl	8000d08 <__aeabi_d2lz>
 8009d52:	f7f6 fc4b 	bl	80005ec <__aeabi_l2d>
 8009d56:	4602      	mov	r2, r0
 8009d58:	460b      	mov	r3, r1
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	f7f6 fabb 	bl	80002d8 <__aeabi_dsub>
 8009d62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d68:	ea43 030a 	orr.w	r3, r3, sl
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	4680      	mov	r8, r0
 8009d70:	4689      	mov	r9, r1
 8009d72:	d055      	beq.n	8009e20 <_strtod_l+0xba0>
 8009d74:	a336      	add	r3, pc, #216	; (adr r3, 8009e50 <_strtod_l+0xbd0>)
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	f7f6 fed7 	bl	8000b2c <__aeabi_dcmplt>
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	f47f acd0 	bne.w	8009724 <_strtod_l+0x4a4>
 8009d84:	a334      	add	r3, pc, #208	; (adr r3, 8009e58 <_strtod_l+0xbd8>)
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	4640      	mov	r0, r8
 8009d8c:	4649      	mov	r1, r9
 8009d8e:	f7f6 feeb 	bl	8000b68 <__aeabi_dcmpgt>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	f43f af7b 	beq.w	8009c8e <_strtod_l+0xa0e>
 8009d98:	e4c4      	b.n	8009724 <_strtod_l+0x4a4>
 8009d9a:	9b04      	ldr	r3, [sp, #16]
 8009d9c:	b333      	cbz	r3, 8009dec <_strtod_l+0xb6c>
 8009d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009da0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009da4:	d822      	bhi.n	8009dec <_strtod_l+0xb6c>
 8009da6:	a32e      	add	r3, pc, #184	; (adr r3, 8009e60 <_strtod_l+0xbe0>)
 8009da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dac:	4640      	mov	r0, r8
 8009dae:	4649      	mov	r1, r9
 8009db0:	f7f6 fec6 	bl	8000b40 <__aeabi_dcmple>
 8009db4:	b1a0      	cbz	r0, 8009de0 <_strtod_l+0xb60>
 8009db6:	4649      	mov	r1, r9
 8009db8:	4640      	mov	r0, r8
 8009dba:	f7f6 ff1d 	bl	8000bf8 <__aeabi_d2uiz>
 8009dbe:	2801      	cmp	r0, #1
 8009dc0:	bf38      	it	cc
 8009dc2:	2001      	movcc	r0, #1
 8009dc4:	f7f6 fbc6 	bl	8000554 <__aeabi_ui2d>
 8009dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dca:	4680      	mov	r8, r0
 8009dcc:	4689      	mov	r9, r1
 8009dce:	bb23      	cbnz	r3, 8009e1a <_strtod_l+0xb9a>
 8009dd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dd4:	9010      	str	r0, [sp, #64]	; 0x40
 8009dd6:	9311      	str	r3, [sp, #68]	; 0x44
 8009dd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ddc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009de2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009de4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009de8:	1a9b      	subs	r3, r3, r2
 8009dea:	9309      	str	r3, [sp, #36]	; 0x24
 8009dec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009df0:	eeb0 0a48 	vmov.f32	s0, s16
 8009df4:	eef0 0a68 	vmov.f32	s1, s17
 8009df8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009dfc:	f001 ff50 	bl	800bca0 <__ulp>
 8009e00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e04:	ec53 2b10 	vmov	r2, r3, d0
 8009e08:	f7f6 fc1e 	bl	8000648 <__aeabi_dmul>
 8009e0c:	ec53 2b18 	vmov	r2, r3, d8
 8009e10:	f7f6 fa64 	bl	80002dc <__adddf3>
 8009e14:	4682      	mov	sl, r0
 8009e16:	468b      	mov	fp, r1
 8009e18:	e78d      	b.n	8009d36 <_strtod_l+0xab6>
 8009e1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009e1e:	e7db      	b.n	8009dd8 <_strtod_l+0xb58>
 8009e20:	a311      	add	r3, pc, #68	; (adr r3, 8009e68 <_strtod_l+0xbe8>)
 8009e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e26:	f7f6 fe81 	bl	8000b2c <__aeabi_dcmplt>
 8009e2a:	e7b2      	b.n	8009d92 <_strtod_l+0xb12>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e34:	6013      	str	r3, [r2, #0]
 8009e36:	f7ff ba6b 	b.w	8009310 <_strtod_l+0x90>
 8009e3a:	2a65      	cmp	r2, #101	; 0x65
 8009e3c:	f43f ab5f 	beq.w	80094fe <_strtod_l+0x27e>
 8009e40:	2a45      	cmp	r2, #69	; 0x45
 8009e42:	f43f ab5c 	beq.w	80094fe <_strtod_l+0x27e>
 8009e46:	2301      	movs	r3, #1
 8009e48:	f7ff bb94 	b.w	8009574 <_strtod_l+0x2f4>
 8009e4c:	f3af 8000 	nop.w
 8009e50:	94a03595 	.word	0x94a03595
 8009e54:	3fdfffff 	.word	0x3fdfffff
 8009e58:	35afe535 	.word	0x35afe535
 8009e5c:	3fe00000 	.word	0x3fe00000
 8009e60:	ffc00000 	.word	0xffc00000
 8009e64:	41dfffff 	.word	0x41dfffff
 8009e68:	94a03595 	.word	0x94a03595
 8009e6c:	3fcfffff 	.word	0x3fcfffff
 8009e70:	3ff00000 	.word	0x3ff00000
 8009e74:	7ff00000 	.word	0x7ff00000
 8009e78:	7fe00000 	.word	0x7fe00000
 8009e7c:	7c9fffff 	.word	0x7c9fffff
 8009e80:	3fe00000 	.word	0x3fe00000
 8009e84:	bff00000 	.word	0xbff00000
 8009e88:	7fefffff 	.word	0x7fefffff

08009e8c <_strtod_r>:
 8009e8c:	4b01      	ldr	r3, [pc, #4]	; (8009e94 <_strtod_r+0x8>)
 8009e8e:	f7ff b9f7 	b.w	8009280 <_strtod_l>
 8009e92:	bf00      	nop
 8009e94:	20000074 	.word	0x20000074

08009e98 <_strtol_l.constprop.0>:
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e9e:	d001      	beq.n	8009ea4 <_strtol_l.constprop.0+0xc>
 8009ea0:	2b24      	cmp	r3, #36	; 0x24
 8009ea2:	d906      	bls.n	8009eb2 <_strtol_l.constprop.0+0x1a>
 8009ea4:	f7fe fae4 	bl	8008470 <__errno>
 8009ea8:	2316      	movs	r3, #22
 8009eaa:	6003      	str	r3, [r0, #0]
 8009eac:	2000      	movs	r0, #0
 8009eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009f98 <_strtol_l.constprop.0+0x100>
 8009eb6:	460d      	mov	r5, r1
 8009eb8:	462e      	mov	r6, r5
 8009eba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ebe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009ec2:	f017 0708 	ands.w	r7, r7, #8
 8009ec6:	d1f7      	bne.n	8009eb8 <_strtol_l.constprop.0+0x20>
 8009ec8:	2c2d      	cmp	r4, #45	; 0x2d
 8009eca:	d132      	bne.n	8009f32 <_strtol_l.constprop.0+0x9a>
 8009ecc:	782c      	ldrb	r4, [r5, #0]
 8009ece:	2701      	movs	r7, #1
 8009ed0:	1cb5      	adds	r5, r6, #2
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d05b      	beq.n	8009f8e <_strtol_l.constprop.0+0xf6>
 8009ed6:	2b10      	cmp	r3, #16
 8009ed8:	d109      	bne.n	8009eee <_strtol_l.constprop.0+0x56>
 8009eda:	2c30      	cmp	r4, #48	; 0x30
 8009edc:	d107      	bne.n	8009eee <_strtol_l.constprop.0+0x56>
 8009ede:	782c      	ldrb	r4, [r5, #0]
 8009ee0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009ee4:	2c58      	cmp	r4, #88	; 0x58
 8009ee6:	d14d      	bne.n	8009f84 <_strtol_l.constprop.0+0xec>
 8009ee8:	786c      	ldrb	r4, [r5, #1]
 8009eea:	2310      	movs	r3, #16
 8009eec:	3502      	adds	r5, #2
 8009eee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009ef2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ef6:	f04f 0c00 	mov.w	ip, #0
 8009efa:	fbb8 f9f3 	udiv	r9, r8, r3
 8009efe:	4666      	mov	r6, ip
 8009f00:	fb03 8a19 	mls	sl, r3, r9, r8
 8009f04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009f08:	f1be 0f09 	cmp.w	lr, #9
 8009f0c:	d816      	bhi.n	8009f3c <_strtol_l.constprop.0+0xa4>
 8009f0e:	4674      	mov	r4, lr
 8009f10:	42a3      	cmp	r3, r4
 8009f12:	dd24      	ble.n	8009f5e <_strtol_l.constprop.0+0xc6>
 8009f14:	f1bc 0f00 	cmp.w	ip, #0
 8009f18:	db1e      	blt.n	8009f58 <_strtol_l.constprop.0+0xc0>
 8009f1a:	45b1      	cmp	r9, r6
 8009f1c:	d31c      	bcc.n	8009f58 <_strtol_l.constprop.0+0xc0>
 8009f1e:	d101      	bne.n	8009f24 <_strtol_l.constprop.0+0x8c>
 8009f20:	45a2      	cmp	sl, r4
 8009f22:	db19      	blt.n	8009f58 <_strtol_l.constprop.0+0xc0>
 8009f24:	fb06 4603 	mla	r6, r6, r3, r4
 8009f28:	f04f 0c01 	mov.w	ip, #1
 8009f2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f30:	e7e8      	b.n	8009f04 <_strtol_l.constprop.0+0x6c>
 8009f32:	2c2b      	cmp	r4, #43	; 0x2b
 8009f34:	bf04      	itt	eq
 8009f36:	782c      	ldrbeq	r4, [r5, #0]
 8009f38:	1cb5      	addeq	r5, r6, #2
 8009f3a:	e7ca      	b.n	8009ed2 <_strtol_l.constprop.0+0x3a>
 8009f3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009f40:	f1be 0f19 	cmp.w	lr, #25
 8009f44:	d801      	bhi.n	8009f4a <_strtol_l.constprop.0+0xb2>
 8009f46:	3c37      	subs	r4, #55	; 0x37
 8009f48:	e7e2      	b.n	8009f10 <_strtol_l.constprop.0+0x78>
 8009f4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009f4e:	f1be 0f19 	cmp.w	lr, #25
 8009f52:	d804      	bhi.n	8009f5e <_strtol_l.constprop.0+0xc6>
 8009f54:	3c57      	subs	r4, #87	; 0x57
 8009f56:	e7db      	b.n	8009f10 <_strtol_l.constprop.0+0x78>
 8009f58:	f04f 3cff 	mov.w	ip, #4294967295
 8009f5c:	e7e6      	b.n	8009f2c <_strtol_l.constprop.0+0x94>
 8009f5e:	f1bc 0f00 	cmp.w	ip, #0
 8009f62:	da05      	bge.n	8009f70 <_strtol_l.constprop.0+0xd8>
 8009f64:	2322      	movs	r3, #34	; 0x22
 8009f66:	6003      	str	r3, [r0, #0]
 8009f68:	4646      	mov	r6, r8
 8009f6a:	b942      	cbnz	r2, 8009f7e <_strtol_l.constprop.0+0xe6>
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	e79e      	b.n	8009eae <_strtol_l.constprop.0+0x16>
 8009f70:	b107      	cbz	r7, 8009f74 <_strtol_l.constprop.0+0xdc>
 8009f72:	4276      	negs	r6, r6
 8009f74:	2a00      	cmp	r2, #0
 8009f76:	d0f9      	beq.n	8009f6c <_strtol_l.constprop.0+0xd4>
 8009f78:	f1bc 0f00 	cmp.w	ip, #0
 8009f7c:	d000      	beq.n	8009f80 <_strtol_l.constprop.0+0xe8>
 8009f7e:	1e69      	subs	r1, r5, #1
 8009f80:	6011      	str	r1, [r2, #0]
 8009f82:	e7f3      	b.n	8009f6c <_strtol_l.constprop.0+0xd4>
 8009f84:	2430      	movs	r4, #48	; 0x30
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1b1      	bne.n	8009eee <_strtol_l.constprop.0+0x56>
 8009f8a:	2308      	movs	r3, #8
 8009f8c:	e7af      	b.n	8009eee <_strtol_l.constprop.0+0x56>
 8009f8e:	2c30      	cmp	r4, #48	; 0x30
 8009f90:	d0a5      	beq.n	8009ede <_strtol_l.constprop.0+0x46>
 8009f92:	230a      	movs	r3, #10
 8009f94:	e7ab      	b.n	8009eee <_strtol_l.constprop.0+0x56>
 8009f96:	bf00      	nop
 8009f98:	0800cf09 	.word	0x0800cf09

08009f9c <_strtol_r>:
 8009f9c:	f7ff bf7c 	b.w	8009e98 <_strtol_l.constprop.0>

08009fa0 <quorem>:
 8009fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa4:	6903      	ldr	r3, [r0, #16]
 8009fa6:	690c      	ldr	r4, [r1, #16]
 8009fa8:	42a3      	cmp	r3, r4
 8009faa:	4607      	mov	r7, r0
 8009fac:	f2c0 8081 	blt.w	800a0b2 <quorem+0x112>
 8009fb0:	3c01      	subs	r4, #1
 8009fb2:	f101 0814 	add.w	r8, r1, #20
 8009fb6:	f100 0514 	add.w	r5, r0, #20
 8009fba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fbe:	9301      	str	r3, [sp, #4]
 8009fc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009fd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009fd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009fd8:	d331      	bcc.n	800a03e <quorem+0x9e>
 8009fda:	f04f 0e00 	mov.w	lr, #0
 8009fde:	4640      	mov	r0, r8
 8009fe0:	46ac      	mov	ip, r5
 8009fe2:	46f2      	mov	sl, lr
 8009fe4:	f850 2b04 	ldr.w	r2, [r0], #4
 8009fe8:	b293      	uxth	r3, r2
 8009fea:	fb06 e303 	mla	r3, r6, r3, lr
 8009fee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	ebaa 0303 	sub.w	r3, sl, r3
 8009ff8:	f8dc a000 	ldr.w	sl, [ip]
 8009ffc:	0c12      	lsrs	r2, r2, #16
 8009ffe:	fa13 f38a 	uxtah	r3, r3, sl
 800a002:	fb06 e202 	mla	r2, r6, r2, lr
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	9b00      	ldr	r3, [sp, #0]
 800a00a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a00e:	b292      	uxth	r2, r2
 800a010:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a014:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a018:	f8bd 3000 	ldrh.w	r3, [sp]
 800a01c:	4581      	cmp	r9, r0
 800a01e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a022:	f84c 3b04 	str.w	r3, [ip], #4
 800a026:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a02a:	d2db      	bcs.n	8009fe4 <quorem+0x44>
 800a02c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a030:	b92b      	cbnz	r3, 800a03e <quorem+0x9e>
 800a032:	9b01      	ldr	r3, [sp, #4]
 800a034:	3b04      	subs	r3, #4
 800a036:	429d      	cmp	r5, r3
 800a038:	461a      	mov	r2, r3
 800a03a:	d32e      	bcc.n	800a09a <quorem+0xfa>
 800a03c:	613c      	str	r4, [r7, #16]
 800a03e:	4638      	mov	r0, r7
 800a040:	f001 fd88 	bl	800bb54 <__mcmp>
 800a044:	2800      	cmp	r0, #0
 800a046:	db24      	blt.n	800a092 <quorem+0xf2>
 800a048:	3601      	adds	r6, #1
 800a04a:	4628      	mov	r0, r5
 800a04c:	f04f 0c00 	mov.w	ip, #0
 800a050:	f858 2b04 	ldr.w	r2, [r8], #4
 800a054:	f8d0 e000 	ldr.w	lr, [r0]
 800a058:	b293      	uxth	r3, r2
 800a05a:	ebac 0303 	sub.w	r3, ip, r3
 800a05e:	0c12      	lsrs	r2, r2, #16
 800a060:	fa13 f38e 	uxtah	r3, r3, lr
 800a064:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a068:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a072:	45c1      	cmp	r9, r8
 800a074:	f840 3b04 	str.w	r3, [r0], #4
 800a078:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a07c:	d2e8      	bcs.n	800a050 <quorem+0xb0>
 800a07e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a082:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a086:	b922      	cbnz	r2, 800a092 <quorem+0xf2>
 800a088:	3b04      	subs	r3, #4
 800a08a:	429d      	cmp	r5, r3
 800a08c:	461a      	mov	r2, r3
 800a08e:	d30a      	bcc.n	800a0a6 <quorem+0x106>
 800a090:	613c      	str	r4, [r7, #16]
 800a092:	4630      	mov	r0, r6
 800a094:	b003      	add	sp, #12
 800a096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09a:	6812      	ldr	r2, [r2, #0]
 800a09c:	3b04      	subs	r3, #4
 800a09e:	2a00      	cmp	r2, #0
 800a0a0:	d1cc      	bne.n	800a03c <quorem+0x9c>
 800a0a2:	3c01      	subs	r4, #1
 800a0a4:	e7c7      	b.n	800a036 <quorem+0x96>
 800a0a6:	6812      	ldr	r2, [r2, #0]
 800a0a8:	3b04      	subs	r3, #4
 800a0aa:	2a00      	cmp	r2, #0
 800a0ac:	d1f0      	bne.n	800a090 <quorem+0xf0>
 800a0ae:	3c01      	subs	r4, #1
 800a0b0:	e7eb      	b.n	800a08a <quorem+0xea>
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	e7ee      	b.n	800a094 <quorem+0xf4>
	...

0800a0b8 <_dtoa_r>:
 800a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0bc:	ed2d 8b04 	vpush	{d8-d9}
 800a0c0:	ec57 6b10 	vmov	r6, r7, d0
 800a0c4:	b093      	sub	sp, #76	; 0x4c
 800a0c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a0c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a0cc:	9106      	str	r1, [sp, #24]
 800a0ce:	ee10 aa10 	vmov	sl, s0
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a0d6:	930c      	str	r3, [sp, #48]	; 0x30
 800a0d8:	46bb      	mov	fp, r7
 800a0da:	b975      	cbnz	r5, 800a0fa <_dtoa_r+0x42>
 800a0dc:	2010      	movs	r0, #16
 800a0de:	f001 fa45 	bl	800b56c <malloc>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	6260      	str	r0, [r4, #36]	; 0x24
 800a0e6:	b920      	cbnz	r0, 800a0f2 <_dtoa_r+0x3a>
 800a0e8:	4ba7      	ldr	r3, [pc, #668]	; (800a388 <_dtoa_r+0x2d0>)
 800a0ea:	21ea      	movs	r1, #234	; 0xea
 800a0ec:	48a7      	ldr	r0, [pc, #668]	; (800a38c <_dtoa_r+0x2d4>)
 800a0ee:	f002 fc23 	bl	800c938 <__assert_func>
 800a0f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a0f6:	6005      	str	r5, [r0, #0]
 800a0f8:	60c5      	str	r5, [r0, #12]
 800a0fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0fc:	6819      	ldr	r1, [r3, #0]
 800a0fe:	b151      	cbz	r1, 800a116 <_dtoa_r+0x5e>
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	604a      	str	r2, [r1, #4]
 800a104:	2301      	movs	r3, #1
 800a106:	4093      	lsls	r3, r2
 800a108:	608b      	str	r3, [r1, #8]
 800a10a:	4620      	mov	r0, r4
 800a10c:	f001 fa96 	bl	800b63c <_Bfree>
 800a110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a112:	2200      	movs	r2, #0
 800a114:	601a      	str	r2, [r3, #0]
 800a116:	1e3b      	subs	r3, r7, #0
 800a118:	bfaa      	itet	ge
 800a11a:	2300      	movge	r3, #0
 800a11c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a120:	f8c8 3000 	strge.w	r3, [r8]
 800a124:	4b9a      	ldr	r3, [pc, #616]	; (800a390 <_dtoa_r+0x2d8>)
 800a126:	bfbc      	itt	lt
 800a128:	2201      	movlt	r2, #1
 800a12a:	f8c8 2000 	strlt.w	r2, [r8]
 800a12e:	ea33 030b 	bics.w	r3, r3, fp
 800a132:	d11b      	bne.n	800a16c <_dtoa_r+0xb4>
 800a134:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a136:	f242 730f 	movw	r3, #9999	; 0x270f
 800a13a:	6013      	str	r3, [r2, #0]
 800a13c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a140:	4333      	orrs	r3, r6
 800a142:	f000 8592 	beq.w	800ac6a <_dtoa_r+0xbb2>
 800a146:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a148:	b963      	cbnz	r3, 800a164 <_dtoa_r+0xac>
 800a14a:	4b92      	ldr	r3, [pc, #584]	; (800a394 <_dtoa_r+0x2dc>)
 800a14c:	e022      	b.n	800a194 <_dtoa_r+0xdc>
 800a14e:	4b92      	ldr	r3, [pc, #584]	; (800a398 <_dtoa_r+0x2e0>)
 800a150:	9301      	str	r3, [sp, #4]
 800a152:	3308      	adds	r3, #8
 800a154:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a156:	6013      	str	r3, [r2, #0]
 800a158:	9801      	ldr	r0, [sp, #4]
 800a15a:	b013      	add	sp, #76	; 0x4c
 800a15c:	ecbd 8b04 	vpop	{d8-d9}
 800a160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a164:	4b8b      	ldr	r3, [pc, #556]	; (800a394 <_dtoa_r+0x2dc>)
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	3303      	adds	r3, #3
 800a16a:	e7f3      	b.n	800a154 <_dtoa_r+0x9c>
 800a16c:	2200      	movs	r2, #0
 800a16e:	2300      	movs	r3, #0
 800a170:	4650      	mov	r0, sl
 800a172:	4659      	mov	r1, fp
 800a174:	f7f6 fcd0 	bl	8000b18 <__aeabi_dcmpeq>
 800a178:	ec4b ab19 	vmov	d9, sl, fp
 800a17c:	4680      	mov	r8, r0
 800a17e:	b158      	cbz	r0, 800a198 <_dtoa_r+0xe0>
 800a180:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a182:	2301      	movs	r3, #1
 800a184:	6013      	str	r3, [r2, #0]
 800a186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 856b 	beq.w	800ac64 <_dtoa_r+0xbac>
 800a18e:	4883      	ldr	r0, [pc, #524]	; (800a39c <_dtoa_r+0x2e4>)
 800a190:	6018      	str	r0, [r3, #0]
 800a192:	1e43      	subs	r3, r0, #1
 800a194:	9301      	str	r3, [sp, #4]
 800a196:	e7df      	b.n	800a158 <_dtoa_r+0xa0>
 800a198:	ec4b ab10 	vmov	d0, sl, fp
 800a19c:	aa10      	add	r2, sp, #64	; 0x40
 800a19e:	a911      	add	r1, sp, #68	; 0x44
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f001 fdf9 	bl	800bd98 <__d2b>
 800a1a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a1aa:	ee08 0a10 	vmov	s16, r0
 800a1ae:	2d00      	cmp	r5, #0
 800a1b0:	f000 8084 	beq.w	800a2bc <_dtoa_r+0x204>
 800a1b4:	ee19 3a90 	vmov	r3, s19
 800a1b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a1c0:	4656      	mov	r6, sl
 800a1c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a1c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a1ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a1ce:	4b74      	ldr	r3, [pc, #464]	; (800a3a0 <_dtoa_r+0x2e8>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	4639      	mov	r1, r7
 800a1d6:	f7f6 f87f 	bl	80002d8 <__aeabi_dsub>
 800a1da:	a365      	add	r3, pc, #404	; (adr r3, 800a370 <_dtoa_r+0x2b8>)
 800a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e0:	f7f6 fa32 	bl	8000648 <__aeabi_dmul>
 800a1e4:	a364      	add	r3, pc, #400	; (adr r3, 800a378 <_dtoa_r+0x2c0>)
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	f7f6 f877 	bl	80002dc <__adddf3>
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	460f      	mov	r7, r1
 800a1f4:	f7f6 f9be 	bl	8000574 <__aeabi_i2d>
 800a1f8:	a361      	add	r3, pc, #388	; (adr r3, 800a380 <_dtoa_r+0x2c8>)
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	f7f6 fa23 	bl	8000648 <__aeabi_dmul>
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	4630      	mov	r0, r6
 800a208:	4639      	mov	r1, r7
 800a20a:	f7f6 f867 	bl	80002dc <__adddf3>
 800a20e:	4606      	mov	r6, r0
 800a210:	460f      	mov	r7, r1
 800a212:	f7f6 fcc9 	bl	8000ba8 <__aeabi_d2iz>
 800a216:	2200      	movs	r2, #0
 800a218:	9000      	str	r0, [sp, #0]
 800a21a:	2300      	movs	r3, #0
 800a21c:	4630      	mov	r0, r6
 800a21e:	4639      	mov	r1, r7
 800a220:	f7f6 fc84 	bl	8000b2c <__aeabi_dcmplt>
 800a224:	b150      	cbz	r0, 800a23c <_dtoa_r+0x184>
 800a226:	9800      	ldr	r0, [sp, #0]
 800a228:	f7f6 f9a4 	bl	8000574 <__aeabi_i2d>
 800a22c:	4632      	mov	r2, r6
 800a22e:	463b      	mov	r3, r7
 800a230:	f7f6 fc72 	bl	8000b18 <__aeabi_dcmpeq>
 800a234:	b910      	cbnz	r0, 800a23c <_dtoa_r+0x184>
 800a236:	9b00      	ldr	r3, [sp, #0]
 800a238:	3b01      	subs	r3, #1
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	9b00      	ldr	r3, [sp, #0]
 800a23e:	2b16      	cmp	r3, #22
 800a240:	d85a      	bhi.n	800a2f8 <_dtoa_r+0x240>
 800a242:	9a00      	ldr	r2, [sp, #0]
 800a244:	4b57      	ldr	r3, [pc, #348]	; (800a3a4 <_dtoa_r+0x2ec>)
 800a246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24e:	ec51 0b19 	vmov	r0, r1, d9
 800a252:	f7f6 fc6b 	bl	8000b2c <__aeabi_dcmplt>
 800a256:	2800      	cmp	r0, #0
 800a258:	d050      	beq.n	800a2fc <_dtoa_r+0x244>
 800a25a:	9b00      	ldr	r3, [sp, #0]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	2300      	movs	r3, #0
 800a262:	930b      	str	r3, [sp, #44]	; 0x2c
 800a264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a266:	1b5d      	subs	r5, r3, r5
 800a268:	1e6b      	subs	r3, r5, #1
 800a26a:	9305      	str	r3, [sp, #20]
 800a26c:	bf45      	ittet	mi
 800a26e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a272:	9304      	strmi	r3, [sp, #16]
 800a274:	2300      	movpl	r3, #0
 800a276:	2300      	movmi	r3, #0
 800a278:	bf4c      	ite	mi
 800a27a:	9305      	strmi	r3, [sp, #20]
 800a27c:	9304      	strpl	r3, [sp, #16]
 800a27e:	9b00      	ldr	r3, [sp, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	db3d      	blt.n	800a300 <_dtoa_r+0x248>
 800a284:	9b05      	ldr	r3, [sp, #20]
 800a286:	9a00      	ldr	r2, [sp, #0]
 800a288:	920a      	str	r2, [sp, #40]	; 0x28
 800a28a:	4413      	add	r3, r2
 800a28c:	9305      	str	r3, [sp, #20]
 800a28e:	2300      	movs	r3, #0
 800a290:	9307      	str	r3, [sp, #28]
 800a292:	9b06      	ldr	r3, [sp, #24]
 800a294:	2b09      	cmp	r3, #9
 800a296:	f200 8089 	bhi.w	800a3ac <_dtoa_r+0x2f4>
 800a29a:	2b05      	cmp	r3, #5
 800a29c:	bfc4      	itt	gt
 800a29e:	3b04      	subgt	r3, #4
 800a2a0:	9306      	strgt	r3, [sp, #24]
 800a2a2:	9b06      	ldr	r3, [sp, #24]
 800a2a4:	f1a3 0302 	sub.w	r3, r3, #2
 800a2a8:	bfcc      	ite	gt
 800a2aa:	2500      	movgt	r5, #0
 800a2ac:	2501      	movle	r5, #1
 800a2ae:	2b03      	cmp	r3, #3
 800a2b0:	f200 8087 	bhi.w	800a3c2 <_dtoa_r+0x30a>
 800a2b4:	e8df f003 	tbb	[pc, r3]
 800a2b8:	59383a2d 	.word	0x59383a2d
 800a2bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a2c0:	441d      	add	r5, r3
 800a2c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a2c6:	2b20      	cmp	r3, #32
 800a2c8:	bfc1      	itttt	gt
 800a2ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a2ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a2d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a2d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a2da:	bfda      	itte	le
 800a2dc:	f1c3 0320 	rsble	r3, r3, #32
 800a2e0:	fa06 f003 	lslle.w	r0, r6, r3
 800a2e4:	4318      	orrgt	r0, r3
 800a2e6:	f7f6 f935 	bl	8000554 <__aeabi_ui2d>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a2f2:	3d01      	subs	r5, #1
 800a2f4:	930e      	str	r3, [sp, #56]	; 0x38
 800a2f6:	e76a      	b.n	800a1ce <_dtoa_r+0x116>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e7b2      	b.n	800a262 <_dtoa_r+0x1aa>
 800a2fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a2fe:	e7b1      	b.n	800a264 <_dtoa_r+0x1ac>
 800a300:	9b04      	ldr	r3, [sp, #16]
 800a302:	9a00      	ldr	r2, [sp, #0]
 800a304:	1a9b      	subs	r3, r3, r2
 800a306:	9304      	str	r3, [sp, #16]
 800a308:	4253      	negs	r3, r2
 800a30a:	9307      	str	r3, [sp, #28]
 800a30c:	2300      	movs	r3, #0
 800a30e:	930a      	str	r3, [sp, #40]	; 0x28
 800a310:	e7bf      	b.n	800a292 <_dtoa_r+0x1da>
 800a312:	2300      	movs	r3, #0
 800a314:	9308      	str	r3, [sp, #32]
 800a316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a318:	2b00      	cmp	r3, #0
 800a31a:	dc55      	bgt.n	800a3c8 <_dtoa_r+0x310>
 800a31c:	2301      	movs	r3, #1
 800a31e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a322:	461a      	mov	r2, r3
 800a324:	9209      	str	r2, [sp, #36]	; 0x24
 800a326:	e00c      	b.n	800a342 <_dtoa_r+0x28a>
 800a328:	2301      	movs	r3, #1
 800a32a:	e7f3      	b.n	800a314 <_dtoa_r+0x25c>
 800a32c:	2300      	movs	r3, #0
 800a32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a330:	9308      	str	r3, [sp, #32]
 800a332:	9b00      	ldr	r3, [sp, #0]
 800a334:	4413      	add	r3, r2
 800a336:	9302      	str	r3, [sp, #8]
 800a338:	3301      	adds	r3, #1
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	9303      	str	r3, [sp, #12]
 800a33e:	bfb8      	it	lt
 800a340:	2301      	movlt	r3, #1
 800a342:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a344:	2200      	movs	r2, #0
 800a346:	6042      	str	r2, [r0, #4]
 800a348:	2204      	movs	r2, #4
 800a34a:	f102 0614 	add.w	r6, r2, #20
 800a34e:	429e      	cmp	r6, r3
 800a350:	6841      	ldr	r1, [r0, #4]
 800a352:	d93d      	bls.n	800a3d0 <_dtoa_r+0x318>
 800a354:	4620      	mov	r0, r4
 800a356:	f001 f931 	bl	800b5bc <_Balloc>
 800a35a:	9001      	str	r0, [sp, #4]
 800a35c:	2800      	cmp	r0, #0
 800a35e:	d13b      	bne.n	800a3d8 <_dtoa_r+0x320>
 800a360:	4b11      	ldr	r3, [pc, #68]	; (800a3a8 <_dtoa_r+0x2f0>)
 800a362:	4602      	mov	r2, r0
 800a364:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a368:	e6c0      	b.n	800a0ec <_dtoa_r+0x34>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e7df      	b.n	800a32e <_dtoa_r+0x276>
 800a36e:	bf00      	nop
 800a370:	636f4361 	.word	0x636f4361
 800a374:	3fd287a7 	.word	0x3fd287a7
 800a378:	8b60c8b3 	.word	0x8b60c8b3
 800a37c:	3fc68a28 	.word	0x3fc68a28
 800a380:	509f79fb 	.word	0x509f79fb
 800a384:	3fd34413 	.word	0x3fd34413
 800a388:	0800d016 	.word	0x0800d016
 800a38c:	0800d02d 	.word	0x0800d02d
 800a390:	7ff00000 	.word	0x7ff00000
 800a394:	0800d012 	.word	0x0800d012
 800a398:	0800d009 	.word	0x0800d009
 800a39c:	0800ce8d 	.word	0x0800ce8d
 800a3a0:	3ff80000 	.word	0x3ff80000
 800a3a4:	0800d200 	.word	0x0800d200
 800a3a8:	0800d088 	.word	0x0800d088
 800a3ac:	2501      	movs	r5, #1
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	9306      	str	r3, [sp, #24]
 800a3b2:	9508      	str	r5, [sp, #32]
 800a3b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2312      	movs	r3, #18
 800a3c0:	e7b0      	b.n	800a324 <_dtoa_r+0x26c>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	9308      	str	r3, [sp, #32]
 800a3c6:	e7f5      	b.n	800a3b4 <_dtoa_r+0x2fc>
 800a3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a3ce:	e7b8      	b.n	800a342 <_dtoa_r+0x28a>
 800a3d0:	3101      	adds	r1, #1
 800a3d2:	6041      	str	r1, [r0, #4]
 800a3d4:	0052      	lsls	r2, r2, #1
 800a3d6:	e7b8      	b.n	800a34a <_dtoa_r+0x292>
 800a3d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3da:	9a01      	ldr	r2, [sp, #4]
 800a3dc:	601a      	str	r2, [r3, #0]
 800a3de:	9b03      	ldr	r3, [sp, #12]
 800a3e0:	2b0e      	cmp	r3, #14
 800a3e2:	f200 809d 	bhi.w	800a520 <_dtoa_r+0x468>
 800a3e6:	2d00      	cmp	r5, #0
 800a3e8:	f000 809a 	beq.w	800a520 <_dtoa_r+0x468>
 800a3ec:	9b00      	ldr	r3, [sp, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	dd32      	ble.n	800a458 <_dtoa_r+0x3a0>
 800a3f2:	4ab7      	ldr	r2, [pc, #732]	; (800a6d0 <_dtoa_r+0x618>)
 800a3f4:	f003 030f 	and.w	r3, r3, #15
 800a3f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a3fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a400:	9b00      	ldr	r3, [sp, #0]
 800a402:	05d8      	lsls	r0, r3, #23
 800a404:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a408:	d516      	bpl.n	800a438 <_dtoa_r+0x380>
 800a40a:	4bb2      	ldr	r3, [pc, #712]	; (800a6d4 <_dtoa_r+0x61c>)
 800a40c:	ec51 0b19 	vmov	r0, r1, d9
 800a410:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a414:	f7f6 fa42 	bl	800089c <__aeabi_ddiv>
 800a418:	f007 070f 	and.w	r7, r7, #15
 800a41c:	4682      	mov	sl, r0
 800a41e:	468b      	mov	fp, r1
 800a420:	2503      	movs	r5, #3
 800a422:	4eac      	ldr	r6, [pc, #688]	; (800a6d4 <_dtoa_r+0x61c>)
 800a424:	b957      	cbnz	r7, 800a43c <_dtoa_r+0x384>
 800a426:	4642      	mov	r2, r8
 800a428:	464b      	mov	r3, r9
 800a42a:	4650      	mov	r0, sl
 800a42c:	4659      	mov	r1, fp
 800a42e:	f7f6 fa35 	bl	800089c <__aeabi_ddiv>
 800a432:	4682      	mov	sl, r0
 800a434:	468b      	mov	fp, r1
 800a436:	e028      	b.n	800a48a <_dtoa_r+0x3d2>
 800a438:	2502      	movs	r5, #2
 800a43a:	e7f2      	b.n	800a422 <_dtoa_r+0x36a>
 800a43c:	07f9      	lsls	r1, r7, #31
 800a43e:	d508      	bpl.n	800a452 <_dtoa_r+0x39a>
 800a440:	4640      	mov	r0, r8
 800a442:	4649      	mov	r1, r9
 800a444:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a448:	f7f6 f8fe 	bl	8000648 <__aeabi_dmul>
 800a44c:	3501      	adds	r5, #1
 800a44e:	4680      	mov	r8, r0
 800a450:	4689      	mov	r9, r1
 800a452:	107f      	asrs	r7, r7, #1
 800a454:	3608      	adds	r6, #8
 800a456:	e7e5      	b.n	800a424 <_dtoa_r+0x36c>
 800a458:	f000 809b 	beq.w	800a592 <_dtoa_r+0x4da>
 800a45c:	9b00      	ldr	r3, [sp, #0]
 800a45e:	4f9d      	ldr	r7, [pc, #628]	; (800a6d4 <_dtoa_r+0x61c>)
 800a460:	425e      	negs	r6, r3
 800a462:	4b9b      	ldr	r3, [pc, #620]	; (800a6d0 <_dtoa_r+0x618>)
 800a464:	f006 020f 	and.w	r2, r6, #15
 800a468:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a470:	ec51 0b19 	vmov	r0, r1, d9
 800a474:	f7f6 f8e8 	bl	8000648 <__aeabi_dmul>
 800a478:	1136      	asrs	r6, r6, #4
 800a47a:	4682      	mov	sl, r0
 800a47c:	468b      	mov	fp, r1
 800a47e:	2300      	movs	r3, #0
 800a480:	2502      	movs	r5, #2
 800a482:	2e00      	cmp	r6, #0
 800a484:	d17a      	bne.n	800a57c <_dtoa_r+0x4c4>
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1d3      	bne.n	800a432 <_dtoa_r+0x37a>
 800a48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 8082 	beq.w	800a596 <_dtoa_r+0x4de>
 800a492:	4b91      	ldr	r3, [pc, #580]	; (800a6d8 <_dtoa_r+0x620>)
 800a494:	2200      	movs	r2, #0
 800a496:	4650      	mov	r0, sl
 800a498:	4659      	mov	r1, fp
 800a49a:	f7f6 fb47 	bl	8000b2c <__aeabi_dcmplt>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d079      	beq.n	800a596 <_dtoa_r+0x4de>
 800a4a2:	9b03      	ldr	r3, [sp, #12]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d076      	beq.n	800a596 <_dtoa_r+0x4de>
 800a4a8:	9b02      	ldr	r3, [sp, #8]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	dd36      	ble.n	800a51c <_dtoa_r+0x464>
 800a4ae:	9b00      	ldr	r3, [sp, #0]
 800a4b0:	4650      	mov	r0, sl
 800a4b2:	4659      	mov	r1, fp
 800a4b4:	1e5f      	subs	r7, r3, #1
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	4b88      	ldr	r3, [pc, #544]	; (800a6dc <_dtoa_r+0x624>)
 800a4ba:	f7f6 f8c5 	bl	8000648 <__aeabi_dmul>
 800a4be:	9e02      	ldr	r6, [sp, #8]
 800a4c0:	4682      	mov	sl, r0
 800a4c2:	468b      	mov	fp, r1
 800a4c4:	3501      	adds	r5, #1
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	f7f6 f854 	bl	8000574 <__aeabi_i2d>
 800a4cc:	4652      	mov	r2, sl
 800a4ce:	465b      	mov	r3, fp
 800a4d0:	f7f6 f8ba 	bl	8000648 <__aeabi_dmul>
 800a4d4:	4b82      	ldr	r3, [pc, #520]	; (800a6e0 <_dtoa_r+0x628>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f7f5 ff00 	bl	80002dc <__adddf3>
 800a4dc:	46d0      	mov	r8, sl
 800a4de:	46d9      	mov	r9, fp
 800a4e0:	4682      	mov	sl, r0
 800a4e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a4e6:	2e00      	cmp	r6, #0
 800a4e8:	d158      	bne.n	800a59c <_dtoa_r+0x4e4>
 800a4ea:	4b7e      	ldr	r3, [pc, #504]	; (800a6e4 <_dtoa_r+0x62c>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	f7f5 fef1 	bl	80002d8 <__aeabi_dsub>
 800a4f6:	4652      	mov	r2, sl
 800a4f8:	465b      	mov	r3, fp
 800a4fa:	4680      	mov	r8, r0
 800a4fc:	4689      	mov	r9, r1
 800a4fe:	f7f6 fb33 	bl	8000b68 <__aeabi_dcmpgt>
 800a502:	2800      	cmp	r0, #0
 800a504:	f040 8295 	bne.w	800aa32 <_dtoa_r+0x97a>
 800a508:	4652      	mov	r2, sl
 800a50a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a50e:	4640      	mov	r0, r8
 800a510:	4649      	mov	r1, r9
 800a512:	f7f6 fb0b 	bl	8000b2c <__aeabi_dcmplt>
 800a516:	2800      	cmp	r0, #0
 800a518:	f040 8289 	bne.w	800aa2e <_dtoa_r+0x976>
 800a51c:	ec5b ab19 	vmov	sl, fp, d9
 800a520:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a522:	2b00      	cmp	r3, #0
 800a524:	f2c0 8148 	blt.w	800a7b8 <_dtoa_r+0x700>
 800a528:	9a00      	ldr	r2, [sp, #0]
 800a52a:	2a0e      	cmp	r2, #14
 800a52c:	f300 8144 	bgt.w	800a7b8 <_dtoa_r+0x700>
 800a530:	4b67      	ldr	r3, [pc, #412]	; (800a6d0 <_dtoa_r+0x618>)
 800a532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a536:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f280 80d5 	bge.w	800a6ec <_dtoa_r+0x634>
 800a542:	9b03      	ldr	r3, [sp, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	f300 80d1 	bgt.w	800a6ec <_dtoa_r+0x634>
 800a54a:	f040 826f 	bne.w	800aa2c <_dtoa_r+0x974>
 800a54e:	4b65      	ldr	r3, [pc, #404]	; (800a6e4 <_dtoa_r+0x62c>)
 800a550:	2200      	movs	r2, #0
 800a552:	4640      	mov	r0, r8
 800a554:	4649      	mov	r1, r9
 800a556:	f7f6 f877 	bl	8000648 <__aeabi_dmul>
 800a55a:	4652      	mov	r2, sl
 800a55c:	465b      	mov	r3, fp
 800a55e:	f7f6 faf9 	bl	8000b54 <__aeabi_dcmpge>
 800a562:	9e03      	ldr	r6, [sp, #12]
 800a564:	4637      	mov	r7, r6
 800a566:	2800      	cmp	r0, #0
 800a568:	f040 8245 	bne.w	800a9f6 <_dtoa_r+0x93e>
 800a56c:	9d01      	ldr	r5, [sp, #4]
 800a56e:	2331      	movs	r3, #49	; 0x31
 800a570:	f805 3b01 	strb.w	r3, [r5], #1
 800a574:	9b00      	ldr	r3, [sp, #0]
 800a576:	3301      	adds	r3, #1
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	e240      	b.n	800a9fe <_dtoa_r+0x946>
 800a57c:	07f2      	lsls	r2, r6, #31
 800a57e:	d505      	bpl.n	800a58c <_dtoa_r+0x4d4>
 800a580:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a584:	f7f6 f860 	bl	8000648 <__aeabi_dmul>
 800a588:	3501      	adds	r5, #1
 800a58a:	2301      	movs	r3, #1
 800a58c:	1076      	asrs	r6, r6, #1
 800a58e:	3708      	adds	r7, #8
 800a590:	e777      	b.n	800a482 <_dtoa_r+0x3ca>
 800a592:	2502      	movs	r5, #2
 800a594:	e779      	b.n	800a48a <_dtoa_r+0x3d2>
 800a596:	9f00      	ldr	r7, [sp, #0]
 800a598:	9e03      	ldr	r6, [sp, #12]
 800a59a:	e794      	b.n	800a4c6 <_dtoa_r+0x40e>
 800a59c:	9901      	ldr	r1, [sp, #4]
 800a59e:	4b4c      	ldr	r3, [pc, #304]	; (800a6d0 <_dtoa_r+0x618>)
 800a5a0:	4431      	add	r1, r6
 800a5a2:	910d      	str	r1, [sp, #52]	; 0x34
 800a5a4:	9908      	ldr	r1, [sp, #32]
 800a5a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a5aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a5ae:	2900      	cmp	r1, #0
 800a5b0:	d043      	beq.n	800a63a <_dtoa_r+0x582>
 800a5b2:	494d      	ldr	r1, [pc, #308]	; (800a6e8 <_dtoa_r+0x630>)
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	f7f6 f971 	bl	800089c <__aeabi_ddiv>
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	465b      	mov	r3, fp
 800a5be:	f7f5 fe8b 	bl	80002d8 <__aeabi_dsub>
 800a5c2:	9d01      	ldr	r5, [sp, #4]
 800a5c4:	4682      	mov	sl, r0
 800a5c6:	468b      	mov	fp, r1
 800a5c8:	4649      	mov	r1, r9
 800a5ca:	4640      	mov	r0, r8
 800a5cc:	f7f6 faec 	bl	8000ba8 <__aeabi_d2iz>
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	f7f5 ffcf 	bl	8000574 <__aeabi_i2d>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4640      	mov	r0, r8
 800a5dc:	4649      	mov	r1, r9
 800a5de:	f7f5 fe7b 	bl	80002d8 <__aeabi_dsub>
 800a5e2:	3630      	adds	r6, #48	; 0x30
 800a5e4:	f805 6b01 	strb.w	r6, [r5], #1
 800a5e8:	4652      	mov	r2, sl
 800a5ea:	465b      	mov	r3, fp
 800a5ec:	4680      	mov	r8, r0
 800a5ee:	4689      	mov	r9, r1
 800a5f0:	f7f6 fa9c 	bl	8000b2c <__aeabi_dcmplt>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d163      	bne.n	800a6c0 <_dtoa_r+0x608>
 800a5f8:	4642      	mov	r2, r8
 800a5fa:	464b      	mov	r3, r9
 800a5fc:	4936      	ldr	r1, [pc, #216]	; (800a6d8 <_dtoa_r+0x620>)
 800a5fe:	2000      	movs	r0, #0
 800a600:	f7f5 fe6a 	bl	80002d8 <__aeabi_dsub>
 800a604:	4652      	mov	r2, sl
 800a606:	465b      	mov	r3, fp
 800a608:	f7f6 fa90 	bl	8000b2c <__aeabi_dcmplt>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	f040 80b5 	bne.w	800a77c <_dtoa_r+0x6c4>
 800a612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a614:	429d      	cmp	r5, r3
 800a616:	d081      	beq.n	800a51c <_dtoa_r+0x464>
 800a618:	4b30      	ldr	r3, [pc, #192]	; (800a6dc <_dtoa_r+0x624>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	4650      	mov	r0, sl
 800a61e:	4659      	mov	r1, fp
 800a620:	f7f6 f812 	bl	8000648 <__aeabi_dmul>
 800a624:	4b2d      	ldr	r3, [pc, #180]	; (800a6dc <_dtoa_r+0x624>)
 800a626:	4682      	mov	sl, r0
 800a628:	468b      	mov	fp, r1
 800a62a:	4640      	mov	r0, r8
 800a62c:	4649      	mov	r1, r9
 800a62e:	2200      	movs	r2, #0
 800a630:	f7f6 f80a 	bl	8000648 <__aeabi_dmul>
 800a634:	4680      	mov	r8, r0
 800a636:	4689      	mov	r9, r1
 800a638:	e7c6      	b.n	800a5c8 <_dtoa_r+0x510>
 800a63a:	4650      	mov	r0, sl
 800a63c:	4659      	mov	r1, fp
 800a63e:	f7f6 f803 	bl	8000648 <__aeabi_dmul>
 800a642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a644:	9d01      	ldr	r5, [sp, #4]
 800a646:	930f      	str	r3, [sp, #60]	; 0x3c
 800a648:	4682      	mov	sl, r0
 800a64a:	468b      	mov	fp, r1
 800a64c:	4649      	mov	r1, r9
 800a64e:	4640      	mov	r0, r8
 800a650:	f7f6 faaa 	bl	8000ba8 <__aeabi_d2iz>
 800a654:	4606      	mov	r6, r0
 800a656:	f7f5 ff8d 	bl	8000574 <__aeabi_i2d>
 800a65a:	3630      	adds	r6, #48	; 0x30
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	4640      	mov	r0, r8
 800a662:	4649      	mov	r1, r9
 800a664:	f7f5 fe38 	bl	80002d8 <__aeabi_dsub>
 800a668:	f805 6b01 	strb.w	r6, [r5], #1
 800a66c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a66e:	429d      	cmp	r5, r3
 800a670:	4680      	mov	r8, r0
 800a672:	4689      	mov	r9, r1
 800a674:	f04f 0200 	mov.w	r2, #0
 800a678:	d124      	bne.n	800a6c4 <_dtoa_r+0x60c>
 800a67a:	4b1b      	ldr	r3, [pc, #108]	; (800a6e8 <_dtoa_r+0x630>)
 800a67c:	4650      	mov	r0, sl
 800a67e:	4659      	mov	r1, fp
 800a680:	f7f5 fe2c 	bl	80002dc <__adddf3>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	4640      	mov	r0, r8
 800a68a:	4649      	mov	r1, r9
 800a68c:	f7f6 fa6c 	bl	8000b68 <__aeabi_dcmpgt>
 800a690:	2800      	cmp	r0, #0
 800a692:	d173      	bne.n	800a77c <_dtoa_r+0x6c4>
 800a694:	4652      	mov	r2, sl
 800a696:	465b      	mov	r3, fp
 800a698:	4913      	ldr	r1, [pc, #76]	; (800a6e8 <_dtoa_r+0x630>)
 800a69a:	2000      	movs	r0, #0
 800a69c:	f7f5 fe1c 	bl	80002d8 <__aeabi_dsub>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4640      	mov	r0, r8
 800a6a6:	4649      	mov	r1, r9
 800a6a8:	f7f6 fa40 	bl	8000b2c <__aeabi_dcmplt>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	f43f af35 	beq.w	800a51c <_dtoa_r+0x464>
 800a6b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a6b4:	1e6b      	subs	r3, r5, #1
 800a6b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6bc:	2b30      	cmp	r3, #48	; 0x30
 800a6be:	d0f8      	beq.n	800a6b2 <_dtoa_r+0x5fa>
 800a6c0:	9700      	str	r7, [sp, #0]
 800a6c2:	e049      	b.n	800a758 <_dtoa_r+0x6a0>
 800a6c4:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <_dtoa_r+0x624>)
 800a6c6:	f7f5 ffbf 	bl	8000648 <__aeabi_dmul>
 800a6ca:	4680      	mov	r8, r0
 800a6cc:	4689      	mov	r9, r1
 800a6ce:	e7bd      	b.n	800a64c <_dtoa_r+0x594>
 800a6d0:	0800d200 	.word	0x0800d200
 800a6d4:	0800d1d8 	.word	0x0800d1d8
 800a6d8:	3ff00000 	.word	0x3ff00000
 800a6dc:	40240000 	.word	0x40240000
 800a6e0:	401c0000 	.word	0x401c0000
 800a6e4:	40140000 	.word	0x40140000
 800a6e8:	3fe00000 	.word	0x3fe00000
 800a6ec:	9d01      	ldr	r5, [sp, #4]
 800a6ee:	4656      	mov	r6, sl
 800a6f0:	465f      	mov	r7, fp
 800a6f2:	4642      	mov	r2, r8
 800a6f4:	464b      	mov	r3, r9
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	4639      	mov	r1, r7
 800a6fa:	f7f6 f8cf 	bl	800089c <__aeabi_ddiv>
 800a6fe:	f7f6 fa53 	bl	8000ba8 <__aeabi_d2iz>
 800a702:	4682      	mov	sl, r0
 800a704:	f7f5 ff36 	bl	8000574 <__aeabi_i2d>
 800a708:	4642      	mov	r2, r8
 800a70a:	464b      	mov	r3, r9
 800a70c:	f7f5 ff9c 	bl	8000648 <__aeabi_dmul>
 800a710:	4602      	mov	r2, r0
 800a712:	460b      	mov	r3, r1
 800a714:	4630      	mov	r0, r6
 800a716:	4639      	mov	r1, r7
 800a718:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a71c:	f7f5 fddc 	bl	80002d8 <__aeabi_dsub>
 800a720:	f805 6b01 	strb.w	r6, [r5], #1
 800a724:	9e01      	ldr	r6, [sp, #4]
 800a726:	9f03      	ldr	r7, [sp, #12]
 800a728:	1bae      	subs	r6, r5, r6
 800a72a:	42b7      	cmp	r7, r6
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	d135      	bne.n	800a79e <_dtoa_r+0x6e6>
 800a732:	f7f5 fdd3 	bl	80002dc <__adddf3>
 800a736:	4642      	mov	r2, r8
 800a738:	464b      	mov	r3, r9
 800a73a:	4606      	mov	r6, r0
 800a73c:	460f      	mov	r7, r1
 800a73e:	f7f6 fa13 	bl	8000b68 <__aeabi_dcmpgt>
 800a742:	b9d0      	cbnz	r0, 800a77a <_dtoa_r+0x6c2>
 800a744:	4642      	mov	r2, r8
 800a746:	464b      	mov	r3, r9
 800a748:	4630      	mov	r0, r6
 800a74a:	4639      	mov	r1, r7
 800a74c:	f7f6 f9e4 	bl	8000b18 <__aeabi_dcmpeq>
 800a750:	b110      	cbz	r0, 800a758 <_dtoa_r+0x6a0>
 800a752:	f01a 0f01 	tst.w	sl, #1
 800a756:	d110      	bne.n	800a77a <_dtoa_r+0x6c2>
 800a758:	4620      	mov	r0, r4
 800a75a:	ee18 1a10 	vmov	r1, s16
 800a75e:	f000 ff6d 	bl	800b63c <_Bfree>
 800a762:	2300      	movs	r3, #0
 800a764:	9800      	ldr	r0, [sp, #0]
 800a766:	702b      	strb	r3, [r5, #0]
 800a768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a76a:	3001      	adds	r0, #1
 800a76c:	6018      	str	r0, [r3, #0]
 800a76e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a770:	2b00      	cmp	r3, #0
 800a772:	f43f acf1 	beq.w	800a158 <_dtoa_r+0xa0>
 800a776:	601d      	str	r5, [r3, #0]
 800a778:	e4ee      	b.n	800a158 <_dtoa_r+0xa0>
 800a77a:	9f00      	ldr	r7, [sp, #0]
 800a77c:	462b      	mov	r3, r5
 800a77e:	461d      	mov	r5, r3
 800a780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a784:	2a39      	cmp	r2, #57	; 0x39
 800a786:	d106      	bne.n	800a796 <_dtoa_r+0x6de>
 800a788:	9a01      	ldr	r2, [sp, #4]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d1f7      	bne.n	800a77e <_dtoa_r+0x6c6>
 800a78e:	9901      	ldr	r1, [sp, #4]
 800a790:	2230      	movs	r2, #48	; 0x30
 800a792:	3701      	adds	r7, #1
 800a794:	700a      	strb	r2, [r1, #0]
 800a796:	781a      	ldrb	r2, [r3, #0]
 800a798:	3201      	adds	r2, #1
 800a79a:	701a      	strb	r2, [r3, #0]
 800a79c:	e790      	b.n	800a6c0 <_dtoa_r+0x608>
 800a79e:	4ba6      	ldr	r3, [pc, #664]	; (800aa38 <_dtoa_r+0x980>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f7f5 ff51 	bl	8000648 <__aeabi_dmul>
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	4606      	mov	r6, r0
 800a7ac:	460f      	mov	r7, r1
 800a7ae:	f7f6 f9b3 	bl	8000b18 <__aeabi_dcmpeq>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d09d      	beq.n	800a6f2 <_dtoa_r+0x63a>
 800a7b6:	e7cf      	b.n	800a758 <_dtoa_r+0x6a0>
 800a7b8:	9a08      	ldr	r2, [sp, #32]
 800a7ba:	2a00      	cmp	r2, #0
 800a7bc:	f000 80d7 	beq.w	800a96e <_dtoa_r+0x8b6>
 800a7c0:	9a06      	ldr	r2, [sp, #24]
 800a7c2:	2a01      	cmp	r2, #1
 800a7c4:	f300 80ba 	bgt.w	800a93c <_dtoa_r+0x884>
 800a7c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7ca:	2a00      	cmp	r2, #0
 800a7cc:	f000 80b2 	beq.w	800a934 <_dtoa_r+0x87c>
 800a7d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a7d4:	9e07      	ldr	r6, [sp, #28]
 800a7d6:	9d04      	ldr	r5, [sp, #16]
 800a7d8:	9a04      	ldr	r2, [sp, #16]
 800a7da:	441a      	add	r2, r3
 800a7dc:	9204      	str	r2, [sp, #16]
 800a7de:	9a05      	ldr	r2, [sp, #20]
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	441a      	add	r2, r3
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	9205      	str	r2, [sp, #20]
 800a7e8:	f001 f82a 	bl	800b840 <__i2b>
 800a7ec:	4607      	mov	r7, r0
 800a7ee:	2d00      	cmp	r5, #0
 800a7f0:	dd0c      	ble.n	800a80c <_dtoa_r+0x754>
 800a7f2:	9b05      	ldr	r3, [sp, #20]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	dd09      	ble.n	800a80c <_dtoa_r+0x754>
 800a7f8:	42ab      	cmp	r3, r5
 800a7fa:	9a04      	ldr	r2, [sp, #16]
 800a7fc:	bfa8      	it	ge
 800a7fe:	462b      	movge	r3, r5
 800a800:	1ad2      	subs	r2, r2, r3
 800a802:	9204      	str	r2, [sp, #16]
 800a804:	9a05      	ldr	r2, [sp, #20]
 800a806:	1aed      	subs	r5, r5, r3
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	9305      	str	r3, [sp, #20]
 800a80c:	9b07      	ldr	r3, [sp, #28]
 800a80e:	b31b      	cbz	r3, 800a858 <_dtoa_r+0x7a0>
 800a810:	9b08      	ldr	r3, [sp, #32]
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 80af 	beq.w	800a976 <_dtoa_r+0x8be>
 800a818:	2e00      	cmp	r6, #0
 800a81a:	dd13      	ble.n	800a844 <_dtoa_r+0x78c>
 800a81c:	4639      	mov	r1, r7
 800a81e:	4632      	mov	r2, r6
 800a820:	4620      	mov	r0, r4
 800a822:	f001 f8cd 	bl	800b9c0 <__pow5mult>
 800a826:	ee18 2a10 	vmov	r2, s16
 800a82a:	4601      	mov	r1, r0
 800a82c:	4607      	mov	r7, r0
 800a82e:	4620      	mov	r0, r4
 800a830:	f001 f81c 	bl	800b86c <__multiply>
 800a834:	ee18 1a10 	vmov	r1, s16
 800a838:	4680      	mov	r8, r0
 800a83a:	4620      	mov	r0, r4
 800a83c:	f000 fefe 	bl	800b63c <_Bfree>
 800a840:	ee08 8a10 	vmov	s16, r8
 800a844:	9b07      	ldr	r3, [sp, #28]
 800a846:	1b9a      	subs	r2, r3, r6
 800a848:	d006      	beq.n	800a858 <_dtoa_r+0x7a0>
 800a84a:	ee18 1a10 	vmov	r1, s16
 800a84e:	4620      	mov	r0, r4
 800a850:	f001 f8b6 	bl	800b9c0 <__pow5mult>
 800a854:	ee08 0a10 	vmov	s16, r0
 800a858:	2101      	movs	r1, #1
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 fff0 	bl	800b840 <__i2b>
 800a860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a862:	2b00      	cmp	r3, #0
 800a864:	4606      	mov	r6, r0
 800a866:	f340 8088 	ble.w	800a97a <_dtoa_r+0x8c2>
 800a86a:	461a      	mov	r2, r3
 800a86c:	4601      	mov	r1, r0
 800a86e:	4620      	mov	r0, r4
 800a870:	f001 f8a6 	bl	800b9c0 <__pow5mult>
 800a874:	9b06      	ldr	r3, [sp, #24]
 800a876:	2b01      	cmp	r3, #1
 800a878:	4606      	mov	r6, r0
 800a87a:	f340 8081 	ble.w	800a980 <_dtoa_r+0x8c8>
 800a87e:	f04f 0800 	mov.w	r8, #0
 800a882:	6933      	ldr	r3, [r6, #16]
 800a884:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a888:	6918      	ldr	r0, [r3, #16]
 800a88a:	f000 ff89 	bl	800b7a0 <__hi0bits>
 800a88e:	f1c0 0020 	rsb	r0, r0, #32
 800a892:	9b05      	ldr	r3, [sp, #20]
 800a894:	4418      	add	r0, r3
 800a896:	f010 001f 	ands.w	r0, r0, #31
 800a89a:	f000 8092 	beq.w	800a9c2 <_dtoa_r+0x90a>
 800a89e:	f1c0 0320 	rsb	r3, r0, #32
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	f340 808a 	ble.w	800a9bc <_dtoa_r+0x904>
 800a8a8:	f1c0 001c 	rsb	r0, r0, #28
 800a8ac:	9b04      	ldr	r3, [sp, #16]
 800a8ae:	4403      	add	r3, r0
 800a8b0:	9304      	str	r3, [sp, #16]
 800a8b2:	9b05      	ldr	r3, [sp, #20]
 800a8b4:	4403      	add	r3, r0
 800a8b6:	4405      	add	r5, r0
 800a8b8:	9305      	str	r3, [sp, #20]
 800a8ba:	9b04      	ldr	r3, [sp, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	dd07      	ble.n	800a8d0 <_dtoa_r+0x818>
 800a8c0:	ee18 1a10 	vmov	r1, s16
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f001 f8d4 	bl	800ba74 <__lshift>
 800a8cc:	ee08 0a10 	vmov	s16, r0
 800a8d0:	9b05      	ldr	r3, [sp, #20]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	dd05      	ble.n	800a8e2 <_dtoa_r+0x82a>
 800a8d6:	4631      	mov	r1, r6
 800a8d8:	461a      	mov	r2, r3
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f001 f8ca 	bl	800ba74 <__lshift>
 800a8e0:	4606      	mov	r6, r0
 800a8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d06e      	beq.n	800a9c6 <_dtoa_r+0x90e>
 800a8e8:	ee18 0a10 	vmov	r0, s16
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	f001 f931 	bl	800bb54 <__mcmp>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	da67      	bge.n	800a9c6 <_dtoa_r+0x90e>
 800a8f6:	9b00      	ldr	r3, [sp, #0]
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	ee18 1a10 	vmov	r1, s16
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	220a      	movs	r2, #10
 800a902:	2300      	movs	r3, #0
 800a904:	4620      	mov	r0, r4
 800a906:	f000 febb 	bl	800b680 <__multadd>
 800a90a:	9b08      	ldr	r3, [sp, #32]
 800a90c:	ee08 0a10 	vmov	s16, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	f000 81b1 	beq.w	800ac78 <_dtoa_r+0xbc0>
 800a916:	2300      	movs	r3, #0
 800a918:	4639      	mov	r1, r7
 800a91a:	220a      	movs	r2, #10
 800a91c:	4620      	mov	r0, r4
 800a91e:	f000 feaf 	bl	800b680 <__multadd>
 800a922:	9b02      	ldr	r3, [sp, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	4607      	mov	r7, r0
 800a928:	f300 808e 	bgt.w	800aa48 <_dtoa_r+0x990>
 800a92c:	9b06      	ldr	r3, [sp, #24]
 800a92e:	2b02      	cmp	r3, #2
 800a930:	dc51      	bgt.n	800a9d6 <_dtoa_r+0x91e>
 800a932:	e089      	b.n	800aa48 <_dtoa_r+0x990>
 800a934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a936:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a93a:	e74b      	b.n	800a7d4 <_dtoa_r+0x71c>
 800a93c:	9b03      	ldr	r3, [sp, #12]
 800a93e:	1e5e      	subs	r6, r3, #1
 800a940:	9b07      	ldr	r3, [sp, #28]
 800a942:	42b3      	cmp	r3, r6
 800a944:	bfbf      	itttt	lt
 800a946:	9b07      	ldrlt	r3, [sp, #28]
 800a948:	9607      	strlt	r6, [sp, #28]
 800a94a:	1af2      	sublt	r2, r6, r3
 800a94c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a94e:	bfb6      	itet	lt
 800a950:	189b      	addlt	r3, r3, r2
 800a952:	1b9e      	subge	r6, r3, r6
 800a954:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a956:	9b03      	ldr	r3, [sp, #12]
 800a958:	bfb8      	it	lt
 800a95a:	2600      	movlt	r6, #0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	bfb7      	itett	lt
 800a960:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a964:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a968:	1a9d      	sublt	r5, r3, r2
 800a96a:	2300      	movlt	r3, #0
 800a96c:	e734      	b.n	800a7d8 <_dtoa_r+0x720>
 800a96e:	9e07      	ldr	r6, [sp, #28]
 800a970:	9d04      	ldr	r5, [sp, #16]
 800a972:	9f08      	ldr	r7, [sp, #32]
 800a974:	e73b      	b.n	800a7ee <_dtoa_r+0x736>
 800a976:	9a07      	ldr	r2, [sp, #28]
 800a978:	e767      	b.n	800a84a <_dtoa_r+0x792>
 800a97a:	9b06      	ldr	r3, [sp, #24]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	dc18      	bgt.n	800a9b2 <_dtoa_r+0x8fa>
 800a980:	f1ba 0f00 	cmp.w	sl, #0
 800a984:	d115      	bne.n	800a9b2 <_dtoa_r+0x8fa>
 800a986:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a98a:	b993      	cbnz	r3, 800a9b2 <_dtoa_r+0x8fa>
 800a98c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a990:	0d1b      	lsrs	r3, r3, #20
 800a992:	051b      	lsls	r3, r3, #20
 800a994:	b183      	cbz	r3, 800a9b8 <_dtoa_r+0x900>
 800a996:	9b04      	ldr	r3, [sp, #16]
 800a998:	3301      	adds	r3, #1
 800a99a:	9304      	str	r3, [sp, #16]
 800a99c:	9b05      	ldr	r3, [sp, #20]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	9305      	str	r3, [sp, #20]
 800a9a2:	f04f 0801 	mov.w	r8, #1
 800a9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f47f af6a 	bne.w	800a882 <_dtoa_r+0x7ca>
 800a9ae:	2001      	movs	r0, #1
 800a9b0:	e76f      	b.n	800a892 <_dtoa_r+0x7da>
 800a9b2:	f04f 0800 	mov.w	r8, #0
 800a9b6:	e7f6      	b.n	800a9a6 <_dtoa_r+0x8ee>
 800a9b8:	4698      	mov	r8, r3
 800a9ba:	e7f4      	b.n	800a9a6 <_dtoa_r+0x8ee>
 800a9bc:	f43f af7d 	beq.w	800a8ba <_dtoa_r+0x802>
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	301c      	adds	r0, #28
 800a9c4:	e772      	b.n	800a8ac <_dtoa_r+0x7f4>
 800a9c6:	9b03      	ldr	r3, [sp, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	dc37      	bgt.n	800aa3c <_dtoa_r+0x984>
 800a9cc:	9b06      	ldr	r3, [sp, #24]
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	dd34      	ble.n	800aa3c <_dtoa_r+0x984>
 800a9d2:	9b03      	ldr	r3, [sp, #12]
 800a9d4:	9302      	str	r3, [sp, #8]
 800a9d6:	9b02      	ldr	r3, [sp, #8]
 800a9d8:	b96b      	cbnz	r3, 800a9f6 <_dtoa_r+0x93e>
 800a9da:	4631      	mov	r1, r6
 800a9dc:	2205      	movs	r2, #5
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f000 fe4e 	bl	800b680 <__multadd>
 800a9e4:	4601      	mov	r1, r0
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	ee18 0a10 	vmov	r0, s16
 800a9ec:	f001 f8b2 	bl	800bb54 <__mcmp>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	f73f adbb 	bgt.w	800a56c <_dtoa_r+0x4b4>
 800a9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f8:	9d01      	ldr	r5, [sp, #4]
 800a9fa:	43db      	mvns	r3, r3
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	f04f 0800 	mov.w	r8, #0
 800aa02:	4631      	mov	r1, r6
 800aa04:	4620      	mov	r0, r4
 800aa06:	f000 fe19 	bl	800b63c <_Bfree>
 800aa0a:	2f00      	cmp	r7, #0
 800aa0c:	f43f aea4 	beq.w	800a758 <_dtoa_r+0x6a0>
 800aa10:	f1b8 0f00 	cmp.w	r8, #0
 800aa14:	d005      	beq.n	800aa22 <_dtoa_r+0x96a>
 800aa16:	45b8      	cmp	r8, r7
 800aa18:	d003      	beq.n	800aa22 <_dtoa_r+0x96a>
 800aa1a:	4641      	mov	r1, r8
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f000 fe0d 	bl	800b63c <_Bfree>
 800aa22:	4639      	mov	r1, r7
 800aa24:	4620      	mov	r0, r4
 800aa26:	f000 fe09 	bl	800b63c <_Bfree>
 800aa2a:	e695      	b.n	800a758 <_dtoa_r+0x6a0>
 800aa2c:	2600      	movs	r6, #0
 800aa2e:	4637      	mov	r7, r6
 800aa30:	e7e1      	b.n	800a9f6 <_dtoa_r+0x93e>
 800aa32:	9700      	str	r7, [sp, #0]
 800aa34:	4637      	mov	r7, r6
 800aa36:	e599      	b.n	800a56c <_dtoa_r+0x4b4>
 800aa38:	40240000 	.word	0x40240000
 800aa3c:	9b08      	ldr	r3, [sp, #32]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f000 80ca 	beq.w	800abd8 <_dtoa_r+0xb20>
 800aa44:	9b03      	ldr	r3, [sp, #12]
 800aa46:	9302      	str	r3, [sp, #8]
 800aa48:	2d00      	cmp	r5, #0
 800aa4a:	dd05      	ble.n	800aa58 <_dtoa_r+0x9a0>
 800aa4c:	4639      	mov	r1, r7
 800aa4e:	462a      	mov	r2, r5
 800aa50:	4620      	mov	r0, r4
 800aa52:	f001 f80f 	bl	800ba74 <__lshift>
 800aa56:	4607      	mov	r7, r0
 800aa58:	f1b8 0f00 	cmp.w	r8, #0
 800aa5c:	d05b      	beq.n	800ab16 <_dtoa_r+0xa5e>
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	4620      	mov	r0, r4
 800aa62:	f000 fdab 	bl	800b5bc <_Balloc>
 800aa66:	4605      	mov	r5, r0
 800aa68:	b928      	cbnz	r0, 800aa76 <_dtoa_r+0x9be>
 800aa6a:	4b87      	ldr	r3, [pc, #540]	; (800ac88 <_dtoa_r+0xbd0>)
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aa72:	f7ff bb3b 	b.w	800a0ec <_dtoa_r+0x34>
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	3202      	adds	r2, #2
 800aa7a:	0092      	lsls	r2, r2, #2
 800aa7c:	f107 010c 	add.w	r1, r7, #12
 800aa80:	300c      	adds	r0, #12
 800aa82:	f000 fd8d 	bl	800b5a0 <memcpy>
 800aa86:	2201      	movs	r2, #1
 800aa88:	4629      	mov	r1, r5
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f000 fff2 	bl	800ba74 <__lshift>
 800aa90:	9b01      	ldr	r3, [sp, #4]
 800aa92:	f103 0901 	add.w	r9, r3, #1
 800aa96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	9305      	str	r3, [sp, #20]
 800aa9e:	f00a 0301 	and.w	r3, sl, #1
 800aaa2:	46b8      	mov	r8, r7
 800aaa4:	9304      	str	r3, [sp, #16]
 800aaa6:	4607      	mov	r7, r0
 800aaa8:	4631      	mov	r1, r6
 800aaaa:	ee18 0a10 	vmov	r0, s16
 800aaae:	f7ff fa77 	bl	8009fa0 <quorem>
 800aab2:	4641      	mov	r1, r8
 800aab4:	9002      	str	r0, [sp, #8]
 800aab6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aaba:	ee18 0a10 	vmov	r0, s16
 800aabe:	f001 f849 	bl	800bb54 <__mcmp>
 800aac2:	463a      	mov	r2, r7
 800aac4:	9003      	str	r0, [sp, #12]
 800aac6:	4631      	mov	r1, r6
 800aac8:	4620      	mov	r0, r4
 800aaca:	f001 f85f 	bl	800bb8c <__mdiff>
 800aace:	68c2      	ldr	r2, [r0, #12]
 800aad0:	f109 3bff 	add.w	fp, r9, #4294967295
 800aad4:	4605      	mov	r5, r0
 800aad6:	bb02      	cbnz	r2, 800ab1a <_dtoa_r+0xa62>
 800aad8:	4601      	mov	r1, r0
 800aada:	ee18 0a10 	vmov	r0, s16
 800aade:	f001 f839 	bl	800bb54 <__mcmp>
 800aae2:	4602      	mov	r2, r0
 800aae4:	4629      	mov	r1, r5
 800aae6:	4620      	mov	r0, r4
 800aae8:	9207      	str	r2, [sp, #28]
 800aaea:	f000 fda7 	bl	800b63c <_Bfree>
 800aaee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aaf2:	ea43 0102 	orr.w	r1, r3, r2
 800aaf6:	9b04      	ldr	r3, [sp, #16]
 800aaf8:	430b      	orrs	r3, r1
 800aafa:	464d      	mov	r5, r9
 800aafc:	d10f      	bne.n	800ab1e <_dtoa_r+0xa66>
 800aafe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab02:	d02a      	beq.n	800ab5a <_dtoa_r+0xaa2>
 800ab04:	9b03      	ldr	r3, [sp, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	dd02      	ble.n	800ab10 <_dtoa_r+0xa58>
 800ab0a:	9b02      	ldr	r3, [sp, #8]
 800ab0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ab10:	f88b a000 	strb.w	sl, [fp]
 800ab14:	e775      	b.n	800aa02 <_dtoa_r+0x94a>
 800ab16:	4638      	mov	r0, r7
 800ab18:	e7ba      	b.n	800aa90 <_dtoa_r+0x9d8>
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	e7e2      	b.n	800aae4 <_dtoa_r+0xa2c>
 800ab1e:	9b03      	ldr	r3, [sp, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	db04      	blt.n	800ab2e <_dtoa_r+0xa76>
 800ab24:	9906      	ldr	r1, [sp, #24]
 800ab26:	430b      	orrs	r3, r1
 800ab28:	9904      	ldr	r1, [sp, #16]
 800ab2a:	430b      	orrs	r3, r1
 800ab2c:	d122      	bne.n	800ab74 <_dtoa_r+0xabc>
 800ab2e:	2a00      	cmp	r2, #0
 800ab30:	ddee      	ble.n	800ab10 <_dtoa_r+0xa58>
 800ab32:	ee18 1a10 	vmov	r1, s16
 800ab36:	2201      	movs	r2, #1
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f000 ff9b 	bl	800ba74 <__lshift>
 800ab3e:	4631      	mov	r1, r6
 800ab40:	ee08 0a10 	vmov	s16, r0
 800ab44:	f001 f806 	bl	800bb54 <__mcmp>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	dc03      	bgt.n	800ab54 <_dtoa_r+0xa9c>
 800ab4c:	d1e0      	bne.n	800ab10 <_dtoa_r+0xa58>
 800ab4e:	f01a 0f01 	tst.w	sl, #1
 800ab52:	d0dd      	beq.n	800ab10 <_dtoa_r+0xa58>
 800ab54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab58:	d1d7      	bne.n	800ab0a <_dtoa_r+0xa52>
 800ab5a:	2339      	movs	r3, #57	; 0x39
 800ab5c:	f88b 3000 	strb.w	r3, [fp]
 800ab60:	462b      	mov	r3, r5
 800ab62:	461d      	mov	r5, r3
 800ab64:	3b01      	subs	r3, #1
 800ab66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab6a:	2a39      	cmp	r2, #57	; 0x39
 800ab6c:	d071      	beq.n	800ac52 <_dtoa_r+0xb9a>
 800ab6e:	3201      	adds	r2, #1
 800ab70:	701a      	strb	r2, [r3, #0]
 800ab72:	e746      	b.n	800aa02 <_dtoa_r+0x94a>
 800ab74:	2a00      	cmp	r2, #0
 800ab76:	dd07      	ble.n	800ab88 <_dtoa_r+0xad0>
 800ab78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab7c:	d0ed      	beq.n	800ab5a <_dtoa_r+0xaa2>
 800ab7e:	f10a 0301 	add.w	r3, sl, #1
 800ab82:	f88b 3000 	strb.w	r3, [fp]
 800ab86:	e73c      	b.n	800aa02 <_dtoa_r+0x94a>
 800ab88:	9b05      	ldr	r3, [sp, #20]
 800ab8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ab8e:	4599      	cmp	r9, r3
 800ab90:	d047      	beq.n	800ac22 <_dtoa_r+0xb6a>
 800ab92:	ee18 1a10 	vmov	r1, s16
 800ab96:	2300      	movs	r3, #0
 800ab98:	220a      	movs	r2, #10
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f000 fd70 	bl	800b680 <__multadd>
 800aba0:	45b8      	cmp	r8, r7
 800aba2:	ee08 0a10 	vmov	s16, r0
 800aba6:	f04f 0300 	mov.w	r3, #0
 800abaa:	f04f 020a 	mov.w	r2, #10
 800abae:	4641      	mov	r1, r8
 800abb0:	4620      	mov	r0, r4
 800abb2:	d106      	bne.n	800abc2 <_dtoa_r+0xb0a>
 800abb4:	f000 fd64 	bl	800b680 <__multadd>
 800abb8:	4680      	mov	r8, r0
 800abba:	4607      	mov	r7, r0
 800abbc:	f109 0901 	add.w	r9, r9, #1
 800abc0:	e772      	b.n	800aaa8 <_dtoa_r+0x9f0>
 800abc2:	f000 fd5d 	bl	800b680 <__multadd>
 800abc6:	4639      	mov	r1, r7
 800abc8:	4680      	mov	r8, r0
 800abca:	2300      	movs	r3, #0
 800abcc:	220a      	movs	r2, #10
 800abce:	4620      	mov	r0, r4
 800abd0:	f000 fd56 	bl	800b680 <__multadd>
 800abd4:	4607      	mov	r7, r0
 800abd6:	e7f1      	b.n	800abbc <_dtoa_r+0xb04>
 800abd8:	9b03      	ldr	r3, [sp, #12]
 800abda:	9302      	str	r3, [sp, #8]
 800abdc:	9d01      	ldr	r5, [sp, #4]
 800abde:	ee18 0a10 	vmov	r0, s16
 800abe2:	4631      	mov	r1, r6
 800abe4:	f7ff f9dc 	bl	8009fa0 <quorem>
 800abe8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800abec:	9b01      	ldr	r3, [sp, #4]
 800abee:	f805 ab01 	strb.w	sl, [r5], #1
 800abf2:	1aea      	subs	r2, r5, r3
 800abf4:	9b02      	ldr	r3, [sp, #8]
 800abf6:	4293      	cmp	r3, r2
 800abf8:	dd09      	ble.n	800ac0e <_dtoa_r+0xb56>
 800abfa:	ee18 1a10 	vmov	r1, s16
 800abfe:	2300      	movs	r3, #0
 800ac00:	220a      	movs	r2, #10
 800ac02:	4620      	mov	r0, r4
 800ac04:	f000 fd3c 	bl	800b680 <__multadd>
 800ac08:	ee08 0a10 	vmov	s16, r0
 800ac0c:	e7e7      	b.n	800abde <_dtoa_r+0xb26>
 800ac0e:	9b02      	ldr	r3, [sp, #8]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	bfc8      	it	gt
 800ac14:	461d      	movgt	r5, r3
 800ac16:	9b01      	ldr	r3, [sp, #4]
 800ac18:	bfd8      	it	le
 800ac1a:	2501      	movle	r5, #1
 800ac1c:	441d      	add	r5, r3
 800ac1e:	f04f 0800 	mov.w	r8, #0
 800ac22:	ee18 1a10 	vmov	r1, s16
 800ac26:	2201      	movs	r2, #1
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f000 ff23 	bl	800ba74 <__lshift>
 800ac2e:	4631      	mov	r1, r6
 800ac30:	ee08 0a10 	vmov	s16, r0
 800ac34:	f000 ff8e 	bl	800bb54 <__mcmp>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	dc91      	bgt.n	800ab60 <_dtoa_r+0xaa8>
 800ac3c:	d102      	bne.n	800ac44 <_dtoa_r+0xb8c>
 800ac3e:	f01a 0f01 	tst.w	sl, #1
 800ac42:	d18d      	bne.n	800ab60 <_dtoa_r+0xaa8>
 800ac44:	462b      	mov	r3, r5
 800ac46:	461d      	mov	r5, r3
 800ac48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac4c:	2a30      	cmp	r2, #48	; 0x30
 800ac4e:	d0fa      	beq.n	800ac46 <_dtoa_r+0xb8e>
 800ac50:	e6d7      	b.n	800aa02 <_dtoa_r+0x94a>
 800ac52:	9a01      	ldr	r2, [sp, #4]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d184      	bne.n	800ab62 <_dtoa_r+0xaaa>
 800ac58:	9b00      	ldr	r3, [sp, #0]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	2331      	movs	r3, #49	; 0x31
 800ac60:	7013      	strb	r3, [r2, #0]
 800ac62:	e6ce      	b.n	800aa02 <_dtoa_r+0x94a>
 800ac64:	4b09      	ldr	r3, [pc, #36]	; (800ac8c <_dtoa_r+0xbd4>)
 800ac66:	f7ff ba95 	b.w	800a194 <_dtoa_r+0xdc>
 800ac6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f47f aa6e 	bne.w	800a14e <_dtoa_r+0x96>
 800ac72:	4b07      	ldr	r3, [pc, #28]	; (800ac90 <_dtoa_r+0xbd8>)
 800ac74:	f7ff ba8e 	b.w	800a194 <_dtoa_r+0xdc>
 800ac78:	9b02      	ldr	r3, [sp, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	dcae      	bgt.n	800abdc <_dtoa_r+0xb24>
 800ac7e:	9b06      	ldr	r3, [sp, #24]
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	f73f aea8 	bgt.w	800a9d6 <_dtoa_r+0x91e>
 800ac86:	e7a9      	b.n	800abdc <_dtoa_r+0xb24>
 800ac88:	0800d088 	.word	0x0800d088
 800ac8c:	0800ce8c 	.word	0x0800ce8c
 800ac90:	0800d009 	.word	0x0800d009

0800ac94 <std>:
 800ac94:	2300      	movs	r3, #0
 800ac96:	b510      	push	{r4, lr}
 800ac98:	4604      	mov	r4, r0
 800ac9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aca2:	6083      	str	r3, [r0, #8]
 800aca4:	8181      	strh	r1, [r0, #12]
 800aca6:	6643      	str	r3, [r0, #100]	; 0x64
 800aca8:	81c2      	strh	r2, [r0, #14]
 800acaa:	6183      	str	r3, [r0, #24]
 800acac:	4619      	mov	r1, r3
 800acae:	2208      	movs	r2, #8
 800acb0:	305c      	adds	r0, #92	; 0x5c
 800acb2:	f7fd fc07 	bl	80084c4 <memset>
 800acb6:	4b05      	ldr	r3, [pc, #20]	; (800accc <std+0x38>)
 800acb8:	6263      	str	r3, [r4, #36]	; 0x24
 800acba:	4b05      	ldr	r3, [pc, #20]	; (800acd0 <std+0x3c>)
 800acbc:	62a3      	str	r3, [r4, #40]	; 0x28
 800acbe:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <std+0x40>)
 800acc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acc2:	4b05      	ldr	r3, [pc, #20]	; (800acd8 <std+0x44>)
 800acc4:	6224      	str	r4, [r4, #32]
 800acc6:	6323      	str	r3, [r4, #48]	; 0x30
 800acc8:	bd10      	pop	{r4, pc}
 800acca:	bf00      	nop
 800accc:	0800c6c9 	.word	0x0800c6c9
 800acd0:	0800c6eb 	.word	0x0800c6eb
 800acd4:	0800c723 	.word	0x0800c723
 800acd8:	0800c747 	.word	0x0800c747

0800acdc <_cleanup_r>:
 800acdc:	4901      	ldr	r1, [pc, #4]	; (800ace4 <_cleanup_r+0x8>)
 800acde:	f000 b8af 	b.w	800ae40 <_fwalk_reent>
 800ace2:	bf00      	nop
 800ace4:	0800caa1 	.word	0x0800caa1

0800ace8 <__sfmoreglue>:
 800ace8:	b570      	push	{r4, r5, r6, lr}
 800acea:	2268      	movs	r2, #104	; 0x68
 800acec:	1e4d      	subs	r5, r1, #1
 800acee:	4355      	muls	r5, r2
 800acf0:	460e      	mov	r6, r1
 800acf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acf6:	f001 f9a5 	bl	800c044 <_malloc_r>
 800acfa:	4604      	mov	r4, r0
 800acfc:	b140      	cbz	r0, 800ad10 <__sfmoreglue+0x28>
 800acfe:	2100      	movs	r1, #0
 800ad00:	e9c0 1600 	strd	r1, r6, [r0]
 800ad04:	300c      	adds	r0, #12
 800ad06:	60a0      	str	r0, [r4, #8]
 800ad08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad0c:	f7fd fbda 	bl	80084c4 <memset>
 800ad10:	4620      	mov	r0, r4
 800ad12:	bd70      	pop	{r4, r5, r6, pc}

0800ad14 <__sfp_lock_acquire>:
 800ad14:	4801      	ldr	r0, [pc, #4]	; (800ad1c <__sfp_lock_acquire+0x8>)
 800ad16:	f000 bc26 	b.w	800b566 <__retarget_lock_acquire_recursive>
 800ad1a:	bf00      	nop
 800ad1c:	2000055d 	.word	0x2000055d

0800ad20 <__sfp_lock_release>:
 800ad20:	4801      	ldr	r0, [pc, #4]	; (800ad28 <__sfp_lock_release+0x8>)
 800ad22:	f000 bc21 	b.w	800b568 <__retarget_lock_release_recursive>
 800ad26:	bf00      	nop
 800ad28:	2000055d 	.word	0x2000055d

0800ad2c <__sinit_lock_acquire>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	; (800ad34 <__sinit_lock_acquire+0x8>)
 800ad2e:	f000 bc1a 	b.w	800b566 <__retarget_lock_acquire_recursive>
 800ad32:	bf00      	nop
 800ad34:	2000055e 	.word	0x2000055e

0800ad38 <__sinit_lock_release>:
 800ad38:	4801      	ldr	r0, [pc, #4]	; (800ad40 <__sinit_lock_release+0x8>)
 800ad3a:	f000 bc15 	b.w	800b568 <__retarget_lock_release_recursive>
 800ad3e:	bf00      	nop
 800ad40:	2000055e 	.word	0x2000055e

0800ad44 <__sinit>:
 800ad44:	b510      	push	{r4, lr}
 800ad46:	4604      	mov	r4, r0
 800ad48:	f7ff fff0 	bl	800ad2c <__sinit_lock_acquire>
 800ad4c:	69a3      	ldr	r3, [r4, #24]
 800ad4e:	b11b      	cbz	r3, 800ad58 <__sinit+0x14>
 800ad50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad54:	f7ff bff0 	b.w	800ad38 <__sinit_lock_release>
 800ad58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad5c:	6523      	str	r3, [r4, #80]	; 0x50
 800ad5e:	4b13      	ldr	r3, [pc, #76]	; (800adac <__sinit+0x68>)
 800ad60:	4a13      	ldr	r2, [pc, #76]	; (800adb0 <__sinit+0x6c>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad66:	42a3      	cmp	r3, r4
 800ad68:	bf04      	itt	eq
 800ad6a:	2301      	moveq	r3, #1
 800ad6c:	61a3      	streq	r3, [r4, #24]
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 f820 	bl	800adb4 <__sfp>
 800ad74:	6060      	str	r0, [r4, #4]
 800ad76:	4620      	mov	r0, r4
 800ad78:	f000 f81c 	bl	800adb4 <__sfp>
 800ad7c:	60a0      	str	r0, [r4, #8]
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f000 f818 	bl	800adb4 <__sfp>
 800ad84:	2200      	movs	r2, #0
 800ad86:	60e0      	str	r0, [r4, #12]
 800ad88:	2104      	movs	r1, #4
 800ad8a:	6860      	ldr	r0, [r4, #4]
 800ad8c:	f7ff ff82 	bl	800ac94 <std>
 800ad90:	68a0      	ldr	r0, [r4, #8]
 800ad92:	2201      	movs	r2, #1
 800ad94:	2109      	movs	r1, #9
 800ad96:	f7ff ff7d 	bl	800ac94 <std>
 800ad9a:	68e0      	ldr	r0, [r4, #12]
 800ad9c:	2202      	movs	r2, #2
 800ad9e:	2112      	movs	r1, #18
 800ada0:	f7ff ff78 	bl	800ac94 <std>
 800ada4:	2301      	movs	r3, #1
 800ada6:	61a3      	str	r3, [r4, #24]
 800ada8:	e7d2      	b.n	800ad50 <__sinit+0xc>
 800adaa:	bf00      	nop
 800adac:	0800ce78 	.word	0x0800ce78
 800adb0:	0800acdd 	.word	0x0800acdd

0800adb4 <__sfp>:
 800adb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb6:	4607      	mov	r7, r0
 800adb8:	f7ff ffac 	bl	800ad14 <__sfp_lock_acquire>
 800adbc:	4b1e      	ldr	r3, [pc, #120]	; (800ae38 <__sfp+0x84>)
 800adbe:	681e      	ldr	r6, [r3, #0]
 800adc0:	69b3      	ldr	r3, [r6, #24]
 800adc2:	b913      	cbnz	r3, 800adca <__sfp+0x16>
 800adc4:	4630      	mov	r0, r6
 800adc6:	f7ff ffbd 	bl	800ad44 <__sinit>
 800adca:	3648      	adds	r6, #72	; 0x48
 800adcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800add0:	3b01      	subs	r3, #1
 800add2:	d503      	bpl.n	800addc <__sfp+0x28>
 800add4:	6833      	ldr	r3, [r6, #0]
 800add6:	b30b      	cbz	r3, 800ae1c <__sfp+0x68>
 800add8:	6836      	ldr	r6, [r6, #0]
 800adda:	e7f7      	b.n	800adcc <__sfp+0x18>
 800addc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ade0:	b9d5      	cbnz	r5, 800ae18 <__sfp+0x64>
 800ade2:	4b16      	ldr	r3, [pc, #88]	; (800ae3c <__sfp+0x88>)
 800ade4:	60e3      	str	r3, [r4, #12]
 800ade6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800adea:	6665      	str	r5, [r4, #100]	; 0x64
 800adec:	f000 fbba 	bl	800b564 <__retarget_lock_init_recursive>
 800adf0:	f7ff ff96 	bl	800ad20 <__sfp_lock_release>
 800adf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800adf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adfc:	6025      	str	r5, [r4, #0]
 800adfe:	61a5      	str	r5, [r4, #24]
 800ae00:	2208      	movs	r2, #8
 800ae02:	4629      	mov	r1, r5
 800ae04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae08:	f7fd fb5c 	bl	80084c4 <memset>
 800ae0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae14:	4620      	mov	r0, r4
 800ae16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae18:	3468      	adds	r4, #104	; 0x68
 800ae1a:	e7d9      	b.n	800add0 <__sfp+0x1c>
 800ae1c:	2104      	movs	r1, #4
 800ae1e:	4638      	mov	r0, r7
 800ae20:	f7ff ff62 	bl	800ace8 <__sfmoreglue>
 800ae24:	4604      	mov	r4, r0
 800ae26:	6030      	str	r0, [r6, #0]
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d1d5      	bne.n	800add8 <__sfp+0x24>
 800ae2c:	f7ff ff78 	bl	800ad20 <__sfp_lock_release>
 800ae30:	230c      	movs	r3, #12
 800ae32:	603b      	str	r3, [r7, #0]
 800ae34:	e7ee      	b.n	800ae14 <__sfp+0x60>
 800ae36:	bf00      	nop
 800ae38:	0800ce78 	.word	0x0800ce78
 800ae3c:	ffff0001 	.word	0xffff0001

0800ae40 <_fwalk_reent>:
 800ae40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae44:	4606      	mov	r6, r0
 800ae46:	4688      	mov	r8, r1
 800ae48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae4c:	2700      	movs	r7, #0
 800ae4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae52:	f1b9 0901 	subs.w	r9, r9, #1
 800ae56:	d505      	bpl.n	800ae64 <_fwalk_reent+0x24>
 800ae58:	6824      	ldr	r4, [r4, #0]
 800ae5a:	2c00      	cmp	r4, #0
 800ae5c:	d1f7      	bne.n	800ae4e <_fwalk_reent+0xe>
 800ae5e:	4638      	mov	r0, r7
 800ae60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae64:	89ab      	ldrh	r3, [r5, #12]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d907      	bls.n	800ae7a <_fwalk_reent+0x3a>
 800ae6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	d003      	beq.n	800ae7a <_fwalk_reent+0x3a>
 800ae72:	4629      	mov	r1, r5
 800ae74:	4630      	mov	r0, r6
 800ae76:	47c0      	blx	r8
 800ae78:	4307      	orrs	r7, r0
 800ae7a:	3568      	adds	r5, #104	; 0x68
 800ae7c:	e7e9      	b.n	800ae52 <_fwalk_reent+0x12>

0800ae7e <rshift>:
 800ae7e:	6903      	ldr	r3, [r0, #16]
 800ae80:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae88:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae8c:	f100 0414 	add.w	r4, r0, #20
 800ae90:	dd45      	ble.n	800af1e <rshift+0xa0>
 800ae92:	f011 011f 	ands.w	r1, r1, #31
 800ae96:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae9a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae9e:	d10c      	bne.n	800aeba <rshift+0x3c>
 800aea0:	f100 0710 	add.w	r7, r0, #16
 800aea4:	4629      	mov	r1, r5
 800aea6:	42b1      	cmp	r1, r6
 800aea8:	d334      	bcc.n	800af14 <rshift+0x96>
 800aeaa:	1a9b      	subs	r3, r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	1eea      	subs	r2, r5, #3
 800aeb0:	4296      	cmp	r6, r2
 800aeb2:	bf38      	it	cc
 800aeb4:	2300      	movcc	r3, #0
 800aeb6:	4423      	add	r3, r4
 800aeb8:	e015      	b.n	800aee6 <rshift+0x68>
 800aeba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aebe:	f1c1 0820 	rsb	r8, r1, #32
 800aec2:	40cf      	lsrs	r7, r1
 800aec4:	f105 0e04 	add.w	lr, r5, #4
 800aec8:	46a1      	mov	r9, r4
 800aeca:	4576      	cmp	r6, lr
 800aecc:	46f4      	mov	ip, lr
 800aece:	d815      	bhi.n	800aefc <rshift+0x7e>
 800aed0:	1a9a      	subs	r2, r3, r2
 800aed2:	0092      	lsls	r2, r2, #2
 800aed4:	3a04      	subs	r2, #4
 800aed6:	3501      	adds	r5, #1
 800aed8:	42ae      	cmp	r6, r5
 800aeda:	bf38      	it	cc
 800aedc:	2200      	movcc	r2, #0
 800aede:	18a3      	adds	r3, r4, r2
 800aee0:	50a7      	str	r7, [r4, r2]
 800aee2:	b107      	cbz	r7, 800aee6 <rshift+0x68>
 800aee4:	3304      	adds	r3, #4
 800aee6:	1b1a      	subs	r2, r3, r4
 800aee8:	42a3      	cmp	r3, r4
 800aeea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aeee:	bf08      	it	eq
 800aef0:	2300      	moveq	r3, #0
 800aef2:	6102      	str	r2, [r0, #16]
 800aef4:	bf08      	it	eq
 800aef6:	6143      	streq	r3, [r0, #20]
 800aef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aefc:	f8dc c000 	ldr.w	ip, [ip]
 800af00:	fa0c fc08 	lsl.w	ip, ip, r8
 800af04:	ea4c 0707 	orr.w	r7, ip, r7
 800af08:	f849 7b04 	str.w	r7, [r9], #4
 800af0c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af10:	40cf      	lsrs	r7, r1
 800af12:	e7da      	b.n	800aeca <rshift+0x4c>
 800af14:	f851 cb04 	ldr.w	ip, [r1], #4
 800af18:	f847 cf04 	str.w	ip, [r7, #4]!
 800af1c:	e7c3      	b.n	800aea6 <rshift+0x28>
 800af1e:	4623      	mov	r3, r4
 800af20:	e7e1      	b.n	800aee6 <rshift+0x68>

0800af22 <__hexdig_fun>:
 800af22:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af26:	2b09      	cmp	r3, #9
 800af28:	d802      	bhi.n	800af30 <__hexdig_fun+0xe>
 800af2a:	3820      	subs	r0, #32
 800af2c:	b2c0      	uxtb	r0, r0
 800af2e:	4770      	bx	lr
 800af30:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af34:	2b05      	cmp	r3, #5
 800af36:	d801      	bhi.n	800af3c <__hexdig_fun+0x1a>
 800af38:	3847      	subs	r0, #71	; 0x47
 800af3a:	e7f7      	b.n	800af2c <__hexdig_fun+0xa>
 800af3c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af40:	2b05      	cmp	r3, #5
 800af42:	d801      	bhi.n	800af48 <__hexdig_fun+0x26>
 800af44:	3827      	subs	r0, #39	; 0x27
 800af46:	e7f1      	b.n	800af2c <__hexdig_fun+0xa>
 800af48:	2000      	movs	r0, #0
 800af4a:	4770      	bx	lr

0800af4c <__gethex>:
 800af4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af50:	ed2d 8b02 	vpush	{d8}
 800af54:	b089      	sub	sp, #36	; 0x24
 800af56:	ee08 0a10 	vmov	s16, r0
 800af5a:	9304      	str	r3, [sp, #16]
 800af5c:	4bb4      	ldr	r3, [pc, #720]	; (800b230 <__gethex+0x2e4>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	9301      	str	r3, [sp, #4]
 800af62:	4618      	mov	r0, r3
 800af64:	468b      	mov	fp, r1
 800af66:	4690      	mov	r8, r2
 800af68:	f7f5 f95a 	bl	8000220 <strlen>
 800af6c:	9b01      	ldr	r3, [sp, #4]
 800af6e:	f8db 2000 	ldr.w	r2, [fp]
 800af72:	4403      	add	r3, r0
 800af74:	4682      	mov	sl, r0
 800af76:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800af7a:	9305      	str	r3, [sp, #20]
 800af7c:	1c93      	adds	r3, r2, #2
 800af7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af86:	32fe      	adds	r2, #254	; 0xfe
 800af88:	18d1      	adds	r1, r2, r3
 800af8a:	461f      	mov	r7, r3
 800af8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af90:	9100      	str	r1, [sp, #0]
 800af92:	2830      	cmp	r0, #48	; 0x30
 800af94:	d0f8      	beq.n	800af88 <__gethex+0x3c>
 800af96:	f7ff ffc4 	bl	800af22 <__hexdig_fun>
 800af9a:	4604      	mov	r4, r0
 800af9c:	2800      	cmp	r0, #0
 800af9e:	d13a      	bne.n	800b016 <__gethex+0xca>
 800afa0:	9901      	ldr	r1, [sp, #4]
 800afa2:	4652      	mov	r2, sl
 800afa4:	4638      	mov	r0, r7
 800afa6:	f001 fbd2 	bl	800c74e <strncmp>
 800afaa:	4605      	mov	r5, r0
 800afac:	2800      	cmp	r0, #0
 800afae:	d168      	bne.n	800b082 <__gethex+0x136>
 800afb0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800afb4:	eb07 060a 	add.w	r6, r7, sl
 800afb8:	f7ff ffb3 	bl	800af22 <__hexdig_fun>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d062      	beq.n	800b086 <__gethex+0x13a>
 800afc0:	4633      	mov	r3, r6
 800afc2:	7818      	ldrb	r0, [r3, #0]
 800afc4:	2830      	cmp	r0, #48	; 0x30
 800afc6:	461f      	mov	r7, r3
 800afc8:	f103 0301 	add.w	r3, r3, #1
 800afcc:	d0f9      	beq.n	800afc2 <__gethex+0x76>
 800afce:	f7ff ffa8 	bl	800af22 <__hexdig_fun>
 800afd2:	2301      	movs	r3, #1
 800afd4:	fab0 f480 	clz	r4, r0
 800afd8:	0964      	lsrs	r4, r4, #5
 800afda:	4635      	mov	r5, r6
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	463a      	mov	r2, r7
 800afe0:	4616      	mov	r6, r2
 800afe2:	3201      	adds	r2, #1
 800afe4:	7830      	ldrb	r0, [r6, #0]
 800afe6:	f7ff ff9c 	bl	800af22 <__hexdig_fun>
 800afea:	2800      	cmp	r0, #0
 800afec:	d1f8      	bne.n	800afe0 <__gethex+0x94>
 800afee:	9901      	ldr	r1, [sp, #4]
 800aff0:	4652      	mov	r2, sl
 800aff2:	4630      	mov	r0, r6
 800aff4:	f001 fbab 	bl	800c74e <strncmp>
 800aff8:	b980      	cbnz	r0, 800b01c <__gethex+0xd0>
 800affa:	b94d      	cbnz	r5, 800b010 <__gethex+0xc4>
 800affc:	eb06 050a 	add.w	r5, r6, sl
 800b000:	462a      	mov	r2, r5
 800b002:	4616      	mov	r6, r2
 800b004:	3201      	adds	r2, #1
 800b006:	7830      	ldrb	r0, [r6, #0]
 800b008:	f7ff ff8b 	bl	800af22 <__hexdig_fun>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	d1f8      	bne.n	800b002 <__gethex+0xb6>
 800b010:	1bad      	subs	r5, r5, r6
 800b012:	00ad      	lsls	r5, r5, #2
 800b014:	e004      	b.n	800b020 <__gethex+0xd4>
 800b016:	2400      	movs	r4, #0
 800b018:	4625      	mov	r5, r4
 800b01a:	e7e0      	b.n	800afde <__gethex+0x92>
 800b01c:	2d00      	cmp	r5, #0
 800b01e:	d1f7      	bne.n	800b010 <__gethex+0xc4>
 800b020:	7833      	ldrb	r3, [r6, #0]
 800b022:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b026:	2b50      	cmp	r3, #80	; 0x50
 800b028:	d13b      	bne.n	800b0a2 <__gethex+0x156>
 800b02a:	7873      	ldrb	r3, [r6, #1]
 800b02c:	2b2b      	cmp	r3, #43	; 0x2b
 800b02e:	d02c      	beq.n	800b08a <__gethex+0x13e>
 800b030:	2b2d      	cmp	r3, #45	; 0x2d
 800b032:	d02e      	beq.n	800b092 <__gethex+0x146>
 800b034:	1c71      	adds	r1, r6, #1
 800b036:	f04f 0900 	mov.w	r9, #0
 800b03a:	7808      	ldrb	r0, [r1, #0]
 800b03c:	f7ff ff71 	bl	800af22 <__hexdig_fun>
 800b040:	1e43      	subs	r3, r0, #1
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b18      	cmp	r3, #24
 800b046:	d82c      	bhi.n	800b0a2 <__gethex+0x156>
 800b048:	f1a0 0210 	sub.w	r2, r0, #16
 800b04c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b050:	f7ff ff67 	bl	800af22 <__hexdig_fun>
 800b054:	1e43      	subs	r3, r0, #1
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b18      	cmp	r3, #24
 800b05a:	d91d      	bls.n	800b098 <__gethex+0x14c>
 800b05c:	f1b9 0f00 	cmp.w	r9, #0
 800b060:	d000      	beq.n	800b064 <__gethex+0x118>
 800b062:	4252      	negs	r2, r2
 800b064:	4415      	add	r5, r2
 800b066:	f8cb 1000 	str.w	r1, [fp]
 800b06a:	b1e4      	cbz	r4, 800b0a6 <__gethex+0x15a>
 800b06c:	9b00      	ldr	r3, [sp, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	bf14      	ite	ne
 800b072:	2700      	movne	r7, #0
 800b074:	2706      	moveq	r7, #6
 800b076:	4638      	mov	r0, r7
 800b078:	b009      	add	sp, #36	; 0x24
 800b07a:	ecbd 8b02 	vpop	{d8}
 800b07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b082:	463e      	mov	r6, r7
 800b084:	4625      	mov	r5, r4
 800b086:	2401      	movs	r4, #1
 800b088:	e7ca      	b.n	800b020 <__gethex+0xd4>
 800b08a:	f04f 0900 	mov.w	r9, #0
 800b08e:	1cb1      	adds	r1, r6, #2
 800b090:	e7d3      	b.n	800b03a <__gethex+0xee>
 800b092:	f04f 0901 	mov.w	r9, #1
 800b096:	e7fa      	b.n	800b08e <__gethex+0x142>
 800b098:	230a      	movs	r3, #10
 800b09a:	fb03 0202 	mla	r2, r3, r2, r0
 800b09e:	3a10      	subs	r2, #16
 800b0a0:	e7d4      	b.n	800b04c <__gethex+0x100>
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	e7df      	b.n	800b066 <__gethex+0x11a>
 800b0a6:	1bf3      	subs	r3, r6, r7
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	2b07      	cmp	r3, #7
 800b0ae:	dc0b      	bgt.n	800b0c8 <__gethex+0x17c>
 800b0b0:	ee18 0a10 	vmov	r0, s16
 800b0b4:	f000 fa82 	bl	800b5bc <_Balloc>
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	b940      	cbnz	r0, 800b0ce <__gethex+0x182>
 800b0bc:	4b5d      	ldr	r3, [pc, #372]	; (800b234 <__gethex+0x2e8>)
 800b0be:	4602      	mov	r2, r0
 800b0c0:	21de      	movs	r1, #222	; 0xde
 800b0c2:	485d      	ldr	r0, [pc, #372]	; (800b238 <__gethex+0x2ec>)
 800b0c4:	f001 fc38 	bl	800c938 <__assert_func>
 800b0c8:	3101      	adds	r1, #1
 800b0ca:	105b      	asrs	r3, r3, #1
 800b0cc:	e7ee      	b.n	800b0ac <__gethex+0x160>
 800b0ce:	f100 0914 	add.w	r9, r0, #20
 800b0d2:	f04f 0b00 	mov.w	fp, #0
 800b0d6:	f1ca 0301 	rsb	r3, sl, #1
 800b0da:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0de:	f8cd b000 	str.w	fp, [sp]
 800b0e2:	9306      	str	r3, [sp, #24]
 800b0e4:	42b7      	cmp	r7, r6
 800b0e6:	d340      	bcc.n	800b16a <__gethex+0x21e>
 800b0e8:	9802      	ldr	r0, [sp, #8]
 800b0ea:	9b00      	ldr	r3, [sp, #0]
 800b0ec:	f840 3b04 	str.w	r3, [r0], #4
 800b0f0:	eba0 0009 	sub.w	r0, r0, r9
 800b0f4:	1080      	asrs	r0, r0, #2
 800b0f6:	0146      	lsls	r6, r0, #5
 800b0f8:	6120      	str	r0, [r4, #16]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 fb50 	bl	800b7a0 <__hi0bits>
 800b100:	1a30      	subs	r0, r6, r0
 800b102:	f8d8 6000 	ldr.w	r6, [r8]
 800b106:	42b0      	cmp	r0, r6
 800b108:	dd63      	ble.n	800b1d2 <__gethex+0x286>
 800b10a:	1b87      	subs	r7, r0, r6
 800b10c:	4639      	mov	r1, r7
 800b10e:	4620      	mov	r0, r4
 800b110:	f000 fef4 	bl	800befc <__any_on>
 800b114:	4682      	mov	sl, r0
 800b116:	b1a8      	cbz	r0, 800b144 <__gethex+0x1f8>
 800b118:	1e7b      	subs	r3, r7, #1
 800b11a:	1159      	asrs	r1, r3, #5
 800b11c:	f003 021f 	and.w	r2, r3, #31
 800b120:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b124:	f04f 0a01 	mov.w	sl, #1
 800b128:	fa0a f202 	lsl.w	r2, sl, r2
 800b12c:	420a      	tst	r2, r1
 800b12e:	d009      	beq.n	800b144 <__gethex+0x1f8>
 800b130:	4553      	cmp	r3, sl
 800b132:	dd05      	ble.n	800b140 <__gethex+0x1f4>
 800b134:	1eb9      	subs	r1, r7, #2
 800b136:	4620      	mov	r0, r4
 800b138:	f000 fee0 	bl	800befc <__any_on>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d145      	bne.n	800b1cc <__gethex+0x280>
 800b140:	f04f 0a02 	mov.w	sl, #2
 800b144:	4639      	mov	r1, r7
 800b146:	4620      	mov	r0, r4
 800b148:	f7ff fe99 	bl	800ae7e <rshift>
 800b14c:	443d      	add	r5, r7
 800b14e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b152:	42ab      	cmp	r3, r5
 800b154:	da4c      	bge.n	800b1f0 <__gethex+0x2a4>
 800b156:	ee18 0a10 	vmov	r0, s16
 800b15a:	4621      	mov	r1, r4
 800b15c:	f000 fa6e 	bl	800b63c <_Bfree>
 800b160:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b162:	2300      	movs	r3, #0
 800b164:	6013      	str	r3, [r2, #0]
 800b166:	27a3      	movs	r7, #163	; 0xa3
 800b168:	e785      	b.n	800b076 <__gethex+0x12a>
 800b16a:	1e73      	subs	r3, r6, #1
 800b16c:	9a05      	ldr	r2, [sp, #20]
 800b16e:	9303      	str	r3, [sp, #12]
 800b170:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b174:	4293      	cmp	r3, r2
 800b176:	d019      	beq.n	800b1ac <__gethex+0x260>
 800b178:	f1bb 0f20 	cmp.w	fp, #32
 800b17c:	d107      	bne.n	800b18e <__gethex+0x242>
 800b17e:	9b02      	ldr	r3, [sp, #8]
 800b180:	9a00      	ldr	r2, [sp, #0]
 800b182:	f843 2b04 	str.w	r2, [r3], #4
 800b186:	9302      	str	r3, [sp, #8]
 800b188:	2300      	movs	r3, #0
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	469b      	mov	fp, r3
 800b18e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b192:	f7ff fec6 	bl	800af22 <__hexdig_fun>
 800b196:	9b00      	ldr	r3, [sp, #0]
 800b198:	f000 000f 	and.w	r0, r0, #15
 800b19c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b1a0:	4303      	orrs	r3, r0
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	f10b 0b04 	add.w	fp, fp, #4
 800b1a8:	9b03      	ldr	r3, [sp, #12]
 800b1aa:	e00d      	b.n	800b1c8 <__gethex+0x27c>
 800b1ac:	9b03      	ldr	r3, [sp, #12]
 800b1ae:	9a06      	ldr	r2, [sp, #24]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	42bb      	cmp	r3, r7
 800b1b4:	d3e0      	bcc.n	800b178 <__gethex+0x22c>
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	9901      	ldr	r1, [sp, #4]
 800b1ba:	9307      	str	r3, [sp, #28]
 800b1bc:	4652      	mov	r2, sl
 800b1be:	f001 fac6 	bl	800c74e <strncmp>
 800b1c2:	9b07      	ldr	r3, [sp, #28]
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d1d7      	bne.n	800b178 <__gethex+0x22c>
 800b1c8:	461e      	mov	r6, r3
 800b1ca:	e78b      	b.n	800b0e4 <__gethex+0x198>
 800b1cc:	f04f 0a03 	mov.w	sl, #3
 800b1d0:	e7b8      	b.n	800b144 <__gethex+0x1f8>
 800b1d2:	da0a      	bge.n	800b1ea <__gethex+0x29e>
 800b1d4:	1a37      	subs	r7, r6, r0
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	ee18 0a10 	vmov	r0, s16
 800b1dc:	463a      	mov	r2, r7
 800b1de:	f000 fc49 	bl	800ba74 <__lshift>
 800b1e2:	1bed      	subs	r5, r5, r7
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	f100 0914 	add.w	r9, r0, #20
 800b1ea:	f04f 0a00 	mov.w	sl, #0
 800b1ee:	e7ae      	b.n	800b14e <__gethex+0x202>
 800b1f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b1f4:	42a8      	cmp	r0, r5
 800b1f6:	dd72      	ble.n	800b2de <__gethex+0x392>
 800b1f8:	1b45      	subs	r5, r0, r5
 800b1fa:	42ae      	cmp	r6, r5
 800b1fc:	dc36      	bgt.n	800b26c <__gethex+0x320>
 800b1fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b202:	2b02      	cmp	r3, #2
 800b204:	d02a      	beq.n	800b25c <__gethex+0x310>
 800b206:	2b03      	cmp	r3, #3
 800b208:	d02c      	beq.n	800b264 <__gethex+0x318>
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d11c      	bne.n	800b248 <__gethex+0x2fc>
 800b20e:	42ae      	cmp	r6, r5
 800b210:	d11a      	bne.n	800b248 <__gethex+0x2fc>
 800b212:	2e01      	cmp	r6, #1
 800b214:	d112      	bne.n	800b23c <__gethex+0x2f0>
 800b216:	9a04      	ldr	r2, [sp, #16]
 800b218:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	2301      	movs	r3, #1
 800b220:	6123      	str	r3, [r4, #16]
 800b222:	f8c9 3000 	str.w	r3, [r9]
 800b226:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b228:	2762      	movs	r7, #98	; 0x62
 800b22a:	601c      	str	r4, [r3, #0]
 800b22c:	e723      	b.n	800b076 <__gethex+0x12a>
 800b22e:	bf00      	nop
 800b230:	0800d164 	.word	0x0800d164
 800b234:	0800d088 	.word	0x0800d088
 800b238:	0800d0fc 	.word	0x0800d0fc
 800b23c:	1e71      	subs	r1, r6, #1
 800b23e:	4620      	mov	r0, r4
 800b240:	f000 fe5c 	bl	800befc <__any_on>
 800b244:	2800      	cmp	r0, #0
 800b246:	d1e6      	bne.n	800b216 <__gethex+0x2ca>
 800b248:	ee18 0a10 	vmov	r0, s16
 800b24c:	4621      	mov	r1, r4
 800b24e:	f000 f9f5 	bl	800b63c <_Bfree>
 800b252:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b254:	2300      	movs	r3, #0
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	2750      	movs	r7, #80	; 0x50
 800b25a:	e70c      	b.n	800b076 <__gethex+0x12a>
 800b25c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1f2      	bne.n	800b248 <__gethex+0x2fc>
 800b262:	e7d8      	b.n	800b216 <__gethex+0x2ca>
 800b264:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1d5      	bne.n	800b216 <__gethex+0x2ca>
 800b26a:	e7ed      	b.n	800b248 <__gethex+0x2fc>
 800b26c:	1e6f      	subs	r7, r5, #1
 800b26e:	f1ba 0f00 	cmp.w	sl, #0
 800b272:	d131      	bne.n	800b2d8 <__gethex+0x38c>
 800b274:	b127      	cbz	r7, 800b280 <__gethex+0x334>
 800b276:	4639      	mov	r1, r7
 800b278:	4620      	mov	r0, r4
 800b27a:	f000 fe3f 	bl	800befc <__any_on>
 800b27e:	4682      	mov	sl, r0
 800b280:	117b      	asrs	r3, r7, #5
 800b282:	2101      	movs	r1, #1
 800b284:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b288:	f007 071f 	and.w	r7, r7, #31
 800b28c:	fa01 f707 	lsl.w	r7, r1, r7
 800b290:	421f      	tst	r7, r3
 800b292:	4629      	mov	r1, r5
 800b294:	4620      	mov	r0, r4
 800b296:	bf18      	it	ne
 800b298:	f04a 0a02 	orrne.w	sl, sl, #2
 800b29c:	1b76      	subs	r6, r6, r5
 800b29e:	f7ff fdee 	bl	800ae7e <rshift>
 800b2a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b2a6:	2702      	movs	r7, #2
 800b2a8:	f1ba 0f00 	cmp.w	sl, #0
 800b2ac:	d048      	beq.n	800b340 <__gethex+0x3f4>
 800b2ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2b2:	2b02      	cmp	r3, #2
 800b2b4:	d015      	beq.n	800b2e2 <__gethex+0x396>
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d017      	beq.n	800b2ea <__gethex+0x39e>
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d109      	bne.n	800b2d2 <__gethex+0x386>
 800b2be:	f01a 0f02 	tst.w	sl, #2
 800b2c2:	d006      	beq.n	800b2d2 <__gethex+0x386>
 800b2c4:	f8d9 0000 	ldr.w	r0, [r9]
 800b2c8:	ea4a 0a00 	orr.w	sl, sl, r0
 800b2cc:	f01a 0f01 	tst.w	sl, #1
 800b2d0:	d10e      	bne.n	800b2f0 <__gethex+0x3a4>
 800b2d2:	f047 0710 	orr.w	r7, r7, #16
 800b2d6:	e033      	b.n	800b340 <__gethex+0x3f4>
 800b2d8:	f04f 0a01 	mov.w	sl, #1
 800b2dc:	e7d0      	b.n	800b280 <__gethex+0x334>
 800b2de:	2701      	movs	r7, #1
 800b2e0:	e7e2      	b.n	800b2a8 <__gethex+0x35c>
 800b2e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2e4:	f1c3 0301 	rsb	r3, r3, #1
 800b2e8:	9315      	str	r3, [sp, #84]	; 0x54
 800b2ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d0f0      	beq.n	800b2d2 <__gethex+0x386>
 800b2f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2f4:	f104 0314 	add.w	r3, r4, #20
 800b2f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b300:	f04f 0c00 	mov.w	ip, #0
 800b304:	4618      	mov	r0, r3
 800b306:	f853 2b04 	ldr.w	r2, [r3], #4
 800b30a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b30e:	d01c      	beq.n	800b34a <__gethex+0x3fe>
 800b310:	3201      	adds	r2, #1
 800b312:	6002      	str	r2, [r0, #0]
 800b314:	2f02      	cmp	r7, #2
 800b316:	f104 0314 	add.w	r3, r4, #20
 800b31a:	d13f      	bne.n	800b39c <__gethex+0x450>
 800b31c:	f8d8 2000 	ldr.w	r2, [r8]
 800b320:	3a01      	subs	r2, #1
 800b322:	42b2      	cmp	r2, r6
 800b324:	d10a      	bne.n	800b33c <__gethex+0x3f0>
 800b326:	1171      	asrs	r1, r6, #5
 800b328:	2201      	movs	r2, #1
 800b32a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b32e:	f006 061f 	and.w	r6, r6, #31
 800b332:	fa02 f606 	lsl.w	r6, r2, r6
 800b336:	421e      	tst	r6, r3
 800b338:	bf18      	it	ne
 800b33a:	4617      	movne	r7, r2
 800b33c:	f047 0720 	orr.w	r7, r7, #32
 800b340:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b342:	601c      	str	r4, [r3, #0]
 800b344:	9b04      	ldr	r3, [sp, #16]
 800b346:	601d      	str	r5, [r3, #0]
 800b348:	e695      	b.n	800b076 <__gethex+0x12a>
 800b34a:	4299      	cmp	r1, r3
 800b34c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b350:	d8d8      	bhi.n	800b304 <__gethex+0x3b8>
 800b352:	68a3      	ldr	r3, [r4, #8]
 800b354:	459b      	cmp	fp, r3
 800b356:	db19      	blt.n	800b38c <__gethex+0x440>
 800b358:	6861      	ldr	r1, [r4, #4]
 800b35a:	ee18 0a10 	vmov	r0, s16
 800b35e:	3101      	adds	r1, #1
 800b360:	f000 f92c 	bl	800b5bc <_Balloc>
 800b364:	4681      	mov	r9, r0
 800b366:	b918      	cbnz	r0, 800b370 <__gethex+0x424>
 800b368:	4b1a      	ldr	r3, [pc, #104]	; (800b3d4 <__gethex+0x488>)
 800b36a:	4602      	mov	r2, r0
 800b36c:	2184      	movs	r1, #132	; 0x84
 800b36e:	e6a8      	b.n	800b0c2 <__gethex+0x176>
 800b370:	6922      	ldr	r2, [r4, #16]
 800b372:	3202      	adds	r2, #2
 800b374:	f104 010c 	add.w	r1, r4, #12
 800b378:	0092      	lsls	r2, r2, #2
 800b37a:	300c      	adds	r0, #12
 800b37c:	f000 f910 	bl	800b5a0 <memcpy>
 800b380:	4621      	mov	r1, r4
 800b382:	ee18 0a10 	vmov	r0, s16
 800b386:	f000 f959 	bl	800b63c <_Bfree>
 800b38a:	464c      	mov	r4, r9
 800b38c:	6923      	ldr	r3, [r4, #16]
 800b38e:	1c5a      	adds	r2, r3, #1
 800b390:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b394:	6122      	str	r2, [r4, #16]
 800b396:	2201      	movs	r2, #1
 800b398:	615a      	str	r2, [r3, #20]
 800b39a:	e7bb      	b.n	800b314 <__gethex+0x3c8>
 800b39c:	6922      	ldr	r2, [r4, #16]
 800b39e:	455a      	cmp	r2, fp
 800b3a0:	dd0b      	ble.n	800b3ba <__gethex+0x46e>
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f7ff fd6a 	bl	800ae7e <rshift>
 800b3aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3ae:	3501      	adds	r5, #1
 800b3b0:	42ab      	cmp	r3, r5
 800b3b2:	f6ff aed0 	blt.w	800b156 <__gethex+0x20a>
 800b3b6:	2701      	movs	r7, #1
 800b3b8:	e7c0      	b.n	800b33c <__gethex+0x3f0>
 800b3ba:	f016 061f 	ands.w	r6, r6, #31
 800b3be:	d0fa      	beq.n	800b3b6 <__gethex+0x46a>
 800b3c0:	4453      	add	r3, sl
 800b3c2:	f1c6 0620 	rsb	r6, r6, #32
 800b3c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b3ca:	f000 f9e9 	bl	800b7a0 <__hi0bits>
 800b3ce:	42b0      	cmp	r0, r6
 800b3d0:	dbe7      	blt.n	800b3a2 <__gethex+0x456>
 800b3d2:	e7f0      	b.n	800b3b6 <__gethex+0x46a>
 800b3d4:	0800d088 	.word	0x0800d088

0800b3d8 <L_shift>:
 800b3d8:	f1c2 0208 	rsb	r2, r2, #8
 800b3dc:	0092      	lsls	r2, r2, #2
 800b3de:	b570      	push	{r4, r5, r6, lr}
 800b3e0:	f1c2 0620 	rsb	r6, r2, #32
 800b3e4:	6843      	ldr	r3, [r0, #4]
 800b3e6:	6804      	ldr	r4, [r0, #0]
 800b3e8:	fa03 f506 	lsl.w	r5, r3, r6
 800b3ec:	432c      	orrs	r4, r5
 800b3ee:	40d3      	lsrs	r3, r2
 800b3f0:	6004      	str	r4, [r0, #0]
 800b3f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3f6:	4288      	cmp	r0, r1
 800b3f8:	d3f4      	bcc.n	800b3e4 <L_shift+0xc>
 800b3fa:	bd70      	pop	{r4, r5, r6, pc}

0800b3fc <__match>:
 800b3fc:	b530      	push	{r4, r5, lr}
 800b3fe:	6803      	ldr	r3, [r0, #0]
 800b400:	3301      	adds	r3, #1
 800b402:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b406:	b914      	cbnz	r4, 800b40e <__match+0x12>
 800b408:	6003      	str	r3, [r0, #0]
 800b40a:	2001      	movs	r0, #1
 800b40c:	bd30      	pop	{r4, r5, pc}
 800b40e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b412:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b416:	2d19      	cmp	r5, #25
 800b418:	bf98      	it	ls
 800b41a:	3220      	addls	r2, #32
 800b41c:	42a2      	cmp	r2, r4
 800b41e:	d0f0      	beq.n	800b402 <__match+0x6>
 800b420:	2000      	movs	r0, #0
 800b422:	e7f3      	b.n	800b40c <__match+0x10>

0800b424 <__hexnan>:
 800b424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b428:	680b      	ldr	r3, [r1, #0]
 800b42a:	115e      	asrs	r6, r3, #5
 800b42c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b430:	f013 031f 	ands.w	r3, r3, #31
 800b434:	b087      	sub	sp, #28
 800b436:	bf18      	it	ne
 800b438:	3604      	addne	r6, #4
 800b43a:	2500      	movs	r5, #0
 800b43c:	1f37      	subs	r7, r6, #4
 800b43e:	4690      	mov	r8, r2
 800b440:	6802      	ldr	r2, [r0, #0]
 800b442:	9301      	str	r3, [sp, #4]
 800b444:	4682      	mov	sl, r0
 800b446:	f846 5c04 	str.w	r5, [r6, #-4]
 800b44a:	46b9      	mov	r9, r7
 800b44c:	463c      	mov	r4, r7
 800b44e:	9502      	str	r5, [sp, #8]
 800b450:	46ab      	mov	fp, r5
 800b452:	7851      	ldrb	r1, [r2, #1]
 800b454:	1c53      	adds	r3, r2, #1
 800b456:	9303      	str	r3, [sp, #12]
 800b458:	b341      	cbz	r1, 800b4ac <__hexnan+0x88>
 800b45a:	4608      	mov	r0, r1
 800b45c:	9205      	str	r2, [sp, #20]
 800b45e:	9104      	str	r1, [sp, #16]
 800b460:	f7ff fd5f 	bl	800af22 <__hexdig_fun>
 800b464:	2800      	cmp	r0, #0
 800b466:	d14f      	bne.n	800b508 <__hexnan+0xe4>
 800b468:	9904      	ldr	r1, [sp, #16]
 800b46a:	9a05      	ldr	r2, [sp, #20]
 800b46c:	2920      	cmp	r1, #32
 800b46e:	d818      	bhi.n	800b4a2 <__hexnan+0x7e>
 800b470:	9b02      	ldr	r3, [sp, #8]
 800b472:	459b      	cmp	fp, r3
 800b474:	dd13      	ble.n	800b49e <__hexnan+0x7a>
 800b476:	454c      	cmp	r4, r9
 800b478:	d206      	bcs.n	800b488 <__hexnan+0x64>
 800b47a:	2d07      	cmp	r5, #7
 800b47c:	dc04      	bgt.n	800b488 <__hexnan+0x64>
 800b47e:	462a      	mov	r2, r5
 800b480:	4649      	mov	r1, r9
 800b482:	4620      	mov	r0, r4
 800b484:	f7ff ffa8 	bl	800b3d8 <L_shift>
 800b488:	4544      	cmp	r4, r8
 800b48a:	d950      	bls.n	800b52e <__hexnan+0x10a>
 800b48c:	2300      	movs	r3, #0
 800b48e:	f1a4 0904 	sub.w	r9, r4, #4
 800b492:	f844 3c04 	str.w	r3, [r4, #-4]
 800b496:	f8cd b008 	str.w	fp, [sp, #8]
 800b49a:	464c      	mov	r4, r9
 800b49c:	461d      	mov	r5, r3
 800b49e:	9a03      	ldr	r2, [sp, #12]
 800b4a0:	e7d7      	b.n	800b452 <__hexnan+0x2e>
 800b4a2:	2929      	cmp	r1, #41	; 0x29
 800b4a4:	d156      	bne.n	800b554 <__hexnan+0x130>
 800b4a6:	3202      	adds	r2, #2
 800b4a8:	f8ca 2000 	str.w	r2, [sl]
 800b4ac:	f1bb 0f00 	cmp.w	fp, #0
 800b4b0:	d050      	beq.n	800b554 <__hexnan+0x130>
 800b4b2:	454c      	cmp	r4, r9
 800b4b4:	d206      	bcs.n	800b4c4 <__hexnan+0xa0>
 800b4b6:	2d07      	cmp	r5, #7
 800b4b8:	dc04      	bgt.n	800b4c4 <__hexnan+0xa0>
 800b4ba:	462a      	mov	r2, r5
 800b4bc:	4649      	mov	r1, r9
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f7ff ff8a 	bl	800b3d8 <L_shift>
 800b4c4:	4544      	cmp	r4, r8
 800b4c6:	d934      	bls.n	800b532 <__hexnan+0x10e>
 800b4c8:	f1a8 0204 	sub.w	r2, r8, #4
 800b4cc:	4623      	mov	r3, r4
 800b4ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4d2:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4d6:	429f      	cmp	r7, r3
 800b4d8:	d2f9      	bcs.n	800b4ce <__hexnan+0xaa>
 800b4da:	1b3b      	subs	r3, r7, r4
 800b4dc:	f023 0303 	bic.w	r3, r3, #3
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	3401      	adds	r4, #1
 800b4e4:	3e03      	subs	r6, #3
 800b4e6:	42b4      	cmp	r4, r6
 800b4e8:	bf88      	it	hi
 800b4ea:	2304      	movhi	r3, #4
 800b4ec:	4443      	add	r3, r8
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f843 2b04 	str.w	r2, [r3], #4
 800b4f4:	429f      	cmp	r7, r3
 800b4f6:	d2fb      	bcs.n	800b4f0 <__hexnan+0xcc>
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	b91b      	cbnz	r3, 800b504 <__hexnan+0xe0>
 800b4fc:	4547      	cmp	r7, r8
 800b4fe:	d127      	bne.n	800b550 <__hexnan+0x12c>
 800b500:	2301      	movs	r3, #1
 800b502:	603b      	str	r3, [r7, #0]
 800b504:	2005      	movs	r0, #5
 800b506:	e026      	b.n	800b556 <__hexnan+0x132>
 800b508:	3501      	adds	r5, #1
 800b50a:	2d08      	cmp	r5, #8
 800b50c:	f10b 0b01 	add.w	fp, fp, #1
 800b510:	dd06      	ble.n	800b520 <__hexnan+0xfc>
 800b512:	4544      	cmp	r4, r8
 800b514:	d9c3      	bls.n	800b49e <__hexnan+0x7a>
 800b516:	2300      	movs	r3, #0
 800b518:	f844 3c04 	str.w	r3, [r4, #-4]
 800b51c:	2501      	movs	r5, #1
 800b51e:	3c04      	subs	r4, #4
 800b520:	6822      	ldr	r2, [r4, #0]
 800b522:	f000 000f 	and.w	r0, r0, #15
 800b526:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b52a:	6022      	str	r2, [r4, #0]
 800b52c:	e7b7      	b.n	800b49e <__hexnan+0x7a>
 800b52e:	2508      	movs	r5, #8
 800b530:	e7b5      	b.n	800b49e <__hexnan+0x7a>
 800b532:	9b01      	ldr	r3, [sp, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d0df      	beq.n	800b4f8 <__hexnan+0xd4>
 800b538:	f04f 32ff 	mov.w	r2, #4294967295
 800b53c:	f1c3 0320 	rsb	r3, r3, #32
 800b540:	fa22 f303 	lsr.w	r3, r2, r3
 800b544:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b548:	401a      	ands	r2, r3
 800b54a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b54e:	e7d3      	b.n	800b4f8 <__hexnan+0xd4>
 800b550:	3f04      	subs	r7, #4
 800b552:	e7d1      	b.n	800b4f8 <__hexnan+0xd4>
 800b554:	2004      	movs	r0, #4
 800b556:	b007      	add	sp, #28
 800b558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b55c <_localeconv_r>:
 800b55c:	4800      	ldr	r0, [pc, #0]	; (800b560 <_localeconv_r+0x4>)
 800b55e:	4770      	bx	lr
 800b560:	20000164 	.word	0x20000164

0800b564 <__retarget_lock_init_recursive>:
 800b564:	4770      	bx	lr

0800b566 <__retarget_lock_acquire_recursive>:
 800b566:	4770      	bx	lr

0800b568 <__retarget_lock_release_recursive>:
 800b568:	4770      	bx	lr
	...

0800b56c <malloc>:
 800b56c:	4b02      	ldr	r3, [pc, #8]	; (800b578 <malloc+0xc>)
 800b56e:	4601      	mov	r1, r0
 800b570:	6818      	ldr	r0, [r3, #0]
 800b572:	f000 bd67 	b.w	800c044 <_malloc_r>
 800b576:	bf00      	nop
 800b578:	2000000c 	.word	0x2000000c

0800b57c <__ascii_mbtowc>:
 800b57c:	b082      	sub	sp, #8
 800b57e:	b901      	cbnz	r1, 800b582 <__ascii_mbtowc+0x6>
 800b580:	a901      	add	r1, sp, #4
 800b582:	b142      	cbz	r2, 800b596 <__ascii_mbtowc+0x1a>
 800b584:	b14b      	cbz	r3, 800b59a <__ascii_mbtowc+0x1e>
 800b586:	7813      	ldrb	r3, [r2, #0]
 800b588:	600b      	str	r3, [r1, #0]
 800b58a:	7812      	ldrb	r2, [r2, #0]
 800b58c:	1e10      	subs	r0, r2, #0
 800b58e:	bf18      	it	ne
 800b590:	2001      	movne	r0, #1
 800b592:	b002      	add	sp, #8
 800b594:	4770      	bx	lr
 800b596:	4610      	mov	r0, r2
 800b598:	e7fb      	b.n	800b592 <__ascii_mbtowc+0x16>
 800b59a:	f06f 0001 	mvn.w	r0, #1
 800b59e:	e7f8      	b.n	800b592 <__ascii_mbtowc+0x16>

0800b5a0 <memcpy>:
 800b5a0:	440a      	add	r2, r1
 800b5a2:	4291      	cmp	r1, r2
 800b5a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5a8:	d100      	bne.n	800b5ac <memcpy+0xc>
 800b5aa:	4770      	bx	lr
 800b5ac:	b510      	push	{r4, lr}
 800b5ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5b6:	4291      	cmp	r1, r2
 800b5b8:	d1f9      	bne.n	800b5ae <memcpy+0xe>
 800b5ba:	bd10      	pop	{r4, pc}

0800b5bc <_Balloc>:
 800b5bc:	b570      	push	{r4, r5, r6, lr}
 800b5be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	460d      	mov	r5, r1
 800b5c4:	b976      	cbnz	r6, 800b5e4 <_Balloc+0x28>
 800b5c6:	2010      	movs	r0, #16
 800b5c8:	f7ff ffd0 	bl	800b56c <malloc>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	6260      	str	r0, [r4, #36]	; 0x24
 800b5d0:	b920      	cbnz	r0, 800b5dc <_Balloc+0x20>
 800b5d2:	4b18      	ldr	r3, [pc, #96]	; (800b634 <_Balloc+0x78>)
 800b5d4:	4818      	ldr	r0, [pc, #96]	; (800b638 <_Balloc+0x7c>)
 800b5d6:	2166      	movs	r1, #102	; 0x66
 800b5d8:	f001 f9ae 	bl	800c938 <__assert_func>
 800b5dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5e0:	6006      	str	r6, [r0, #0]
 800b5e2:	60c6      	str	r6, [r0, #12]
 800b5e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b5e6:	68f3      	ldr	r3, [r6, #12]
 800b5e8:	b183      	cbz	r3, 800b60c <_Balloc+0x50>
 800b5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5f2:	b9b8      	cbnz	r0, 800b624 <_Balloc+0x68>
 800b5f4:	2101      	movs	r1, #1
 800b5f6:	fa01 f605 	lsl.w	r6, r1, r5
 800b5fa:	1d72      	adds	r2, r6, #5
 800b5fc:	0092      	lsls	r2, r2, #2
 800b5fe:	4620      	mov	r0, r4
 800b600:	f000 fc9d 	bl	800bf3e <_calloc_r>
 800b604:	b160      	cbz	r0, 800b620 <_Balloc+0x64>
 800b606:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b60a:	e00e      	b.n	800b62a <_Balloc+0x6e>
 800b60c:	2221      	movs	r2, #33	; 0x21
 800b60e:	2104      	movs	r1, #4
 800b610:	4620      	mov	r0, r4
 800b612:	f000 fc94 	bl	800bf3e <_calloc_r>
 800b616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b618:	60f0      	str	r0, [r6, #12]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d1e4      	bne.n	800b5ea <_Balloc+0x2e>
 800b620:	2000      	movs	r0, #0
 800b622:	bd70      	pop	{r4, r5, r6, pc}
 800b624:	6802      	ldr	r2, [r0, #0]
 800b626:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b62a:	2300      	movs	r3, #0
 800b62c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b630:	e7f7      	b.n	800b622 <_Balloc+0x66>
 800b632:	bf00      	nop
 800b634:	0800d016 	.word	0x0800d016
 800b638:	0800d178 	.word	0x0800d178

0800b63c <_Bfree>:
 800b63c:	b570      	push	{r4, r5, r6, lr}
 800b63e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b640:	4605      	mov	r5, r0
 800b642:	460c      	mov	r4, r1
 800b644:	b976      	cbnz	r6, 800b664 <_Bfree+0x28>
 800b646:	2010      	movs	r0, #16
 800b648:	f7ff ff90 	bl	800b56c <malloc>
 800b64c:	4602      	mov	r2, r0
 800b64e:	6268      	str	r0, [r5, #36]	; 0x24
 800b650:	b920      	cbnz	r0, 800b65c <_Bfree+0x20>
 800b652:	4b09      	ldr	r3, [pc, #36]	; (800b678 <_Bfree+0x3c>)
 800b654:	4809      	ldr	r0, [pc, #36]	; (800b67c <_Bfree+0x40>)
 800b656:	218a      	movs	r1, #138	; 0x8a
 800b658:	f001 f96e 	bl	800c938 <__assert_func>
 800b65c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b660:	6006      	str	r6, [r0, #0]
 800b662:	60c6      	str	r6, [r0, #12]
 800b664:	b13c      	cbz	r4, 800b676 <_Bfree+0x3a>
 800b666:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b668:	6862      	ldr	r2, [r4, #4]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b670:	6021      	str	r1, [r4, #0]
 800b672:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b676:	bd70      	pop	{r4, r5, r6, pc}
 800b678:	0800d016 	.word	0x0800d016
 800b67c:	0800d178 	.word	0x0800d178

0800b680 <__multadd>:
 800b680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b684:	690d      	ldr	r5, [r1, #16]
 800b686:	4607      	mov	r7, r0
 800b688:	460c      	mov	r4, r1
 800b68a:	461e      	mov	r6, r3
 800b68c:	f101 0c14 	add.w	ip, r1, #20
 800b690:	2000      	movs	r0, #0
 800b692:	f8dc 3000 	ldr.w	r3, [ip]
 800b696:	b299      	uxth	r1, r3
 800b698:	fb02 6101 	mla	r1, r2, r1, r6
 800b69c:	0c1e      	lsrs	r6, r3, #16
 800b69e:	0c0b      	lsrs	r3, r1, #16
 800b6a0:	fb02 3306 	mla	r3, r2, r6, r3
 800b6a4:	b289      	uxth	r1, r1
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b6ac:	4285      	cmp	r5, r0
 800b6ae:	f84c 1b04 	str.w	r1, [ip], #4
 800b6b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b6b6:	dcec      	bgt.n	800b692 <__multadd+0x12>
 800b6b8:	b30e      	cbz	r6, 800b6fe <__multadd+0x7e>
 800b6ba:	68a3      	ldr	r3, [r4, #8]
 800b6bc:	42ab      	cmp	r3, r5
 800b6be:	dc19      	bgt.n	800b6f4 <__multadd+0x74>
 800b6c0:	6861      	ldr	r1, [r4, #4]
 800b6c2:	4638      	mov	r0, r7
 800b6c4:	3101      	adds	r1, #1
 800b6c6:	f7ff ff79 	bl	800b5bc <_Balloc>
 800b6ca:	4680      	mov	r8, r0
 800b6cc:	b928      	cbnz	r0, 800b6da <__multadd+0x5a>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	4b0c      	ldr	r3, [pc, #48]	; (800b704 <__multadd+0x84>)
 800b6d2:	480d      	ldr	r0, [pc, #52]	; (800b708 <__multadd+0x88>)
 800b6d4:	21b5      	movs	r1, #181	; 0xb5
 800b6d6:	f001 f92f 	bl	800c938 <__assert_func>
 800b6da:	6922      	ldr	r2, [r4, #16]
 800b6dc:	3202      	adds	r2, #2
 800b6de:	f104 010c 	add.w	r1, r4, #12
 800b6e2:	0092      	lsls	r2, r2, #2
 800b6e4:	300c      	adds	r0, #12
 800b6e6:	f7ff ff5b 	bl	800b5a0 <memcpy>
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	4638      	mov	r0, r7
 800b6ee:	f7ff ffa5 	bl	800b63c <_Bfree>
 800b6f2:	4644      	mov	r4, r8
 800b6f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6f8:	3501      	adds	r5, #1
 800b6fa:	615e      	str	r6, [r3, #20]
 800b6fc:	6125      	str	r5, [r4, #16]
 800b6fe:	4620      	mov	r0, r4
 800b700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b704:	0800d088 	.word	0x0800d088
 800b708:	0800d178 	.word	0x0800d178

0800b70c <__s2b>:
 800b70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b710:	460c      	mov	r4, r1
 800b712:	4615      	mov	r5, r2
 800b714:	461f      	mov	r7, r3
 800b716:	2209      	movs	r2, #9
 800b718:	3308      	adds	r3, #8
 800b71a:	4606      	mov	r6, r0
 800b71c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b720:	2100      	movs	r1, #0
 800b722:	2201      	movs	r2, #1
 800b724:	429a      	cmp	r2, r3
 800b726:	db09      	blt.n	800b73c <__s2b+0x30>
 800b728:	4630      	mov	r0, r6
 800b72a:	f7ff ff47 	bl	800b5bc <_Balloc>
 800b72e:	b940      	cbnz	r0, 800b742 <__s2b+0x36>
 800b730:	4602      	mov	r2, r0
 800b732:	4b19      	ldr	r3, [pc, #100]	; (800b798 <__s2b+0x8c>)
 800b734:	4819      	ldr	r0, [pc, #100]	; (800b79c <__s2b+0x90>)
 800b736:	21ce      	movs	r1, #206	; 0xce
 800b738:	f001 f8fe 	bl	800c938 <__assert_func>
 800b73c:	0052      	lsls	r2, r2, #1
 800b73e:	3101      	adds	r1, #1
 800b740:	e7f0      	b.n	800b724 <__s2b+0x18>
 800b742:	9b08      	ldr	r3, [sp, #32]
 800b744:	6143      	str	r3, [r0, #20]
 800b746:	2d09      	cmp	r5, #9
 800b748:	f04f 0301 	mov.w	r3, #1
 800b74c:	6103      	str	r3, [r0, #16]
 800b74e:	dd16      	ble.n	800b77e <__s2b+0x72>
 800b750:	f104 0909 	add.w	r9, r4, #9
 800b754:	46c8      	mov	r8, r9
 800b756:	442c      	add	r4, r5
 800b758:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b75c:	4601      	mov	r1, r0
 800b75e:	3b30      	subs	r3, #48	; 0x30
 800b760:	220a      	movs	r2, #10
 800b762:	4630      	mov	r0, r6
 800b764:	f7ff ff8c 	bl	800b680 <__multadd>
 800b768:	45a0      	cmp	r8, r4
 800b76a:	d1f5      	bne.n	800b758 <__s2b+0x4c>
 800b76c:	f1a5 0408 	sub.w	r4, r5, #8
 800b770:	444c      	add	r4, r9
 800b772:	1b2d      	subs	r5, r5, r4
 800b774:	1963      	adds	r3, r4, r5
 800b776:	42bb      	cmp	r3, r7
 800b778:	db04      	blt.n	800b784 <__s2b+0x78>
 800b77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77e:	340a      	adds	r4, #10
 800b780:	2509      	movs	r5, #9
 800b782:	e7f6      	b.n	800b772 <__s2b+0x66>
 800b784:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b788:	4601      	mov	r1, r0
 800b78a:	3b30      	subs	r3, #48	; 0x30
 800b78c:	220a      	movs	r2, #10
 800b78e:	4630      	mov	r0, r6
 800b790:	f7ff ff76 	bl	800b680 <__multadd>
 800b794:	e7ee      	b.n	800b774 <__s2b+0x68>
 800b796:	bf00      	nop
 800b798:	0800d088 	.word	0x0800d088
 800b79c:	0800d178 	.word	0x0800d178

0800b7a0 <__hi0bits>:
 800b7a0:	0c03      	lsrs	r3, r0, #16
 800b7a2:	041b      	lsls	r3, r3, #16
 800b7a4:	b9d3      	cbnz	r3, 800b7dc <__hi0bits+0x3c>
 800b7a6:	0400      	lsls	r0, r0, #16
 800b7a8:	2310      	movs	r3, #16
 800b7aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b7ae:	bf04      	itt	eq
 800b7b0:	0200      	lsleq	r0, r0, #8
 800b7b2:	3308      	addeq	r3, #8
 800b7b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b7b8:	bf04      	itt	eq
 800b7ba:	0100      	lsleq	r0, r0, #4
 800b7bc:	3304      	addeq	r3, #4
 800b7be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b7c2:	bf04      	itt	eq
 800b7c4:	0080      	lsleq	r0, r0, #2
 800b7c6:	3302      	addeq	r3, #2
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	db05      	blt.n	800b7d8 <__hi0bits+0x38>
 800b7cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b7d0:	f103 0301 	add.w	r3, r3, #1
 800b7d4:	bf08      	it	eq
 800b7d6:	2320      	moveq	r3, #32
 800b7d8:	4618      	mov	r0, r3
 800b7da:	4770      	bx	lr
 800b7dc:	2300      	movs	r3, #0
 800b7de:	e7e4      	b.n	800b7aa <__hi0bits+0xa>

0800b7e0 <__lo0bits>:
 800b7e0:	6803      	ldr	r3, [r0, #0]
 800b7e2:	f013 0207 	ands.w	r2, r3, #7
 800b7e6:	4601      	mov	r1, r0
 800b7e8:	d00b      	beq.n	800b802 <__lo0bits+0x22>
 800b7ea:	07da      	lsls	r2, r3, #31
 800b7ec:	d423      	bmi.n	800b836 <__lo0bits+0x56>
 800b7ee:	0798      	lsls	r0, r3, #30
 800b7f0:	bf49      	itett	mi
 800b7f2:	085b      	lsrmi	r3, r3, #1
 800b7f4:	089b      	lsrpl	r3, r3, #2
 800b7f6:	2001      	movmi	r0, #1
 800b7f8:	600b      	strmi	r3, [r1, #0]
 800b7fa:	bf5c      	itt	pl
 800b7fc:	600b      	strpl	r3, [r1, #0]
 800b7fe:	2002      	movpl	r0, #2
 800b800:	4770      	bx	lr
 800b802:	b298      	uxth	r0, r3
 800b804:	b9a8      	cbnz	r0, 800b832 <__lo0bits+0x52>
 800b806:	0c1b      	lsrs	r3, r3, #16
 800b808:	2010      	movs	r0, #16
 800b80a:	b2da      	uxtb	r2, r3
 800b80c:	b90a      	cbnz	r2, 800b812 <__lo0bits+0x32>
 800b80e:	3008      	adds	r0, #8
 800b810:	0a1b      	lsrs	r3, r3, #8
 800b812:	071a      	lsls	r2, r3, #28
 800b814:	bf04      	itt	eq
 800b816:	091b      	lsreq	r3, r3, #4
 800b818:	3004      	addeq	r0, #4
 800b81a:	079a      	lsls	r2, r3, #30
 800b81c:	bf04      	itt	eq
 800b81e:	089b      	lsreq	r3, r3, #2
 800b820:	3002      	addeq	r0, #2
 800b822:	07da      	lsls	r2, r3, #31
 800b824:	d403      	bmi.n	800b82e <__lo0bits+0x4e>
 800b826:	085b      	lsrs	r3, r3, #1
 800b828:	f100 0001 	add.w	r0, r0, #1
 800b82c:	d005      	beq.n	800b83a <__lo0bits+0x5a>
 800b82e:	600b      	str	r3, [r1, #0]
 800b830:	4770      	bx	lr
 800b832:	4610      	mov	r0, r2
 800b834:	e7e9      	b.n	800b80a <__lo0bits+0x2a>
 800b836:	2000      	movs	r0, #0
 800b838:	4770      	bx	lr
 800b83a:	2020      	movs	r0, #32
 800b83c:	4770      	bx	lr
	...

0800b840 <__i2b>:
 800b840:	b510      	push	{r4, lr}
 800b842:	460c      	mov	r4, r1
 800b844:	2101      	movs	r1, #1
 800b846:	f7ff feb9 	bl	800b5bc <_Balloc>
 800b84a:	4602      	mov	r2, r0
 800b84c:	b928      	cbnz	r0, 800b85a <__i2b+0x1a>
 800b84e:	4b05      	ldr	r3, [pc, #20]	; (800b864 <__i2b+0x24>)
 800b850:	4805      	ldr	r0, [pc, #20]	; (800b868 <__i2b+0x28>)
 800b852:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b856:	f001 f86f 	bl	800c938 <__assert_func>
 800b85a:	2301      	movs	r3, #1
 800b85c:	6144      	str	r4, [r0, #20]
 800b85e:	6103      	str	r3, [r0, #16]
 800b860:	bd10      	pop	{r4, pc}
 800b862:	bf00      	nop
 800b864:	0800d088 	.word	0x0800d088
 800b868:	0800d178 	.word	0x0800d178

0800b86c <__multiply>:
 800b86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b870:	4691      	mov	r9, r2
 800b872:	690a      	ldr	r2, [r1, #16]
 800b874:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b878:	429a      	cmp	r2, r3
 800b87a:	bfb8      	it	lt
 800b87c:	460b      	movlt	r3, r1
 800b87e:	460c      	mov	r4, r1
 800b880:	bfbc      	itt	lt
 800b882:	464c      	movlt	r4, r9
 800b884:	4699      	movlt	r9, r3
 800b886:	6927      	ldr	r7, [r4, #16]
 800b888:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b88c:	68a3      	ldr	r3, [r4, #8]
 800b88e:	6861      	ldr	r1, [r4, #4]
 800b890:	eb07 060a 	add.w	r6, r7, sl
 800b894:	42b3      	cmp	r3, r6
 800b896:	b085      	sub	sp, #20
 800b898:	bfb8      	it	lt
 800b89a:	3101      	addlt	r1, #1
 800b89c:	f7ff fe8e 	bl	800b5bc <_Balloc>
 800b8a0:	b930      	cbnz	r0, 800b8b0 <__multiply+0x44>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	4b44      	ldr	r3, [pc, #272]	; (800b9b8 <__multiply+0x14c>)
 800b8a6:	4845      	ldr	r0, [pc, #276]	; (800b9bc <__multiply+0x150>)
 800b8a8:	f240 115d 	movw	r1, #349	; 0x15d
 800b8ac:	f001 f844 	bl	800c938 <__assert_func>
 800b8b0:	f100 0514 	add.w	r5, r0, #20
 800b8b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b8b8:	462b      	mov	r3, r5
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	4543      	cmp	r3, r8
 800b8be:	d321      	bcc.n	800b904 <__multiply+0x98>
 800b8c0:	f104 0314 	add.w	r3, r4, #20
 800b8c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b8c8:	f109 0314 	add.w	r3, r9, #20
 800b8cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b8d0:	9202      	str	r2, [sp, #8]
 800b8d2:	1b3a      	subs	r2, r7, r4
 800b8d4:	3a15      	subs	r2, #21
 800b8d6:	f022 0203 	bic.w	r2, r2, #3
 800b8da:	3204      	adds	r2, #4
 800b8dc:	f104 0115 	add.w	r1, r4, #21
 800b8e0:	428f      	cmp	r7, r1
 800b8e2:	bf38      	it	cc
 800b8e4:	2204      	movcc	r2, #4
 800b8e6:	9201      	str	r2, [sp, #4]
 800b8e8:	9a02      	ldr	r2, [sp, #8]
 800b8ea:	9303      	str	r3, [sp, #12]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d80c      	bhi.n	800b90a <__multiply+0x9e>
 800b8f0:	2e00      	cmp	r6, #0
 800b8f2:	dd03      	ble.n	800b8fc <__multiply+0x90>
 800b8f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d05a      	beq.n	800b9b2 <__multiply+0x146>
 800b8fc:	6106      	str	r6, [r0, #16]
 800b8fe:	b005      	add	sp, #20
 800b900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b904:	f843 2b04 	str.w	r2, [r3], #4
 800b908:	e7d8      	b.n	800b8bc <__multiply+0x50>
 800b90a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b90e:	f1ba 0f00 	cmp.w	sl, #0
 800b912:	d024      	beq.n	800b95e <__multiply+0xf2>
 800b914:	f104 0e14 	add.w	lr, r4, #20
 800b918:	46a9      	mov	r9, r5
 800b91a:	f04f 0c00 	mov.w	ip, #0
 800b91e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b922:	f8d9 1000 	ldr.w	r1, [r9]
 800b926:	fa1f fb82 	uxth.w	fp, r2
 800b92a:	b289      	uxth	r1, r1
 800b92c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b930:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b934:	f8d9 2000 	ldr.w	r2, [r9]
 800b938:	4461      	add	r1, ip
 800b93a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b93e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b942:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b946:	b289      	uxth	r1, r1
 800b948:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b94c:	4577      	cmp	r7, lr
 800b94e:	f849 1b04 	str.w	r1, [r9], #4
 800b952:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b956:	d8e2      	bhi.n	800b91e <__multiply+0xb2>
 800b958:	9a01      	ldr	r2, [sp, #4]
 800b95a:	f845 c002 	str.w	ip, [r5, r2]
 800b95e:	9a03      	ldr	r2, [sp, #12]
 800b960:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b964:	3304      	adds	r3, #4
 800b966:	f1b9 0f00 	cmp.w	r9, #0
 800b96a:	d020      	beq.n	800b9ae <__multiply+0x142>
 800b96c:	6829      	ldr	r1, [r5, #0]
 800b96e:	f104 0c14 	add.w	ip, r4, #20
 800b972:	46ae      	mov	lr, r5
 800b974:	f04f 0a00 	mov.w	sl, #0
 800b978:	f8bc b000 	ldrh.w	fp, [ip]
 800b97c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b980:	fb09 220b 	mla	r2, r9, fp, r2
 800b984:	4492      	add	sl, r2
 800b986:	b289      	uxth	r1, r1
 800b988:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b98c:	f84e 1b04 	str.w	r1, [lr], #4
 800b990:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b994:	f8be 1000 	ldrh.w	r1, [lr]
 800b998:	0c12      	lsrs	r2, r2, #16
 800b99a:	fb09 1102 	mla	r1, r9, r2, r1
 800b99e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b9a2:	4567      	cmp	r7, ip
 800b9a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9a8:	d8e6      	bhi.n	800b978 <__multiply+0x10c>
 800b9aa:	9a01      	ldr	r2, [sp, #4]
 800b9ac:	50a9      	str	r1, [r5, r2]
 800b9ae:	3504      	adds	r5, #4
 800b9b0:	e79a      	b.n	800b8e8 <__multiply+0x7c>
 800b9b2:	3e01      	subs	r6, #1
 800b9b4:	e79c      	b.n	800b8f0 <__multiply+0x84>
 800b9b6:	bf00      	nop
 800b9b8:	0800d088 	.word	0x0800d088
 800b9bc:	0800d178 	.word	0x0800d178

0800b9c0 <__pow5mult>:
 800b9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c4:	4615      	mov	r5, r2
 800b9c6:	f012 0203 	ands.w	r2, r2, #3
 800b9ca:	4606      	mov	r6, r0
 800b9cc:	460f      	mov	r7, r1
 800b9ce:	d007      	beq.n	800b9e0 <__pow5mult+0x20>
 800b9d0:	4c25      	ldr	r4, [pc, #148]	; (800ba68 <__pow5mult+0xa8>)
 800b9d2:	3a01      	subs	r2, #1
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9da:	f7ff fe51 	bl	800b680 <__multadd>
 800b9de:	4607      	mov	r7, r0
 800b9e0:	10ad      	asrs	r5, r5, #2
 800b9e2:	d03d      	beq.n	800ba60 <__pow5mult+0xa0>
 800b9e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b9e6:	b97c      	cbnz	r4, 800ba08 <__pow5mult+0x48>
 800b9e8:	2010      	movs	r0, #16
 800b9ea:	f7ff fdbf 	bl	800b56c <malloc>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	6270      	str	r0, [r6, #36]	; 0x24
 800b9f2:	b928      	cbnz	r0, 800ba00 <__pow5mult+0x40>
 800b9f4:	4b1d      	ldr	r3, [pc, #116]	; (800ba6c <__pow5mult+0xac>)
 800b9f6:	481e      	ldr	r0, [pc, #120]	; (800ba70 <__pow5mult+0xb0>)
 800b9f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b9fc:	f000 ff9c 	bl	800c938 <__assert_func>
 800ba00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba04:	6004      	str	r4, [r0, #0]
 800ba06:	60c4      	str	r4, [r0, #12]
 800ba08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba10:	b94c      	cbnz	r4, 800ba26 <__pow5mult+0x66>
 800ba12:	f240 2171 	movw	r1, #625	; 0x271
 800ba16:	4630      	mov	r0, r6
 800ba18:	f7ff ff12 	bl	800b840 <__i2b>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba22:	4604      	mov	r4, r0
 800ba24:	6003      	str	r3, [r0, #0]
 800ba26:	f04f 0900 	mov.w	r9, #0
 800ba2a:	07eb      	lsls	r3, r5, #31
 800ba2c:	d50a      	bpl.n	800ba44 <__pow5mult+0x84>
 800ba2e:	4639      	mov	r1, r7
 800ba30:	4622      	mov	r2, r4
 800ba32:	4630      	mov	r0, r6
 800ba34:	f7ff ff1a 	bl	800b86c <__multiply>
 800ba38:	4639      	mov	r1, r7
 800ba3a:	4680      	mov	r8, r0
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	f7ff fdfd 	bl	800b63c <_Bfree>
 800ba42:	4647      	mov	r7, r8
 800ba44:	106d      	asrs	r5, r5, #1
 800ba46:	d00b      	beq.n	800ba60 <__pow5mult+0xa0>
 800ba48:	6820      	ldr	r0, [r4, #0]
 800ba4a:	b938      	cbnz	r0, 800ba5c <__pow5mult+0x9c>
 800ba4c:	4622      	mov	r2, r4
 800ba4e:	4621      	mov	r1, r4
 800ba50:	4630      	mov	r0, r6
 800ba52:	f7ff ff0b 	bl	800b86c <__multiply>
 800ba56:	6020      	str	r0, [r4, #0]
 800ba58:	f8c0 9000 	str.w	r9, [r0]
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	e7e4      	b.n	800ba2a <__pow5mult+0x6a>
 800ba60:	4638      	mov	r0, r7
 800ba62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba66:	bf00      	nop
 800ba68:	0800d2c8 	.word	0x0800d2c8
 800ba6c:	0800d016 	.word	0x0800d016
 800ba70:	0800d178 	.word	0x0800d178

0800ba74 <__lshift>:
 800ba74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba78:	460c      	mov	r4, r1
 800ba7a:	6849      	ldr	r1, [r1, #4]
 800ba7c:	6923      	ldr	r3, [r4, #16]
 800ba7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba82:	68a3      	ldr	r3, [r4, #8]
 800ba84:	4607      	mov	r7, r0
 800ba86:	4691      	mov	r9, r2
 800ba88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba8c:	f108 0601 	add.w	r6, r8, #1
 800ba90:	42b3      	cmp	r3, r6
 800ba92:	db0b      	blt.n	800baac <__lshift+0x38>
 800ba94:	4638      	mov	r0, r7
 800ba96:	f7ff fd91 	bl	800b5bc <_Balloc>
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	b948      	cbnz	r0, 800bab2 <__lshift+0x3e>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	4b2a      	ldr	r3, [pc, #168]	; (800bb4c <__lshift+0xd8>)
 800baa2:	482b      	ldr	r0, [pc, #172]	; (800bb50 <__lshift+0xdc>)
 800baa4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800baa8:	f000 ff46 	bl	800c938 <__assert_func>
 800baac:	3101      	adds	r1, #1
 800baae:	005b      	lsls	r3, r3, #1
 800bab0:	e7ee      	b.n	800ba90 <__lshift+0x1c>
 800bab2:	2300      	movs	r3, #0
 800bab4:	f100 0114 	add.w	r1, r0, #20
 800bab8:	f100 0210 	add.w	r2, r0, #16
 800babc:	4618      	mov	r0, r3
 800babe:	4553      	cmp	r3, sl
 800bac0:	db37      	blt.n	800bb32 <__lshift+0xbe>
 800bac2:	6920      	ldr	r0, [r4, #16]
 800bac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bac8:	f104 0314 	add.w	r3, r4, #20
 800bacc:	f019 091f 	ands.w	r9, r9, #31
 800bad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bad4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bad8:	d02f      	beq.n	800bb3a <__lshift+0xc6>
 800bada:	f1c9 0e20 	rsb	lr, r9, #32
 800bade:	468a      	mov	sl, r1
 800bae0:	f04f 0c00 	mov.w	ip, #0
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	fa02 f209 	lsl.w	r2, r2, r9
 800baea:	ea42 020c 	orr.w	r2, r2, ip
 800baee:	f84a 2b04 	str.w	r2, [sl], #4
 800baf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800baf6:	4298      	cmp	r0, r3
 800baf8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bafc:	d8f2      	bhi.n	800bae4 <__lshift+0x70>
 800bafe:	1b03      	subs	r3, r0, r4
 800bb00:	3b15      	subs	r3, #21
 800bb02:	f023 0303 	bic.w	r3, r3, #3
 800bb06:	3304      	adds	r3, #4
 800bb08:	f104 0215 	add.w	r2, r4, #21
 800bb0c:	4290      	cmp	r0, r2
 800bb0e:	bf38      	it	cc
 800bb10:	2304      	movcc	r3, #4
 800bb12:	f841 c003 	str.w	ip, [r1, r3]
 800bb16:	f1bc 0f00 	cmp.w	ip, #0
 800bb1a:	d001      	beq.n	800bb20 <__lshift+0xac>
 800bb1c:	f108 0602 	add.w	r6, r8, #2
 800bb20:	3e01      	subs	r6, #1
 800bb22:	4638      	mov	r0, r7
 800bb24:	612e      	str	r6, [r5, #16]
 800bb26:	4621      	mov	r1, r4
 800bb28:	f7ff fd88 	bl	800b63c <_Bfree>
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb32:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb36:	3301      	adds	r3, #1
 800bb38:	e7c1      	b.n	800babe <__lshift+0x4a>
 800bb3a:	3904      	subs	r1, #4
 800bb3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb40:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb44:	4298      	cmp	r0, r3
 800bb46:	d8f9      	bhi.n	800bb3c <__lshift+0xc8>
 800bb48:	e7ea      	b.n	800bb20 <__lshift+0xac>
 800bb4a:	bf00      	nop
 800bb4c:	0800d088 	.word	0x0800d088
 800bb50:	0800d178 	.word	0x0800d178

0800bb54 <__mcmp>:
 800bb54:	b530      	push	{r4, r5, lr}
 800bb56:	6902      	ldr	r2, [r0, #16]
 800bb58:	690c      	ldr	r4, [r1, #16]
 800bb5a:	1b12      	subs	r2, r2, r4
 800bb5c:	d10e      	bne.n	800bb7c <__mcmp+0x28>
 800bb5e:	f100 0314 	add.w	r3, r0, #20
 800bb62:	3114      	adds	r1, #20
 800bb64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb74:	42a5      	cmp	r5, r4
 800bb76:	d003      	beq.n	800bb80 <__mcmp+0x2c>
 800bb78:	d305      	bcc.n	800bb86 <__mcmp+0x32>
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	bd30      	pop	{r4, r5, pc}
 800bb80:	4283      	cmp	r3, r0
 800bb82:	d3f3      	bcc.n	800bb6c <__mcmp+0x18>
 800bb84:	e7fa      	b.n	800bb7c <__mcmp+0x28>
 800bb86:	f04f 32ff 	mov.w	r2, #4294967295
 800bb8a:	e7f7      	b.n	800bb7c <__mcmp+0x28>

0800bb8c <__mdiff>:
 800bb8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb90:	460c      	mov	r4, r1
 800bb92:	4606      	mov	r6, r0
 800bb94:	4611      	mov	r1, r2
 800bb96:	4620      	mov	r0, r4
 800bb98:	4690      	mov	r8, r2
 800bb9a:	f7ff ffdb 	bl	800bb54 <__mcmp>
 800bb9e:	1e05      	subs	r5, r0, #0
 800bba0:	d110      	bne.n	800bbc4 <__mdiff+0x38>
 800bba2:	4629      	mov	r1, r5
 800bba4:	4630      	mov	r0, r6
 800bba6:	f7ff fd09 	bl	800b5bc <_Balloc>
 800bbaa:	b930      	cbnz	r0, 800bbba <__mdiff+0x2e>
 800bbac:	4b3a      	ldr	r3, [pc, #232]	; (800bc98 <__mdiff+0x10c>)
 800bbae:	4602      	mov	r2, r0
 800bbb0:	f240 2132 	movw	r1, #562	; 0x232
 800bbb4:	4839      	ldr	r0, [pc, #228]	; (800bc9c <__mdiff+0x110>)
 800bbb6:	f000 febf 	bl	800c938 <__assert_func>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bbc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc4:	bfa4      	itt	ge
 800bbc6:	4643      	movge	r3, r8
 800bbc8:	46a0      	movge	r8, r4
 800bbca:	4630      	mov	r0, r6
 800bbcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bbd0:	bfa6      	itte	ge
 800bbd2:	461c      	movge	r4, r3
 800bbd4:	2500      	movge	r5, #0
 800bbd6:	2501      	movlt	r5, #1
 800bbd8:	f7ff fcf0 	bl	800b5bc <_Balloc>
 800bbdc:	b920      	cbnz	r0, 800bbe8 <__mdiff+0x5c>
 800bbde:	4b2e      	ldr	r3, [pc, #184]	; (800bc98 <__mdiff+0x10c>)
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bbe6:	e7e5      	b.n	800bbb4 <__mdiff+0x28>
 800bbe8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bbec:	6926      	ldr	r6, [r4, #16]
 800bbee:	60c5      	str	r5, [r0, #12]
 800bbf0:	f104 0914 	add.w	r9, r4, #20
 800bbf4:	f108 0514 	add.w	r5, r8, #20
 800bbf8:	f100 0e14 	add.w	lr, r0, #20
 800bbfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc04:	f108 0210 	add.w	r2, r8, #16
 800bc08:	46f2      	mov	sl, lr
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc14:	fa1f f883 	uxth.w	r8, r3
 800bc18:	fa11 f18b 	uxtah	r1, r1, fp
 800bc1c:	0c1b      	lsrs	r3, r3, #16
 800bc1e:	eba1 0808 	sub.w	r8, r1, r8
 800bc22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc2a:	fa1f f888 	uxth.w	r8, r8
 800bc2e:	1419      	asrs	r1, r3, #16
 800bc30:	454e      	cmp	r6, r9
 800bc32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc36:	f84a 3b04 	str.w	r3, [sl], #4
 800bc3a:	d8e7      	bhi.n	800bc0c <__mdiff+0x80>
 800bc3c:	1b33      	subs	r3, r6, r4
 800bc3e:	3b15      	subs	r3, #21
 800bc40:	f023 0303 	bic.w	r3, r3, #3
 800bc44:	3304      	adds	r3, #4
 800bc46:	3415      	adds	r4, #21
 800bc48:	42a6      	cmp	r6, r4
 800bc4a:	bf38      	it	cc
 800bc4c:	2304      	movcc	r3, #4
 800bc4e:	441d      	add	r5, r3
 800bc50:	4473      	add	r3, lr
 800bc52:	469e      	mov	lr, r3
 800bc54:	462e      	mov	r6, r5
 800bc56:	4566      	cmp	r6, ip
 800bc58:	d30e      	bcc.n	800bc78 <__mdiff+0xec>
 800bc5a:	f10c 0203 	add.w	r2, ip, #3
 800bc5e:	1b52      	subs	r2, r2, r5
 800bc60:	f022 0203 	bic.w	r2, r2, #3
 800bc64:	3d03      	subs	r5, #3
 800bc66:	45ac      	cmp	ip, r5
 800bc68:	bf38      	it	cc
 800bc6a:	2200      	movcc	r2, #0
 800bc6c:	441a      	add	r2, r3
 800bc6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bc72:	b17b      	cbz	r3, 800bc94 <__mdiff+0x108>
 800bc74:	6107      	str	r7, [r0, #16]
 800bc76:	e7a3      	b.n	800bbc0 <__mdiff+0x34>
 800bc78:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc7c:	fa11 f288 	uxtah	r2, r1, r8
 800bc80:	1414      	asrs	r4, r2, #16
 800bc82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc86:	b292      	uxth	r2, r2
 800bc88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc8c:	f84e 2b04 	str.w	r2, [lr], #4
 800bc90:	1421      	asrs	r1, r4, #16
 800bc92:	e7e0      	b.n	800bc56 <__mdiff+0xca>
 800bc94:	3f01      	subs	r7, #1
 800bc96:	e7ea      	b.n	800bc6e <__mdiff+0xe2>
 800bc98:	0800d088 	.word	0x0800d088
 800bc9c:	0800d178 	.word	0x0800d178

0800bca0 <__ulp>:
 800bca0:	b082      	sub	sp, #8
 800bca2:	ed8d 0b00 	vstr	d0, [sp]
 800bca6:	9b01      	ldr	r3, [sp, #4]
 800bca8:	4912      	ldr	r1, [pc, #72]	; (800bcf4 <__ulp+0x54>)
 800bcaa:	4019      	ands	r1, r3
 800bcac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bcb0:	2900      	cmp	r1, #0
 800bcb2:	dd05      	ble.n	800bcc0 <__ulp+0x20>
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	ec43 2b10 	vmov	d0, r2, r3
 800bcbc:	b002      	add	sp, #8
 800bcbe:	4770      	bx	lr
 800bcc0:	4249      	negs	r1, r1
 800bcc2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bcc6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bcca:	f04f 0200 	mov.w	r2, #0
 800bcce:	f04f 0300 	mov.w	r3, #0
 800bcd2:	da04      	bge.n	800bcde <__ulp+0x3e>
 800bcd4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bcd8:	fa41 f300 	asr.w	r3, r1, r0
 800bcdc:	e7ec      	b.n	800bcb8 <__ulp+0x18>
 800bcde:	f1a0 0114 	sub.w	r1, r0, #20
 800bce2:	291e      	cmp	r1, #30
 800bce4:	bfda      	itte	le
 800bce6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bcea:	fa20 f101 	lsrle.w	r1, r0, r1
 800bcee:	2101      	movgt	r1, #1
 800bcf0:	460a      	mov	r2, r1
 800bcf2:	e7e1      	b.n	800bcb8 <__ulp+0x18>
 800bcf4:	7ff00000 	.word	0x7ff00000

0800bcf8 <__b2d>:
 800bcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfa:	6905      	ldr	r5, [r0, #16]
 800bcfc:	f100 0714 	add.w	r7, r0, #20
 800bd00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bd04:	1f2e      	subs	r6, r5, #4
 800bd06:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f7ff fd48 	bl	800b7a0 <__hi0bits>
 800bd10:	f1c0 0320 	rsb	r3, r0, #32
 800bd14:	280a      	cmp	r0, #10
 800bd16:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bd94 <__b2d+0x9c>
 800bd1a:	600b      	str	r3, [r1, #0]
 800bd1c:	dc14      	bgt.n	800bd48 <__b2d+0x50>
 800bd1e:	f1c0 0e0b 	rsb	lr, r0, #11
 800bd22:	fa24 f10e 	lsr.w	r1, r4, lr
 800bd26:	42b7      	cmp	r7, r6
 800bd28:	ea41 030c 	orr.w	r3, r1, ip
 800bd2c:	bf34      	ite	cc
 800bd2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bd32:	2100      	movcs	r1, #0
 800bd34:	3015      	adds	r0, #21
 800bd36:	fa04 f000 	lsl.w	r0, r4, r0
 800bd3a:	fa21 f10e 	lsr.w	r1, r1, lr
 800bd3e:	ea40 0201 	orr.w	r2, r0, r1
 800bd42:	ec43 2b10 	vmov	d0, r2, r3
 800bd46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd48:	42b7      	cmp	r7, r6
 800bd4a:	bf3a      	itte	cc
 800bd4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bd50:	f1a5 0608 	subcc.w	r6, r5, #8
 800bd54:	2100      	movcs	r1, #0
 800bd56:	380b      	subs	r0, #11
 800bd58:	d017      	beq.n	800bd8a <__b2d+0x92>
 800bd5a:	f1c0 0c20 	rsb	ip, r0, #32
 800bd5e:	fa04 f500 	lsl.w	r5, r4, r0
 800bd62:	42be      	cmp	r6, r7
 800bd64:	fa21 f40c 	lsr.w	r4, r1, ip
 800bd68:	ea45 0504 	orr.w	r5, r5, r4
 800bd6c:	bf8c      	ite	hi
 800bd6e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bd72:	2400      	movls	r4, #0
 800bd74:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bd78:	fa01 f000 	lsl.w	r0, r1, r0
 800bd7c:	fa24 f40c 	lsr.w	r4, r4, ip
 800bd80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd84:	ea40 0204 	orr.w	r2, r0, r4
 800bd88:	e7db      	b.n	800bd42 <__b2d+0x4a>
 800bd8a:	ea44 030c 	orr.w	r3, r4, ip
 800bd8e:	460a      	mov	r2, r1
 800bd90:	e7d7      	b.n	800bd42 <__b2d+0x4a>
 800bd92:	bf00      	nop
 800bd94:	3ff00000 	.word	0x3ff00000

0800bd98 <__d2b>:
 800bd98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd9c:	4689      	mov	r9, r1
 800bd9e:	2101      	movs	r1, #1
 800bda0:	ec57 6b10 	vmov	r6, r7, d0
 800bda4:	4690      	mov	r8, r2
 800bda6:	f7ff fc09 	bl	800b5bc <_Balloc>
 800bdaa:	4604      	mov	r4, r0
 800bdac:	b930      	cbnz	r0, 800bdbc <__d2b+0x24>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	4b25      	ldr	r3, [pc, #148]	; (800be48 <__d2b+0xb0>)
 800bdb2:	4826      	ldr	r0, [pc, #152]	; (800be4c <__d2b+0xb4>)
 800bdb4:	f240 310a 	movw	r1, #778	; 0x30a
 800bdb8:	f000 fdbe 	bl	800c938 <__assert_func>
 800bdbc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bdc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bdc4:	bb35      	cbnz	r5, 800be14 <__d2b+0x7c>
 800bdc6:	2e00      	cmp	r6, #0
 800bdc8:	9301      	str	r3, [sp, #4]
 800bdca:	d028      	beq.n	800be1e <__d2b+0x86>
 800bdcc:	4668      	mov	r0, sp
 800bdce:	9600      	str	r6, [sp, #0]
 800bdd0:	f7ff fd06 	bl	800b7e0 <__lo0bits>
 800bdd4:	9900      	ldr	r1, [sp, #0]
 800bdd6:	b300      	cbz	r0, 800be1a <__d2b+0x82>
 800bdd8:	9a01      	ldr	r2, [sp, #4]
 800bdda:	f1c0 0320 	rsb	r3, r0, #32
 800bdde:	fa02 f303 	lsl.w	r3, r2, r3
 800bde2:	430b      	orrs	r3, r1
 800bde4:	40c2      	lsrs	r2, r0
 800bde6:	6163      	str	r3, [r4, #20]
 800bde8:	9201      	str	r2, [sp, #4]
 800bdea:	9b01      	ldr	r3, [sp, #4]
 800bdec:	61a3      	str	r3, [r4, #24]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	bf14      	ite	ne
 800bdf2:	2202      	movne	r2, #2
 800bdf4:	2201      	moveq	r2, #1
 800bdf6:	6122      	str	r2, [r4, #16]
 800bdf8:	b1d5      	cbz	r5, 800be30 <__d2b+0x98>
 800bdfa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bdfe:	4405      	add	r5, r0
 800be00:	f8c9 5000 	str.w	r5, [r9]
 800be04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be08:	f8c8 0000 	str.w	r0, [r8]
 800be0c:	4620      	mov	r0, r4
 800be0e:	b003      	add	sp, #12
 800be10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be18:	e7d5      	b.n	800bdc6 <__d2b+0x2e>
 800be1a:	6161      	str	r1, [r4, #20]
 800be1c:	e7e5      	b.n	800bdea <__d2b+0x52>
 800be1e:	a801      	add	r0, sp, #4
 800be20:	f7ff fcde 	bl	800b7e0 <__lo0bits>
 800be24:	9b01      	ldr	r3, [sp, #4]
 800be26:	6163      	str	r3, [r4, #20]
 800be28:	2201      	movs	r2, #1
 800be2a:	6122      	str	r2, [r4, #16]
 800be2c:	3020      	adds	r0, #32
 800be2e:	e7e3      	b.n	800bdf8 <__d2b+0x60>
 800be30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be38:	f8c9 0000 	str.w	r0, [r9]
 800be3c:	6918      	ldr	r0, [r3, #16]
 800be3e:	f7ff fcaf 	bl	800b7a0 <__hi0bits>
 800be42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be46:	e7df      	b.n	800be08 <__d2b+0x70>
 800be48:	0800d088 	.word	0x0800d088
 800be4c:	0800d178 	.word	0x0800d178

0800be50 <__ratio>:
 800be50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be54:	4688      	mov	r8, r1
 800be56:	4669      	mov	r1, sp
 800be58:	4681      	mov	r9, r0
 800be5a:	f7ff ff4d 	bl	800bcf8 <__b2d>
 800be5e:	a901      	add	r1, sp, #4
 800be60:	4640      	mov	r0, r8
 800be62:	ec55 4b10 	vmov	r4, r5, d0
 800be66:	f7ff ff47 	bl	800bcf8 <__b2d>
 800be6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800be72:	eba3 0c02 	sub.w	ip, r3, r2
 800be76:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be7a:	1a9b      	subs	r3, r3, r2
 800be7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800be80:	ec51 0b10 	vmov	r0, r1, d0
 800be84:	2b00      	cmp	r3, #0
 800be86:	bfd6      	itet	le
 800be88:	460a      	movle	r2, r1
 800be8a:	462a      	movgt	r2, r5
 800be8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be90:	468b      	mov	fp, r1
 800be92:	462f      	mov	r7, r5
 800be94:	bfd4      	ite	le
 800be96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800be9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be9e:	4620      	mov	r0, r4
 800bea0:	ee10 2a10 	vmov	r2, s0
 800bea4:	465b      	mov	r3, fp
 800bea6:	4639      	mov	r1, r7
 800bea8:	f7f4 fcf8 	bl	800089c <__aeabi_ddiv>
 800beac:	ec41 0b10 	vmov	d0, r0, r1
 800beb0:	b003      	add	sp, #12
 800beb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800beb6 <__copybits>:
 800beb6:	3901      	subs	r1, #1
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	1149      	asrs	r1, r1, #5
 800bebc:	6914      	ldr	r4, [r2, #16]
 800bebe:	3101      	adds	r1, #1
 800bec0:	f102 0314 	add.w	r3, r2, #20
 800bec4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bec8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800becc:	1f05      	subs	r5, r0, #4
 800bece:	42a3      	cmp	r3, r4
 800bed0:	d30c      	bcc.n	800beec <__copybits+0x36>
 800bed2:	1aa3      	subs	r3, r4, r2
 800bed4:	3b11      	subs	r3, #17
 800bed6:	f023 0303 	bic.w	r3, r3, #3
 800beda:	3211      	adds	r2, #17
 800bedc:	42a2      	cmp	r2, r4
 800bede:	bf88      	it	hi
 800bee0:	2300      	movhi	r3, #0
 800bee2:	4418      	add	r0, r3
 800bee4:	2300      	movs	r3, #0
 800bee6:	4288      	cmp	r0, r1
 800bee8:	d305      	bcc.n	800bef6 <__copybits+0x40>
 800beea:	bd70      	pop	{r4, r5, r6, pc}
 800beec:	f853 6b04 	ldr.w	r6, [r3], #4
 800bef0:	f845 6f04 	str.w	r6, [r5, #4]!
 800bef4:	e7eb      	b.n	800bece <__copybits+0x18>
 800bef6:	f840 3b04 	str.w	r3, [r0], #4
 800befa:	e7f4      	b.n	800bee6 <__copybits+0x30>

0800befc <__any_on>:
 800befc:	f100 0214 	add.w	r2, r0, #20
 800bf00:	6900      	ldr	r0, [r0, #16]
 800bf02:	114b      	asrs	r3, r1, #5
 800bf04:	4298      	cmp	r0, r3
 800bf06:	b510      	push	{r4, lr}
 800bf08:	db11      	blt.n	800bf2e <__any_on+0x32>
 800bf0a:	dd0a      	ble.n	800bf22 <__any_on+0x26>
 800bf0c:	f011 011f 	ands.w	r1, r1, #31
 800bf10:	d007      	beq.n	800bf22 <__any_on+0x26>
 800bf12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bf16:	fa24 f001 	lsr.w	r0, r4, r1
 800bf1a:	fa00 f101 	lsl.w	r1, r0, r1
 800bf1e:	428c      	cmp	r4, r1
 800bf20:	d10b      	bne.n	800bf3a <__any_on+0x3e>
 800bf22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d803      	bhi.n	800bf32 <__any_on+0x36>
 800bf2a:	2000      	movs	r0, #0
 800bf2c:	bd10      	pop	{r4, pc}
 800bf2e:	4603      	mov	r3, r0
 800bf30:	e7f7      	b.n	800bf22 <__any_on+0x26>
 800bf32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf36:	2900      	cmp	r1, #0
 800bf38:	d0f5      	beq.n	800bf26 <__any_on+0x2a>
 800bf3a:	2001      	movs	r0, #1
 800bf3c:	e7f6      	b.n	800bf2c <__any_on+0x30>

0800bf3e <_calloc_r>:
 800bf3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf40:	fba1 2402 	umull	r2, r4, r1, r2
 800bf44:	b94c      	cbnz	r4, 800bf5a <_calloc_r+0x1c>
 800bf46:	4611      	mov	r1, r2
 800bf48:	9201      	str	r2, [sp, #4]
 800bf4a:	f000 f87b 	bl	800c044 <_malloc_r>
 800bf4e:	9a01      	ldr	r2, [sp, #4]
 800bf50:	4605      	mov	r5, r0
 800bf52:	b930      	cbnz	r0, 800bf62 <_calloc_r+0x24>
 800bf54:	4628      	mov	r0, r5
 800bf56:	b003      	add	sp, #12
 800bf58:	bd30      	pop	{r4, r5, pc}
 800bf5a:	220c      	movs	r2, #12
 800bf5c:	6002      	str	r2, [r0, #0]
 800bf5e:	2500      	movs	r5, #0
 800bf60:	e7f8      	b.n	800bf54 <_calloc_r+0x16>
 800bf62:	4621      	mov	r1, r4
 800bf64:	f7fc faae 	bl	80084c4 <memset>
 800bf68:	e7f4      	b.n	800bf54 <_calloc_r+0x16>
	...

0800bf6c <_free_r>:
 800bf6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf6e:	2900      	cmp	r1, #0
 800bf70:	d044      	beq.n	800bffc <_free_r+0x90>
 800bf72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf76:	9001      	str	r0, [sp, #4]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f1a1 0404 	sub.w	r4, r1, #4
 800bf7e:	bfb8      	it	lt
 800bf80:	18e4      	addlt	r4, r4, r3
 800bf82:	f000 fe6d 	bl	800cc60 <__malloc_lock>
 800bf86:	4a1e      	ldr	r2, [pc, #120]	; (800c000 <_free_r+0x94>)
 800bf88:	9801      	ldr	r0, [sp, #4]
 800bf8a:	6813      	ldr	r3, [r2, #0]
 800bf8c:	b933      	cbnz	r3, 800bf9c <_free_r+0x30>
 800bf8e:	6063      	str	r3, [r4, #4]
 800bf90:	6014      	str	r4, [r2, #0]
 800bf92:	b003      	add	sp, #12
 800bf94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf98:	f000 be68 	b.w	800cc6c <__malloc_unlock>
 800bf9c:	42a3      	cmp	r3, r4
 800bf9e:	d908      	bls.n	800bfb2 <_free_r+0x46>
 800bfa0:	6825      	ldr	r5, [r4, #0]
 800bfa2:	1961      	adds	r1, r4, r5
 800bfa4:	428b      	cmp	r3, r1
 800bfa6:	bf01      	itttt	eq
 800bfa8:	6819      	ldreq	r1, [r3, #0]
 800bfaa:	685b      	ldreq	r3, [r3, #4]
 800bfac:	1949      	addeq	r1, r1, r5
 800bfae:	6021      	streq	r1, [r4, #0]
 800bfb0:	e7ed      	b.n	800bf8e <_free_r+0x22>
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	b10b      	cbz	r3, 800bfbc <_free_r+0x50>
 800bfb8:	42a3      	cmp	r3, r4
 800bfba:	d9fa      	bls.n	800bfb2 <_free_r+0x46>
 800bfbc:	6811      	ldr	r1, [r2, #0]
 800bfbe:	1855      	adds	r5, r2, r1
 800bfc0:	42a5      	cmp	r5, r4
 800bfc2:	d10b      	bne.n	800bfdc <_free_r+0x70>
 800bfc4:	6824      	ldr	r4, [r4, #0]
 800bfc6:	4421      	add	r1, r4
 800bfc8:	1854      	adds	r4, r2, r1
 800bfca:	42a3      	cmp	r3, r4
 800bfcc:	6011      	str	r1, [r2, #0]
 800bfce:	d1e0      	bne.n	800bf92 <_free_r+0x26>
 800bfd0:	681c      	ldr	r4, [r3, #0]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	6053      	str	r3, [r2, #4]
 800bfd6:	4421      	add	r1, r4
 800bfd8:	6011      	str	r1, [r2, #0]
 800bfda:	e7da      	b.n	800bf92 <_free_r+0x26>
 800bfdc:	d902      	bls.n	800bfe4 <_free_r+0x78>
 800bfde:	230c      	movs	r3, #12
 800bfe0:	6003      	str	r3, [r0, #0]
 800bfe2:	e7d6      	b.n	800bf92 <_free_r+0x26>
 800bfe4:	6825      	ldr	r5, [r4, #0]
 800bfe6:	1961      	adds	r1, r4, r5
 800bfe8:	428b      	cmp	r3, r1
 800bfea:	bf04      	itt	eq
 800bfec:	6819      	ldreq	r1, [r3, #0]
 800bfee:	685b      	ldreq	r3, [r3, #4]
 800bff0:	6063      	str	r3, [r4, #4]
 800bff2:	bf04      	itt	eq
 800bff4:	1949      	addeq	r1, r1, r5
 800bff6:	6021      	streq	r1, [r4, #0]
 800bff8:	6054      	str	r4, [r2, #4]
 800bffa:	e7ca      	b.n	800bf92 <_free_r+0x26>
 800bffc:	b003      	add	sp, #12
 800bffe:	bd30      	pop	{r4, r5, pc}
 800c000:	20000560 	.word	0x20000560

0800c004 <sbrk_aligned>:
 800c004:	b570      	push	{r4, r5, r6, lr}
 800c006:	4e0e      	ldr	r6, [pc, #56]	; (800c040 <sbrk_aligned+0x3c>)
 800c008:	460c      	mov	r4, r1
 800c00a:	6831      	ldr	r1, [r6, #0]
 800c00c:	4605      	mov	r5, r0
 800c00e:	b911      	cbnz	r1, 800c016 <sbrk_aligned+0x12>
 800c010:	f000 fb4a 	bl	800c6a8 <_sbrk_r>
 800c014:	6030      	str	r0, [r6, #0]
 800c016:	4621      	mov	r1, r4
 800c018:	4628      	mov	r0, r5
 800c01a:	f000 fb45 	bl	800c6a8 <_sbrk_r>
 800c01e:	1c43      	adds	r3, r0, #1
 800c020:	d00a      	beq.n	800c038 <sbrk_aligned+0x34>
 800c022:	1cc4      	adds	r4, r0, #3
 800c024:	f024 0403 	bic.w	r4, r4, #3
 800c028:	42a0      	cmp	r0, r4
 800c02a:	d007      	beq.n	800c03c <sbrk_aligned+0x38>
 800c02c:	1a21      	subs	r1, r4, r0
 800c02e:	4628      	mov	r0, r5
 800c030:	f000 fb3a 	bl	800c6a8 <_sbrk_r>
 800c034:	3001      	adds	r0, #1
 800c036:	d101      	bne.n	800c03c <sbrk_aligned+0x38>
 800c038:	f04f 34ff 	mov.w	r4, #4294967295
 800c03c:	4620      	mov	r0, r4
 800c03e:	bd70      	pop	{r4, r5, r6, pc}
 800c040:	20000564 	.word	0x20000564

0800c044 <_malloc_r>:
 800c044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c048:	1ccd      	adds	r5, r1, #3
 800c04a:	f025 0503 	bic.w	r5, r5, #3
 800c04e:	3508      	adds	r5, #8
 800c050:	2d0c      	cmp	r5, #12
 800c052:	bf38      	it	cc
 800c054:	250c      	movcc	r5, #12
 800c056:	2d00      	cmp	r5, #0
 800c058:	4607      	mov	r7, r0
 800c05a:	db01      	blt.n	800c060 <_malloc_r+0x1c>
 800c05c:	42a9      	cmp	r1, r5
 800c05e:	d905      	bls.n	800c06c <_malloc_r+0x28>
 800c060:	230c      	movs	r3, #12
 800c062:	603b      	str	r3, [r7, #0]
 800c064:	2600      	movs	r6, #0
 800c066:	4630      	mov	r0, r6
 800c068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c06c:	4e2e      	ldr	r6, [pc, #184]	; (800c128 <_malloc_r+0xe4>)
 800c06e:	f000 fdf7 	bl	800cc60 <__malloc_lock>
 800c072:	6833      	ldr	r3, [r6, #0]
 800c074:	461c      	mov	r4, r3
 800c076:	bb34      	cbnz	r4, 800c0c6 <_malloc_r+0x82>
 800c078:	4629      	mov	r1, r5
 800c07a:	4638      	mov	r0, r7
 800c07c:	f7ff ffc2 	bl	800c004 <sbrk_aligned>
 800c080:	1c43      	adds	r3, r0, #1
 800c082:	4604      	mov	r4, r0
 800c084:	d14d      	bne.n	800c122 <_malloc_r+0xde>
 800c086:	6834      	ldr	r4, [r6, #0]
 800c088:	4626      	mov	r6, r4
 800c08a:	2e00      	cmp	r6, #0
 800c08c:	d140      	bne.n	800c110 <_malloc_r+0xcc>
 800c08e:	6823      	ldr	r3, [r4, #0]
 800c090:	4631      	mov	r1, r6
 800c092:	4638      	mov	r0, r7
 800c094:	eb04 0803 	add.w	r8, r4, r3
 800c098:	f000 fb06 	bl	800c6a8 <_sbrk_r>
 800c09c:	4580      	cmp	r8, r0
 800c09e:	d13a      	bne.n	800c116 <_malloc_r+0xd2>
 800c0a0:	6821      	ldr	r1, [r4, #0]
 800c0a2:	3503      	adds	r5, #3
 800c0a4:	1a6d      	subs	r5, r5, r1
 800c0a6:	f025 0503 	bic.w	r5, r5, #3
 800c0aa:	3508      	adds	r5, #8
 800c0ac:	2d0c      	cmp	r5, #12
 800c0ae:	bf38      	it	cc
 800c0b0:	250c      	movcc	r5, #12
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	4638      	mov	r0, r7
 800c0b6:	f7ff ffa5 	bl	800c004 <sbrk_aligned>
 800c0ba:	3001      	adds	r0, #1
 800c0bc:	d02b      	beq.n	800c116 <_malloc_r+0xd2>
 800c0be:	6823      	ldr	r3, [r4, #0]
 800c0c0:	442b      	add	r3, r5
 800c0c2:	6023      	str	r3, [r4, #0]
 800c0c4:	e00e      	b.n	800c0e4 <_malloc_r+0xa0>
 800c0c6:	6822      	ldr	r2, [r4, #0]
 800c0c8:	1b52      	subs	r2, r2, r5
 800c0ca:	d41e      	bmi.n	800c10a <_malloc_r+0xc6>
 800c0cc:	2a0b      	cmp	r2, #11
 800c0ce:	d916      	bls.n	800c0fe <_malloc_r+0xba>
 800c0d0:	1961      	adds	r1, r4, r5
 800c0d2:	42a3      	cmp	r3, r4
 800c0d4:	6025      	str	r5, [r4, #0]
 800c0d6:	bf18      	it	ne
 800c0d8:	6059      	strne	r1, [r3, #4]
 800c0da:	6863      	ldr	r3, [r4, #4]
 800c0dc:	bf08      	it	eq
 800c0de:	6031      	streq	r1, [r6, #0]
 800c0e0:	5162      	str	r2, [r4, r5]
 800c0e2:	604b      	str	r3, [r1, #4]
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	f104 060b 	add.w	r6, r4, #11
 800c0ea:	f000 fdbf 	bl	800cc6c <__malloc_unlock>
 800c0ee:	f026 0607 	bic.w	r6, r6, #7
 800c0f2:	1d23      	adds	r3, r4, #4
 800c0f4:	1af2      	subs	r2, r6, r3
 800c0f6:	d0b6      	beq.n	800c066 <_malloc_r+0x22>
 800c0f8:	1b9b      	subs	r3, r3, r6
 800c0fa:	50a3      	str	r3, [r4, r2]
 800c0fc:	e7b3      	b.n	800c066 <_malloc_r+0x22>
 800c0fe:	6862      	ldr	r2, [r4, #4]
 800c100:	42a3      	cmp	r3, r4
 800c102:	bf0c      	ite	eq
 800c104:	6032      	streq	r2, [r6, #0]
 800c106:	605a      	strne	r2, [r3, #4]
 800c108:	e7ec      	b.n	800c0e4 <_malloc_r+0xa0>
 800c10a:	4623      	mov	r3, r4
 800c10c:	6864      	ldr	r4, [r4, #4]
 800c10e:	e7b2      	b.n	800c076 <_malloc_r+0x32>
 800c110:	4634      	mov	r4, r6
 800c112:	6876      	ldr	r6, [r6, #4]
 800c114:	e7b9      	b.n	800c08a <_malloc_r+0x46>
 800c116:	230c      	movs	r3, #12
 800c118:	603b      	str	r3, [r7, #0]
 800c11a:	4638      	mov	r0, r7
 800c11c:	f000 fda6 	bl	800cc6c <__malloc_unlock>
 800c120:	e7a1      	b.n	800c066 <_malloc_r+0x22>
 800c122:	6025      	str	r5, [r4, #0]
 800c124:	e7de      	b.n	800c0e4 <_malloc_r+0xa0>
 800c126:	bf00      	nop
 800c128:	20000560 	.word	0x20000560

0800c12c <__ssputs_r>:
 800c12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c130:	688e      	ldr	r6, [r1, #8]
 800c132:	429e      	cmp	r6, r3
 800c134:	4682      	mov	sl, r0
 800c136:	460c      	mov	r4, r1
 800c138:	4690      	mov	r8, r2
 800c13a:	461f      	mov	r7, r3
 800c13c:	d838      	bhi.n	800c1b0 <__ssputs_r+0x84>
 800c13e:	898a      	ldrh	r2, [r1, #12]
 800c140:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c144:	d032      	beq.n	800c1ac <__ssputs_r+0x80>
 800c146:	6825      	ldr	r5, [r4, #0]
 800c148:	6909      	ldr	r1, [r1, #16]
 800c14a:	eba5 0901 	sub.w	r9, r5, r1
 800c14e:	6965      	ldr	r5, [r4, #20]
 800c150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c158:	3301      	adds	r3, #1
 800c15a:	444b      	add	r3, r9
 800c15c:	106d      	asrs	r5, r5, #1
 800c15e:	429d      	cmp	r5, r3
 800c160:	bf38      	it	cc
 800c162:	461d      	movcc	r5, r3
 800c164:	0553      	lsls	r3, r2, #21
 800c166:	d531      	bpl.n	800c1cc <__ssputs_r+0xa0>
 800c168:	4629      	mov	r1, r5
 800c16a:	f7ff ff6b 	bl	800c044 <_malloc_r>
 800c16e:	4606      	mov	r6, r0
 800c170:	b950      	cbnz	r0, 800c188 <__ssputs_r+0x5c>
 800c172:	230c      	movs	r3, #12
 800c174:	f8ca 3000 	str.w	r3, [sl]
 800c178:	89a3      	ldrh	r3, [r4, #12]
 800c17a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c17e:	81a3      	strh	r3, [r4, #12]
 800c180:	f04f 30ff 	mov.w	r0, #4294967295
 800c184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c188:	6921      	ldr	r1, [r4, #16]
 800c18a:	464a      	mov	r2, r9
 800c18c:	f7ff fa08 	bl	800b5a0 <memcpy>
 800c190:	89a3      	ldrh	r3, [r4, #12]
 800c192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c19a:	81a3      	strh	r3, [r4, #12]
 800c19c:	6126      	str	r6, [r4, #16]
 800c19e:	6165      	str	r5, [r4, #20]
 800c1a0:	444e      	add	r6, r9
 800c1a2:	eba5 0509 	sub.w	r5, r5, r9
 800c1a6:	6026      	str	r6, [r4, #0]
 800c1a8:	60a5      	str	r5, [r4, #8]
 800c1aa:	463e      	mov	r6, r7
 800c1ac:	42be      	cmp	r6, r7
 800c1ae:	d900      	bls.n	800c1b2 <__ssputs_r+0x86>
 800c1b0:	463e      	mov	r6, r7
 800c1b2:	6820      	ldr	r0, [r4, #0]
 800c1b4:	4632      	mov	r2, r6
 800c1b6:	4641      	mov	r1, r8
 800c1b8:	f000 fd38 	bl	800cc2c <memmove>
 800c1bc:	68a3      	ldr	r3, [r4, #8]
 800c1be:	1b9b      	subs	r3, r3, r6
 800c1c0:	60a3      	str	r3, [r4, #8]
 800c1c2:	6823      	ldr	r3, [r4, #0]
 800c1c4:	4433      	add	r3, r6
 800c1c6:	6023      	str	r3, [r4, #0]
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	e7db      	b.n	800c184 <__ssputs_r+0x58>
 800c1cc:	462a      	mov	r2, r5
 800c1ce:	f000 fd53 	bl	800cc78 <_realloc_r>
 800c1d2:	4606      	mov	r6, r0
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d1e1      	bne.n	800c19c <__ssputs_r+0x70>
 800c1d8:	6921      	ldr	r1, [r4, #16]
 800c1da:	4650      	mov	r0, sl
 800c1dc:	f7ff fec6 	bl	800bf6c <_free_r>
 800c1e0:	e7c7      	b.n	800c172 <__ssputs_r+0x46>
	...

0800c1e4 <_svfiprintf_r>:
 800c1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e8:	4698      	mov	r8, r3
 800c1ea:	898b      	ldrh	r3, [r1, #12]
 800c1ec:	061b      	lsls	r3, r3, #24
 800c1ee:	b09d      	sub	sp, #116	; 0x74
 800c1f0:	4607      	mov	r7, r0
 800c1f2:	460d      	mov	r5, r1
 800c1f4:	4614      	mov	r4, r2
 800c1f6:	d50e      	bpl.n	800c216 <_svfiprintf_r+0x32>
 800c1f8:	690b      	ldr	r3, [r1, #16]
 800c1fa:	b963      	cbnz	r3, 800c216 <_svfiprintf_r+0x32>
 800c1fc:	2140      	movs	r1, #64	; 0x40
 800c1fe:	f7ff ff21 	bl	800c044 <_malloc_r>
 800c202:	6028      	str	r0, [r5, #0]
 800c204:	6128      	str	r0, [r5, #16]
 800c206:	b920      	cbnz	r0, 800c212 <_svfiprintf_r+0x2e>
 800c208:	230c      	movs	r3, #12
 800c20a:	603b      	str	r3, [r7, #0]
 800c20c:	f04f 30ff 	mov.w	r0, #4294967295
 800c210:	e0d1      	b.n	800c3b6 <_svfiprintf_r+0x1d2>
 800c212:	2340      	movs	r3, #64	; 0x40
 800c214:	616b      	str	r3, [r5, #20]
 800c216:	2300      	movs	r3, #0
 800c218:	9309      	str	r3, [sp, #36]	; 0x24
 800c21a:	2320      	movs	r3, #32
 800c21c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c220:	f8cd 800c 	str.w	r8, [sp, #12]
 800c224:	2330      	movs	r3, #48	; 0x30
 800c226:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c3d0 <_svfiprintf_r+0x1ec>
 800c22a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c22e:	f04f 0901 	mov.w	r9, #1
 800c232:	4623      	mov	r3, r4
 800c234:	469a      	mov	sl, r3
 800c236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c23a:	b10a      	cbz	r2, 800c240 <_svfiprintf_r+0x5c>
 800c23c:	2a25      	cmp	r2, #37	; 0x25
 800c23e:	d1f9      	bne.n	800c234 <_svfiprintf_r+0x50>
 800c240:	ebba 0b04 	subs.w	fp, sl, r4
 800c244:	d00b      	beq.n	800c25e <_svfiprintf_r+0x7a>
 800c246:	465b      	mov	r3, fp
 800c248:	4622      	mov	r2, r4
 800c24a:	4629      	mov	r1, r5
 800c24c:	4638      	mov	r0, r7
 800c24e:	f7ff ff6d 	bl	800c12c <__ssputs_r>
 800c252:	3001      	adds	r0, #1
 800c254:	f000 80aa 	beq.w	800c3ac <_svfiprintf_r+0x1c8>
 800c258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c25a:	445a      	add	r2, fp
 800c25c:	9209      	str	r2, [sp, #36]	; 0x24
 800c25e:	f89a 3000 	ldrb.w	r3, [sl]
 800c262:	2b00      	cmp	r3, #0
 800c264:	f000 80a2 	beq.w	800c3ac <_svfiprintf_r+0x1c8>
 800c268:	2300      	movs	r3, #0
 800c26a:	f04f 32ff 	mov.w	r2, #4294967295
 800c26e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c272:	f10a 0a01 	add.w	sl, sl, #1
 800c276:	9304      	str	r3, [sp, #16]
 800c278:	9307      	str	r3, [sp, #28]
 800c27a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c27e:	931a      	str	r3, [sp, #104]	; 0x68
 800c280:	4654      	mov	r4, sl
 800c282:	2205      	movs	r2, #5
 800c284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c288:	4851      	ldr	r0, [pc, #324]	; (800c3d0 <_svfiprintf_r+0x1ec>)
 800c28a:	f7f3 ffd1 	bl	8000230 <memchr>
 800c28e:	9a04      	ldr	r2, [sp, #16]
 800c290:	b9d8      	cbnz	r0, 800c2ca <_svfiprintf_r+0xe6>
 800c292:	06d0      	lsls	r0, r2, #27
 800c294:	bf44      	itt	mi
 800c296:	2320      	movmi	r3, #32
 800c298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c29c:	0711      	lsls	r1, r2, #28
 800c29e:	bf44      	itt	mi
 800c2a0:	232b      	movmi	r3, #43	; 0x2b
 800c2a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c2aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c2ac:	d015      	beq.n	800c2da <_svfiprintf_r+0xf6>
 800c2ae:	9a07      	ldr	r2, [sp, #28]
 800c2b0:	4654      	mov	r4, sl
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	f04f 0c0a 	mov.w	ip, #10
 800c2b8:	4621      	mov	r1, r4
 800c2ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2be:	3b30      	subs	r3, #48	; 0x30
 800c2c0:	2b09      	cmp	r3, #9
 800c2c2:	d94e      	bls.n	800c362 <_svfiprintf_r+0x17e>
 800c2c4:	b1b0      	cbz	r0, 800c2f4 <_svfiprintf_r+0x110>
 800c2c6:	9207      	str	r2, [sp, #28]
 800c2c8:	e014      	b.n	800c2f4 <_svfiprintf_r+0x110>
 800c2ca:	eba0 0308 	sub.w	r3, r0, r8
 800c2ce:	fa09 f303 	lsl.w	r3, r9, r3
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	9304      	str	r3, [sp, #16]
 800c2d6:	46a2      	mov	sl, r4
 800c2d8:	e7d2      	b.n	800c280 <_svfiprintf_r+0x9c>
 800c2da:	9b03      	ldr	r3, [sp, #12]
 800c2dc:	1d19      	adds	r1, r3, #4
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	9103      	str	r1, [sp, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	bfbb      	ittet	lt
 800c2e6:	425b      	neglt	r3, r3
 800c2e8:	f042 0202 	orrlt.w	r2, r2, #2
 800c2ec:	9307      	strge	r3, [sp, #28]
 800c2ee:	9307      	strlt	r3, [sp, #28]
 800c2f0:	bfb8      	it	lt
 800c2f2:	9204      	strlt	r2, [sp, #16]
 800c2f4:	7823      	ldrb	r3, [r4, #0]
 800c2f6:	2b2e      	cmp	r3, #46	; 0x2e
 800c2f8:	d10c      	bne.n	800c314 <_svfiprintf_r+0x130>
 800c2fa:	7863      	ldrb	r3, [r4, #1]
 800c2fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c2fe:	d135      	bne.n	800c36c <_svfiprintf_r+0x188>
 800c300:	9b03      	ldr	r3, [sp, #12]
 800c302:	1d1a      	adds	r2, r3, #4
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	9203      	str	r2, [sp, #12]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	bfb8      	it	lt
 800c30c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c310:	3402      	adds	r4, #2
 800c312:	9305      	str	r3, [sp, #20]
 800c314:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c3e0 <_svfiprintf_r+0x1fc>
 800c318:	7821      	ldrb	r1, [r4, #0]
 800c31a:	2203      	movs	r2, #3
 800c31c:	4650      	mov	r0, sl
 800c31e:	f7f3 ff87 	bl	8000230 <memchr>
 800c322:	b140      	cbz	r0, 800c336 <_svfiprintf_r+0x152>
 800c324:	2340      	movs	r3, #64	; 0x40
 800c326:	eba0 000a 	sub.w	r0, r0, sl
 800c32a:	fa03 f000 	lsl.w	r0, r3, r0
 800c32e:	9b04      	ldr	r3, [sp, #16]
 800c330:	4303      	orrs	r3, r0
 800c332:	3401      	adds	r4, #1
 800c334:	9304      	str	r3, [sp, #16]
 800c336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c33a:	4826      	ldr	r0, [pc, #152]	; (800c3d4 <_svfiprintf_r+0x1f0>)
 800c33c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c340:	2206      	movs	r2, #6
 800c342:	f7f3 ff75 	bl	8000230 <memchr>
 800c346:	2800      	cmp	r0, #0
 800c348:	d038      	beq.n	800c3bc <_svfiprintf_r+0x1d8>
 800c34a:	4b23      	ldr	r3, [pc, #140]	; (800c3d8 <_svfiprintf_r+0x1f4>)
 800c34c:	bb1b      	cbnz	r3, 800c396 <_svfiprintf_r+0x1b2>
 800c34e:	9b03      	ldr	r3, [sp, #12]
 800c350:	3307      	adds	r3, #7
 800c352:	f023 0307 	bic.w	r3, r3, #7
 800c356:	3308      	adds	r3, #8
 800c358:	9303      	str	r3, [sp, #12]
 800c35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c35c:	4433      	add	r3, r6
 800c35e:	9309      	str	r3, [sp, #36]	; 0x24
 800c360:	e767      	b.n	800c232 <_svfiprintf_r+0x4e>
 800c362:	fb0c 3202 	mla	r2, ip, r2, r3
 800c366:	460c      	mov	r4, r1
 800c368:	2001      	movs	r0, #1
 800c36a:	e7a5      	b.n	800c2b8 <_svfiprintf_r+0xd4>
 800c36c:	2300      	movs	r3, #0
 800c36e:	3401      	adds	r4, #1
 800c370:	9305      	str	r3, [sp, #20]
 800c372:	4619      	mov	r1, r3
 800c374:	f04f 0c0a 	mov.w	ip, #10
 800c378:	4620      	mov	r0, r4
 800c37a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c37e:	3a30      	subs	r2, #48	; 0x30
 800c380:	2a09      	cmp	r2, #9
 800c382:	d903      	bls.n	800c38c <_svfiprintf_r+0x1a8>
 800c384:	2b00      	cmp	r3, #0
 800c386:	d0c5      	beq.n	800c314 <_svfiprintf_r+0x130>
 800c388:	9105      	str	r1, [sp, #20]
 800c38a:	e7c3      	b.n	800c314 <_svfiprintf_r+0x130>
 800c38c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c390:	4604      	mov	r4, r0
 800c392:	2301      	movs	r3, #1
 800c394:	e7f0      	b.n	800c378 <_svfiprintf_r+0x194>
 800c396:	ab03      	add	r3, sp, #12
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	462a      	mov	r2, r5
 800c39c:	4b0f      	ldr	r3, [pc, #60]	; (800c3dc <_svfiprintf_r+0x1f8>)
 800c39e:	a904      	add	r1, sp, #16
 800c3a0:	4638      	mov	r0, r7
 800c3a2:	f7fc f937 	bl	8008614 <_printf_float>
 800c3a6:	1c42      	adds	r2, r0, #1
 800c3a8:	4606      	mov	r6, r0
 800c3aa:	d1d6      	bne.n	800c35a <_svfiprintf_r+0x176>
 800c3ac:	89ab      	ldrh	r3, [r5, #12]
 800c3ae:	065b      	lsls	r3, r3, #25
 800c3b0:	f53f af2c 	bmi.w	800c20c <_svfiprintf_r+0x28>
 800c3b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3b6:	b01d      	add	sp, #116	; 0x74
 800c3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3bc:	ab03      	add	r3, sp, #12
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	462a      	mov	r2, r5
 800c3c2:	4b06      	ldr	r3, [pc, #24]	; (800c3dc <_svfiprintf_r+0x1f8>)
 800c3c4:	a904      	add	r1, sp, #16
 800c3c6:	4638      	mov	r0, r7
 800c3c8:	f7fc fbc8 	bl	8008b5c <_printf_i>
 800c3cc:	e7eb      	b.n	800c3a6 <_svfiprintf_r+0x1c2>
 800c3ce:	bf00      	nop
 800c3d0:	0800d2d4 	.word	0x0800d2d4
 800c3d4:	0800d2de 	.word	0x0800d2de
 800c3d8:	08008615 	.word	0x08008615
 800c3dc:	0800c12d 	.word	0x0800c12d
 800c3e0:	0800d2da 	.word	0x0800d2da

0800c3e4 <__sfputc_r>:
 800c3e4:	6893      	ldr	r3, [r2, #8]
 800c3e6:	3b01      	subs	r3, #1
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	b410      	push	{r4}
 800c3ec:	6093      	str	r3, [r2, #8]
 800c3ee:	da08      	bge.n	800c402 <__sfputc_r+0x1e>
 800c3f0:	6994      	ldr	r4, [r2, #24]
 800c3f2:	42a3      	cmp	r3, r4
 800c3f4:	db01      	blt.n	800c3fa <__sfputc_r+0x16>
 800c3f6:	290a      	cmp	r1, #10
 800c3f8:	d103      	bne.n	800c402 <__sfputc_r+0x1e>
 800c3fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3fe:	f000 b9bb 	b.w	800c778 <__swbuf_r>
 800c402:	6813      	ldr	r3, [r2, #0]
 800c404:	1c58      	adds	r0, r3, #1
 800c406:	6010      	str	r0, [r2, #0]
 800c408:	7019      	strb	r1, [r3, #0]
 800c40a:	4608      	mov	r0, r1
 800c40c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c410:	4770      	bx	lr

0800c412 <__sfputs_r>:
 800c412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c414:	4606      	mov	r6, r0
 800c416:	460f      	mov	r7, r1
 800c418:	4614      	mov	r4, r2
 800c41a:	18d5      	adds	r5, r2, r3
 800c41c:	42ac      	cmp	r4, r5
 800c41e:	d101      	bne.n	800c424 <__sfputs_r+0x12>
 800c420:	2000      	movs	r0, #0
 800c422:	e007      	b.n	800c434 <__sfputs_r+0x22>
 800c424:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c428:	463a      	mov	r2, r7
 800c42a:	4630      	mov	r0, r6
 800c42c:	f7ff ffda 	bl	800c3e4 <__sfputc_r>
 800c430:	1c43      	adds	r3, r0, #1
 800c432:	d1f3      	bne.n	800c41c <__sfputs_r+0xa>
 800c434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c438 <_vfiprintf_r>:
 800c438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c43c:	460d      	mov	r5, r1
 800c43e:	b09d      	sub	sp, #116	; 0x74
 800c440:	4614      	mov	r4, r2
 800c442:	4698      	mov	r8, r3
 800c444:	4606      	mov	r6, r0
 800c446:	b118      	cbz	r0, 800c450 <_vfiprintf_r+0x18>
 800c448:	6983      	ldr	r3, [r0, #24]
 800c44a:	b90b      	cbnz	r3, 800c450 <_vfiprintf_r+0x18>
 800c44c:	f7fe fc7a 	bl	800ad44 <__sinit>
 800c450:	4b89      	ldr	r3, [pc, #548]	; (800c678 <_vfiprintf_r+0x240>)
 800c452:	429d      	cmp	r5, r3
 800c454:	d11b      	bne.n	800c48e <_vfiprintf_r+0x56>
 800c456:	6875      	ldr	r5, [r6, #4]
 800c458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c45a:	07d9      	lsls	r1, r3, #31
 800c45c:	d405      	bmi.n	800c46a <_vfiprintf_r+0x32>
 800c45e:	89ab      	ldrh	r3, [r5, #12]
 800c460:	059a      	lsls	r2, r3, #22
 800c462:	d402      	bmi.n	800c46a <_vfiprintf_r+0x32>
 800c464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c466:	f7ff f87e 	bl	800b566 <__retarget_lock_acquire_recursive>
 800c46a:	89ab      	ldrh	r3, [r5, #12]
 800c46c:	071b      	lsls	r3, r3, #28
 800c46e:	d501      	bpl.n	800c474 <_vfiprintf_r+0x3c>
 800c470:	692b      	ldr	r3, [r5, #16]
 800c472:	b9eb      	cbnz	r3, 800c4b0 <_vfiprintf_r+0x78>
 800c474:	4629      	mov	r1, r5
 800c476:	4630      	mov	r0, r6
 800c478:	f000 f9f0 	bl	800c85c <__swsetup_r>
 800c47c:	b1c0      	cbz	r0, 800c4b0 <_vfiprintf_r+0x78>
 800c47e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c480:	07dc      	lsls	r4, r3, #31
 800c482:	d50e      	bpl.n	800c4a2 <_vfiprintf_r+0x6a>
 800c484:	f04f 30ff 	mov.w	r0, #4294967295
 800c488:	b01d      	add	sp, #116	; 0x74
 800c48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c48e:	4b7b      	ldr	r3, [pc, #492]	; (800c67c <_vfiprintf_r+0x244>)
 800c490:	429d      	cmp	r5, r3
 800c492:	d101      	bne.n	800c498 <_vfiprintf_r+0x60>
 800c494:	68b5      	ldr	r5, [r6, #8]
 800c496:	e7df      	b.n	800c458 <_vfiprintf_r+0x20>
 800c498:	4b79      	ldr	r3, [pc, #484]	; (800c680 <_vfiprintf_r+0x248>)
 800c49a:	429d      	cmp	r5, r3
 800c49c:	bf08      	it	eq
 800c49e:	68f5      	ldreq	r5, [r6, #12]
 800c4a0:	e7da      	b.n	800c458 <_vfiprintf_r+0x20>
 800c4a2:	89ab      	ldrh	r3, [r5, #12]
 800c4a4:	0598      	lsls	r0, r3, #22
 800c4a6:	d4ed      	bmi.n	800c484 <_vfiprintf_r+0x4c>
 800c4a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4aa:	f7ff f85d 	bl	800b568 <__retarget_lock_release_recursive>
 800c4ae:	e7e9      	b.n	800c484 <_vfiprintf_r+0x4c>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c4b4:	2320      	movs	r3, #32
 800c4b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4be:	2330      	movs	r3, #48	; 0x30
 800c4c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c684 <_vfiprintf_r+0x24c>
 800c4c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4c8:	f04f 0901 	mov.w	r9, #1
 800c4cc:	4623      	mov	r3, r4
 800c4ce:	469a      	mov	sl, r3
 800c4d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4d4:	b10a      	cbz	r2, 800c4da <_vfiprintf_r+0xa2>
 800c4d6:	2a25      	cmp	r2, #37	; 0x25
 800c4d8:	d1f9      	bne.n	800c4ce <_vfiprintf_r+0x96>
 800c4da:	ebba 0b04 	subs.w	fp, sl, r4
 800c4de:	d00b      	beq.n	800c4f8 <_vfiprintf_r+0xc0>
 800c4e0:	465b      	mov	r3, fp
 800c4e2:	4622      	mov	r2, r4
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	f7ff ff93 	bl	800c412 <__sfputs_r>
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	f000 80aa 	beq.w	800c646 <_vfiprintf_r+0x20e>
 800c4f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4f4:	445a      	add	r2, fp
 800c4f6:	9209      	str	r2, [sp, #36]	; 0x24
 800c4f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f000 80a2 	beq.w	800c646 <_vfiprintf_r+0x20e>
 800c502:	2300      	movs	r3, #0
 800c504:	f04f 32ff 	mov.w	r2, #4294967295
 800c508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c50c:	f10a 0a01 	add.w	sl, sl, #1
 800c510:	9304      	str	r3, [sp, #16]
 800c512:	9307      	str	r3, [sp, #28]
 800c514:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c518:	931a      	str	r3, [sp, #104]	; 0x68
 800c51a:	4654      	mov	r4, sl
 800c51c:	2205      	movs	r2, #5
 800c51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c522:	4858      	ldr	r0, [pc, #352]	; (800c684 <_vfiprintf_r+0x24c>)
 800c524:	f7f3 fe84 	bl	8000230 <memchr>
 800c528:	9a04      	ldr	r2, [sp, #16]
 800c52a:	b9d8      	cbnz	r0, 800c564 <_vfiprintf_r+0x12c>
 800c52c:	06d1      	lsls	r1, r2, #27
 800c52e:	bf44      	itt	mi
 800c530:	2320      	movmi	r3, #32
 800c532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c536:	0713      	lsls	r3, r2, #28
 800c538:	bf44      	itt	mi
 800c53a:	232b      	movmi	r3, #43	; 0x2b
 800c53c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c540:	f89a 3000 	ldrb.w	r3, [sl]
 800c544:	2b2a      	cmp	r3, #42	; 0x2a
 800c546:	d015      	beq.n	800c574 <_vfiprintf_r+0x13c>
 800c548:	9a07      	ldr	r2, [sp, #28]
 800c54a:	4654      	mov	r4, sl
 800c54c:	2000      	movs	r0, #0
 800c54e:	f04f 0c0a 	mov.w	ip, #10
 800c552:	4621      	mov	r1, r4
 800c554:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c558:	3b30      	subs	r3, #48	; 0x30
 800c55a:	2b09      	cmp	r3, #9
 800c55c:	d94e      	bls.n	800c5fc <_vfiprintf_r+0x1c4>
 800c55e:	b1b0      	cbz	r0, 800c58e <_vfiprintf_r+0x156>
 800c560:	9207      	str	r2, [sp, #28]
 800c562:	e014      	b.n	800c58e <_vfiprintf_r+0x156>
 800c564:	eba0 0308 	sub.w	r3, r0, r8
 800c568:	fa09 f303 	lsl.w	r3, r9, r3
 800c56c:	4313      	orrs	r3, r2
 800c56e:	9304      	str	r3, [sp, #16]
 800c570:	46a2      	mov	sl, r4
 800c572:	e7d2      	b.n	800c51a <_vfiprintf_r+0xe2>
 800c574:	9b03      	ldr	r3, [sp, #12]
 800c576:	1d19      	adds	r1, r3, #4
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	9103      	str	r1, [sp, #12]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	bfbb      	ittet	lt
 800c580:	425b      	neglt	r3, r3
 800c582:	f042 0202 	orrlt.w	r2, r2, #2
 800c586:	9307      	strge	r3, [sp, #28]
 800c588:	9307      	strlt	r3, [sp, #28]
 800c58a:	bfb8      	it	lt
 800c58c:	9204      	strlt	r2, [sp, #16]
 800c58e:	7823      	ldrb	r3, [r4, #0]
 800c590:	2b2e      	cmp	r3, #46	; 0x2e
 800c592:	d10c      	bne.n	800c5ae <_vfiprintf_r+0x176>
 800c594:	7863      	ldrb	r3, [r4, #1]
 800c596:	2b2a      	cmp	r3, #42	; 0x2a
 800c598:	d135      	bne.n	800c606 <_vfiprintf_r+0x1ce>
 800c59a:	9b03      	ldr	r3, [sp, #12]
 800c59c:	1d1a      	adds	r2, r3, #4
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	9203      	str	r2, [sp, #12]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	bfb8      	it	lt
 800c5a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5aa:	3402      	adds	r4, #2
 800c5ac:	9305      	str	r3, [sp, #20]
 800c5ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c694 <_vfiprintf_r+0x25c>
 800c5b2:	7821      	ldrb	r1, [r4, #0]
 800c5b4:	2203      	movs	r2, #3
 800c5b6:	4650      	mov	r0, sl
 800c5b8:	f7f3 fe3a 	bl	8000230 <memchr>
 800c5bc:	b140      	cbz	r0, 800c5d0 <_vfiprintf_r+0x198>
 800c5be:	2340      	movs	r3, #64	; 0x40
 800c5c0:	eba0 000a 	sub.w	r0, r0, sl
 800c5c4:	fa03 f000 	lsl.w	r0, r3, r0
 800c5c8:	9b04      	ldr	r3, [sp, #16]
 800c5ca:	4303      	orrs	r3, r0
 800c5cc:	3401      	adds	r4, #1
 800c5ce:	9304      	str	r3, [sp, #16]
 800c5d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5d4:	482c      	ldr	r0, [pc, #176]	; (800c688 <_vfiprintf_r+0x250>)
 800c5d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5da:	2206      	movs	r2, #6
 800c5dc:	f7f3 fe28 	bl	8000230 <memchr>
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	d03f      	beq.n	800c664 <_vfiprintf_r+0x22c>
 800c5e4:	4b29      	ldr	r3, [pc, #164]	; (800c68c <_vfiprintf_r+0x254>)
 800c5e6:	bb1b      	cbnz	r3, 800c630 <_vfiprintf_r+0x1f8>
 800c5e8:	9b03      	ldr	r3, [sp, #12]
 800c5ea:	3307      	adds	r3, #7
 800c5ec:	f023 0307 	bic.w	r3, r3, #7
 800c5f0:	3308      	adds	r3, #8
 800c5f2:	9303      	str	r3, [sp, #12]
 800c5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5f6:	443b      	add	r3, r7
 800c5f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c5fa:	e767      	b.n	800c4cc <_vfiprintf_r+0x94>
 800c5fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c600:	460c      	mov	r4, r1
 800c602:	2001      	movs	r0, #1
 800c604:	e7a5      	b.n	800c552 <_vfiprintf_r+0x11a>
 800c606:	2300      	movs	r3, #0
 800c608:	3401      	adds	r4, #1
 800c60a:	9305      	str	r3, [sp, #20]
 800c60c:	4619      	mov	r1, r3
 800c60e:	f04f 0c0a 	mov.w	ip, #10
 800c612:	4620      	mov	r0, r4
 800c614:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c618:	3a30      	subs	r2, #48	; 0x30
 800c61a:	2a09      	cmp	r2, #9
 800c61c:	d903      	bls.n	800c626 <_vfiprintf_r+0x1ee>
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d0c5      	beq.n	800c5ae <_vfiprintf_r+0x176>
 800c622:	9105      	str	r1, [sp, #20]
 800c624:	e7c3      	b.n	800c5ae <_vfiprintf_r+0x176>
 800c626:	fb0c 2101 	mla	r1, ip, r1, r2
 800c62a:	4604      	mov	r4, r0
 800c62c:	2301      	movs	r3, #1
 800c62e:	e7f0      	b.n	800c612 <_vfiprintf_r+0x1da>
 800c630:	ab03      	add	r3, sp, #12
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	462a      	mov	r2, r5
 800c636:	4b16      	ldr	r3, [pc, #88]	; (800c690 <_vfiprintf_r+0x258>)
 800c638:	a904      	add	r1, sp, #16
 800c63a:	4630      	mov	r0, r6
 800c63c:	f7fb ffea 	bl	8008614 <_printf_float>
 800c640:	4607      	mov	r7, r0
 800c642:	1c78      	adds	r0, r7, #1
 800c644:	d1d6      	bne.n	800c5f4 <_vfiprintf_r+0x1bc>
 800c646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c648:	07d9      	lsls	r1, r3, #31
 800c64a:	d405      	bmi.n	800c658 <_vfiprintf_r+0x220>
 800c64c:	89ab      	ldrh	r3, [r5, #12]
 800c64e:	059a      	lsls	r2, r3, #22
 800c650:	d402      	bmi.n	800c658 <_vfiprintf_r+0x220>
 800c652:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c654:	f7fe ff88 	bl	800b568 <__retarget_lock_release_recursive>
 800c658:	89ab      	ldrh	r3, [r5, #12]
 800c65a:	065b      	lsls	r3, r3, #25
 800c65c:	f53f af12 	bmi.w	800c484 <_vfiprintf_r+0x4c>
 800c660:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c662:	e711      	b.n	800c488 <_vfiprintf_r+0x50>
 800c664:	ab03      	add	r3, sp, #12
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	462a      	mov	r2, r5
 800c66a:	4b09      	ldr	r3, [pc, #36]	; (800c690 <_vfiprintf_r+0x258>)
 800c66c:	a904      	add	r1, sp, #16
 800c66e:	4630      	mov	r0, r6
 800c670:	f7fc fa74 	bl	8008b5c <_printf_i>
 800c674:	e7e4      	b.n	800c640 <_vfiprintf_r+0x208>
 800c676:	bf00      	nop
 800c678:	0800d0bc 	.word	0x0800d0bc
 800c67c:	0800d0dc 	.word	0x0800d0dc
 800c680:	0800d09c 	.word	0x0800d09c
 800c684:	0800d2d4 	.word	0x0800d2d4
 800c688:	0800d2de 	.word	0x0800d2de
 800c68c:	08008615 	.word	0x08008615
 800c690:	0800c413 	.word	0x0800c413
 800c694:	0800d2da 	.word	0x0800d2da

0800c698 <nan>:
 800c698:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c6a0 <nan+0x8>
 800c69c:	4770      	bx	lr
 800c69e:	bf00      	nop
 800c6a0:	00000000 	.word	0x00000000
 800c6a4:	7ff80000 	.word	0x7ff80000

0800c6a8 <_sbrk_r>:
 800c6a8:	b538      	push	{r3, r4, r5, lr}
 800c6aa:	4d06      	ldr	r5, [pc, #24]	; (800c6c4 <_sbrk_r+0x1c>)
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	4608      	mov	r0, r1
 800c6b2:	602b      	str	r3, [r5, #0]
 800c6b4:	f7f5 f9d6 	bl	8001a64 <_sbrk>
 800c6b8:	1c43      	adds	r3, r0, #1
 800c6ba:	d102      	bne.n	800c6c2 <_sbrk_r+0x1a>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	b103      	cbz	r3, 800c6c2 <_sbrk_r+0x1a>
 800c6c0:	6023      	str	r3, [r4, #0]
 800c6c2:	bd38      	pop	{r3, r4, r5, pc}
 800c6c4:	20000568 	.word	0x20000568

0800c6c8 <__sread>:
 800c6c8:	b510      	push	{r4, lr}
 800c6ca:	460c      	mov	r4, r1
 800c6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d0:	f000 fb02 	bl	800ccd8 <_read_r>
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	bfab      	itete	ge
 800c6d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6da:	89a3      	ldrhlt	r3, [r4, #12]
 800c6dc:	181b      	addge	r3, r3, r0
 800c6de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6e2:	bfac      	ite	ge
 800c6e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6e6:	81a3      	strhlt	r3, [r4, #12]
 800c6e8:	bd10      	pop	{r4, pc}

0800c6ea <__swrite>:
 800c6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ee:	461f      	mov	r7, r3
 800c6f0:	898b      	ldrh	r3, [r1, #12]
 800c6f2:	05db      	lsls	r3, r3, #23
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	460c      	mov	r4, r1
 800c6f8:	4616      	mov	r6, r2
 800c6fa:	d505      	bpl.n	800c708 <__swrite+0x1e>
 800c6fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c700:	2302      	movs	r3, #2
 800c702:	2200      	movs	r2, #0
 800c704:	f000 fa1a 	bl	800cb3c <_lseek_r>
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c70e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c712:	81a3      	strh	r3, [r4, #12]
 800c714:	4632      	mov	r2, r6
 800c716:	463b      	mov	r3, r7
 800c718:	4628      	mov	r0, r5
 800c71a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c71e:	f000 b88b 	b.w	800c838 <_write_r>

0800c722 <__sseek>:
 800c722:	b510      	push	{r4, lr}
 800c724:	460c      	mov	r4, r1
 800c726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c72a:	f000 fa07 	bl	800cb3c <_lseek_r>
 800c72e:	1c43      	adds	r3, r0, #1
 800c730:	89a3      	ldrh	r3, [r4, #12]
 800c732:	bf15      	itete	ne
 800c734:	6560      	strne	r0, [r4, #84]	; 0x54
 800c736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c73a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c73e:	81a3      	strheq	r3, [r4, #12]
 800c740:	bf18      	it	ne
 800c742:	81a3      	strhne	r3, [r4, #12]
 800c744:	bd10      	pop	{r4, pc}

0800c746 <__sclose>:
 800c746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c74a:	f000 b913 	b.w	800c974 <_close_r>

0800c74e <strncmp>:
 800c74e:	b510      	push	{r4, lr}
 800c750:	b17a      	cbz	r2, 800c772 <strncmp+0x24>
 800c752:	4603      	mov	r3, r0
 800c754:	3901      	subs	r1, #1
 800c756:	1884      	adds	r4, r0, r2
 800c758:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c75c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c760:	4290      	cmp	r0, r2
 800c762:	d101      	bne.n	800c768 <strncmp+0x1a>
 800c764:	42a3      	cmp	r3, r4
 800c766:	d101      	bne.n	800c76c <strncmp+0x1e>
 800c768:	1a80      	subs	r0, r0, r2
 800c76a:	bd10      	pop	{r4, pc}
 800c76c:	2800      	cmp	r0, #0
 800c76e:	d1f3      	bne.n	800c758 <strncmp+0xa>
 800c770:	e7fa      	b.n	800c768 <strncmp+0x1a>
 800c772:	4610      	mov	r0, r2
 800c774:	e7f9      	b.n	800c76a <strncmp+0x1c>
	...

0800c778 <__swbuf_r>:
 800c778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c77a:	460e      	mov	r6, r1
 800c77c:	4614      	mov	r4, r2
 800c77e:	4605      	mov	r5, r0
 800c780:	b118      	cbz	r0, 800c78a <__swbuf_r+0x12>
 800c782:	6983      	ldr	r3, [r0, #24]
 800c784:	b90b      	cbnz	r3, 800c78a <__swbuf_r+0x12>
 800c786:	f7fe fadd 	bl	800ad44 <__sinit>
 800c78a:	4b21      	ldr	r3, [pc, #132]	; (800c810 <__swbuf_r+0x98>)
 800c78c:	429c      	cmp	r4, r3
 800c78e:	d12b      	bne.n	800c7e8 <__swbuf_r+0x70>
 800c790:	686c      	ldr	r4, [r5, #4]
 800c792:	69a3      	ldr	r3, [r4, #24]
 800c794:	60a3      	str	r3, [r4, #8]
 800c796:	89a3      	ldrh	r3, [r4, #12]
 800c798:	071a      	lsls	r2, r3, #28
 800c79a:	d52f      	bpl.n	800c7fc <__swbuf_r+0x84>
 800c79c:	6923      	ldr	r3, [r4, #16]
 800c79e:	b36b      	cbz	r3, 800c7fc <__swbuf_r+0x84>
 800c7a0:	6923      	ldr	r3, [r4, #16]
 800c7a2:	6820      	ldr	r0, [r4, #0]
 800c7a4:	1ac0      	subs	r0, r0, r3
 800c7a6:	6963      	ldr	r3, [r4, #20]
 800c7a8:	b2f6      	uxtb	r6, r6
 800c7aa:	4283      	cmp	r3, r0
 800c7ac:	4637      	mov	r7, r6
 800c7ae:	dc04      	bgt.n	800c7ba <__swbuf_r+0x42>
 800c7b0:	4621      	mov	r1, r4
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	f000 f974 	bl	800caa0 <_fflush_r>
 800c7b8:	bb30      	cbnz	r0, 800c808 <__swbuf_r+0x90>
 800c7ba:	68a3      	ldr	r3, [r4, #8]
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	60a3      	str	r3, [r4, #8]
 800c7c0:	6823      	ldr	r3, [r4, #0]
 800c7c2:	1c5a      	adds	r2, r3, #1
 800c7c4:	6022      	str	r2, [r4, #0]
 800c7c6:	701e      	strb	r6, [r3, #0]
 800c7c8:	6963      	ldr	r3, [r4, #20]
 800c7ca:	3001      	adds	r0, #1
 800c7cc:	4283      	cmp	r3, r0
 800c7ce:	d004      	beq.n	800c7da <__swbuf_r+0x62>
 800c7d0:	89a3      	ldrh	r3, [r4, #12]
 800c7d2:	07db      	lsls	r3, r3, #31
 800c7d4:	d506      	bpl.n	800c7e4 <__swbuf_r+0x6c>
 800c7d6:	2e0a      	cmp	r6, #10
 800c7d8:	d104      	bne.n	800c7e4 <__swbuf_r+0x6c>
 800c7da:	4621      	mov	r1, r4
 800c7dc:	4628      	mov	r0, r5
 800c7de:	f000 f95f 	bl	800caa0 <_fflush_r>
 800c7e2:	b988      	cbnz	r0, 800c808 <__swbuf_r+0x90>
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7e8:	4b0a      	ldr	r3, [pc, #40]	; (800c814 <__swbuf_r+0x9c>)
 800c7ea:	429c      	cmp	r4, r3
 800c7ec:	d101      	bne.n	800c7f2 <__swbuf_r+0x7a>
 800c7ee:	68ac      	ldr	r4, [r5, #8]
 800c7f0:	e7cf      	b.n	800c792 <__swbuf_r+0x1a>
 800c7f2:	4b09      	ldr	r3, [pc, #36]	; (800c818 <__swbuf_r+0xa0>)
 800c7f4:	429c      	cmp	r4, r3
 800c7f6:	bf08      	it	eq
 800c7f8:	68ec      	ldreq	r4, [r5, #12]
 800c7fa:	e7ca      	b.n	800c792 <__swbuf_r+0x1a>
 800c7fc:	4621      	mov	r1, r4
 800c7fe:	4628      	mov	r0, r5
 800c800:	f000 f82c 	bl	800c85c <__swsetup_r>
 800c804:	2800      	cmp	r0, #0
 800c806:	d0cb      	beq.n	800c7a0 <__swbuf_r+0x28>
 800c808:	f04f 37ff 	mov.w	r7, #4294967295
 800c80c:	e7ea      	b.n	800c7e4 <__swbuf_r+0x6c>
 800c80e:	bf00      	nop
 800c810:	0800d0bc 	.word	0x0800d0bc
 800c814:	0800d0dc 	.word	0x0800d0dc
 800c818:	0800d09c 	.word	0x0800d09c

0800c81c <__ascii_wctomb>:
 800c81c:	b149      	cbz	r1, 800c832 <__ascii_wctomb+0x16>
 800c81e:	2aff      	cmp	r2, #255	; 0xff
 800c820:	bf85      	ittet	hi
 800c822:	238a      	movhi	r3, #138	; 0x8a
 800c824:	6003      	strhi	r3, [r0, #0]
 800c826:	700a      	strbls	r2, [r1, #0]
 800c828:	f04f 30ff 	movhi.w	r0, #4294967295
 800c82c:	bf98      	it	ls
 800c82e:	2001      	movls	r0, #1
 800c830:	4770      	bx	lr
 800c832:	4608      	mov	r0, r1
 800c834:	4770      	bx	lr
	...

0800c838 <_write_r>:
 800c838:	b538      	push	{r3, r4, r5, lr}
 800c83a:	4d07      	ldr	r5, [pc, #28]	; (800c858 <_write_r+0x20>)
 800c83c:	4604      	mov	r4, r0
 800c83e:	4608      	mov	r0, r1
 800c840:	4611      	mov	r1, r2
 800c842:	2200      	movs	r2, #0
 800c844:	602a      	str	r2, [r5, #0]
 800c846:	461a      	mov	r2, r3
 800c848:	f7f4 ff12 	bl	8001670 <_write>
 800c84c:	1c43      	adds	r3, r0, #1
 800c84e:	d102      	bne.n	800c856 <_write_r+0x1e>
 800c850:	682b      	ldr	r3, [r5, #0]
 800c852:	b103      	cbz	r3, 800c856 <_write_r+0x1e>
 800c854:	6023      	str	r3, [r4, #0]
 800c856:	bd38      	pop	{r3, r4, r5, pc}
 800c858:	20000568 	.word	0x20000568

0800c85c <__swsetup_r>:
 800c85c:	4b32      	ldr	r3, [pc, #200]	; (800c928 <__swsetup_r+0xcc>)
 800c85e:	b570      	push	{r4, r5, r6, lr}
 800c860:	681d      	ldr	r5, [r3, #0]
 800c862:	4606      	mov	r6, r0
 800c864:	460c      	mov	r4, r1
 800c866:	b125      	cbz	r5, 800c872 <__swsetup_r+0x16>
 800c868:	69ab      	ldr	r3, [r5, #24]
 800c86a:	b913      	cbnz	r3, 800c872 <__swsetup_r+0x16>
 800c86c:	4628      	mov	r0, r5
 800c86e:	f7fe fa69 	bl	800ad44 <__sinit>
 800c872:	4b2e      	ldr	r3, [pc, #184]	; (800c92c <__swsetup_r+0xd0>)
 800c874:	429c      	cmp	r4, r3
 800c876:	d10f      	bne.n	800c898 <__swsetup_r+0x3c>
 800c878:	686c      	ldr	r4, [r5, #4]
 800c87a:	89a3      	ldrh	r3, [r4, #12]
 800c87c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c880:	0719      	lsls	r1, r3, #28
 800c882:	d42c      	bmi.n	800c8de <__swsetup_r+0x82>
 800c884:	06dd      	lsls	r5, r3, #27
 800c886:	d411      	bmi.n	800c8ac <__swsetup_r+0x50>
 800c888:	2309      	movs	r3, #9
 800c88a:	6033      	str	r3, [r6, #0]
 800c88c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c890:	81a3      	strh	r3, [r4, #12]
 800c892:	f04f 30ff 	mov.w	r0, #4294967295
 800c896:	e03e      	b.n	800c916 <__swsetup_r+0xba>
 800c898:	4b25      	ldr	r3, [pc, #148]	; (800c930 <__swsetup_r+0xd4>)
 800c89a:	429c      	cmp	r4, r3
 800c89c:	d101      	bne.n	800c8a2 <__swsetup_r+0x46>
 800c89e:	68ac      	ldr	r4, [r5, #8]
 800c8a0:	e7eb      	b.n	800c87a <__swsetup_r+0x1e>
 800c8a2:	4b24      	ldr	r3, [pc, #144]	; (800c934 <__swsetup_r+0xd8>)
 800c8a4:	429c      	cmp	r4, r3
 800c8a6:	bf08      	it	eq
 800c8a8:	68ec      	ldreq	r4, [r5, #12]
 800c8aa:	e7e6      	b.n	800c87a <__swsetup_r+0x1e>
 800c8ac:	0758      	lsls	r0, r3, #29
 800c8ae:	d512      	bpl.n	800c8d6 <__swsetup_r+0x7a>
 800c8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8b2:	b141      	cbz	r1, 800c8c6 <__swsetup_r+0x6a>
 800c8b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8b8:	4299      	cmp	r1, r3
 800c8ba:	d002      	beq.n	800c8c2 <__swsetup_r+0x66>
 800c8bc:	4630      	mov	r0, r6
 800c8be:	f7ff fb55 	bl	800bf6c <_free_r>
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	6363      	str	r3, [r4, #52]	; 0x34
 800c8c6:	89a3      	ldrh	r3, [r4, #12]
 800c8c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8cc:	81a3      	strh	r3, [r4, #12]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	6063      	str	r3, [r4, #4]
 800c8d2:	6923      	ldr	r3, [r4, #16]
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	89a3      	ldrh	r3, [r4, #12]
 800c8d8:	f043 0308 	orr.w	r3, r3, #8
 800c8dc:	81a3      	strh	r3, [r4, #12]
 800c8de:	6923      	ldr	r3, [r4, #16]
 800c8e0:	b94b      	cbnz	r3, 800c8f6 <__swsetup_r+0x9a>
 800c8e2:	89a3      	ldrh	r3, [r4, #12]
 800c8e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8ec:	d003      	beq.n	800c8f6 <__swsetup_r+0x9a>
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	4630      	mov	r0, r6
 800c8f2:	f000 f95b 	bl	800cbac <__smakebuf_r>
 800c8f6:	89a0      	ldrh	r0, [r4, #12]
 800c8f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8fc:	f010 0301 	ands.w	r3, r0, #1
 800c900:	d00a      	beq.n	800c918 <__swsetup_r+0xbc>
 800c902:	2300      	movs	r3, #0
 800c904:	60a3      	str	r3, [r4, #8]
 800c906:	6963      	ldr	r3, [r4, #20]
 800c908:	425b      	negs	r3, r3
 800c90a:	61a3      	str	r3, [r4, #24]
 800c90c:	6923      	ldr	r3, [r4, #16]
 800c90e:	b943      	cbnz	r3, 800c922 <__swsetup_r+0xc6>
 800c910:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c914:	d1ba      	bne.n	800c88c <__swsetup_r+0x30>
 800c916:	bd70      	pop	{r4, r5, r6, pc}
 800c918:	0781      	lsls	r1, r0, #30
 800c91a:	bf58      	it	pl
 800c91c:	6963      	ldrpl	r3, [r4, #20]
 800c91e:	60a3      	str	r3, [r4, #8]
 800c920:	e7f4      	b.n	800c90c <__swsetup_r+0xb0>
 800c922:	2000      	movs	r0, #0
 800c924:	e7f7      	b.n	800c916 <__swsetup_r+0xba>
 800c926:	bf00      	nop
 800c928:	2000000c 	.word	0x2000000c
 800c92c:	0800d0bc 	.word	0x0800d0bc
 800c930:	0800d0dc 	.word	0x0800d0dc
 800c934:	0800d09c 	.word	0x0800d09c

0800c938 <__assert_func>:
 800c938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c93a:	4614      	mov	r4, r2
 800c93c:	461a      	mov	r2, r3
 800c93e:	4b09      	ldr	r3, [pc, #36]	; (800c964 <__assert_func+0x2c>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4605      	mov	r5, r0
 800c944:	68d8      	ldr	r0, [r3, #12]
 800c946:	b14c      	cbz	r4, 800c95c <__assert_func+0x24>
 800c948:	4b07      	ldr	r3, [pc, #28]	; (800c968 <__assert_func+0x30>)
 800c94a:	9100      	str	r1, [sp, #0]
 800c94c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c950:	4906      	ldr	r1, [pc, #24]	; (800c96c <__assert_func+0x34>)
 800c952:	462b      	mov	r3, r5
 800c954:	f000 f8e0 	bl	800cb18 <fiprintf>
 800c958:	f000 f9d0 	bl	800ccfc <abort>
 800c95c:	4b04      	ldr	r3, [pc, #16]	; (800c970 <__assert_func+0x38>)
 800c95e:	461c      	mov	r4, r3
 800c960:	e7f3      	b.n	800c94a <__assert_func+0x12>
 800c962:	bf00      	nop
 800c964:	2000000c 	.word	0x2000000c
 800c968:	0800d2e5 	.word	0x0800d2e5
 800c96c:	0800d2f2 	.word	0x0800d2f2
 800c970:	0800d320 	.word	0x0800d320

0800c974 <_close_r>:
 800c974:	b538      	push	{r3, r4, r5, lr}
 800c976:	4d06      	ldr	r5, [pc, #24]	; (800c990 <_close_r+0x1c>)
 800c978:	2300      	movs	r3, #0
 800c97a:	4604      	mov	r4, r0
 800c97c:	4608      	mov	r0, r1
 800c97e:	602b      	str	r3, [r5, #0]
 800c980:	f7f5 f83c 	bl	80019fc <_close>
 800c984:	1c43      	adds	r3, r0, #1
 800c986:	d102      	bne.n	800c98e <_close_r+0x1a>
 800c988:	682b      	ldr	r3, [r5, #0]
 800c98a:	b103      	cbz	r3, 800c98e <_close_r+0x1a>
 800c98c:	6023      	str	r3, [r4, #0]
 800c98e:	bd38      	pop	{r3, r4, r5, pc}
 800c990:	20000568 	.word	0x20000568

0800c994 <__sflush_r>:
 800c994:	898a      	ldrh	r2, [r1, #12]
 800c996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c99a:	4605      	mov	r5, r0
 800c99c:	0710      	lsls	r0, r2, #28
 800c99e:	460c      	mov	r4, r1
 800c9a0:	d458      	bmi.n	800ca54 <__sflush_r+0xc0>
 800c9a2:	684b      	ldr	r3, [r1, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	dc05      	bgt.n	800c9b4 <__sflush_r+0x20>
 800c9a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	dc02      	bgt.n	800c9b4 <__sflush_r+0x20>
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9b6:	2e00      	cmp	r6, #0
 800c9b8:	d0f9      	beq.n	800c9ae <__sflush_r+0x1a>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9c0:	682f      	ldr	r7, [r5, #0]
 800c9c2:	602b      	str	r3, [r5, #0]
 800c9c4:	d032      	beq.n	800ca2c <__sflush_r+0x98>
 800c9c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9c8:	89a3      	ldrh	r3, [r4, #12]
 800c9ca:	075a      	lsls	r2, r3, #29
 800c9cc:	d505      	bpl.n	800c9da <__sflush_r+0x46>
 800c9ce:	6863      	ldr	r3, [r4, #4]
 800c9d0:	1ac0      	subs	r0, r0, r3
 800c9d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9d4:	b10b      	cbz	r3, 800c9da <__sflush_r+0x46>
 800c9d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9d8:	1ac0      	subs	r0, r0, r3
 800c9da:	2300      	movs	r3, #0
 800c9dc:	4602      	mov	r2, r0
 800c9de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9e0:	6a21      	ldr	r1, [r4, #32]
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	47b0      	blx	r6
 800c9e6:	1c43      	adds	r3, r0, #1
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	d106      	bne.n	800c9fa <__sflush_r+0x66>
 800c9ec:	6829      	ldr	r1, [r5, #0]
 800c9ee:	291d      	cmp	r1, #29
 800c9f0:	d82c      	bhi.n	800ca4c <__sflush_r+0xb8>
 800c9f2:	4a2a      	ldr	r2, [pc, #168]	; (800ca9c <__sflush_r+0x108>)
 800c9f4:	40ca      	lsrs	r2, r1
 800c9f6:	07d6      	lsls	r6, r2, #31
 800c9f8:	d528      	bpl.n	800ca4c <__sflush_r+0xb8>
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	6062      	str	r2, [r4, #4]
 800c9fe:	04d9      	lsls	r1, r3, #19
 800ca00:	6922      	ldr	r2, [r4, #16]
 800ca02:	6022      	str	r2, [r4, #0]
 800ca04:	d504      	bpl.n	800ca10 <__sflush_r+0x7c>
 800ca06:	1c42      	adds	r2, r0, #1
 800ca08:	d101      	bne.n	800ca0e <__sflush_r+0x7a>
 800ca0a:	682b      	ldr	r3, [r5, #0]
 800ca0c:	b903      	cbnz	r3, 800ca10 <__sflush_r+0x7c>
 800ca0e:	6560      	str	r0, [r4, #84]	; 0x54
 800ca10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca12:	602f      	str	r7, [r5, #0]
 800ca14:	2900      	cmp	r1, #0
 800ca16:	d0ca      	beq.n	800c9ae <__sflush_r+0x1a>
 800ca18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca1c:	4299      	cmp	r1, r3
 800ca1e:	d002      	beq.n	800ca26 <__sflush_r+0x92>
 800ca20:	4628      	mov	r0, r5
 800ca22:	f7ff faa3 	bl	800bf6c <_free_r>
 800ca26:	2000      	movs	r0, #0
 800ca28:	6360      	str	r0, [r4, #52]	; 0x34
 800ca2a:	e7c1      	b.n	800c9b0 <__sflush_r+0x1c>
 800ca2c:	6a21      	ldr	r1, [r4, #32]
 800ca2e:	2301      	movs	r3, #1
 800ca30:	4628      	mov	r0, r5
 800ca32:	47b0      	blx	r6
 800ca34:	1c41      	adds	r1, r0, #1
 800ca36:	d1c7      	bne.n	800c9c8 <__sflush_r+0x34>
 800ca38:	682b      	ldr	r3, [r5, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d0c4      	beq.n	800c9c8 <__sflush_r+0x34>
 800ca3e:	2b1d      	cmp	r3, #29
 800ca40:	d001      	beq.n	800ca46 <__sflush_r+0xb2>
 800ca42:	2b16      	cmp	r3, #22
 800ca44:	d101      	bne.n	800ca4a <__sflush_r+0xb6>
 800ca46:	602f      	str	r7, [r5, #0]
 800ca48:	e7b1      	b.n	800c9ae <__sflush_r+0x1a>
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca50:	81a3      	strh	r3, [r4, #12]
 800ca52:	e7ad      	b.n	800c9b0 <__sflush_r+0x1c>
 800ca54:	690f      	ldr	r7, [r1, #16]
 800ca56:	2f00      	cmp	r7, #0
 800ca58:	d0a9      	beq.n	800c9ae <__sflush_r+0x1a>
 800ca5a:	0793      	lsls	r3, r2, #30
 800ca5c:	680e      	ldr	r6, [r1, #0]
 800ca5e:	bf08      	it	eq
 800ca60:	694b      	ldreq	r3, [r1, #20]
 800ca62:	600f      	str	r7, [r1, #0]
 800ca64:	bf18      	it	ne
 800ca66:	2300      	movne	r3, #0
 800ca68:	eba6 0807 	sub.w	r8, r6, r7
 800ca6c:	608b      	str	r3, [r1, #8]
 800ca6e:	f1b8 0f00 	cmp.w	r8, #0
 800ca72:	dd9c      	ble.n	800c9ae <__sflush_r+0x1a>
 800ca74:	6a21      	ldr	r1, [r4, #32]
 800ca76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca78:	4643      	mov	r3, r8
 800ca7a:	463a      	mov	r2, r7
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	47b0      	blx	r6
 800ca80:	2800      	cmp	r0, #0
 800ca82:	dc06      	bgt.n	800ca92 <__sflush_r+0xfe>
 800ca84:	89a3      	ldrh	r3, [r4, #12]
 800ca86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca8a:	81a3      	strh	r3, [r4, #12]
 800ca8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca90:	e78e      	b.n	800c9b0 <__sflush_r+0x1c>
 800ca92:	4407      	add	r7, r0
 800ca94:	eba8 0800 	sub.w	r8, r8, r0
 800ca98:	e7e9      	b.n	800ca6e <__sflush_r+0xda>
 800ca9a:	bf00      	nop
 800ca9c:	20400001 	.word	0x20400001

0800caa0 <_fflush_r>:
 800caa0:	b538      	push	{r3, r4, r5, lr}
 800caa2:	690b      	ldr	r3, [r1, #16]
 800caa4:	4605      	mov	r5, r0
 800caa6:	460c      	mov	r4, r1
 800caa8:	b913      	cbnz	r3, 800cab0 <_fflush_r+0x10>
 800caaa:	2500      	movs	r5, #0
 800caac:	4628      	mov	r0, r5
 800caae:	bd38      	pop	{r3, r4, r5, pc}
 800cab0:	b118      	cbz	r0, 800caba <_fflush_r+0x1a>
 800cab2:	6983      	ldr	r3, [r0, #24]
 800cab4:	b90b      	cbnz	r3, 800caba <_fflush_r+0x1a>
 800cab6:	f7fe f945 	bl	800ad44 <__sinit>
 800caba:	4b14      	ldr	r3, [pc, #80]	; (800cb0c <_fflush_r+0x6c>)
 800cabc:	429c      	cmp	r4, r3
 800cabe:	d11b      	bne.n	800caf8 <_fflush_r+0x58>
 800cac0:	686c      	ldr	r4, [r5, #4]
 800cac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d0ef      	beq.n	800caaa <_fflush_r+0xa>
 800caca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cacc:	07d0      	lsls	r0, r2, #31
 800cace:	d404      	bmi.n	800cada <_fflush_r+0x3a>
 800cad0:	0599      	lsls	r1, r3, #22
 800cad2:	d402      	bmi.n	800cada <_fflush_r+0x3a>
 800cad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cad6:	f7fe fd46 	bl	800b566 <__retarget_lock_acquire_recursive>
 800cada:	4628      	mov	r0, r5
 800cadc:	4621      	mov	r1, r4
 800cade:	f7ff ff59 	bl	800c994 <__sflush_r>
 800cae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cae4:	07da      	lsls	r2, r3, #31
 800cae6:	4605      	mov	r5, r0
 800cae8:	d4e0      	bmi.n	800caac <_fflush_r+0xc>
 800caea:	89a3      	ldrh	r3, [r4, #12]
 800caec:	059b      	lsls	r3, r3, #22
 800caee:	d4dd      	bmi.n	800caac <_fflush_r+0xc>
 800caf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caf2:	f7fe fd39 	bl	800b568 <__retarget_lock_release_recursive>
 800caf6:	e7d9      	b.n	800caac <_fflush_r+0xc>
 800caf8:	4b05      	ldr	r3, [pc, #20]	; (800cb10 <_fflush_r+0x70>)
 800cafa:	429c      	cmp	r4, r3
 800cafc:	d101      	bne.n	800cb02 <_fflush_r+0x62>
 800cafe:	68ac      	ldr	r4, [r5, #8]
 800cb00:	e7df      	b.n	800cac2 <_fflush_r+0x22>
 800cb02:	4b04      	ldr	r3, [pc, #16]	; (800cb14 <_fflush_r+0x74>)
 800cb04:	429c      	cmp	r4, r3
 800cb06:	bf08      	it	eq
 800cb08:	68ec      	ldreq	r4, [r5, #12]
 800cb0a:	e7da      	b.n	800cac2 <_fflush_r+0x22>
 800cb0c:	0800d0bc 	.word	0x0800d0bc
 800cb10:	0800d0dc 	.word	0x0800d0dc
 800cb14:	0800d09c 	.word	0x0800d09c

0800cb18 <fiprintf>:
 800cb18:	b40e      	push	{r1, r2, r3}
 800cb1a:	b503      	push	{r0, r1, lr}
 800cb1c:	4601      	mov	r1, r0
 800cb1e:	ab03      	add	r3, sp, #12
 800cb20:	4805      	ldr	r0, [pc, #20]	; (800cb38 <fiprintf+0x20>)
 800cb22:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb26:	6800      	ldr	r0, [r0, #0]
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	f7ff fc85 	bl	800c438 <_vfiprintf_r>
 800cb2e:	b002      	add	sp, #8
 800cb30:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb34:	b003      	add	sp, #12
 800cb36:	4770      	bx	lr
 800cb38:	2000000c 	.word	0x2000000c

0800cb3c <_lseek_r>:
 800cb3c:	b538      	push	{r3, r4, r5, lr}
 800cb3e:	4d07      	ldr	r5, [pc, #28]	; (800cb5c <_lseek_r+0x20>)
 800cb40:	4604      	mov	r4, r0
 800cb42:	4608      	mov	r0, r1
 800cb44:	4611      	mov	r1, r2
 800cb46:	2200      	movs	r2, #0
 800cb48:	602a      	str	r2, [r5, #0]
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	f7f4 ff7d 	bl	8001a4a <_lseek>
 800cb50:	1c43      	adds	r3, r0, #1
 800cb52:	d102      	bne.n	800cb5a <_lseek_r+0x1e>
 800cb54:	682b      	ldr	r3, [r5, #0]
 800cb56:	b103      	cbz	r3, 800cb5a <_lseek_r+0x1e>
 800cb58:	6023      	str	r3, [r4, #0]
 800cb5a:	bd38      	pop	{r3, r4, r5, pc}
 800cb5c:	20000568 	.word	0x20000568

0800cb60 <__swhatbuf_r>:
 800cb60:	b570      	push	{r4, r5, r6, lr}
 800cb62:	460e      	mov	r6, r1
 800cb64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb68:	2900      	cmp	r1, #0
 800cb6a:	b096      	sub	sp, #88	; 0x58
 800cb6c:	4614      	mov	r4, r2
 800cb6e:	461d      	mov	r5, r3
 800cb70:	da08      	bge.n	800cb84 <__swhatbuf_r+0x24>
 800cb72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb76:	2200      	movs	r2, #0
 800cb78:	602a      	str	r2, [r5, #0]
 800cb7a:	061a      	lsls	r2, r3, #24
 800cb7c:	d410      	bmi.n	800cba0 <__swhatbuf_r+0x40>
 800cb7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb82:	e00e      	b.n	800cba2 <__swhatbuf_r+0x42>
 800cb84:	466a      	mov	r2, sp
 800cb86:	f000 f8c1 	bl	800cd0c <_fstat_r>
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	dbf1      	blt.n	800cb72 <__swhatbuf_r+0x12>
 800cb8e:	9a01      	ldr	r2, [sp, #4]
 800cb90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb98:	425a      	negs	r2, r3
 800cb9a:	415a      	adcs	r2, r3
 800cb9c:	602a      	str	r2, [r5, #0]
 800cb9e:	e7ee      	b.n	800cb7e <__swhatbuf_r+0x1e>
 800cba0:	2340      	movs	r3, #64	; 0x40
 800cba2:	2000      	movs	r0, #0
 800cba4:	6023      	str	r3, [r4, #0]
 800cba6:	b016      	add	sp, #88	; 0x58
 800cba8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cbac <__smakebuf_r>:
 800cbac:	898b      	ldrh	r3, [r1, #12]
 800cbae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbb0:	079d      	lsls	r5, r3, #30
 800cbb2:	4606      	mov	r6, r0
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	d507      	bpl.n	800cbc8 <__smakebuf_r+0x1c>
 800cbb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	6123      	str	r3, [r4, #16]
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	6163      	str	r3, [r4, #20]
 800cbc4:	b002      	add	sp, #8
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
 800cbc8:	ab01      	add	r3, sp, #4
 800cbca:	466a      	mov	r2, sp
 800cbcc:	f7ff ffc8 	bl	800cb60 <__swhatbuf_r>
 800cbd0:	9900      	ldr	r1, [sp, #0]
 800cbd2:	4605      	mov	r5, r0
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	f7ff fa35 	bl	800c044 <_malloc_r>
 800cbda:	b948      	cbnz	r0, 800cbf0 <__smakebuf_r+0x44>
 800cbdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbe0:	059a      	lsls	r2, r3, #22
 800cbe2:	d4ef      	bmi.n	800cbc4 <__smakebuf_r+0x18>
 800cbe4:	f023 0303 	bic.w	r3, r3, #3
 800cbe8:	f043 0302 	orr.w	r3, r3, #2
 800cbec:	81a3      	strh	r3, [r4, #12]
 800cbee:	e7e3      	b.n	800cbb8 <__smakebuf_r+0xc>
 800cbf0:	4b0d      	ldr	r3, [pc, #52]	; (800cc28 <__smakebuf_r+0x7c>)
 800cbf2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbf4:	89a3      	ldrh	r3, [r4, #12]
 800cbf6:	6020      	str	r0, [r4, #0]
 800cbf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbfc:	81a3      	strh	r3, [r4, #12]
 800cbfe:	9b00      	ldr	r3, [sp, #0]
 800cc00:	6163      	str	r3, [r4, #20]
 800cc02:	9b01      	ldr	r3, [sp, #4]
 800cc04:	6120      	str	r0, [r4, #16]
 800cc06:	b15b      	cbz	r3, 800cc20 <__smakebuf_r+0x74>
 800cc08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	f000 f88f 	bl	800cd30 <_isatty_r>
 800cc12:	b128      	cbz	r0, 800cc20 <__smakebuf_r+0x74>
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	f023 0303 	bic.w	r3, r3, #3
 800cc1a:	f043 0301 	orr.w	r3, r3, #1
 800cc1e:	81a3      	strh	r3, [r4, #12]
 800cc20:	89a0      	ldrh	r0, [r4, #12]
 800cc22:	4305      	orrs	r5, r0
 800cc24:	81a5      	strh	r5, [r4, #12]
 800cc26:	e7cd      	b.n	800cbc4 <__smakebuf_r+0x18>
 800cc28:	0800acdd 	.word	0x0800acdd

0800cc2c <memmove>:
 800cc2c:	4288      	cmp	r0, r1
 800cc2e:	b510      	push	{r4, lr}
 800cc30:	eb01 0402 	add.w	r4, r1, r2
 800cc34:	d902      	bls.n	800cc3c <memmove+0x10>
 800cc36:	4284      	cmp	r4, r0
 800cc38:	4623      	mov	r3, r4
 800cc3a:	d807      	bhi.n	800cc4c <memmove+0x20>
 800cc3c:	1e43      	subs	r3, r0, #1
 800cc3e:	42a1      	cmp	r1, r4
 800cc40:	d008      	beq.n	800cc54 <memmove+0x28>
 800cc42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc4a:	e7f8      	b.n	800cc3e <memmove+0x12>
 800cc4c:	4402      	add	r2, r0
 800cc4e:	4601      	mov	r1, r0
 800cc50:	428a      	cmp	r2, r1
 800cc52:	d100      	bne.n	800cc56 <memmove+0x2a>
 800cc54:	bd10      	pop	{r4, pc}
 800cc56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc5e:	e7f7      	b.n	800cc50 <memmove+0x24>

0800cc60 <__malloc_lock>:
 800cc60:	4801      	ldr	r0, [pc, #4]	; (800cc68 <__malloc_lock+0x8>)
 800cc62:	f7fe bc80 	b.w	800b566 <__retarget_lock_acquire_recursive>
 800cc66:	bf00      	nop
 800cc68:	2000055c 	.word	0x2000055c

0800cc6c <__malloc_unlock>:
 800cc6c:	4801      	ldr	r0, [pc, #4]	; (800cc74 <__malloc_unlock+0x8>)
 800cc6e:	f7fe bc7b 	b.w	800b568 <__retarget_lock_release_recursive>
 800cc72:	bf00      	nop
 800cc74:	2000055c 	.word	0x2000055c

0800cc78 <_realloc_r>:
 800cc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc7c:	4680      	mov	r8, r0
 800cc7e:	4614      	mov	r4, r2
 800cc80:	460e      	mov	r6, r1
 800cc82:	b921      	cbnz	r1, 800cc8e <_realloc_r+0x16>
 800cc84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc88:	4611      	mov	r1, r2
 800cc8a:	f7ff b9db 	b.w	800c044 <_malloc_r>
 800cc8e:	b92a      	cbnz	r2, 800cc9c <_realloc_r+0x24>
 800cc90:	f7ff f96c 	bl	800bf6c <_free_r>
 800cc94:	4625      	mov	r5, r4
 800cc96:	4628      	mov	r0, r5
 800cc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9c:	f000 f858 	bl	800cd50 <_malloc_usable_size_r>
 800cca0:	4284      	cmp	r4, r0
 800cca2:	4607      	mov	r7, r0
 800cca4:	d802      	bhi.n	800ccac <_realloc_r+0x34>
 800cca6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccaa:	d812      	bhi.n	800ccd2 <_realloc_r+0x5a>
 800ccac:	4621      	mov	r1, r4
 800ccae:	4640      	mov	r0, r8
 800ccb0:	f7ff f9c8 	bl	800c044 <_malloc_r>
 800ccb4:	4605      	mov	r5, r0
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	d0ed      	beq.n	800cc96 <_realloc_r+0x1e>
 800ccba:	42bc      	cmp	r4, r7
 800ccbc:	4622      	mov	r2, r4
 800ccbe:	4631      	mov	r1, r6
 800ccc0:	bf28      	it	cs
 800ccc2:	463a      	movcs	r2, r7
 800ccc4:	f7fe fc6c 	bl	800b5a0 <memcpy>
 800ccc8:	4631      	mov	r1, r6
 800ccca:	4640      	mov	r0, r8
 800cccc:	f7ff f94e 	bl	800bf6c <_free_r>
 800ccd0:	e7e1      	b.n	800cc96 <_realloc_r+0x1e>
 800ccd2:	4635      	mov	r5, r6
 800ccd4:	e7df      	b.n	800cc96 <_realloc_r+0x1e>
	...

0800ccd8 <_read_r>:
 800ccd8:	b538      	push	{r3, r4, r5, lr}
 800ccda:	4d07      	ldr	r5, [pc, #28]	; (800ccf8 <_read_r+0x20>)
 800ccdc:	4604      	mov	r4, r0
 800ccde:	4608      	mov	r0, r1
 800cce0:	4611      	mov	r1, r2
 800cce2:	2200      	movs	r2, #0
 800cce4:	602a      	str	r2, [r5, #0]
 800cce6:	461a      	mov	r2, r3
 800cce8:	f7f4 fe6b 	bl	80019c2 <_read>
 800ccec:	1c43      	adds	r3, r0, #1
 800ccee:	d102      	bne.n	800ccf6 <_read_r+0x1e>
 800ccf0:	682b      	ldr	r3, [r5, #0]
 800ccf2:	b103      	cbz	r3, 800ccf6 <_read_r+0x1e>
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	bd38      	pop	{r3, r4, r5, pc}
 800ccf8:	20000568 	.word	0x20000568

0800ccfc <abort>:
 800ccfc:	b508      	push	{r3, lr}
 800ccfe:	2006      	movs	r0, #6
 800cd00:	f000 f856 	bl	800cdb0 <raise>
 800cd04:	2001      	movs	r0, #1
 800cd06:	f7f4 fe52 	bl	80019ae <_exit>
	...

0800cd0c <_fstat_r>:
 800cd0c:	b538      	push	{r3, r4, r5, lr}
 800cd0e:	4d07      	ldr	r5, [pc, #28]	; (800cd2c <_fstat_r+0x20>)
 800cd10:	2300      	movs	r3, #0
 800cd12:	4604      	mov	r4, r0
 800cd14:	4608      	mov	r0, r1
 800cd16:	4611      	mov	r1, r2
 800cd18:	602b      	str	r3, [r5, #0]
 800cd1a:	f7f4 fe7b 	bl	8001a14 <_fstat>
 800cd1e:	1c43      	adds	r3, r0, #1
 800cd20:	d102      	bne.n	800cd28 <_fstat_r+0x1c>
 800cd22:	682b      	ldr	r3, [r5, #0]
 800cd24:	b103      	cbz	r3, 800cd28 <_fstat_r+0x1c>
 800cd26:	6023      	str	r3, [r4, #0]
 800cd28:	bd38      	pop	{r3, r4, r5, pc}
 800cd2a:	bf00      	nop
 800cd2c:	20000568 	.word	0x20000568

0800cd30 <_isatty_r>:
 800cd30:	b538      	push	{r3, r4, r5, lr}
 800cd32:	4d06      	ldr	r5, [pc, #24]	; (800cd4c <_isatty_r+0x1c>)
 800cd34:	2300      	movs	r3, #0
 800cd36:	4604      	mov	r4, r0
 800cd38:	4608      	mov	r0, r1
 800cd3a:	602b      	str	r3, [r5, #0]
 800cd3c:	f7f4 fe7a 	bl	8001a34 <_isatty>
 800cd40:	1c43      	adds	r3, r0, #1
 800cd42:	d102      	bne.n	800cd4a <_isatty_r+0x1a>
 800cd44:	682b      	ldr	r3, [r5, #0]
 800cd46:	b103      	cbz	r3, 800cd4a <_isatty_r+0x1a>
 800cd48:	6023      	str	r3, [r4, #0]
 800cd4a:	bd38      	pop	{r3, r4, r5, pc}
 800cd4c:	20000568 	.word	0x20000568

0800cd50 <_malloc_usable_size_r>:
 800cd50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd54:	1f18      	subs	r0, r3, #4
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	bfbc      	itt	lt
 800cd5a:	580b      	ldrlt	r3, [r1, r0]
 800cd5c:	18c0      	addlt	r0, r0, r3
 800cd5e:	4770      	bx	lr

0800cd60 <_raise_r>:
 800cd60:	291f      	cmp	r1, #31
 800cd62:	b538      	push	{r3, r4, r5, lr}
 800cd64:	4604      	mov	r4, r0
 800cd66:	460d      	mov	r5, r1
 800cd68:	d904      	bls.n	800cd74 <_raise_r+0x14>
 800cd6a:	2316      	movs	r3, #22
 800cd6c:	6003      	str	r3, [r0, #0]
 800cd6e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd72:	bd38      	pop	{r3, r4, r5, pc}
 800cd74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd76:	b112      	cbz	r2, 800cd7e <_raise_r+0x1e>
 800cd78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd7c:	b94b      	cbnz	r3, 800cd92 <_raise_r+0x32>
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f000 f830 	bl	800cde4 <_getpid_r>
 800cd84:	462a      	mov	r2, r5
 800cd86:	4601      	mov	r1, r0
 800cd88:	4620      	mov	r0, r4
 800cd8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd8e:	f000 b817 	b.w	800cdc0 <_kill_r>
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d00a      	beq.n	800cdac <_raise_r+0x4c>
 800cd96:	1c59      	adds	r1, r3, #1
 800cd98:	d103      	bne.n	800cda2 <_raise_r+0x42>
 800cd9a:	2316      	movs	r3, #22
 800cd9c:	6003      	str	r3, [r0, #0]
 800cd9e:	2001      	movs	r0, #1
 800cda0:	e7e7      	b.n	800cd72 <_raise_r+0x12>
 800cda2:	2400      	movs	r4, #0
 800cda4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cda8:	4628      	mov	r0, r5
 800cdaa:	4798      	blx	r3
 800cdac:	2000      	movs	r0, #0
 800cdae:	e7e0      	b.n	800cd72 <_raise_r+0x12>

0800cdb0 <raise>:
 800cdb0:	4b02      	ldr	r3, [pc, #8]	; (800cdbc <raise+0xc>)
 800cdb2:	4601      	mov	r1, r0
 800cdb4:	6818      	ldr	r0, [r3, #0]
 800cdb6:	f7ff bfd3 	b.w	800cd60 <_raise_r>
 800cdba:	bf00      	nop
 800cdbc:	2000000c 	.word	0x2000000c

0800cdc0 <_kill_r>:
 800cdc0:	b538      	push	{r3, r4, r5, lr}
 800cdc2:	4d07      	ldr	r5, [pc, #28]	; (800cde0 <_kill_r+0x20>)
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	4604      	mov	r4, r0
 800cdc8:	4608      	mov	r0, r1
 800cdca:	4611      	mov	r1, r2
 800cdcc:	602b      	str	r3, [r5, #0]
 800cdce:	f7f4 fdde 	bl	800198e <_kill>
 800cdd2:	1c43      	adds	r3, r0, #1
 800cdd4:	d102      	bne.n	800cddc <_kill_r+0x1c>
 800cdd6:	682b      	ldr	r3, [r5, #0]
 800cdd8:	b103      	cbz	r3, 800cddc <_kill_r+0x1c>
 800cdda:	6023      	str	r3, [r4, #0]
 800cddc:	bd38      	pop	{r3, r4, r5, pc}
 800cdde:	bf00      	nop
 800cde0:	20000568 	.word	0x20000568

0800cde4 <_getpid_r>:
 800cde4:	f7f4 bdcb 	b.w	800197e <_getpid>

0800cde8 <_init>:
 800cde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdea:	bf00      	nop
 800cdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdee:	bc08      	pop	{r3}
 800cdf0:	469e      	mov	lr, r3
 800cdf2:	4770      	bx	lr

0800cdf4 <_fini>:
 800cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf6:	bf00      	nop
 800cdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdfa:	bc08      	pop	{r3}
 800cdfc:	469e      	mov	lr, r3
 800cdfe:	4770      	bx	lr
