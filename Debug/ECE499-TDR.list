
ECE499-TDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a808  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019cc  0800a9e8  0800a9e8  0001a9e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3b4  0800c3b4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c3b4  0800c3b4  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c3b4  0800c3b4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3b4  0800c3b4  0001c3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3b8  0800c3b8  0001c3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c3bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  200001f0  0800c5ac  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  0800c5ac  0002083c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b61  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003699  00000000  00000000  00037d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  0003b420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  0003c9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005627  00000000  00000000  0003ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa9e  00000000  00000000  000433ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca2fd  00000000  00000000  0005de8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012818a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fb0  00000000  00000000  001281dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a9d0 	.word	0x0800a9d0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800a9d0 	.word	0x0800a9d0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <TDC7200_WriteRegister>:
#include <stdint.h>

extern SPI_HandleTypeDef hspi1; //declared in OG SPI source/header file generated by CubeMX IDE

uint8_t TDC7200_WriteRegister(uint8_t reg, uint8_t* dataToWrite)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
	//select this slave device, CS = 0
	HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f001 ffdd 	bl	8002d18 <HAL_GPIO_WritePin>

	uint8_t combinedJuicer[2];
	combinedJuicer[0] = reg;
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	733b      	strb	r3, [r7, #12]
	combinedJuicer[1] = *dataToWrite;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	737b      	strb	r3, [r7, #13]
	/*	Tx 2 bytes to TDC:
			Byte 1: Contains the read/write/auto-increment command bits and desired register to access
			Byte 2: Contains the data in which we want to write into desired register
	*/
	//Tx data via SPI API, if SPI txn fails (ie: != HAL_OK), return -1
	if((HAL_SPI_Transmit(&hspi1, combinedJuicer, 2, HAL_MAX_DELAY)) != HAL_OK)
 8000d68:	f107 010c 	add.w	r1, r7, #12
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	2202      	movs	r2, #2
 8000d72:	480a      	ldr	r0, [pc, #40]	; (8000d9c <TDC7200_WriteRegister+0x58>)
 8000d74:	f003 fd6b 	bl	800484e <HAL_SPI_Transmit>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <TDC7200_WriteRegister+0x3e>
		return -1;
 8000d7e:	23ff      	movs	r3, #255	; 0xff
 8000d80:	e007      	b.n	8000d92 <TDC7200_WriteRegister+0x4e>

	//de-select this slave device, set CS line HIGH/1
	HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8c:	f001 ffc4 	bl	8002d18 <HAL_GPIO_WritePin>

	return 0;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000288 	.word	0x20000288

08000da0 <TDC7200_Read_N_Registers>:



double TDC7200_Read_N_Registers(uint8_t regToRead, uint8_t n)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
	//Note: the TDC chip reads from 1 register (1byte) or 3 registers if AutoIncr bit cmd is used (ie: 3bytes)
	//User chooses whether to send n=1 or n=3 into this function depending on what register(s) they want to read from


	uint8_t	rxSpiData[3]; //this array will hold either 1 or 3 bytes of data sent from TDC register(s)
	uint32_t processedData = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
	double finalResult = 0;
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t regAndOpcode = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	72fb      	strb	r3, [r7, #11]


	if (n == 3) //ie: if reading more than 1 byte..(ex: 3), enable auto_incr cmd bit and read cmd bit
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d105      	bne.n	8000dd6 <TDC7200_Read_N_Registers+0x36>
		regAndOpcode= regToRead | TDC_READ_CMD | TDC_AUTO_INCR;
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	72fb      	strb	r3, [r7, #11]
 8000dd4:	e001      	b.n	8000dda <TDC7200_Read_N_Registers+0x3a>

	else //if reading 1 byte, simply attach read cmd bit, no auto incr
		regAndOpcode = regToRead | TDC_READ_CMD;
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	72fb      	strb	r3, [r7, #11]

	//select this slave device, CS = 0
	HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f001 ff98 	bl	8002d18 <HAL_GPIO_WritePin>

	//Tx data via SPI API, if SPI txn fails (ie: != HAL_OK), return -1
	HAL_SPI_Transmit(&hspi1, &regAndOpcode, 1, HAL_MAX_DELAY);
 8000de8:	f107 010b 	add.w	r1, r7, #11
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	2201      	movs	r2, #1
 8000df2:	481a      	ldr	r0, [pc, #104]	; (8000e5c <TDC7200_Read_N_Registers+0xbc>)
 8000df4:	f003 fd2b 	bl	800484e <HAL_SPI_Transmit>


	//Rx data via SPI API, if SPI rxn fails (ie: != HAL_OK), return -1
	HAL_SPI_Receive(&hspi1, rxSpiData, n, HAL_MAX_DELAY);
 8000df8:	79bb      	ldrb	r3, [r7, #6]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	f107 010c 	add.w	r1, r7, #12
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295
 8000e04:	4815      	ldr	r0, [pc, #84]	; (8000e5c <TDC7200_Read_N_Registers+0xbc>)
 8000e06:	f003 fe90 	bl	8004b2a <HAL_SPI_Receive>




	if(n == 1)
 8000e0a:	79bb      	ldrb	r3, [r7, #6]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d101      	bne.n	8000e14 <TDC7200_Read_N_Registers+0x74>
		processedData = rxSpiData[0];
 8000e10:	7b3b      	ldrb	r3, [r7, #12]
 8000e12:	61fb      	str	r3, [r7, #28]
	if(n==3)
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d107      	bne.n	8000e2a <TDC7200_Read_N_Registers+0x8a>
		processedData = (rxSpiData[0] << 16) | (rxSpiData[1] << 8) | (rxSpiData[0] << 0);
 8000e1a:	7b3b      	ldrb	r3, [r7, #12]
 8000e1c:	041a      	lsls	r2, r3, #16
 8000e1e:	7b7b      	ldrb	r3, [r7, #13]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	4313      	orrs	r3, r2
 8000e24:	7b3a      	ldrb	r2, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61fb      	str	r3, [r7, #28]


	finalResult = processedData;
 8000e2a:	69f8      	ldr	r0, [r7, #28]
 8000e2c:	f7ff fb92 	bl	8000554 <__aeabi_ui2d>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	e9c7 2304 	strd	r2, r3, [r7, #16]

	HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_SET); //release SPI CS line, un-select this slave device
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f001 ff69 	bl	8002d18 <HAL_GPIO_WritePin>
	return finalResult;
 8000e46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e4a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000e4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000e52:	eef0 0a67 	vmov.f32	s1, s15
 8000e56:	3720      	adds	r7, #32
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000288 	.word	0x20000288

08000e60 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e66:	463b      	mov	r3, r7
 8000e68:	2230      	movs	r2, #48	; 0x30
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f005 f937 	bl	80060e0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_DAC1_Init+0x80>)
 8000e74:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <MX_DAC1_Init+0x84>)
 8000e76:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e78:	4819      	ldr	r0, [pc, #100]	; (8000ee0 <MX_DAC1_Init+0x80>)
 8000e7a:	f001 fb76 	bl	800256a <HAL_DAC_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e84:	f000 fbb4 	bl	80015f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <MX_DAC1_Init+0x80>)
 8000eb4:	f001 fbce 	bl	8002654 <HAL_DAC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000ebe:	f000 fb97 	bl	80015f0 <Error_Handler>
  }

  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_2047) != HAL_OK)
 8000ec2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_DAC1_Init+0x80>)
 8000eca:	f001 fd6b 	bl	80029a4 <HAL_DACEx_TriangleWaveGenerate>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000ed4:	f000 fb8c 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3730      	adds	r7, #48	; 0x30
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000020c 	.word	0x2000020c
 8000ee4:	50000800 	.word	0x50000800

08000ee8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a15      	ldr	r2, [pc, #84]	; (8000f5c <HAL_DAC_MspInit+0x74>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d124      	bne.n	8000f54 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_DAC_MspInit+0x78>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <HAL_DAC_MspInit+0x78>)
 8000f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_DAC_MspInit+0x78>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_DAC_MspInit+0x78>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_DAC_MspInit+0x78>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_DAC_MspInit+0x78>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f50:	f001 fd60 	bl	8002a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	; 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	50000800 	.word	0x50000800
 8000f60:	40021000 	.word	0x40021000

08000f64 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f7a:	4b6b      	ldr	r3, [pc, #428]	; (8001128 <MX_GPIO_Init+0x1c4>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a6a      	ldr	r2, [pc, #424]	; (8001128 <MX_GPIO_Init+0x1c4>)
 8000f80:	f043 0320 	orr.w	r3, r3, #32
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b68      	ldr	r3, [pc, #416]	; (8001128 <MX_GPIO_Init+0x1c4>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0320 	and.w	r3, r3, #32
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f92:	4b65      	ldr	r3, [pc, #404]	; (8001128 <MX_GPIO_Init+0x1c4>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a64      	ldr	r2, [pc, #400]	; (8001128 <MX_GPIO_Init+0x1c4>)
 8000f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b62      	ldr	r3, [pc, #392]	; (8001128 <MX_GPIO_Init+0x1c4>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4b5f      	ldr	r3, [pc, #380]	; (8001128 <MX_GPIO_Init+0x1c4>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a5e      	ldr	r2, [pc, #376]	; (8001128 <MX_GPIO_Init+0x1c4>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b5c      	ldr	r3, [pc, #368]	; (8001128 <MX_GPIO_Init+0x1c4>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	4b59      	ldr	r3, [pc, #356]	; (8001128 <MX_GPIO_Init+0x1c4>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a58      	ldr	r2, [pc, #352]	; (8001128 <MX_GPIO_Init+0x1c4>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b56      	ldr	r3, [pc, #344]	; (8001128 <MX_GPIO_Init+0x1c4>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TDC7200_EN_GPIO_Port, TDC7200_EN_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4853      	ldr	r0, [pc, #332]	; (800112c <MX_GPIO_Init+0x1c8>)
 8000fe0:	f001 fe9a 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PULSE_SIG_GPIO_Port, PULSE_SIG_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4851      	ldr	r0, [pc, #324]	; (8001130 <MX_GPIO_Init+0x1cc>)
 8000fea:	f001 fe95 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL345_GPIO_Port, ADXL345_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff8:	f001 fe8e 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001006:	f001 fe87 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDC7200_EN_Pin;
 800100a:	2301      	movs	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001016:	2302      	movs	r3, #2
 8001018:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TDC7200_EN_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	4842      	ldr	r0, [pc, #264]	; (800112c <MX_GPIO_Init+0x1c8>)
 8001022:	f001 fcf7 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001026:	2302      	movs	r3, #2
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102a:	2303      	movs	r3, #3
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	483c      	ldr	r0, [pc, #240]	; (800112c <MX_GPIO_Init+0x1c8>)
 800103a:	f001 fceb 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800103e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001044:	2303      	movs	r3, #3
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4838      	ldr	r0, [pc, #224]	; (8001134 <MX_GPIO_Init+0x1d0>)
 8001054:	f001 fcde 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA5 PA6 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001058:	f240 436f 	movw	r3, #1135	; 0x46f
 800105c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105e:	2303      	movs	r3, #3
 8001060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f001 fcd0 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|TDC7200_INT_Pin|BUTTON2_Pin;
 8001074:	f44f 538c 	mov.w	r3, #4480	; 0x1180
 8001078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f001 fcc2 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_SIG_Pin;
 8001090:	2301      	movs	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_SIG_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4822      	ldr	r0, [pc, #136]	; (8001130 <MX_GPIO_Init+0x1cc>)
 80010a8:	f001 fcb4 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADXL345_Pin;
 80010ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ba:	2302      	movs	r3, #2
 80010bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADXL345_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c8:	f001 fca4 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDC7200_CS_Pin;
 80010cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010da:	2302      	movs	r3, #2
 80010dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TDC7200_CS_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f001 fc94 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDC7200_TRIG_Pin;
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TDC7200_TRIG_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	480c      	ldr	r0, [pc, #48]	; (8001130 <MX_GPIO_Init+0x1cc>)
 8001100:	f001 fc88 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110a:	2303      	movs	r3, #3
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_GPIO_Init+0x1cc>)
 800111a:	f001 fc7b 	bl	8002a14 <HAL_GPIO_Init>

}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000
 800112c:	48001400 	.word	0x48001400
 8001130:	48000400 	.word	0x48000400
 8001134:	48001800 	.word	0x48001800

08001138 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_I2C1_Init+0x74>)
 800113e:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <MX_I2C1_Init+0x78>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F07BFF;
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_I2C1_Init+0x74>)
 8001144:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <MX_I2C1_Init+0x7c>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_I2C1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_I2C1_Init+0x74>)
 8001150:	2201      	movs	r2, #1
 8001152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_I2C1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_I2C1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_I2C1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_I2C1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001172:	480e      	ldr	r0, [pc, #56]	; (80011ac <MX_I2C1_Init+0x74>)
 8001174:	f001 fe02 	bl	8002d7c <HAL_I2C_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800117e:	f000 fa37 	bl	80015f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001182:	2100      	movs	r1, #0
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <MX_I2C1_Init+0x74>)
 8001186:	f002 fa83 	bl	8003690 <HAL_I2CEx_ConfigAnalogFilter>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001190:	f000 fa2e 	bl	80015f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001194:	2100      	movs	r1, #0
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_I2C1_Init+0x74>)
 8001198:	f002 fac5 	bl	8003726 <HAL_I2CEx_ConfigDigitalFilter>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011a2:	f000 fa25 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000220 	.word	0x20000220
 80011b0:	40005400 	.word	0x40005400
 80011b4:	00f07bff 	.word	0x00f07bff

080011b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b09c      	sub	sp, #112	; 0x70
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	2244      	movs	r2, #68	; 0x44
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f004 ff81 	bl	80060e0 <memset>
  if(i2cHandle->Instance==I2C1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a2d      	ldr	r2, [pc, #180]	; (8001298 <HAL_I2C_MspInit+0xe0>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d153      	bne.n	8001290 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011e8:	2340      	movs	r3, #64	; 0x40
 80011ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f0:	f107 0318 	add.w	r3, r7, #24
 80011f4:	4618      	mov	r0, r3
 80011f6:	f003 f88f 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001200:	f000 f9f6 	bl	80015f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <HAL_I2C_MspInit+0xe4>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001208:	4a24      	ldr	r2, [pc, #144]	; (800129c <HAL_I2C_MspInit+0xe4>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <HAL_I2C_MspInit+0xe4>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	4b1f      	ldr	r3, [pc, #124]	; (800129c <HAL_I2C_MspInit+0xe4>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	4a1e      	ldr	r2, [pc, #120]	; (800129c <HAL_I2C_MspInit+0xe4>)
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <HAL_I2C_MspInit+0xe4>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001238:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123a:	2312      	movs	r3, #18
 800123c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001246:	2304      	movs	r3, #4
 8001248:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001254:	f001 fbde 	bl	8002a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800125c:	2312      	movs	r3, #18
 800125e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001268:	2304      	movs	r3, #4
 800126a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001270:	4619      	mov	r1, r3
 8001272:	480b      	ldr	r0, [pc, #44]	; (80012a0 <HAL_I2C_MspInit+0xe8>)
 8001274:	f001 fbce 	bl	8002a14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_I2C_MspInit+0xe4>)
 800127a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <HAL_I2C_MspInit+0xe4>)
 800127e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001282:	6593      	str	r3, [r2, #88]	; 0x58
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_I2C_MspInit+0xe4>)
 8001286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001290:	bf00      	nop
 8001292:	3770      	adds	r7, #112	; 0x70
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40005400 	.word	0x40005400
 800129c:	40021000 	.word	0x40021000
 80012a0:	48000400 	.word	0x48000400
 80012a4:	00000000 	.word	0x00000000

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ae:	f000 ffba 	bl	8002226 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b2:	f000 f8af 	bl	8001414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //Note: this GPIO pin PB4 is assigned to the system JTAG RESET pin for the onboard JTAG debugger.
  	//Since we arent using JTAG debugging, we can release PB4 pin from this alternate functionality
  		//and it can now be set to any GPIO functionality
  			//(in the MX_GPIO_Init fxn, it assigns PB4 as the SPI MISO line)
    GPIOB->MODER &= ~GPIO_MODER_MODE4_Msk;
 80012b6:	4b4c      	ldr	r3, [pc, #304]	; (80013e8 <main+0x140>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a4b      	ldr	r2, [pc, #300]	; (80013e8 <main+0x140>)
 80012bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012c0:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE4_0;
 80012c2:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <main+0x140>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <main+0x140>)
 80012c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012cc:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ce:	f7ff fe49 	bl	8000f64 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012d2:	f7ff ff31 	bl	8001138 <MX_I2C1_Init>
  MX_TIM6_Init();
 80012d6:	f000 fea7 	bl	8002028 <MX_TIM6_Init>
  MX_TIM7_Init();
 80012da:	f000 fee5 	bl	80020a8 <MX_TIM7_Init>
  MX_TIM3_Init();
 80012de:	f000 fe55 	bl	8001f8c <MX_TIM3_Init>
  MX_TIM2_Init();
 80012e2:	f000 fe05 	bl	8001ef0 <MX_TIM2_Init>
  MX_SPI1_Init();
 80012e6:	f000 f989 	bl	80015fc <MX_SPI1_Init>
  MX_DAC1_Init();
 80012ea:	f7ff fdb9 	bl	8000e60 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80012ee:	483f      	ldr	r0, [pc, #252]	; (80013ec <main+0x144>)
 80012f0:	f004 f972 	bl	80055d8 <HAL_TIM_Base_Start_IT>

	SSD1306_Init();
 80012f4:	f000 fa04 	bl	8001700 <SSD1306_Init>
	myOLED_Startup();
 80012f8:	f000 f8e2 	bl	80014c0 <myOLED_Startup>
	HAL_Delay(2000);
 80012fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001300:	f001 f802 	bl	8002308 <HAL_Delay>
	SSD1306_Clear();
 8001304:	f000 fc21 	bl	8001b4a <SSD1306_Clear>

	//CONFIGURING DAC1 PERIPHERAL MANUALLY
	//(Cuz STM32CubeMX IDE doesn't let you configure DAC to output a simple DC voltage, which we want)
	myDAC_init();
 8001308:	f000 f912 	bl	8001530 <myDAC_init>

	//toggle TDC_EN pin from 0 to 1 to ensure TDC powers up properly (it must see 1 low-to-high edge on EN pin)
  HAL_GPIO_WritePin(TDC7200_EN_GPIO_Port, TDC7200_EN_Pin, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2101      	movs	r1, #1
 8001310:	4837      	ldr	r0, [pc, #220]	; (80013f0 <main+0x148>)
 8001312:	f001 fd01 	bl	8002d18 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001316:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800131a:	f000 fff5 	bl	8002308 <HAL_Delay>
  HAL_GPIO_WritePin(TDC7200_EN_GPIO_Port, TDC7200_EN_Pin, 1);
 800131e:	2201      	movs	r2, #1
 8001320:	2101      	movs	r1, #1
 8001322:	4833      	ldr	r0, [pc, #204]	; (80013f0 <main+0x148>)
 8001324:	f001 fcf8 	bl	8002d18 <HAL_GPIO_WritePin>
  HAL_Delay(500); //Delay cuz TDC requires some time until its internal Vregulator becomes stable
 8001328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800132c:	f000 ffec 	bl	8002308 <HAL_Delay>
  			//(TDC7200 datasheet pg.20: 8.4.7 Wait Times for TDC7200 Startup)


  myTDC_Init(); //this fxn configures various TDC registers to our desired settings
 8001330:	f000 f92a 	bl	8001588 <myTDC_Init>

  myTDC_StartMeasurement();
 8001334:	f000 f94c 	bl	80015d0 <myTDC_StartMeasurement>



	//HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);

  HAL_Delay(500);
 8001338:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800133c:	f000 ffe4 	bl	8002308 <HAL_Delay>
  double idk = 99;
 8001340:	a327      	add	r3, pc, #156	; (adr r3, 80013e0 <main+0x138>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	e9c7 2300 	strd	r2, r3, [r7]

  uint8_t incr = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//TDC7200_WriteRegister(TDC_CONFIG1, &juice);
	  idk = TDC7200_Read_N_Registers((TDC_CONFIG1) + incr, 1);
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2101      	movs	r1, #1
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fd24 	bl	8000da0 <TDC7200_Read_N_Registers>
 8001358:	ed87 0b00 	vstr	d0, [r7]
	  HAL_GPIO_TogglePin(PULSE_SIG_GPIO_Port, PULSE_SIG_Pin);
 800135c:	2101      	movs	r1, #1
 800135e:	4822      	ldr	r0, [pc, #136]	; (80013e8 <main+0x140>)
 8001360:	f001 fcf2 	bl	8002d48 <HAL_GPIO_TogglePin>
	  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001364:	2100      	movs	r1, #0
 8001366:	4823      	ldr	r0, [pc, #140]	; (80013f4 <main+0x14c>)
 8001368:	f001 f921 	bl	80025ae <HAL_DAC_Start>

		SSD1306_Clear();
 800136c:	f000 fbed 	bl	8001b4a <SSD1306_Clear>

		SSD1306_GotoXY(38, 0);
 8001370:	2100      	movs	r1, #0
 8001372:	2026      	movs	r0, #38	; 0x26
 8001374:	f000 fb2e 	bl	80019d4 <SSD1306_GotoXY>
		SSD1306_Puts(" TDR ", &Font_11x18, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	491f      	ldr	r1, [pc, #124]	; (80013f8 <main+0x150>)
 800137c:	481f      	ldr	r0, [pc, #124]	; (80013fc <main+0x154>)
 800137e:	f000 fbbf 	bl	8001b00 <SSD1306_Puts>

		SSD1306_GotoXY(0, 36);
 8001382:	2124      	movs	r1, #36	; 0x24
 8001384:	2000      	movs	r0, #0
 8001386:	f000 fb25 	bl	80019d4 <SSD1306_GotoXY>
		sprintf(buff, "rxData: %0.2f", idk);
 800138a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800138e:	491c      	ldr	r1, [pc, #112]	; (8001400 <main+0x158>)
 8001390:	481c      	ldr	r0, [pc, #112]	; (8001404 <main+0x15c>)
 8001392:	f005 fd2d 	bl	8006df0 <siprintf>
		SSD1306_Puts(buff, &Font_7x10, 1);
 8001396:	2201      	movs	r2, #1
 8001398:	491b      	ldr	r1, [pc, #108]	; (8001408 <main+0x160>)
 800139a:	481a      	ldr	r0, [pc, #104]	; (8001404 <main+0x15c>)
 800139c:	f000 fbb0 	bl	8001b00 <SSD1306_Puts>

		SSD1306_GotoXY(0, 48);
 80013a0:	2130      	movs	r1, #48	; 0x30
 80013a2:	2000      	movs	r0, #0
 80013a4:	f000 fb16 	bl	80019d4 <SSD1306_GotoXY>
		sprintf(buff, "PulseSig: %d", signalBit);
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <main+0x164>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4918      	ldr	r1, [pc, #96]	; (8001410 <main+0x168>)
 80013b0:	4814      	ldr	r0, [pc, #80]	; (8001404 <main+0x15c>)
 80013b2:	f005 fd1d 	bl	8006df0 <siprintf>
		SSD1306_Puts(buff, &Font_7x10, 1);
 80013b6:	2201      	movs	r2, #1
 80013b8:	4913      	ldr	r1, [pc, #76]	; (8001408 <main+0x160>)
 80013ba:	4812      	ldr	r0, [pc, #72]	; (8001404 <main+0x15c>)
 80013bc:	f000 fba0 	bl	8001b00 <SSD1306_Puts>

		SSD1306_UpdateScreen();
 80013c0:	f000 fa62 	bl	8001888 <SSD1306_UpdateScreen>

		HAL_Delay(1000);
 80013c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c8:	f000 ff9e 	bl	8002308 <HAL_Delay>
		incr++;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	3301      	adds	r3, #1
 80013d0:	73fb      	strb	r3, [r7, #15]
		if(incr > 22) incr = 0;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	2b16      	cmp	r3, #22
 80013d6:	d9ba      	bls.n	800134e <main+0xa6>
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]
	  idk = TDC7200_Read_N_Registers((TDC_CONFIG1) + incr, 1);
 80013dc:	e7b7      	b.n	800134e <main+0xa6>
 80013de:	bf00      	nop
 80013e0:	00000000 	.word	0x00000000
 80013e4:	4058c000 	.word	0x4058c000
 80013e8:	48000400 	.word	0x48000400
 80013ec:	200006f8 	.word	0x200006f8
 80013f0:	48001400 	.word	0x48001400
 80013f4:	2000020c 	.word	0x2000020c
 80013f8:	20000008 	.word	0x20000008
 80013fc:	0800a9e8 	.word	0x0800a9e8
 8001400:	0800a9f0 	.word	0x0800a9f0
 8001404:	2000026c 	.word	0x2000026c
 8001408:	20000000 	.word	0x20000000
 800140c:	20000285 	.word	0x20000285
 8001410:	0800aa00 	.word	0x0800aa00

08001414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b094      	sub	sp, #80	; 0x50
 8001418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 0318 	add.w	r3, r7, #24
 800141e:	2238      	movs	r2, #56	; 0x38
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f004 fe5c 	bl	80060e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001436:	2000      	movs	r0, #0
 8001438:	f002 f9c2 	bl	80037c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143c:	2302      	movs	r3, #2
 800143e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001446:	2340      	movs	r3, #64	; 0x40
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144a:	2302      	movs	r3, #2
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800144e:	2302      	movs	r3, #2
 8001450:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001452:	2301      	movs	r3, #1
 8001454:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001456:	2314      	movs	r3, #20
 8001458:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800145a:	2302      	movs	r3, #2
 800145c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800145e:	2302      	movs	r3, #2
 8001460:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001462:	2302      	movs	r3, #2
 8001464:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	4618      	mov	r0, r3
 800146c:	f002 fa4c 	bl	8003908 <HAL_RCC_OscConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001476:	f000 f8bb 	bl	80015f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147a:	230f      	movs	r3, #15
 800147c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147e:	2303      	movs	r3, #3
 8001480:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2104      	movs	r1, #4
 8001492:	4618      	mov	r0, r3
 8001494:	f002 fd50 	bl	8003f38 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800149e:	f000 f8a7 	bl	80015f0 <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3750      	adds	r7, #80	; 0x50
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(TDC7200_EN_GPIO_Port, TDC7200_EN_Pin);
	//signalBit = HAL_GPIO_ReadPin(PULSE_SIG_IN_GPIO_Port, PULSE_SIG_IN_Pin);
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <myOLED_Startup>:

void myOLED_Startup(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80014c4:	f000 fb41 	bl	8001b4a <SSD1306_Clear>
	SSD1306_GotoXY(38, 0);
 80014c8:	2100      	movs	r1, #0
 80014ca:	2026      	movs	r0, #38	; 0x26
 80014cc:	f000 fa82 	bl	80019d4 <SSD1306_GotoXY>
	SSD1306_Puts(" TDR ", &Font_11x18, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	4911      	ldr	r1, [pc, #68]	; (8001518 <myOLED_Startup+0x58>)
 80014d4:	4811      	ldr	r0, [pc, #68]	; (800151c <myOLED_Startup+0x5c>)
 80014d6:	f000 fb13 	bl	8001b00 <SSD1306_Puts>
	SSD1306_GotoXY(24, 22);
 80014da:	2116      	movs	r1, #22
 80014dc:	2018      	movs	r0, #24
 80014de:	f000 fa79 	bl	80019d4 <SSD1306_GotoXY>
	SSD1306_Puts("Time-Domain", &Font_7x10, 1);
 80014e2:	2201      	movs	r2, #1
 80014e4:	490e      	ldr	r1, [pc, #56]	; (8001520 <myOLED_Startup+0x60>)
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <myOLED_Startup+0x64>)
 80014e8:	f000 fb0a 	bl	8001b00 <SSD1306_Puts>
	SSD1306_GotoXY(20, 34);
 80014ec:	2122      	movs	r1, #34	; 0x22
 80014ee:	2014      	movs	r0, #20
 80014f0:	f000 fa70 	bl	80019d4 <SSD1306_GotoXY>
	SSD1306_Puts("Reflectometer", &Font_7x10, 1);
 80014f4:	2201      	movs	r2, #1
 80014f6:	490a      	ldr	r1, [pc, #40]	; (8001520 <myOLED_Startup+0x60>)
 80014f8:	480b      	ldr	r0, [pc, #44]	; (8001528 <myOLED_Startup+0x68>)
 80014fa:	f000 fb01 	bl	8001b00 <SSD1306_Puts>

	SSD1306_GotoXY(24, 52);
 80014fe:	2134      	movs	r1, #52	; 0x34
 8001500:	2018      	movs	r0, #24
 8001502:	f000 fa67 	bl	80019d4 <SSD1306_GotoXY>
	SSD1306_Puts("UVic ECE499", &Font_7x10, 1);
 8001506:	2201      	movs	r2, #1
 8001508:	4905      	ldr	r1, [pc, #20]	; (8001520 <myOLED_Startup+0x60>)
 800150a:	4808      	ldr	r0, [pc, #32]	; (800152c <myOLED_Startup+0x6c>)
 800150c:	f000 faf8 	bl	8001b00 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001510:	f000 f9ba 	bl	8001888 <SSD1306_UpdateScreen>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000008 	.word	0x20000008
 800151c:	0800a9e8 	.word	0x0800a9e8
 8001520:	20000000 	.word	0x20000000
 8001524:	0800aa10 	.word	0x0800aa10
 8001528:	0800aa1c 	.word	0x0800aa1c
 800152c:	0800aa2c 	.word	0x0800aa2c

08001530 <myDAC_init>:


//THIS FXN WILL CONFIGURE DAC TO OUTPUT A STEADY VOLTAGE WHICH WE CAN ADJUST AS DESIRED
void myDAC_init(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
	//testing the juice//
  DAC->CR |= DAC_CR_EN1;    	// Enable channel 1 (connected to pin PA4)
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <myDAC_init+0x54>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a12      	ldr	r2, [pc, #72]	; (8001584 <myDAC_init+0x54>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]

  // Configure DAC trigger source (software trigger)
  DAC->CR &= ~DAC_CR_TEN1;
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <myDAC_init+0x54>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <myDAC_init+0x54>)
 8001546:	f023 0302 	bic.w	r3, r3, #2
 800154a:	6013      	str	r3, [r2, #0]
  DAC->CR &= ~DAC_CR_TSEL1;
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <myDAC_init+0x54>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <myDAC_init+0x54>)
 8001552:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8001556:	6013      	str	r3, [r2, #0]

  // Enable DAC
  DAC->CR |= DAC_CR_EN1;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <myDAC_init+0x54>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a09      	ldr	r2, [pc, #36]	; (8001584 <myDAC_init+0x54>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6013      	str	r3, [r2, #0]

	// Set DAC output voltage to "on" state (e.g., VREF)
	DAC->DHR12R1 = 2047; 	//ie: DAC will output VREF/2 on its' output
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <myDAC_init+0x54>)
 8001566:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800156a:	609a      	str	r2, [r3, #8]
												//(ex: if VREF = 3.3V, DAC outputs a constant 1.65V)

	// Trigger a DAC conversion - ie: DAC will now output 1.65V dc
	DAC->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <myDAC_init+0x54>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <myDAC_init+0x54>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6053      	str	r3, [r2, #4]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	50000800 	.word	0x50000800

08001588 <myTDC_Init>:



void myTDC_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	uint8_t regConfigurations = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	71fb      	strb	r3, [r7, #7]

	/***************************** TDC CONFIG_1 REG ******************************/
	regConfigurations = TDC_WRITE_CMD | MEASURE_MODE_1 | START_EDGE_RISING | STOP_EDGE_RISING
 8001592:	2340      	movs	r3, #64	; 0x40
 8001594:	71fb      	strb	r3, [r7, #7]
			|	TRIGG_EDGE_RISING | PARITY_DISABLED | FORCE_CALIBRATION_OFF;
	TDC7200_WriteRegister(TDC_CONFIG1, &regConfigurations);
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	4619      	mov	r1, r3
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fbd2 	bl	8000d44 <TDC7200_WriteRegister>

	regConfigurations = 0; //reset variable to get ready for new register configs
 80015a0:	2300      	movs	r3, #0
 80015a2:	71fb      	strb	r3, [r7, #7]
	/****************************************************************************/
	/****************************************************************************/


	/***************************** TDC CONFIG_2 REG ******************************/
	regConfigurations = TDC_WRITE_CMD | NUM_STOP_SINGLE | AVG_CYCLES_1 | CALIBRATION2_PERIOD_2;
 80015a4:	2340      	movs	r3, #64	; 0x40
 80015a6:	71fb      	strb	r3, [r7, #7]
	TDC7200_WriteRegister(TDC_CONFIG2, &regConfigurations);
 80015a8:	1dfb      	adds	r3, r7, #7
 80015aa:	4619      	mov	r1, r3
 80015ac:	2001      	movs	r0, #1
 80015ae:	f7ff fbc9 	bl	8000d44 <TDC7200_WriteRegister>

	regConfigurations = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	71fb      	strb	r3, [r7, #7]
	/****************************************************************************/
	/****************************************************************************/


	/***************************** TDC INT_MASK REG ******************************/
	regConfigurations = TDC_WRITE_CMD | CLOCK_CNTR_OVF_MASK_DISABLED | COARSE_CNTR_OVF_MASK_ENABLED
 80015b6:	2343      	movs	r3, #67	; 0x43
 80015b8:	71fb      	strb	r3, [r7, #7]
			| NEW_MEAS_MASK_ENABLED; 	//ie: disable CLOCK OVF INT flag since this used only
																//in Measurement Mode 2 (and we using Mode 1)
	TDC7200_WriteRegister(TDC_INT_MASK, &regConfigurations);
 80015ba:	1dfb      	adds	r3, r7, #7
 80015bc:	4619      	mov	r1, r3
 80015be:	2003      	movs	r0, #3
 80015c0:	f7ff fbc0 	bl	8000d44 <TDC7200_WriteRegister>

	regConfigurations = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	71fb      	strb	r3, [r7, #7]
	/****************************************************************************/
	/****************************************************************************/
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <myTDC_StartMeasurement>:

void myTDC_StartMeasurement(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
	uint8_t regConfigurations = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	71fb      	strb	r3, [r7, #7]
	regConfigurations = TDC_WRITE_CMD | START_MEASUREMENT;
 80015da:	2341      	movs	r3, #65	; 0x41
 80015dc:	71fb      	strb	r3, [r7, #7]
	TDC7200_WriteRegister(TDC_CONFIG1, &regConfigurations);
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	4619      	mov	r1, r3
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff fbae 	bl	8000d44 <TDC7200_WriteRegister>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1)
 80015f8:	e7fe      	b.n	80015f8 <Error_Handler+0x8>
	...

080015fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <MX_SPI1_Init+0x74>)
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <MX_SPI1_Init+0x78>)
 8001604:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_SPI1_Init+0x74>)
 8001608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800160c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_SPI1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <MX_SPI1_Init+0x74>)
 8001616:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800161a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <MX_SPI1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <MX_SPI1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_SPI1_Init+0x74>)
 800162a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_SPI1_Init+0x74>)
 8001632:	2238      	movs	r2, #56	; 0x38
 8001634:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_SPI1_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_SPI1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_SPI1_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_SPI1_Init+0x74>)
 800164a:	2207      	movs	r2, #7
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MX_SPI1_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_SPI1_Init+0x74>)
 8001656:	2208      	movs	r2, #8
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_SPI1_Init+0x74>)
 800165c:	f003 f84c 	bl	80046f8 <HAL_SPI_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001666:	f7ff ffc3 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000288 	.word	0x20000288
 8001674:	40013000 	.word	0x40013000

08001678 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <HAL_SPI_MspInit+0x7c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d127      	bne.n	80016ea <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_SPI_MspInit+0x80>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	4a16      	ldr	r2, [pc, #88]	; (80016f8 <HAL_SPI_MspInit+0x80>)
 80016a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a4:	6613      	str	r3, [r2, #96]	; 0x60
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <HAL_SPI_MspInit+0x80>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_SPI_MspInit+0x80>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_SPI_MspInit+0x80>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_SPI_MspInit+0x80>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80016ca:	2338      	movs	r3, #56	; 0x38
 80016cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d6:	2302      	movs	r3, #2
 80016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016da:	2305      	movs	r3, #5
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <HAL_SPI_MspInit+0x84>)
 80016e6:	f001 f995 	bl	8002a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	; 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40013000 	.word	0x40013000
 80016f8:	40021000 	.word	0x40021000
 80016fc:	48000400 	.word	0x48000400

08001700 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001706:	f000 fa29 	bl	8001b5c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800170a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800170e:	2201      	movs	r2, #1
 8001710:	2178      	movs	r1, #120	; 0x78
 8001712:	485b      	ldr	r0, [pc, #364]	; (8001880 <SSD1306_Init+0x180>)
 8001714:	f001 fcb6 	bl	8003084 <HAL_I2C_IsDeviceReady>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800171e:	2300      	movs	r3, #0
 8001720:	e0a9      	b.n	8001876 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001722:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001726:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001728:	e002      	b.n	8001730 <SSD1306_Init+0x30>
		p--;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3b01      	subs	r3, #1
 800172e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f9      	bne.n	800172a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001736:	22ae      	movs	r2, #174	; 0xae
 8001738:	2100      	movs	r1, #0
 800173a:	2078      	movs	r0, #120	; 0x78
 800173c:	f000 fa8a 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001740:	2220      	movs	r2, #32
 8001742:	2100      	movs	r1, #0
 8001744:	2078      	movs	r0, #120	; 0x78
 8001746:	f000 fa85 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800174a:	2210      	movs	r2, #16
 800174c:	2100      	movs	r1, #0
 800174e:	2078      	movs	r0, #120	; 0x78
 8001750:	f000 fa80 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001754:	22b0      	movs	r2, #176	; 0xb0
 8001756:	2100      	movs	r1, #0
 8001758:	2078      	movs	r0, #120	; 0x78
 800175a:	f000 fa7b 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800175e:	22c8      	movs	r2, #200	; 0xc8
 8001760:	2100      	movs	r1, #0
 8001762:	2078      	movs	r0, #120	; 0x78
 8001764:	f000 fa76 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	2078      	movs	r0, #120	; 0x78
 800176e:	f000 fa71 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001772:	2210      	movs	r2, #16
 8001774:	2100      	movs	r1, #0
 8001776:	2078      	movs	r0, #120	; 0x78
 8001778:	f000 fa6c 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800177c:	2240      	movs	r2, #64	; 0x40
 800177e:	2100      	movs	r1, #0
 8001780:	2078      	movs	r0, #120	; 0x78
 8001782:	f000 fa67 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001786:	2281      	movs	r2, #129	; 0x81
 8001788:	2100      	movs	r1, #0
 800178a:	2078      	movs	r0, #120	; 0x78
 800178c:	f000 fa62 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001790:	22ff      	movs	r2, #255	; 0xff
 8001792:	2100      	movs	r1, #0
 8001794:	2078      	movs	r0, #120	; 0x78
 8001796:	f000 fa5d 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800179a:	22a1      	movs	r2, #161	; 0xa1
 800179c:	2100      	movs	r1, #0
 800179e:	2078      	movs	r0, #120	; 0x78
 80017a0:	f000 fa58 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80017a4:	22a6      	movs	r2, #166	; 0xa6
 80017a6:	2100      	movs	r1, #0
 80017a8:	2078      	movs	r0, #120	; 0x78
 80017aa:	f000 fa53 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80017ae:	22a8      	movs	r2, #168	; 0xa8
 80017b0:	2100      	movs	r1, #0
 80017b2:	2078      	movs	r0, #120	; 0x78
 80017b4:	f000 fa4e 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80017b8:	223f      	movs	r2, #63	; 0x3f
 80017ba:	2100      	movs	r1, #0
 80017bc:	2078      	movs	r0, #120	; 0x78
 80017be:	f000 fa49 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80017c2:	22a4      	movs	r2, #164	; 0xa4
 80017c4:	2100      	movs	r1, #0
 80017c6:	2078      	movs	r0, #120	; 0x78
 80017c8:	f000 fa44 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80017cc:	22d3      	movs	r2, #211	; 0xd3
 80017ce:	2100      	movs	r1, #0
 80017d0:	2078      	movs	r0, #120	; 0x78
 80017d2:	f000 fa3f 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2078      	movs	r0, #120	; 0x78
 80017dc:	f000 fa3a 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80017e0:	22d5      	movs	r2, #213	; 0xd5
 80017e2:	2100      	movs	r1, #0
 80017e4:	2078      	movs	r0, #120	; 0x78
 80017e6:	f000 fa35 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80017ea:	22f0      	movs	r2, #240	; 0xf0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2078      	movs	r0, #120	; 0x78
 80017f0:	f000 fa30 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80017f4:	22d9      	movs	r2, #217	; 0xd9
 80017f6:	2100      	movs	r1, #0
 80017f8:	2078      	movs	r0, #120	; 0x78
 80017fa:	f000 fa2b 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80017fe:	2222      	movs	r2, #34	; 0x22
 8001800:	2100      	movs	r1, #0
 8001802:	2078      	movs	r0, #120	; 0x78
 8001804:	f000 fa26 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001808:	22da      	movs	r2, #218	; 0xda
 800180a:	2100      	movs	r1, #0
 800180c:	2078      	movs	r0, #120	; 0x78
 800180e:	f000 fa21 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001812:	2212      	movs	r2, #18
 8001814:	2100      	movs	r1, #0
 8001816:	2078      	movs	r0, #120	; 0x78
 8001818:	f000 fa1c 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800181c:	22db      	movs	r2, #219	; 0xdb
 800181e:	2100      	movs	r1, #0
 8001820:	2078      	movs	r0, #120	; 0x78
 8001822:	f000 fa17 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001826:	2220      	movs	r2, #32
 8001828:	2100      	movs	r1, #0
 800182a:	2078      	movs	r0, #120	; 0x78
 800182c:	f000 fa12 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001830:	228d      	movs	r2, #141	; 0x8d
 8001832:	2100      	movs	r1, #0
 8001834:	2078      	movs	r0, #120	; 0x78
 8001836:	f000 fa0d 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800183a:	2214      	movs	r2, #20
 800183c:	2100      	movs	r1, #0
 800183e:	2078      	movs	r0, #120	; 0x78
 8001840:	f000 fa08 	bl	8001c54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001844:	22af      	movs	r2, #175	; 0xaf
 8001846:	2100      	movs	r1, #0
 8001848:	2078      	movs	r0, #120	; 0x78
 800184a:	f000 fa03 	bl	8001c54 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800184e:	222e      	movs	r2, #46	; 0x2e
 8001850:	2100      	movs	r1, #0
 8001852:	2078      	movs	r0, #120	; 0x78
 8001854:	f000 f9fe 	bl	8001c54 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001858:	2000      	movs	r0, #0
 800185a:	f000 f843 	bl	80018e4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800185e:	f000 f813 	bl	8001888 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <SSD1306_Init+0x184>)
 8001864:	2200      	movs	r2, #0
 8001866:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <SSD1306_Init+0x184>)
 800186a:	2200      	movs	r2, #0
 800186c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <SSD1306_Init+0x184>)
 8001870:	2201      	movs	r2, #1
 8001872:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001874:	2301      	movs	r3, #1
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000220 	.word	0x20000220
 8001884:	200006ec 	.word	0x200006ec

08001888 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800188e:	2300      	movs	r3, #0
 8001890:	71fb      	strb	r3, [r7, #7]
 8001892:	e01d      	b.n	80018d0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	3b50      	subs	r3, #80	; 0x50
 8001898:	b2db      	uxtb	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	2100      	movs	r1, #0
 800189e:	2078      	movs	r0, #120	; 0x78
 80018a0:	f000 f9d8 	bl	8001c54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	2078      	movs	r0, #120	; 0x78
 80018aa:	f000 f9d3 	bl	8001c54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80018ae:	2210      	movs	r2, #16
 80018b0:	2100      	movs	r1, #0
 80018b2:	2078      	movs	r0, #120	; 0x78
 80018b4:	f000 f9ce 	bl	8001c54 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	01db      	lsls	r3, r3, #7
 80018bc:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <SSD1306_UpdateScreen+0x58>)
 80018be:	441a      	add	r2, r3
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	2140      	movs	r1, #64	; 0x40
 80018c4:	2078      	movs	r0, #120	; 0x78
 80018c6:	f000 f95f 	bl	8001b88 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	3301      	adds	r3, #1
 80018ce:	71fb      	strb	r3, [r7, #7]
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	2b07      	cmp	r3, #7
 80018d4:	d9de      	bls.n	8001894 <SSD1306_UpdateScreen+0xc>
	}
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200002ec 	.word	0x200002ec

080018e4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <SSD1306_Fill+0x14>
 80018f4:	2300      	movs	r3, #0
 80018f6:	e000      	b.n	80018fa <SSD1306_Fill+0x16>
 80018f8:	23ff      	movs	r3, #255	; 0xff
 80018fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018fe:	4619      	mov	r1, r3
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <SSD1306_Fill+0x2c>)
 8001902:	f004 fbed 	bl	80060e0 <memset>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200002ec 	.word	0x200002ec

08001914 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]
 800191e:	460b      	mov	r3, r1
 8001920:	80bb      	strh	r3, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	70fb      	strb	r3, [r7, #3]
	if (
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	2b7f      	cmp	r3, #127	; 0x7f
 800192a:	d848      	bhi.n	80019be <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800192c:	88bb      	ldrh	r3, [r7, #4]
 800192e:	2b3f      	cmp	r3, #63	; 0x3f
 8001930:	d845      	bhi.n	80019be <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001932:	4b26      	ldr	r3, [pc, #152]	; (80019cc <SSD1306_DrawPixel+0xb8>)
 8001934:	791b      	ldrb	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d006      	beq.n	8001948 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	2b00      	cmp	r3, #0
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d11a      	bne.n	8001984 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800194e:	88fa      	ldrh	r2, [r7, #6]
 8001950:	88bb      	ldrh	r3, [r7, #4]
 8001952:	08db      	lsrs	r3, r3, #3
 8001954:	b298      	uxth	r0, r3
 8001956:	4603      	mov	r3, r0
 8001958:	01db      	lsls	r3, r3, #7
 800195a:	4413      	add	r3, r2
 800195c:	4a1c      	ldr	r2, [pc, #112]	; (80019d0 <SSD1306_DrawPixel+0xbc>)
 800195e:	5cd3      	ldrb	r3, [r2, r3]
 8001960:	b25a      	sxtb	r2, r3
 8001962:	88bb      	ldrh	r3, [r7, #4]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	2101      	movs	r1, #1
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	b25b      	sxtb	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	b259      	sxtb	r1, r3
 8001974:	88fa      	ldrh	r2, [r7, #6]
 8001976:	4603      	mov	r3, r0
 8001978:	01db      	lsls	r3, r3, #7
 800197a:	4413      	add	r3, r2
 800197c:	b2c9      	uxtb	r1, r1
 800197e:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <SSD1306_DrawPixel+0xbc>)
 8001980:	54d1      	strb	r1, [r2, r3]
 8001982:	e01d      	b.n	80019c0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001984:	88fa      	ldrh	r2, [r7, #6]
 8001986:	88bb      	ldrh	r3, [r7, #4]
 8001988:	08db      	lsrs	r3, r3, #3
 800198a:	b298      	uxth	r0, r3
 800198c:	4603      	mov	r3, r0
 800198e:	01db      	lsls	r3, r3, #7
 8001990:	4413      	add	r3, r2
 8001992:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <SSD1306_DrawPixel+0xbc>)
 8001994:	5cd3      	ldrb	r3, [r2, r3]
 8001996:	b25a      	sxtb	r2, r3
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	2101      	movs	r1, #1
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	b25b      	sxtb	r3, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	4013      	ands	r3, r2
 80019ac:	b259      	sxtb	r1, r3
 80019ae:	88fa      	ldrh	r2, [r7, #6]
 80019b0:	4603      	mov	r3, r0
 80019b2:	01db      	lsls	r3, r3, #7
 80019b4:	4413      	add	r3, r2
 80019b6:	b2c9      	uxtb	r1, r1
 80019b8:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <SSD1306_DrawPixel+0xbc>)
 80019ba:	54d1      	strb	r1, [r2, r3]
 80019bc:	e000      	b.n	80019c0 <SSD1306_DrawPixel+0xac>
		return;
 80019be:	bf00      	nop
	}
}
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	200006ec 	.word	0x200006ec
 80019d0:	200002ec 	.word	0x200002ec

080019d4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	460a      	mov	r2, r1
 80019de:	80fb      	strh	r3, [r7, #6]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80019e4:	4a05      	ldr	r2, [pc, #20]	; (80019fc <SSD1306_GotoXY+0x28>)
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <SSD1306_GotoXY+0x28>)
 80019ec:	88bb      	ldrh	r3, [r7, #4]
 80019ee:	8053      	strh	r3, [r2, #2]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	200006ec 	.word	0x200006ec

08001a00 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a10:	4b3a      	ldr	r3, [pc, #232]	; (8001afc <SSD1306_Putc+0xfc>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
	if (
 8001a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8001a1e:	dc07      	bgt.n	8001a30 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a20:	4b36      	ldr	r3, [pc, #216]	; (8001afc <SSD1306_Putc+0xfc>)
 8001a22:	885b      	ldrh	r3, [r3, #2]
 8001a24:	461a      	mov	r2, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	785b      	ldrb	r3, [r3, #1]
 8001a2a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a2c:	2b3f      	cmp	r3, #63	; 0x3f
 8001a2e:	dd01      	ble.n	8001a34 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e05e      	b.n	8001af2 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e04b      	b.n	8001ad2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	3b20      	subs	r3, #32
 8001a42:	6839      	ldr	r1, [r7, #0]
 8001a44:	7849      	ldrb	r1, [r1, #1]
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	440b      	add	r3, r1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	e030      	b.n	8001ac0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d010      	beq.n	8001a90 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a6e:	4b23      	ldr	r3, [pc, #140]	; (8001afc <SSD1306_Putc+0xfc>)
 8001a70:	881a      	ldrh	r2, [r3, #0]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	b298      	uxth	r0, r3
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <SSD1306_Putc+0xfc>)
 8001a7c:	885a      	ldrh	r2, [r3, #2]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	79ba      	ldrb	r2, [r7, #6]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7ff ff43 	bl	8001914 <SSD1306_DrawPixel>
 8001a8e:	e014      	b.n	8001aba <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <SSD1306_Putc+0xfc>)
 8001a92:	881a      	ldrh	r2, [r3, #0]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	b298      	uxth	r0, r3
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <SSD1306_Putc+0xfc>)
 8001a9e:	885a      	ldrh	r2, [r3, #2]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b299      	uxth	r1, r3
 8001aa8:	79bb      	ldrb	r3, [r7, #6]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bf0c      	ite	eq
 8001aae:	2301      	moveq	r3, #1
 8001ab0:	2300      	movne	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	f7ff ff2d 	bl	8001914 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	3301      	adds	r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d3c8      	bcc.n	8001a5e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	785b      	ldrb	r3, [r3, #1]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d3ad      	bcc.n	8001a3a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <SSD1306_Putc+0xfc>)
 8001ae0:	881a      	ldrh	r2, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <SSD1306_Putc+0xfc>)
 8001aee:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001af0:	79fb      	ldrb	r3, [r7, #7]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200006ec 	.word	0x200006ec

08001b00 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001b0e:	e012      	b.n	8001b36 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	79fa      	ldrb	r2, [r7, #7]
 8001b16:	68b9      	ldr	r1, [r7, #8]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff71 	bl	8001a00 <SSD1306_Putc>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d002      	beq.n	8001b30 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	e008      	b.n	8001b42 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3301      	adds	r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1e8      	bne.n	8001b10 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	781b      	ldrb	r3, [r3, #0]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7ff fec8 	bl	80018e4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001b54:	f7ff fe98 	bl	8001888 <SSD1306_UpdateScreen>
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <ssd1306_I2C_Init+0x28>)
 8001b64:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b66:	e002      	b.n	8001b6e <ssd1306_I2C_Init+0x12>
		p--;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f9      	bne.n	8001b68 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	0003d090 	.word	0x0003d090

08001b88 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count)
{
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b0c7      	sub	sp, #284	; 0x11c
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	4604      	mov	r4, r0
 8001b90:	4608      	mov	r0, r1
 8001b92:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001b96:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001b9a:	600a      	str	r2, [r1, #0]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ba2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bae:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bbe:	460a      	mov	r2, r1
 8001bc0:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8001bc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bca:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001bce:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001bd2:	7812      	ldrb	r2, [r2, #0]
 8001bd4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001bdc:	e015      	b.n	8001c0a <ssd1306_I2C_WriteMulti+0x82>
		dt[i + 1] = data[i];
 8001bde:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001be2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001be6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	441a      	add	r2, r3
 8001bee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	7811      	ldrb	r1, [r2, #0]
 8001bf6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001bfa:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001bfe:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001c00:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c04:	3301      	adds	r3, #1
 8001c06:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c0a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c14:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001c18:	8812      	ldrh	r2, [r2, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d8df      	bhi.n	8001bde <ssd1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count + 1, 10);
 8001c1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c22:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b299      	uxth	r1, r3
 8001c2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	f107 020c 	add.w	r2, r7, #12
 8001c3c:	200a      	movs	r0, #10
 8001c3e:	9000      	str	r0, [sp, #0]
 8001c40:	4803      	ldr	r0, [pc, #12]	; (8001c50 <ssd1306_I2C_WriteMulti+0xc8>)
 8001c42:	f001 f92b 	bl	8002e9c <HAL_I2C_Master_Transmit>
}
 8001c46:	bf00      	nop
 8001c48:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd90      	pop	{r4, r7, pc}
 8001c50:	20000220 	.word	0x20000220

08001c54 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	71bb      	strb	r3, [r7, #6]
 8001c62:	4613      	mov	r3, r2
 8001c64:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001c66:	79bb      	ldrb	r3, [r7, #6]
 8001c68:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c6a:	797b      	ldrb	r3, [r7, #5]
 8001c6c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	b299      	uxth	r1, r3
 8001c72:	f107 020c 	add.w	r2, r7, #12
 8001c76:	230a      	movs	r3, #10
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	4803      	ldr	r0, [pc, #12]	; (8001c8c <ssd1306_I2C_Write+0x38>)
 8001c7e:	f001 f90d 	bl	8002e9c <HAL_I2C_Master_Transmit>
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000220 	.word	0x20000220

08001c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_MspInit+0x44>)
 8001c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9a:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <HAL_MspInit+0x44>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_MspInit+0x44>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_MspInit+0x44>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb2:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <HAL_MspInit+0x44>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_MspInit+0x44>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <NMI_Handler+0x4>

08001cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <HardFault_Handler+0x4>

08001ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <MemManage_Handler+0x4>

08001cea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <BusFault_Handler+0x4>

08001cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <UsageFault_Handler+0x4>

08001cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d24:	f000 fad2 	bl	80022cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <TIM2_IRQHandler+0x10>)
 8001d32:	f003 fd15 	bl	8005760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200006f8 	.word	0x200006f8

08001d40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return 1;
 8001d44:	2301      	movs	r3, #1
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_kill>:

int _kill(int pid, int sig)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d5a:	f004 f997 	bl	800608c <__errno>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2216      	movs	r2, #22
 8001d62:	601a      	str	r2, [r3, #0]
  return -1;
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_exit>:

void _exit (int status)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ffe7 	bl	8001d50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d82:	e7fe      	b.n	8001d82 <_exit+0x12>

08001d84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	e00a      	b.n	8001dac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d96:	f3af 8000 	nop.w
 8001d9a:	4601      	mov	r1, r0
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	60ba      	str	r2, [r7, #8]
 8001da2:	b2ca      	uxtb	r2, r1
 8001da4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3301      	adds	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	dbf0      	blt.n	8001d96 <_read+0x12>
  }

  return len;
 8001db4:	687b      	ldr	r3, [r7, #4]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e009      	b.n	8001de4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	60ba      	str	r2, [r7, #8]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3301      	adds	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	dbf1      	blt.n	8001dd0 <_write+0x12>
  }
  return len;
 8001dec:	687b      	ldr	r3, [r7, #4]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_close>:

int _close(int file)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <_isatty>:

int _isatty(int file)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e68:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <_sbrk+0x5c>)
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <_sbrk+0x60>)
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <_sbrk+0x64>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <_sbrk+0x68>)
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d207      	bcs.n	8001ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e90:	f004 f8fc 	bl	800608c <__errno>
 8001e94:	4603      	mov	r3, r0
 8001e96:	220c      	movs	r2, #12
 8001e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	e009      	b.n	8001eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <_sbrk+0x64>)
 8001eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20008000 	.word	0x20008000
 8001ec0:	00000400 	.word	0x00000400
 8001ec4:	200006f4 	.word	0x200006f4
 8001ec8:	20000840 	.word	0x20000840

08001ecc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <SystemInit+0x20>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <SystemInit+0x20>)
 8001ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef6:	f107 0310 	add.w	r3, r7, #16
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f0e:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f18:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 47999;
 8001f24:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f26:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001f2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2c:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f38:	4813      	ldr	r0, [pc, #76]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f3a:	f003 faf5 	bl	8005528 <HAL_TIM_Base_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001f44:	f7ff fb54 	bl	80015f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	4619      	mov	r1, r3
 8001f54:	480c      	ldr	r0, [pc, #48]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f56:	f003 fd83 	bl	8005a60 <HAL_TIM_ConfigClockSource>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001f60:	f7ff fb46 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f64:	2320      	movs	r3, #32
 8001f66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f72:	f003 ffc3 	bl	8005efc <HAL_TIMEx_MasterConfigSynchronization>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001f7c:	f7ff fb38 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200006f8 	.word	0x200006f8

08001f8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f92:	f107 0310 	add.w	r3, r7, #16
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <MX_TIM3_Init+0x94>)
 8001fac:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <MX_TIM3_Init+0x98>)
 8001fae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <MX_TIM3_Init+0x94>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <MX_TIM3_Init+0x94>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 84;
 8001fbc:	4b18      	ldr	r3, [pc, #96]	; (8002020 <MX_TIM3_Init+0x94>)
 8001fbe:	2254      	movs	r2, #84	; 0x54
 8001fc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <MX_TIM3_Init+0x94>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc8:	4b15      	ldr	r3, [pc, #84]	; (8002020 <MX_TIM3_Init+0x94>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fce:	4814      	ldr	r0, [pc, #80]	; (8002020 <MX_TIM3_Init+0x94>)
 8001fd0:	f003 faaa 	bl	8005528 <HAL_TIM_Base_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001fda:	f7ff fb09 	bl	80015f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480d      	ldr	r0, [pc, #52]	; (8002020 <MX_TIM3_Init+0x94>)
 8001fec:	f003 fd38 	bl	8005a60 <HAL_TIM_ConfigClockSource>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001ff6:	f7ff fafb 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ffa:	2320      	movs	r3, #32
 8001ffc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	4619      	mov	r1, r3
 8002006:	4806      	ldr	r0, [pc, #24]	; (8002020 <MX_TIM3_Init+0x94>)
 8002008:	f003 ff78 	bl	8005efc <HAL_TIMEx_MasterConfigSynchronization>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002012:	f7ff faed 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000744 	.word	0x20000744
 8002024:	40000400 	.word	0x40000400

08002028 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <MX_TIM6_Init+0x78>)
 800203a:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <MX_TIM6_Init+0x7c>)
 800203c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40000-1;
 800203e:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <MX_TIM6_Init+0x78>)
 8002040:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002044:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <MX_TIM6_Init+0x78>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20999;
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <MX_TIM6_Init+0x78>)
 800204e:	f245 2207 	movw	r2, #20999	; 0x5207
 8002052:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <MX_TIM6_Init+0x78>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800205a:	4811      	ldr	r0, [pc, #68]	; (80020a0 <MX_TIM6_Init+0x78>)
 800205c:	f003 fa64 	bl	8005528 <HAL_TIM_Base_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002066:	f7ff fac3 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 800206a:	2108      	movs	r1, #8
 800206c:	480c      	ldr	r0, [pc, #48]	; (80020a0 <MX_TIM6_Init+0x78>)
 800206e:	f003 fb1d 	bl	80056ac <HAL_TIM_OnePulse_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM6_Init+0x54>
  {
    Error_Handler();
 8002078:	f7ff faba 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_TIM6_Init+0x78>)
 800208a:	f003 ff37 	bl	8005efc <HAL_TIMEx_MasterConfigSynchronization>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM6_Init+0x70>
  {
    Error_Handler();
 8002094:	f7ff faac 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000790 	.word	0x20000790
 80020a4:	40001000 	.word	0x40001000

080020a8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <MX_TIM7_Init+0x64>)
 80020ba:	4a15      	ldr	r2, [pc, #84]	; (8002110 <MX_TIM7_Init+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1-1;
 80020be:	4b13      	ldr	r3, [pc, #76]	; (800210c <MX_TIM7_Init+0x64>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <MX_TIM7_Init+0x64>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 84;
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <MX_TIM7_Init+0x64>)
 80020cc:	2254      	movs	r2, #84	; 0x54
 80020ce:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <MX_TIM7_Init+0x64>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80020d6:	480d      	ldr	r0, [pc, #52]	; (800210c <MX_TIM7_Init+0x64>)
 80020d8:	f003 fa26 	bl	8005528 <HAL_TIM_Base_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80020e2:	f7ff fa85 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020e6:	2320      	movs	r3, #32
 80020e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	4619      	mov	r1, r3
 80020f2:	4806      	ldr	r0, [pc, #24]	; (800210c <MX_TIM7_Init+0x64>)
 80020f4:	f003 ff02 	bl	8005efc <HAL_TIMEx_MasterConfigSynchronization>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80020fe:	f7ff fa77 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200007dc 	.word	0x200007dc
 8002110:	40001400 	.word	0x40001400

08002114 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002124:	d114      	bne.n	8002150 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002126:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_TIM_Base_MspInit+0xb0>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	4a26      	ldr	r2, [pc, #152]	; (80021c4 <HAL_TIM_Base_MspInit+0xb0>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6593      	str	r3, [r2, #88]	; 0x58
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_TIM_Base_MspInit+0xb0>)
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	201c      	movs	r0, #28
 8002144:	f000 f9dd 	bl	8002502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002148:	201c      	movs	r0, #28
 800214a:	f000 f9f4 	bl	8002536 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800214e:	e034      	b.n	80021ba <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <HAL_TIM_Base_MspInit+0xb4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10c      	bne.n	8002174 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_TIM_Base_MspInit+0xb0>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <HAL_TIM_Base_MspInit+0xb0>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6593      	str	r3, [r2, #88]	; 0x58
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <HAL_TIM_Base_MspInit+0xb0>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
}
 8002172:	e022      	b.n	80021ba <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM6)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <HAL_TIM_Base_MspInit+0xb8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d10c      	bne.n	8002198 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_TIM_Base_MspInit+0xb0>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <HAL_TIM_Base_MspInit+0xb0>)
 8002184:	f043 0310 	orr.w	r3, r3, #16
 8002188:	6593      	str	r3, [r2, #88]	; 0x58
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <HAL_TIM_Base_MspInit+0xb0>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
}
 8002196:	e010      	b.n	80021ba <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM7)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <HAL_TIM_Base_MspInit+0xbc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10b      	bne.n	80021ba <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_TIM_Base_MspInit+0xb0>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <HAL_TIM_Base_MspInit+0xb0>)
 80021a8:	f043 0320 	orr.w	r3, r3, #32
 80021ac:	6593      	str	r3, [r2, #88]	; 0x58
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_TIM_Base_MspInit+0xb0>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	f003 0320 	and.w	r3, r3, #32
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40000400 	.word	0x40000400
 80021cc:	40001000 	.word	0x40001000
 80021d0:	40001400 	.word	0x40001400

080021d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021d4:	480d      	ldr	r0, [pc, #52]	; (800220c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d8:	480d      	ldr	r0, [pc, #52]	; (8002210 <LoopForever+0x6>)
  ldr r1, =_edata
 80021da:	490e      	ldr	r1, [pc, #56]	; (8002214 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021dc:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <LoopForever+0xe>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80021e0:	e002      	b.n	80021e8 <LoopCopyDataInit>

080021e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e6:	3304      	adds	r3, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ec:	d3f9      	bcc.n	80021e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ee:	4a0b      	ldr	r2, [pc, #44]	; (800221c <LoopForever+0x12>)
  ldr r4, =_ebss
 80021f0:	4c0b      	ldr	r4, [pc, #44]	; (8002220 <LoopForever+0x16>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f4:	e001      	b.n	80021fa <LoopFillZerobss>

080021f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f8:	3204      	adds	r2, #4

080021fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021fc:	d3fb      	bcc.n	80021f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021fe:	f7ff fe65 	bl	8001ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002202:	f003 ff49 	bl	8006098 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002206:	f7ff f84f 	bl	80012a8 <main>

0800220a <LoopForever>:

LoopForever:
    b LoopForever
 800220a:	e7fe      	b.n	800220a <LoopForever>
  ldr   r0, =_estack
 800220c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002214:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002218:	0800c3bc 	.word	0x0800c3bc
  ldr r2, =_sbss
 800221c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002220:	2000083c 	.word	0x2000083c

08002224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002224:	e7fe      	b.n	8002224 <ADC1_2_IRQHandler>

08002226 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002230:	2003      	movs	r0, #3
 8002232:	f000 f95b 	bl	80024ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002236:	2000      	movs	r0, #0
 8002238:	f000 f80e 	bl	8002258 <HAL_InitTick>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	71fb      	strb	r3, [r7, #7]
 8002246:	e001      	b.n	800224c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002248:	f7ff fd22 	bl	8001c90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800224c:	79fb      	ldrb	r3, [r7, #7]

}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_InitTick+0x68>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d022      	beq.n	80022b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800226c:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_InitTick+0x6c>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_InitTick+0x68>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002278:	fbb1 f3f3 	udiv	r3, r1, r3
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	4618      	mov	r0, r3
 8002282:	f000 f966 	bl	8002552 <HAL_SYSTICK_Config>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10f      	bne.n	80022ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b0f      	cmp	r3, #15
 8002290:	d809      	bhi.n	80022a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002292:	2200      	movs	r2, #0
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	f04f 30ff 	mov.w	r0, #4294967295
 800229a:	f000 f932 	bl	8002502 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <HAL_InitTick+0x70>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	e007      	b.n	80022b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e004      	b.n	80022b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e001      	b.n	80022b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000018 	.word	0x20000018
 80022c4:	20000010 	.word	0x20000010
 80022c8:	20000014 	.word	0x20000014

080022cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_IncTick+0x1c>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_IncTick+0x20>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4413      	add	r3, r2
 80022da:	4a03      	ldr	r2, [pc, #12]	; (80022e8 <HAL_IncTick+0x1c>)
 80022dc:	6013      	str	r3, [r2, #0]
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	20000828 	.word	0x20000828
 80022ec:	20000018 	.word	0x20000018

080022f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return uwTick;
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <HAL_GetTick+0x14>)
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000828 	.word	0x20000828

08002308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002310:	f7ff ffee 	bl	80022f0 <HAL_GetTick>
 8002314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d004      	beq.n	800232c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_Delay+0x40>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4413      	add	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800232c:	bf00      	nop
 800232e:	f7ff ffdf 	bl	80022f0 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	429a      	cmp	r2, r3
 800233c:	d8f7      	bhi.n	800232e <HAL_Delay+0x26>
  {
  }
}
 800233e:	bf00      	nop
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000018 	.word	0x20000018

0800234c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002368:	4013      	ands	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237e:	4a04      	ldr	r2, [pc, #16]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	60d3      	str	r3, [r2, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <__NVIC_GetPriorityGrouping+0x18>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 0307 	and.w	r3, r3, #7
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	db0b      	blt.n	80023da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	f003 021f 	and.w	r2, r3, #31
 80023c8:	4907      	ldr	r1, [pc, #28]	; (80023e8 <__NVIC_EnableIRQ+0x38>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	2001      	movs	r0, #1
 80023d2:	fa00 f202 	lsl.w	r2, r0, r2
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000e100 	.word	0xe000e100

080023ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b8:	d301      	bcc.n	80024be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00f      	b.n	80024de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <SysTick_Config+0x40>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c6:	210f      	movs	r1, #15
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f7ff ff8e 	bl	80023ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <SysTick_Config+0x40>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SysTick_Config+0x40>)
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000e010 	.word	0xe000e010

080024ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff29 	bl	800234c <__NVIC_SetPriorityGrouping>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002510:	f7ff ff40 	bl	8002394 <__NVIC_GetPriorityGrouping>
 8002514:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	6978      	ldr	r0, [r7, #20]
 800251c:	f7ff ff90 	bl	8002440 <NVIC_EncodePriority>
 8002520:	4602      	mov	r2, r0
 8002522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff5f 	bl	80023ec <__NVIC_SetPriority>
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff33 	bl	80023b0 <__NVIC_EnableIRQ>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ffa4 	bl	80024a8 <SysTick_Config>
 8002560:	4603      	mov	r3, r0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e014      	b.n	80025a6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	791b      	ldrb	r3, [r3, #4]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d105      	bne.n	8002592 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7fe fcab 	bl	8000ee8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	795b      	ldrb	r3, [r3, #5]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_DAC_Start+0x16>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e043      	b.n	800264c <HAL_DAC_Start+0x9e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6819      	ldr	r1, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	2201      	movs	r2, #1
 80025de:	409a      	lsls	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80025e8:	2001      	movs	r0, #1
 80025ea:	f7ff fe8d 	bl	8002308 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10f      	bne.n	8002614 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d11d      	bne.n	800263e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	e014      	b.n	800263e <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2102      	movs	r1, #2
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	429a      	cmp	r2, r3
 800262c:	d107      	bne.n	800263e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0202 	orr.w	r2, r2, #2
 800263c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	795b      	ldrb	r3, [r3, #5]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_DAC_ConfigChannel+0x18>
 8002668:	2302      	movs	r3, #2
 800266a:	e192      	b.n	8002992 <HAL_DAC_ConfigChannel+0x33e>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2202      	movs	r2, #2
 8002676:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b04      	cmp	r3, #4
 800267e:	d174      	bne.n	800276a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002680:	f7ff fe36 	bl	80022f0 <HAL_GetTick>
 8002684:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d134      	bne.n	80026f6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800268c:	e011      	b.n	80026b2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800268e:	f7ff fe2f 	bl	80022f0 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b01      	cmp	r3, #1
 800269a:	d90a      	bls.n	80026b2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f043 0208 	orr.w	r2, r3, #8
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2203      	movs	r2, #3
 80026ac:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e16f      	b.n	8002992 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e6      	bne.n	800268e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f7ff fe21 	bl	8002308 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
 80026d0:	e01e      	b.n	8002710 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80026d2:	f7ff fe0d 	bl	80022f0 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d90a      	bls.n	80026f6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f043 0208 	orr.w	r2, r3, #8
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2203      	movs	r2, #3
 80026f0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e14d      	b.n	8002992 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	dbe8      	blt.n	80026d2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002700:	2001      	movs	r0, #1
 8002702:	f7ff fe01 	bl	8002308 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800270e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	ea02 0103 	and.w	r1, r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	409a      	lsls	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	21ff      	movs	r1, #255	; 0xff
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	ea02 0103 	and.w	r1, r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	409a      	lsls	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d11d      	bne.n	80027ae <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	221f      	movs	r2, #31
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	4013      	ands	r3, r2
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a2:	4313      	orrs	r3, r2
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2207      	movs	r2, #7
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c6:	4013      	ands	r3, r2
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d102      	bne.n	80027d8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	623b      	str	r3, [r7, #32]
 80027d6:	e00f      	b.n	80027f8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d102      	bne.n	80027e6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80027e0:	2301      	movs	r3, #1
 80027e2:	623b      	str	r3, [r7, #32]
 80027e4:	e008      	b.n	80027f8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80027ee:	2301      	movs	r3, #1
 80027f0:	623b      	str	r3, [r7, #32]
 80027f2:	e001      	b.n	80027f8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	6a3a      	ldr	r2, [r7, #32]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281a:	4013      	ands	r3, r2
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	791b      	ldrb	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d102      	bne.n	800282c <HAL_DAC_ConfigChannel+0x1d8>
 8002826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800282a:	e000      	b.n	800282e <HAL_DAC_ConfigChannel+0x1da>
 800282c:	2300      	movs	r3, #0
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002846:	4013      	ands	r3, r2
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	795b      	ldrb	r3, [r3, #5]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d102      	bne.n	8002858 <HAL_DAC_ConfigChannel+0x204>
 8002852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002856:	e000      	b.n	800285a <HAL_DAC_ConfigChannel+0x206>
 8002858:	2300      	movs	r3, #0
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d114      	bne.n	800289a <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002870:	f001 fd00 	bl	8004274 <HAL_RCC_GetHCLKFreq>
 8002874:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	4a48      	ldr	r2, [pc, #288]	; (800299c <HAL_DAC_ConfigChannel+0x348>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d904      	bls.n	8002888 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
 8002886:	e00f      	b.n	80028a8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	4a45      	ldr	r2, [pc, #276]	; (80029a0 <HAL_DAC_ConfigChannel+0x34c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d90a      	bls.n	80028a6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
 8002898:	e006      	b.n	80028a8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a0:	4313      	orrs	r3, r2
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
 80028a4:	e000      	b.n	80028a8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80028a6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b6:	4313      	orrs	r3, r2
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6819      	ldr	r1, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	400a      	ands	r2, r1
 80028de:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	f640 72fe 	movw	r2, #4094	; 0xffe
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fa:	4013      	ands	r3, r2
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002912:	4313      	orrs	r3, r2
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6819      	ldr	r1, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	22c0      	movs	r2, #192	; 0xc0
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43da      	mvns	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	400a      	ands	r2, r1
 8002938:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	f640 710f 	movw	r1, #3855	; 0xf0f
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	ea02 0103 	and.w	r1, r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	409a      	lsls	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3728      	adds	r7, #40	; 0x28
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	09896800 	.word	0x09896800
 80029a0:	04c4b400 	.word	0x04c4b400

080029a4 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	795b      	ldrb	r3, [r3, #5]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_DACEx_TriangleWaveGenerate+0x18>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e024      	b.n	8002a06 <HAL_DACEx_TriangleWaveGenerate+0x62>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2202      	movs	r2, #2
 80029c6:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	ea02 0103 	and.w	r1, r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	409a      	lsls	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a22:	e15a      	b.n	8002cda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2101      	movs	r1, #1
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 814c 	beq.w	8002cd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d005      	beq.n	8002a54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d130      	bne.n	8002ab6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	f003 0201 	and.w	r2, r3, #1
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d017      	beq.n	8002af2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d123      	bne.n	8002b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	08da      	lsrs	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3208      	adds	r2, #8
 8002b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	08da      	lsrs	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3208      	adds	r2, #8
 8002b40:	6939      	ldr	r1, [r7, #16]
 8002b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0203 	and.w	r2, r3, #3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80a6 	beq.w	8002cd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b88:	4b5b      	ldr	r3, [pc, #364]	; (8002cf8 <HAL_GPIO_Init+0x2e4>)
 8002b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8c:	4a5a      	ldr	r2, [pc, #360]	; (8002cf8 <HAL_GPIO_Init+0x2e4>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6613      	str	r3, [r2, #96]	; 0x60
 8002b94:	4b58      	ldr	r3, [pc, #352]	; (8002cf8 <HAL_GPIO_Init+0x2e4>)
 8002b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba0:	4a56      	ldr	r2, [pc, #344]	; (8002cfc <HAL_GPIO_Init+0x2e8>)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	089b      	lsrs	r3, r3, #2
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	220f      	movs	r2, #15
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bca:	d01f      	beq.n	8002c0c <HAL_GPIO_Init+0x1f8>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a4c      	ldr	r2, [pc, #304]	; (8002d00 <HAL_GPIO_Init+0x2ec>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d019      	beq.n	8002c08 <HAL_GPIO_Init+0x1f4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a4b      	ldr	r2, [pc, #300]	; (8002d04 <HAL_GPIO_Init+0x2f0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d013      	beq.n	8002c04 <HAL_GPIO_Init+0x1f0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a4a      	ldr	r2, [pc, #296]	; (8002d08 <HAL_GPIO_Init+0x2f4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00d      	beq.n	8002c00 <HAL_GPIO_Init+0x1ec>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a49      	ldr	r2, [pc, #292]	; (8002d0c <HAL_GPIO_Init+0x2f8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d007      	beq.n	8002bfc <HAL_GPIO_Init+0x1e8>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a48      	ldr	r2, [pc, #288]	; (8002d10 <HAL_GPIO_Init+0x2fc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d101      	bne.n	8002bf8 <HAL_GPIO_Init+0x1e4>
 8002bf4:	2305      	movs	r3, #5
 8002bf6:	e00a      	b.n	8002c0e <HAL_GPIO_Init+0x1fa>
 8002bf8:	2306      	movs	r3, #6
 8002bfa:	e008      	b.n	8002c0e <HAL_GPIO_Init+0x1fa>
 8002bfc:	2304      	movs	r3, #4
 8002bfe:	e006      	b.n	8002c0e <HAL_GPIO_Init+0x1fa>
 8002c00:	2303      	movs	r3, #3
 8002c02:	e004      	b.n	8002c0e <HAL_GPIO_Init+0x1fa>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e002      	b.n	8002c0e <HAL_GPIO_Init+0x1fa>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_GPIO_Init+0x1fa>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	f002 0203 	and.w	r2, r2, #3
 8002c14:	0092      	lsls	r2, r2, #2
 8002c16:	4093      	lsls	r3, r2
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c1e:	4937      	ldr	r1, [pc, #220]	; (8002cfc <HAL_GPIO_Init+0x2e8>)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	3302      	adds	r3, #2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c2c:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <HAL_GPIO_Init+0x300>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c50:	4a30      	ldr	r2, [pc, #192]	; (8002d14 <HAL_GPIO_Init+0x300>)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c56:	4b2f      	ldr	r3, [pc, #188]	; (8002d14 <HAL_GPIO_Init+0x300>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c7a:	4a26      	ldr	r2, [pc, #152]	; (8002d14 <HAL_GPIO_Init+0x300>)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002c80:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <HAL_GPIO_Init+0x300>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ca4:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <HAL_GPIO_Init+0x300>)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002caa:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <HAL_GPIO_Init+0x300>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cce:	4a11      	ldr	r2, [pc, #68]	; (8002d14 <HAL_GPIO_Init+0x300>)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f47f ae9d 	bne.w	8002a24 <HAL_GPIO_Init+0x10>
  }
}
 8002cea:	bf00      	nop
 8002cec:	bf00      	nop
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40010000 	.word	0x40010000
 8002d00:	48000400 	.word	0x48000400
 8002d04:	48000800 	.word	0x48000800
 8002d08:	48000c00 	.word	0x48000c00
 8002d0c:	48001000 	.word	0x48001000
 8002d10:	48001400 	.word	0x48001400
 8002d14:	40010400 	.word	0x40010400

08002d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	807b      	strh	r3, [r7, #2]
 8002d24:	4613      	mov	r3, r2
 8002d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d28:	787b      	ldrb	r3, [r7, #1]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d34:	e002      	b.n	8002d3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d36:	887a      	ldrh	r2, [r7, #2]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	041a      	lsls	r2, r3, #16
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	43d9      	mvns	r1, r3
 8002d66:	887b      	ldrh	r3, [r7, #2]
 8002d68:	400b      	ands	r3, r1
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e081      	b.n	8002e92 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fe fa08 	bl	80011b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2224      	movs	r2, #36	; 0x24
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ddc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d107      	bne.n	8002df6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	e006      	b.n	8002e04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d104      	bne.n	8002e16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69d9      	ldr	r1, [r3, #28]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1a      	ldr	r2, [r3, #32]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	817b      	strh	r3, [r7, #10]
 8002eac:	4613      	mov	r3, r2
 8002eae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	f040 80da 	bne.w	8003072 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_I2C_Master_Transmit+0x30>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e0d3      	b.n	8003074 <HAL_I2C_Master_Transmit+0x1d8>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ed4:	f7ff fa0c 	bl	80022f0 <HAL_GetTick>
 8002ed8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	2319      	movs	r3, #25
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f9f7 	bl	80032da <I2C_WaitOnFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e0be      	b.n	8003074 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2221      	movs	r2, #33	; 0x21
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2210      	movs	r2, #16
 8002f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	893a      	ldrh	r2, [r7, #8]
 8002f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2bff      	cmp	r3, #255	; 0xff
 8002f26:	d90e      	bls.n	8002f46 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	22ff      	movs	r2, #255	; 0xff
 8002f2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	8979      	ldrh	r1, [r7, #10]
 8002f36:	4b51      	ldr	r3, [pc, #324]	; (800307c <HAL_I2C_Master_Transmit+0x1e0>)
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fb74 	bl	800362c <I2C_TransferConfig>
 8002f44:	e06c      	b.n	8003020 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	8979      	ldrh	r1, [r7, #10]
 8002f58:	4b48      	ldr	r3, [pc, #288]	; (800307c <HAL_I2C_Master_Transmit+0x1e0>)
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fb63 	bl	800362c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f66:	e05b      	b.n	8003020 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	6a39      	ldr	r1, [r7, #32]
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f9f4 	bl	800335a <I2C_WaitOnTXISFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e07b      	b.n	8003074 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	781a      	ldrb	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d034      	beq.n	8003020 <HAL_I2C_Master_Transmit+0x184>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d130      	bne.n	8003020 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2180      	movs	r1, #128	; 0x80
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f986 	bl	80032da <I2C_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e04d      	b.n	8003074 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2bff      	cmp	r3, #255	; 0xff
 8002fe0:	d90e      	bls.n	8003000 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	22ff      	movs	r2, #255	; 0xff
 8002fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	8979      	ldrh	r1, [r7, #10]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fb17 	bl	800362c <I2C_TransferConfig>
 8002ffe:	e00f      	b.n	8003020 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	b2da      	uxtb	r2, r3
 8003010:	8979      	ldrh	r1, [r7, #10]
 8003012:	2300      	movs	r3, #0
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 fb06 	bl	800362c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d19e      	bne.n	8002f68 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	6a39      	ldr	r1, [r7, #32]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f9d3 	bl	80033da <I2C_WaitOnSTOPFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e01a      	b.n	8003074 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2220      	movs	r2, #32
 8003044:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_I2C_Master_Transmit+0x1e4>)
 8003052:	400b      	ands	r3, r1
 8003054:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003072:	2302      	movs	r3, #2
  }
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	80002000 	.word	0x80002000
 8003080:	fe00e800 	.word	0xfe00e800

08003084 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	460b      	mov	r3, r1
 8003092:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	f040 80f1 	bne.w	8003288 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b4:	d101      	bne.n	80030ba <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
 80030b8:	e0e7      	b.n	800328a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_I2C_IsDeviceReady+0x44>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e0e0      	b.n	800328a <HAL_I2C_IsDeviceReady+0x206>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2224      	movs	r2, #36	; 0x24
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d107      	bne.n	80030f6 <HAL_I2C_IsDeviceReady+0x72>
 80030e6:	897b      	ldrh	r3, [r7, #10]
 80030e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030f4:	e004      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x7c>
 80030f6:	897b      	ldrh	r3, [r7, #10]
 80030f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030fc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003106:	f7ff f8f3 	bl	80022f0 <HAL_GetTick>
 800310a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b20      	cmp	r3, #32
 8003118:	bf0c      	ite	eq
 800311a:	2301      	moveq	r3, #1
 800311c:	2300      	movne	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b10      	cmp	r3, #16
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003138:	e034      	b.n	80031a4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d01a      	beq.n	8003178 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003142:	f7ff f8d5 	bl	80022f0 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <HAL_I2C_IsDeviceReady+0xd4>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10f      	bne.n	8003178 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e088      	b.n	800328a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b20      	cmp	r3, #32
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b10      	cmp	r3, #16
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80031a4:	7ffb      	ldrb	r3, [r7, #31]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <HAL_I2C_IsDeviceReady+0x12c>
 80031aa:	7fbb      	ldrb	r3, [r7, #30]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0c4      	beq.n	800313a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	d01a      	beq.n	80031f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2200      	movs	r2, #0
 80031c6:	2120      	movs	r1, #32
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f886 	bl	80032da <I2C_WaitOnFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e058      	b.n	800328a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2220      	movs	r2, #32
 80031de:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e04a      	b.n	800328a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	2120      	movs	r1, #32
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f86b 	bl	80032da <I2C_WaitOnFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e03d      	b.n	800328a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2210      	movs	r2, #16
 8003214:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2220      	movs	r2, #32
 800321c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	429a      	cmp	r2, r3
 8003224:	d118      	bne.n	8003258 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003234:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2200      	movs	r2, #0
 800323e:	2120      	movs	r1, #32
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f84a 	bl	80032da <I2C_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e01c      	b.n	800328a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2220      	movs	r2, #32
 8003256:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	3301      	adds	r3, #1
 800325c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	429a      	cmp	r2, r3
 8003264:	f63f af3b 	bhi.w	80030de <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003274:	f043 0220 	orr.w	r2, r3, #32
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003288:	2302      	movs	r3, #2
  }
}
 800328a:	4618      	mov	r0, r3
 800328c:	3720      	adds	r7, #32
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d103      	bne.n	80032b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2200      	movs	r2, #0
 80032ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d007      	beq.n	80032ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699a      	ldr	r2, [r3, #24]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0201 	orr.w	r2, r2, #1
 80032cc:	619a      	str	r2, [r3, #24]
  }
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ea:	e022      	b.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f2:	d01e      	beq.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f4:	f7fe fffc 	bl	80022f0 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d302      	bcc.n	800330a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d113      	bne.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f043 0220 	orr.w	r2, r3, #32
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e00f      	b.n	8003352 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699a      	ldr	r2, [r3, #24]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4013      	ands	r3, r2
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	429a      	cmp	r2, r3
 8003340:	bf0c      	ite	eq
 8003342:	2301      	moveq	r3, #1
 8003344:	2300      	movne	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	429a      	cmp	r2, r3
 800334e:	d0cd      	beq.n	80032ec <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003366:	e02c      	b.n	80033c2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f871 	bl	8003454 <I2C_IsErrorOccurred>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e02a      	b.n	80033d2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003382:	d01e      	beq.n	80033c2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003384:	f7fe ffb4 	bl	80022f0 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	429a      	cmp	r2, r3
 8003392:	d302      	bcc.n	800339a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d113      	bne.n	80033c2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	f043 0220 	orr.w	r2, r3, #32
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e007      	b.n	80033d2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d1cb      	bne.n	8003368 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e6:	e028      	b.n	800343a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	68b9      	ldr	r1, [r7, #8]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f831 	bl	8003454 <I2C_IsErrorOccurred>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e026      	b.n	800344a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fc:	f7fe ff78 	bl	80022f0 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	d302      	bcc.n	8003412 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d113      	bne.n	800343a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	f043 0220 	orr.w	r2, r3, #32
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e007      	b.n	800344a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b20      	cmp	r3, #32
 8003446:	d1cf      	bne.n	80033e8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	; 0x28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	d075      	beq.n	800356c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2210      	movs	r2, #16
 8003486:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003488:	e056      	b.n	8003538 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d052      	beq.n	8003538 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003492:	f7fe ff2d 	bl	80022f0 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d302      	bcc.n	80034a8 <I2C_IsErrorOccurred+0x54>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d147      	bne.n	8003538 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ca:	d12e      	bne.n	800352a <I2C_IsErrorOccurred+0xd6>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034d2:	d02a      	beq.n	800352a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d027      	beq.n	800352a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034ea:	f7fe ff01 	bl	80022f0 <HAL_GetTick>
 80034ee:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f0:	e01b      	b.n	800352a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034f2:	f7fe fefd 	bl	80022f0 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b19      	cmp	r3, #25
 80034fe:	d914      	bls.n	800352a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	f043 0220 	orr.w	r2, r3, #32
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b20      	cmp	r3, #32
 8003536:	d1dc      	bne.n	80034f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b20      	cmp	r3, #32
 8003544:	d003      	beq.n	800354e <I2C_IsErrorOccurred+0xfa>
 8003546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800354a:	2b00      	cmp	r3, #0
 800354c:	d09d      	beq.n	800348a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800354e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2220      	movs	r2, #32
 800355c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	f043 0304 	orr.w	r3, r3, #4
 8003564:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800358e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00b      	beq.n	80035b8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	f043 0308 	orr.w	r3, r3, #8
 80035a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80035da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01c      	beq.n	800361c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f7ff fe55 	bl	8003292 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <I2C_IsErrorOccurred+0x1d4>)
 80035f4:	400b      	ands	r3, r1
 80035f6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	431a      	orrs	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800361c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003620:	4618      	mov	r0, r3
 8003622:	3728      	adds	r7, #40	; 0x28
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	fe00e800 	.word	0xfe00e800

0800362c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	817b      	strh	r3, [r7, #10]
 800363a:	4613      	mov	r3, r2
 800363c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800363e:	897b      	ldrh	r3, [r7, #10]
 8003640:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003644:	7a7b      	ldrb	r3, [r7, #9]
 8003646:	041b      	lsls	r3, r3, #16
 8003648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800364c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	4313      	orrs	r3, r2
 8003656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800365a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	0d5b      	lsrs	r3, r3, #21
 8003666:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <I2C_TransferConfig+0x60>)
 800366c:	430b      	orrs	r3, r1
 800366e:	43db      	mvns	r3, r3
 8003670:	ea02 0103 	and.w	r1, r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	03ff63ff 	.word	0x03ff63ff

08003690 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d138      	bne.n	8003718 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e032      	b.n	800371a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2224      	movs	r2, #36	; 0x24
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003726:	b480      	push	{r7}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b20      	cmp	r3, #32
 800373a:	d139      	bne.n	80037b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003746:	2302      	movs	r3, #2
 8003748:	e033      	b.n	80037b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2224      	movs	r2, #36	; 0x24
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0201 	bic.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003778:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4313      	orrs	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e000      	b.n	80037b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
  }
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d141      	bne.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037ce:	4b4b      	ldr	r3, [pc, #300]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037da:	d131      	bne.n	8003840 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037dc:	4b47      	ldr	r3, [pc, #284]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037e2:	4a46      	ldr	r2, [pc, #280]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037ec:	4b43      	ldr	r3, [pc, #268]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037f4:	4a41      	ldr	r2, [pc, #260]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037fc:	4b40      	ldr	r3, [pc, #256]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2232      	movs	r2, #50	; 0x32
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	4a3f      	ldr	r2, [pc, #252]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	0c9b      	lsrs	r3, r3, #18
 800380e:	3301      	adds	r3, #1
 8003810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003812:	e002      	b.n	800381a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3b01      	subs	r3, #1
 8003818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800381a:	4b38      	ldr	r3, [pc, #224]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003826:	d102      	bne.n	800382e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f2      	bne.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800382e:	4b33      	ldr	r3, [pc, #204]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383a:	d158      	bne.n	80038ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e057      	b.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003840:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003846:	4a2d      	ldr	r2, [pc, #180]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800384c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003850:	e04d      	b.n	80038ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003858:	d141      	bne.n	80038de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800385a:	4b28      	ldr	r3, [pc, #160]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003866:	d131      	bne.n	80038cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003868:	4b24      	ldr	r3, [pc, #144]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800386e:	4a23      	ldr	r2, [pc, #140]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003874:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003878:	4b20      	ldr	r3, [pc, #128]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003880:	4a1e      	ldr	r2, [pc, #120]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003886:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003888:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2232      	movs	r2, #50	; 0x32
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	4a1c      	ldr	r2, [pc, #112]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	0c9b      	lsrs	r3, r3, #18
 800389a:	3301      	adds	r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800389e:	e002      	b.n	80038a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038a6:	4b15      	ldr	r3, [pc, #84]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b2:	d102      	bne.n	80038ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f2      	bne.n	80038a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c6:	d112      	bne.n	80038ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e011      	b.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d2:	4a0a      	ldr	r2, [pc, #40]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038dc:	e007      	b.n	80038ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038e6:	4a05      	ldr	r2, [pc, #20]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	40007000 	.word	0x40007000
 8003900:	20000010 	.word	0x20000010
 8003904:	431bde83 	.word	0x431bde83

08003908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e306      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d075      	beq.n	8003a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003926:	4b97      	ldr	r3, [pc, #604]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003930:	4b94      	ldr	r3, [pc, #592]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b0c      	cmp	r3, #12
 800393e:	d102      	bne.n	8003946 <HAL_RCC_OscConfig+0x3e>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d002      	beq.n	800394c <HAL_RCC_OscConfig+0x44>
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d10b      	bne.n	8003964 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	4b8d      	ldr	r3, [pc, #564]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d05b      	beq.n	8003a10 <HAL_RCC_OscConfig+0x108>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d157      	bne.n	8003a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e2e1      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396c:	d106      	bne.n	800397c <HAL_RCC_OscConfig+0x74>
 800396e:	4b85      	ldr	r3, [pc, #532]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a84      	ldr	r2, [pc, #528]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e01d      	b.n	80039b8 <HAL_RCC_OscConfig+0xb0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x98>
 8003986:	4b7f      	ldr	r3, [pc, #508]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a7e      	ldr	r2, [pc, #504]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 800398c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4b7c      	ldr	r3, [pc, #496]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a7b      	ldr	r2, [pc, #492]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e00b      	b.n	80039b8 <HAL_RCC_OscConfig+0xb0>
 80039a0:	4b78      	ldr	r3, [pc, #480]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a77      	ldr	r2, [pc, #476]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 80039a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4b75      	ldr	r3, [pc, #468]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a74      	ldr	r2, [pc, #464]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 80039b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d013      	beq.n	80039e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fe fc96 	bl	80022f0 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fe fc92 	bl	80022f0 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e2a6      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039da:	4b6a      	ldr	r3, [pc, #424]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0xc0>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fe fc82 	bl	80022f0 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fe fc7e 	bl	80022f0 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e292      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a02:	4b60      	ldr	r3, [pc, #384]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0xe8>
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d075      	beq.n	8003b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a1e:	4b59      	ldr	r3, [pc, #356]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a28:	4b56      	ldr	r3, [pc, #344]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2b0c      	cmp	r3, #12
 8003a36:	d102      	bne.n	8003a3e <HAL_RCC_OscConfig+0x136>
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d002      	beq.n	8003a44 <HAL_RCC_OscConfig+0x13c>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d11f      	bne.n	8003a84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a44:	4b4f      	ldr	r3, [pc, #316]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_OscConfig+0x154>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e265      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5c:	4b49      	ldr	r3, [pc, #292]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	061b      	lsls	r3, r3, #24
 8003a6a:	4946      	ldr	r1, [pc, #280]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a70:	4b45      	ldr	r3, [pc, #276]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe fbef 	bl	8002258 <HAL_InitTick>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d043      	beq.n	8003b08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e251      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d023      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a8c:	4b3d      	ldr	r3, [pc, #244]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a3c      	ldr	r2, [pc, #240]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fe fc2a 	bl	80022f0 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa0:	f7fe fc26 	bl	80022f0 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e23a      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab2:	4b34      	ldr	r3, [pc, #208]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abe:	4b31      	ldr	r3, [pc, #196]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	061b      	lsls	r3, r3, #24
 8003acc:	492d      	ldr	r1, [pc, #180]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]
 8003ad2:	e01a      	b.n	8003b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ad4:	4b2b      	ldr	r3, [pc, #172]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2a      	ldr	r2, [pc, #168]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fe fc06 	bl	80022f0 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae8:	f7fe fc02 	bl	80022f0 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e216      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003afa:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x1e0>
 8003b06:	e000      	b.n	8003b0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d041      	beq.n	8003b9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01c      	beq.n	8003b58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1e:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b24:	4a17      	ldr	r2, [pc, #92]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2e:	f7fe fbdf 	bl	80022f0 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b36:	f7fe fbdb 	bl	80022f0 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1ef      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b48:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0ef      	beq.n	8003b36 <HAL_RCC_OscConfig+0x22e>
 8003b56:	e020      	b.n	8003b9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5e:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b68:	f7fe fbc2 	bl	80022f0 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b6e:	e00d      	b.n	8003b8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b70:	f7fe fbbe 	bl	80022f0 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d906      	bls.n	8003b8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1d2      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b8c:	4b8c      	ldr	r3, [pc, #560]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1ea      	bne.n	8003b70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80a6 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bac:	4b84      	ldr	r3, [pc, #528]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_OscConfig+0x2b4>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <HAL_RCC_OscConfig+0x2b6>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc2:	4b7f      	ldr	r3, [pc, #508]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc6:	4a7e      	ldr	r2, [pc, #504]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8003bce:	4b7c      	ldr	r3, [pc, #496]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bde:	4b79      	ldr	r3, [pc, #484]	; (8003dc4 <HAL_RCC_OscConfig+0x4bc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d118      	bne.n	8003c1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bea:	4b76      	ldr	r3, [pc, #472]	; (8003dc4 <HAL_RCC_OscConfig+0x4bc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a75      	ldr	r2, [pc, #468]	; (8003dc4 <HAL_RCC_OscConfig+0x4bc>)
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf6:	f7fe fb7b 	bl	80022f0 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfe:	f7fe fb77 	bl	80022f0 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e18b      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c10:	4b6c      	ldr	r3, [pc, #432]	; (8003dc4 <HAL_RCC_OscConfig+0x4bc>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d108      	bne.n	8003c36 <HAL_RCC_OscConfig+0x32e>
 8003c24:	4b66      	ldr	r3, [pc, #408]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	4a65      	ldr	r2, [pc, #404]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c34:	e024      	b.n	8003c80 <HAL_RCC_OscConfig+0x378>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b05      	cmp	r3, #5
 8003c3c:	d110      	bne.n	8003c60 <HAL_RCC_OscConfig+0x358>
 8003c3e:	4b60      	ldr	r3, [pc, #384]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c44:	4a5e      	ldr	r2, [pc, #376]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c46:	f043 0304 	orr.w	r3, r3, #4
 8003c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c4e:	4b5c      	ldr	r3, [pc, #368]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c54:	4a5a      	ldr	r2, [pc, #360]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c5e:	e00f      	b.n	8003c80 <HAL_RCC_OscConfig+0x378>
 8003c60:	4b57      	ldr	r3, [pc, #348]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	4a56      	ldr	r2, [pc, #344]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c70:	4b53      	ldr	r3, [pc, #332]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c76:	4a52      	ldr	r2, [pc, #328]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003c78:	f023 0304 	bic.w	r3, r3, #4
 8003c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d016      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c88:	f7fe fb32 	bl	80022f0 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c90:	f7fe fb2e 	bl	80022f0 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e140      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca6:	4b46      	ldr	r3, [pc, #280]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ed      	beq.n	8003c90 <HAL_RCC_OscConfig+0x388>
 8003cb4:	e015      	b.n	8003ce2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb6:	f7fe fb1b 	bl	80022f0 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbe:	f7fe fb17 	bl	80022f0 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e129      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd4:	4b3a      	ldr	r3, [pc, #232]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1ed      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ce2:	7ffb      	ldrb	r3, [r7, #31]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce8:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	4a34      	ldr	r2, [pc, #208]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d03c      	beq.n	8003d7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01c      	beq.n	8003d42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d08:	4b2d      	ldr	r3, [pc, #180]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d0e:	4a2c      	ldr	r2, [pc, #176]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d18:	f7fe faea 	bl	80022f0 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d20:	f7fe fae6 	bl	80022f0 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e0fa      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d32:	4b23      	ldr	r3, [pc, #140]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0ef      	beq.n	8003d20 <HAL_RCC_OscConfig+0x418>
 8003d40:	e01b      	b.n	8003d7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d42:	4b1f      	ldr	r3, [pc, #124]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d48:	4a1d      	ldr	r2, [pc, #116]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d52:	f7fe facd 	bl	80022f0 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d5a:	f7fe fac9 	bl	80022f0 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e0dd      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d6c:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1ef      	bne.n	8003d5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80d1 	beq.w	8003f26 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d84:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b0c      	cmp	r3, #12
 8003d8e:	f000 808b 	beq.w	8003ea8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d15e      	bne.n	8003e58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a08      	ldr	r2, [pc, #32]	; (8003dc0 <HAL_RCC_OscConfig+0x4b8>)
 8003da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7fe faa3 	bl	80022f0 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dac:	e00c      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dae:	f7fe fa9f 	bl	80022f0 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d905      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e0b3      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc8:	4b59      	ldr	r3, [pc, #356]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1ec      	bne.n	8003dae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd4:	4b56      	ldr	r3, [pc, #344]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	4b56      	ldr	r3, [pc, #344]	; (8003f34 <HAL_RCC_OscConfig+0x62c>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6a11      	ldr	r1, [r2, #32]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003de4:	3a01      	subs	r2, #1
 8003de6:	0112      	lsls	r2, r2, #4
 8003de8:	4311      	orrs	r1, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003dee:	0212      	lsls	r2, r2, #8
 8003df0:	4311      	orrs	r1, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003df6:	0852      	lsrs	r2, r2, #1
 8003df8:	3a01      	subs	r2, #1
 8003dfa:	0552      	lsls	r2, r2, #21
 8003dfc:	4311      	orrs	r1, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e02:	0852      	lsrs	r2, r2, #1
 8003e04:	3a01      	subs	r2, #1
 8003e06:	0652      	lsls	r2, r2, #25
 8003e08:	4311      	orrs	r1, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e0e:	06d2      	lsls	r2, r2, #27
 8003e10:	430a      	orrs	r2, r1
 8003e12:	4947      	ldr	r1, [pc, #284]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e18:	4b45      	ldr	r3, [pc, #276]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a44      	ldr	r2, [pc, #272]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e24:	4b42      	ldr	r3, [pc, #264]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a41      	ldr	r2, [pc, #260]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fe fa5e 	bl	80022f0 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fe fa5a 	bl	80022f0 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e06e      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4a:	4b39      	ldr	r3, [pc, #228]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x530>
 8003e56:	e066      	b.n	8003f26 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e58:	4b35      	ldr	r3, [pc, #212]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a34      	ldr	r2, [pc, #208]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e62:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e64:	4b32      	ldr	r3, [pc, #200]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4a31      	ldr	r2, [pc, #196]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003e6a:	f023 0303 	bic.w	r3, r3, #3
 8003e6e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003e70:	4b2f      	ldr	r3, [pc, #188]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a2e      	ldr	r2, [pc, #184]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003e76:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fe fa36 	bl	80022f0 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fe fa32 	bl	80022f0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e046      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9a:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x580>
 8003ea6:	e03e      	b.n	8003f26 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e039      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003eb4:	4b1e      	ldr	r3, [pc, #120]	; (8003f30 <HAL_RCC_OscConfig+0x628>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f003 0203 	and.w	r2, r3, #3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d12c      	bne.n	8003f22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d123      	bne.n	8003f22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d11b      	bne.n	8003f22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d113      	bne.n	8003f22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	3b01      	subs	r3, #1
 8003f08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d109      	bne.n	8003f22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f18:	085b      	lsrs	r3, r3, #1
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d001      	beq.n	8003f26 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3720      	adds	r7, #32
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40021000 	.word	0x40021000
 8003f34:	019f800c 	.word	0x019f800c

08003f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e11e      	b.n	800418e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f50:	4b91      	ldr	r3, [pc, #580]	; (8004198 <HAL_RCC_ClockConfig+0x260>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d910      	bls.n	8003f80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	4b8e      	ldr	r3, [pc, #568]	; (8004198 <HAL_RCC_ClockConfig+0x260>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 020f 	bic.w	r2, r3, #15
 8003f66:	498c      	ldr	r1, [pc, #560]	; (8004198 <HAL_RCC_ClockConfig+0x260>)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b8a      	ldr	r3, [pc, #552]	; (8004198 <HAL_RCC_ClockConfig+0x260>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e106      	b.n	800418e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d073      	beq.n	8004074 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d129      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f94:	4b81      	ldr	r3, [pc, #516]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0f4      	b.n	800418e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003fa4:	f000 f972 	bl	800428c <RCC_GetSysClockFreqFromPLLSource>
 8003fa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4a7c      	ldr	r2, [pc, #496]	; (80041a0 <HAL_RCC_ClockConfig+0x268>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d93f      	bls.n	8004032 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fb2:	4b7a      	ldr	r3, [pc, #488]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d033      	beq.n	8004032 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d12f      	bne.n	8004032 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fd2:	4b72      	ldr	r3, [pc, #456]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fda:	4a70      	ldr	r2, [pc, #448]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 8003fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e024      	b.n	8004032 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d107      	bne.n	8004000 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff0:	4b6a      	ldr	r3, [pc, #424]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0c6      	b.n	800418e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004000:	4b66      	ldr	r3, [pc, #408]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0be      	b.n	800418e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004010:	f000 f8ce 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 8004014:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4a61      	ldr	r2, [pc, #388]	; (80041a0 <HAL_RCC_ClockConfig+0x268>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d909      	bls.n	8004032 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800401e:	4b5f      	ldr	r3, [pc, #380]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004026:	4a5d      	ldr	r2, [pc, #372]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 8004028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800402c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004032:	4b5a      	ldr	r3, [pc, #360]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f023 0203 	bic.w	r2, r3, #3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4957      	ldr	r1, [pc, #348]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 8004040:	4313      	orrs	r3, r2
 8004042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004044:	f7fe f954 	bl	80022f0 <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404a:	e00a      	b.n	8004062 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404c:	f7fe f950 	bl	80022f0 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	; 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e095      	b.n	800418e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004062:	4b4e      	ldr	r3, [pc, #312]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 020c 	and.w	r2, r3, #12
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	429a      	cmp	r2, r3
 8004072:	d1eb      	bne.n	800404c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d023      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800408c:	4b43      	ldr	r3, [pc, #268]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4a42      	ldr	r2, [pc, #264]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 8004092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004096:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80040a4:	4b3d      	ldr	r3, [pc, #244]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80040ac:	4a3b      	ldr	r2, [pc, #236]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 80040ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b4:	4b39      	ldr	r3, [pc, #228]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4936      	ldr	r1, [pc, #216]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
 80040c6:	e008      	b.n	80040da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2b80      	cmp	r3, #128	; 0x80
 80040cc:	d105      	bne.n	80040da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040ce:	4b33      	ldr	r3, [pc, #204]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	4a32      	ldr	r2, [pc, #200]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 80040d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040da:	4b2f      	ldr	r3, [pc, #188]	; (8004198 <HAL_RCC_ClockConfig+0x260>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d21d      	bcs.n	8004124 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e8:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <HAL_RCC_ClockConfig+0x260>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 020f 	bic.w	r2, r3, #15
 80040f0:	4929      	ldr	r1, [pc, #164]	; (8004198 <HAL_RCC_ClockConfig+0x260>)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040f8:	f7fe f8fa 	bl	80022f0 <HAL_GetTick>
 80040fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fe:	e00a      	b.n	8004116 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004100:	f7fe f8f6 	bl	80022f0 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	f241 3288 	movw	r2, #5000	; 0x1388
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e03b      	b.n	800418e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b20      	ldr	r3, [pc, #128]	; (8004198 <HAL_RCC_ClockConfig+0x260>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d1ed      	bne.n	8004100 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004130:	4b1a      	ldr	r3, [pc, #104]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4917      	ldr	r1, [pc, #92]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d009      	beq.n	8004162 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	490f      	ldr	r1, [pc, #60]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004162:	f000 f825 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 8004166:	4602      	mov	r2, r0
 8004168:	4b0c      	ldr	r3, [pc, #48]	; (800419c <HAL_RCC_ClockConfig+0x264>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	490c      	ldr	r1, [pc, #48]	; (80041a4 <HAL_RCC_ClockConfig+0x26c>)
 8004174:	5ccb      	ldrb	r3, [r1, r3]
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	fa22 f303 	lsr.w	r3, r2, r3
 800417e:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <HAL_RCC_ClockConfig+0x270>)
 8004180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <HAL_RCC_ClockConfig+0x274>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe f866 	bl	8002258 <HAL_InitTick>
 800418c:	4603      	mov	r3, r0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40022000 	.word	0x40022000
 800419c:	40021000 	.word	0x40021000
 80041a0:	04c4b400 	.word	0x04c4b400
 80041a4:	0800bf00 	.word	0x0800bf00
 80041a8:	20000010 	.word	0x20000010
 80041ac:	20000014 	.word	0x20000014

080041b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041b6:	4b2c      	ldr	r3, [pc, #176]	; (8004268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d102      	bne.n	80041c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041c2:	4b2a      	ldr	r3, [pc, #168]	; (800426c <HAL_RCC_GetSysClockFreq+0xbc>)
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	e047      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80041c8:	4b27      	ldr	r3, [pc, #156]	; (8004268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d102      	bne.n	80041da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041d4:	4b26      	ldr	r3, [pc, #152]	; (8004270 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	e03e      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80041da:	4b23      	ldr	r3, [pc, #140]	; (8004268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	2b0c      	cmp	r3, #12
 80041e4:	d136      	bne.n	8004254 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041e6:	4b20      	ldr	r3, [pc, #128]	; (8004268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041f0:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	3301      	adds	r3, #1
 80041fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b03      	cmp	r3, #3
 8004202:	d10c      	bne.n	800421e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004204:	4a1a      	ldr	r2, [pc, #104]	; (8004270 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	4a16      	ldr	r2, [pc, #88]	; (8004268 <HAL_RCC_GetSysClockFreq+0xb8>)
 800420e:	68d2      	ldr	r2, [r2, #12]
 8004210:	0a12      	lsrs	r2, r2, #8
 8004212:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	617b      	str	r3, [r7, #20]
      break;
 800421c:	e00c      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800421e:	4a13      	ldr	r2, [pc, #76]	; (800426c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	fbb2 f3f3 	udiv	r3, r2, r3
 8004226:	4a10      	ldr	r2, [pc, #64]	; (8004268 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004228:	68d2      	ldr	r2, [r2, #12]
 800422a:	0a12      	lsrs	r2, r2, #8
 800422c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]
      break;
 8004236:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCC_GetSysClockFreq+0xb8>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	0e5b      	lsrs	r3, r3, #25
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	3301      	adds	r3, #1
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	e001      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004258:	693b      	ldr	r3, [r7, #16]
}
 800425a:	4618      	mov	r0, r3
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000
 800426c:	00f42400 	.word	0x00f42400
 8004270:	017d7840 	.word	0x017d7840

08004274 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004278:	4b03      	ldr	r3, [pc, #12]	; (8004288 <HAL_RCC_GetHCLKFreq+0x14>)
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	4618      	mov	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000010 	.word	0x20000010

0800428c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004292:	4b1e      	ldr	r3, [pc, #120]	; (800430c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800429c:	4b1b      	ldr	r3, [pc, #108]	; (800430c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	3301      	adds	r3, #1
 80042a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d10c      	bne.n	80042ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042b0:	4a17      	ldr	r2, [pc, #92]	; (8004310 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b8:	4a14      	ldr	r2, [pc, #80]	; (800430c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042ba:	68d2      	ldr	r2, [r2, #12]
 80042bc:	0a12      	lsrs	r2, r2, #8
 80042be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	617b      	str	r3, [r7, #20]
    break;
 80042c8:	e00c      	b.n	80042e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042ca:	4a12      	ldr	r2, [pc, #72]	; (8004314 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d2:	4a0e      	ldr	r2, [pc, #56]	; (800430c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042d4:	68d2      	ldr	r2, [r2, #12]
 80042d6:	0a12      	lsrs	r2, r2, #8
 80042d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042dc:	fb02 f303 	mul.w	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]
    break;
 80042e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042e4:	4b09      	ldr	r3, [pc, #36]	; (800430c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	0e5b      	lsrs	r3, r3, #25
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	3301      	adds	r3, #1
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80042fe:	687b      	ldr	r3, [r7, #4]
}
 8004300:	4618      	mov	r0, r3
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	40021000 	.word	0x40021000
 8004310:	017d7840 	.word	0x017d7840
 8004314:	00f42400 	.word	0x00f42400

08004318 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004320:	2300      	movs	r3, #0
 8004322:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004324:	2300      	movs	r3, #0
 8004326:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8098 	beq.w	8004466 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433a:	4b43      	ldr	r3, [pc, #268]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800433c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10d      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	4b40      	ldr	r3, [pc, #256]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434a:	4a3f      	ldr	r2, [pc, #252]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800434c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004350:	6593      	str	r3, [r2, #88]	; 0x58
 8004352:	4b3d      	ldr	r3, [pc, #244]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800435e:	2301      	movs	r3, #1
 8004360:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004362:	4b3a      	ldr	r3, [pc, #232]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a39      	ldr	r2, [pc, #228]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800436e:	f7fd ffbf 	bl	80022f0 <HAL_GetTick>
 8004372:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004374:	e009      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004376:	f7fd ffbb 	bl	80022f0 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d902      	bls.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	74fb      	strb	r3, [r7, #19]
        break;
 8004388:	e005      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800438a:	4b30      	ldr	r3, [pc, #192]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0ef      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004396:	7cfb      	ldrb	r3, [r7, #19]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d159      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800439c:	4b2a      	ldr	r3, [pc, #168]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d01e      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d019      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043b8:	4b23      	ldr	r3, [pc, #140]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043c4:	4b20      	ldr	r3, [pc, #128]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ca:	4a1f      	ldr	r2, [pc, #124]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043d4:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043da:	4a1b      	ldr	r2, [pc, #108]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043e4:	4a18      	ldr	r2, [pc, #96]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d016      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f6:	f7fd ff7b 	bl	80022f0 <HAL_GetTick>
 80043fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043fc:	e00b      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fe:	f7fd ff77 	bl	80022f0 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	f241 3288 	movw	r2, #5000	; 0x1388
 800440c:	4293      	cmp	r3, r2
 800440e:	d902      	bls.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	74fb      	strb	r3, [r7, #19]
            break;
 8004414:	e006      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004416:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0ec      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004424:	7cfb      	ldrb	r3, [r7, #19]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800442a:	4b07      	ldr	r3, [pc, #28]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	4903      	ldr	r1, [pc, #12]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004440:	e008      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004442:	7cfb      	ldrb	r3, [r7, #19]
 8004444:	74bb      	strb	r3, [r7, #18]
 8004446:	e005      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004448:	40021000 	.word	0x40021000
 800444c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004450:	7cfb      	ldrb	r3, [r7, #19]
 8004452:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004454:	7c7b      	ldrb	r3, [r7, #17]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d105      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445a:	4ba6      	ldr	r3, [pc, #664]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	4aa5      	ldr	r2, [pc, #660]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004464:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004472:	4ba0      	ldr	r3, [pc, #640]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004478:	f023 0203 	bic.w	r2, r3, #3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	499c      	ldr	r1, [pc, #624]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004494:	4b97      	ldr	r3, [pc, #604]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	f023 020c 	bic.w	r2, r3, #12
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	4994      	ldr	r1, [pc, #592]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044b6:	4b8f      	ldr	r3, [pc, #572]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	498b      	ldr	r1, [pc, #556]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044d8:	4b86      	ldr	r3, [pc, #536]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	4983      	ldr	r1, [pc, #524]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044fa:	4b7e      	ldr	r3, [pc, #504]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	497a      	ldr	r1, [pc, #488]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800451c:	4b75      	ldr	r3, [pc, #468]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004522:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	4972      	ldr	r1, [pc, #456]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800453e:	4b6d      	ldr	r3, [pc, #436]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	4969      	ldr	r1, [pc, #420]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004560:	4b64      	ldr	r3, [pc, #400]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	4961      	ldr	r1, [pc, #388]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004582:	4b5c      	ldr	r3, [pc, #368]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	4958      	ldr	r1, [pc, #352]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d015      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045a4:	4b53      	ldr	r3, [pc, #332]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	4950      	ldr	r1, [pc, #320]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c2:	d105      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c4:	4b4b      	ldr	r3, [pc, #300]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4a4a      	ldr	r2, [pc, #296]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d015      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045dc:	4b45      	ldr	r3, [pc, #276]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	4942      	ldr	r1, [pc, #264]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045fa:	d105      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045fc:	4b3d      	ldr	r3, [pc, #244]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4a3c      	ldr	r2, [pc, #240]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004606:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d015      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004614:	4b37      	ldr	r3, [pc, #220]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	4934      	ldr	r1, [pc, #208]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004632:	d105      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004634:	4b2f      	ldr	r3, [pc, #188]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	4a2e      	ldr	r2, [pc, #184]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800463a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800463e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d015      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800464c:	4b29      	ldr	r3, [pc, #164]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004652:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465a:	4926      	ldr	r1, [pc, #152]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800466a:	d105      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800466c:	4b21      	ldr	r3, [pc, #132]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4a20      	ldr	r2, [pc, #128]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004676:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d015      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004684:	4b1b      	ldr	r3, [pc, #108]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	4918      	ldr	r1, [pc, #96]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046a2:	d105      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a4:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4a12      	ldr	r2, [pc, #72]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d015      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80046bc:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ca:	490a      	ldr	r1, [pc, #40]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046da:	d105      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80046dc:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a04      	ldr	r2, [pc, #16]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80046e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000

080046f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e09d      	b.n	8004846 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	d108      	bne.n	8004724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471a:	d009      	beq.n	8004730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	61da      	str	r2, [r3, #28]
 8004722:	e005      	b.n	8004730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fc ff94 	bl	8001678 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004766:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004770:	d902      	bls.n	8004778 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	e002      	b.n	800477e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800477c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004786:	d007      	beq.n	8004798 <HAL_SPI_Init+0xa0>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004790:	d002      	beq.n	8004798 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047da:	ea42 0103 	orr.w	r1, r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	0c1b      	lsrs	r3, r3, #16
 80047f4:	f003 0204 	and.w	r2, r3, #4
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004814:	ea42 0103 	orr.w	r1, r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004834:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b088      	sub	sp, #32
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	603b      	str	r3, [r7, #0]
 800485a:	4613      	mov	r3, r2
 800485c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_SPI_Transmit+0x22>
 800486c:	2302      	movs	r3, #2
 800486e:	e158      	b.n	8004b22 <HAL_SPI_Transmit+0x2d4>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004878:	f7fd fd3a 	bl	80022f0 <HAL_GetTick>
 800487c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b01      	cmp	r3, #1
 800488c:	d002      	beq.n	8004894 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800488e:	2302      	movs	r3, #2
 8004890:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004892:	e13d      	b.n	8004b10 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_SPI_Transmit+0x52>
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d102      	bne.n	80048a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048a4:	e134      	b.n	8004b10 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2203      	movs	r2, #3
 80048aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	88fa      	ldrh	r2, [r7, #6]
 80048be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	88fa      	ldrh	r2, [r7, #6]
 80048c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f0:	d10f      	bne.n	8004912 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004900:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004910:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d007      	beq.n	8004930 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800492e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004938:	d94b      	bls.n	80049d2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <HAL_SPI_Transmit+0xfa>
 8004942:	8afb      	ldrh	r3, [r7, #22]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d13e      	bne.n	80049c6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	881a      	ldrh	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	1c9a      	adds	r2, r3, #2
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800496c:	e02b      	b.n	80049c6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b02      	cmp	r3, #2
 800497a:	d112      	bne.n	80049a2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	881a      	ldrh	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	1c9a      	adds	r2, r3, #2
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049a0:	e011      	b.n	80049c6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049a2:	f7fd fca5 	bl	80022f0 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d803      	bhi.n	80049ba <HAL_SPI_Transmit+0x16c>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d102      	bne.n	80049c0 <HAL_SPI_Transmit+0x172>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049c4:	e0a4      	b.n	8004b10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1ce      	bne.n	800496e <HAL_SPI_Transmit+0x120>
 80049d0:	e07c      	b.n	8004acc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_SPI_Transmit+0x192>
 80049da:	8afb      	ldrh	r3, [r7, #22]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d170      	bne.n	8004ac2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d912      	bls.n	8004a10 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	881a      	ldrh	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	1c9a      	adds	r2, r3, #2
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b02      	subs	r3, #2
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a0e:	e058      	b.n	8004ac2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	7812      	ldrb	r2, [r2, #0]
 8004a1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004a36:	e044      	b.n	8004ac2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d12b      	bne.n	8004a9e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d912      	bls.n	8004a76 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	881a      	ldrh	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	1c9a      	adds	r2, r3, #2
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b02      	subs	r3, #2
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a74:	e025      	b.n	8004ac2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	7812      	ldrb	r2, [r2, #0]
 8004a82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a9c:	e011      	b.n	8004ac2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a9e:	f7fd fc27 	bl	80022f0 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d803      	bhi.n	8004ab6 <HAL_SPI_Transmit+0x268>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d102      	bne.n	8004abc <HAL_SPI_Transmit+0x26e>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ac0:	e026      	b.n	8004b10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1b5      	bne.n	8004a38 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	6839      	ldr	r1, [r7, #0]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fce3 	bl	800549c <SPI_EndRxTxTransaction>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aea:	2300      	movs	r3, #0
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e000      	b.n	8004b10 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004b0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b088      	sub	sp, #32
 8004b2e:	af02      	add	r7, sp, #8
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b46:	d112      	bne.n	8004b6e <HAL_SPI_Receive+0x44>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10e      	bne.n	8004b6e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2204      	movs	r2, #4
 8004b54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b58:	88fa      	ldrh	r2, [r7, #6]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f910 	bl	8004d8a <HAL_SPI_TransmitReceive>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	e109      	b.n	8004d82 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_SPI_Receive+0x52>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e102      	b.n	8004d82 <HAL_SPI_Receive+0x258>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b84:	f7fd fbb4 	bl	80022f0 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
 8004b98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b9a:	e0e9      	b.n	8004d70 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_SPI_Receive+0x7e>
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d102      	bne.n	8004bae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bac:	e0e0      	b.n	8004d70 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	88fa      	ldrh	r2, [r7, #6]
 8004bc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	88fa      	ldrh	r2, [r7, #6]
 8004bce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bf8:	d908      	bls.n	8004c0c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	e007      	b.n	8004c1c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c1a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c24:	d10f      	bne.n	8004c46 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b40      	cmp	r3, #64	; 0x40
 8004c52:	d007      	beq.n	8004c64 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c6c:	d867      	bhi.n	8004d3e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c6e:	e030      	b.n	8004cd2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d117      	bne.n	8004cae <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f103 020c 	add.w	r2, r3, #12
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	7812      	ldrb	r2, [r2, #0]
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004cac:	e011      	b.n	8004cd2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cae:	f7fd fb1f 	bl	80022f0 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d803      	bhi.n	8004cc6 <HAL_SPI_Receive+0x19c>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d102      	bne.n	8004ccc <HAL_SPI_Receive+0x1a2>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cd0:	e04e      	b.n	8004d70 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1c8      	bne.n	8004c70 <HAL_SPI_Receive+0x146>
 8004cde:	e034      	b.n	8004d4a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d115      	bne.n	8004d1a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	b292      	uxth	r2, r2
 8004cfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	1c9a      	adds	r2, r3, #2
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004d18:	e011      	b.n	8004d3e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d1a:	f7fd fae9 	bl	80022f0 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d803      	bhi.n	8004d32 <HAL_SPI_Receive+0x208>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d30:	d102      	bne.n	8004d38 <HAL_SPI_Receive+0x20e>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d3c:	e018      	b.n	8004d70 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1ca      	bne.n	8004ce0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	6839      	ldr	r1, [r7, #0]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 fb4c 	bl	80053ec <SPI_EndRxTransaction>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	75fb      	strb	r3, [r7, #23]
 8004d6c:	e000      	b.n	8004d70 <HAL_SPI_Receive+0x246>
  }

error :
 8004d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b08a      	sub	sp, #40	; 0x28
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x26>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e1fb      	b.n	80051a8 <HAL_SPI_TransmitReceive+0x41e>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004db8:	f7fd fa9a 	bl	80022f0 <HAL_GetTick>
 8004dbc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dc4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004dcc:	887b      	ldrh	r3, [r7, #2]
 8004dce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004dd0:	887b      	ldrh	r3, [r7, #2]
 8004dd2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004dd4:	7efb      	ldrb	r3, [r7, #27]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d00e      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x6e>
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de0:	d106      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x66>
 8004dea:	7efb      	ldrb	r3, [r7, #27]
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d003      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004df0:	2302      	movs	r3, #2
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004df6:	e1cd      	b.n	8005194 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <HAL_SPI_TransmitReceive+0x80>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_SPI_TransmitReceive+0x80>
 8004e04:	887b      	ldrh	r3, [r7, #2]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d103      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e10:	e1c0      	b.n	8005194 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d003      	beq.n	8004e26 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2205      	movs	r2, #5
 8004e22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	887a      	ldrh	r2, [r7, #2]
 8004e36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	887a      	ldrh	r2, [r7, #2]
 8004e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	887a      	ldrh	r2, [r7, #2]
 8004e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	887a      	ldrh	r2, [r7, #2]
 8004e52:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e68:	d802      	bhi.n	8004e70 <HAL_SPI_TransmitReceive+0xe6>
 8004e6a:	8a3b      	ldrh	r3, [r7, #16]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d908      	bls.n	8004e82 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e7e:	605a      	str	r2, [r3, #4]
 8004e80:	e007      	b.n	8004e92 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e90:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d007      	beq.n	8004eb0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eb8:	d97c      	bls.n	8004fb4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_SPI_TransmitReceive+0x13e>
 8004ec2:	8a7b      	ldrh	r3, [r7, #18]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d169      	bne.n	8004f9c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	881a      	ldrh	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	1c9a      	adds	r2, r3, #2
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eec:	e056      	b.n	8004f9c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d11b      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x1aa>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d016      	beq.n	8004f34 <HAL_SPI_TransmitReceive+0x1aa>
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d113      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	881a      	ldrh	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1c:	1c9a      	adds	r2, r3, #2
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d11c      	bne.n	8004f7c <HAL_SPI_TransmitReceive+0x1f2>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	b292      	uxth	r2, r2
 8004f5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	1c9a      	adds	r2, r3, #2
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f7c:	f7fd f9b8 	bl	80022f0 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d807      	bhi.n	8004f9c <HAL_SPI_TransmitReceive+0x212>
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d003      	beq.n	8004f9c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f9a:	e0fb      	b.n	8005194 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1a3      	bne.n	8004eee <HAL_SPI_TransmitReceive+0x164>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d19d      	bne.n	8004eee <HAL_SPI_TransmitReceive+0x164>
 8004fb2:	e0df      	b.n	8005174 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_SPI_TransmitReceive+0x23a>
 8004fbc:	8a7b      	ldrh	r3, [r7, #18]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	f040 80cb 	bne.w	800515a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d912      	bls.n	8004ff4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	881a      	ldrh	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	1c9a      	adds	r2, r3, #2
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b02      	subs	r3, #2
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ff2:	e0b2      	b.n	800515a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	330c      	adds	r3, #12
 8004ffe:	7812      	ldrb	r2, [r2, #0]
 8005000:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005010:	b29b      	uxth	r3, r3
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800501a:	e09e      	b.n	800515a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b02      	cmp	r3, #2
 8005028:	d134      	bne.n	8005094 <HAL_SPI_TransmitReceive+0x30a>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d02f      	beq.n	8005094 <HAL_SPI_TransmitReceive+0x30a>
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	2b01      	cmp	r3, #1
 8005038:	d12c      	bne.n	8005094 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b01      	cmp	r3, #1
 8005042:	d912      	bls.n	800506a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	881a      	ldrh	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	1c9a      	adds	r2, r3, #2
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b02      	subs	r3, #2
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005068:	e012      	b.n	8005090 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	7812      	ldrb	r2, [r2, #0]
 8005076:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d148      	bne.n	8005134 <HAL_SPI_TransmitReceive+0x3aa>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d042      	beq.n	8005134 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d923      	bls.n	8005102 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	b292      	uxth	r2, r2
 80050c6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	1c9a      	adds	r2, r3, #2
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b02      	subs	r3, #2
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d81f      	bhi.n	8005130 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050fe:	605a      	str	r2, [r3, #4]
 8005100:	e016      	b.n	8005130 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f103 020c 	add.w	r2, r3, #12
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	7812      	ldrb	r2, [r2, #0]
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005130:	2301      	movs	r3, #1
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005134:	f7fd f8dc 	bl	80022f0 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005140:	429a      	cmp	r2, r3
 8005142:	d803      	bhi.n	800514c <HAL_SPI_TransmitReceive+0x3c2>
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	d102      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x3c8>
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	2b00      	cmp	r3, #0
 8005150:	d103      	bne.n	800515a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005158:	e01c      	b.n	8005194 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	f47f af5b 	bne.w	800501c <HAL_SPI_TransmitReceive+0x292>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	f47f af54 	bne.w	800501c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f98f 	bl	800549c <SPI_EndRxTxTransaction>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d006      	beq.n	8005192 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	661a      	str	r2, [r3, #96]	; 0x60
 8005190:	e000      	b.n	8005194 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005192:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3728      	adds	r7, #40	; 0x28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	4613      	mov	r3, r2
 80051be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051c0:	f7fd f896 	bl	80022f0 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	4413      	add	r3, r2
 80051ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051d0:	f7fd f88e 	bl	80022f0 <HAL_GetTick>
 80051d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051d6:	4b39      	ldr	r3, [pc, #228]	; (80052bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	015b      	lsls	r3, r3, #5
 80051dc:	0d1b      	lsrs	r3, r3, #20
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	fb02 f303 	mul.w	r3, r2, r3
 80051e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051e6:	e054      	b.n	8005292 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d050      	beq.n	8005292 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051f0:	f7fd f87e 	bl	80022f0 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d902      	bls.n	8005206 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d13d      	bne.n	8005282 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005214:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800521e:	d111      	bne.n	8005244 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005228:	d004      	beq.n	8005234 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005232:	d107      	bne.n	8005244 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005242:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524c:	d10f      	bne.n	800526e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800526c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e017      	b.n	80052b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	3b01      	subs	r3, #1
 8005290:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4013      	ands	r3, r2
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	429a      	cmp	r2, r3
 80052a0:	bf0c      	ite	eq
 80052a2:	2301      	moveq	r3, #1
 80052a4:	2300      	movne	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	461a      	mov	r2, r3
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d19b      	bne.n	80051e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000010 	.word	0x20000010

080052c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08a      	sub	sp, #40	; 0x28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80052d2:	f7fd f80d 	bl	80022f0 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	1a9b      	subs	r3, r3, r2
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	4413      	add	r3, r2
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80052e2:	f7fd f805 	bl	80022f0 <HAL_GetTick>
 80052e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	330c      	adds	r3, #12
 80052ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80052f0:	4b3d      	ldr	r3, [pc, #244]	; (80053e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	00da      	lsls	r2, r3, #3
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	0d1b      	lsrs	r3, r3, #20
 8005300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005302:	fb02 f303 	mul.w	r3, r2, r3
 8005306:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005308:	e060      	b.n	80053cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005310:	d107      	bne.n	8005322 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d104      	bne.n	8005322 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005320:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d050      	beq.n	80053cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800532a:	f7fc ffe1 	bl	80022f0 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005336:	429a      	cmp	r2, r3
 8005338:	d902      	bls.n	8005340 <SPI_WaitFifoStateUntilTimeout+0x80>
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	d13d      	bne.n	80053bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800534e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005358:	d111      	bne.n	800537e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005362:	d004      	beq.n	800536e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536c:	d107      	bne.n	800537e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800537c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005386:	d10f      	bne.n	80053a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e010      	b.n	80053de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4013      	ands	r3, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d196      	bne.n	800530a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3728      	adds	r7, #40	; 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000010 	.word	0x20000010

080053ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005400:	d111      	bne.n	8005426 <SPI_EndRxTransaction+0x3a>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540a:	d004      	beq.n	8005416 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005414:	d107      	bne.n	8005426 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005424:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2200      	movs	r2, #0
 800542e:	2180      	movs	r1, #128	; 0x80
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f7ff febd 	bl	80051b0 <SPI_WaitFlagStateUntilTimeout>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d007      	beq.n	800544c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005440:	f043 0220 	orr.w	r2, r3, #32
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e023      	b.n	8005494 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005454:	d11d      	bne.n	8005492 <SPI_EndRxTransaction+0xa6>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800545e:	d004      	beq.n	800546a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005468:	d113      	bne.n	8005492 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2200      	movs	r2, #0
 8005472:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f7ff ff22 	bl	80052c0 <SPI_WaitFifoStateUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005486:	f043 0220 	orr.w	r2, r3, #32
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e000      	b.n	8005494 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff ff03 	bl	80052c0 <SPI_WaitFifoStateUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c4:	f043 0220 	orr.w	r2, r3, #32
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e027      	b.n	8005520 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2200      	movs	r2, #0
 80054d8:	2180      	movs	r1, #128	; 0x80
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f7ff fe68 	bl	80051b0 <SPI_WaitFlagStateUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d007      	beq.n	80054f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ea:	f043 0220 	orr.w	r2, r3, #32
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e014      	b.n	8005520 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f7ff fedc 	bl	80052c0 <SPI_WaitFifoStateUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d007      	beq.n	800551e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005512:	f043 0220 	orr.w	r2, r3, #32
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e000      	b.n	8005520 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e049      	b.n	80055ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fc fde0 	bl	8002114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3304      	adds	r3, #4
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f000 fb9c 	bl	8005ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d001      	beq.n	80055f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e04a      	b.n	8005686 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a21      	ldr	r2, [pc, #132]	; (8005694 <HAL_TIM_Base_Start_IT+0xbc>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d018      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x6c>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561a:	d013      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x6c>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a1d      	ldr	r2, [pc, #116]	; (8005698 <HAL_TIM_Base_Start_IT+0xc0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00e      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x6c>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1c      	ldr	r2, [pc, #112]	; (800569c <HAL_TIM_Base_Start_IT+0xc4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d009      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x6c>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1a      	ldr	r2, [pc, #104]	; (80056a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d004      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x6c>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a19      	ldr	r2, [pc, #100]	; (80056a4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d115      	bne.n	8005670 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	4b17      	ldr	r3, [pc, #92]	; (80056a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800564c:	4013      	ands	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2b06      	cmp	r3, #6
 8005654:	d015      	beq.n	8005682 <HAL_TIM_Base_Start_IT+0xaa>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800565c:	d011      	beq.n	8005682 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f042 0201 	orr.w	r2, r2, #1
 800566c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	e008      	b.n	8005682 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	e000      	b.n	8005684 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005682:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40013400 	.word	0x40013400
 80056a4:	40014000 	.word	0x40014000
 80056a8:	00010007 	.word	0x00010007

080056ac <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e041      	b.n	8005744 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f839 	bl	800574c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2202      	movs	r2, #2
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3304      	adds	r3, #4
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f000 fad9 	bl	8005ca4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0208 	bic.w	r2, r2, #8
 8005700:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6819      	ldr	r1, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b02      	cmp	r3, #2
 8005774:	d122      	bne.n	80057bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b02      	cmp	r3, #2
 8005782:	d11b      	bne.n	80057bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0202 	mvn.w	r2, #2
 800578c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fa60 	bl	8005c68 <HAL_TIM_IC_CaptureCallback>
 80057a8:	e005      	b.n	80057b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fa52 	bl	8005c54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fa63 	bl	8005c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d122      	bne.n	8005810 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d11b      	bne.n	8005810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0204 	mvn.w	r2, #4
 80057e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2202      	movs	r2, #2
 80057e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fa36 	bl	8005c68 <HAL_TIM_IC_CaptureCallback>
 80057fc:	e005      	b.n	800580a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fa28 	bl	8005c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fa39 	bl	8005c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b08      	cmp	r3, #8
 800581c:	d122      	bne.n	8005864 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b08      	cmp	r3, #8
 800582a:	d11b      	bne.n	8005864 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f06f 0208 	mvn.w	r2, #8
 8005834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2204      	movs	r2, #4
 800583a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fa0c 	bl	8005c68 <HAL_TIM_IC_CaptureCallback>
 8005850:	e005      	b.n	800585e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f9fe 	bl	8005c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fa0f 	bl	8005c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	2b10      	cmp	r3, #16
 8005870:	d122      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b10      	cmp	r3, #16
 800587e:	d11b      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0210 	mvn.w	r2, #16
 8005888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2208      	movs	r2, #8
 800588e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f9e2 	bl	8005c68 <HAL_TIM_IC_CaptureCallback>
 80058a4:	e005      	b.n	80058b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f9d4 	bl	8005c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f9e5 	bl	8005c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d10e      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d107      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0201 	mvn.w	r2, #1
 80058dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fb fde3 	bl	80014aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ee:	2b80      	cmp	r3, #128	; 0x80
 80058f0:	d10e      	bne.n	8005910 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fc:	2b80      	cmp	r3, #128	; 0x80
 80058fe:	d107      	bne.n	8005910 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fb82 	bl	8006014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800591e:	d10e      	bne.n	800593e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592a:	2b80      	cmp	r3, #128	; 0x80
 800592c:	d107      	bne.n	800593e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fb75 	bl	8006028 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b40      	cmp	r3, #64	; 0x40
 800594a:	d10e      	bne.n	800596a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	2b40      	cmp	r3, #64	; 0x40
 8005958:	d107      	bne.n	800596a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f993 	bl	8005c90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b20      	cmp	r3, #32
 8005976:	d10e      	bne.n	8005996 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b20      	cmp	r3, #32
 8005984:	d107      	bne.n	8005996 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f06f 0220 	mvn.w	r2, #32
 800598e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fb35 	bl	8006000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059a4:	d10f      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059b4:	d107      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80059be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fb3b 	bl	800603c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059d4:	d10f      	bne.n	80059f6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059e4:	d107      	bne.n	80059f6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80059ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fb2d 	bl	8006050 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a04:	d10f      	bne.n	8005a26 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a14:	d107      	bne.n	8005a26 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fb1f 	bl	8006064 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a34:	d10f      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a44:	d107      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fb11 	bl	8006078 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_TIM_ConfigClockSource+0x1c>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e0de      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x1da>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005a9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a63      	ldr	r2, [pc, #396]	; (8005c44 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	f000 80a9 	beq.w	8005c0e <HAL_TIM_ConfigClockSource+0x1ae>
 8005abc:	4a61      	ldr	r2, [pc, #388]	; (8005c44 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	f200 80ae 	bhi.w	8005c20 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ac4:	4a60      	ldr	r2, [pc, #384]	; (8005c48 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	f000 80a1 	beq.w	8005c0e <HAL_TIM_ConfigClockSource+0x1ae>
 8005acc:	4a5e      	ldr	r2, [pc, #376]	; (8005c48 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	f200 80a6 	bhi.w	8005c20 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ad4:	4a5d      	ldr	r2, [pc, #372]	; (8005c4c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	f000 8099 	beq.w	8005c0e <HAL_TIM_ConfigClockSource+0x1ae>
 8005adc:	4a5b      	ldr	r2, [pc, #364]	; (8005c4c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	f200 809e 	bhi.w	8005c20 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ae4:	4a5a      	ldr	r2, [pc, #360]	; (8005c50 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	f000 8091 	beq.w	8005c0e <HAL_TIM_ConfigClockSource+0x1ae>
 8005aec:	4a58      	ldr	r2, [pc, #352]	; (8005c50 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	f200 8096 	bhi.w	8005c20 <HAL_TIM_ConfigClockSource+0x1c0>
 8005af4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005af8:	f000 8089 	beq.w	8005c0e <HAL_TIM_ConfigClockSource+0x1ae>
 8005afc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b00:	f200 808e 	bhi.w	8005c20 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b08:	d03e      	beq.n	8005b88 <HAL_TIM_ConfigClockSource+0x128>
 8005b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b0e:	f200 8087 	bhi.w	8005c20 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b16:	f000 8086 	beq.w	8005c26 <HAL_TIM_ConfigClockSource+0x1c6>
 8005b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1e:	d87f      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b20:	2b70      	cmp	r3, #112	; 0x70
 8005b22:	d01a      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0xfa>
 8005b24:	2b70      	cmp	r3, #112	; 0x70
 8005b26:	d87b      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b28:	2b60      	cmp	r3, #96	; 0x60
 8005b2a:	d050      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x16e>
 8005b2c:	2b60      	cmp	r3, #96	; 0x60
 8005b2e:	d877      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b30:	2b50      	cmp	r3, #80	; 0x50
 8005b32:	d03c      	beq.n	8005bae <HAL_TIM_ConfigClockSource+0x14e>
 8005b34:	2b50      	cmp	r3, #80	; 0x50
 8005b36:	d873      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b38:	2b40      	cmp	r3, #64	; 0x40
 8005b3a:	d058      	beq.n	8005bee <HAL_TIM_ConfigClockSource+0x18e>
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d86f      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b40:	2b30      	cmp	r3, #48	; 0x30
 8005b42:	d064      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x1ae>
 8005b44:	2b30      	cmp	r3, #48	; 0x30
 8005b46:	d86b      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d060      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x1ae>
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d867      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d05c      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x1ae>
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d05a      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x1ae>
 8005b58:	e062      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6899      	ldr	r1, [r3, #8]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f000 f9a7 	bl	8005ebc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	609a      	str	r2, [r3, #8]
      break;
 8005b86:	e04f      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	6899      	ldr	r1, [r3, #8]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f000 f990 	bl	8005ebc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005baa:	609a      	str	r2, [r3, #8]
      break;
 8005bac:	e03c      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6859      	ldr	r1, [r3, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f000 f902 	bl	8005dc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2150      	movs	r1, #80	; 0x50
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 f95b 	bl	8005e82 <TIM_ITRx_SetConfig>
      break;
 8005bcc:	e02c      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6859      	ldr	r1, [r3, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f000 f921 	bl	8005e22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2160      	movs	r1, #96	; 0x60
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 f94b 	bl	8005e82 <TIM_ITRx_SetConfig>
      break;
 8005bec:	e01c      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6859      	ldr	r1, [r3, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f000 f8e2 	bl	8005dc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2140      	movs	r1, #64	; 0x40
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 f93b 	bl	8005e82 <TIM_ITRx_SetConfig>
      break;
 8005c0c:	e00c      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4619      	mov	r1, r3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f000 f932 	bl	8005e82 <TIM_ITRx_SetConfig>
      break;
 8005c1e:	e003      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	73fb      	strb	r3, [r7, #15]
      break;
 8005c24:	e000      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005c26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	00100070 	.word	0x00100070
 8005c48:	00100040 	.word	0x00100040
 8005c4c:	00100030 	.word	0x00100030
 8005c50:	00100020 	.word	0x00100020

08005c54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a3c      	ldr	r2, [pc, #240]	; (8005da8 <TIM_Base_SetConfig+0x104>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00f      	beq.n	8005cdc <TIM_Base_SetConfig+0x38>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc2:	d00b      	beq.n	8005cdc <TIM_Base_SetConfig+0x38>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a39      	ldr	r2, [pc, #228]	; (8005dac <TIM_Base_SetConfig+0x108>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d007      	beq.n	8005cdc <TIM_Base_SetConfig+0x38>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a38      	ldr	r2, [pc, #224]	; (8005db0 <TIM_Base_SetConfig+0x10c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_Base_SetConfig+0x38>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a37      	ldr	r2, [pc, #220]	; (8005db4 <TIM_Base_SetConfig+0x110>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d108      	bne.n	8005cee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a2d      	ldr	r2, [pc, #180]	; (8005da8 <TIM_Base_SetConfig+0x104>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d01b      	beq.n	8005d2e <TIM_Base_SetConfig+0x8a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfc:	d017      	beq.n	8005d2e <TIM_Base_SetConfig+0x8a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a2a      	ldr	r2, [pc, #168]	; (8005dac <TIM_Base_SetConfig+0x108>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <TIM_Base_SetConfig+0x8a>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a29      	ldr	r2, [pc, #164]	; (8005db0 <TIM_Base_SetConfig+0x10c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00f      	beq.n	8005d2e <TIM_Base_SetConfig+0x8a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a28      	ldr	r2, [pc, #160]	; (8005db4 <TIM_Base_SetConfig+0x110>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00b      	beq.n	8005d2e <TIM_Base_SetConfig+0x8a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a27      	ldr	r2, [pc, #156]	; (8005db8 <TIM_Base_SetConfig+0x114>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d007      	beq.n	8005d2e <TIM_Base_SetConfig+0x8a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a26      	ldr	r2, [pc, #152]	; (8005dbc <TIM_Base_SetConfig+0x118>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d003      	beq.n	8005d2e <TIM_Base_SetConfig+0x8a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a25      	ldr	r2, [pc, #148]	; (8005dc0 <TIM_Base_SetConfig+0x11c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d108      	bne.n	8005d40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a10      	ldr	r2, [pc, #64]	; (8005da8 <TIM_Base_SetConfig+0x104>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00f      	beq.n	8005d8c <TIM_Base_SetConfig+0xe8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a11      	ldr	r2, [pc, #68]	; (8005db4 <TIM_Base_SetConfig+0x110>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00b      	beq.n	8005d8c <TIM_Base_SetConfig+0xe8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a10      	ldr	r2, [pc, #64]	; (8005db8 <TIM_Base_SetConfig+0x114>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d007      	beq.n	8005d8c <TIM_Base_SetConfig+0xe8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a0f      	ldr	r2, [pc, #60]	; (8005dbc <TIM_Base_SetConfig+0x118>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_Base_SetConfig+0xe8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a0e      	ldr	r2, [pc, #56]	; (8005dc0 <TIM_Base_SetConfig+0x11c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d103      	bne.n	8005d94 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	615a      	str	r2, [r3, #20]
}
 8005d9a:	bf00      	nop
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	40012c00 	.word	0x40012c00
 8005dac:	40000400 	.word	0x40000400
 8005db0:	40000800 	.word	0x40000800
 8005db4:	40013400 	.word	0x40013400
 8005db8:	40014000 	.word	0x40014000
 8005dbc:	40014400 	.word	0x40014400
 8005dc0:	40014800 	.word	0x40014800

08005dc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f023 0201 	bic.w	r2, r3, #1
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f023 030a 	bic.w	r3, r3, #10
 8005e00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b087      	sub	sp, #28
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f023 0210 	bic.w	r2, r3, #16
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	031b      	lsls	r3, r3, #12
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f043 0307 	orr.w	r3, r3, #7
 8005ea8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	609a      	str	r2, [r3, #8]
}
 8005eb0:	bf00      	nop
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ed6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	021a      	lsls	r2, r3, #8
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	609a      	str	r2, [r3, #8]
}
 8005ef0:	bf00      	nop
 8005ef2:	371c      	adds	r7, #28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e065      	b.n	8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a2c      	ldr	r2, [pc, #176]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d004      	beq.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a2b      	ldr	r2, [pc, #172]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d108      	bne.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1b      	ldr	r2, [pc, #108]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d018      	beq.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8a:	d013      	beq.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a18      	ldr	r2, [pc, #96]	; (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00e      	beq.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a17      	ldr	r2, [pc, #92]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d009      	beq.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a12      	ldr	r2, [pc, #72]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d004      	beq.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a13      	ldr	r2, [pc, #76]	; (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d10c      	bne.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	40012c00 	.word	0x40012c00
 8005ff0:	40013400 	.word	0x40013400
 8005ff4:	40000400 	.word	0x40000400
 8005ff8:	40000800 	.word	0x40000800
 8005ffc:	40014000 	.word	0x40014000

08006000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <__errno>:
 800608c:	4b01      	ldr	r3, [pc, #4]	; (8006094 <__errno+0x8>)
 800608e:	6818      	ldr	r0, [r3, #0]
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	2000001c 	.word	0x2000001c

08006098 <__libc_init_array>:
 8006098:	b570      	push	{r4, r5, r6, lr}
 800609a:	4d0d      	ldr	r5, [pc, #52]	; (80060d0 <__libc_init_array+0x38>)
 800609c:	4c0d      	ldr	r4, [pc, #52]	; (80060d4 <__libc_init_array+0x3c>)
 800609e:	1b64      	subs	r4, r4, r5
 80060a0:	10a4      	asrs	r4, r4, #2
 80060a2:	2600      	movs	r6, #0
 80060a4:	42a6      	cmp	r6, r4
 80060a6:	d109      	bne.n	80060bc <__libc_init_array+0x24>
 80060a8:	4d0b      	ldr	r5, [pc, #44]	; (80060d8 <__libc_init_array+0x40>)
 80060aa:	4c0c      	ldr	r4, [pc, #48]	; (80060dc <__libc_init_array+0x44>)
 80060ac:	f004 fc90 	bl	800a9d0 <_init>
 80060b0:	1b64      	subs	r4, r4, r5
 80060b2:	10a4      	asrs	r4, r4, #2
 80060b4:	2600      	movs	r6, #0
 80060b6:	42a6      	cmp	r6, r4
 80060b8:	d105      	bne.n	80060c6 <__libc_init_array+0x2e>
 80060ba:	bd70      	pop	{r4, r5, r6, pc}
 80060bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c0:	4798      	blx	r3
 80060c2:	3601      	adds	r6, #1
 80060c4:	e7ee      	b.n	80060a4 <__libc_init_array+0xc>
 80060c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ca:	4798      	blx	r3
 80060cc:	3601      	adds	r6, #1
 80060ce:	e7f2      	b.n	80060b6 <__libc_init_array+0x1e>
 80060d0:	0800c3b4 	.word	0x0800c3b4
 80060d4:	0800c3b4 	.word	0x0800c3b4
 80060d8:	0800c3b4 	.word	0x0800c3b4
 80060dc:	0800c3b8 	.word	0x0800c3b8

080060e0 <memset>:
 80060e0:	4402      	add	r2, r0
 80060e2:	4603      	mov	r3, r0
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d100      	bne.n	80060ea <memset+0xa>
 80060e8:	4770      	bx	lr
 80060ea:	f803 1b01 	strb.w	r1, [r3], #1
 80060ee:	e7f9      	b.n	80060e4 <memset+0x4>

080060f0 <__cvt>:
 80060f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060f4:	ec55 4b10 	vmov	r4, r5, d0
 80060f8:	2d00      	cmp	r5, #0
 80060fa:	460e      	mov	r6, r1
 80060fc:	4619      	mov	r1, r3
 80060fe:	462b      	mov	r3, r5
 8006100:	bfbb      	ittet	lt
 8006102:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006106:	461d      	movlt	r5, r3
 8006108:	2300      	movge	r3, #0
 800610a:	232d      	movlt	r3, #45	; 0x2d
 800610c:	700b      	strb	r3, [r1, #0]
 800610e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006110:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006114:	4691      	mov	r9, r2
 8006116:	f023 0820 	bic.w	r8, r3, #32
 800611a:	bfbc      	itt	lt
 800611c:	4622      	movlt	r2, r4
 800611e:	4614      	movlt	r4, r2
 8006120:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006124:	d005      	beq.n	8006132 <__cvt+0x42>
 8006126:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800612a:	d100      	bne.n	800612e <__cvt+0x3e>
 800612c:	3601      	adds	r6, #1
 800612e:	2102      	movs	r1, #2
 8006130:	e000      	b.n	8006134 <__cvt+0x44>
 8006132:	2103      	movs	r1, #3
 8006134:	ab03      	add	r3, sp, #12
 8006136:	9301      	str	r3, [sp, #4]
 8006138:	ab02      	add	r3, sp, #8
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	ec45 4b10 	vmov	d0, r4, r5
 8006140:	4653      	mov	r3, sl
 8006142:	4632      	mov	r2, r6
 8006144:	f001 fdac 	bl	8007ca0 <_dtoa_r>
 8006148:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800614c:	4607      	mov	r7, r0
 800614e:	d102      	bne.n	8006156 <__cvt+0x66>
 8006150:	f019 0f01 	tst.w	r9, #1
 8006154:	d022      	beq.n	800619c <__cvt+0xac>
 8006156:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800615a:	eb07 0906 	add.w	r9, r7, r6
 800615e:	d110      	bne.n	8006182 <__cvt+0x92>
 8006160:	783b      	ldrb	r3, [r7, #0]
 8006162:	2b30      	cmp	r3, #48	; 0x30
 8006164:	d10a      	bne.n	800617c <__cvt+0x8c>
 8006166:	2200      	movs	r2, #0
 8006168:	2300      	movs	r3, #0
 800616a:	4620      	mov	r0, r4
 800616c:	4629      	mov	r1, r5
 800616e:	f7fa fcd3 	bl	8000b18 <__aeabi_dcmpeq>
 8006172:	b918      	cbnz	r0, 800617c <__cvt+0x8c>
 8006174:	f1c6 0601 	rsb	r6, r6, #1
 8006178:	f8ca 6000 	str.w	r6, [sl]
 800617c:	f8da 3000 	ldr.w	r3, [sl]
 8006180:	4499      	add	r9, r3
 8006182:	2200      	movs	r2, #0
 8006184:	2300      	movs	r3, #0
 8006186:	4620      	mov	r0, r4
 8006188:	4629      	mov	r1, r5
 800618a:	f7fa fcc5 	bl	8000b18 <__aeabi_dcmpeq>
 800618e:	b108      	cbz	r0, 8006194 <__cvt+0xa4>
 8006190:	f8cd 900c 	str.w	r9, [sp, #12]
 8006194:	2230      	movs	r2, #48	; 0x30
 8006196:	9b03      	ldr	r3, [sp, #12]
 8006198:	454b      	cmp	r3, r9
 800619a:	d307      	bcc.n	80061ac <__cvt+0xbc>
 800619c:	9b03      	ldr	r3, [sp, #12]
 800619e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061a0:	1bdb      	subs	r3, r3, r7
 80061a2:	4638      	mov	r0, r7
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	b004      	add	sp, #16
 80061a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ac:	1c59      	adds	r1, r3, #1
 80061ae:	9103      	str	r1, [sp, #12]
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	e7f0      	b.n	8006196 <__cvt+0xa6>

080061b4 <__exponent>:
 80061b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061b6:	4603      	mov	r3, r0
 80061b8:	2900      	cmp	r1, #0
 80061ba:	bfb8      	it	lt
 80061bc:	4249      	neglt	r1, r1
 80061be:	f803 2b02 	strb.w	r2, [r3], #2
 80061c2:	bfb4      	ite	lt
 80061c4:	222d      	movlt	r2, #45	; 0x2d
 80061c6:	222b      	movge	r2, #43	; 0x2b
 80061c8:	2909      	cmp	r1, #9
 80061ca:	7042      	strb	r2, [r0, #1]
 80061cc:	dd2a      	ble.n	8006224 <__exponent+0x70>
 80061ce:	f10d 0407 	add.w	r4, sp, #7
 80061d2:	46a4      	mov	ip, r4
 80061d4:	270a      	movs	r7, #10
 80061d6:	46a6      	mov	lr, r4
 80061d8:	460a      	mov	r2, r1
 80061da:	fb91 f6f7 	sdiv	r6, r1, r7
 80061de:	fb07 1516 	mls	r5, r7, r6, r1
 80061e2:	3530      	adds	r5, #48	; 0x30
 80061e4:	2a63      	cmp	r2, #99	; 0x63
 80061e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80061ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80061ee:	4631      	mov	r1, r6
 80061f0:	dcf1      	bgt.n	80061d6 <__exponent+0x22>
 80061f2:	3130      	adds	r1, #48	; 0x30
 80061f4:	f1ae 0502 	sub.w	r5, lr, #2
 80061f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80061fc:	1c44      	adds	r4, r0, #1
 80061fe:	4629      	mov	r1, r5
 8006200:	4561      	cmp	r1, ip
 8006202:	d30a      	bcc.n	800621a <__exponent+0x66>
 8006204:	f10d 0209 	add.w	r2, sp, #9
 8006208:	eba2 020e 	sub.w	r2, r2, lr
 800620c:	4565      	cmp	r5, ip
 800620e:	bf88      	it	hi
 8006210:	2200      	movhi	r2, #0
 8006212:	4413      	add	r3, r2
 8006214:	1a18      	subs	r0, r3, r0
 8006216:	b003      	add	sp, #12
 8006218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800621a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800621e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006222:	e7ed      	b.n	8006200 <__exponent+0x4c>
 8006224:	2330      	movs	r3, #48	; 0x30
 8006226:	3130      	adds	r1, #48	; 0x30
 8006228:	7083      	strb	r3, [r0, #2]
 800622a:	70c1      	strb	r1, [r0, #3]
 800622c:	1d03      	adds	r3, r0, #4
 800622e:	e7f1      	b.n	8006214 <__exponent+0x60>

08006230 <_printf_float>:
 8006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	ed2d 8b02 	vpush	{d8}
 8006238:	b08d      	sub	sp, #52	; 0x34
 800623a:	460c      	mov	r4, r1
 800623c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006240:	4616      	mov	r6, r2
 8006242:	461f      	mov	r7, r3
 8006244:	4605      	mov	r5, r0
 8006246:	f002 fe89 	bl	8008f5c <_localeconv_r>
 800624a:	f8d0 a000 	ldr.w	sl, [r0]
 800624e:	4650      	mov	r0, sl
 8006250:	f7f9 ffe6 	bl	8000220 <strlen>
 8006254:	2300      	movs	r3, #0
 8006256:	930a      	str	r3, [sp, #40]	; 0x28
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	9305      	str	r3, [sp, #20]
 800625c:	f8d8 3000 	ldr.w	r3, [r8]
 8006260:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006264:	3307      	adds	r3, #7
 8006266:	f023 0307 	bic.w	r3, r3, #7
 800626a:	f103 0208 	add.w	r2, r3, #8
 800626e:	f8c8 2000 	str.w	r2, [r8]
 8006272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006276:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800627a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800627e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006282:	9307      	str	r3, [sp, #28]
 8006284:	f8cd 8018 	str.w	r8, [sp, #24]
 8006288:	ee08 0a10 	vmov	s16, r0
 800628c:	4b9f      	ldr	r3, [pc, #636]	; (800650c <_printf_float+0x2dc>)
 800628e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006292:	f04f 32ff 	mov.w	r2, #4294967295
 8006296:	f7fa fc71 	bl	8000b7c <__aeabi_dcmpun>
 800629a:	bb88      	cbnz	r0, 8006300 <_printf_float+0xd0>
 800629c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062a0:	4b9a      	ldr	r3, [pc, #616]	; (800650c <_printf_float+0x2dc>)
 80062a2:	f04f 32ff 	mov.w	r2, #4294967295
 80062a6:	f7fa fc4b 	bl	8000b40 <__aeabi_dcmple>
 80062aa:	bb48      	cbnz	r0, 8006300 <_printf_float+0xd0>
 80062ac:	2200      	movs	r2, #0
 80062ae:	2300      	movs	r3, #0
 80062b0:	4640      	mov	r0, r8
 80062b2:	4649      	mov	r1, r9
 80062b4:	f7fa fc3a 	bl	8000b2c <__aeabi_dcmplt>
 80062b8:	b110      	cbz	r0, 80062c0 <_printf_float+0x90>
 80062ba:	232d      	movs	r3, #45	; 0x2d
 80062bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062c0:	4b93      	ldr	r3, [pc, #588]	; (8006510 <_printf_float+0x2e0>)
 80062c2:	4894      	ldr	r0, [pc, #592]	; (8006514 <_printf_float+0x2e4>)
 80062c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80062c8:	bf94      	ite	ls
 80062ca:	4698      	movls	r8, r3
 80062cc:	4680      	movhi	r8, r0
 80062ce:	2303      	movs	r3, #3
 80062d0:	6123      	str	r3, [r4, #16]
 80062d2:	9b05      	ldr	r3, [sp, #20]
 80062d4:	f023 0204 	bic.w	r2, r3, #4
 80062d8:	6022      	str	r2, [r4, #0]
 80062da:	f04f 0900 	mov.w	r9, #0
 80062de:	9700      	str	r7, [sp, #0]
 80062e0:	4633      	mov	r3, r6
 80062e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80062e4:	4621      	mov	r1, r4
 80062e6:	4628      	mov	r0, r5
 80062e8:	f000 f9d8 	bl	800669c <_printf_common>
 80062ec:	3001      	adds	r0, #1
 80062ee:	f040 8090 	bne.w	8006412 <_printf_float+0x1e2>
 80062f2:	f04f 30ff 	mov.w	r0, #4294967295
 80062f6:	b00d      	add	sp, #52	; 0x34
 80062f8:	ecbd 8b02 	vpop	{d8}
 80062fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006300:	4642      	mov	r2, r8
 8006302:	464b      	mov	r3, r9
 8006304:	4640      	mov	r0, r8
 8006306:	4649      	mov	r1, r9
 8006308:	f7fa fc38 	bl	8000b7c <__aeabi_dcmpun>
 800630c:	b140      	cbz	r0, 8006320 <_printf_float+0xf0>
 800630e:	464b      	mov	r3, r9
 8006310:	2b00      	cmp	r3, #0
 8006312:	bfbc      	itt	lt
 8006314:	232d      	movlt	r3, #45	; 0x2d
 8006316:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800631a:	487f      	ldr	r0, [pc, #508]	; (8006518 <_printf_float+0x2e8>)
 800631c:	4b7f      	ldr	r3, [pc, #508]	; (800651c <_printf_float+0x2ec>)
 800631e:	e7d1      	b.n	80062c4 <_printf_float+0x94>
 8006320:	6863      	ldr	r3, [r4, #4]
 8006322:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006326:	9206      	str	r2, [sp, #24]
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	d13f      	bne.n	80063ac <_printf_float+0x17c>
 800632c:	2306      	movs	r3, #6
 800632e:	6063      	str	r3, [r4, #4]
 8006330:	9b05      	ldr	r3, [sp, #20]
 8006332:	6861      	ldr	r1, [r4, #4]
 8006334:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006338:	2300      	movs	r3, #0
 800633a:	9303      	str	r3, [sp, #12]
 800633c:	ab0a      	add	r3, sp, #40	; 0x28
 800633e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006342:	ab09      	add	r3, sp, #36	; 0x24
 8006344:	ec49 8b10 	vmov	d0, r8, r9
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	6022      	str	r2, [r4, #0]
 800634c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006350:	4628      	mov	r0, r5
 8006352:	f7ff fecd 	bl	80060f0 <__cvt>
 8006356:	9b06      	ldr	r3, [sp, #24]
 8006358:	9909      	ldr	r1, [sp, #36]	; 0x24
 800635a:	2b47      	cmp	r3, #71	; 0x47
 800635c:	4680      	mov	r8, r0
 800635e:	d108      	bne.n	8006372 <_printf_float+0x142>
 8006360:	1cc8      	adds	r0, r1, #3
 8006362:	db02      	blt.n	800636a <_printf_float+0x13a>
 8006364:	6863      	ldr	r3, [r4, #4]
 8006366:	4299      	cmp	r1, r3
 8006368:	dd41      	ble.n	80063ee <_printf_float+0x1be>
 800636a:	f1ab 0b02 	sub.w	fp, fp, #2
 800636e:	fa5f fb8b 	uxtb.w	fp, fp
 8006372:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006376:	d820      	bhi.n	80063ba <_printf_float+0x18a>
 8006378:	3901      	subs	r1, #1
 800637a:	465a      	mov	r2, fp
 800637c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006380:	9109      	str	r1, [sp, #36]	; 0x24
 8006382:	f7ff ff17 	bl	80061b4 <__exponent>
 8006386:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006388:	1813      	adds	r3, r2, r0
 800638a:	2a01      	cmp	r2, #1
 800638c:	4681      	mov	r9, r0
 800638e:	6123      	str	r3, [r4, #16]
 8006390:	dc02      	bgt.n	8006398 <_printf_float+0x168>
 8006392:	6822      	ldr	r2, [r4, #0]
 8006394:	07d2      	lsls	r2, r2, #31
 8006396:	d501      	bpl.n	800639c <_printf_float+0x16c>
 8006398:	3301      	adds	r3, #1
 800639a:	6123      	str	r3, [r4, #16]
 800639c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d09c      	beq.n	80062de <_printf_float+0xae>
 80063a4:	232d      	movs	r3, #45	; 0x2d
 80063a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063aa:	e798      	b.n	80062de <_printf_float+0xae>
 80063ac:	9a06      	ldr	r2, [sp, #24]
 80063ae:	2a47      	cmp	r2, #71	; 0x47
 80063b0:	d1be      	bne.n	8006330 <_printf_float+0x100>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1bc      	bne.n	8006330 <_printf_float+0x100>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e7b9      	b.n	800632e <_printf_float+0xfe>
 80063ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80063be:	d118      	bne.n	80063f2 <_printf_float+0x1c2>
 80063c0:	2900      	cmp	r1, #0
 80063c2:	6863      	ldr	r3, [r4, #4]
 80063c4:	dd0b      	ble.n	80063de <_printf_float+0x1ae>
 80063c6:	6121      	str	r1, [r4, #16]
 80063c8:	b913      	cbnz	r3, 80063d0 <_printf_float+0x1a0>
 80063ca:	6822      	ldr	r2, [r4, #0]
 80063cc:	07d0      	lsls	r0, r2, #31
 80063ce:	d502      	bpl.n	80063d6 <_printf_float+0x1a6>
 80063d0:	3301      	adds	r3, #1
 80063d2:	440b      	add	r3, r1
 80063d4:	6123      	str	r3, [r4, #16]
 80063d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80063d8:	f04f 0900 	mov.w	r9, #0
 80063dc:	e7de      	b.n	800639c <_printf_float+0x16c>
 80063de:	b913      	cbnz	r3, 80063e6 <_printf_float+0x1b6>
 80063e0:	6822      	ldr	r2, [r4, #0]
 80063e2:	07d2      	lsls	r2, r2, #31
 80063e4:	d501      	bpl.n	80063ea <_printf_float+0x1ba>
 80063e6:	3302      	adds	r3, #2
 80063e8:	e7f4      	b.n	80063d4 <_printf_float+0x1a4>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e7f2      	b.n	80063d4 <_printf_float+0x1a4>
 80063ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80063f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f4:	4299      	cmp	r1, r3
 80063f6:	db05      	blt.n	8006404 <_printf_float+0x1d4>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	6121      	str	r1, [r4, #16]
 80063fc:	07d8      	lsls	r0, r3, #31
 80063fe:	d5ea      	bpl.n	80063d6 <_printf_float+0x1a6>
 8006400:	1c4b      	adds	r3, r1, #1
 8006402:	e7e7      	b.n	80063d4 <_printf_float+0x1a4>
 8006404:	2900      	cmp	r1, #0
 8006406:	bfd4      	ite	le
 8006408:	f1c1 0202 	rsble	r2, r1, #2
 800640c:	2201      	movgt	r2, #1
 800640e:	4413      	add	r3, r2
 8006410:	e7e0      	b.n	80063d4 <_printf_float+0x1a4>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	055a      	lsls	r2, r3, #21
 8006416:	d407      	bmi.n	8006428 <_printf_float+0x1f8>
 8006418:	6923      	ldr	r3, [r4, #16]
 800641a:	4642      	mov	r2, r8
 800641c:	4631      	mov	r1, r6
 800641e:	4628      	mov	r0, r5
 8006420:	47b8      	blx	r7
 8006422:	3001      	adds	r0, #1
 8006424:	d12c      	bne.n	8006480 <_printf_float+0x250>
 8006426:	e764      	b.n	80062f2 <_printf_float+0xc2>
 8006428:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800642c:	f240 80e0 	bls.w	80065f0 <_printf_float+0x3c0>
 8006430:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006434:	2200      	movs	r2, #0
 8006436:	2300      	movs	r3, #0
 8006438:	f7fa fb6e 	bl	8000b18 <__aeabi_dcmpeq>
 800643c:	2800      	cmp	r0, #0
 800643e:	d034      	beq.n	80064aa <_printf_float+0x27a>
 8006440:	4a37      	ldr	r2, [pc, #220]	; (8006520 <_printf_float+0x2f0>)
 8006442:	2301      	movs	r3, #1
 8006444:	4631      	mov	r1, r6
 8006446:	4628      	mov	r0, r5
 8006448:	47b8      	blx	r7
 800644a:	3001      	adds	r0, #1
 800644c:	f43f af51 	beq.w	80062f2 <_printf_float+0xc2>
 8006450:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006454:	429a      	cmp	r2, r3
 8006456:	db02      	blt.n	800645e <_printf_float+0x22e>
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	07d8      	lsls	r0, r3, #31
 800645c:	d510      	bpl.n	8006480 <_printf_float+0x250>
 800645e:	ee18 3a10 	vmov	r3, s16
 8006462:	4652      	mov	r2, sl
 8006464:	4631      	mov	r1, r6
 8006466:	4628      	mov	r0, r5
 8006468:	47b8      	blx	r7
 800646a:	3001      	adds	r0, #1
 800646c:	f43f af41 	beq.w	80062f2 <_printf_float+0xc2>
 8006470:	f04f 0800 	mov.w	r8, #0
 8006474:	f104 091a 	add.w	r9, r4, #26
 8006478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800647a:	3b01      	subs	r3, #1
 800647c:	4543      	cmp	r3, r8
 800647e:	dc09      	bgt.n	8006494 <_printf_float+0x264>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	079b      	lsls	r3, r3, #30
 8006484:	f100 8105 	bmi.w	8006692 <_printf_float+0x462>
 8006488:	68e0      	ldr	r0, [r4, #12]
 800648a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800648c:	4298      	cmp	r0, r3
 800648e:	bfb8      	it	lt
 8006490:	4618      	movlt	r0, r3
 8006492:	e730      	b.n	80062f6 <_printf_float+0xc6>
 8006494:	2301      	movs	r3, #1
 8006496:	464a      	mov	r2, r9
 8006498:	4631      	mov	r1, r6
 800649a:	4628      	mov	r0, r5
 800649c:	47b8      	blx	r7
 800649e:	3001      	adds	r0, #1
 80064a0:	f43f af27 	beq.w	80062f2 <_printf_float+0xc2>
 80064a4:	f108 0801 	add.w	r8, r8, #1
 80064a8:	e7e6      	b.n	8006478 <_printf_float+0x248>
 80064aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	dc39      	bgt.n	8006524 <_printf_float+0x2f4>
 80064b0:	4a1b      	ldr	r2, [pc, #108]	; (8006520 <_printf_float+0x2f0>)
 80064b2:	2301      	movs	r3, #1
 80064b4:	4631      	mov	r1, r6
 80064b6:	4628      	mov	r0, r5
 80064b8:	47b8      	blx	r7
 80064ba:	3001      	adds	r0, #1
 80064bc:	f43f af19 	beq.w	80062f2 <_printf_float+0xc2>
 80064c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064c4:	4313      	orrs	r3, r2
 80064c6:	d102      	bne.n	80064ce <_printf_float+0x29e>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	07d9      	lsls	r1, r3, #31
 80064cc:	d5d8      	bpl.n	8006480 <_printf_float+0x250>
 80064ce:	ee18 3a10 	vmov	r3, s16
 80064d2:	4652      	mov	r2, sl
 80064d4:	4631      	mov	r1, r6
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b8      	blx	r7
 80064da:	3001      	adds	r0, #1
 80064dc:	f43f af09 	beq.w	80062f2 <_printf_float+0xc2>
 80064e0:	f04f 0900 	mov.w	r9, #0
 80064e4:	f104 0a1a 	add.w	sl, r4, #26
 80064e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ea:	425b      	negs	r3, r3
 80064ec:	454b      	cmp	r3, r9
 80064ee:	dc01      	bgt.n	80064f4 <_printf_float+0x2c4>
 80064f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f2:	e792      	b.n	800641a <_printf_float+0x1ea>
 80064f4:	2301      	movs	r3, #1
 80064f6:	4652      	mov	r2, sl
 80064f8:	4631      	mov	r1, r6
 80064fa:	4628      	mov	r0, r5
 80064fc:	47b8      	blx	r7
 80064fe:	3001      	adds	r0, #1
 8006500:	f43f aef7 	beq.w	80062f2 <_printf_float+0xc2>
 8006504:	f109 0901 	add.w	r9, r9, #1
 8006508:	e7ee      	b.n	80064e8 <_printf_float+0x2b8>
 800650a:	bf00      	nop
 800650c:	7fefffff 	.word	0x7fefffff
 8006510:	0800bf14 	.word	0x0800bf14
 8006514:	0800bf18 	.word	0x0800bf18
 8006518:	0800bf20 	.word	0x0800bf20
 800651c:	0800bf1c 	.word	0x0800bf1c
 8006520:	0800bf24 	.word	0x0800bf24
 8006524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006526:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006528:	429a      	cmp	r2, r3
 800652a:	bfa8      	it	ge
 800652c:	461a      	movge	r2, r3
 800652e:	2a00      	cmp	r2, #0
 8006530:	4691      	mov	r9, r2
 8006532:	dc37      	bgt.n	80065a4 <_printf_float+0x374>
 8006534:	f04f 0b00 	mov.w	fp, #0
 8006538:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800653c:	f104 021a 	add.w	r2, r4, #26
 8006540:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006542:	9305      	str	r3, [sp, #20]
 8006544:	eba3 0309 	sub.w	r3, r3, r9
 8006548:	455b      	cmp	r3, fp
 800654a:	dc33      	bgt.n	80065b4 <_printf_float+0x384>
 800654c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006550:	429a      	cmp	r2, r3
 8006552:	db3b      	blt.n	80065cc <_printf_float+0x39c>
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	07da      	lsls	r2, r3, #31
 8006558:	d438      	bmi.n	80065cc <_printf_float+0x39c>
 800655a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800655c:	9a05      	ldr	r2, [sp, #20]
 800655e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006560:	1a9a      	subs	r2, r3, r2
 8006562:	eba3 0901 	sub.w	r9, r3, r1
 8006566:	4591      	cmp	r9, r2
 8006568:	bfa8      	it	ge
 800656a:	4691      	movge	r9, r2
 800656c:	f1b9 0f00 	cmp.w	r9, #0
 8006570:	dc35      	bgt.n	80065de <_printf_float+0x3ae>
 8006572:	f04f 0800 	mov.w	r8, #0
 8006576:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800657a:	f104 0a1a 	add.w	sl, r4, #26
 800657e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006582:	1a9b      	subs	r3, r3, r2
 8006584:	eba3 0309 	sub.w	r3, r3, r9
 8006588:	4543      	cmp	r3, r8
 800658a:	f77f af79 	ble.w	8006480 <_printf_float+0x250>
 800658e:	2301      	movs	r3, #1
 8006590:	4652      	mov	r2, sl
 8006592:	4631      	mov	r1, r6
 8006594:	4628      	mov	r0, r5
 8006596:	47b8      	blx	r7
 8006598:	3001      	adds	r0, #1
 800659a:	f43f aeaa 	beq.w	80062f2 <_printf_float+0xc2>
 800659e:	f108 0801 	add.w	r8, r8, #1
 80065a2:	e7ec      	b.n	800657e <_printf_float+0x34e>
 80065a4:	4613      	mov	r3, r2
 80065a6:	4631      	mov	r1, r6
 80065a8:	4642      	mov	r2, r8
 80065aa:	4628      	mov	r0, r5
 80065ac:	47b8      	blx	r7
 80065ae:	3001      	adds	r0, #1
 80065b0:	d1c0      	bne.n	8006534 <_printf_float+0x304>
 80065b2:	e69e      	b.n	80062f2 <_printf_float+0xc2>
 80065b4:	2301      	movs	r3, #1
 80065b6:	4631      	mov	r1, r6
 80065b8:	4628      	mov	r0, r5
 80065ba:	9205      	str	r2, [sp, #20]
 80065bc:	47b8      	blx	r7
 80065be:	3001      	adds	r0, #1
 80065c0:	f43f ae97 	beq.w	80062f2 <_printf_float+0xc2>
 80065c4:	9a05      	ldr	r2, [sp, #20]
 80065c6:	f10b 0b01 	add.w	fp, fp, #1
 80065ca:	e7b9      	b.n	8006540 <_printf_float+0x310>
 80065cc:	ee18 3a10 	vmov	r3, s16
 80065d0:	4652      	mov	r2, sl
 80065d2:	4631      	mov	r1, r6
 80065d4:	4628      	mov	r0, r5
 80065d6:	47b8      	blx	r7
 80065d8:	3001      	adds	r0, #1
 80065da:	d1be      	bne.n	800655a <_printf_float+0x32a>
 80065dc:	e689      	b.n	80062f2 <_printf_float+0xc2>
 80065de:	9a05      	ldr	r2, [sp, #20]
 80065e0:	464b      	mov	r3, r9
 80065e2:	4442      	add	r2, r8
 80065e4:	4631      	mov	r1, r6
 80065e6:	4628      	mov	r0, r5
 80065e8:	47b8      	blx	r7
 80065ea:	3001      	adds	r0, #1
 80065ec:	d1c1      	bne.n	8006572 <_printf_float+0x342>
 80065ee:	e680      	b.n	80062f2 <_printf_float+0xc2>
 80065f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065f2:	2a01      	cmp	r2, #1
 80065f4:	dc01      	bgt.n	80065fa <_printf_float+0x3ca>
 80065f6:	07db      	lsls	r3, r3, #31
 80065f8:	d538      	bpl.n	800666c <_printf_float+0x43c>
 80065fa:	2301      	movs	r3, #1
 80065fc:	4642      	mov	r2, r8
 80065fe:	4631      	mov	r1, r6
 8006600:	4628      	mov	r0, r5
 8006602:	47b8      	blx	r7
 8006604:	3001      	adds	r0, #1
 8006606:	f43f ae74 	beq.w	80062f2 <_printf_float+0xc2>
 800660a:	ee18 3a10 	vmov	r3, s16
 800660e:	4652      	mov	r2, sl
 8006610:	4631      	mov	r1, r6
 8006612:	4628      	mov	r0, r5
 8006614:	47b8      	blx	r7
 8006616:	3001      	adds	r0, #1
 8006618:	f43f ae6b 	beq.w	80062f2 <_printf_float+0xc2>
 800661c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006620:	2200      	movs	r2, #0
 8006622:	2300      	movs	r3, #0
 8006624:	f7fa fa78 	bl	8000b18 <__aeabi_dcmpeq>
 8006628:	b9d8      	cbnz	r0, 8006662 <_printf_float+0x432>
 800662a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800662c:	f108 0201 	add.w	r2, r8, #1
 8006630:	3b01      	subs	r3, #1
 8006632:	4631      	mov	r1, r6
 8006634:	4628      	mov	r0, r5
 8006636:	47b8      	blx	r7
 8006638:	3001      	adds	r0, #1
 800663a:	d10e      	bne.n	800665a <_printf_float+0x42a>
 800663c:	e659      	b.n	80062f2 <_printf_float+0xc2>
 800663e:	2301      	movs	r3, #1
 8006640:	4652      	mov	r2, sl
 8006642:	4631      	mov	r1, r6
 8006644:	4628      	mov	r0, r5
 8006646:	47b8      	blx	r7
 8006648:	3001      	adds	r0, #1
 800664a:	f43f ae52 	beq.w	80062f2 <_printf_float+0xc2>
 800664e:	f108 0801 	add.w	r8, r8, #1
 8006652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006654:	3b01      	subs	r3, #1
 8006656:	4543      	cmp	r3, r8
 8006658:	dcf1      	bgt.n	800663e <_printf_float+0x40e>
 800665a:	464b      	mov	r3, r9
 800665c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006660:	e6dc      	b.n	800641c <_printf_float+0x1ec>
 8006662:	f04f 0800 	mov.w	r8, #0
 8006666:	f104 0a1a 	add.w	sl, r4, #26
 800666a:	e7f2      	b.n	8006652 <_printf_float+0x422>
 800666c:	2301      	movs	r3, #1
 800666e:	4642      	mov	r2, r8
 8006670:	e7df      	b.n	8006632 <_printf_float+0x402>
 8006672:	2301      	movs	r3, #1
 8006674:	464a      	mov	r2, r9
 8006676:	4631      	mov	r1, r6
 8006678:	4628      	mov	r0, r5
 800667a:	47b8      	blx	r7
 800667c:	3001      	adds	r0, #1
 800667e:	f43f ae38 	beq.w	80062f2 <_printf_float+0xc2>
 8006682:	f108 0801 	add.w	r8, r8, #1
 8006686:	68e3      	ldr	r3, [r4, #12]
 8006688:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800668a:	1a5b      	subs	r3, r3, r1
 800668c:	4543      	cmp	r3, r8
 800668e:	dcf0      	bgt.n	8006672 <_printf_float+0x442>
 8006690:	e6fa      	b.n	8006488 <_printf_float+0x258>
 8006692:	f04f 0800 	mov.w	r8, #0
 8006696:	f104 0919 	add.w	r9, r4, #25
 800669a:	e7f4      	b.n	8006686 <_printf_float+0x456>

0800669c <_printf_common>:
 800669c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a0:	4616      	mov	r6, r2
 80066a2:	4699      	mov	r9, r3
 80066a4:	688a      	ldr	r2, [r1, #8]
 80066a6:	690b      	ldr	r3, [r1, #16]
 80066a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066ac:	4293      	cmp	r3, r2
 80066ae:	bfb8      	it	lt
 80066b0:	4613      	movlt	r3, r2
 80066b2:	6033      	str	r3, [r6, #0]
 80066b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066b8:	4607      	mov	r7, r0
 80066ba:	460c      	mov	r4, r1
 80066bc:	b10a      	cbz	r2, 80066c2 <_printf_common+0x26>
 80066be:	3301      	adds	r3, #1
 80066c0:	6033      	str	r3, [r6, #0]
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	0699      	lsls	r1, r3, #26
 80066c6:	bf42      	ittt	mi
 80066c8:	6833      	ldrmi	r3, [r6, #0]
 80066ca:	3302      	addmi	r3, #2
 80066cc:	6033      	strmi	r3, [r6, #0]
 80066ce:	6825      	ldr	r5, [r4, #0]
 80066d0:	f015 0506 	ands.w	r5, r5, #6
 80066d4:	d106      	bne.n	80066e4 <_printf_common+0x48>
 80066d6:	f104 0a19 	add.w	sl, r4, #25
 80066da:	68e3      	ldr	r3, [r4, #12]
 80066dc:	6832      	ldr	r2, [r6, #0]
 80066de:	1a9b      	subs	r3, r3, r2
 80066e0:	42ab      	cmp	r3, r5
 80066e2:	dc26      	bgt.n	8006732 <_printf_common+0x96>
 80066e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066e8:	1e13      	subs	r3, r2, #0
 80066ea:	6822      	ldr	r2, [r4, #0]
 80066ec:	bf18      	it	ne
 80066ee:	2301      	movne	r3, #1
 80066f0:	0692      	lsls	r2, r2, #26
 80066f2:	d42b      	bmi.n	800674c <_printf_common+0xb0>
 80066f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066f8:	4649      	mov	r1, r9
 80066fa:	4638      	mov	r0, r7
 80066fc:	47c0      	blx	r8
 80066fe:	3001      	adds	r0, #1
 8006700:	d01e      	beq.n	8006740 <_printf_common+0xa4>
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	68e5      	ldr	r5, [r4, #12]
 8006706:	6832      	ldr	r2, [r6, #0]
 8006708:	f003 0306 	and.w	r3, r3, #6
 800670c:	2b04      	cmp	r3, #4
 800670e:	bf08      	it	eq
 8006710:	1aad      	subeq	r5, r5, r2
 8006712:	68a3      	ldr	r3, [r4, #8]
 8006714:	6922      	ldr	r2, [r4, #16]
 8006716:	bf0c      	ite	eq
 8006718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800671c:	2500      	movne	r5, #0
 800671e:	4293      	cmp	r3, r2
 8006720:	bfc4      	itt	gt
 8006722:	1a9b      	subgt	r3, r3, r2
 8006724:	18ed      	addgt	r5, r5, r3
 8006726:	2600      	movs	r6, #0
 8006728:	341a      	adds	r4, #26
 800672a:	42b5      	cmp	r5, r6
 800672c:	d11a      	bne.n	8006764 <_printf_common+0xc8>
 800672e:	2000      	movs	r0, #0
 8006730:	e008      	b.n	8006744 <_printf_common+0xa8>
 8006732:	2301      	movs	r3, #1
 8006734:	4652      	mov	r2, sl
 8006736:	4649      	mov	r1, r9
 8006738:	4638      	mov	r0, r7
 800673a:	47c0      	blx	r8
 800673c:	3001      	adds	r0, #1
 800673e:	d103      	bne.n	8006748 <_printf_common+0xac>
 8006740:	f04f 30ff 	mov.w	r0, #4294967295
 8006744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006748:	3501      	adds	r5, #1
 800674a:	e7c6      	b.n	80066da <_printf_common+0x3e>
 800674c:	18e1      	adds	r1, r4, r3
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	2030      	movs	r0, #48	; 0x30
 8006752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006756:	4422      	add	r2, r4
 8006758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800675c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006760:	3302      	adds	r3, #2
 8006762:	e7c7      	b.n	80066f4 <_printf_common+0x58>
 8006764:	2301      	movs	r3, #1
 8006766:	4622      	mov	r2, r4
 8006768:	4649      	mov	r1, r9
 800676a:	4638      	mov	r0, r7
 800676c:	47c0      	blx	r8
 800676e:	3001      	adds	r0, #1
 8006770:	d0e6      	beq.n	8006740 <_printf_common+0xa4>
 8006772:	3601      	adds	r6, #1
 8006774:	e7d9      	b.n	800672a <_printf_common+0x8e>
	...

08006778 <_printf_i>:
 8006778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800677c:	7e0f      	ldrb	r7, [r1, #24]
 800677e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006780:	2f78      	cmp	r7, #120	; 0x78
 8006782:	4691      	mov	r9, r2
 8006784:	4680      	mov	r8, r0
 8006786:	460c      	mov	r4, r1
 8006788:	469a      	mov	sl, r3
 800678a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800678e:	d807      	bhi.n	80067a0 <_printf_i+0x28>
 8006790:	2f62      	cmp	r7, #98	; 0x62
 8006792:	d80a      	bhi.n	80067aa <_printf_i+0x32>
 8006794:	2f00      	cmp	r7, #0
 8006796:	f000 80d8 	beq.w	800694a <_printf_i+0x1d2>
 800679a:	2f58      	cmp	r7, #88	; 0x58
 800679c:	f000 80a3 	beq.w	80068e6 <_printf_i+0x16e>
 80067a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067a8:	e03a      	b.n	8006820 <_printf_i+0xa8>
 80067aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067ae:	2b15      	cmp	r3, #21
 80067b0:	d8f6      	bhi.n	80067a0 <_printf_i+0x28>
 80067b2:	a101      	add	r1, pc, #4	; (adr r1, 80067b8 <_printf_i+0x40>)
 80067b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067b8:	08006811 	.word	0x08006811
 80067bc:	08006825 	.word	0x08006825
 80067c0:	080067a1 	.word	0x080067a1
 80067c4:	080067a1 	.word	0x080067a1
 80067c8:	080067a1 	.word	0x080067a1
 80067cc:	080067a1 	.word	0x080067a1
 80067d0:	08006825 	.word	0x08006825
 80067d4:	080067a1 	.word	0x080067a1
 80067d8:	080067a1 	.word	0x080067a1
 80067dc:	080067a1 	.word	0x080067a1
 80067e0:	080067a1 	.word	0x080067a1
 80067e4:	08006931 	.word	0x08006931
 80067e8:	08006855 	.word	0x08006855
 80067ec:	08006913 	.word	0x08006913
 80067f0:	080067a1 	.word	0x080067a1
 80067f4:	080067a1 	.word	0x080067a1
 80067f8:	08006953 	.word	0x08006953
 80067fc:	080067a1 	.word	0x080067a1
 8006800:	08006855 	.word	0x08006855
 8006804:	080067a1 	.word	0x080067a1
 8006808:	080067a1 	.word	0x080067a1
 800680c:	0800691b 	.word	0x0800691b
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	1d1a      	adds	r2, r3, #4
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	602a      	str	r2, [r5, #0]
 8006818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800681c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006820:	2301      	movs	r3, #1
 8006822:	e0a3      	b.n	800696c <_printf_i+0x1f4>
 8006824:	6820      	ldr	r0, [r4, #0]
 8006826:	6829      	ldr	r1, [r5, #0]
 8006828:	0606      	lsls	r6, r0, #24
 800682a:	f101 0304 	add.w	r3, r1, #4
 800682e:	d50a      	bpl.n	8006846 <_printf_i+0xce>
 8006830:	680e      	ldr	r6, [r1, #0]
 8006832:	602b      	str	r3, [r5, #0]
 8006834:	2e00      	cmp	r6, #0
 8006836:	da03      	bge.n	8006840 <_printf_i+0xc8>
 8006838:	232d      	movs	r3, #45	; 0x2d
 800683a:	4276      	negs	r6, r6
 800683c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006840:	485e      	ldr	r0, [pc, #376]	; (80069bc <_printf_i+0x244>)
 8006842:	230a      	movs	r3, #10
 8006844:	e019      	b.n	800687a <_printf_i+0x102>
 8006846:	680e      	ldr	r6, [r1, #0]
 8006848:	602b      	str	r3, [r5, #0]
 800684a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800684e:	bf18      	it	ne
 8006850:	b236      	sxthne	r6, r6
 8006852:	e7ef      	b.n	8006834 <_printf_i+0xbc>
 8006854:	682b      	ldr	r3, [r5, #0]
 8006856:	6820      	ldr	r0, [r4, #0]
 8006858:	1d19      	adds	r1, r3, #4
 800685a:	6029      	str	r1, [r5, #0]
 800685c:	0601      	lsls	r1, r0, #24
 800685e:	d501      	bpl.n	8006864 <_printf_i+0xec>
 8006860:	681e      	ldr	r6, [r3, #0]
 8006862:	e002      	b.n	800686a <_printf_i+0xf2>
 8006864:	0646      	lsls	r6, r0, #25
 8006866:	d5fb      	bpl.n	8006860 <_printf_i+0xe8>
 8006868:	881e      	ldrh	r6, [r3, #0]
 800686a:	4854      	ldr	r0, [pc, #336]	; (80069bc <_printf_i+0x244>)
 800686c:	2f6f      	cmp	r7, #111	; 0x6f
 800686e:	bf0c      	ite	eq
 8006870:	2308      	moveq	r3, #8
 8006872:	230a      	movne	r3, #10
 8006874:	2100      	movs	r1, #0
 8006876:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800687a:	6865      	ldr	r5, [r4, #4]
 800687c:	60a5      	str	r5, [r4, #8]
 800687e:	2d00      	cmp	r5, #0
 8006880:	bfa2      	ittt	ge
 8006882:	6821      	ldrge	r1, [r4, #0]
 8006884:	f021 0104 	bicge.w	r1, r1, #4
 8006888:	6021      	strge	r1, [r4, #0]
 800688a:	b90e      	cbnz	r6, 8006890 <_printf_i+0x118>
 800688c:	2d00      	cmp	r5, #0
 800688e:	d04d      	beq.n	800692c <_printf_i+0x1b4>
 8006890:	4615      	mov	r5, r2
 8006892:	fbb6 f1f3 	udiv	r1, r6, r3
 8006896:	fb03 6711 	mls	r7, r3, r1, r6
 800689a:	5dc7      	ldrb	r7, [r0, r7]
 800689c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068a0:	4637      	mov	r7, r6
 80068a2:	42bb      	cmp	r3, r7
 80068a4:	460e      	mov	r6, r1
 80068a6:	d9f4      	bls.n	8006892 <_printf_i+0x11a>
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d10b      	bne.n	80068c4 <_printf_i+0x14c>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	07de      	lsls	r6, r3, #31
 80068b0:	d508      	bpl.n	80068c4 <_printf_i+0x14c>
 80068b2:	6923      	ldr	r3, [r4, #16]
 80068b4:	6861      	ldr	r1, [r4, #4]
 80068b6:	4299      	cmp	r1, r3
 80068b8:	bfde      	ittt	le
 80068ba:	2330      	movle	r3, #48	; 0x30
 80068bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068c4:	1b52      	subs	r2, r2, r5
 80068c6:	6122      	str	r2, [r4, #16]
 80068c8:	f8cd a000 	str.w	sl, [sp]
 80068cc:	464b      	mov	r3, r9
 80068ce:	aa03      	add	r2, sp, #12
 80068d0:	4621      	mov	r1, r4
 80068d2:	4640      	mov	r0, r8
 80068d4:	f7ff fee2 	bl	800669c <_printf_common>
 80068d8:	3001      	adds	r0, #1
 80068da:	d14c      	bne.n	8006976 <_printf_i+0x1fe>
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295
 80068e0:	b004      	add	sp, #16
 80068e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e6:	4835      	ldr	r0, [pc, #212]	; (80069bc <_printf_i+0x244>)
 80068e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068ec:	6829      	ldr	r1, [r5, #0]
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80068f4:	6029      	str	r1, [r5, #0]
 80068f6:	061d      	lsls	r5, r3, #24
 80068f8:	d514      	bpl.n	8006924 <_printf_i+0x1ac>
 80068fa:	07df      	lsls	r7, r3, #31
 80068fc:	bf44      	itt	mi
 80068fe:	f043 0320 	orrmi.w	r3, r3, #32
 8006902:	6023      	strmi	r3, [r4, #0]
 8006904:	b91e      	cbnz	r6, 800690e <_printf_i+0x196>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	f023 0320 	bic.w	r3, r3, #32
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	2310      	movs	r3, #16
 8006910:	e7b0      	b.n	8006874 <_printf_i+0xfc>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	f043 0320 	orr.w	r3, r3, #32
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	2378      	movs	r3, #120	; 0x78
 800691c:	4828      	ldr	r0, [pc, #160]	; (80069c0 <_printf_i+0x248>)
 800691e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006922:	e7e3      	b.n	80068ec <_printf_i+0x174>
 8006924:	0659      	lsls	r1, r3, #25
 8006926:	bf48      	it	mi
 8006928:	b2b6      	uxthmi	r6, r6
 800692a:	e7e6      	b.n	80068fa <_printf_i+0x182>
 800692c:	4615      	mov	r5, r2
 800692e:	e7bb      	b.n	80068a8 <_printf_i+0x130>
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	6826      	ldr	r6, [r4, #0]
 8006934:	6961      	ldr	r1, [r4, #20]
 8006936:	1d18      	adds	r0, r3, #4
 8006938:	6028      	str	r0, [r5, #0]
 800693a:	0635      	lsls	r5, r6, #24
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	d501      	bpl.n	8006944 <_printf_i+0x1cc>
 8006940:	6019      	str	r1, [r3, #0]
 8006942:	e002      	b.n	800694a <_printf_i+0x1d2>
 8006944:	0670      	lsls	r0, r6, #25
 8006946:	d5fb      	bpl.n	8006940 <_printf_i+0x1c8>
 8006948:	8019      	strh	r1, [r3, #0]
 800694a:	2300      	movs	r3, #0
 800694c:	6123      	str	r3, [r4, #16]
 800694e:	4615      	mov	r5, r2
 8006950:	e7ba      	b.n	80068c8 <_printf_i+0x150>
 8006952:	682b      	ldr	r3, [r5, #0]
 8006954:	1d1a      	adds	r2, r3, #4
 8006956:	602a      	str	r2, [r5, #0]
 8006958:	681d      	ldr	r5, [r3, #0]
 800695a:	6862      	ldr	r2, [r4, #4]
 800695c:	2100      	movs	r1, #0
 800695e:	4628      	mov	r0, r5
 8006960:	f7f9 fc66 	bl	8000230 <memchr>
 8006964:	b108      	cbz	r0, 800696a <_printf_i+0x1f2>
 8006966:	1b40      	subs	r0, r0, r5
 8006968:	6060      	str	r0, [r4, #4]
 800696a:	6863      	ldr	r3, [r4, #4]
 800696c:	6123      	str	r3, [r4, #16]
 800696e:	2300      	movs	r3, #0
 8006970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006974:	e7a8      	b.n	80068c8 <_printf_i+0x150>
 8006976:	6923      	ldr	r3, [r4, #16]
 8006978:	462a      	mov	r2, r5
 800697a:	4649      	mov	r1, r9
 800697c:	4640      	mov	r0, r8
 800697e:	47d0      	blx	sl
 8006980:	3001      	adds	r0, #1
 8006982:	d0ab      	beq.n	80068dc <_printf_i+0x164>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	079b      	lsls	r3, r3, #30
 8006988:	d413      	bmi.n	80069b2 <_printf_i+0x23a>
 800698a:	68e0      	ldr	r0, [r4, #12]
 800698c:	9b03      	ldr	r3, [sp, #12]
 800698e:	4298      	cmp	r0, r3
 8006990:	bfb8      	it	lt
 8006992:	4618      	movlt	r0, r3
 8006994:	e7a4      	b.n	80068e0 <_printf_i+0x168>
 8006996:	2301      	movs	r3, #1
 8006998:	4632      	mov	r2, r6
 800699a:	4649      	mov	r1, r9
 800699c:	4640      	mov	r0, r8
 800699e:	47d0      	blx	sl
 80069a0:	3001      	adds	r0, #1
 80069a2:	d09b      	beq.n	80068dc <_printf_i+0x164>
 80069a4:	3501      	adds	r5, #1
 80069a6:	68e3      	ldr	r3, [r4, #12]
 80069a8:	9903      	ldr	r1, [sp, #12]
 80069aa:	1a5b      	subs	r3, r3, r1
 80069ac:	42ab      	cmp	r3, r5
 80069ae:	dcf2      	bgt.n	8006996 <_printf_i+0x21e>
 80069b0:	e7eb      	b.n	800698a <_printf_i+0x212>
 80069b2:	2500      	movs	r5, #0
 80069b4:	f104 0619 	add.w	r6, r4, #25
 80069b8:	e7f5      	b.n	80069a6 <_printf_i+0x22e>
 80069ba:	bf00      	nop
 80069bc:	0800bf26 	.word	0x0800bf26
 80069c0:	0800bf37 	.word	0x0800bf37

080069c4 <_scanf_float>:
 80069c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c8:	b087      	sub	sp, #28
 80069ca:	4617      	mov	r7, r2
 80069cc:	9303      	str	r3, [sp, #12]
 80069ce:	688b      	ldr	r3, [r1, #8]
 80069d0:	1e5a      	subs	r2, r3, #1
 80069d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80069d6:	bf83      	ittte	hi
 80069d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80069dc:	195b      	addhi	r3, r3, r5
 80069de:	9302      	strhi	r3, [sp, #8]
 80069e0:	2300      	movls	r3, #0
 80069e2:	bf86      	itte	hi
 80069e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80069e8:	608b      	strhi	r3, [r1, #8]
 80069ea:	9302      	strls	r3, [sp, #8]
 80069ec:	680b      	ldr	r3, [r1, #0]
 80069ee:	468b      	mov	fp, r1
 80069f0:	2500      	movs	r5, #0
 80069f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80069f6:	f84b 3b1c 	str.w	r3, [fp], #28
 80069fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80069fe:	4680      	mov	r8, r0
 8006a00:	460c      	mov	r4, r1
 8006a02:	465e      	mov	r6, fp
 8006a04:	46aa      	mov	sl, r5
 8006a06:	46a9      	mov	r9, r5
 8006a08:	9501      	str	r5, [sp, #4]
 8006a0a:	68a2      	ldr	r2, [r4, #8]
 8006a0c:	b152      	cbz	r2, 8006a24 <_scanf_float+0x60>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b4e      	cmp	r3, #78	; 0x4e
 8006a14:	d864      	bhi.n	8006ae0 <_scanf_float+0x11c>
 8006a16:	2b40      	cmp	r3, #64	; 0x40
 8006a18:	d83c      	bhi.n	8006a94 <_scanf_float+0xd0>
 8006a1a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006a1e:	b2c8      	uxtb	r0, r1
 8006a20:	280e      	cmp	r0, #14
 8006a22:	d93a      	bls.n	8006a9a <_scanf_float+0xd6>
 8006a24:	f1b9 0f00 	cmp.w	r9, #0
 8006a28:	d003      	beq.n	8006a32 <_scanf_float+0x6e>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a36:	f1ba 0f01 	cmp.w	sl, #1
 8006a3a:	f200 8113 	bhi.w	8006c64 <_scanf_float+0x2a0>
 8006a3e:	455e      	cmp	r6, fp
 8006a40:	f200 8105 	bhi.w	8006c4e <_scanf_float+0x28a>
 8006a44:	2501      	movs	r5, #1
 8006a46:	4628      	mov	r0, r5
 8006a48:	b007      	add	sp, #28
 8006a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006a52:	2a0d      	cmp	r2, #13
 8006a54:	d8e6      	bhi.n	8006a24 <_scanf_float+0x60>
 8006a56:	a101      	add	r1, pc, #4	; (adr r1, 8006a5c <_scanf_float+0x98>)
 8006a58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a5c:	08006b9b 	.word	0x08006b9b
 8006a60:	08006a25 	.word	0x08006a25
 8006a64:	08006a25 	.word	0x08006a25
 8006a68:	08006a25 	.word	0x08006a25
 8006a6c:	08006bfb 	.word	0x08006bfb
 8006a70:	08006bd3 	.word	0x08006bd3
 8006a74:	08006a25 	.word	0x08006a25
 8006a78:	08006a25 	.word	0x08006a25
 8006a7c:	08006ba9 	.word	0x08006ba9
 8006a80:	08006a25 	.word	0x08006a25
 8006a84:	08006a25 	.word	0x08006a25
 8006a88:	08006a25 	.word	0x08006a25
 8006a8c:	08006a25 	.word	0x08006a25
 8006a90:	08006b61 	.word	0x08006b61
 8006a94:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006a98:	e7db      	b.n	8006a52 <_scanf_float+0x8e>
 8006a9a:	290e      	cmp	r1, #14
 8006a9c:	d8c2      	bhi.n	8006a24 <_scanf_float+0x60>
 8006a9e:	a001      	add	r0, pc, #4	; (adr r0, 8006aa4 <_scanf_float+0xe0>)
 8006aa0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006aa4:	08006b53 	.word	0x08006b53
 8006aa8:	08006a25 	.word	0x08006a25
 8006aac:	08006b53 	.word	0x08006b53
 8006ab0:	08006be7 	.word	0x08006be7
 8006ab4:	08006a25 	.word	0x08006a25
 8006ab8:	08006b01 	.word	0x08006b01
 8006abc:	08006b3d 	.word	0x08006b3d
 8006ac0:	08006b3d 	.word	0x08006b3d
 8006ac4:	08006b3d 	.word	0x08006b3d
 8006ac8:	08006b3d 	.word	0x08006b3d
 8006acc:	08006b3d 	.word	0x08006b3d
 8006ad0:	08006b3d 	.word	0x08006b3d
 8006ad4:	08006b3d 	.word	0x08006b3d
 8006ad8:	08006b3d 	.word	0x08006b3d
 8006adc:	08006b3d 	.word	0x08006b3d
 8006ae0:	2b6e      	cmp	r3, #110	; 0x6e
 8006ae2:	d809      	bhi.n	8006af8 <_scanf_float+0x134>
 8006ae4:	2b60      	cmp	r3, #96	; 0x60
 8006ae6:	d8b2      	bhi.n	8006a4e <_scanf_float+0x8a>
 8006ae8:	2b54      	cmp	r3, #84	; 0x54
 8006aea:	d077      	beq.n	8006bdc <_scanf_float+0x218>
 8006aec:	2b59      	cmp	r3, #89	; 0x59
 8006aee:	d199      	bne.n	8006a24 <_scanf_float+0x60>
 8006af0:	2d07      	cmp	r5, #7
 8006af2:	d197      	bne.n	8006a24 <_scanf_float+0x60>
 8006af4:	2508      	movs	r5, #8
 8006af6:	e029      	b.n	8006b4c <_scanf_float+0x188>
 8006af8:	2b74      	cmp	r3, #116	; 0x74
 8006afa:	d06f      	beq.n	8006bdc <_scanf_float+0x218>
 8006afc:	2b79      	cmp	r3, #121	; 0x79
 8006afe:	e7f6      	b.n	8006aee <_scanf_float+0x12a>
 8006b00:	6821      	ldr	r1, [r4, #0]
 8006b02:	05c8      	lsls	r0, r1, #23
 8006b04:	d51a      	bpl.n	8006b3c <_scanf_float+0x178>
 8006b06:	9b02      	ldr	r3, [sp, #8]
 8006b08:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b0c:	6021      	str	r1, [r4, #0]
 8006b0e:	f109 0901 	add.w	r9, r9, #1
 8006b12:	b11b      	cbz	r3, 8006b1c <_scanf_float+0x158>
 8006b14:	3b01      	subs	r3, #1
 8006b16:	3201      	adds	r2, #1
 8006b18:	9302      	str	r3, [sp, #8]
 8006b1a:	60a2      	str	r2, [r4, #8]
 8006b1c:	68a3      	ldr	r3, [r4, #8]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	60a3      	str	r3, [r4, #8]
 8006b22:	6923      	ldr	r3, [r4, #16]
 8006b24:	3301      	adds	r3, #1
 8006b26:	6123      	str	r3, [r4, #16]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	607b      	str	r3, [r7, #4]
 8006b30:	f340 8084 	ble.w	8006c3c <_scanf_float+0x278>
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	3301      	adds	r3, #1
 8006b38:	603b      	str	r3, [r7, #0]
 8006b3a:	e766      	b.n	8006a0a <_scanf_float+0x46>
 8006b3c:	eb1a 0f05 	cmn.w	sl, r5
 8006b40:	f47f af70 	bne.w	8006a24 <_scanf_float+0x60>
 8006b44:	6822      	ldr	r2, [r4, #0]
 8006b46:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006b4a:	6022      	str	r2, [r4, #0]
 8006b4c:	f806 3b01 	strb.w	r3, [r6], #1
 8006b50:	e7e4      	b.n	8006b1c <_scanf_float+0x158>
 8006b52:	6822      	ldr	r2, [r4, #0]
 8006b54:	0610      	lsls	r0, r2, #24
 8006b56:	f57f af65 	bpl.w	8006a24 <_scanf_float+0x60>
 8006b5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b5e:	e7f4      	b.n	8006b4a <_scanf_float+0x186>
 8006b60:	f1ba 0f00 	cmp.w	sl, #0
 8006b64:	d10e      	bne.n	8006b84 <_scanf_float+0x1c0>
 8006b66:	f1b9 0f00 	cmp.w	r9, #0
 8006b6a:	d10e      	bne.n	8006b8a <_scanf_float+0x1c6>
 8006b6c:	6822      	ldr	r2, [r4, #0]
 8006b6e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b76:	d108      	bne.n	8006b8a <_scanf_float+0x1c6>
 8006b78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b7c:	6022      	str	r2, [r4, #0]
 8006b7e:	f04f 0a01 	mov.w	sl, #1
 8006b82:	e7e3      	b.n	8006b4c <_scanf_float+0x188>
 8006b84:	f1ba 0f02 	cmp.w	sl, #2
 8006b88:	d055      	beq.n	8006c36 <_scanf_float+0x272>
 8006b8a:	2d01      	cmp	r5, #1
 8006b8c:	d002      	beq.n	8006b94 <_scanf_float+0x1d0>
 8006b8e:	2d04      	cmp	r5, #4
 8006b90:	f47f af48 	bne.w	8006a24 <_scanf_float+0x60>
 8006b94:	3501      	adds	r5, #1
 8006b96:	b2ed      	uxtb	r5, r5
 8006b98:	e7d8      	b.n	8006b4c <_scanf_float+0x188>
 8006b9a:	f1ba 0f01 	cmp.w	sl, #1
 8006b9e:	f47f af41 	bne.w	8006a24 <_scanf_float+0x60>
 8006ba2:	f04f 0a02 	mov.w	sl, #2
 8006ba6:	e7d1      	b.n	8006b4c <_scanf_float+0x188>
 8006ba8:	b97d      	cbnz	r5, 8006bca <_scanf_float+0x206>
 8006baa:	f1b9 0f00 	cmp.w	r9, #0
 8006bae:	f47f af3c 	bne.w	8006a2a <_scanf_float+0x66>
 8006bb2:	6822      	ldr	r2, [r4, #0]
 8006bb4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006bb8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006bbc:	f47f af39 	bne.w	8006a32 <_scanf_float+0x6e>
 8006bc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bc4:	6022      	str	r2, [r4, #0]
 8006bc6:	2501      	movs	r5, #1
 8006bc8:	e7c0      	b.n	8006b4c <_scanf_float+0x188>
 8006bca:	2d03      	cmp	r5, #3
 8006bcc:	d0e2      	beq.n	8006b94 <_scanf_float+0x1d0>
 8006bce:	2d05      	cmp	r5, #5
 8006bd0:	e7de      	b.n	8006b90 <_scanf_float+0x1cc>
 8006bd2:	2d02      	cmp	r5, #2
 8006bd4:	f47f af26 	bne.w	8006a24 <_scanf_float+0x60>
 8006bd8:	2503      	movs	r5, #3
 8006bda:	e7b7      	b.n	8006b4c <_scanf_float+0x188>
 8006bdc:	2d06      	cmp	r5, #6
 8006bde:	f47f af21 	bne.w	8006a24 <_scanf_float+0x60>
 8006be2:	2507      	movs	r5, #7
 8006be4:	e7b2      	b.n	8006b4c <_scanf_float+0x188>
 8006be6:	6822      	ldr	r2, [r4, #0]
 8006be8:	0591      	lsls	r1, r2, #22
 8006bea:	f57f af1b 	bpl.w	8006a24 <_scanf_float+0x60>
 8006bee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006bf2:	6022      	str	r2, [r4, #0]
 8006bf4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bf8:	e7a8      	b.n	8006b4c <_scanf_float+0x188>
 8006bfa:	6822      	ldr	r2, [r4, #0]
 8006bfc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006c00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c04:	d006      	beq.n	8006c14 <_scanf_float+0x250>
 8006c06:	0550      	lsls	r0, r2, #21
 8006c08:	f57f af0c 	bpl.w	8006a24 <_scanf_float+0x60>
 8006c0c:	f1b9 0f00 	cmp.w	r9, #0
 8006c10:	f43f af0f 	beq.w	8006a32 <_scanf_float+0x6e>
 8006c14:	0591      	lsls	r1, r2, #22
 8006c16:	bf58      	it	pl
 8006c18:	9901      	ldrpl	r1, [sp, #4]
 8006c1a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c1e:	bf58      	it	pl
 8006c20:	eba9 0101 	subpl.w	r1, r9, r1
 8006c24:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006c28:	bf58      	it	pl
 8006c2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006c2e:	6022      	str	r2, [r4, #0]
 8006c30:	f04f 0900 	mov.w	r9, #0
 8006c34:	e78a      	b.n	8006b4c <_scanf_float+0x188>
 8006c36:	f04f 0a03 	mov.w	sl, #3
 8006c3a:	e787      	b.n	8006b4c <_scanf_float+0x188>
 8006c3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006c40:	4639      	mov	r1, r7
 8006c42:	4640      	mov	r0, r8
 8006c44:	4798      	blx	r3
 8006c46:	2800      	cmp	r0, #0
 8006c48:	f43f aedf 	beq.w	8006a0a <_scanf_float+0x46>
 8006c4c:	e6ea      	b.n	8006a24 <_scanf_float+0x60>
 8006c4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c56:	463a      	mov	r2, r7
 8006c58:	4640      	mov	r0, r8
 8006c5a:	4798      	blx	r3
 8006c5c:	6923      	ldr	r3, [r4, #16]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	6123      	str	r3, [r4, #16]
 8006c62:	e6ec      	b.n	8006a3e <_scanf_float+0x7a>
 8006c64:	1e6b      	subs	r3, r5, #1
 8006c66:	2b06      	cmp	r3, #6
 8006c68:	d825      	bhi.n	8006cb6 <_scanf_float+0x2f2>
 8006c6a:	2d02      	cmp	r5, #2
 8006c6c:	d836      	bhi.n	8006cdc <_scanf_float+0x318>
 8006c6e:	455e      	cmp	r6, fp
 8006c70:	f67f aee8 	bls.w	8006a44 <_scanf_float+0x80>
 8006c74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c7c:	463a      	mov	r2, r7
 8006c7e:	4640      	mov	r0, r8
 8006c80:	4798      	blx	r3
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	6123      	str	r3, [r4, #16]
 8006c88:	e7f1      	b.n	8006c6e <_scanf_float+0x2aa>
 8006c8a:	9802      	ldr	r0, [sp, #8]
 8006c8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c90:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006c94:	9002      	str	r0, [sp, #8]
 8006c96:	463a      	mov	r2, r7
 8006c98:	4640      	mov	r0, r8
 8006c9a:	4798      	blx	r3
 8006c9c:	6923      	ldr	r3, [r4, #16]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	6123      	str	r3, [r4, #16]
 8006ca2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ca6:	fa5f fa8a 	uxtb.w	sl, sl
 8006caa:	f1ba 0f02 	cmp.w	sl, #2
 8006cae:	d1ec      	bne.n	8006c8a <_scanf_float+0x2c6>
 8006cb0:	3d03      	subs	r5, #3
 8006cb2:	b2ed      	uxtb	r5, r5
 8006cb4:	1b76      	subs	r6, r6, r5
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	05da      	lsls	r2, r3, #23
 8006cba:	d52f      	bpl.n	8006d1c <_scanf_float+0x358>
 8006cbc:	055b      	lsls	r3, r3, #21
 8006cbe:	d510      	bpl.n	8006ce2 <_scanf_float+0x31e>
 8006cc0:	455e      	cmp	r6, fp
 8006cc2:	f67f aebf 	bls.w	8006a44 <_scanf_float+0x80>
 8006cc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cce:	463a      	mov	r2, r7
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	4798      	blx	r3
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	6123      	str	r3, [r4, #16]
 8006cda:	e7f1      	b.n	8006cc0 <_scanf_float+0x2fc>
 8006cdc:	46aa      	mov	sl, r5
 8006cde:	9602      	str	r6, [sp, #8]
 8006ce0:	e7df      	b.n	8006ca2 <_scanf_float+0x2de>
 8006ce2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ce6:	6923      	ldr	r3, [r4, #16]
 8006ce8:	2965      	cmp	r1, #101	; 0x65
 8006cea:	f103 33ff 	add.w	r3, r3, #4294967295
 8006cee:	f106 35ff 	add.w	r5, r6, #4294967295
 8006cf2:	6123      	str	r3, [r4, #16]
 8006cf4:	d00c      	beq.n	8006d10 <_scanf_float+0x34c>
 8006cf6:	2945      	cmp	r1, #69	; 0x45
 8006cf8:	d00a      	beq.n	8006d10 <_scanf_float+0x34c>
 8006cfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cfe:	463a      	mov	r2, r7
 8006d00:	4640      	mov	r0, r8
 8006d02:	4798      	blx	r3
 8006d04:	6923      	ldr	r3, [r4, #16]
 8006d06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	1eb5      	subs	r5, r6, #2
 8006d0e:	6123      	str	r3, [r4, #16]
 8006d10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d14:	463a      	mov	r2, r7
 8006d16:	4640      	mov	r0, r8
 8006d18:	4798      	blx	r3
 8006d1a:	462e      	mov	r6, r5
 8006d1c:	6825      	ldr	r5, [r4, #0]
 8006d1e:	f015 0510 	ands.w	r5, r5, #16
 8006d22:	d159      	bne.n	8006dd8 <_scanf_float+0x414>
 8006d24:	7035      	strb	r5, [r6, #0]
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d30:	d11b      	bne.n	8006d6a <_scanf_float+0x3a6>
 8006d32:	9b01      	ldr	r3, [sp, #4]
 8006d34:	454b      	cmp	r3, r9
 8006d36:	eba3 0209 	sub.w	r2, r3, r9
 8006d3a:	d123      	bne.n	8006d84 <_scanf_float+0x3c0>
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	4659      	mov	r1, fp
 8006d40:	4640      	mov	r0, r8
 8006d42:	f000 fe97 	bl	8007a74 <_strtod_r>
 8006d46:	6822      	ldr	r2, [r4, #0]
 8006d48:	9b03      	ldr	r3, [sp, #12]
 8006d4a:	f012 0f02 	tst.w	r2, #2
 8006d4e:	ec57 6b10 	vmov	r6, r7, d0
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	d021      	beq.n	8006d9a <_scanf_float+0x3d6>
 8006d56:	9903      	ldr	r1, [sp, #12]
 8006d58:	1d1a      	adds	r2, r3, #4
 8006d5a:	600a      	str	r2, [r1, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	e9c3 6700 	strd	r6, r7, [r3]
 8006d62:	68e3      	ldr	r3, [r4, #12]
 8006d64:	3301      	adds	r3, #1
 8006d66:	60e3      	str	r3, [r4, #12]
 8006d68:	e66d      	b.n	8006a46 <_scanf_float+0x82>
 8006d6a:	9b04      	ldr	r3, [sp, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0e5      	beq.n	8006d3c <_scanf_float+0x378>
 8006d70:	9905      	ldr	r1, [sp, #20]
 8006d72:	230a      	movs	r3, #10
 8006d74:	462a      	mov	r2, r5
 8006d76:	3101      	adds	r1, #1
 8006d78:	4640      	mov	r0, r8
 8006d7a:	f000 ff03 	bl	8007b84 <_strtol_r>
 8006d7e:	9b04      	ldr	r3, [sp, #16]
 8006d80:	9e05      	ldr	r6, [sp, #20]
 8006d82:	1ac2      	subs	r2, r0, r3
 8006d84:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d88:	429e      	cmp	r6, r3
 8006d8a:	bf28      	it	cs
 8006d8c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006d90:	4912      	ldr	r1, [pc, #72]	; (8006ddc <_scanf_float+0x418>)
 8006d92:	4630      	mov	r0, r6
 8006d94:	f000 f82c 	bl	8006df0 <siprintf>
 8006d98:	e7d0      	b.n	8006d3c <_scanf_float+0x378>
 8006d9a:	9903      	ldr	r1, [sp, #12]
 8006d9c:	f012 0f04 	tst.w	r2, #4
 8006da0:	f103 0204 	add.w	r2, r3, #4
 8006da4:	600a      	str	r2, [r1, #0]
 8006da6:	d1d9      	bne.n	8006d5c <_scanf_float+0x398>
 8006da8:	f8d3 8000 	ldr.w	r8, [r3]
 8006dac:	ee10 2a10 	vmov	r2, s0
 8006db0:	ee10 0a10 	vmov	r0, s0
 8006db4:	463b      	mov	r3, r7
 8006db6:	4639      	mov	r1, r7
 8006db8:	f7f9 fee0 	bl	8000b7c <__aeabi_dcmpun>
 8006dbc:	b128      	cbz	r0, 8006dca <_scanf_float+0x406>
 8006dbe:	4808      	ldr	r0, [pc, #32]	; (8006de0 <_scanf_float+0x41c>)
 8006dc0:	f000 f810 	bl	8006de4 <nanf>
 8006dc4:	ed88 0a00 	vstr	s0, [r8]
 8006dc8:	e7cb      	b.n	8006d62 <_scanf_float+0x39e>
 8006dca:	4630      	mov	r0, r6
 8006dcc:	4639      	mov	r1, r7
 8006dce:	f7f9 ff33 	bl	8000c38 <__aeabi_d2f>
 8006dd2:	f8c8 0000 	str.w	r0, [r8]
 8006dd6:	e7c4      	b.n	8006d62 <_scanf_float+0x39e>
 8006dd8:	2500      	movs	r5, #0
 8006dda:	e634      	b.n	8006a46 <_scanf_float+0x82>
 8006ddc:	0800bf48 	.word	0x0800bf48
 8006de0:	0800c350 	.word	0x0800c350

08006de4 <nanf>:
 8006de4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006dec <nanf+0x8>
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	7fc00000 	.word	0x7fc00000

08006df0 <siprintf>:
 8006df0:	b40e      	push	{r1, r2, r3}
 8006df2:	b500      	push	{lr}
 8006df4:	b09c      	sub	sp, #112	; 0x70
 8006df6:	ab1d      	add	r3, sp, #116	; 0x74
 8006df8:	9002      	str	r0, [sp, #8]
 8006dfa:	9006      	str	r0, [sp, #24]
 8006dfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e00:	4809      	ldr	r0, [pc, #36]	; (8006e28 <siprintf+0x38>)
 8006e02:	9107      	str	r1, [sp, #28]
 8006e04:	9104      	str	r1, [sp, #16]
 8006e06:	4909      	ldr	r1, [pc, #36]	; (8006e2c <siprintf+0x3c>)
 8006e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e0c:	9105      	str	r1, [sp, #20]
 8006e0e:	6800      	ldr	r0, [r0, #0]
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	a902      	add	r1, sp, #8
 8006e14:	f002 fee2 	bl	8009bdc <_svfiprintf_r>
 8006e18:	9b02      	ldr	r3, [sp, #8]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	b01c      	add	sp, #112	; 0x70
 8006e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e24:	b003      	add	sp, #12
 8006e26:	4770      	bx	lr
 8006e28:	2000001c 	.word	0x2000001c
 8006e2c:	ffff0208 	.word	0xffff0208

08006e30 <sulp>:
 8006e30:	b570      	push	{r4, r5, r6, lr}
 8006e32:	4604      	mov	r4, r0
 8006e34:	460d      	mov	r5, r1
 8006e36:	ec45 4b10 	vmov	d0, r4, r5
 8006e3a:	4616      	mov	r6, r2
 8006e3c:	f002 fc2c 	bl	8009698 <__ulp>
 8006e40:	ec51 0b10 	vmov	r0, r1, d0
 8006e44:	b17e      	cbz	r6, 8006e66 <sulp+0x36>
 8006e46:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	dd09      	ble.n	8006e66 <sulp+0x36>
 8006e52:	051b      	lsls	r3, r3, #20
 8006e54:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006e58:	2400      	movs	r4, #0
 8006e5a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006e5e:	4622      	mov	r2, r4
 8006e60:	462b      	mov	r3, r5
 8006e62:	f7f9 fbf1 	bl	8000648 <__aeabi_dmul>
 8006e66:	bd70      	pop	{r4, r5, r6, pc}

08006e68 <_strtod_l>:
 8006e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6c:	ed2d 8b02 	vpush	{d8}
 8006e70:	b09d      	sub	sp, #116	; 0x74
 8006e72:	461f      	mov	r7, r3
 8006e74:	2300      	movs	r3, #0
 8006e76:	9318      	str	r3, [sp, #96]	; 0x60
 8006e78:	4ba2      	ldr	r3, [pc, #648]	; (8007104 <_strtod_l+0x29c>)
 8006e7a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	9305      	str	r3, [sp, #20]
 8006e80:	4604      	mov	r4, r0
 8006e82:	4618      	mov	r0, r3
 8006e84:	4688      	mov	r8, r1
 8006e86:	f7f9 f9cb 	bl	8000220 <strlen>
 8006e8a:	f04f 0a00 	mov.w	sl, #0
 8006e8e:	4605      	mov	r5, r0
 8006e90:	f04f 0b00 	mov.w	fp, #0
 8006e94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006e98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e9a:	781a      	ldrb	r2, [r3, #0]
 8006e9c:	2a2b      	cmp	r2, #43	; 0x2b
 8006e9e:	d04e      	beq.n	8006f3e <_strtod_l+0xd6>
 8006ea0:	d83b      	bhi.n	8006f1a <_strtod_l+0xb2>
 8006ea2:	2a0d      	cmp	r2, #13
 8006ea4:	d834      	bhi.n	8006f10 <_strtod_l+0xa8>
 8006ea6:	2a08      	cmp	r2, #8
 8006ea8:	d834      	bhi.n	8006f14 <_strtod_l+0xac>
 8006eaa:	2a00      	cmp	r2, #0
 8006eac:	d03e      	beq.n	8006f2c <_strtod_l+0xc4>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	930a      	str	r3, [sp, #40]	; 0x28
 8006eb2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006eb4:	7833      	ldrb	r3, [r6, #0]
 8006eb6:	2b30      	cmp	r3, #48	; 0x30
 8006eb8:	f040 80b0 	bne.w	800701c <_strtod_l+0x1b4>
 8006ebc:	7873      	ldrb	r3, [r6, #1]
 8006ebe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ec2:	2b58      	cmp	r3, #88	; 0x58
 8006ec4:	d168      	bne.n	8006f98 <_strtod_l+0x130>
 8006ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec8:	9301      	str	r3, [sp, #4]
 8006eca:	ab18      	add	r3, sp, #96	; 0x60
 8006ecc:	9702      	str	r7, [sp, #8]
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	4a8d      	ldr	r2, [pc, #564]	; (8007108 <_strtod_l+0x2a0>)
 8006ed2:	ab19      	add	r3, sp, #100	; 0x64
 8006ed4:	a917      	add	r1, sp, #92	; 0x5c
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f001 fd38 	bl	800894c <__gethex>
 8006edc:	f010 0707 	ands.w	r7, r0, #7
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	d005      	beq.n	8006ef0 <_strtod_l+0x88>
 8006ee4:	2f06      	cmp	r7, #6
 8006ee6:	d12c      	bne.n	8006f42 <_strtod_l+0xda>
 8006ee8:	3601      	adds	r6, #1
 8006eea:	2300      	movs	r3, #0
 8006eec:	9617      	str	r6, [sp, #92]	; 0x5c
 8006eee:	930a      	str	r3, [sp, #40]	; 0x28
 8006ef0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f040 8590 	bne.w	8007a18 <_strtod_l+0xbb0>
 8006ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006efa:	b1eb      	cbz	r3, 8006f38 <_strtod_l+0xd0>
 8006efc:	4652      	mov	r2, sl
 8006efe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f02:	ec43 2b10 	vmov	d0, r2, r3
 8006f06:	b01d      	add	sp, #116	; 0x74
 8006f08:	ecbd 8b02 	vpop	{d8}
 8006f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f10:	2a20      	cmp	r2, #32
 8006f12:	d1cc      	bne.n	8006eae <_strtod_l+0x46>
 8006f14:	3301      	adds	r3, #1
 8006f16:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f18:	e7be      	b.n	8006e98 <_strtod_l+0x30>
 8006f1a:	2a2d      	cmp	r2, #45	; 0x2d
 8006f1c:	d1c7      	bne.n	8006eae <_strtod_l+0x46>
 8006f1e:	2201      	movs	r2, #1
 8006f20:	920a      	str	r2, [sp, #40]	; 0x28
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f26:	785b      	ldrb	r3, [r3, #1]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1c2      	bne.n	8006eb2 <_strtod_l+0x4a>
 8006f2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f2e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f040 856e 	bne.w	8007a14 <_strtod_l+0xbac>
 8006f38:	4652      	mov	r2, sl
 8006f3a:	465b      	mov	r3, fp
 8006f3c:	e7e1      	b.n	8006f02 <_strtod_l+0x9a>
 8006f3e:	2200      	movs	r2, #0
 8006f40:	e7ee      	b.n	8006f20 <_strtod_l+0xb8>
 8006f42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f44:	b13a      	cbz	r2, 8006f56 <_strtod_l+0xee>
 8006f46:	2135      	movs	r1, #53	; 0x35
 8006f48:	a81a      	add	r0, sp, #104	; 0x68
 8006f4a:	f002 fcb0 	bl	80098ae <__copybits>
 8006f4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f50:	4620      	mov	r0, r4
 8006f52:	f002 f86f 	bl	8009034 <_Bfree>
 8006f56:	3f01      	subs	r7, #1
 8006f58:	2f04      	cmp	r7, #4
 8006f5a:	d806      	bhi.n	8006f6a <_strtod_l+0x102>
 8006f5c:	e8df f007 	tbb	[pc, r7]
 8006f60:	1714030a 	.word	0x1714030a
 8006f64:	0a          	.byte	0x0a
 8006f65:	00          	.byte	0x00
 8006f66:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006f6a:	0728      	lsls	r0, r5, #28
 8006f6c:	d5c0      	bpl.n	8006ef0 <_strtod_l+0x88>
 8006f6e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006f72:	e7bd      	b.n	8006ef0 <_strtod_l+0x88>
 8006f74:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006f78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f82:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006f86:	e7f0      	b.n	8006f6a <_strtod_l+0x102>
 8006f88:	f8df b180 	ldr.w	fp, [pc, #384]	; 800710c <_strtod_l+0x2a4>
 8006f8c:	e7ed      	b.n	8006f6a <_strtod_l+0x102>
 8006f8e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006f92:	f04f 3aff 	mov.w	sl, #4294967295
 8006f96:	e7e8      	b.n	8006f6a <_strtod_l+0x102>
 8006f98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f9e:	785b      	ldrb	r3, [r3, #1]
 8006fa0:	2b30      	cmp	r3, #48	; 0x30
 8006fa2:	d0f9      	beq.n	8006f98 <_strtod_l+0x130>
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d0a3      	beq.n	8006ef0 <_strtod_l+0x88>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	f04f 0900 	mov.w	r9, #0
 8006fae:	9304      	str	r3, [sp, #16]
 8006fb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fb2:	9308      	str	r3, [sp, #32]
 8006fb4:	f8cd 901c 	str.w	r9, [sp, #28]
 8006fb8:	464f      	mov	r7, r9
 8006fba:	220a      	movs	r2, #10
 8006fbc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006fbe:	7806      	ldrb	r6, [r0, #0]
 8006fc0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006fc4:	b2d9      	uxtb	r1, r3
 8006fc6:	2909      	cmp	r1, #9
 8006fc8:	d92a      	bls.n	8007020 <_strtod_l+0x1b8>
 8006fca:	9905      	ldr	r1, [sp, #20]
 8006fcc:	462a      	mov	r2, r5
 8006fce:	f002 ff1f 	bl	8009e10 <strncmp>
 8006fd2:	b398      	cbz	r0, 800703c <_strtod_l+0x1d4>
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	4632      	mov	r2, r6
 8006fd8:	463d      	mov	r5, r7
 8006fda:	9005      	str	r0, [sp, #20]
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2a65      	cmp	r2, #101	; 0x65
 8006fe0:	d001      	beq.n	8006fe6 <_strtod_l+0x17e>
 8006fe2:	2a45      	cmp	r2, #69	; 0x45
 8006fe4:	d118      	bne.n	8007018 <_strtod_l+0x1b0>
 8006fe6:	b91d      	cbnz	r5, 8006ff0 <_strtod_l+0x188>
 8006fe8:	9a04      	ldr	r2, [sp, #16]
 8006fea:	4302      	orrs	r2, r0
 8006fec:	d09e      	beq.n	8006f2c <_strtod_l+0xc4>
 8006fee:	2500      	movs	r5, #0
 8006ff0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006ff4:	f108 0201 	add.w	r2, r8, #1
 8006ff8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ffa:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006ffe:	2a2b      	cmp	r2, #43	; 0x2b
 8007000:	d075      	beq.n	80070ee <_strtod_l+0x286>
 8007002:	2a2d      	cmp	r2, #45	; 0x2d
 8007004:	d07b      	beq.n	80070fe <_strtod_l+0x296>
 8007006:	f04f 0c00 	mov.w	ip, #0
 800700a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800700e:	2909      	cmp	r1, #9
 8007010:	f240 8082 	bls.w	8007118 <_strtod_l+0x2b0>
 8007014:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007018:	2600      	movs	r6, #0
 800701a:	e09d      	b.n	8007158 <_strtod_l+0x2f0>
 800701c:	2300      	movs	r3, #0
 800701e:	e7c4      	b.n	8006faa <_strtod_l+0x142>
 8007020:	2f08      	cmp	r7, #8
 8007022:	bfd8      	it	le
 8007024:	9907      	ldrle	r1, [sp, #28]
 8007026:	f100 0001 	add.w	r0, r0, #1
 800702a:	bfda      	itte	le
 800702c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007030:	9307      	strle	r3, [sp, #28]
 8007032:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007036:	3701      	adds	r7, #1
 8007038:	9017      	str	r0, [sp, #92]	; 0x5c
 800703a:	e7bf      	b.n	8006fbc <_strtod_l+0x154>
 800703c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800703e:	195a      	adds	r2, r3, r5
 8007040:	9217      	str	r2, [sp, #92]	; 0x5c
 8007042:	5d5a      	ldrb	r2, [r3, r5]
 8007044:	2f00      	cmp	r7, #0
 8007046:	d037      	beq.n	80070b8 <_strtod_l+0x250>
 8007048:	9005      	str	r0, [sp, #20]
 800704a:	463d      	mov	r5, r7
 800704c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007050:	2b09      	cmp	r3, #9
 8007052:	d912      	bls.n	800707a <_strtod_l+0x212>
 8007054:	2301      	movs	r3, #1
 8007056:	e7c2      	b.n	8006fde <_strtod_l+0x176>
 8007058:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	9217      	str	r2, [sp, #92]	; 0x5c
 800705e:	785a      	ldrb	r2, [r3, #1]
 8007060:	3001      	adds	r0, #1
 8007062:	2a30      	cmp	r2, #48	; 0x30
 8007064:	d0f8      	beq.n	8007058 <_strtod_l+0x1f0>
 8007066:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800706a:	2b08      	cmp	r3, #8
 800706c:	f200 84d9 	bhi.w	8007a22 <_strtod_l+0xbba>
 8007070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007072:	9005      	str	r0, [sp, #20]
 8007074:	2000      	movs	r0, #0
 8007076:	9308      	str	r3, [sp, #32]
 8007078:	4605      	mov	r5, r0
 800707a:	3a30      	subs	r2, #48	; 0x30
 800707c:	f100 0301 	add.w	r3, r0, #1
 8007080:	d014      	beq.n	80070ac <_strtod_l+0x244>
 8007082:	9905      	ldr	r1, [sp, #20]
 8007084:	4419      	add	r1, r3
 8007086:	9105      	str	r1, [sp, #20]
 8007088:	462b      	mov	r3, r5
 800708a:	eb00 0e05 	add.w	lr, r0, r5
 800708e:	210a      	movs	r1, #10
 8007090:	4573      	cmp	r3, lr
 8007092:	d113      	bne.n	80070bc <_strtod_l+0x254>
 8007094:	182b      	adds	r3, r5, r0
 8007096:	2b08      	cmp	r3, #8
 8007098:	f105 0501 	add.w	r5, r5, #1
 800709c:	4405      	add	r5, r0
 800709e:	dc1c      	bgt.n	80070da <_strtod_l+0x272>
 80070a0:	9907      	ldr	r1, [sp, #28]
 80070a2:	230a      	movs	r3, #10
 80070a4:	fb03 2301 	mla	r3, r3, r1, r2
 80070a8:	9307      	str	r3, [sp, #28]
 80070aa:	2300      	movs	r3, #0
 80070ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070ae:	1c51      	adds	r1, r2, #1
 80070b0:	9117      	str	r1, [sp, #92]	; 0x5c
 80070b2:	7852      	ldrb	r2, [r2, #1]
 80070b4:	4618      	mov	r0, r3
 80070b6:	e7c9      	b.n	800704c <_strtod_l+0x1e4>
 80070b8:	4638      	mov	r0, r7
 80070ba:	e7d2      	b.n	8007062 <_strtod_l+0x1fa>
 80070bc:	2b08      	cmp	r3, #8
 80070be:	dc04      	bgt.n	80070ca <_strtod_l+0x262>
 80070c0:	9e07      	ldr	r6, [sp, #28]
 80070c2:	434e      	muls	r6, r1
 80070c4:	9607      	str	r6, [sp, #28]
 80070c6:	3301      	adds	r3, #1
 80070c8:	e7e2      	b.n	8007090 <_strtod_l+0x228>
 80070ca:	f103 0c01 	add.w	ip, r3, #1
 80070ce:	f1bc 0f10 	cmp.w	ip, #16
 80070d2:	bfd8      	it	le
 80070d4:	fb01 f909 	mulle.w	r9, r1, r9
 80070d8:	e7f5      	b.n	80070c6 <_strtod_l+0x25e>
 80070da:	2d10      	cmp	r5, #16
 80070dc:	bfdc      	itt	le
 80070de:	230a      	movle	r3, #10
 80070e0:	fb03 2909 	mlale	r9, r3, r9, r2
 80070e4:	e7e1      	b.n	80070aa <_strtod_l+0x242>
 80070e6:	2300      	movs	r3, #0
 80070e8:	9305      	str	r3, [sp, #20]
 80070ea:	2301      	movs	r3, #1
 80070ec:	e77c      	b.n	8006fe8 <_strtod_l+0x180>
 80070ee:	f04f 0c00 	mov.w	ip, #0
 80070f2:	f108 0202 	add.w	r2, r8, #2
 80070f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80070f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80070fc:	e785      	b.n	800700a <_strtod_l+0x1a2>
 80070fe:	f04f 0c01 	mov.w	ip, #1
 8007102:	e7f6      	b.n	80070f2 <_strtod_l+0x28a>
 8007104:	0800c198 	.word	0x0800c198
 8007108:	0800bf50 	.word	0x0800bf50
 800710c:	7ff00000 	.word	0x7ff00000
 8007110:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007112:	1c51      	adds	r1, r2, #1
 8007114:	9117      	str	r1, [sp, #92]	; 0x5c
 8007116:	7852      	ldrb	r2, [r2, #1]
 8007118:	2a30      	cmp	r2, #48	; 0x30
 800711a:	d0f9      	beq.n	8007110 <_strtod_l+0x2a8>
 800711c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007120:	2908      	cmp	r1, #8
 8007122:	f63f af79 	bhi.w	8007018 <_strtod_l+0x1b0>
 8007126:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800712a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800712c:	9206      	str	r2, [sp, #24]
 800712e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007130:	1c51      	adds	r1, r2, #1
 8007132:	9117      	str	r1, [sp, #92]	; 0x5c
 8007134:	7852      	ldrb	r2, [r2, #1]
 8007136:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800713a:	2e09      	cmp	r6, #9
 800713c:	d937      	bls.n	80071ae <_strtod_l+0x346>
 800713e:	9e06      	ldr	r6, [sp, #24]
 8007140:	1b89      	subs	r1, r1, r6
 8007142:	2908      	cmp	r1, #8
 8007144:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007148:	dc02      	bgt.n	8007150 <_strtod_l+0x2e8>
 800714a:	4576      	cmp	r6, lr
 800714c:	bfa8      	it	ge
 800714e:	4676      	movge	r6, lr
 8007150:	f1bc 0f00 	cmp.w	ip, #0
 8007154:	d000      	beq.n	8007158 <_strtod_l+0x2f0>
 8007156:	4276      	negs	r6, r6
 8007158:	2d00      	cmp	r5, #0
 800715a:	d14d      	bne.n	80071f8 <_strtod_l+0x390>
 800715c:	9904      	ldr	r1, [sp, #16]
 800715e:	4301      	orrs	r1, r0
 8007160:	f47f aec6 	bne.w	8006ef0 <_strtod_l+0x88>
 8007164:	2b00      	cmp	r3, #0
 8007166:	f47f aee1 	bne.w	8006f2c <_strtod_l+0xc4>
 800716a:	2a69      	cmp	r2, #105	; 0x69
 800716c:	d027      	beq.n	80071be <_strtod_l+0x356>
 800716e:	dc24      	bgt.n	80071ba <_strtod_l+0x352>
 8007170:	2a49      	cmp	r2, #73	; 0x49
 8007172:	d024      	beq.n	80071be <_strtod_l+0x356>
 8007174:	2a4e      	cmp	r2, #78	; 0x4e
 8007176:	f47f aed9 	bne.w	8006f2c <_strtod_l+0xc4>
 800717a:	499f      	ldr	r1, [pc, #636]	; (80073f8 <_strtod_l+0x590>)
 800717c:	a817      	add	r0, sp, #92	; 0x5c
 800717e:	f001 fe3d 	bl	8008dfc <__match>
 8007182:	2800      	cmp	r0, #0
 8007184:	f43f aed2 	beq.w	8006f2c <_strtod_l+0xc4>
 8007188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b28      	cmp	r3, #40	; 0x28
 800718e:	d12d      	bne.n	80071ec <_strtod_l+0x384>
 8007190:	499a      	ldr	r1, [pc, #616]	; (80073fc <_strtod_l+0x594>)
 8007192:	aa1a      	add	r2, sp, #104	; 0x68
 8007194:	a817      	add	r0, sp, #92	; 0x5c
 8007196:	f001 fe45 	bl	8008e24 <__hexnan>
 800719a:	2805      	cmp	r0, #5
 800719c:	d126      	bne.n	80071ec <_strtod_l+0x384>
 800719e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80071a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80071a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80071ac:	e6a0      	b.n	8006ef0 <_strtod_l+0x88>
 80071ae:	210a      	movs	r1, #10
 80071b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80071b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80071b8:	e7b9      	b.n	800712e <_strtod_l+0x2c6>
 80071ba:	2a6e      	cmp	r2, #110	; 0x6e
 80071bc:	e7db      	b.n	8007176 <_strtod_l+0x30e>
 80071be:	4990      	ldr	r1, [pc, #576]	; (8007400 <_strtod_l+0x598>)
 80071c0:	a817      	add	r0, sp, #92	; 0x5c
 80071c2:	f001 fe1b 	bl	8008dfc <__match>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f43f aeb0 	beq.w	8006f2c <_strtod_l+0xc4>
 80071cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ce:	498d      	ldr	r1, [pc, #564]	; (8007404 <_strtod_l+0x59c>)
 80071d0:	3b01      	subs	r3, #1
 80071d2:	a817      	add	r0, sp, #92	; 0x5c
 80071d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80071d6:	f001 fe11 	bl	8008dfc <__match>
 80071da:	b910      	cbnz	r0, 80071e2 <_strtod_l+0x37a>
 80071dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071de:	3301      	adds	r3, #1
 80071e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80071e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007414 <_strtod_l+0x5ac>
 80071e6:	f04f 0a00 	mov.w	sl, #0
 80071ea:	e681      	b.n	8006ef0 <_strtod_l+0x88>
 80071ec:	4886      	ldr	r0, [pc, #536]	; (8007408 <_strtod_l+0x5a0>)
 80071ee:	f002 fdf7 	bl	8009de0 <nan>
 80071f2:	ec5b ab10 	vmov	sl, fp, d0
 80071f6:	e67b      	b.n	8006ef0 <_strtod_l+0x88>
 80071f8:	9b05      	ldr	r3, [sp, #20]
 80071fa:	9807      	ldr	r0, [sp, #28]
 80071fc:	1af3      	subs	r3, r6, r3
 80071fe:	2f00      	cmp	r7, #0
 8007200:	bf08      	it	eq
 8007202:	462f      	moveq	r7, r5
 8007204:	2d10      	cmp	r5, #16
 8007206:	9306      	str	r3, [sp, #24]
 8007208:	46a8      	mov	r8, r5
 800720a:	bfa8      	it	ge
 800720c:	f04f 0810 	movge.w	r8, #16
 8007210:	f7f9 f9a0 	bl	8000554 <__aeabi_ui2d>
 8007214:	2d09      	cmp	r5, #9
 8007216:	4682      	mov	sl, r0
 8007218:	468b      	mov	fp, r1
 800721a:	dd13      	ble.n	8007244 <_strtod_l+0x3dc>
 800721c:	4b7b      	ldr	r3, [pc, #492]	; (800740c <_strtod_l+0x5a4>)
 800721e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007222:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007226:	f7f9 fa0f 	bl	8000648 <__aeabi_dmul>
 800722a:	4682      	mov	sl, r0
 800722c:	4648      	mov	r0, r9
 800722e:	468b      	mov	fp, r1
 8007230:	f7f9 f990 	bl	8000554 <__aeabi_ui2d>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4650      	mov	r0, sl
 800723a:	4659      	mov	r1, fp
 800723c:	f7f9 f84e 	bl	80002dc <__adddf3>
 8007240:	4682      	mov	sl, r0
 8007242:	468b      	mov	fp, r1
 8007244:	2d0f      	cmp	r5, #15
 8007246:	dc38      	bgt.n	80072ba <_strtod_l+0x452>
 8007248:	9b06      	ldr	r3, [sp, #24]
 800724a:	2b00      	cmp	r3, #0
 800724c:	f43f ae50 	beq.w	8006ef0 <_strtod_l+0x88>
 8007250:	dd24      	ble.n	800729c <_strtod_l+0x434>
 8007252:	2b16      	cmp	r3, #22
 8007254:	dc0b      	bgt.n	800726e <_strtod_l+0x406>
 8007256:	496d      	ldr	r1, [pc, #436]	; (800740c <_strtod_l+0x5a4>)
 8007258:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800725c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007260:	4652      	mov	r2, sl
 8007262:	465b      	mov	r3, fp
 8007264:	f7f9 f9f0 	bl	8000648 <__aeabi_dmul>
 8007268:	4682      	mov	sl, r0
 800726a:	468b      	mov	fp, r1
 800726c:	e640      	b.n	8006ef0 <_strtod_l+0x88>
 800726e:	9a06      	ldr	r2, [sp, #24]
 8007270:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007274:	4293      	cmp	r3, r2
 8007276:	db20      	blt.n	80072ba <_strtod_l+0x452>
 8007278:	4c64      	ldr	r4, [pc, #400]	; (800740c <_strtod_l+0x5a4>)
 800727a:	f1c5 050f 	rsb	r5, r5, #15
 800727e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007282:	4652      	mov	r2, sl
 8007284:	465b      	mov	r3, fp
 8007286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800728a:	f7f9 f9dd 	bl	8000648 <__aeabi_dmul>
 800728e:	9b06      	ldr	r3, [sp, #24]
 8007290:	1b5d      	subs	r5, r3, r5
 8007292:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007296:	e9d4 2300 	ldrd	r2, r3, [r4]
 800729a:	e7e3      	b.n	8007264 <_strtod_l+0x3fc>
 800729c:	9b06      	ldr	r3, [sp, #24]
 800729e:	3316      	adds	r3, #22
 80072a0:	db0b      	blt.n	80072ba <_strtod_l+0x452>
 80072a2:	9b05      	ldr	r3, [sp, #20]
 80072a4:	1b9e      	subs	r6, r3, r6
 80072a6:	4b59      	ldr	r3, [pc, #356]	; (800740c <_strtod_l+0x5a4>)
 80072a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80072ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072b0:	4650      	mov	r0, sl
 80072b2:	4659      	mov	r1, fp
 80072b4:	f7f9 faf2 	bl	800089c <__aeabi_ddiv>
 80072b8:	e7d6      	b.n	8007268 <_strtod_l+0x400>
 80072ba:	9b06      	ldr	r3, [sp, #24]
 80072bc:	eba5 0808 	sub.w	r8, r5, r8
 80072c0:	4498      	add	r8, r3
 80072c2:	f1b8 0f00 	cmp.w	r8, #0
 80072c6:	dd74      	ble.n	80073b2 <_strtod_l+0x54a>
 80072c8:	f018 030f 	ands.w	r3, r8, #15
 80072cc:	d00a      	beq.n	80072e4 <_strtod_l+0x47c>
 80072ce:	494f      	ldr	r1, [pc, #316]	; (800740c <_strtod_l+0x5a4>)
 80072d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072d4:	4652      	mov	r2, sl
 80072d6:	465b      	mov	r3, fp
 80072d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072dc:	f7f9 f9b4 	bl	8000648 <__aeabi_dmul>
 80072e0:	4682      	mov	sl, r0
 80072e2:	468b      	mov	fp, r1
 80072e4:	f038 080f 	bics.w	r8, r8, #15
 80072e8:	d04f      	beq.n	800738a <_strtod_l+0x522>
 80072ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80072ee:	dd22      	ble.n	8007336 <_strtod_l+0x4ce>
 80072f0:	2500      	movs	r5, #0
 80072f2:	462e      	mov	r6, r5
 80072f4:	9507      	str	r5, [sp, #28]
 80072f6:	9505      	str	r5, [sp, #20]
 80072f8:	2322      	movs	r3, #34	; 0x22
 80072fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007414 <_strtod_l+0x5ac>
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	f04f 0a00 	mov.w	sl, #0
 8007304:	9b07      	ldr	r3, [sp, #28]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f43f adf2 	beq.w	8006ef0 <_strtod_l+0x88>
 800730c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800730e:	4620      	mov	r0, r4
 8007310:	f001 fe90 	bl	8009034 <_Bfree>
 8007314:	9905      	ldr	r1, [sp, #20]
 8007316:	4620      	mov	r0, r4
 8007318:	f001 fe8c 	bl	8009034 <_Bfree>
 800731c:	4631      	mov	r1, r6
 800731e:	4620      	mov	r0, r4
 8007320:	f001 fe88 	bl	8009034 <_Bfree>
 8007324:	9907      	ldr	r1, [sp, #28]
 8007326:	4620      	mov	r0, r4
 8007328:	f001 fe84 	bl	8009034 <_Bfree>
 800732c:	4629      	mov	r1, r5
 800732e:	4620      	mov	r0, r4
 8007330:	f001 fe80 	bl	8009034 <_Bfree>
 8007334:	e5dc      	b.n	8006ef0 <_strtod_l+0x88>
 8007336:	4b36      	ldr	r3, [pc, #216]	; (8007410 <_strtod_l+0x5a8>)
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	2300      	movs	r3, #0
 800733c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007340:	4650      	mov	r0, sl
 8007342:	4659      	mov	r1, fp
 8007344:	4699      	mov	r9, r3
 8007346:	f1b8 0f01 	cmp.w	r8, #1
 800734a:	dc21      	bgt.n	8007390 <_strtod_l+0x528>
 800734c:	b10b      	cbz	r3, 8007352 <_strtod_l+0x4ea>
 800734e:	4682      	mov	sl, r0
 8007350:	468b      	mov	fp, r1
 8007352:	4b2f      	ldr	r3, [pc, #188]	; (8007410 <_strtod_l+0x5a8>)
 8007354:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007358:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800735c:	4652      	mov	r2, sl
 800735e:	465b      	mov	r3, fp
 8007360:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007364:	f7f9 f970 	bl	8000648 <__aeabi_dmul>
 8007368:	4b2a      	ldr	r3, [pc, #168]	; (8007414 <_strtod_l+0x5ac>)
 800736a:	460a      	mov	r2, r1
 800736c:	400b      	ands	r3, r1
 800736e:	492a      	ldr	r1, [pc, #168]	; (8007418 <_strtod_l+0x5b0>)
 8007370:	428b      	cmp	r3, r1
 8007372:	4682      	mov	sl, r0
 8007374:	d8bc      	bhi.n	80072f0 <_strtod_l+0x488>
 8007376:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800737a:	428b      	cmp	r3, r1
 800737c:	bf86      	itte	hi
 800737e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800741c <_strtod_l+0x5b4>
 8007382:	f04f 3aff 	movhi.w	sl, #4294967295
 8007386:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800738a:	2300      	movs	r3, #0
 800738c:	9304      	str	r3, [sp, #16]
 800738e:	e084      	b.n	800749a <_strtod_l+0x632>
 8007390:	f018 0f01 	tst.w	r8, #1
 8007394:	d005      	beq.n	80073a2 <_strtod_l+0x53a>
 8007396:	9b04      	ldr	r3, [sp, #16]
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f7f9 f954 	bl	8000648 <__aeabi_dmul>
 80073a0:	2301      	movs	r3, #1
 80073a2:	9a04      	ldr	r2, [sp, #16]
 80073a4:	3208      	adds	r2, #8
 80073a6:	f109 0901 	add.w	r9, r9, #1
 80073aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80073ae:	9204      	str	r2, [sp, #16]
 80073b0:	e7c9      	b.n	8007346 <_strtod_l+0x4de>
 80073b2:	d0ea      	beq.n	800738a <_strtod_l+0x522>
 80073b4:	f1c8 0800 	rsb	r8, r8, #0
 80073b8:	f018 020f 	ands.w	r2, r8, #15
 80073bc:	d00a      	beq.n	80073d4 <_strtod_l+0x56c>
 80073be:	4b13      	ldr	r3, [pc, #76]	; (800740c <_strtod_l+0x5a4>)
 80073c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073c4:	4650      	mov	r0, sl
 80073c6:	4659      	mov	r1, fp
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	f7f9 fa66 	bl	800089c <__aeabi_ddiv>
 80073d0:	4682      	mov	sl, r0
 80073d2:	468b      	mov	fp, r1
 80073d4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80073d8:	d0d7      	beq.n	800738a <_strtod_l+0x522>
 80073da:	f1b8 0f1f 	cmp.w	r8, #31
 80073de:	dd1f      	ble.n	8007420 <_strtod_l+0x5b8>
 80073e0:	2500      	movs	r5, #0
 80073e2:	462e      	mov	r6, r5
 80073e4:	9507      	str	r5, [sp, #28]
 80073e6:	9505      	str	r5, [sp, #20]
 80073e8:	2322      	movs	r3, #34	; 0x22
 80073ea:	f04f 0a00 	mov.w	sl, #0
 80073ee:	f04f 0b00 	mov.w	fp, #0
 80073f2:	6023      	str	r3, [r4, #0]
 80073f4:	e786      	b.n	8007304 <_strtod_l+0x49c>
 80073f6:	bf00      	nop
 80073f8:	0800bf21 	.word	0x0800bf21
 80073fc:	0800bf64 	.word	0x0800bf64
 8007400:	0800bf19 	.word	0x0800bf19
 8007404:	0800c0a4 	.word	0x0800c0a4
 8007408:	0800c350 	.word	0x0800c350
 800740c:	0800c230 	.word	0x0800c230
 8007410:	0800c208 	.word	0x0800c208
 8007414:	7ff00000 	.word	0x7ff00000
 8007418:	7ca00000 	.word	0x7ca00000
 800741c:	7fefffff 	.word	0x7fefffff
 8007420:	f018 0310 	ands.w	r3, r8, #16
 8007424:	bf18      	it	ne
 8007426:	236a      	movne	r3, #106	; 0x6a
 8007428:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80077d8 <_strtod_l+0x970>
 800742c:	9304      	str	r3, [sp, #16]
 800742e:	4650      	mov	r0, sl
 8007430:	4659      	mov	r1, fp
 8007432:	2300      	movs	r3, #0
 8007434:	f018 0f01 	tst.w	r8, #1
 8007438:	d004      	beq.n	8007444 <_strtod_l+0x5dc>
 800743a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800743e:	f7f9 f903 	bl	8000648 <__aeabi_dmul>
 8007442:	2301      	movs	r3, #1
 8007444:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007448:	f109 0908 	add.w	r9, r9, #8
 800744c:	d1f2      	bne.n	8007434 <_strtod_l+0x5cc>
 800744e:	b10b      	cbz	r3, 8007454 <_strtod_l+0x5ec>
 8007450:	4682      	mov	sl, r0
 8007452:	468b      	mov	fp, r1
 8007454:	9b04      	ldr	r3, [sp, #16]
 8007456:	b1c3      	cbz	r3, 800748a <_strtod_l+0x622>
 8007458:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800745c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007460:	2b00      	cmp	r3, #0
 8007462:	4659      	mov	r1, fp
 8007464:	dd11      	ble.n	800748a <_strtod_l+0x622>
 8007466:	2b1f      	cmp	r3, #31
 8007468:	f340 8124 	ble.w	80076b4 <_strtod_l+0x84c>
 800746c:	2b34      	cmp	r3, #52	; 0x34
 800746e:	bfde      	ittt	le
 8007470:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007474:	f04f 33ff 	movle.w	r3, #4294967295
 8007478:	fa03 f202 	lslle.w	r2, r3, r2
 800747c:	f04f 0a00 	mov.w	sl, #0
 8007480:	bfcc      	ite	gt
 8007482:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007486:	ea02 0b01 	andle.w	fp, r2, r1
 800748a:	2200      	movs	r2, #0
 800748c:	2300      	movs	r3, #0
 800748e:	4650      	mov	r0, sl
 8007490:	4659      	mov	r1, fp
 8007492:	f7f9 fb41 	bl	8000b18 <__aeabi_dcmpeq>
 8007496:	2800      	cmp	r0, #0
 8007498:	d1a2      	bne.n	80073e0 <_strtod_l+0x578>
 800749a:	9b07      	ldr	r3, [sp, #28]
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	9908      	ldr	r1, [sp, #32]
 80074a0:	462b      	mov	r3, r5
 80074a2:	463a      	mov	r2, r7
 80074a4:	4620      	mov	r0, r4
 80074a6:	f001 fe2d 	bl	8009104 <__s2b>
 80074aa:	9007      	str	r0, [sp, #28]
 80074ac:	2800      	cmp	r0, #0
 80074ae:	f43f af1f 	beq.w	80072f0 <_strtod_l+0x488>
 80074b2:	9b05      	ldr	r3, [sp, #20]
 80074b4:	1b9e      	subs	r6, r3, r6
 80074b6:	9b06      	ldr	r3, [sp, #24]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	bfb4      	ite	lt
 80074bc:	4633      	movlt	r3, r6
 80074be:	2300      	movge	r3, #0
 80074c0:	930c      	str	r3, [sp, #48]	; 0x30
 80074c2:	9b06      	ldr	r3, [sp, #24]
 80074c4:	2500      	movs	r5, #0
 80074c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80074ca:	9312      	str	r3, [sp, #72]	; 0x48
 80074cc:	462e      	mov	r6, r5
 80074ce:	9b07      	ldr	r3, [sp, #28]
 80074d0:	4620      	mov	r0, r4
 80074d2:	6859      	ldr	r1, [r3, #4]
 80074d4:	f001 fd6e 	bl	8008fb4 <_Balloc>
 80074d8:	9005      	str	r0, [sp, #20]
 80074da:	2800      	cmp	r0, #0
 80074dc:	f43f af0c 	beq.w	80072f8 <_strtod_l+0x490>
 80074e0:	9b07      	ldr	r3, [sp, #28]
 80074e2:	691a      	ldr	r2, [r3, #16]
 80074e4:	3202      	adds	r2, #2
 80074e6:	f103 010c 	add.w	r1, r3, #12
 80074ea:	0092      	lsls	r2, r2, #2
 80074ec:	300c      	adds	r0, #12
 80074ee:	f001 fd53 	bl	8008f98 <memcpy>
 80074f2:	ec4b ab10 	vmov	d0, sl, fp
 80074f6:	aa1a      	add	r2, sp, #104	; 0x68
 80074f8:	a919      	add	r1, sp, #100	; 0x64
 80074fa:	4620      	mov	r0, r4
 80074fc:	f002 f948 	bl	8009790 <__d2b>
 8007500:	ec4b ab18 	vmov	d8, sl, fp
 8007504:	9018      	str	r0, [sp, #96]	; 0x60
 8007506:	2800      	cmp	r0, #0
 8007508:	f43f aef6 	beq.w	80072f8 <_strtod_l+0x490>
 800750c:	2101      	movs	r1, #1
 800750e:	4620      	mov	r0, r4
 8007510:	f001 fe92 	bl	8009238 <__i2b>
 8007514:	4606      	mov	r6, r0
 8007516:	2800      	cmp	r0, #0
 8007518:	f43f aeee 	beq.w	80072f8 <_strtod_l+0x490>
 800751c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800751e:	9904      	ldr	r1, [sp, #16]
 8007520:	2b00      	cmp	r3, #0
 8007522:	bfab      	itete	ge
 8007524:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007526:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007528:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800752a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800752e:	bfac      	ite	ge
 8007530:	eb03 0902 	addge.w	r9, r3, r2
 8007534:	1ad7      	sublt	r7, r2, r3
 8007536:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007538:	eba3 0801 	sub.w	r8, r3, r1
 800753c:	4490      	add	r8, r2
 800753e:	4ba1      	ldr	r3, [pc, #644]	; (80077c4 <_strtod_l+0x95c>)
 8007540:	f108 38ff 	add.w	r8, r8, #4294967295
 8007544:	4598      	cmp	r8, r3
 8007546:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800754a:	f280 80c7 	bge.w	80076dc <_strtod_l+0x874>
 800754e:	eba3 0308 	sub.w	r3, r3, r8
 8007552:	2b1f      	cmp	r3, #31
 8007554:	eba2 0203 	sub.w	r2, r2, r3
 8007558:	f04f 0101 	mov.w	r1, #1
 800755c:	f300 80b1 	bgt.w	80076c2 <_strtod_l+0x85a>
 8007560:	fa01 f303 	lsl.w	r3, r1, r3
 8007564:	930d      	str	r3, [sp, #52]	; 0x34
 8007566:	2300      	movs	r3, #0
 8007568:	9308      	str	r3, [sp, #32]
 800756a:	eb09 0802 	add.w	r8, r9, r2
 800756e:	9b04      	ldr	r3, [sp, #16]
 8007570:	45c1      	cmp	r9, r8
 8007572:	4417      	add	r7, r2
 8007574:	441f      	add	r7, r3
 8007576:	464b      	mov	r3, r9
 8007578:	bfa8      	it	ge
 800757a:	4643      	movge	r3, r8
 800757c:	42bb      	cmp	r3, r7
 800757e:	bfa8      	it	ge
 8007580:	463b      	movge	r3, r7
 8007582:	2b00      	cmp	r3, #0
 8007584:	bfc2      	ittt	gt
 8007586:	eba8 0803 	subgt.w	r8, r8, r3
 800758a:	1aff      	subgt	r7, r7, r3
 800758c:	eba9 0903 	subgt.w	r9, r9, r3
 8007590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007592:	2b00      	cmp	r3, #0
 8007594:	dd17      	ble.n	80075c6 <_strtod_l+0x75e>
 8007596:	4631      	mov	r1, r6
 8007598:	461a      	mov	r2, r3
 800759a:	4620      	mov	r0, r4
 800759c:	f001 ff0c 	bl	80093b8 <__pow5mult>
 80075a0:	4606      	mov	r6, r0
 80075a2:	2800      	cmp	r0, #0
 80075a4:	f43f aea8 	beq.w	80072f8 <_strtod_l+0x490>
 80075a8:	4601      	mov	r1, r0
 80075aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80075ac:	4620      	mov	r0, r4
 80075ae:	f001 fe59 	bl	8009264 <__multiply>
 80075b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80075b4:	2800      	cmp	r0, #0
 80075b6:	f43f ae9f 	beq.w	80072f8 <_strtod_l+0x490>
 80075ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075bc:	4620      	mov	r0, r4
 80075be:	f001 fd39 	bl	8009034 <_Bfree>
 80075c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075c4:	9318      	str	r3, [sp, #96]	; 0x60
 80075c6:	f1b8 0f00 	cmp.w	r8, #0
 80075ca:	f300 808c 	bgt.w	80076e6 <_strtod_l+0x87e>
 80075ce:	9b06      	ldr	r3, [sp, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dd08      	ble.n	80075e6 <_strtod_l+0x77e>
 80075d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075d6:	9905      	ldr	r1, [sp, #20]
 80075d8:	4620      	mov	r0, r4
 80075da:	f001 feed 	bl	80093b8 <__pow5mult>
 80075de:	9005      	str	r0, [sp, #20]
 80075e0:	2800      	cmp	r0, #0
 80075e2:	f43f ae89 	beq.w	80072f8 <_strtod_l+0x490>
 80075e6:	2f00      	cmp	r7, #0
 80075e8:	dd08      	ble.n	80075fc <_strtod_l+0x794>
 80075ea:	9905      	ldr	r1, [sp, #20]
 80075ec:	463a      	mov	r2, r7
 80075ee:	4620      	mov	r0, r4
 80075f0:	f001 ff3c 	bl	800946c <__lshift>
 80075f4:	9005      	str	r0, [sp, #20]
 80075f6:	2800      	cmp	r0, #0
 80075f8:	f43f ae7e 	beq.w	80072f8 <_strtod_l+0x490>
 80075fc:	f1b9 0f00 	cmp.w	r9, #0
 8007600:	dd08      	ble.n	8007614 <_strtod_l+0x7ac>
 8007602:	4631      	mov	r1, r6
 8007604:	464a      	mov	r2, r9
 8007606:	4620      	mov	r0, r4
 8007608:	f001 ff30 	bl	800946c <__lshift>
 800760c:	4606      	mov	r6, r0
 800760e:	2800      	cmp	r0, #0
 8007610:	f43f ae72 	beq.w	80072f8 <_strtod_l+0x490>
 8007614:	9a05      	ldr	r2, [sp, #20]
 8007616:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007618:	4620      	mov	r0, r4
 800761a:	f001 ffb3 	bl	8009584 <__mdiff>
 800761e:	4605      	mov	r5, r0
 8007620:	2800      	cmp	r0, #0
 8007622:	f43f ae69 	beq.w	80072f8 <_strtod_l+0x490>
 8007626:	68c3      	ldr	r3, [r0, #12]
 8007628:	930b      	str	r3, [sp, #44]	; 0x2c
 800762a:	2300      	movs	r3, #0
 800762c:	60c3      	str	r3, [r0, #12]
 800762e:	4631      	mov	r1, r6
 8007630:	f001 ff8c 	bl	800954c <__mcmp>
 8007634:	2800      	cmp	r0, #0
 8007636:	da60      	bge.n	80076fa <_strtod_l+0x892>
 8007638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800763a:	ea53 030a 	orrs.w	r3, r3, sl
 800763e:	f040 8082 	bne.w	8007746 <_strtod_l+0x8de>
 8007642:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007646:	2b00      	cmp	r3, #0
 8007648:	d17d      	bne.n	8007746 <_strtod_l+0x8de>
 800764a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800764e:	0d1b      	lsrs	r3, r3, #20
 8007650:	051b      	lsls	r3, r3, #20
 8007652:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007656:	d976      	bls.n	8007746 <_strtod_l+0x8de>
 8007658:	696b      	ldr	r3, [r5, #20]
 800765a:	b913      	cbnz	r3, 8007662 <_strtod_l+0x7fa>
 800765c:	692b      	ldr	r3, [r5, #16]
 800765e:	2b01      	cmp	r3, #1
 8007660:	dd71      	ble.n	8007746 <_strtod_l+0x8de>
 8007662:	4629      	mov	r1, r5
 8007664:	2201      	movs	r2, #1
 8007666:	4620      	mov	r0, r4
 8007668:	f001 ff00 	bl	800946c <__lshift>
 800766c:	4631      	mov	r1, r6
 800766e:	4605      	mov	r5, r0
 8007670:	f001 ff6c 	bl	800954c <__mcmp>
 8007674:	2800      	cmp	r0, #0
 8007676:	dd66      	ble.n	8007746 <_strtod_l+0x8de>
 8007678:	9904      	ldr	r1, [sp, #16]
 800767a:	4a53      	ldr	r2, [pc, #332]	; (80077c8 <_strtod_l+0x960>)
 800767c:	465b      	mov	r3, fp
 800767e:	2900      	cmp	r1, #0
 8007680:	f000 8081 	beq.w	8007786 <_strtod_l+0x91e>
 8007684:	ea02 010b 	and.w	r1, r2, fp
 8007688:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800768c:	dc7b      	bgt.n	8007786 <_strtod_l+0x91e>
 800768e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007692:	f77f aea9 	ble.w	80073e8 <_strtod_l+0x580>
 8007696:	4b4d      	ldr	r3, [pc, #308]	; (80077cc <_strtod_l+0x964>)
 8007698:	4650      	mov	r0, sl
 800769a:	4659      	mov	r1, fp
 800769c:	2200      	movs	r2, #0
 800769e:	f7f8 ffd3 	bl	8000648 <__aeabi_dmul>
 80076a2:	460b      	mov	r3, r1
 80076a4:	4303      	orrs	r3, r0
 80076a6:	bf08      	it	eq
 80076a8:	2322      	moveq	r3, #34	; 0x22
 80076aa:	4682      	mov	sl, r0
 80076ac:	468b      	mov	fp, r1
 80076ae:	bf08      	it	eq
 80076b0:	6023      	streq	r3, [r4, #0]
 80076b2:	e62b      	b.n	800730c <_strtod_l+0x4a4>
 80076b4:	f04f 32ff 	mov.w	r2, #4294967295
 80076b8:	fa02 f303 	lsl.w	r3, r2, r3
 80076bc:	ea03 0a0a 	and.w	sl, r3, sl
 80076c0:	e6e3      	b.n	800748a <_strtod_l+0x622>
 80076c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80076c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80076ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80076ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80076d2:	fa01 f308 	lsl.w	r3, r1, r8
 80076d6:	9308      	str	r3, [sp, #32]
 80076d8:	910d      	str	r1, [sp, #52]	; 0x34
 80076da:	e746      	b.n	800756a <_strtod_l+0x702>
 80076dc:	2300      	movs	r3, #0
 80076de:	9308      	str	r3, [sp, #32]
 80076e0:	2301      	movs	r3, #1
 80076e2:	930d      	str	r3, [sp, #52]	; 0x34
 80076e4:	e741      	b.n	800756a <_strtod_l+0x702>
 80076e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076e8:	4642      	mov	r2, r8
 80076ea:	4620      	mov	r0, r4
 80076ec:	f001 febe 	bl	800946c <__lshift>
 80076f0:	9018      	str	r0, [sp, #96]	; 0x60
 80076f2:	2800      	cmp	r0, #0
 80076f4:	f47f af6b 	bne.w	80075ce <_strtod_l+0x766>
 80076f8:	e5fe      	b.n	80072f8 <_strtod_l+0x490>
 80076fa:	465f      	mov	r7, fp
 80076fc:	d16e      	bne.n	80077dc <_strtod_l+0x974>
 80076fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007700:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007704:	b342      	cbz	r2, 8007758 <_strtod_l+0x8f0>
 8007706:	4a32      	ldr	r2, [pc, #200]	; (80077d0 <_strtod_l+0x968>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d128      	bne.n	800775e <_strtod_l+0x8f6>
 800770c:	9b04      	ldr	r3, [sp, #16]
 800770e:	4651      	mov	r1, sl
 8007710:	b1eb      	cbz	r3, 800774e <_strtod_l+0x8e6>
 8007712:	4b2d      	ldr	r3, [pc, #180]	; (80077c8 <_strtod_l+0x960>)
 8007714:	403b      	ands	r3, r7
 8007716:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800771a:	f04f 32ff 	mov.w	r2, #4294967295
 800771e:	d819      	bhi.n	8007754 <_strtod_l+0x8ec>
 8007720:	0d1b      	lsrs	r3, r3, #20
 8007722:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007726:	fa02 f303 	lsl.w	r3, r2, r3
 800772a:	4299      	cmp	r1, r3
 800772c:	d117      	bne.n	800775e <_strtod_l+0x8f6>
 800772e:	4b29      	ldr	r3, [pc, #164]	; (80077d4 <_strtod_l+0x96c>)
 8007730:	429f      	cmp	r7, r3
 8007732:	d102      	bne.n	800773a <_strtod_l+0x8d2>
 8007734:	3101      	adds	r1, #1
 8007736:	f43f addf 	beq.w	80072f8 <_strtod_l+0x490>
 800773a:	4b23      	ldr	r3, [pc, #140]	; (80077c8 <_strtod_l+0x960>)
 800773c:	403b      	ands	r3, r7
 800773e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007742:	f04f 0a00 	mov.w	sl, #0
 8007746:	9b04      	ldr	r3, [sp, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1a4      	bne.n	8007696 <_strtod_l+0x82e>
 800774c:	e5de      	b.n	800730c <_strtod_l+0x4a4>
 800774e:	f04f 33ff 	mov.w	r3, #4294967295
 8007752:	e7ea      	b.n	800772a <_strtod_l+0x8c2>
 8007754:	4613      	mov	r3, r2
 8007756:	e7e8      	b.n	800772a <_strtod_l+0x8c2>
 8007758:	ea53 030a 	orrs.w	r3, r3, sl
 800775c:	d08c      	beq.n	8007678 <_strtod_l+0x810>
 800775e:	9b08      	ldr	r3, [sp, #32]
 8007760:	b1db      	cbz	r3, 800779a <_strtod_l+0x932>
 8007762:	423b      	tst	r3, r7
 8007764:	d0ef      	beq.n	8007746 <_strtod_l+0x8de>
 8007766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007768:	9a04      	ldr	r2, [sp, #16]
 800776a:	4650      	mov	r0, sl
 800776c:	4659      	mov	r1, fp
 800776e:	b1c3      	cbz	r3, 80077a2 <_strtod_l+0x93a>
 8007770:	f7ff fb5e 	bl	8006e30 <sulp>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	ec51 0b18 	vmov	r0, r1, d8
 800777c:	f7f8 fdae 	bl	80002dc <__adddf3>
 8007780:	4682      	mov	sl, r0
 8007782:	468b      	mov	fp, r1
 8007784:	e7df      	b.n	8007746 <_strtod_l+0x8de>
 8007786:	4013      	ands	r3, r2
 8007788:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800778c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007790:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007794:	f04f 3aff 	mov.w	sl, #4294967295
 8007798:	e7d5      	b.n	8007746 <_strtod_l+0x8de>
 800779a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800779c:	ea13 0f0a 	tst.w	r3, sl
 80077a0:	e7e0      	b.n	8007764 <_strtod_l+0x8fc>
 80077a2:	f7ff fb45 	bl	8006e30 <sulp>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	ec51 0b18 	vmov	r0, r1, d8
 80077ae:	f7f8 fd93 	bl	80002d8 <__aeabi_dsub>
 80077b2:	2200      	movs	r2, #0
 80077b4:	2300      	movs	r3, #0
 80077b6:	4682      	mov	sl, r0
 80077b8:	468b      	mov	fp, r1
 80077ba:	f7f9 f9ad 	bl	8000b18 <__aeabi_dcmpeq>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d0c1      	beq.n	8007746 <_strtod_l+0x8de>
 80077c2:	e611      	b.n	80073e8 <_strtod_l+0x580>
 80077c4:	fffffc02 	.word	0xfffffc02
 80077c8:	7ff00000 	.word	0x7ff00000
 80077cc:	39500000 	.word	0x39500000
 80077d0:	000fffff 	.word	0x000fffff
 80077d4:	7fefffff 	.word	0x7fefffff
 80077d8:	0800bf78 	.word	0x0800bf78
 80077dc:	4631      	mov	r1, r6
 80077de:	4628      	mov	r0, r5
 80077e0:	f002 f832 	bl	8009848 <__ratio>
 80077e4:	ec59 8b10 	vmov	r8, r9, d0
 80077e8:	ee10 0a10 	vmov	r0, s0
 80077ec:	2200      	movs	r2, #0
 80077ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077f2:	4649      	mov	r1, r9
 80077f4:	f7f9 f9a4 	bl	8000b40 <__aeabi_dcmple>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d07a      	beq.n	80078f2 <_strtod_l+0xa8a>
 80077fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d04a      	beq.n	8007898 <_strtod_l+0xa30>
 8007802:	4b95      	ldr	r3, [pc, #596]	; (8007a58 <_strtod_l+0xbf0>)
 8007804:	2200      	movs	r2, #0
 8007806:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800780a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007a58 <_strtod_l+0xbf0>
 800780e:	f04f 0800 	mov.w	r8, #0
 8007812:	4b92      	ldr	r3, [pc, #584]	; (8007a5c <_strtod_l+0xbf4>)
 8007814:	403b      	ands	r3, r7
 8007816:	930d      	str	r3, [sp, #52]	; 0x34
 8007818:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800781a:	4b91      	ldr	r3, [pc, #580]	; (8007a60 <_strtod_l+0xbf8>)
 800781c:	429a      	cmp	r2, r3
 800781e:	f040 80b0 	bne.w	8007982 <_strtod_l+0xb1a>
 8007822:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007826:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800782a:	ec4b ab10 	vmov	d0, sl, fp
 800782e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007832:	f001 ff31 	bl	8009698 <__ulp>
 8007836:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800783a:	ec53 2b10 	vmov	r2, r3, d0
 800783e:	f7f8 ff03 	bl	8000648 <__aeabi_dmul>
 8007842:	4652      	mov	r2, sl
 8007844:	465b      	mov	r3, fp
 8007846:	f7f8 fd49 	bl	80002dc <__adddf3>
 800784a:	460b      	mov	r3, r1
 800784c:	4983      	ldr	r1, [pc, #524]	; (8007a5c <_strtod_l+0xbf4>)
 800784e:	4a85      	ldr	r2, [pc, #532]	; (8007a64 <_strtod_l+0xbfc>)
 8007850:	4019      	ands	r1, r3
 8007852:	4291      	cmp	r1, r2
 8007854:	4682      	mov	sl, r0
 8007856:	d960      	bls.n	800791a <_strtod_l+0xab2>
 8007858:	ee18 3a90 	vmov	r3, s17
 800785c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007860:	4293      	cmp	r3, r2
 8007862:	d104      	bne.n	800786e <_strtod_l+0xa06>
 8007864:	ee18 3a10 	vmov	r3, s16
 8007868:	3301      	adds	r3, #1
 800786a:	f43f ad45 	beq.w	80072f8 <_strtod_l+0x490>
 800786e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007a70 <_strtod_l+0xc08>
 8007872:	f04f 3aff 	mov.w	sl, #4294967295
 8007876:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007878:	4620      	mov	r0, r4
 800787a:	f001 fbdb 	bl	8009034 <_Bfree>
 800787e:	9905      	ldr	r1, [sp, #20]
 8007880:	4620      	mov	r0, r4
 8007882:	f001 fbd7 	bl	8009034 <_Bfree>
 8007886:	4631      	mov	r1, r6
 8007888:	4620      	mov	r0, r4
 800788a:	f001 fbd3 	bl	8009034 <_Bfree>
 800788e:	4629      	mov	r1, r5
 8007890:	4620      	mov	r0, r4
 8007892:	f001 fbcf 	bl	8009034 <_Bfree>
 8007896:	e61a      	b.n	80074ce <_strtod_l+0x666>
 8007898:	f1ba 0f00 	cmp.w	sl, #0
 800789c:	d11b      	bne.n	80078d6 <_strtod_l+0xa6e>
 800789e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078a2:	b9f3      	cbnz	r3, 80078e2 <_strtod_l+0xa7a>
 80078a4:	4b6c      	ldr	r3, [pc, #432]	; (8007a58 <_strtod_l+0xbf0>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	4640      	mov	r0, r8
 80078aa:	4649      	mov	r1, r9
 80078ac:	f7f9 f93e 	bl	8000b2c <__aeabi_dcmplt>
 80078b0:	b9d0      	cbnz	r0, 80078e8 <_strtod_l+0xa80>
 80078b2:	4640      	mov	r0, r8
 80078b4:	4649      	mov	r1, r9
 80078b6:	4b6c      	ldr	r3, [pc, #432]	; (8007a68 <_strtod_l+0xc00>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	f7f8 fec5 	bl	8000648 <__aeabi_dmul>
 80078be:	4680      	mov	r8, r0
 80078c0:	4689      	mov	r9, r1
 80078c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80078c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80078ca:	9315      	str	r3, [sp, #84]	; 0x54
 80078cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80078d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80078d4:	e79d      	b.n	8007812 <_strtod_l+0x9aa>
 80078d6:	f1ba 0f01 	cmp.w	sl, #1
 80078da:	d102      	bne.n	80078e2 <_strtod_l+0xa7a>
 80078dc:	2f00      	cmp	r7, #0
 80078de:	f43f ad83 	beq.w	80073e8 <_strtod_l+0x580>
 80078e2:	4b62      	ldr	r3, [pc, #392]	; (8007a6c <_strtod_l+0xc04>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	e78e      	b.n	8007806 <_strtod_l+0x99e>
 80078e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007a68 <_strtod_l+0xc00>
 80078ec:	f04f 0800 	mov.w	r8, #0
 80078f0:	e7e7      	b.n	80078c2 <_strtod_l+0xa5a>
 80078f2:	4b5d      	ldr	r3, [pc, #372]	; (8007a68 <_strtod_l+0xc00>)
 80078f4:	4640      	mov	r0, r8
 80078f6:	4649      	mov	r1, r9
 80078f8:	2200      	movs	r2, #0
 80078fa:	f7f8 fea5 	bl	8000648 <__aeabi_dmul>
 80078fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007900:	4680      	mov	r8, r0
 8007902:	4689      	mov	r9, r1
 8007904:	b933      	cbnz	r3, 8007914 <_strtod_l+0xaac>
 8007906:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800790a:	900e      	str	r0, [sp, #56]	; 0x38
 800790c:	930f      	str	r3, [sp, #60]	; 0x3c
 800790e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007912:	e7dd      	b.n	80078d0 <_strtod_l+0xa68>
 8007914:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007918:	e7f9      	b.n	800790e <_strtod_l+0xaa6>
 800791a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800791e:	9b04      	ldr	r3, [sp, #16]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1a8      	bne.n	8007876 <_strtod_l+0xa0e>
 8007924:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007928:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800792a:	0d1b      	lsrs	r3, r3, #20
 800792c:	051b      	lsls	r3, r3, #20
 800792e:	429a      	cmp	r2, r3
 8007930:	d1a1      	bne.n	8007876 <_strtod_l+0xa0e>
 8007932:	4640      	mov	r0, r8
 8007934:	4649      	mov	r1, r9
 8007936:	f7f9 f9cf 	bl	8000cd8 <__aeabi_d2lz>
 800793a:	f7f8 fe57 	bl	80005ec <__aeabi_l2d>
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	4640      	mov	r0, r8
 8007944:	4649      	mov	r1, r9
 8007946:	f7f8 fcc7 	bl	80002d8 <__aeabi_dsub>
 800794a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800794c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007950:	ea43 030a 	orr.w	r3, r3, sl
 8007954:	4313      	orrs	r3, r2
 8007956:	4680      	mov	r8, r0
 8007958:	4689      	mov	r9, r1
 800795a:	d055      	beq.n	8007a08 <_strtod_l+0xba0>
 800795c:	a336      	add	r3, pc, #216	; (adr r3, 8007a38 <_strtod_l+0xbd0>)
 800795e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007962:	f7f9 f8e3 	bl	8000b2c <__aeabi_dcmplt>
 8007966:	2800      	cmp	r0, #0
 8007968:	f47f acd0 	bne.w	800730c <_strtod_l+0x4a4>
 800796c:	a334      	add	r3, pc, #208	; (adr r3, 8007a40 <_strtod_l+0xbd8>)
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	4640      	mov	r0, r8
 8007974:	4649      	mov	r1, r9
 8007976:	f7f9 f8f7 	bl	8000b68 <__aeabi_dcmpgt>
 800797a:	2800      	cmp	r0, #0
 800797c:	f43f af7b 	beq.w	8007876 <_strtod_l+0xa0e>
 8007980:	e4c4      	b.n	800730c <_strtod_l+0x4a4>
 8007982:	9b04      	ldr	r3, [sp, #16]
 8007984:	b333      	cbz	r3, 80079d4 <_strtod_l+0xb6c>
 8007986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007988:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800798c:	d822      	bhi.n	80079d4 <_strtod_l+0xb6c>
 800798e:	a32e      	add	r3, pc, #184	; (adr r3, 8007a48 <_strtod_l+0xbe0>)
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	4640      	mov	r0, r8
 8007996:	4649      	mov	r1, r9
 8007998:	f7f9 f8d2 	bl	8000b40 <__aeabi_dcmple>
 800799c:	b1a0      	cbz	r0, 80079c8 <_strtod_l+0xb60>
 800799e:	4649      	mov	r1, r9
 80079a0:	4640      	mov	r0, r8
 80079a2:	f7f9 f929 	bl	8000bf8 <__aeabi_d2uiz>
 80079a6:	2801      	cmp	r0, #1
 80079a8:	bf38      	it	cc
 80079aa:	2001      	movcc	r0, #1
 80079ac:	f7f8 fdd2 	bl	8000554 <__aeabi_ui2d>
 80079b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079b2:	4680      	mov	r8, r0
 80079b4:	4689      	mov	r9, r1
 80079b6:	bb23      	cbnz	r3, 8007a02 <_strtod_l+0xb9a>
 80079b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079bc:	9010      	str	r0, [sp, #64]	; 0x40
 80079be:	9311      	str	r3, [sp, #68]	; 0x44
 80079c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80079c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80079d0:	1a9b      	subs	r3, r3, r2
 80079d2:	9309      	str	r3, [sp, #36]	; 0x24
 80079d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079d8:	eeb0 0a48 	vmov.f32	s0, s16
 80079dc:	eef0 0a68 	vmov.f32	s1, s17
 80079e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079e4:	f001 fe58 	bl	8009698 <__ulp>
 80079e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079ec:	ec53 2b10 	vmov	r2, r3, d0
 80079f0:	f7f8 fe2a 	bl	8000648 <__aeabi_dmul>
 80079f4:	ec53 2b18 	vmov	r2, r3, d8
 80079f8:	f7f8 fc70 	bl	80002dc <__adddf3>
 80079fc:	4682      	mov	sl, r0
 80079fe:	468b      	mov	fp, r1
 8007a00:	e78d      	b.n	800791e <_strtod_l+0xab6>
 8007a02:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007a06:	e7db      	b.n	80079c0 <_strtod_l+0xb58>
 8007a08:	a311      	add	r3, pc, #68	; (adr r3, 8007a50 <_strtod_l+0xbe8>)
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	f7f9 f88d 	bl	8000b2c <__aeabi_dcmplt>
 8007a12:	e7b2      	b.n	800797a <_strtod_l+0xb12>
 8007a14:	2300      	movs	r3, #0
 8007a16:	930a      	str	r3, [sp, #40]	; 0x28
 8007a18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a1c:	6013      	str	r3, [r2, #0]
 8007a1e:	f7ff ba6b 	b.w	8006ef8 <_strtod_l+0x90>
 8007a22:	2a65      	cmp	r2, #101	; 0x65
 8007a24:	f43f ab5f 	beq.w	80070e6 <_strtod_l+0x27e>
 8007a28:	2a45      	cmp	r2, #69	; 0x45
 8007a2a:	f43f ab5c 	beq.w	80070e6 <_strtod_l+0x27e>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f7ff bb94 	b.w	800715c <_strtod_l+0x2f4>
 8007a34:	f3af 8000 	nop.w
 8007a38:	94a03595 	.word	0x94a03595
 8007a3c:	3fdfffff 	.word	0x3fdfffff
 8007a40:	35afe535 	.word	0x35afe535
 8007a44:	3fe00000 	.word	0x3fe00000
 8007a48:	ffc00000 	.word	0xffc00000
 8007a4c:	41dfffff 	.word	0x41dfffff
 8007a50:	94a03595 	.word	0x94a03595
 8007a54:	3fcfffff 	.word	0x3fcfffff
 8007a58:	3ff00000 	.word	0x3ff00000
 8007a5c:	7ff00000 	.word	0x7ff00000
 8007a60:	7fe00000 	.word	0x7fe00000
 8007a64:	7c9fffff 	.word	0x7c9fffff
 8007a68:	3fe00000 	.word	0x3fe00000
 8007a6c:	bff00000 	.word	0xbff00000
 8007a70:	7fefffff 	.word	0x7fefffff

08007a74 <_strtod_r>:
 8007a74:	4b01      	ldr	r3, [pc, #4]	; (8007a7c <_strtod_r+0x8>)
 8007a76:	f7ff b9f7 	b.w	8006e68 <_strtod_l>
 8007a7a:	bf00      	nop
 8007a7c:	20000084 	.word	0x20000084

08007a80 <_strtol_l.constprop.0>:
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a86:	d001      	beq.n	8007a8c <_strtol_l.constprop.0+0xc>
 8007a88:	2b24      	cmp	r3, #36	; 0x24
 8007a8a:	d906      	bls.n	8007a9a <_strtol_l.constprop.0+0x1a>
 8007a8c:	f7fe fafe 	bl	800608c <__errno>
 8007a90:	2316      	movs	r3, #22
 8007a92:	6003      	str	r3, [r0, #0]
 8007a94:	2000      	movs	r0, #0
 8007a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a9a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007b80 <_strtol_l.constprop.0+0x100>
 8007a9e:	460d      	mov	r5, r1
 8007aa0:	462e      	mov	r6, r5
 8007aa2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007aa6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007aaa:	f017 0708 	ands.w	r7, r7, #8
 8007aae:	d1f7      	bne.n	8007aa0 <_strtol_l.constprop.0+0x20>
 8007ab0:	2c2d      	cmp	r4, #45	; 0x2d
 8007ab2:	d132      	bne.n	8007b1a <_strtol_l.constprop.0+0x9a>
 8007ab4:	782c      	ldrb	r4, [r5, #0]
 8007ab6:	2701      	movs	r7, #1
 8007ab8:	1cb5      	adds	r5, r6, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d05b      	beq.n	8007b76 <_strtol_l.constprop.0+0xf6>
 8007abe:	2b10      	cmp	r3, #16
 8007ac0:	d109      	bne.n	8007ad6 <_strtol_l.constprop.0+0x56>
 8007ac2:	2c30      	cmp	r4, #48	; 0x30
 8007ac4:	d107      	bne.n	8007ad6 <_strtol_l.constprop.0+0x56>
 8007ac6:	782c      	ldrb	r4, [r5, #0]
 8007ac8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007acc:	2c58      	cmp	r4, #88	; 0x58
 8007ace:	d14d      	bne.n	8007b6c <_strtol_l.constprop.0+0xec>
 8007ad0:	786c      	ldrb	r4, [r5, #1]
 8007ad2:	2310      	movs	r3, #16
 8007ad4:	3502      	adds	r5, #2
 8007ad6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007ada:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ade:	f04f 0c00 	mov.w	ip, #0
 8007ae2:	fbb8 f9f3 	udiv	r9, r8, r3
 8007ae6:	4666      	mov	r6, ip
 8007ae8:	fb03 8a19 	mls	sl, r3, r9, r8
 8007aec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007af0:	f1be 0f09 	cmp.w	lr, #9
 8007af4:	d816      	bhi.n	8007b24 <_strtol_l.constprop.0+0xa4>
 8007af6:	4674      	mov	r4, lr
 8007af8:	42a3      	cmp	r3, r4
 8007afa:	dd24      	ble.n	8007b46 <_strtol_l.constprop.0+0xc6>
 8007afc:	f1bc 0f00 	cmp.w	ip, #0
 8007b00:	db1e      	blt.n	8007b40 <_strtol_l.constprop.0+0xc0>
 8007b02:	45b1      	cmp	r9, r6
 8007b04:	d31c      	bcc.n	8007b40 <_strtol_l.constprop.0+0xc0>
 8007b06:	d101      	bne.n	8007b0c <_strtol_l.constprop.0+0x8c>
 8007b08:	45a2      	cmp	sl, r4
 8007b0a:	db19      	blt.n	8007b40 <_strtol_l.constprop.0+0xc0>
 8007b0c:	fb06 4603 	mla	r6, r6, r3, r4
 8007b10:	f04f 0c01 	mov.w	ip, #1
 8007b14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b18:	e7e8      	b.n	8007aec <_strtol_l.constprop.0+0x6c>
 8007b1a:	2c2b      	cmp	r4, #43	; 0x2b
 8007b1c:	bf04      	itt	eq
 8007b1e:	782c      	ldrbeq	r4, [r5, #0]
 8007b20:	1cb5      	addeq	r5, r6, #2
 8007b22:	e7ca      	b.n	8007aba <_strtol_l.constprop.0+0x3a>
 8007b24:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007b28:	f1be 0f19 	cmp.w	lr, #25
 8007b2c:	d801      	bhi.n	8007b32 <_strtol_l.constprop.0+0xb2>
 8007b2e:	3c37      	subs	r4, #55	; 0x37
 8007b30:	e7e2      	b.n	8007af8 <_strtol_l.constprop.0+0x78>
 8007b32:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007b36:	f1be 0f19 	cmp.w	lr, #25
 8007b3a:	d804      	bhi.n	8007b46 <_strtol_l.constprop.0+0xc6>
 8007b3c:	3c57      	subs	r4, #87	; 0x57
 8007b3e:	e7db      	b.n	8007af8 <_strtol_l.constprop.0+0x78>
 8007b40:	f04f 3cff 	mov.w	ip, #4294967295
 8007b44:	e7e6      	b.n	8007b14 <_strtol_l.constprop.0+0x94>
 8007b46:	f1bc 0f00 	cmp.w	ip, #0
 8007b4a:	da05      	bge.n	8007b58 <_strtol_l.constprop.0+0xd8>
 8007b4c:	2322      	movs	r3, #34	; 0x22
 8007b4e:	6003      	str	r3, [r0, #0]
 8007b50:	4646      	mov	r6, r8
 8007b52:	b942      	cbnz	r2, 8007b66 <_strtol_l.constprop.0+0xe6>
 8007b54:	4630      	mov	r0, r6
 8007b56:	e79e      	b.n	8007a96 <_strtol_l.constprop.0+0x16>
 8007b58:	b107      	cbz	r7, 8007b5c <_strtol_l.constprop.0+0xdc>
 8007b5a:	4276      	negs	r6, r6
 8007b5c:	2a00      	cmp	r2, #0
 8007b5e:	d0f9      	beq.n	8007b54 <_strtol_l.constprop.0+0xd4>
 8007b60:	f1bc 0f00 	cmp.w	ip, #0
 8007b64:	d000      	beq.n	8007b68 <_strtol_l.constprop.0+0xe8>
 8007b66:	1e69      	subs	r1, r5, #1
 8007b68:	6011      	str	r1, [r2, #0]
 8007b6a:	e7f3      	b.n	8007b54 <_strtol_l.constprop.0+0xd4>
 8007b6c:	2430      	movs	r4, #48	; 0x30
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1b1      	bne.n	8007ad6 <_strtol_l.constprop.0+0x56>
 8007b72:	2308      	movs	r3, #8
 8007b74:	e7af      	b.n	8007ad6 <_strtol_l.constprop.0+0x56>
 8007b76:	2c30      	cmp	r4, #48	; 0x30
 8007b78:	d0a5      	beq.n	8007ac6 <_strtol_l.constprop.0+0x46>
 8007b7a:	230a      	movs	r3, #10
 8007b7c:	e7ab      	b.n	8007ad6 <_strtol_l.constprop.0+0x56>
 8007b7e:	bf00      	nop
 8007b80:	0800bfa1 	.word	0x0800bfa1

08007b84 <_strtol_r>:
 8007b84:	f7ff bf7c 	b.w	8007a80 <_strtol_l.constprop.0>

08007b88 <quorem>:
 8007b88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	6903      	ldr	r3, [r0, #16]
 8007b8e:	690c      	ldr	r4, [r1, #16]
 8007b90:	42a3      	cmp	r3, r4
 8007b92:	4607      	mov	r7, r0
 8007b94:	f2c0 8081 	blt.w	8007c9a <quorem+0x112>
 8007b98:	3c01      	subs	r4, #1
 8007b9a:	f101 0814 	add.w	r8, r1, #20
 8007b9e:	f100 0514 	add.w	r5, r0, #20
 8007ba2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ba6:	9301      	str	r3, [sp, #4]
 8007ba8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bc0:	d331      	bcc.n	8007c26 <quorem+0x9e>
 8007bc2:	f04f 0e00 	mov.w	lr, #0
 8007bc6:	4640      	mov	r0, r8
 8007bc8:	46ac      	mov	ip, r5
 8007bca:	46f2      	mov	sl, lr
 8007bcc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bd0:	b293      	uxth	r3, r2
 8007bd2:	fb06 e303 	mla	r3, r6, r3, lr
 8007bd6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	ebaa 0303 	sub.w	r3, sl, r3
 8007be0:	f8dc a000 	ldr.w	sl, [ip]
 8007be4:	0c12      	lsrs	r2, r2, #16
 8007be6:	fa13 f38a 	uxtah	r3, r3, sl
 8007bea:	fb06 e202 	mla	r2, r6, r2, lr
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	9b00      	ldr	r3, [sp, #0]
 8007bf2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bf6:	b292      	uxth	r2, r2
 8007bf8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007bfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c00:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c04:	4581      	cmp	r9, r0
 8007c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c0a:	f84c 3b04 	str.w	r3, [ip], #4
 8007c0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c12:	d2db      	bcs.n	8007bcc <quorem+0x44>
 8007c14:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c18:	b92b      	cbnz	r3, 8007c26 <quorem+0x9e>
 8007c1a:	9b01      	ldr	r3, [sp, #4]
 8007c1c:	3b04      	subs	r3, #4
 8007c1e:	429d      	cmp	r5, r3
 8007c20:	461a      	mov	r2, r3
 8007c22:	d32e      	bcc.n	8007c82 <quorem+0xfa>
 8007c24:	613c      	str	r4, [r7, #16]
 8007c26:	4638      	mov	r0, r7
 8007c28:	f001 fc90 	bl	800954c <__mcmp>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	db24      	blt.n	8007c7a <quorem+0xf2>
 8007c30:	3601      	adds	r6, #1
 8007c32:	4628      	mov	r0, r5
 8007c34:	f04f 0c00 	mov.w	ip, #0
 8007c38:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c3c:	f8d0 e000 	ldr.w	lr, [r0]
 8007c40:	b293      	uxth	r3, r2
 8007c42:	ebac 0303 	sub.w	r3, ip, r3
 8007c46:	0c12      	lsrs	r2, r2, #16
 8007c48:	fa13 f38e 	uxtah	r3, r3, lr
 8007c4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c5a:	45c1      	cmp	r9, r8
 8007c5c:	f840 3b04 	str.w	r3, [r0], #4
 8007c60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c64:	d2e8      	bcs.n	8007c38 <quorem+0xb0>
 8007c66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c6e:	b922      	cbnz	r2, 8007c7a <quorem+0xf2>
 8007c70:	3b04      	subs	r3, #4
 8007c72:	429d      	cmp	r5, r3
 8007c74:	461a      	mov	r2, r3
 8007c76:	d30a      	bcc.n	8007c8e <quorem+0x106>
 8007c78:	613c      	str	r4, [r7, #16]
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	b003      	add	sp, #12
 8007c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c82:	6812      	ldr	r2, [r2, #0]
 8007c84:	3b04      	subs	r3, #4
 8007c86:	2a00      	cmp	r2, #0
 8007c88:	d1cc      	bne.n	8007c24 <quorem+0x9c>
 8007c8a:	3c01      	subs	r4, #1
 8007c8c:	e7c7      	b.n	8007c1e <quorem+0x96>
 8007c8e:	6812      	ldr	r2, [r2, #0]
 8007c90:	3b04      	subs	r3, #4
 8007c92:	2a00      	cmp	r2, #0
 8007c94:	d1f0      	bne.n	8007c78 <quorem+0xf0>
 8007c96:	3c01      	subs	r4, #1
 8007c98:	e7eb      	b.n	8007c72 <quorem+0xea>
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	e7ee      	b.n	8007c7c <quorem+0xf4>
	...

08007ca0 <_dtoa_r>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	ed2d 8b04 	vpush	{d8-d9}
 8007ca8:	ec57 6b10 	vmov	r6, r7, d0
 8007cac:	b093      	sub	sp, #76	; 0x4c
 8007cae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cb4:	9106      	str	r1, [sp, #24]
 8007cb6:	ee10 aa10 	vmov	sl, s0
 8007cba:	4604      	mov	r4, r0
 8007cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8007cbe:	930c      	str	r3, [sp, #48]	; 0x30
 8007cc0:	46bb      	mov	fp, r7
 8007cc2:	b975      	cbnz	r5, 8007ce2 <_dtoa_r+0x42>
 8007cc4:	2010      	movs	r0, #16
 8007cc6:	f001 f94d 	bl	8008f64 <malloc>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	6260      	str	r0, [r4, #36]	; 0x24
 8007cce:	b920      	cbnz	r0, 8007cda <_dtoa_r+0x3a>
 8007cd0:	4ba7      	ldr	r3, [pc, #668]	; (8007f70 <_dtoa_r+0x2d0>)
 8007cd2:	21ea      	movs	r1, #234	; 0xea
 8007cd4:	48a7      	ldr	r0, [pc, #668]	; (8007f74 <_dtoa_r+0x2d4>)
 8007cd6:	f002 f8bd 	bl	8009e54 <__assert_func>
 8007cda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cde:	6005      	str	r5, [r0, #0]
 8007ce0:	60c5      	str	r5, [r0, #12]
 8007ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ce4:	6819      	ldr	r1, [r3, #0]
 8007ce6:	b151      	cbz	r1, 8007cfe <_dtoa_r+0x5e>
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	604a      	str	r2, [r1, #4]
 8007cec:	2301      	movs	r3, #1
 8007cee:	4093      	lsls	r3, r2
 8007cf0:	608b      	str	r3, [r1, #8]
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f001 f99e 	bl	8009034 <_Bfree>
 8007cf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	1e3b      	subs	r3, r7, #0
 8007d00:	bfaa      	itet	ge
 8007d02:	2300      	movge	r3, #0
 8007d04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007d08:	f8c8 3000 	strge.w	r3, [r8]
 8007d0c:	4b9a      	ldr	r3, [pc, #616]	; (8007f78 <_dtoa_r+0x2d8>)
 8007d0e:	bfbc      	itt	lt
 8007d10:	2201      	movlt	r2, #1
 8007d12:	f8c8 2000 	strlt.w	r2, [r8]
 8007d16:	ea33 030b 	bics.w	r3, r3, fp
 8007d1a:	d11b      	bne.n	8007d54 <_dtoa_r+0xb4>
 8007d1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d22:	6013      	str	r3, [r2, #0]
 8007d24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d28:	4333      	orrs	r3, r6
 8007d2a:	f000 8592 	beq.w	8008852 <_dtoa_r+0xbb2>
 8007d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d30:	b963      	cbnz	r3, 8007d4c <_dtoa_r+0xac>
 8007d32:	4b92      	ldr	r3, [pc, #584]	; (8007f7c <_dtoa_r+0x2dc>)
 8007d34:	e022      	b.n	8007d7c <_dtoa_r+0xdc>
 8007d36:	4b92      	ldr	r3, [pc, #584]	; (8007f80 <_dtoa_r+0x2e0>)
 8007d38:	9301      	str	r3, [sp, #4]
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	9801      	ldr	r0, [sp, #4]
 8007d42:	b013      	add	sp, #76	; 0x4c
 8007d44:	ecbd 8b04 	vpop	{d8-d9}
 8007d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4c:	4b8b      	ldr	r3, [pc, #556]	; (8007f7c <_dtoa_r+0x2dc>)
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	3303      	adds	r3, #3
 8007d52:	e7f3      	b.n	8007d3c <_dtoa_r+0x9c>
 8007d54:	2200      	movs	r2, #0
 8007d56:	2300      	movs	r3, #0
 8007d58:	4650      	mov	r0, sl
 8007d5a:	4659      	mov	r1, fp
 8007d5c:	f7f8 fedc 	bl	8000b18 <__aeabi_dcmpeq>
 8007d60:	ec4b ab19 	vmov	d9, sl, fp
 8007d64:	4680      	mov	r8, r0
 8007d66:	b158      	cbz	r0, 8007d80 <_dtoa_r+0xe0>
 8007d68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	6013      	str	r3, [r2, #0]
 8007d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 856b 	beq.w	800884c <_dtoa_r+0xbac>
 8007d76:	4883      	ldr	r0, [pc, #524]	; (8007f84 <_dtoa_r+0x2e4>)
 8007d78:	6018      	str	r0, [r3, #0]
 8007d7a:	1e43      	subs	r3, r0, #1
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	e7df      	b.n	8007d40 <_dtoa_r+0xa0>
 8007d80:	ec4b ab10 	vmov	d0, sl, fp
 8007d84:	aa10      	add	r2, sp, #64	; 0x40
 8007d86:	a911      	add	r1, sp, #68	; 0x44
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f001 fd01 	bl	8009790 <__d2b>
 8007d8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007d92:	ee08 0a10 	vmov	s16, r0
 8007d96:	2d00      	cmp	r5, #0
 8007d98:	f000 8084 	beq.w	8007ea4 <_dtoa_r+0x204>
 8007d9c:	ee19 3a90 	vmov	r3, s19
 8007da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007da4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007da8:	4656      	mov	r6, sl
 8007daa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007dae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007db2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007db6:	4b74      	ldr	r3, [pc, #464]	; (8007f88 <_dtoa_r+0x2e8>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	4630      	mov	r0, r6
 8007dbc:	4639      	mov	r1, r7
 8007dbe:	f7f8 fa8b 	bl	80002d8 <__aeabi_dsub>
 8007dc2:	a365      	add	r3, pc, #404	; (adr r3, 8007f58 <_dtoa_r+0x2b8>)
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f7f8 fc3e 	bl	8000648 <__aeabi_dmul>
 8007dcc:	a364      	add	r3, pc, #400	; (adr r3, 8007f60 <_dtoa_r+0x2c0>)
 8007dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd2:	f7f8 fa83 	bl	80002dc <__adddf3>
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	4628      	mov	r0, r5
 8007dda:	460f      	mov	r7, r1
 8007ddc:	f7f8 fbca 	bl	8000574 <__aeabi_i2d>
 8007de0:	a361      	add	r3, pc, #388	; (adr r3, 8007f68 <_dtoa_r+0x2c8>)
 8007de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de6:	f7f8 fc2f 	bl	8000648 <__aeabi_dmul>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4630      	mov	r0, r6
 8007df0:	4639      	mov	r1, r7
 8007df2:	f7f8 fa73 	bl	80002dc <__adddf3>
 8007df6:	4606      	mov	r6, r0
 8007df8:	460f      	mov	r7, r1
 8007dfa:	f7f8 fed5 	bl	8000ba8 <__aeabi_d2iz>
 8007dfe:	2200      	movs	r2, #0
 8007e00:	9000      	str	r0, [sp, #0]
 8007e02:	2300      	movs	r3, #0
 8007e04:	4630      	mov	r0, r6
 8007e06:	4639      	mov	r1, r7
 8007e08:	f7f8 fe90 	bl	8000b2c <__aeabi_dcmplt>
 8007e0c:	b150      	cbz	r0, 8007e24 <_dtoa_r+0x184>
 8007e0e:	9800      	ldr	r0, [sp, #0]
 8007e10:	f7f8 fbb0 	bl	8000574 <__aeabi_i2d>
 8007e14:	4632      	mov	r2, r6
 8007e16:	463b      	mov	r3, r7
 8007e18:	f7f8 fe7e 	bl	8000b18 <__aeabi_dcmpeq>
 8007e1c:	b910      	cbnz	r0, 8007e24 <_dtoa_r+0x184>
 8007e1e:	9b00      	ldr	r3, [sp, #0]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	9b00      	ldr	r3, [sp, #0]
 8007e26:	2b16      	cmp	r3, #22
 8007e28:	d85a      	bhi.n	8007ee0 <_dtoa_r+0x240>
 8007e2a:	9a00      	ldr	r2, [sp, #0]
 8007e2c:	4b57      	ldr	r3, [pc, #348]	; (8007f8c <_dtoa_r+0x2ec>)
 8007e2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	ec51 0b19 	vmov	r0, r1, d9
 8007e3a:	f7f8 fe77 	bl	8000b2c <__aeabi_dcmplt>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d050      	beq.n	8007ee4 <_dtoa_r+0x244>
 8007e42:	9b00      	ldr	r3, [sp, #0]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	2300      	movs	r3, #0
 8007e4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e4e:	1b5d      	subs	r5, r3, r5
 8007e50:	1e6b      	subs	r3, r5, #1
 8007e52:	9305      	str	r3, [sp, #20]
 8007e54:	bf45      	ittet	mi
 8007e56:	f1c5 0301 	rsbmi	r3, r5, #1
 8007e5a:	9304      	strmi	r3, [sp, #16]
 8007e5c:	2300      	movpl	r3, #0
 8007e5e:	2300      	movmi	r3, #0
 8007e60:	bf4c      	ite	mi
 8007e62:	9305      	strmi	r3, [sp, #20]
 8007e64:	9304      	strpl	r3, [sp, #16]
 8007e66:	9b00      	ldr	r3, [sp, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	db3d      	blt.n	8007ee8 <_dtoa_r+0x248>
 8007e6c:	9b05      	ldr	r3, [sp, #20]
 8007e6e:	9a00      	ldr	r2, [sp, #0]
 8007e70:	920a      	str	r2, [sp, #40]	; 0x28
 8007e72:	4413      	add	r3, r2
 8007e74:	9305      	str	r3, [sp, #20]
 8007e76:	2300      	movs	r3, #0
 8007e78:	9307      	str	r3, [sp, #28]
 8007e7a:	9b06      	ldr	r3, [sp, #24]
 8007e7c:	2b09      	cmp	r3, #9
 8007e7e:	f200 8089 	bhi.w	8007f94 <_dtoa_r+0x2f4>
 8007e82:	2b05      	cmp	r3, #5
 8007e84:	bfc4      	itt	gt
 8007e86:	3b04      	subgt	r3, #4
 8007e88:	9306      	strgt	r3, [sp, #24]
 8007e8a:	9b06      	ldr	r3, [sp, #24]
 8007e8c:	f1a3 0302 	sub.w	r3, r3, #2
 8007e90:	bfcc      	ite	gt
 8007e92:	2500      	movgt	r5, #0
 8007e94:	2501      	movle	r5, #1
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	f200 8087 	bhi.w	8007faa <_dtoa_r+0x30a>
 8007e9c:	e8df f003 	tbb	[pc, r3]
 8007ea0:	59383a2d 	.word	0x59383a2d
 8007ea4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ea8:	441d      	add	r5, r3
 8007eaa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	bfc1      	itttt	gt
 8007eb2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007eb6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007eba:	fa0b f303 	lslgt.w	r3, fp, r3
 8007ebe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ec2:	bfda      	itte	le
 8007ec4:	f1c3 0320 	rsble	r3, r3, #32
 8007ec8:	fa06 f003 	lslle.w	r0, r6, r3
 8007ecc:	4318      	orrgt	r0, r3
 8007ece:	f7f8 fb41 	bl	8000554 <__aeabi_ui2d>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	4606      	mov	r6, r0
 8007ed6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007eda:	3d01      	subs	r5, #1
 8007edc:	930e      	str	r3, [sp, #56]	; 0x38
 8007ede:	e76a      	b.n	8007db6 <_dtoa_r+0x116>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e7b2      	b.n	8007e4a <_dtoa_r+0x1aa>
 8007ee4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ee6:	e7b1      	b.n	8007e4c <_dtoa_r+0x1ac>
 8007ee8:	9b04      	ldr	r3, [sp, #16]
 8007eea:	9a00      	ldr	r2, [sp, #0]
 8007eec:	1a9b      	subs	r3, r3, r2
 8007eee:	9304      	str	r3, [sp, #16]
 8007ef0:	4253      	negs	r3, r2
 8007ef2:	9307      	str	r3, [sp, #28]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ef8:	e7bf      	b.n	8007e7a <_dtoa_r+0x1da>
 8007efa:	2300      	movs	r3, #0
 8007efc:	9308      	str	r3, [sp, #32]
 8007efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dc55      	bgt.n	8007fb0 <_dtoa_r+0x310>
 8007f04:	2301      	movs	r3, #1
 8007f06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f0e:	e00c      	b.n	8007f2a <_dtoa_r+0x28a>
 8007f10:	2301      	movs	r3, #1
 8007f12:	e7f3      	b.n	8007efc <_dtoa_r+0x25c>
 8007f14:	2300      	movs	r3, #0
 8007f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f18:	9308      	str	r3, [sp, #32]
 8007f1a:	9b00      	ldr	r3, [sp, #0]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	9302      	str	r3, [sp, #8]
 8007f20:	3301      	adds	r3, #1
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	9303      	str	r3, [sp, #12]
 8007f26:	bfb8      	it	lt
 8007f28:	2301      	movlt	r3, #1
 8007f2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	6042      	str	r2, [r0, #4]
 8007f30:	2204      	movs	r2, #4
 8007f32:	f102 0614 	add.w	r6, r2, #20
 8007f36:	429e      	cmp	r6, r3
 8007f38:	6841      	ldr	r1, [r0, #4]
 8007f3a:	d93d      	bls.n	8007fb8 <_dtoa_r+0x318>
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f001 f839 	bl	8008fb4 <_Balloc>
 8007f42:	9001      	str	r0, [sp, #4]
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d13b      	bne.n	8007fc0 <_dtoa_r+0x320>
 8007f48:	4b11      	ldr	r3, [pc, #68]	; (8007f90 <_dtoa_r+0x2f0>)
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f50:	e6c0      	b.n	8007cd4 <_dtoa_r+0x34>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e7df      	b.n	8007f16 <_dtoa_r+0x276>
 8007f56:	bf00      	nop
 8007f58:	636f4361 	.word	0x636f4361
 8007f5c:	3fd287a7 	.word	0x3fd287a7
 8007f60:	8b60c8b3 	.word	0x8b60c8b3
 8007f64:	3fc68a28 	.word	0x3fc68a28
 8007f68:	509f79fb 	.word	0x509f79fb
 8007f6c:	3fd34413 	.word	0x3fd34413
 8007f70:	0800c0ae 	.word	0x0800c0ae
 8007f74:	0800c0c5 	.word	0x0800c0c5
 8007f78:	7ff00000 	.word	0x7ff00000
 8007f7c:	0800c0aa 	.word	0x0800c0aa
 8007f80:	0800c0a1 	.word	0x0800c0a1
 8007f84:	0800bf25 	.word	0x0800bf25
 8007f88:	3ff80000 	.word	0x3ff80000
 8007f8c:	0800c230 	.word	0x0800c230
 8007f90:	0800c120 	.word	0x0800c120
 8007f94:	2501      	movs	r5, #1
 8007f96:	2300      	movs	r3, #0
 8007f98:	9306      	str	r3, [sp, #24]
 8007f9a:	9508      	str	r5, [sp, #32]
 8007f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2312      	movs	r3, #18
 8007fa8:	e7b0      	b.n	8007f0c <_dtoa_r+0x26c>
 8007faa:	2301      	movs	r3, #1
 8007fac:	9308      	str	r3, [sp, #32]
 8007fae:	e7f5      	b.n	8007f9c <_dtoa_r+0x2fc>
 8007fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fb6:	e7b8      	b.n	8007f2a <_dtoa_r+0x28a>
 8007fb8:	3101      	adds	r1, #1
 8007fba:	6041      	str	r1, [r0, #4]
 8007fbc:	0052      	lsls	r2, r2, #1
 8007fbe:	e7b8      	b.n	8007f32 <_dtoa_r+0x292>
 8007fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fc2:	9a01      	ldr	r2, [sp, #4]
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	9b03      	ldr	r3, [sp, #12]
 8007fc8:	2b0e      	cmp	r3, #14
 8007fca:	f200 809d 	bhi.w	8008108 <_dtoa_r+0x468>
 8007fce:	2d00      	cmp	r5, #0
 8007fd0:	f000 809a 	beq.w	8008108 <_dtoa_r+0x468>
 8007fd4:	9b00      	ldr	r3, [sp, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	dd32      	ble.n	8008040 <_dtoa_r+0x3a0>
 8007fda:	4ab7      	ldr	r2, [pc, #732]	; (80082b8 <_dtoa_r+0x618>)
 8007fdc:	f003 030f 	and.w	r3, r3, #15
 8007fe0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fe8:	9b00      	ldr	r3, [sp, #0]
 8007fea:	05d8      	lsls	r0, r3, #23
 8007fec:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ff0:	d516      	bpl.n	8008020 <_dtoa_r+0x380>
 8007ff2:	4bb2      	ldr	r3, [pc, #712]	; (80082bc <_dtoa_r+0x61c>)
 8007ff4:	ec51 0b19 	vmov	r0, r1, d9
 8007ff8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ffc:	f7f8 fc4e 	bl	800089c <__aeabi_ddiv>
 8008000:	f007 070f 	and.w	r7, r7, #15
 8008004:	4682      	mov	sl, r0
 8008006:	468b      	mov	fp, r1
 8008008:	2503      	movs	r5, #3
 800800a:	4eac      	ldr	r6, [pc, #688]	; (80082bc <_dtoa_r+0x61c>)
 800800c:	b957      	cbnz	r7, 8008024 <_dtoa_r+0x384>
 800800e:	4642      	mov	r2, r8
 8008010:	464b      	mov	r3, r9
 8008012:	4650      	mov	r0, sl
 8008014:	4659      	mov	r1, fp
 8008016:	f7f8 fc41 	bl	800089c <__aeabi_ddiv>
 800801a:	4682      	mov	sl, r0
 800801c:	468b      	mov	fp, r1
 800801e:	e028      	b.n	8008072 <_dtoa_r+0x3d2>
 8008020:	2502      	movs	r5, #2
 8008022:	e7f2      	b.n	800800a <_dtoa_r+0x36a>
 8008024:	07f9      	lsls	r1, r7, #31
 8008026:	d508      	bpl.n	800803a <_dtoa_r+0x39a>
 8008028:	4640      	mov	r0, r8
 800802a:	4649      	mov	r1, r9
 800802c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008030:	f7f8 fb0a 	bl	8000648 <__aeabi_dmul>
 8008034:	3501      	adds	r5, #1
 8008036:	4680      	mov	r8, r0
 8008038:	4689      	mov	r9, r1
 800803a:	107f      	asrs	r7, r7, #1
 800803c:	3608      	adds	r6, #8
 800803e:	e7e5      	b.n	800800c <_dtoa_r+0x36c>
 8008040:	f000 809b 	beq.w	800817a <_dtoa_r+0x4da>
 8008044:	9b00      	ldr	r3, [sp, #0]
 8008046:	4f9d      	ldr	r7, [pc, #628]	; (80082bc <_dtoa_r+0x61c>)
 8008048:	425e      	negs	r6, r3
 800804a:	4b9b      	ldr	r3, [pc, #620]	; (80082b8 <_dtoa_r+0x618>)
 800804c:	f006 020f 	and.w	r2, r6, #15
 8008050:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	ec51 0b19 	vmov	r0, r1, d9
 800805c:	f7f8 faf4 	bl	8000648 <__aeabi_dmul>
 8008060:	1136      	asrs	r6, r6, #4
 8008062:	4682      	mov	sl, r0
 8008064:	468b      	mov	fp, r1
 8008066:	2300      	movs	r3, #0
 8008068:	2502      	movs	r5, #2
 800806a:	2e00      	cmp	r6, #0
 800806c:	d17a      	bne.n	8008164 <_dtoa_r+0x4c4>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1d3      	bne.n	800801a <_dtoa_r+0x37a>
 8008072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8082 	beq.w	800817e <_dtoa_r+0x4de>
 800807a:	4b91      	ldr	r3, [pc, #580]	; (80082c0 <_dtoa_r+0x620>)
 800807c:	2200      	movs	r2, #0
 800807e:	4650      	mov	r0, sl
 8008080:	4659      	mov	r1, fp
 8008082:	f7f8 fd53 	bl	8000b2c <__aeabi_dcmplt>
 8008086:	2800      	cmp	r0, #0
 8008088:	d079      	beq.n	800817e <_dtoa_r+0x4de>
 800808a:	9b03      	ldr	r3, [sp, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d076      	beq.n	800817e <_dtoa_r+0x4de>
 8008090:	9b02      	ldr	r3, [sp, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	dd36      	ble.n	8008104 <_dtoa_r+0x464>
 8008096:	9b00      	ldr	r3, [sp, #0]
 8008098:	4650      	mov	r0, sl
 800809a:	4659      	mov	r1, fp
 800809c:	1e5f      	subs	r7, r3, #1
 800809e:	2200      	movs	r2, #0
 80080a0:	4b88      	ldr	r3, [pc, #544]	; (80082c4 <_dtoa_r+0x624>)
 80080a2:	f7f8 fad1 	bl	8000648 <__aeabi_dmul>
 80080a6:	9e02      	ldr	r6, [sp, #8]
 80080a8:	4682      	mov	sl, r0
 80080aa:	468b      	mov	fp, r1
 80080ac:	3501      	adds	r5, #1
 80080ae:	4628      	mov	r0, r5
 80080b0:	f7f8 fa60 	bl	8000574 <__aeabi_i2d>
 80080b4:	4652      	mov	r2, sl
 80080b6:	465b      	mov	r3, fp
 80080b8:	f7f8 fac6 	bl	8000648 <__aeabi_dmul>
 80080bc:	4b82      	ldr	r3, [pc, #520]	; (80082c8 <_dtoa_r+0x628>)
 80080be:	2200      	movs	r2, #0
 80080c0:	f7f8 f90c 	bl	80002dc <__adddf3>
 80080c4:	46d0      	mov	r8, sl
 80080c6:	46d9      	mov	r9, fp
 80080c8:	4682      	mov	sl, r0
 80080ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80080ce:	2e00      	cmp	r6, #0
 80080d0:	d158      	bne.n	8008184 <_dtoa_r+0x4e4>
 80080d2:	4b7e      	ldr	r3, [pc, #504]	; (80082cc <_dtoa_r+0x62c>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	4640      	mov	r0, r8
 80080d8:	4649      	mov	r1, r9
 80080da:	f7f8 f8fd 	bl	80002d8 <__aeabi_dsub>
 80080de:	4652      	mov	r2, sl
 80080e0:	465b      	mov	r3, fp
 80080e2:	4680      	mov	r8, r0
 80080e4:	4689      	mov	r9, r1
 80080e6:	f7f8 fd3f 	bl	8000b68 <__aeabi_dcmpgt>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	f040 8295 	bne.w	800861a <_dtoa_r+0x97a>
 80080f0:	4652      	mov	r2, sl
 80080f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80080f6:	4640      	mov	r0, r8
 80080f8:	4649      	mov	r1, r9
 80080fa:	f7f8 fd17 	bl	8000b2c <__aeabi_dcmplt>
 80080fe:	2800      	cmp	r0, #0
 8008100:	f040 8289 	bne.w	8008616 <_dtoa_r+0x976>
 8008104:	ec5b ab19 	vmov	sl, fp, d9
 8008108:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800810a:	2b00      	cmp	r3, #0
 800810c:	f2c0 8148 	blt.w	80083a0 <_dtoa_r+0x700>
 8008110:	9a00      	ldr	r2, [sp, #0]
 8008112:	2a0e      	cmp	r2, #14
 8008114:	f300 8144 	bgt.w	80083a0 <_dtoa_r+0x700>
 8008118:	4b67      	ldr	r3, [pc, #412]	; (80082b8 <_dtoa_r+0x618>)
 800811a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800811e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008124:	2b00      	cmp	r3, #0
 8008126:	f280 80d5 	bge.w	80082d4 <_dtoa_r+0x634>
 800812a:	9b03      	ldr	r3, [sp, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	f300 80d1 	bgt.w	80082d4 <_dtoa_r+0x634>
 8008132:	f040 826f 	bne.w	8008614 <_dtoa_r+0x974>
 8008136:	4b65      	ldr	r3, [pc, #404]	; (80082cc <_dtoa_r+0x62c>)
 8008138:	2200      	movs	r2, #0
 800813a:	4640      	mov	r0, r8
 800813c:	4649      	mov	r1, r9
 800813e:	f7f8 fa83 	bl	8000648 <__aeabi_dmul>
 8008142:	4652      	mov	r2, sl
 8008144:	465b      	mov	r3, fp
 8008146:	f7f8 fd05 	bl	8000b54 <__aeabi_dcmpge>
 800814a:	9e03      	ldr	r6, [sp, #12]
 800814c:	4637      	mov	r7, r6
 800814e:	2800      	cmp	r0, #0
 8008150:	f040 8245 	bne.w	80085de <_dtoa_r+0x93e>
 8008154:	9d01      	ldr	r5, [sp, #4]
 8008156:	2331      	movs	r3, #49	; 0x31
 8008158:	f805 3b01 	strb.w	r3, [r5], #1
 800815c:	9b00      	ldr	r3, [sp, #0]
 800815e:	3301      	adds	r3, #1
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	e240      	b.n	80085e6 <_dtoa_r+0x946>
 8008164:	07f2      	lsls	r2, r6, #31
 8008166:	d505      	bpl.n	8008174 <_dtoa_r+0x4d4>
 8008168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800816c:	f7f8 fa6c 	bl	8000648 <__aeabi_dmul>
 8008170:	3501      	adds	r5, #1
 8008172:	2301      	movs	r3, #1
 8008174:	1076      	asrs	r6, r6, #1
 8008176:	3708      	adds	r7, #8
 8008178:	e777      	b.n	800806a <_dtoa_r+0x3ca>
 800817a:	2502      	movs	r5, #2
 800817c:	e779      	b.n	8008072 <_dtoa_r+0x3d2>
 800817e:	9f00      	ldr	r7, [sp, #0]
 8008180:	9e03      	ldr	r6, [sp, #12]
 8008182:	e794      	b.n	80080ae <_dtoa_r+0x40e>
 8008184:	9901      	ldr	r1, [sp, #4]
 8008186:	4b4c      	ldr	r3, [pc, #304]	; (80082b8 <_dtoa_r+0x618>)
 8008188:	4431      	add	r1, r6
 800818a:	910d      	str	r1, [sp, #52]	; 0x34
 800818c:	9908      	ldr	r1, [sp, #32]
 800818e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008192:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008196:	2900      	cmp	r1, #0
 8008198:	d043      	beq.n	8008222 <_dtoa_r+0x582>
 800819a:	494d      	ldr	r1, [pc, #308]	; (80082d0 <_dtoa_r+0x630>)
 800819c:	2000      	movs	r0, #0
 800819e:	f7f8 fb7d 	bl	800089c <__aeabi_ddiv>
 80081a2:	4652      	mov	r2, sl
 80081a4:	465b      	mov	r3, fp
 80081a6:	f7f8 f897 	bl	80002d8 <__aeabi_dsub>
 80081aa:	9d01      	ldr	r5, [sp, #4]
 80081ac:	4682      	mov	sl, r0
 80081ae:	468b      	mov	fp, r1
 80081b0:	4649      	mov	r1, r9
 80081b2:	4640      	mov	r0, r8
 80081b4:	f7f8 fcf8 	bl	8000ba8 <__aeabi_d2iz>
 80081b8:	4606      	mov	r6, r0
 80081ba:	f7f8 f9db 	bl	8000574 <__aeabi_i2d>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	4640      	mov	r0, r8
 80081c4:	4649      	mov	r1, r9
 80081c6:	f7f8 f887 	bl	80002d8 <__aeabi_dsub>
 80081ca:	3630      	adds	r6, #48	; 0x30
 80081cc:	f805 6b01 	strb.w	r6, [r5], #1
 80081d0:	4652      	mov	r2, sl
 80081d2:	465b      	mov	r3, fp
 80081d4:	4680      	mov	r8, r0
 80081d6:	4689      	mov	r9, r1
 80081d8:	f7f8 fca8 	bl	8000b2c <__aeabi_dcmplt>
 80081dc:	2800      	cmp	r0, #0
 80081de:	d163      	bne.n	80082a8 <_dtoa_r+0x608>
 80081e0:	4642      	mov	r2, r8
 80081e2:	464b      	mov	r3, r9
 80081e4:	4936      	ldr	r1, [pc, #216]	; (80082c0 <_dtoa_r+0x620>)
 80081e6:	2000      	movs	r0, #0
 80081e8:	f7f8 f876 	bl	80002d8 <__aeabi_dsub>
 80081ec:	4652      	mov	r2, sl
 80081ee:	465b      	mov	r3, fp
 80081f0:	f7f8 fc9c 	bl	8000b2c <__aeabi_dcmplt>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	f040 80b5 	bne.w	8008364 <_dtoa_r+0x6c4>
 80081fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081fc:	429d      	cmp	r5, r3
 80081fe:	d081      	beq.n	8008104 <_dtoa_r+0x464>
 8008200:	4b30      	ldr	r3, [pc, #192]	; (80082c4 <_dtoa_r+0x624>)
 8008202:	2200      	movs	r2, #0
 8008204:	4650      	mov	r0, sl
 8008206:	4659      	mov	r1, fp
 8008208:	f7f8 fa1e 	bl	8000648 <__aeabi_dmul>
 800820c:	4b2d      	ldr	r3, [pc, #180]	; (80082c4 <_dtoa_r+0x624>)
 800820e:	4682      	mov	sl, r0
 8008210:	468b      	mov	fp, r1
 8008212:	4640      	mov	r0, r8
 8008214:	4649      	mov	r1, r9
 8008216:	2200      	movs	r2, #0
 8008218:	f7f8 fa16 	bl	8000648 <__aeabi_dmul>
 800821c:	4680      	mov	r8, r0
 800821e:	4689      	mov	r9, r1
 8008220:	e7c6      	b.n	80081b0 <_dtoa_r+0x510>
 8008222:	4650      	mov	r0, sl
 8008224:	4659      	mov	r1, fp
 8008226:	f7f8 fa0f 	bl	8000648 <__aeabi_dmul>
 800822a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800822c:	9d01      	ldr	r5, [sp, #4]
 800822e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008230:	4682      	mov	sl, r0
 8008232:	468b      	mov	fp, r1
 8008234:	4649      	mov	r1, r9
 8008236:	4640      	mov	r0, r8
 8008238:	f7f8 fcb6 	bl	8000ba8 <__aeabi_d2iz>
 800823c:	4606      	mov	r6, r0
 800823e:	f7f8 f999 	bl	8000574 <__aeabi_i2d>
 8008242:	3630      	adds	r6, #48	; 0x30
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	4640      	mov	r0, r8
 800824a:	4649      	mov	r1, r9
 800824c:	f7f8 f844 	bl	80002d8 <__aeabi_dsub>
 8008250:	f805 6b01 	strb.w	r6, [r5], #1
 8008254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008256:	429d      	cmp	r5, r3
 8008258:	4680      	mov	r8, r0
 800825a:	4689      	mov	r9, r1
 800825c:	f04f 0200 	mov.w	r2, #0
 8008260:	d124      	bne.n	80082ac <_dtoa_r+0x60c>
 8008262:	4b1b      	ldr	r3, [pc, #108]	; (80082d0 <_dtoa_r+0x630>)
 8008264:	4650      	mov	r0, sl
 8008266:	4659      	mov	r1, fp
 8008268:	f7f8 f838 	bl	80002dc <__adddf3>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4640      	mov	r0, r8
 8008272:	4649      	mov	r1, r9
 8008274:	f7f8 fc78 	bl	8000b68 <__aeabi_dcmpgt>
 8008278:	2800      	cmp	r0, #0
 800827a:	d173      	bne.n	8008364 <_dtoa_r+0x6c4>
 800827c:	4652      	mov	r2, sl
 800827e:	465b      	mov	r3, fp
 8008280:	4913      	ldr	r1, [pc, #76]	; (80082d0 <_dtoa_r+0x630>)
 8008282:	2000      	movs	r0, #0
 8008284:	f7f8 f828 	bl	80002d8 <__aeabi_dsub>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4640      	mov	r0, r8
 800828e:	4649      	mov	r1, r9
 8008290:	f7f8 fc4c 	bl	8000b2c <__aeabi_dcmplt>
 8008294:	2800      	cmp	r0, #0
 8008296:	f43f af35 	beq.w	8008104 <_dtoa_r+0x464>
 800829a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800829c:	1e6b      	subs	r3, r5, #1
 800829e:	930f      	str	r3, [sp, #60]	; 0x3c
 80082a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082a4:	2b30      	cmp	r3, #48	; 0x30
 80082a6:	d0f8      	beq.n	800829a <_dtoa_r+0x5fa>
 80082a8:	9700      	str	r7, [sp, #0]
 80082aa:	e049      	b.n	8008340 <_dtoa_r+0x6a0>
 80082ac:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <_dtoa_r+0x624>)
 80082ae:	f7f8 f9cb 	bl	8000648 <__aeabi_dmul>
 80082b2:	4680      	mov	r8, r0
 80082b4:	4689      	mov	r9, r1
 80082b6:	e7bd      	b.n	8008234 <_dtoa_r+0x594>
 80082b8:	0800c230 	.word	0x0800c230
 80082bc:	0800c208 	.word	0x0800c208
 80082c0:	3ff00000 	.word	0x3ff00000
 80082c4:	40240000 	.word	0x40240000
 80082c8:	401c0000 	.word	0x401c0000
 80082cc:	40140000 	.word	0x40140000
 80082d0:	3fe00000 	.word	0x3fe00000
 80082d4:	9d01      	ldr	r5, [sp, #4]
 80082d6:	4656      	mov	r6, sl
 80082d8:	465f      	mov	r7, fp
 80082da:	4642      	mov	r2, r8
 80082dc:	464b      	mov	r3, r9
 80082de:	4630      	mov	r0, r6
 80082e0:	4639      	mov	r1, r7
 80082e2:	f7f8 fadb 	bl	800089c <__aeabi_ddiv>
 80082e6:	f7f8 fc5f 	bl	8000ba8 <__aeabi_d2iz>
 80082ea:	4682      	mov	sl, r0
 80082ec:	f7f8 f942 	bl	8000574 <__aeabi_i2d>
 80082f0:	4642      	mov	r2, r8
 80082f2:	464b      	mov	r3, r9
 80082f4:	f7f8 f9a8 	bl	8000648 <__aeabi_dmul>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4630      	mov	r0, r6
 80082fe:	4639      	mov	r1, r7
 8008300:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008304:	f7f7 ffe8 	bl	80002d8 <__aeabi_dsub>
 8008308:	f805 6b01 	strb.w	r6, [r5], #1
 800830c:	9e01      	ldr	r6, [sp, #4]
 800830e:	9f03      	ldr	r7, [sp, #12]
 8008310:	1bae      	subs	r6, r5, r6
 8008312:	42b7      	cmp	r7, r6
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	d135      	bne.n	8008386 <_dtoa_r+0x6e6>
 800831a:	f7f7 ffdf 	bl	80002dc <__adddf3>
 800831e:	4642      	mov	r2, r8
 8008320:	464b      	mov	r3, r9
 8008322:	4606      	mov	r6, r0
 8008324:	460f      	mov	r7, r1
 8008326:	f7f8 fc1f 	bl	8000b68 <__aeabi_dcmpgt>
 800832a:	b9d0      	cbnz	r0, 8008362 <_dtoa_r+0x6c2>
 800832c:	4642      	mov	r2, r8
 800832e:	464b      	mov	r3, r9
 8008330:	4630      	mov	r0, r6
 8008332:	4639      	mov	r1, r7
 8008334:	f7f8 fbf0 	bl	8000b18 <__aeabi_dcmpeq>
 8008338:	b110      	cbz	r0, 8008340 <_dtoa_r+0x6a0>
 800833a:	f01a 0f01 	tst.w	sl, #1
 800833e:	d110      	bne.n	8008362 <_dtoa_r+0x6c2>
 8008340:	4620      	mov	r0, r4
 8008342:	ee18 1a10 	vmov	r1, s16
 8008346:	f000 fe75 	bl	8009034 <_Bfree>
 800834a:	2300      	movs	r3, #0
 800834c:	9800      	ldr	r0, [sp, #0]
 800834e:	702b      	strb	r3, [r5, #0]
 8008350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008352:	3001      	adds	r0, #1
 8008354:	6018      	str	r0, [r3, #0]
 8008356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008358:	2b00      	cmp	r3, #0
 800835a:	f43f acf1 	beq.w	8007d40 <_dtoa_r+0xa0>
 800835e:	601d      	str	r5, [r3, #0]
 8008360:	e4ee      	b.n	8007d40 <_dtoa_r+0xa0>
 8008362:	9f00      	ldr	r7, [sp, #0]
 8008364:	462b      	mov	r3, r5
 8008366:	461d      	mov	r5, r3
 8008368:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800836c:	2a39      	cmp	r2, #57	; 0x39
 800836e:	d106      	bne.n	800837e <_dtoa_r+0x6de>
 8008370:	9a01      	ldr	r2, [sp, #4]
 8008372:	429a      	cmp	r2, r3
 8008374:	d1f7      	bne.n	8008366 <_dtoa_r+0x6c6>
 8008376:	9901      	ldr	r1, [sp, #4]
 8008378:	2230      	movs	r2, #48	; 0x30
 800837a:	3701      	adds	r7, #1
 800837c:	700a      	strb	r2, [r1, #0]
 800837e:	781a      	ldrb	r2, [r3, #0]
 8008380:	3201      	adds	r2, #1
 8008382:	701a      	strb	r2, [r3, #0]
 8008384:	e790      	b.n	80082a8 <_dtoa_r+0x608>
 8008386:	4ba6      	ldr	r3, [pc, #664]	; (8008620 <_dtoa_r+0x980>)
 8008388:	2200      	movs	r2, #0
 800838a:	f7f8 f95d 	bl	8000648 <__aeabi_dmul>
 800838e:	2200      	movs	r2, #0
 8008390:	2300      	movs	r3, #0
 8008392:	4606      	mov	r6, r0
 8008394:	460f      	mov	r7, r1
 8008396:	f7f8 fbbf 	bl	8000b18 <__aeabi_dcmpeq>
 800839a:	2800      	cmp	r0, #0
 800839c:	d09d      	beq.n	80082da <_dtoa_r+0x63a>
 800839e:	e7cf      	b.n	8008340 <_dtoa_r+0x6a0>
 80083a0:	9a08      	ldr	r2, [sp, #32]
 80083a2:	2a00      	cmp	r2, #0
 80083a4:	f000 80d7 	beq.w	8008556 <_dtoa_r+0x8b6>
 80083a8:	9a06      	ldr	r2, [sp, #24]
 80083aa:	2a01      	cmp	r2, #1
 80083ac:	f300 80ba 	bgt.w	8008524 <_dtoa_r+0x884>
 80083b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083b2:	2a00      	cmp	r2, #0
 80083b4:	f000 80b2 	beq.w	800851c <_dtoa_r+0x87c>
 80083b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083bc:	9e07      	ldr	r6, [sp, #28]
 80083be:	9d04      	ldr	r5, [sp, #16]
 80083c0:	9a04      	ldr	r2, [sp, #16]
 80083c2:	441a      	add	r2, r3
 80083c4:	9204      	str	r2, [sp, #16]
 80083c6:	9a05      	ldr	r2, [sp, #20]
 80083c8:	2101      	movs	r1, #1
 80083ca:	441a      	add	r2, r3
 80083cc:	4620      	mov	r0, r4
 80083ce:	9205      	str	r2, [sp, #20]
 80083d0:	f000 ff32 	bl	8009238 <__i2b>
 80083d4:	4607      	mov	r7, r0
 80083d6:	2d00      	cmp	r5, #0
 80083d8:	dd0c      	ble.n	80083f4 <_dtoa_r+0x754>
 80083da:	9b05      	ldr	r3, [sp, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	dd09      	ble.n	80083f4 <_dtoa_r+0x754>
 80083e0:	42ab      	cmp	r3, r5
 80083e2:	9a04      	ldr	r2, [sp, #16]
 80083e4:	bfa8      	it	ge
 80083e6:	462b      	movge	r3, r5
 80083e8:	1ad2      	subs	r2, r2, r3
 80083ea:	9204      	str	r2, [sp, #16]
 80083ec:	9a05      	ldr	r2, [sp, #20]
 80083ee:	1aed      	subs	r5, r5, r3
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	9305      	str	r3, [sp, #20]
 80083f4:	9b07      	ldr	r3, [sp, #28]
 80083f6:	b31b      	cbz	r3, 8008440 <_dtoa_r+0x7a0>
 80083f8:	9b08      	ldr	r3, [sp, #32]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 80af 	beq.w	800855e <_dtoa_r+0x8be>
 8008400:	2e00      	cmp	r6, #0
 8008402:	dd13      	ble.n	800842c <_dtoa_r+0x78c>
 8008404:	4639      	mov	r1, r7
 8008406:	4632      	mov	r2, r6
 8008408:	4620      	mov	r0, r4
 800840a:	f000 ffd5 	bl	80093b8 <__pow5mult>
 800840e:	ee18 2a10 	vmov	r2, s16
 8008412:	4601      	mov	r1, r0
 8008414:	4607      	mov	r7, r0
 8008416:	4620      	mov	r0, r4
 8008418:	f000 ff24 	bl	8009264 <__multiply>
 800841c:	ee18 1a10 	vmov	r1, s16
 8008420:	4680      	mov	r8, r0
 8008422:	4620      	mov	r0, r4
 8008424:	f000 fe06 	bl	8009034 <_Bfree>
 8008428:	ee08 8a10 	vmov	s16, r8
 800842c:	9b07      	ldr	r3, [sp, #28]
 800842e:	1b9a      	subs	r2, r3, r6
 8008430:	d006      	beq.n	8008440 <_dtoa_r+0x7a0>
 8008432:	ee18 1a10 	vmov	r1, s16
 8008436:	4620      	mov	r0, r4
 8008438:	f000 ffbe 	bl	80093b8 <__pow5mult>
 800843c:	ee08 0a10 	vmov	s16, r0
 8008440:	2101      	movs	r1, #1
 8008442:	4620      	mov	r0, r4
 8008444:	f000 fef8 	bl	8009238 <__i2b>
 8008448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844a:	2b00      	cmp	r3, #0
 800844c:	4606      	mov	r6, r0
 800844e:	f340 8088 	ble.w	8008562 <_dtoa_r+0x8c2>
 8008452:	461a      	mov	r2, r3
 8008454:	4601      	mov	r1, r0
 8008456:	4620      	mov	r0, r4
 8008458:	f000 ffae 	bl	80093b8 <__pow5mult>
 800845c:	9b06      	ldr	r3, [sp, #24]
 800845e:	2b01      	cmp	r3, #1
 8008460:	4606      	mov	r6, r0
 8008462:	f340 8081 	ble.w	8008568 <_dtoa_r+0x8c8>
 8008466:	f04f 0800 	mov.w	r8, #0
 800846a:	6933      	ldr	r3, [r6, #16]
 800846c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008470:	6918      	ldr	r0, [r3, #16]
 8008472:	f000 fe91 	bl	8009198 <__hi0bits>
 8008476:	f1c0 0020 	rsb	r0, r0, #32
 800847a:	9b05      	ldr	r3, [sp, #20]
 800847c:	4418      	add	r0, r3
 800847e:	f010 001f 	ands.w	r0, r0, #31
 8008482:	f000 8092 	beq.w	80085aa <_dtoa_r+0x90a>
 8008486:	f1c0 0320 	rsb	r3, r0, #32
 800848a:	2b04      	cmp	r3, #4
 800848c:	f340 808a 	ble.w	80085a4 <_dtoa_r+0x904>
 8008490:	f1c0 001c 	rsb	r0, r0, #28
 8008494:	9b04      	ldr	r3, [sp, #16]
 8008496:	4403      	add	r3, r0
 8008498:	9304      	str	r3, [sp, #16]
 800849a:	9b05      	ldr	r3, [sp, #20]
 800849c:	4403      	add	r3, r0
 800849e:	4405      	add	r5, r0
 80084a0:	9305      	str	r3, [sp, #20]
 80084a2:	9b04      	ldr	r3, [sp, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	dd07      	ble.n	80084b8 <_dtoa_r+0x818>
 80084a8:	ee18 1a10 	vmov	r1, s16
 80084ac:	461a      	mov	r2, r3
 80084ae:	4620      	mov	r0, r4
 80084b0:	f000 ffdc 	bl	800946c <__lshift>
 80084b4:	ee08 0a10 	vmov	s16, r0
 80084b8:	9b05      	ldr	r3, [sp, #20]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dd05      	ble.n	80084ca <_dtoa_r+0x82a>
 80084be:	4631      	mov	r1, r6
 80084c0:	461a      	mov	r2, r3
 80084c2:	4620      	mov	r0, r4
 80084c4:	f000 ffd2 	bl	800946c <__lshift>
 80084c8:	4606      	mov	r6, r0
 80084ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d06e      	beq.n	80085ae <_dtoa_r+0x90e>
 80084d0:	ee18 0a10 	vmov	r0, s16
 80084d4:	4631      	mov	r1, r6
 80084d6:	f001 f839 	bl	800954c <__mcmp>
 80084da:	2800      	cmp	r0, #0
 80084dc:	da67      	bge.n	80085ae <_dtoa_r+0x90e>
 80084de:	9b00      	ldr	r3, [sp, #0]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	ee18 1a10 	vmov	r1, s16
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	220a      	movs	r2, #10
 80084ea:	2300      	movs	r3, #0
 80084ec:	4620      	mov	r0, r4
 80084ee:	f000 fdc3 	bl	8009078 <__multadd>
 80084f2:	9b08      	ldr	r3, [sp, #32]
 80084f4:	ee08 0a10 	vmov	s16, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 81b1 	beq.w	8008860 <_dtoa_r+0xbc0>
 80084fe:	2300      	movs	r3, #0
 8008500:	4639      	mov	r1, r7
 8008502:	220a      	movs	r2, #10
 8008504:	4620      	mov	r0, r4
 8008506:	f000 fdb7 	bl	8009078 <__multadd>
 800850a:	9b02      	ldr	r3, [sp, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	4607      	mov	r7, r0
 8008510:	f300 808e 	bgt.w	8008630 <_dtoa_r+0x990>
 8008514:	9b06      	ldr	r3, [sp, #24]
 8008516:	2b02      	cmp	r3, #2
 8008518:	dc51      	bgt.n	80085be <_dtoa_r+0x91e>
 800851a:	e089      	b.n	8008630 <_dtoa_r+0x990>
 800851c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800851e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008522:	e74b      	b.n	80083bc <_dtoa_r+0x71c>
 8008524:	9b03      	ldr	r3, [sp, #12]
 8008526:	1e5e      	subs	r6, r3, #1
 8008528:	9b07      	ldr	r3, [sp, #28]
 800852a:	42b3      	cmp	r3, r6
 800852c:	bfbf      	itttt	lt
 800852e:	9b07      	ldrlt	r3, [sp, #28]
 8008530:	9607      	strlt	r6, [sp, #28]
 8008532:	1af2      	sublt	r2, r6, r3
 8008534:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008536:	bfb6      	itet	lt
 8008538:	189b      	addlt	r3, r3, r2
 800853a:	1b9e      	subge	r6, r3, r6
 800853c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800853e:	9b03      	ldr	r3, [sp, #12]
 8008540:	bfb8      	it	lt
 8008542:	2600      	movlt	r6, #0
 8008544:	2b00      	cmp	r3, #0
 8008546:	bfb7      	itett	lt
 8008548:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800854c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008550:	1a9d      	sublt	r5, r3, r2
 8008552:	2300      	movlt	r3, #0
 8008554:	e734      	b.n	80083c0 <_dtoa_r+0x720>
 8008556:	9e07      	ldr	r6, [sp, #28]
 8008558:	9d04      	ldr	r5, [sp, #16]
 800855a:	9f08      	ldr	r7, [sp, #32]
 800855c:	e73b      	b.n	80083d6 <_dtoa_r+0x736>
 800855e:	9a07      	ldr	r2, [sp, #28]
 8008560:	e767      	b.n	8008432 <_dtoa_r+0x792>
 8008562:	9b06      	ldr	r3, [sp, #24]
 8008564:	2b01      	cmp	r3, #1
 8008566:	dc18      	bgt.n	800859a <_dtoa_r+0x8fa>
 8008568:	f1ba 0f00 	cmp.w	sl, #0
 800856c:	d115      	bne.n	800859a <_dtoa_r+0x8fa>
 800856e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008572:	b993      	cbnz	r3, 800859a <_dtoa_r+0x8fa>
 8008574:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008578:	0d1b      	lsrs	r3, r3, #20
 800857a:	051b      	lsls	r3, r3, #20
 800857c:	b183      	cbz	r3, 80085a0 <_dtoa_r+0x900>
 800857e:	9b04      	ldr	r3, [sp, #16]
 8008580:	3301      	adds	r3, #1
 8008582:	9304      	str	r3, [sp, #16]
 8008584:	9b05      	ldr	r3, [sp, #20]
 8008586:	3301      	adds	r3, #1
 8008588:	9305      	str	r3, [sp, #20]
 800858a:	f04f 0801 	mov.w	r8, #1
 800858e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008590:	2b00      	cmp	r3, #0
 8008592:	f47f af6a 	bne.w	800846a <_dtoa_r+0x7ca>
 8008596:	2001      	movs	r0, #1
 8008598:	e76f      	b.n	800847a <_dtoa_r+0x7da>
 800859a:	f04f 0800 	mov.w	r8, #0
 800859e:	e7f6      	b.n	800858e <_dtoa_r+0x8ee>
 80085a0:	4698      	mov	r8, r3
 80085a2:	e7f4      	b.n	800858e <_dtoa_r+0x8ee>
 80085a4:	f43f af7d 	beq.w	80084a2 <_dtoa_r+0x802>
 80085a8:	4618      	mov	r0, r3
 80085aa:	301c      	adds	r0, #28
 80085ac:	e772      	b.n	8008494 <_dtoa_r+0x7f4>
 80085ae:	9b03      	ldr	r3, [sp, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	dc37      	bgt.n	8008624 <_dtoa_r+0x984>
 80085b4:	9b06      	ldr	r3, [sp, #24]
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	dd34      	ble.n	8008624 <_dtoa_r+0x984>
 80085ba:	9b03      	ldr	r3, [sp, #12]
 80085bc:	9302      	str	r3, [sp, #8]
 80085be:	9b02      	ldr	r3, [sp, #8]
 80085c0:	b96b      	cbnz	r3, 80085de <_dtoa_r+0x93e>
 80085c2:	4631      	mov	r1, r6
 80085c4:	2205      	movs	r2, #5
 80085c6:	4620      	mov	r0, r4
 80085c8:	f000 fd56 	bl	8009078 <__multadd>
 80085cc:	4601      	mov	r1, r0
 80085ce:	4606      	mov	r6, r0
 80085d0:	ee18 0a10 	vmov	r0, s16
 80085d4:	f000 ffba 	bl	800954c <__mcmp>
 80085d8:	2800      	cmp	r0, #0
 80085da:	f73f adbb 	bgt.w	8008154 <_dtoa_r+0x4b4>
 80085de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e0:	9d01      	ldr	r5, [sp, #4]
 80085e2:	43db      	mvns	r3, r3
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	f04f 0800 	mov.w	r8, #0
 80085ea:	4631      	mov	r1, r6
 80085ec:	4620      	mov	r0, r4
 80085ee:	f000 fd21 	bl	8009034 <_Bfree>
 80085f2:	2f00      	cmp	r7, #0
 80085f4:	f43f aea4 	beq.w	8008340 <_dtoa_r+0x6a0>
 80085f8:	f1b8 0f00 	cmp.w	r8, #0
 80085fc:	d005      	beq.n	800860a <_dtoa_r+0x96a>
 80085fe:	45b8      	cmp	r8, r7
 8008600:	d003      	beq.n	800860a <_dtoa_r+0x96a>
 8008602:	4641      	mov	r1, r8
 8008604:	4620      	mov	r0, r4
 8008606:	f000 fd15 	bl	8009034 <_Bfree>
 800860a:	4639      	mov	r1, r7
 800860c:	4620      	mov	r0, r4
 800860e:	f000 fd11 	bl	8009034 <_Bfree>
 8008612:	e695      	b.n	8008340 <_dtoa_r+0x6a0>
 8008614:	2600      	movs	r6, #0
 8008616:	4637      	mov	r7, r6
 8008618:	e7e1      	b.n	80085de <_dtoa_r+0x93e>
 800861a:	9700      	str	r7, [sp, #0]
 800861c:	4637      	mov	r7, r6
 800861e:	e599      	b.n	8008154 <_dtoa_r+0x4b4>
 8008620:	40240000 	.word	0x40240000
 8008624:	9b08      	ldr	r3, [sp, #32]
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 80ca 	beq.w	80087c0 <_dtoa_r+0xb20>
 800862c:	9b03      	ldr	r3, [sp, #12]
 800862e:	9302      	str	r3, [sp, #8]
 8008630:	2d00      	cmp	r5, #0
 8008632:	dd05      	ble.n	8008640 <_dtoa_r+0x9a0>
 8008634:	4639      	mov	r1, r7
 8008636:	462a      	mov	r2, r5
 8008638:	4620      	mov	r0, r4
 800863a:	f000 ff17 	bl	800946c <__lshift>
 800863e:	4607      	mov	r7, r0
 8008640:	f1b8 0f00 	cmp.w	r8, #0
 8008644:	d05b      	beq.n	80086fe <_dtoa_r+0xa5e>
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fcb3 	bl	8008fb4 <_Balloc>
 800864e:	4605      	mov	r5, r0
 8008650:	b928      	cbnz	r0, 800865e <_dtoa_r+0x9be>
 8008652:	4b87      	ldr	r3, [pc, #540]	; (8008870 <_dtoa_r+0xbd0>)
 8008654:	4602      	mov	r2, r0
 8008656:	f240 21ea 	movw	r1, #746	; 0x2ea
 800865a:	f7ff bb3b 	b.w	8007cd4 <_dtoa_r+0x34>
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	3202      	adds	r2, #2
 8008662:	0092      	lsls	r2, r2, #2
 8008664:	f107 010c 	add.w	r1, r7, #12
 8008668:	300c      	adds	r0, #12
 800866a:	f000 fc95 	bl	8008f98 <memcpy>
 800866e:	2201      	movs	r2, #1
 8008670:	4629      	mov	r1, r5
 8008672:	4620      	mov	r0, r4
 8008674:	f000 fefa 	bl	800946c <__lshift>
 8008678:	9b01      	ldr	r3, [sp, #4]
 800867a:	f103 0901 	add.w	r9, r3, #1
 800867e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008682:	4413      	add	r3, r2
 8008684:	9305      	str	r3, [sp, #20]
 8008686:	f00a 0301 	and.w	r3, sl, #1
 800868a:	46b8      	mov	r8, r7
 800868c:	9304      	str	r3, [sp, #16]
 800868e:	4607      	mov	r7, r0
 8008690:	4631      	mov	r1, r6
 8008692:	ee18 0a10 	vmov	r0, s16
 8008696:	f7ff fa77 	bl	8007b88 <quorem>
 800869a:	4641      	mov	r1, r8
 800869c:	9002      	str	r0, [sp, #8]
 800869e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086a2:	ee18 0a10 	vmov	r0, s16
 80086a6:	f000 ff51 	bl	800954c <__mcmp>
 80086aa:	463a      	mov	r2, r7
 80086ac:	9003      	str	r0, [sp, #12]
 80086ae:	4631      	mov	r1, r6
 80086b0:	4620      	mov	r0, r4
 80086b2:	f000 ff67 	bl	8009584 <__mdiff>
 80086b6:	68c2      	ldr	r2, [r0, #12]
 80086b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80086bc:	4605      	mov	r5, r0
 80086be:	bb02      	cbnz	r2, 8008702 <_dtoa_r+0xa62>
 80086c0:	4601      	mov	r1, r0
 80086c2:	ee18 0a10 	vmov	r0, s16
 80086c6:	f000 ff41 	bl	800954c <__mcmp>
 80086ca:	4602      	mov	r2, r0
 80086cc:	4629      	mov	r1, r5
 80086ce:	4620      	mov	r0, r4
 80086d0:	9207      	str	r2, [sp, #28]
 80086d2:	f000 fcaf 	bl	8009034 <_Bfree>
 80086d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80086da:	ea43 0102 	orr.w	r1, r3, r2
 80086de:	9b04      	ldr	r3, [sp, #16]
 80086e0:	430b      	orrs	r3, r1
 80086e2:	464d      	mov	r5, r9
 80086e4:	d10f      	bne.n	8008706 <_dtoa_r+0xa66>
 80086e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086ea:	d02a      	beq.n	8008742 <_dtoa_r+0xaa2>
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	dd02      	ble.n	80086f8 <_dtoa_r+0xa58>
 80086f2:	9b02      	ldr	r3, [sp, #8]
 80086f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80086f8:	f88b a000 	strb.w	sl, [fp]
 80086fc:	e775      	b.n	80085ea <_dtoa_r+0x94a>
 80086fe:	4638      	mov	r0, r7
 8008700:	e7ba      	b.n	8008678 <_dtoa_r+0x9d8>
 8008702:	2201      	movs	r2, #1
 8008704:	e7e2      	b.n	80086cc <_dtoa_r+0xa2c>
 8008706:	9b03      	ldr	r3, [sp, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	db04      	blt.n	8008716 <_dtoa_r+0xa76>
 800870c:	9906      	ldr	r1, [sp, #24]
 800870e:	430b      	orrs	r3, r1
 8008710:	9904      	ldr	r1, [sp, #16]
 8008712:	430b      	orrs	r3, r1
 8008714:	d122      	bne.n	800875c <_dtoa_r+0xabc>
 8008716:	2a00      	cmp	r2, #0
 8008718:	ddee      	ble.n	80086f8 <_dtoa_r+0xa58>
 800871a:	ee18 1a10 	vmov	r1, s16
 800871e:	2201      	movs	r2, #1
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fea3 	bl	800946c <__lshift>
 8008726:	4631      	mov	r1, r6
 8008728:	ee08 0a10 	vmov	s16, r0
 800872c:	f000 ff0e 	bl	800954c <__mcmp>
 8008730:	2800      	cmp	r0, #0
 8008732:	dc03      	bgt.n	800873c <_dtoa_r+0xa9c>
 8008734:	d1e0      	bne.n	80086f8 <_dtoa_r+0xa58>
 8008736:	f01a 0f01 	tst.w	sl, #1
 800873a:	d0dd      	beq.n	80086f8 <_dtoa_r+0xa58>
 800873c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008740:	d1d7      	bne.n	80086f2 <_dtoa_r+0xa52>
 8008742:	2339      	movs	r3, #57	; 0x39
 8008744:	f88b 3000 	strb.w	r3, [fp]
 8008748:	462b      	mov	r3, r5
 800874a:	461d      	mov	r5, r3
 800874c:	3b01      	subs	r3, #1
 800874e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008752:	2a39      	cmp	r2, #57	; 0x39
 8008754:	d071      	beq.n	800883a <_dtoa_r+0xb9a>
 8008756:	3201      	adds	r2, #1
 8008758:	701a      	strb	r2, [r3, #0]
 800875a:	e746      	b.n	80085ea <_dtoa_r+0x94a>
 800875c:	2a00      	cmp	r2, #0
 800875e:	dd07      	ble.n	8008770 <_dtoa_r+0xad0>
 8008760:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008764:	d0ed      	beq.n	8008742 <_dtoa_r+0xaa2>
 8008766:	f10a 0301 	add.w	r3, sl, #1
 800876a:	f88b 3000 	strb.w	r3, [fp]
 800876e:	e73c      	b.n	80085ea <_dtoa_r+0x94a>
 8008770:	9b05      	ldr	r3, [sp, #20]
 8008772:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008776:	4599      	cmp	r9, r3
 8008778:	d047      	beq.n	800880a <_dtoa_r+0xb6a>
 800877a:	ee18 1a10 	vmov	r1, s16
 800877e:	2300      	movs	r3, #0
 8008780:	220a      	movs	r2, #10
 8008782:	4620      	mov	r0, r4
 8008784:	f000 fc78 	bl	8009078 <__multadd>
 8008788:	45b8      	cmp	r8, r7
 800878a:	ee08 0a10 	vmov	s16, r0
 800878e:	f04f 0300 	mov.w	r3, #0
 8008792:	f04f 020a 	mov.w	r2, #10
 8008796:	4641      	mov	r1, r8
 8008798:	4620      	mov	r0, r4
 800879a:	d106      	bne.n	80087aa <_dtoa_r+0xb0a>
 800879c:	f000 fc6c 	bl	8009078 <__multadd>
 80087a0:	4680      	mov	r8, r0
 80087a2:	4607      	mov	r7, r0
 80087a4:	f109 0901 	add.w	r9, r9, #1
 80087a8:	e772      	b.n	8008690 <_dtoa_r+0x9f0>
 80087aa:	f000 fc65 	bl	8009078 <__multadd>
 80087ae:	4639      	mov	r1, r7
 80087b0:	4680      	mov	r8, r0
 80087b2:	2300      	movs	r3, #0
 80087b4:	220a      	movs	r2, #10
 80087b6:	4620      	mov	r0, r4
 80087b8:	f000 fc5e 	bl	8009078 <__multadd>
 80087bc:	4607      	mov	r7, r0
 80087be:	e7f1      	b.n	80087a4 <_dtoa_r+0xb04>
 80087c0:	9b03      	ldr	r3, [sp, #12]
 80087c2:	9302      	str	r3, [sp, #8]
 80087c4:	9d01      	ldr	r5, [sp, #4]
 80087c6:	ee18 0a10 	vmov	r0, s16
 80087ca:	4631      	mov	r1, r6
 80087cc:	f7ff f9dc 	bl	8007b88 <quorem>
 80087d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80087d4:	9b01      	ldr	r3, [sp, #4]
 80087d6:	f805 ab01 	strb.w	sl, [r5], #1
 80087da:	1aea      	subs	r2, r5, r3
 80087dc:	9b02      	ldr	r3, [sp, #8]
 80087de:	4293      	cmp	r3, r2
 80087e0:	dd09      	ble.n	80087f6 <_dtoa_r+0xb56>
 80087e2:	ee18 1a10 	vmov	r1, s16
 80087e6:	2300      	movs	r3, #0
 80087e8:	220a      	movs	r2, #10
 80087ea:	4620      	mov	r0, r4
 80087ec:	f000 fc44 	bl	8009078 <__multadd>
 80087f0:	ee08 0a10 	vmov	s16, r0
 80087f4:	e7e7      	b.n	80087c6 <_dtoa_r+0xb26>
 80087f6:	9b02      	ldr	r3, [sp, #8]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	bfc8      	it	gt
 80087fc:	461d      	movgt	r5, r3
 80087fe:	9b01      	ldr	r3, [sp, #4]
 8008800:	bfd8      	it	le
 8008802:	2501      	movle	r5, #1
 8008804:	441d      	add	r5, r3
 8008806:	f04f 0800 	mov.w	r8, #0
 800880a:	ee18 1a10 	vmov	r1, s16
 800880e:	2201      	movs	r2, #1
 8008810:	4620      	mov	r0, r4
 8008812:	f000 fe2b 	bl	800946c <__lshift>
 8008816:	4631      	mov	r1, r6
 8008818:	ee08 0a10 	vmov	s16, r0
 800881c:	f000 fe96 	bl	800954c <__mcmp>
 8008820:	2800      	cmp	r0, #0
 8008822:	dc91      	bgt.n	8008748 <_dtoa_r+0xaa8>
 8008824:	d102      	bne.n	800882c <_dtoa_r+0xb8c>
 8008826:	f01a 0f01 	tst.w	sl, #1
 800882a:	d18d      	bne.n	8008748 <_dtoa_r+0xaa8>
 800882c:	462b      	mov	r3, r5
 800882e:	461d      	mov	r5, r3
 8008830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008834:	2a30      	cmp	r2, #48	; 0x30
 8008836:	d0fa      	beq.n	800882e <_dtoa_r+0xb8e>
 8008838:	e6d7      	b.n	80085ea <_dtoa_r+0x94a>
 800883a:	9a01      	ldr	r2, [sp, #4]
 800883c:	429a      	cmp	r2, r3
 800883e:	d184      	bne.n	800874a <_dtoa_r+0xaaa>
 8008840:	9b00      	ldr	r3, [sp, #0]
 8008842:	3301      	adds	r3, #1
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	2331      	movs	r3, #49	; 0x31
 8008848:	7013      	strb	r3, [r2, #0]
 800884a:	e6ce      	b.n	80085ea <_dtoa_r+0x94a>
 800884c:	4b09      	ldr	r3, [pc, #36]	; (8008874 <_dtoa_r+0xbd4>)
 800884e:	f7ff ba95 	b.w	8007d7c <_dtoa_r+0xdc>
 8008852:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008854:	2b00      	cmp	r3, #0
 8008856:	f47f aa6e 	bne.w	8007d36 <_dtoa_r+0x96>
 800885a:	4b07      	ldr	r3, [pc, #28]	; (8008878 <_dtoa_r+0xbd8>)
 800885c:	f7ff ba8e 	b.w	8007d7c <_dtoa_r+0xdc>
 8008860:	9b02      	ldr	r3, [sp, #8]
 8008862:	2b00      	cmp	r3, #0
 8008864:	dcae      	bgt.n	80087c4 <_dtoa_r+0xb24>
 8008866:	9b06      	ldr	r3, [sp, #24]
 8008868:	2b02      	cmp	r3, #2
 800886a:	f73f aea8 	bgt.w	80085be <_dtoa_r+0x91e>
 800886e:	e7a9      	b.n	80087c4 <_dtoa_r+0xb24>
 8008870:	0800c120 	.word	0x0800c120
 8008874:	0800bf24 	.word	0x0800bf24
 8008878:	0800c0a1 	.word	0x0800c0a1

0800887c <rshift>:
 800887c:	6903      	ldr	r3, [r0, #16]
 800887e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008882:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008886:	ea4f 1261 	mov.w	r2, r1, asr #5
 800888a:	f100 0414 	add.w	r4, r0, #20
 800888e:	dd45      	ble.n	800891c <rshift+0xa0>
 8008890:	f011 011f 	ands.w	r1, r1, #31
 8008894:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008898:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800889c:	d10c      	bne.n	80088b8 <rshift+0x3c>
 800889e:	f100 0710 	add.w	r7, r0, #16
 80088a2:	4629      	mov	r1, r5
 80088a4:	42b1      	cmp	r1, r6
 80088a6:	d334      	bcc.n	8008912 <rshift+0x96>
 80088a8:	1a9b      	subs	r3, r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	1eea      	subs	r2, r5, #3
 80088ae:	4296      	cmp	r6, r2
 80088b0:	bf38      	it	cc
 80088b2:	2300      	movcc	r3, #0
 80088b4:	4423      	add	r3, r4
 80088b6:	e015      	b.n	80088e4 <rshift+0x68>
 80088b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80088bc:	f1c1 0820 	rsb	r8, r1, #32
 80088c0:	40cf      	lsrs	r7, r1
 80088c2:	f105 0e04 	add.w	lr, r5, #4
 80088c6:	46a1      	mov	r9, r4
 80088c8:	4576      	cmp	r6, lr
 80088ca:	46f4      	mov	ip, lr
 80088cc:	d815      	bhi.n	80088fa <rshift+0x7e>
 80088ce:	1a9a      	subs	r2, r3, r2
 80088d0:	0092      	lsls	r2, r2, #2
 80088d2:	3a04      	subs	r2, #4
 80088d4:	3501      	adds	r5, #1
 80088d6:	42ae      	cmp	r6, r5
 80088d8:	bf38      	it	cc
 80088da:	2200      	movcc	r2, #0
 80088dc:	18a3      	adds	r3, r4, r2
 80088de:	50a7      	str	r7, [r4, r2]
 80088e0:	b107      	cbz	r7, 80088e4 <rshift+0x68>
 80088e2:	3304      	adds	r3, #4
 80088e4:	1b1a      	subs	r2, r3, r4
 80088e6:	42a3      	cmp	r3, r4
 80088e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80088ec:	bf08      	it	eq
 80088ee:	2300      	moveq	r3, #0
 80088f0:	6102      	str	r2, [r0, #16]
 80088f2:	bf08      	it	eq
 80088f4:	6143      	streq	r3, [r0, #20]
 80088f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088fa:	f8dc c000 	ldr.w	ip, [ip]
 80088fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8008902:	ea4c 0707 	orr.w	r7, ip, r7
 8008906:	f849 7b04 	str.w	r7, [r9], #4
 800890a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800890e:	40cf      	lsrs	r7, r1
 8008910:	e7da      	b.n	80088c8 <rshift+0x4c>
 8008912:	f851 cb04 	ldr.w	ip, [r1], #4
 8008916:	f847 cf04 	str.w	ip, [r7, #4]!
 800891a:	e7c3      	b.n	80088a4 <rshift+0x28>
 800891c:	4623      	mov	r3, r4
 800891e:	e7e1      	b.n	80088e4 <rshift+0x68>

08008920 <__hexdig_fun>:
 8008920:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008924:	2b09      	cmp	r3, #9
 8008926:	d802      	bhi.n	800892e <__hexdig_fun+0xe>
 8008928:	3820      	subs	r0, #32
 800892a:	b2c0      	uxtb	r0, r0
 800892c:	4770      	bx	lr
 800892e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008932:	2b05      	cmp	r3, #5
 8008934:	d801      	bhi.n	800893a <__hexdig_fun+0x1a>
 8008936:	3847      	subs	r0, #71	; 0x47
 8008938:	e7f7      	b.n	800892a <__hexdig_fun+0xa>
 800893a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800893e:	2b05      	cmp	r3, #5
 8008940:	d801      	bhi.n	8008946 <__hexdig_fun+0x26>
 8008942:	3827      	subs	r0, #39	; 0x27
 8008944:	e7f1      	b.n	800892a <__hexdig_fun+0xa>
 8008946:	2000      	movs	r0, #0
 8008948:	4770      	bx	lr
	...

0800894c <__gethex>:
 800894c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008950:	ed2d 8b02 	vpush	{d8}
 8008954:	b089      	sub	sp, #36	; 0x24
 8008956:	ee08 0a10 	vmov	s16, r0
 800895a:	9304      	str	r3, [sp, #16]
 800895c:	4bb4      	ldr	r3, [pc, #720]	; (8008c30 <__gethex+0x2e4>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	9301      	str	r3, [sp, #4]
 8008962:	4618      	mov	r0, r3
 8008964:	468b      	mov	fp, r1
 8008966:	4690      	mov	r8, r2
 8008968:	f7f7 fc5a 	bl	8000220 <strlen>
 800896c:	9b01      	ldr	r3, [sp, #4]
 800896e:	f8db 2000 	ldr.w	r2, [fp]
 8008972:	4403      	add	r3, r0
 8008974:	4682      	mov	sl, r0
 8008976:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800897a:	9305      	str	r3, [sp, #20]
 800897c:	1c93      	adds	r3, r2, #2
 800897e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008982:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008986:	32fe      	adds	r2, #254	; 0xfe
 8008988:	18d1      	adds	r1, r2, r3
 800898a:	461f      	mov	r7, r3
 800898c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008990:	9100      	str	r1, [sp, #0]
 8008992:	2830      	cmp	r0, #48	; 0x30
 8008994:	d0f8      	beq.n	8008988 <__gethex+0x3c>
 8008996:	f7ff ffc3 	bl	8008920 <__hexdig_fun>
 800899a:	4604      	mov	r4, r0
 800899c:	2800      	cmp	r0, #0
 800899e:	d13a      	bne.n	8008a16 <__gethex+0xca>
 80089a0:	9901      	ldr	r1, [sp, #4]
 80089a2:	4652      	mov	r2, sl
 80089a4:	4638      	mov	r0, r7
 80089a6:	f001 fa33 	bl	8009e10 <strncmp>
 80089aa:	4605      	mov	r5, r0
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d168      	bne.n	8008a82 <__gethex+0x136>
 80089b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80089b4:	eb07 060a 	add.w	r6, r7, sl
 80089b8:	f7ff ffb2 	bl	8008920 <__hexdig_fun>
 80089bc:	2800      	cmp	r0, #0
 80089be:	d062      	beq.n	8008a86 <__gethex+0x13a>
 80089c0:	4633      	mov	r3, r6
 80089c2:	7818      	ldrb	r0, [r3, #0]
 80089c4:	2830      	cmp	r0, #48	; 0x30
 80089c6:	461f      	mov	r7, r3
 80089c8:	f103 0301 	add.w	r3, r3, #1
 80089cc:	d0f9      	beq.n	80089c2 <__gethex+0x76>
 80089ce:	f7ff ffa7 	bl	8008920 <__hexdig_fun>
 80089d2:	2301      	movs	r3, #1
 80089d4:	fab0 f480 	clz	r4, r0
 80089d8:	0964      	lsrs	r4, r4, #5
 80089da:	4635      	mov	r5, r6
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	463a      	mov	r2, r7
 80089e0:	4616      	mov	r6, r2
 80089e2:	3201      	adds	r2, #1
 80089e4:	7830      	ldrb	r0, [r6, #0]
 80089e6:	f7ff ff9b 	bl	8008920 <__hexdig_fun>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d1f8      	bne.n	80089e0 <__gethex+0x94>
 80089ee:	9901      	ldr	r1, [sp, #4]
 80089f0:	4652      	mov	r2, sl
 80089f2:	4630      	mov	r0, r6
 80089f4:	f001 fa0c 	bl	8009e10 <strncmp>
 80089f8:	b980      	cbnz	r0, 8008a1c <__gethex+0xd0>
 80089fa:	b94d      	cbnz	r5, 8008a10 <__gethex+0xc4>
 80089fc:	eb06 050a 	add.w	r5, r6, sl
 8008a00:	462a      	mov	r2, r5
 8008a02:	4616      	mov	r6, r2
 8008a04:	3201      	adds	r2, #1
 8008a06:	7830      	ldrb	r0, [r6, #0]
 8008a08:	f7ff ff8a 	bl	8008920 <__hexdig_fun>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d1f8      	bne.n	8008a02 <__gethex+0xb6>
 8008a10:	1bad      	subs	r5, r5, r6
 8008a12:	00ad      	lsls	r5, r5, #2
 8008a14:	e004      	b.n	8008a20 <__gethex+0xd4>
 8008a16:	2400      	movs	r4, #0
 8008a18:	4625      	mov	r5, r4
 8008a1a:	e7e0      	b.n	80089de <__gethex+0x92>
 8008a1c:	2d00      	cmp	r5, #0
 8008a1e:	d1f7      	bne.n	8008a10 <__gethex+0xc4>
 8008a20:	7833      	ldrb	r3, [r6, #0]
 8008a22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a26:	2b50      	cmp	r3, #80	; 0x50
 8008a28:	d13b      	bne.n	8008aa2 <__gethex+0x156>
 8008a2a:	7873      	ldrb	r3, [r6, #1]
 8008a2c:	2b2b      	cmp	r3, #43	; 0x2b
 8008a2e:	d02c      	beq.n	8008a8a <__gethex+0x13e>
 8008a30:	2b2d      	cmp	r3, #45	; 0x2d
 8008a32:	d02e      	beq.n	8008a92 <__gethex+0x146>
 8008a34:	1c71      	adds	r1, r6, #1
 8008a36:	f04f 0900 	mov.w	r9, #0
 8008a3a:	7808      	ldrb	r0, [r1, #0]
 8008a3c:	f7ff ff70 	bl	8008920 <__hexdig_fun>
 8008a40:	1e43      	subs	r3, r0, #1
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b18      	cmp	r3, #24
 8008a46:	d82c      	bhi.n	8008aa2 <__gethex+0x156>
 8008a48:	f1a0 0210 	sub.w	r2, r0, #16
 8008a4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a50:	f7ff ff66 	bl	8008920 <__hexdig_fun>
 8008a54:	1e43      	subs	r3, r0, #1
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b18      	cmp	r3, #24
 8008a5a:	d91d      	bls.n	8008a98 <__gethex+0x14c>
 8008a5c:	f1b9 0f00 	cmp.w	r9, #0
 8008a60:	d000      	beq.n	8008a64 <__gethex+0x118>
 8008a62:	4252      	negs	r2, r2
 8008a64:	4415      	add	r5, r2
 8008a66:	f8cb 1000 	str.w	r1, [fp]
 8008a6a:	b1e4      	cbz	r4, 8008aa6 <__gethex+0x15a>
 8008a6c:	9b00      	ldr	r3, [sp, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	bf14      	ite	ne
 8008a72:	2700      	movne	r7, #0
 8008a74:	2706      	moveq	r7, #6
 8008a76:	4638      	mov	r0, r7
 8008a78:	b009      	add	sp, #36	; 0x24
 8008a7a:	ecbd 8b02 	vpop	{d8}
 8008a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a82:	463e      	mov	r6, r7
 8008a84:	4625      	mov	r5, r4
 8008a86:	2401      	movs	r4, #1
 8008a88:	e7ca      	b.n	8008a20 <__gethex+0xd4>
 8008a8a:	f04f 0900 	mov.w	r9, #0
 8008a8e:	1cb1      	adds	r1, r6, #2
 8008a90:	e7d3      	b.n	8008a3a <__gethex+0xee>
 8008a92:	f04f 0901 	mov.w	r9, #1
 8008a96:	e7fa      	b.n	8008a8e <__gethex+0x142>
 8008a98:	230a      	movs	r3, #10
 8008a9a:	fb03 0202 	mla	r2, r3, r2, r0
 8008a9e:	3a10      	subs	r2, #16
 8008aa0:	e7d4      	b.n	8008a4c <__gethex+0x100>
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	e7df      	b.n	8008a66 <__gethex+0x11a>
 8008aa6:	1bf3      	subs	r3, r6, r7
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	4621      	mov	r1, r4
 8008aac:	2b07      	cmp	r3, #7
 8008aae:	dc0b      	bgt.n	8008ac8 <__gethex+0x17c>
 8008ab0:	ee18 0a10 	vmov	r0, s16
 8008ab4:	f000 fa7e 	bl	8008fb4 <_Balloc>
 8008ab8:	4604      	mov	r4, r0
 8008aba:	b940      	cbnz	r0, 8008ace <__gethex+0x182>
 8008abc:	4b5d      	ldr	r3, [pc, #372]	; (8008c34 <__gethex+0x2e8>)
 8008abe:	4602      	mov	r2, r0
 8008ac0:	21de      	movs	r1, #222	; 0xde
 8008ac2:	485d      	ldr	r0, [pc, #372]	; (8008c38 <__gethex+0x2ec>)
 8008ac4:	f001 f9c6 	bl	8009e54 <__assert_func>
 8008ac8:	3101      	adds	r1, #1
 8008aca:	105b      	asrs	r3, r3, #1
 8008acc:	e7ee      	b.n	8008aac <__gethex+0x160>
 8008ace:	f100 0914 	add.w	r9, r0, #20
 8008ad2:	f04f 0b00 	mov.w	fp, #0
 8008ad6:	f1ca 0301 	rsb	r3, sl, #1
 8008ada:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ade:	f8cd b000 	str.w	fp, [sp]
 8008ae2:	9306      	str	r3, [sp, #24]
 8008ae4:	42b7      	cmp	r7, r6
 8008ae6:	d340      	bcc.n	8008b6a <__gethex+0x21e>
 8008ae8:	9802      	ldr	r0, [sp, #8]
 8008aea:	9b00      	ldr	r3, [sp, #0]
 8008aec:	f840 3b04 	str.w	r3, [r0], #4
 8008af0:	eba0 0009 	sub.w	r0, r0, r9
 8008af4:	1080      	asrs	r0, r0, #2
 8008af6:	0146      	lsls	r6, r0, #5
 8008af8:	6120      	str	r0, [r4, #16]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 fb4c 	bl	8009198 <__hi0bits>
 8008b00:	1a30      	subs	r0, r6, r0
 8008b02:	f8d8 6000 	ldr.w	r6, [r8]
 8008b06:	42b0      	cmp	r0, r6
 8008b08:	dd63      	ble.n	8008bd2 <__gethex+0x286>
 8008b0a:	1b87      	subs	r7, r0, r6
 8008b0c:	4639      	mov	r1, r7
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 fef0 	bl	80098f4 <__any_on>
 8008b14:	4682      	mov	sl, r0
 8008b16:	b1a8      	cbz	r0, 8008b44 <__gethex+0x1f8>
 8008b18:	1e7b      	subs	r3, r7, #1
 8008b1a:	1159      	asrs	r1, r3, #5
 8008b1c:	f003 021f 	and.w	r2, r3, #31
 8008b20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008b24:	f04f 0a01 	mov.w	sl, #1
 8008b28:	fa0a f202 	lsl.w	r2, sl, r2
 8008b2c:	420a      	tst	r2, r1
 8008b2e:	d009      	beq.n	8008b44 <__gethex+0x1f8>
 8008b30:	4553      	cmp	r3, sl
 8008b32:	dd05      	ble.n	8008b40 <__gethex+0x1f4>
 8008b34:	1eb9      	subs	r1, r7, #2
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 fedc 	bl	80098f4 <__any_on>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d145      	bne.n	8008bcc <__gethex+0x280>
 8008b40:	f04f 0a02 	mov.w	sl, #2
 8008b44:	4639      	mov	r1, r7
 8008b46:	4620      	mov	r0, r4
 8008b48:	f7ff fe98 	bl	800887c <rshift>
 8008b4c:	443d      	add	r5, r7
 8008b4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b52:	42ab      	cmp	r3, r5
 8008b54:	da4c      	bge.n	8008bf0 <__gethex+0x2a4>
 8008b56:	ee18 0a10 	vmov	r0, s16
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	f000 fa6a 	bl	8009034 <_Bfree>
 8008b60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b62:	2300      	movs	r3, #0
 8008b64:	6013      	str	r3, [r2, #0]
 8008b66:	27a3      	movs	r7, #163	; 0xa3
 8008b68:	e785      	b.n	8008a76 <__gethex+0x12a>
 8008b6a:	1e73      	subs	r3, r6, #1
 8008b6c:	9a05      	ldr	r2, [sp, #20]
 8008b6e:	9303      	str	r3, [sp, #12]
 8008b70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d019      	beq.n	8008bac <__gethex+0x260>
 8008b78:	f1bb 0f20 	cmp.w	fp, #32
 8008b7c:	d107      	bne.n	8008b8e <__gethex+0x242>
 8008b7e:	9b02      	ldr	r3, [sp, #8]
 8008b80:	9a00      	ldr	r2, [sp, #0]
 8008b82:	f843 2b04 	str.w	r2, [r3], #4
 8008b86:	9302      	str	r3, [sp, #8]
 8008b88:	2300      	movs	r3, #0
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	469b      	mov	fp, r3
 8008b8e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008b92:	f7ff fec5 	bl	8008920 <__hexdig_fun>
 8008b96:	9b00      	ldr	r3, [sp, #0]
 8008b98:	f000 000f 	and.w	r0, r0, #15
 8008b9c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008ba0:	4303      	orrs	r3, r0
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	f10b 0b04 	add.w	fp, fp, #4
 8008ba8:	9b03      	ldr	r3, [sp, #12]
 8008baa:	e00d      	b.n	8008bc8 <__gethex+0x27c>
 8008bac:	9b03      	ldr	r3, [sp, #12]
 8008bae:	9a06      	ldr	r2, [sp, #24]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	42bb      	cmp	r3, r7
 8008bb4:	d3e0      	bcc.n	8008b78 <__gethex+0x22c>
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	9901      	ldr	r1, [sp, #4]
 8008bba:	9307      	str	r3, [sp, #28]
 8008bbc:	4652      	mov	r2, sl
 8008bbe:	f001 f927 	bl	8009e10 <strncmp>
 8008bc2:	9b07      	ldr	r3, [sp, #28]
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d1d7      	bne.n	8008b78 <__gethex+0x22c>
 8008bc8:	461e      	mov	r6, r3
 8008bca:	e78b      	b.n	8008ae4 <__gethex+0x198>
 8008bcc:	f04f 0a03 	mov.w	sl, #3
 8008bd0:	e7b8      	b.n	8008b44 <__gethex+0x1f8>
 8008bd2:	da0a      	bge.n	8008bea <__gethex+0x29e>
 8008bd4:	1a37      	subs	r7, r6, r0
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	ee18 0a10 	vmov	r0, s16
 8008bdc:	463a      	mov	r2, r7
 8008bde:	f000 fc45 	bl	800946c <__lshift>
 8008be2:	1bed      	subs	r5, r5, r7
 8008be4:	4604      	mov	r4, r0
 8008be6:	f100 0914 	add.w	r9, r0, #20
 8008bea:	f04f 0a00 	mov.w	sl, #0
 8008bee:	e7ae      	b.n	8008b4e <__gethex+0x202>
 8008bf0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008bf4:	42a8      	cmp	r0, r5
 8008bf6:	dd72      	ble.n	8008cde <__gethex+0x392>
 8008bf8:	1b45      	subs	r5, r0, r5
 8008bfa:	42ae      	cmp	r6, r5
 8008bfc:	dc36      	bgt.n	8008c6c <__gethex+0x320>
 8008bfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d02a      	beq.n	8008c5c <__gethex+0x310>
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d02c      	beq.n	8008c64 <__gethex+0x318>
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d11c      	bne.n	8008c48 <__gethex+0x2fc>
 8008c0e:	42ae      	cmp	r6, r5
 8008c10:	d11a      	bne.n	8008c48 <__gethex+0x2fc>
 8008c12:	2e01      	cmp	r6, #1
 8008c14:	d112      	bne.n	8008c3c <__gethex+0x2f0>
 8008c16:	9a04      	ldr	r2, [sp, #16]
 8008c18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	2301      	movs	r3, #1
 8008c20:	6123      	str	r3, [r4, #16]
 8008c22:	f8c9 3000 	str.w	r3, [r9]
 8008c26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c28:	2762      	movs	r7, #98	; 0x62
 8008c2a:	601c      	str	r4, [r3, #0]
 8008c2c:	e723      	b.n	8008a76 <__gethex+0x12a>
 8008c2e:	bf00      	nop
 8008c30:	0800c198 	.word	0x0800c198
 8008c34:	0800c120 	.word	0x0800c120
 8008c38:	0800c131 	.word	0x0800c131
 8008c3c:	1e71      	subs	r1, r6, #1
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f000 fe58 	bl	80098f4 <__any_on>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d1e6      	bne.n	8008c16 <__gethex+0x2ca>
 8008c48:	ee18 0a10 	vmov	r0, s16
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	f000 f9f1 	bl	8009034 <_Bfree>
 8008c52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c54:	2300      	movs	r3, #0
 8008c56:	6013      	str	r3, [r2, #0]
 8008c58:	2750      	movs	r7, #80	; 0x50
 8008c5a:	e70c      	b.n	8008a76 <__gethex+0x12a>
 8008c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1f2      	bne.n	8008c48 <__gethex+0x2fc>
 8008c62:	e7d8      	b.n	8008c16 <__gethex+0x2ca>
 8008c64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1d5      	bne.n	8008c16 <__gethex+0x2ca>
 8008c6a:	e7ed      	b.n	8008c48 <__gethex+0x2fc>
 8008c6c:	1e6f      	subs	r7, r5, #1
 8008c6e:	f1ba 0f00 	cmp.w	sl, #0
 8008c72:	d131      	bne.n	8008cd8 <__gethex+0x38c>
 8008c74:	b127      	cbz	r7, 8008c80 <__gethex+0x334>
 8008c76:	4639      	mov	r1, r7
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 fe3b 	bl	80098f4 <__any_on>
 8008c7e:	4682      	mov	sl, r0
 8008c80:	117b      	asrs	r3, r7, #5
 8008c82:	2101      	movs	r1, #1
 8008c84:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008c88:	f007 071f 	and.w	r7, r7, #31
 8008c8c:	fa01 f707 	lsl.w	r7, r1, r7
 8008c90:	421f      	tst	r7, r3
 8008c92:	4629      	mov	r1, r5
 8008c94:	4620      	mov	r0, r4
 8008c96:	bf18      	it	ne
 8008c98:	f04a 0a02 	orrne.w	sl, sl, #2
 8008c9c:	1b76      	subs	r6, r6, r5
 8008c9e:	f7ff fded 	bl	800887c <rshift>
 8008ca2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008ca6:	2702      	movs	r7, #2
 8008ca8:	f1ba 0f00 	cmp.w	sl, #0
 8008cac:	d048      	beq.n	8008d40 <__gethex+0x3f4>
 8008cae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d015      	beq.n	8008ce2 <__gethex+0x396>
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d017      	beq.n	8008cea <__gethex+0x39e>
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d109      	bne.n	8008cd2 <__gethex+0x386>
 8008cbe:	f01a 0f02 	tst.w	sl, #2
 8008cc2:	d006      	beq.n	8008cd2 <__gethex+0x386>
 8008cc4:	f8d9 0000 	ldr.w	r0, [r9]
 8008cc8:	ea4a 0a00 	orr.w	sl, sl, r0
 8008ccc:	f01a 0f01 	tst.w	sl, #1
 8008cd0:	d10e      	bne.n	8008cf0 <__gethex+0x3a4>
 8008cd2:	f047 0710 	orr.w	r7, r7, #16
 8008cd6:	e033      	b.n	8008d40 <__gethex+0x3f4>
 8008cd8:	f04f 0a01 	mov.w	sl, #1
 8008cdc:	e7d0      	b.n	8008c80 <__gethex+0x334>
 8008cde:	2701      	movs	r7, #1
 8008ce0:	e7e2      	b.n	8008ca8 <__gethex+0x35c>
 8008ce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ce4:	f1c3 0301 	rsb	r3, r3, #1
 8008ce8:	9315      	str	r3, [sp, #84]	; 0x54
 8008cea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d0f0      	beq.n	8008cd2 <__gethex+0x386>
 8008cf0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008cf4:	f104 0314 	add.w	r3, r4, #20
 8008cf8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008cfc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008d00:	f04f 0c00 	mov.w	ip, #0
 8008d04:	4618      	mov	r0, r3
 8008d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d0a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008d0e:	d01c      	beq.n	8008d4a <__gethex+0x3fe>
 8008d10:	3201      	adds	r2, #1
 8008d12:	6002      	str	r2, [r0, #0]
 8008d14:	2f02      	cmp	r7, #2
 8008d16:	f104 0314 	add.w	r3, r4, #20
 8008d1a:	d13f      	bne.n	8008d9c <__gethex+0x450>
 8008d1c:	f8d8 2000 	ldr.w	r2, [r8]
 8008d20:	3a01      	subs	r2, #1
 8008d22:	42b2      	cmp	r2, r6
 8008d24:	d10a      	bne.n	8008d3c <__gethex+0x3f0>
 8008d26:	1171      	asrs	r1, r6, #5
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d2e:	f006 061f 	and.w	r6, r6, #31
 8008d32:	fa02 f606 	lsl.w	r6, r2, r6
 8008d36:	421e      	tst	r6, r3
 8008d38:	bf18      	it	ne
 8008d3a:	4617      	movne	r7, r2
 8008d3c:	f047 0720 	orr.w	r7, r7, #32
 8008d40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d42:	601c      	str	r4, [r3, #0]
 8008d44:	9b04      	ldr	r3, [sp, #16]
 8008d46:	601d      	str	r5, [r3, #0]
 8008d48:	e695      	b.n	8008a76 <__gethex+0x12a>
 8008d4a:	4299      	cmp	r1, r3
 8008d4c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d50:	d8d8      	bhi.n	8008d04 <__gethex+0x3b8>
 8008d52:	68a3      	ldr	r3, [r4, #8]
 8008d54:	459b      	cmp	fp, r3
 8008d56:	db19      	blt.n	8008d8c <__gethex+0x440>
 8008d58:	6861      	ldr	r1, [r4, #4]
 8008d5a:	ee18 0a10 	vmov	r0, s16
 8008d5e:	3101      	adds	r1, #1
 8008d60:	f000 f928 	bl	8008fb4 <_Balloc>
 8008d64:	4681      	mov	r9, r0
 8008d66:	b918      	cbnz	r0, 8008d70 <__gethex+0x424>
 8008d68:	4b1a      	ldr	r3, [pc, #104]	; (8008dd4 <__gethex+0x488>)
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	2184      	movs	r1, #132	; 0x84
 8008d6e:	e6a8      	b.n	8008ac2 <__gethex+0x176>
 8008d70:	6922      	ldr	r2, [r4, #16]
 8008d72:	3202      	adds	r2, #2
 8008d74:	f104 010c 	add.w	r1, r4, #12
 8008d78:	0092      	lsls	r2, r2, #2
 8008d7a:	300c      	adds	r0, #12
 8008d7c:	f000 f90c 	bl	8008f98 <memcpy>
 8008d80:	4621      	mov	r1, r4
 8008d82:	ee18 0a10 	vmov	r0, s16
 8008d86:	f000 f955 	bl	8009034 <_Bfree>
 8008d8a:	464c      	mov	r4, r9
 8008d8c:	6923      	ldr	r3, [r4, #16]
 8008d8e:	1c5a      	adds	r2, r3, #1
 8008d90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d94:	6122      	str	r2, [r4, #16]
 8008d96:	2201      	movs	r2, #1
 8008d98:	615a      	str	r2, [r3, #20]
 8008d9a:	e7bb      	b.n	8008d14 <__gethex+0x3c8>
 8008d9c:	6922      	ldr	r2, [r4, #16]
 8008d9e:	455a      	cmp	r2, fp
 8008da0:	dd0b      	ble.n	8008dba <__gethex+0x46e>
 8008da2:	2101      	movs	r1, #1
 8008da4:	4620      	mov	r0, r4
 8008da6:	f7ff fd69 	bl	800887c <rshift>
 8008daa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dae:	3501      	adds	r5, #1
 8008db0:	42ab      	cmp	r3, r5
 8008db2:	f6ff aed0 	blt.w	8008b56 <__gethex+0x20a>
 8008db6:	2701      	movs	r7, #1
 8008db8:	e7c0      	b.n	8008d3c <__gethex+0x3f0>
 8008dba:	f016 061f 	ands.w	r6, r6, #31
 8008dbe:	d0fa      	beq.n	8008db6 <__gethex+0x46a>
 8008dc0:	4453      	add	r3, sl
 8008dc2:	f1c6 0620 	rsb	r6, r6, #32
 8008dc6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008dca:	f000 f9e5 	bl	8009198 <__hi0bits>
 8008dce:	42b0      	cmp	r0, r6
 8008dd0:	dbe7      	blt.n	8008da2 <__gethex+0x456>
 8008dd2:	e7f0      	b.n	8008db6 <__gethex+0x46a>
 8008dd4:	0800c120 	.word	0x0800c120

08008dd8 <L_shift>:
 8008dd8:	f1c2 0208 	rsb	r2, r2, #8
 8008ddc:	0092      	lsls	r2, r2, #2
 8008dde:	b570      	push	{r4, r5, r6, lr}
 8008de0:	f1c2 0620 	rsb	r6, r2, #32
 8008de4:	6843      	ldr	r3, [r0, #4]
 8008de6:	6804      	ldr	r4, [r0, #0]
 8008de8:	fa03 f506 	lsl.w	r5, r3, r6
 8008dec:	432c      	orrs	r4, r5
 8008dee:	40d3      	lsrs	r3, r2
 8008df0:	6004      	str	r4, [r0, #0]
 8008df2:	f840 3f04 	str.w	r3, [r0, #4]!
 8008df6:	4288      	cmp	r0, r1
 8008df8:	d3f4      	bcc.n	8008de4 <L_shift+0xc>
 8008dfa:	bd70      	pop	{r4, r5, r6, pc}

08008dfc <__match>:
 8008dfc:	b530      	push	{r4, r5, lr}
 8008dfe:	6803      	ldr	r3, [r0, #0]
 8008e00:	3301      	adds	r3, #1
 8008e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e06:	b914      	cbnz	r4, 8008e0e <__match+0x12>
 8008e08:	6003      	str	r3, [r0, #0]
 8008e0a:	2001      	movs	r0, #1
 8008e0c:	bd30      	pop	{r4, r5, pc}
 8008e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e12:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e16:	2d19      	cmp	r5, #25
 8008e18:	bf98      	it	ls
 8008e1a:	3220      	addls	r2, #32
 8008e1c:	42a2      	cmp	r2, r4
 8008e1e:	d0f0      	beq.n	8008e02 <__match+0x6>
 8008e20:	2000      	movs	r0, #0
 8008e22:	e7f3      	b.n	8008e0c <__match+0x10>

08008e24 <__hexnan>:
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	680b      	ldr	r3, [r1, #0]
 8008e2a:	115e      	asrs	r6, r3, #5
 8008e2c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e30:	f013 031f 	ands.w	r3, r3, #31
 8008e34:	b087      	sub	sp, #28
 8008e36:	bf18      	it	ne
 8008e38:	3604      	addne	r6, #4
 8008e3a:	2500      	movs	r5, #0
 8008e3c:	1f37      	subs	r7, r6, #4
 8008e3e:	4690      	mov	r8, r2
 8008e40:	6802      	ldr	r2, [r0, #0]
 8008e42:	9301      	str	r3, [sp, #4]
 8008e44:	4682      	mov	sl, r0
 8008e46:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e4a:	46b9      	mov	r9, r7
 8008e4c:	463c      	mov	r4, r7
 8008e4e:	9502      	str	r5, [sp, #8]
 8008e50:	46ab      	mov	fp, r5
 8008e52:	7851      	ldrb	r1, [r2, #1]
 8008e54:	1c53      	adds	r3, r2, #1
 8008e56:	9303      	str	r3, [sp, #12]
 8008e58:	b341      	cbz	r1, 8008eac <__hexnan+0x88>
 8008e5a:	4608      	mov	r0, r1
 8008e5c:	9205      	str	r2, [sp, #20]
 8008e5e:	9104      	str	r1, [sp, #16]
 8008e60:	f7ff fd5e 	bl	8008920 <__hexdig_fun>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d14f      	bne.n	8008f08 <__hexnan+0xe4>
 8008e68:	9904      	ldr	r1, [sp, #16]
 8008e6a:	9a05      	ldr	r2, [sp, #20]
 8008e6c:	2920      	cmp	r1, #32
 8008e6e:	d818      	bhi.n	8008ea2 <__hexnan+0x7e>
 8008e70:	9b02      	ldr	r3, [sp, #8]
 8008e72:	459b      	cmp	fp, r3
 8008e74:	dd13      	ble.n	8008e9e <__hexnan+0x7a>
 8008e76:	454c      	cmp	r4, r9
 8008e78:	d206      	bcs.n	8008e88 <__hexnan+0x64>
 8008e7a:	2d07      	cmp	r5, #7
 8008e7c:	dc04      	bgt.n	8008e88 <__hexnan+0x64>
 8008e7e:	462a      	mov	r2, r5
 8008e80:	4649      	mov	r1, r9
 8008e82:	4620      	mov	r0, r4
 8008e84:	f7ff ffa8 	bl	8008dd8 <L_shift>
 8008e88:	4544      	cmp	r4, r8
 8008e8a:	d950      	bls.n	8008f2e <__hexnan+0x10a>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f1a4 0904 	sub.w	r9, r4, #4
 8008e92:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e96:	f8cd b008 	str.w	fp, [sp, #8]
 8008e9a:	464c      	mov	r4, r9
 8008e9c:	461d      	mov	r5, r3
 8008e9e:	9a03      	ldr	r2, [sp, #12]
 8008ea0:	e7d7      	b.n	8008e52 <__hexnan+0x2e>
 8008ea2:	2929      	cmp	r1, #41	; 0x29
 8008ea4:	d156      	bne.n	8008f54 <__hexnan+0x130>
 8008ea6:	3202      	adds	r2, #2
 8008ea8:	f8ca 2000 	str.w	r2, [sl]
 8008eac:	f1bb 0f00 	cmp.w	fp, #0
 8008eb0:	d050      	beq.n	8008f54 <__hexnan+0x130>
 8008eb2:	454c      	cmp	r4, r9
 8008eb4:	d206      	bcs.n	8008ec4 <__hexnan+0xa0>
 8008eb6:	2d07      	cmp	r5, #7
 8008eb8:	dc04      	bgt.n	8008ec4 <__hexnan+0xa0>
 8008eba:	462a      	mov	r2, r5
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f7ff ff8a 	bl	8008dd8 <L_shift>
 8008ec4:	4544      	cmp	r4, r8
 8008ec6:	d934      	bls.n	8008f32 <__hexnan+0x10e>
 8008ec8:	f1a8 0204 	sub.w	r2, r8, #4
 8008ecc:	4623      	mov	r3, r4
 8008ece:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ed2:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ed6:	429f      	cmp	r7, r3
 8008ed8:	d2f9      	bcs.n	8008ece <__hexnan+0xaa>
 8008eda:	1b3b      	subs	r3, r7, r4
 8008edc:	f023 0303 	bic.w	r3, r3, #3
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	3401      	adds	r4, #1
 8008ee4:	3e03      	subs	r6, #3
 8008ee6:	42b4      	cmp	r4, r6
 8008ee8:	bf88      	it	hi
 8008eea:	2304      	movhi	r3, #4
 8008eec:	4443      	add	r3, r8
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f843 2b04 	str.w	r2, [r3], #4
 8008ef4:	429f      	cmp	r7, r3
 8008ef6:	d2fb      	bcs.n	8008ef0 <__hexnan+0xcc>
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	b91b      	cbnz	r3, 8008f04 <__hexnan+0xe0>
 8008efc:	4547      	cmp	r7, r8
 8008efe:	d127      	bne.n	8008f50 <__hexnan+0x12c>
 8008f00:	2301      	movs	r3, #1
 8008f02:	603b      	str	r3, [r7, #0]
 8008f04:	2005      	movs	r0, #5
 8008f06:	e026      	b.n	8008f56 <__hexnan+0x132>
 8008f08:	3501      	adds	r5, #1
 8008f0a:	2d08      	cmp	r5, #8
 8008f0c:	f10b 0b01 	add.w	fp, fp, #1
 8008f10:	dd06      	ble.n	8008f20 <__hexnan+0xfc>
 8008f12:	4544      	cmp	r4, r8
 8008f14:	d9c3      	bls.n	8008e9e <__hexnan+0x7a>
 8008f16:	2300      	movs	r3, #0
 8008f18:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f1c:	2501      	movs	r5, #1
 8008f1e:	3c04      	subs	r4, #4
 8008f20:	6822      	ldr	r2, [r4, #0]
 8008f22:	f000 000f 	and.w	r0, r0, #15
 8008f26:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008f2a:	6022      	str	r2, [r4, #0]
 8008f2c:	e7b7      	b.n	8008e9e <__hexnan+0x7a>
 8008f2e:	2508      	movs	r5, #8
 8008f30:	e7b5      	b.n	8008e9e <__hexnan+0x7a>
 8008f32:	9b01      	ldr	r3, [sp, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d0df      	beq.n	8008ef8 <__hexnan+0xd4>
 8008f38:	f04f 32ff 	mov.w	r2, #4294967295
 8008f3c:	f1c3 0320 	rsb	r3, r3, #32
 8008f40:	fa22 f303 	lsr.w	r3, r2, r3
 8008f44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f48:	401a      	ands	r2, r3
 8008f4a:	f846 2c04 	str.w	r2, [r6, #-4]
 8008f4e:	e7d3      	b.n	8008ef8 <__hexnan+0xd4>
 8008f50:	3f04      	subs	r7, #4
 8008f52:	e7d1      	b.n	8008ef8 <__hexnan+0xd4>
 8008f54:	2004      	movs	r0, #4
 8008f56:	b007      	add	sp, #28
 8008f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f5c <_localeconv_r>:
 8008f5c:	4800      	ldr	r0, [pc, #0]	; (8008f60 <_localeconv_r+0x4>)
 8008f5e:	4770      	bx	lr
 8008f60:	20000174 	.word	0x20000174

08008f64 <malloc>:
 8008f64:	4b02      	ldr	r3, [pc, #8]	; (8008f70 <malloc+0xc>)
 8008f66:	4601      	mov	r1, r0
 8008f68:	6818      	ldr	r0, [r3, #0]
 8008f6a:	f000 bd67 	b.w	8009a3c <_malloc_r>
 8008f6e:	bf00      	nop
 8008f70:	2000001c 	.word	0x2000001c

08008f74 <__ascii_mbtowc>:
 8008f74:	b082      	sub	sp, #8
 8008f76:	b901      	cbnz	r1, 8008f7a <__ascii_mbtowc+0x6>
 8008f78:	a901      	add	r1, sp, #4
 8008f7a:	b142      	cbz	r2, 8008f8e <__ascii_mbtowc+0x1a>
 8008f7c:	b14b      	cbz	r3, 8008f92 <__ascii_mbtowc+0x1e>
 8008f7e:	7813      	ldrb	r3, [r2, #0]
 8008f80:	600b      	str	r3, [r1, #0]
 8008f82:	7812      	ldrb	r2, [r2, #0]
 8008f84:	1e10      	subs	r0, r2, #0
 8008f86:	bf18      	it	ne
 8008f88:	2001      	movne	r0, #1
 8008f8a:	b002      	add	sp, #8
 8008f8c:	4770      	bx	lr
 8008f8e:	4610      	mov	r0, r2
 8008f90:	e7fb      	b.n	8008f8a <__ascii_mbtowc+0x16>
 8008f92:	f06f 0001 	mvn.w	r0, #1
 8008f96:	e7f8      	b.n	8008f8a <__ascii_mbtowc+0x16>

08008f98 <memcpy>:
 8008f98:	440a      	add	r2, r1
 8008f9a:	4291      	cmp	r1, r2
 8008f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fa0:	d100      	bne.n	8008fa4 <memcpy+0xc>
 8008fa2:	4770      	bx	lr
 8008fa4:	b510      	push	{r4, lr}
 8008fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fae:	4291      	cmp	r1, r2
 8008fb0:	d1f9      	bne.n	8008fa6 <memcpy+0xe>
 8008fb2:	bd10      	pop	{r4, pc}

08008fb4 <_Balloc>:
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fb8:	4604      	mov	r4, r0
 8008fba:	460d      	mov	r5, r1
 8008fbc:	b976      	cbnz	r6, 8008fdc <_Balloc+0x28>
 8008fbe:	2010      	movs	r0, #16
 8008fc0:	f7ff ffd0 	bl	8008f64 <malloc>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	6260      	str	r0, [r4, #36]	; 0x24
 8008fc8:	b920      	cbnz	r0, 8008fd4 <_Balloc+0x20>
 8008fca:	4b18      	ldr	r3, [pc, #96]	; (800902c <_Balloc+0x78>)
 8008fcc:	4818      	ldr	r0, [pc, #96]	; (8009030 <_Balloc+0x7c>)
 8008fce:	2166      	movs	r1, #102	; 0x66
 8008fd0:	f000 ff40 	bl	8009e54 <__assert_func>
 8008fd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fd8:	6006      	str	r6, [r0, #0]
 8008fda:	60c6      	str	r6, [r0, #12]
 8008fdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fde:	68f3      	ldr	r3, [r6, #12]
 8008fe0:	b183      	cbz	r3, 8009004 <_Balloc+0x50>
 8008fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fea:	b9b8      	cbnz	r0, 800901c <_Balloc+0x68>
 8008fec:	2101      	movs	r1, #1
 8008fee:	fa01 f605 	lsl.w	r6, r1, r5
 8008ff2:	1d72      	adds	r2, r6, #5
 8008ff4:	0092      	lsls	r2, r2, #2
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f000 fc9d 	bl	8009936 <_calloc_r>
 8008ffc:	b160      	cbz	r0, 8009018 <_Balloc+0x64>
 8008ffe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009002:	e00e      	b.n	8009022 <_Balloc+0x6e>
 8009004:	2221      	movs	r2, #33	; 0x21
 8009006:	2104      	movs	r1, #4
 8009008:	4620      	mov	r0, r4
 800900a:	f000 fc94 	bl	8009936 <_calloc_r>
 800900e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009010:	60f0      	str	r0, [r6, #12]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e4      	bne.n	8008fe2 <_Balloc+0x2e>
 8009018:	2000      	movs	r0, #0
 800901a:	bd70      	pop	{r4, r5, r6, pc}
 800901c:	6802      	ldr	r2, [r0, #0]
 800901e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009022:	2300      	movs	r3, #0
 8009024:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009028:	e7f7      	b.n	800901a <_Balloc+0x66>
 800902a:	bf00      	nop
 800902c:	0800c0ae 	.word	0x0800c0ae
 8009030:	0800c1ac 	.word	0x0800c1ac

08009034 <_Bfree>:
 8009034:	b570      	push	{r4, r5, r6, lr}
 8009036:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009038:	4605      	mov	r5, r0
 800903a:	460c      	mov	r4, r1
 800903c:	b976      	cbnz	r6, 800905c <_Bfree+0x28>
 800903e:	2010      	movs	r0, #16
 8009040:	f7ff ff90 	bl	8008f64 <malloc>
 8009044:	4602      	mov	r2, r0
 8009046:	6268      	str	r0, [r5, #36]	; 0x24
 8009048:	b920      	cbnz	r0, 8009054 <_Bfree+0x20>
 800904a:	4b09      	ldr	r3, [pc, #36]	; (8009070 <_Bfree+0x3c>)
 800904c:	4809      	ldr	r0, [pc, #36]	; (8009074 <_Bfree+0x40>)
 800904e:	218a      	movs	r1, #138	; 0x8a
 8009050:	f000 ff00 	bl	8009e54 <__assert_func>
 8009054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009058:	6006      	str	r6, [r0, #0]
 800905a:	60c6      	str	r6, [r0, #12]
 800905c:	b13c      	cbz	r4, 800906e <_Bfree+0x3a>
 800905e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009060:	6862      	ldr	r2, [r4, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009068:	6021      	str	r1, [r4, #0]
 800906a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800906e:	bd70      	pop	{r4, r5, r6, pc}
 8009070:	0800c0ae 	.word	0x0800c0ae
 8009074:	0800c1ac 	.word	0x0800c1ac

08009078 <__multadd>:
 8009078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800907c:	690d      	ldr	r5, [r1, #16]
 800907e:	4607      	mov	r7, r0
 8009080:	460c      	mov	r4, r1
 8009082:	461e      	mov	r6, r3
 8009084:	f101 0c14 	add.w	ip, r1, #20
 8009088:	2000      	movs	r0, #0
 800908a:	f8dc 3000 	ldr.w	r3, [ip]
 800908e:	b299      	uxth	r1, r3
 8009090:	fb02 6101 	mla	r1, r2, r1, r6
 8009094:	0c1e      	lsrs	r6, r3, #16
 8009096:	0c0b      	lsrs	r3, r1, #16
 8009098:	fb02 3306 	mla	r3, r2, r6, r3
 800909c:	b289      	uxth	r1, r1
 800909e:	3001      	adds	r0, #1
 80090a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090a4:	4285      	cmp	r5, r0
 80090a6:	f84c 1b04 	str.w	r1, [ip], #4
 80090aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090ae:	dcec      	bgt.n	800908a <__multadd+0x12>
 80090b0:	b30e      	cbz	r6, 80090f6 <__multadd+0x7e>
 80090b2:	68a3      	ldr	r3, [r4, #8]
 80090b4:	42ab      	cmp	r3, r5
 80090b6:	dc19      	bgt.n	80090ec <__multadd+0x74>
 80090b8:	6861      	ldr	r1, [r4, #4]
 80090ba:	4638      	mov	r0, r7
 80090bc:	3101      	adds	r1, #1
 80090be:	f7ff ff79 	bl	8008fb4 <_Balloc>
 80090c2:	4680      	mov	r8, r0
 80090c4:	b928      	cbnz	r0, 80090d2 <__multadd+0x5a>
 80090c6:	4602      	mov	r2, r0
 80090c8:	4b0c      	ldr	r3, [pc, #48]	; (80090fc <__multadd+0x84>)
 80090ca:	480d      	ldr	r0, [pc, #52]	; (8009100 <__multadd+0x88>)
 80090cc:	21b5      	movs	r1, #181	; 0xb5
 80090ce:	f000 fec1 	bl	8009e54 <__assert_func>
 80090d2:	6922      	ldr	r2, [r4, #16]
 80090d4:	3202      	adds	r2, #2
 80090d6:	f104 010c 	add.w	r1, r4, #12
 80090da:	0092      	lsls	r2, r2, #2
 80090dc:	300c      	adds	r0, #12
 80090de:	f7ff ff5b 	bl	8008f98 <memcpy>
 80090e2:	4621      	mov	r1, r4
 80090e4:	4638      	mov	r0, r7
 80090e6:	f7ff ffa5 	bl	8009034 <_Bfree>
 80090ea:	4644      	mov	r4, r8
 80090ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090f0:	3501      	adds	r5, #1
 80090f2:	615e      	str	r6, [r3, #20]
 80090f4:	6125      	str	r5, [r4, #16]
 80090f6:	4620      	mov	r0, r4
 80090f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090fc:	0800c120 	.word	0x0800c120
 8009100:	0800c1ac 	.word	0x0800c1ac

08009104 <__s2b>:
 8009104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009108:	460c      	mov	r4, r1
 800910a:	4615      	mov	r5, r2
 800910c:	461f      	mov	r7, r3
 800910e:	2209      	movs	r2, #9
 8009110:	3308      	adds	r3, #8
 8009112:	4606      	mov	r6, r0
 8009114:	fb93 f3f2 	sdiv	r3, r3, r2
 8009118:	2100      	movs	r1, #0
 800911a:	2201      	movs	r2, #1
 800911c:	429a      	cmp	r2, r3
 800911e:	db09      	blt.n	8009134 <__s2b+0x30>
 8009120:	4630      	mov	r0, r6
 8009122:	f7ff ff47 	bl	8008fb4 <_Balloc>
 8009126:	b940      	cbnz	r0, 800913a <__s2b+0x36>
 8009128:	4602      	mov	r2, r0
 800912a:	4b19      	ldr	r3, [pc, #100]	; (8009190 <__s2b+0x8c>)
 800912c:	4819      	ldr	r0, [pc, #100]	; (8009194 <__s2b+0x90>)
 800912e:	21ce      	movs	r1, #206	; 0xce
 8009130:	f000 fe90 	bl	8009e54 <__assert_func>
 8009134:	0052      	lsls	r2, r2, #1
 8009136:	3101      	adds	r1, #1
 8009138:	e7f0      	b.n	800911c <__s2b+0x18>
 800913a:	9b08      	ldr	r3, [sp, #32]
 800913c:	6143      	str	r3, [r0, #20]
 800913e:	2d09      	cmp	r5, #9
 8009140:	f04f 0301 	mov.w	r3, #1
 8009144:	6103      	str	r3, [r0, #16]
 8009146:	dd16      	ble.n	8009176 <__s2b+0x72>
 8009148:	f104 0909 	add.w	r9, r4, #9
 800914c:	46c8      	mov	r8, r9
 800914e:	442c      	add	r4, r5
 8009150:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009154:	4601      	mov	r1, r0
 8009156:	3b30      	subs	r3, #48	; 0x30
 8009158:	220a      	movs	r2, #10
 800915a:	4630      	mov	r0, r6
 800915c:	f7ff ff8c 	bl	8009078 <__multadd>
 8009160:	45a0      	cmp	r8, r4
 8009162:	d1f5      	bne.n	8009150 <__s2b+0x4c>
 8009164:	f1a5 0408 	sub.w	r4, r5, #8
 8009168:	444c      	add	r4, r9
 800916a:	1b2d      	subs	r5, r5, r4
 800916c:	1963      	adds	r3, r4, r5
 800916e:	42bb      	cmp	r3, r7
 8009170:	db04      	blt.n	800917c <__s2b+0x78>
 8009172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009176:	340a      	adds	r4, #10
 8009178:	2509      	movs	r5, #9
 800917a:	e7f6      	b.n	800916a <__s2b+0x66>
 800917c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009180:	4601      	mov	r1, r0
 8009182:	3b30      	subs	r3, #48	; 0x30
 8009184:	220a      	movs	r2, #10
 8009186:	4630      	mov	r0, r6
 8009188:	f7ff ff76 	bl	8009078 <__multadd>
 800918c:	e7ee      	b.n	800916c <__s2b+0x68>
 800918e:	bf00      	nop
 8009190:	0800c120 	.word	0x0800c120
 8009194:	0800c1ac 	.word	0x0800c1ac

08009198 <__hi0bits>:
 8009198:	0c03      	lsrs	r3, r0, #16
 800919a:	041b      	lsls	r3, r3, #16
 800919c:	b9d3      	cbnz	r3, 80091d4 <__hi0bits+0x3c>
 800919e:	0400      	lsls	r0, r0, #16
 80091a0:	2310      	movs	r3, #16
 80091a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091a6:	bf04      	itt	eq
 80091a8:	0200      	lsleq	r0, r0, #8
 80091aa:	3308      	addeq	r3, #8
 80091ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80091b0:	bf04      	itt	eq
 80091b2:	0100      	lsleq	r0, r0, #4
 80091b4:	3304      	addeq	r3, #4
 80091b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091ba:	bf04      	itt	eq
 80091bc:	0080      	lsleq	r0, r0, #2
 80091be:	3302      	addeq	r3, #2
 80091c0:	2800      	cmp	r0, #0
 80091c2:	db05      	blt.n	80091d0 <__hi0bits+0x38>
 80091c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091c8:	f103 0301 	add.w	r3, r3, #1
 80091cc:	bf08      	it	eq
 80091ce:	2320      	moveq	r3, #32
 80091d0:	4618      	mov	r0, r3
 80091d2:	4770      	bx	lr
 80091d4:	2300      	movs	r3, #0
 80091d6:	e7e4      	b.n	80091a2 <__hi0bits+0xa>

080091d8 <__lo0bits>:
 80091d8:	6803      	ldr	r3, [r0, #0]
 80091da:	f013 0207 	ands.w	r2, r3, #7
 80091de:	4601      	mov	r1, r0
 80091e0:	d00b      	beq.n	80091fa <__lo0bits+0x22>
 80091e2:	07da      	lsls	r2, r3, #31
 80091e4:	d423      	bmi.n	800922e <__lo0bits+0x56>
 80091e6:	0798      	lsls	r0, r3, #30
 80091e8:	bf49      	itett	mi
 80091ea:	085b      	lsrmi	r3, r3, #1
 80091ec:	089b      	lsrpl	r3, r3, #2
 80091ee:	2001      	movmi	r0, #1
 80091f0:	600b      	strmi	r3, [r1, #0]
 80091f2:	bf5c      	itt	pl
 80091f4:	600b      	strpl	r3, [r1, #0]
 80091f6:	2002      	movpl	r0, #2
 80091f8:	4770      	bx	lr
 80091fa:	b298      	uxth	r0, r3
 80091fc:	b9a8      	cbnz	r0, 800922a <__lo0bits+0x52>
 80091fe:	0c1b      	lsrs	r3, r3, #16
 8009200:	2010      	movs	r0, #16
 8009202:	b2da      	uxtb	r2, r3
 8009204:	b90a      	cbnz	r2, 800920a <__lo0bits+0x32>
 8009206:	3008      	adds	r0, #8
 8009208:	0a1b      	lsrs	r3, r3, #8
 800920a:	071a      	lsls	r2, r3, #28
 800920c:	bf04      	itt	eq
 800920e:	091b      	lsreq	r3, r3, #4
 8009210:	3004      	addeq	r0, #4
 8009212:	079a      	lsls	r2, r3, #30
 8009214:	bf04      	itt	eq
 8009216:	089b      	lsreq	r3, r3, #2
 8009218:	3002      	addeq	r0, #2
 800921a:	07da      	lsls	r2, r3, #31
 800921c:	d403      	bmi.n	8009226 <__lo0bits+0x4e>
 800921e:	085b      	lsrs	r3, r3, #1
 8009220:	f100 0001 	add.w	r0, r0, #1
 8009224:	d005      	beq.n	8009232 <__lo0bits+0x5a>
 8009226:	600b      	str	r3, [r1, #0]
 8009228:	4770      	bx	lr
 800922a:	4610      	mov	r0, r2
 800922c:	e7e9      	b.n	8009202 <__lo0bits+0x2a>
 800922e:	2000      	movs	r0, #0
 8009230:	4770      	bx	lr
 8009232:	2020      	movs	r0, #32
 8009234:	4770      	bx	lr
	...

08009238 <__i2b>:
 8009238:	b510      	push	{r4, lr}
 800923a:	460c      	mov	r4, r1
 800923c:	2101      	movs	r1, #1
 800923e:	f7ff feb9 	bl	8008fb4 <_Balloc>
 8009242:	4602      	mov	r2, r0
 8009244:	b928      	cbnz	r0, 8009252 <__i2b+0x1a>
 8009246:	4b05      	ldr	r3, [pc, #20]	; (800925c <__i2b+0x24>)
 8009248:	4805      	ldr	r0, [pc, #20]	; (8009260 <__i2b+0x28>)
 800924a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800924e:	f000 fe01 	bl	8009e54 <__assert_func>
 8009252:	2301      	movs	r3, #1
 8009254:	6144      	str	r4, [r0, #20]
 8009256:	6103      	str	r3, [r0, #16]
 8009258:	bd10      	pop	{r4, pc}
 800925a:	bf00      	nop
 800925c:	0800c120 	.word	0x0800c120
 8009260:	0800c1ac 	.word	0x0800c1ac

08009264 <__multiply>:
 8009264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009268:	4691      	mov	r9, r2
 800926a:	690a      	ldr	r2, [r1, #16]
 800926c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009270:	429a      	cmp	r2, r3
 8009272:	bfb8      	it	lt
 8009274:	460b      	movlt	r3, r1
 8009276:	460c      	mov	r4, r1
 8009278:	bfbc      	itt	lt
 800927a:	464c      	movlt	r4, r9
 800927c:	4699      	movlt	r9, r3
 800927e:	6927      	ldr	r7, [r4, #16]
 8009280:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009284:	68a3      	ldr	r3, [r4, #8]
 8009286:	6861      	ldr	r1, [r4, #4]
 8009288:	eb07 060a 	add.w	r6, r7, sl
 800928c:	42b3      	cmp	r3, r6
 800928e:	b085      	sub	sp, #20
 8009290:	bfb8      	it	lt
 8009292:	3101      	addlt	r1, #1
 8009294:	f7ff fe8e 	bl	8008fb4 <_Balloc>
 8009298:	b930      	cbnz	r0, 80092a8 <__multiply+0x44>
 800929a:	4602      	mov	r2, r0
 800929c:	4b44      	ldr	r3, [pc, #272]	; (80093b0 <__multiply+0x14c>)
 800929e:	4845      	ldr	r0, [pc, #276]	; (80093b4 <__multiply+0x150>)
 80092a0:	f240 115d 	movw	r1, #349	; 0x15d
 80092a4:	f000 fdd6 	bl	8009e54 <__assert_func>
 80092a8:	f100 0514 	add.w	r5, r0, #20
 80092ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092b0:	462b      	mov	r3, r5
 80092b2:	2200      	movs	r2, #0
 80092b4:	4543      	cmp	r3, r8
 80092b6:	d321      	bcc.n	80092fc <__multiply+0x98>
 80092b8:	f104 0314 	add.w	r3, r4, #20
 80092bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80092c0:	f109 0314 	add.w	r3, r9, #20
 80092c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80092c8:	9202      	str	r2, [sp, #8]
 80092ca:	1b3a      	subs	r2, r7, r4
 80092cc:	3a15      	subs	r2, #21
 80092ce:	f022 0203 	bic.w	r2, r2, #3
 80092d2:	3204      	adds	r2, #4
 80092d4:	f104 0115 	add.w	r1, r4, #21
 80092d8:	428f      	cmp	r7, r1
 80092da:	bf38      	it	cc
 80092dc:	2204      	movcc	r2, #4
 80092de:	9201      	str	r2, [sp, #4]
 80092e0:	9a02      	ldr	r2, [sp, #8]
 80092e2:	9303      	str	r3, [sp, #12]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d80c      	bhi.n	8009302 <__multiply+0x9e>
 80092e8:	2e00      	cmp	r6, #0
 80092ea:	dd03      	ble.n	80092f4 <__multiply+0x90>
 80092ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d05a      	beq.n	80093aa <__multiply+0x146>
 80092f4:	6106      	str	r6, [r0, #16]
 80092f6:	b005      	add	sp, #20
 80092f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fc:	f843 2b04 	str.w	r2, [r3], #4
 8009300:	e7d8      	b.n	80092b4 <__multiply+0x50>
 8009302:	f8b3 a000 	ldrh.w	sl, [r3]
 8009306:	f1ba 0f00 	cmp.w	sl, #0
 800930a:	d024      	beq.n	8009356 <__multiply+0xf2>
 800930c:	f104 0e14 	add.w	lr, r4, #20
 8009310:	46a9      	mov	r9, r5
 8009312:	f04f 0c00 	mov.w	ip, #0
 8009316:	f85e 2b04 	ldr.w	r2, [lr], #4
 800931a:	f8d9 1000 	ldr.w	r1, [r9]
 800931e:	fa1f fb82 	uxth.w	fp, r2
 8009322:	b289      	uxth	r1, r1
 8009324:	fb0a 110b 	mla	r1, sl, fp, r1
 8009328:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800932c:	f8d9 2000 	ldr.w	r2, [r9]
 8009330:	4461      	add	r1, ip
 8009332:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009336:	fb0a c20b 	mla	r2, sl, fp, ip
 800933a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800933e:	b289      	uxth	r1, r1
 8009340:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009344:	4577      	cmp	r7, lr
 8009346:	f849 1b04 	str.w	r1, [r9], #4
 800934a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800934e:	d8e2      	bhi.n	8009316 <__multiply+0xb2>
 8009350:	9a01      	ldr	r2, [sp, #4]
 8009352:	f845 c002 	str.w	ip, [r5, r2]
 8009356:	9a03      	ldr	r2, [sp, #12]
 8009358:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800935c:	3304      	adds	r3, #4
 800935e:	f1b9 0f00 	cmp.w	r9, #0
 8009362:	d020      	beq.n	80093a6 <__multiply+0x142>
 8009364:	6829      	ldr	r1, [r5, #0]
 8009366:	f104 0c14 	add.w	ip, r4, #20
 800936a:	46ae      	mov	lr, r5
 800936c:	f04f 0a00 	mov.w	sl, #0
 8009370:	f8bc b000 	ldrh.w	fp, [ip]
 8009374:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009378:	fb09 220b 	mla	r2, r9, fp, r2
 800937c:	4492      	add	sl, r2
 800937e:	b289      	uxth	r1, r1
 8009380:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009384:	f84e 1b04 	str.w	r1, [lr], #4
 8009388:	f85c 2b04 	ldr.w	r2, [ip], #4
 800938c:	f8be 1000 	ldrh.w	r1, [lr]
 8009390:	0c12      	lsrs	r2, r2, #16
 8009392:	fb09 1102 	mla	r1, r9, r2, r1
 8009396:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800939a:	4567      	cmp	r7, ip
 800939c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093a0:	d8e6      	bhi.n	8009370 <__multiply+0x10c>
 80093a2:	9a01      	ldr	r2, [sp, #4]
 80093a4:	50a9      	str	r1, [r5, r2]
 80093a6:	3504      	adds	r5, #4
 80093a8:	e79a      	b.n	80092e0 <__multiply+0x7c>
 80093aa:	3e01      	subs	r6, #1
 80093ac:	e79c      	b.n	80092e8 <__multiply+0x84>
 80093ae:	bf00      	nop
 80093b0:	0800c120 	.word	0x0800c120
 80093b4:	0800c1ac 	.word	0x0800c1ac

080093b8 <__pow5mult>:
 80093b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093bc:	4615      	mov	r5, r2
 80093be:	f012 0203 	ands.w	r2, r2, #3
 80093c2:	4606      	mov	r6, r0
 80093c4:	460f      	mov	r7, r1
 80093c6:	d007      	beq.n	80093d8 <__pow5mult+0x20>
 80093c8:	4c25      	ldr	r4, [pc, #148]	; (8009460 <__pow5mult+0xa8>)
 80093ca:	3a01      	subs	r2, #1
 80093cc:	2300      	movs	r3, #0
 80093ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093d2:	f7ff fe51 	bl	8009078 <__multadd>
 80093d6:	4607      	mov	r7, r0
 80093d8:	10ad      	asrs	r5, r5, #2
 80093da:	d03d      	beq.n	8009458 <__pow5mult+0xa0>
 80093dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80093de:	b97c      	cbnz	r4, 8009400 <__pow5mult+0x48>
 80093e0:	2010      	movs	r0, #16
 80093e2:	f7ff fdbf 	bl	8008f64 <malloc>
 80093e6:	4602      	mov	r2, r0
 80093e8:	6270      	str	r0, [r6, #36]	; 0x24
 80093ea:	b928      	cbnz	r0, 80093f8 <__pow5mult+0x40>
 80093ec:	4b1d      	ldr	r3, [pc, #116]	; (8009464 <__pow5mult+0xac>)
 80093ee:	481e      	ldr	r0, [pc, #120]	; (8009468 <__pow5mult+0xb0>)
 80093f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80093f4:	f000 fd2e 	bl	8009e54 <__assert_func>
 80093f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093fc:	6004      	str	r4, [r0, #0]
 80093fe:	60c4      	str	r4, [r0, #12]
 8009400:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009404:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009408:	b94c      	cbnz	r4, 800941e <__pow5mult+0x66>
 800940a:	f240 2171 	movw	r1, #625	; 0x271
 800940e:	4630      	mov	r0, r6
 8009410:	f7ff ff12 	bl	8009238 <__i2b>
 8009414:	2300      	movs	r3, #0
 8009416:	f8c8 0008 	str.w	r0, [r8, #8]
 800941a:	4604      	mov	r4, r0
 800941c:	6003      	str	r3, [r0, #0]
 800941e:	f04f 0900 	mov.w	r9, #0
 8009422:	07eb      	lsls	r3, r5, #31
 8009424:	d50a      	bpl.n	800943c <__pow5mult+0x84>
 8009426:	4639      	mov	r1, r7
 8009428:	4622      	mov	r2, r4
 800942a:	4630      	mov	r0, r6
 800942c:	f7ff ff1a 	bl	8009264 <__multiply>
 8009430:	4639      	mov	r1, r7
 8009432:	4680      	mov	r8, r0
 8009434:	4630      	mov	r0, r6
 8009436:	f7ff fdfd 	bl	8009034 <_Bfree>
 800943a:	4647      	mov	r7, r8
 800943c:	106d      	asrs	r5, r5, #1
 800943e:	d00b      	beq.n	8009458 <__pow5mult+0xa0>
 8009440:	6820      	ldr	r0, [r4, #0]
 8009442:	b938      	cbnz	r0, 8009454 <__pow5mult+0x9c>
 8009444:	4622      	mov	r2, r4
 8009446:	4621      	mov	r1, r4
 8009448:	4630      	mov	r0, r6
 800944a:	f7ff ff0b 	bl	8009264 <__multiply>
 800944e:	6020      	str	r0, [r4, #0]
 8009450:	f8c0 9000 	str.w	r9, [r0]
 8009454:	4604      	mov	r4, r0
 8009456:	e7e4      	b.n	8009422 <__pow5mult+0x6a>
 8009458:	4638      	mov	r0, r7
 800945a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800945e:	bf00      	nop
 8009460:	0800c2f8 	.word	0x0800c2f8
 8009464:	0800c0ae 	.word	0x0800c0ae
 8009468:	0800c1ac 	.word	0x0800c1ac

0800946c <__lshift>:
 800946c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009470:	460c      	mov	r4, r1
 8009472:	6849      	ldr	r1, [r1, #4]
 8009474:	6923      	ldr	r3, [r4, #16]
 8009476:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800947a:	68a3      	ldr	r3, [r4, #8]
 800947c:	4607      	mov	r7, r0
 800947e:	4691      	mov	r9, r2
 8009480:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009484:	f108 0601 	add.w	r6, r8, #1
 8009488:	42b3      	cmp	r3, r6
 800948a:	db0b      	blt.n	80094a4 <__lshift+0x38>
 800948c:	4638      	mov	r0, r7
 800948e:	f7ff fd91 	bl	8008fb4 <_Balloc>
 8009492:	4605      	mov	r5, r0
 8009494:	b948      	cbnz	r0, 80094aa <__lshift+0x3e>
 8009496:	4602      	mov	r2, r0
 8009498:	4b2a      	ldr	r3, [pc, #168]	; (8009544 <__lshift+0xd8>)
 800949a:	482b      	ldr	r0, [pc, #172]	; (8009548 <__lshift+0xdc>)
 800949c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80094a0:	f000 fcd8 	bl	8009e54 <__assert_func>
 80094a4:	3101      	adds	r1, #1
 80094a6:	005b      	lsls	r3, r3, #1
 80094a8:	e7ee      	b.n	8009488 <__lshift+0x1c>
 80094aa:	2300      	movs	r3, #0
 80094ac:	f100 0114 	add.w	r1, r0, #20
 80094b0:	f100 0210 	add.w	r2, r0, #16
 80094b4:	4618      	mov	r0, r3
 80094b6:	4553      	cmp	r3, sl
 80094b8:	db37      	blt.n	800952a <__lshift+0xbe>
 80094ba:	6920      	ldr	r0, [r4, #16]
 80094bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094c0:	f104 0314 	add.w	r3, r4, #20
 80094c4:	f019 091f 	ands.w	r9, r9, #31
 80094c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80094d0:	d02f      	beq.n	8009532 <__lshift+0xc6>
 80094d2:	f1c9 0e20 	rsb	lr, r9, #32
 80094d6:	468a      	mov	sl, r1
 80094d8:	f04f 0c00 	mov.w	ip, #0
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	fa02 f209 	lsl.w	r2, r2, r9
 80094e2:	ea42 020c 	orr.w	r2, r2, ip
 80094e6:	f84a 2b04 	str.w	r2, [sl], #4
 80094ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ee:	4298      	cmp	r0, r3
 80094f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80094f4:	d8f2      	bhi.n	80094dc <__lshift+0x70>
 80094f6:	1b03      	subs	r3, r0, r4
 80094f8:	3b15      	subs	r3, #21
 80094fa:	f023 0303 	bic.w	r3, r3, #3
 80094fe:	3304      	adds	r3, #4
 8009500:	f104 0215 	add.w	r2, r4, #21
 8009504:	4290      	cmp	r0, r2
 8009506:	bf38      	it	cc
 8009508:	2304      	movcc	r3, #4
 800950a:	f841 c003 	str.w	ip, [r1, r3]
 800950e:	f1bc 0f00 	cmp.w	ip, #0
 8009512:	d001      	beq.n	8009518 <__lshift+0xac>
 8009514:	f108 0602 	add.w	r6, r8, #2
 8009518:	3e01      	subs	r6, #1
 800951a:	4638      	mov	r0, r7
 800951c:	612e      	str	r6, [r5, #16]
 800951e:	4621      	mov	r1, r4
 8009520:	f7ff fd88 	bl	8009034 <_Bfree>
 8009524:	4628      	mov	r0, r5
 8009526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800952a:	f842 0f04 	str.w	r0, [r2, #4]!
 800952e:	3301      	adds	r3, #1
 8009530:	e7c1      	b.n	80094b6 <__lshift+0x4a>
 8009532:	3904      	subs	r1, #4
 8009534:	f853 2b04 	ldr.w	r2, [r3], #4
 8009538:	f841 2f04 	str.w	r2, [r1, #4]!
 800953c:	4298      	cmp	r0, r3
 800953e:	d8f9      	bhi.n	8009534 <__lshift+0xc8>
 8009540:	e7ea      	b.n	8009518 <__lshift+0xac>
 8009542:	bf00      	nop
 8009544:	0800c120 	.word	0x0800c120
 8009548:	0800c1ac 	.word	0x0800c1ac

0800954c <__mcmp>:
 800954c:	b530      	push	{r4, r5, lr}
 800954e:	6902      	ldr	r2, [r0, #16]
 8009550:	690c      	ldr	r4, [r1, #16]
 8009552:	1b12      	subs	r2, r2, r4
 8009554:	d10e      	bne.n	8009574 <__mcmp+0x28>
 8009556:	f100 0314 	add.w	r3, r0, #20
 800955a:	3114      	adds	r1, #20
 800955c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009560:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009564:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009568:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800956c:	42a5      	cmp	r5, r4
 800956e:	d003      	beq.n	8009578 <__mcmp+0x2c>
 8009570:	d305      	bcc.n	800957e <__mcmp+0x32>
 8009572:	2201      	movs	r2, #1
 8009574:	4610      	mov	r0, r2
 8009576:	bd30      	pop	{r4, r5, pc}
 8009578:	4283      	cmp	r3, r0
 800957a:	d3f3      	bcc.n	8009564 <__mcmp+0x18>
 800957c:	e7fa      	b.n	8009574 <__mcmp+0x28>
 800957e:	f04f 32ff 	mov.w	r2, #4294967295
 8009582:	e7f7      	b.n	8009574 <__mcmp+0x28>

08009584 <__mdiff>:
 8009584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009588:	460c      	mov	r4, r1
 800958a:	4606      	mov	r6, r0
 800958c:	4611      	mov	r1, r2
 800958e:	4620      	mov	r0, r4
 8009590:	4690      	mov	r8, r2
 8009592:	f7ff ffdb 	bl	800954c <__mcmp>
 8009596:	1e05      	subs	r5, r0, #0
 8009598:	d110      	bne.n	80095bc <__mdiff+0x38>
 800959a:	4629      	mov	r1, r5
 800959c:	4630      	mov	r0, r6
 800959e:	f7ff fd09 	bl	8008fb4 <_Balloc>
 80095a2:	b930      	cbnz	r0, 80095b2 <__mdiff+0x2e>
 80095a4:	4b3a      	ldr	r3, [pc, #232]	; (8009690 <__mdiff+0x10c>)
 80095a6:	4602      	mov	r2, r0
 80095a8:	f240 2132 	movw	r1, #562	; 0x232
 80095ac:	4839      	ldr	r0, [pc, #228]	; (8009694 <__mdiff+0x110>)
 80095ae:	f000 fc51 	bl	8009e54 <__assert_func>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095bc:	bfa4      	itt	ge
 80095be:	4643      	movge	r3, r8
 80095c0:	46a0      	movge	r8, r4
 80095c2:	4630      	mov	r0, r6
 80095c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095c8:	bfa6      	itte	ge
 80095ca:	461c      	movge	r4, r3
 80095cc:	2500      	movge	r5, #0
 80095ce:	2501      	movlt	r5, #1
 80095d0:	f7ff fcf0 	bl	8008fb4 <_Balloc>
 80095d4:	b920      	cbnz	r0, 80095e0 <__mdiff+0x5c>
 80095d6:	4b2e      	ldr	r3, [pc, #184]	; (8009690 <__mdiff+0x10c>)
 80095d8:	4602      	mov	r2, r0
 80095da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80095de:	e7e5      	b.n	80095ac <__mdiff+0x28>
 80095e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80095e4:	6926      	ldr	r6, [r4, #16]
 80095e6:	60c5      	str	r5, [r0, #12]
 80095e8:	f104 0914 	add.w	r9, r4, #20
 80095ec:	f108 0514 	add.w	r5, r8, #20
 80095f0:	f100 0e14 	add.w	lr, r0, #20
 80095f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80095f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80095fc:	f108 0210 	add.w	r2, r8, #16
 8009600:	46f2      	mov	sl, lr
 8009602:	2100      	movs	r1, #0
 8009604:	f859 3b04 	ldr.w	r3, [r9], #4
 8009608:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800960c:	fa1f f883 	uxth.w	r8, r3
 8009610:	fa11 f18b 	uxtah	r1, r1, fp
 8009614:	0c1b      	lsrs	r3, r3, #16
 8009616:	eba1 0808 	sub.w	r8, r1, r8
 800961a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800961e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009622:	fa1f f888 	uxth.w	r8, r8
 8009626:	1419      	asrs	r1, r3, #16
 8009628:	454e      	cmp	r6, r9
 800962a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800962e:	f84a 3b04 	str.w	r3, [sl], #4
 8009632:	d8e7      	bhi.n	8009604 <__mdiff+0x80>
 8009634:	1b33      	subs	r3, r6, r4
 8009636:	3b15      	subs	r3, #21
 8009638:	f023 0303 	bic.w	r3, r3, #3
 800963c:	3304      	adds	r3, #4
 800963e:	3415      	adds	r4, #21
 8009640:	42a6      	cmp	r6, r4
 8009642:	bf38      	it	cc
 8009644:	2304      	movcc	r3, #4
 8009646:	441d      	add	r5, r3
 8009648:	4473      	add	r3, lr
 800964a:	469e      	mov	lr, r3
 800964c:	462e      	mov	r6, r5
 800964e:	4566      	cmp	r6, ip
 8009650:	d30e      	bcc.n	8009670 <__mdiff+0xec>
 8009652:	f10c 0203 	add.w	r2, ip, #3
 8009656:	1b52      	subs	r2, r2, r5
 8009658:	f022 0203 	bic.w	r2, r2, #3
 800965c:	3d03      	subs	r5, #3
 800965e:	45ac      	cmp	ip, r5
 8009660:	bf38      	it	cc
 8009662:	2200      	movcc	r2, #0
 8009664:	441a      	add	r2, r3
 8009666:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800966a:	b17b      	cbz	r3, 800968c <__mdiff+0x108>
 800966c:	6107      	str	r7, [r0, #16]
 800966e:	e7a3      	b.n	80095b8 <__mdiff+0x34>
 8009670:	f856 8b04 	ldr.w	r8, [r6], #4
 8009674:	fa11 f288 	uxtah	r2, r1, r8
 8009678:	1414      	asrs	r4, r2, #16
 800967a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800967e:	b292      	uxth	r2, r2
 8009680:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009684:	f84e 2b04 	str.w	r2, [lr], #4
 8009688:	1421      	asrs	r1, r4, #16
 800968a:	e7e0      	b.n	800964e <__mdiff+0xca>
 800968c:	3f01      	subs	r7, #1
 800968e:	e7ea      	b.n	8009666 <__mdiff+0xe2>
 8009690:	0800c120 	.word	0x0800c120
 8009694:	0800c1ac 	.word	0x0800c1ac

08009698 <__ulp>:
 8009698:	b082      	sub	sp, #8
 800969a:	ed8d 0b00 	vstr	d0, [sp]
 800969e:	9b01      	ldr	r3, [sp, #4]
 80096a0:	4912      	ldr	r1, [pc, #72]	; (80096ec <__ulp+0x54>)
 80096a2:	4019      	ands	r1, r3
 80096a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80096a8:	2900      	cmp	r1, #0
 80096aa:	dd05      	ble.n	80096b8 <__ulp+0x20>
 80096ac:	2200      	movs	r2, #0
 80096ae:	460b      	mov	r3, r1
 80096b0:	ec43 2b10 	vmov	d0, r2, r3
 80096b4:	b002      	add	sp, #8
 80096b6:	4770      	bx	lr
 80096b8:	4249      	negs	r1, r1
 80096ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80096be:	ea4f 5021 	mov.w	r0, r1, asr #20
 80096c2:	f04f 0200 	mov.w	r2, #0
 80096c6:	f04f 0300 	mov.w	r3, #0
 80096ca:	da04      	bge.n	80096d6 <__ulp+0x3e>
 80096cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80096d0:	fa41 f300 	asr.w	r3, r1, r0
 80096d4:	e7ec      	b.n	80096b0 <__ulp+0x18>
 80096d6:	f1a0 0114 	sub.w	r1, r0, #20
 80096da:	291e      	cmp	r1, #30
 80096dc:	bfda      	itte	le
 80096de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80096e2:	fa20 f101 	lsrle.w	r1, r0, r1
 80096e6:	2101      	movgt	r1, #1
 80096e8:	460a      	mov	r2, r1
 80096ea:	e7e1      	b.n	80096b0 <__ulp+0x18>
 80096ec:	7ff00000 	.word	0x7ff00000

080096f0 <__b2d>:
 80096f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f2:	6905      	ldr	r5, [r0, #16]
 80096f4:	f100 0714 	add.w	r7, r0, #20
 80096f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80096fc:	1f2e      	subs	r6, r5, #4
 80096fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009702:	4620      	mov	r0, r4
 8009704:	f7ff fd48 	bl	8009198 <__hi0bits>
 8009708:	f1c0 0320 	rsb	r3, r0, #32
 800970c:	280a      	cmp	r0, #10
 800970e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800978c <__b2d+0x9c>
 8009712:	600b      	str	r3, [r1, #0]
 8009714:	dc14      	bgt.n	8009740 <__b2d+0x50>
 8009716:	f1c0 0e0b 	rsb	lr, r0, #11
 800971a:	fa24 f10e 	lsr.w	r1, r4, lr
 800971e:	42b7      	cmp	r7, r6
 8009720:	ea41 030c 	orr.w	r3, r1, ip
 8009724:	bf34      	ite	cc
 8009726:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800972a:	2100      	movcs	r1, #0
 800972c:	3015      	adds	r0, #21
 800972e:	fa04 f000 	lsl.w	r0, r4, r0
 8009732:	fa21 f10e 	lsr.w	r1, r1, lr
 8009736:	ea40 0201 	orr.w	r2, r0, r1
 800973a:	ec43 2b10 	vmov	d0, r2, r3
 800973e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009740:	42b7      	cmp	r7, r6
 8009742:	bf3a      	itte	cc
 8009744:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009748:	f1a5 0608 	subcc.w	r6, r5, #8
 800974c:	2100      	movcs	r1, #0
 800974e:	380b      	subs	r0, #11
 8009750:	d017      	beq.n	8009782 <__b2d+0x92>
 8009752:	f1c0 0c20 	rsb	ip, r0, #32
 8009756:	fa04 f500 	lsl.w	r5, r4, r0
 800975a:	42be      	cmp	r6, r7
 800975c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009760:	ea45 0504 	orr.w	r5, r5, r4
 8009764:	bf8c      	ite	hi
 8009766:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800976a:	2400      	movls	r4, #0
 800976c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009770:	fa01 f000 	lsl.w	r0, r1, r0
 8009774:	fa24 f40c 	lsr.w	r4, r4, ip
 8009778:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800977c:	ea40 0204 	orr.w	r2, r0, r4
 8009780:	e7db      	b.n	800973a <__b2d+0x4a>
 8009782:	ea44 030c 	orr.w	r3, r4, ip
 8009786:	460a      	mov	r2, r1
 8009788:	e7d7      	b.n	800973a <__b2d+0x4a>
 800978a:	bf00      	nop
 800978c:	3ff00000 	.word	0x3ff00000

08009790 <__d2b>:
 8009790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009794:	4689      	mov	r9, r1
 8009796:	2101      	movs	r1, #1
 8009798:	ec57 6b10 	vmov	r6, r7, d0
 800979c:	4690      	mov	r8, r2
 800979e:	f7ff fc09 	bl	8008fb4 <_Balloc>
 80097a2:	4604      	mov	r4, r0
 80097a4:	b930      	cbnz	r0, 80097b4 <__d2b+0x24>
 80097a6:	4602      	mov	r2, r0
 80097a8:	4b25      	ldr	r3, [pc, #148]	; (8009840 <__d2b+0xb0>)
 80097aa:	4826      	ldr	r0, [pc, #152]	; (8009844 <__d2b+0xb4>)
 80097ac:	f240 310a 	movw	r1, #778	; 0x30a
 80097b0:	f000 fb50 	bl	8009e54 <__assert_func>
 80097b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80097b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097bc:	bb35      	cbnz	r5, 800980c <__d2b+0x7c>
 80097be:	2e00      	cmp	r6, #0
 80097c0:	9301      	str	r3, [sp, #4]
 80097c2:	d028      	beq.n	8009816 <__d2b+0x86>
 80097c4:	4668      	mov	r0, sp
 80097c6:	9600      	str	r6, [sp, #0]
 80097c8:	f7ff fd06 	bl	80091d8 <__lo0bits>
 80097cc:	9900      	ldr	r1, [sp, #0]
 80097ce:	b300      	cbz	r0, 8009812 <__d2b+0x82>
 80097d0:	9a01      	ldr	r2, [sp, #4]
 80097d2:	f1c0 0320 	rsb	r3, r0, #32
 80097d6:	fa02 f303 	lsl.w	r3, r2, r3
 80097da:	430b      	orrs	r3, r1
 80097dc:	40c2      	lsrs	r2, r0
 80097de:	6163      	str	r3, [r4, #20]
 80097e0:	9201      	str	r2, [sp, #4]
 80097e2:	9b01      	ldr	r3, [sp, #4]
 80097e4:	61a3      	str	r3, [r4, #24]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	bf14      	ite	ne
 80097ea:	2202      	movne	r2, #2
 80097ec:	2201      	moveq	r2, #1
 80097ee:	6122      	str	r2, [r4, #16]
 80097f0:	b1d5      	cbz	r5, 8009828 <__d2b+0x98>
 80097f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80097f6:	4405      	add	r5, r0
 80097f8:	f8c9 5000 	str.w	r5, [r9]
 80097fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009800:	f8c8 0000 	str.w	r0, [r8]
 8009804:	4620      	mov	r0, r4
 8009806:	b003      	add	sp, #12
 8009808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800980c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009810:	e7d5      	b.n	80097be <__d2b+0x2e>
 8009812:	6161      	str	r1, [r4, #20]
 8009814:	e7e5      	b.n	80097e2 <__d2b+0x52>
 8009816:	a801      	add	r0, sp, #4
 8009818:	f7ff fcde 	bl	80091d8 <__lo0bits>
 800981c:	9b01      	ldr	r3, [sp, #4]
 800981e:	6163      	str	r3, [r4, #20]
 8009820:	2201      	movs	r2, #1
 8009822:	6122      	str	r2, [r4, #16]
 8009824:	3020      	adds	r0, #32
 8009826:	e7e3      	b.n	80097f0 <__d2b+0x60>
 8009828:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800982c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009830:	f8c9 0000 	str.w	r0, [r9]
 8009834:	6918      	ldr	r0, [r3, #16]
 8009836:	f7ff fcaf 	bl	8009198 <__hi0bits>
 800983a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800983e:	e7df      	b.n	8009800 <__d2b+0x70>
 8009840:	0800c120 	.word	0x0800c120
 8009844:	0800c1ac 	.word	0x0800c1ac

08009848 <__ratio>:
 8009848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	4688      	mov	r8, r1
 800984e:	4669      	mov	r1, sp
 8009850:	4681      	mov	r9, r0
 8009852:	f7ff ff4d 	bl	80096f0 <__b2d>
 8009856:	a901      	add	r1, sp, #4
 8009858:	4640      	mov	r0, r8
 800985a:	ec55 4b10 	vmov	r4, r5, d0
 800985e:	f7ff ff47 	bl	80096f0 <__b2d>
 8009862:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009866:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800986a:	eba3 0c02 	sub.w	ip, r3, r2
 800986e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009872:	1a9b      	subs	r3, r3, r2
 8009874:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009878:	ec51 0b10 	vmov	r0, r1, d0
 800987c:	2b00      	cmp	r3, #0
 800987e:	bfd6      	itet	le
 8009880:	460a      	movle	r2, r1
 8009882:	462a      	movgt	r2, r5
 8009884:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009888:	468b      	mov	fp, r1
 800988a:	462f      	mov	r7, r5
 800988c:	bfd4      	ite	le
 800988e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009892:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009896:	4620      	mov	r0, r4
 8009898:	ee10 2a10 	vmov	r2, s0
 800989c:	465b      	mov	r3, fp
 800989e:	4639      	mov	r1, r7
 80098a0:	f7f6 fffc 	bl	800089c <__aeabi_ddiv>
 80098a4:	ec41 0b10 	vmov	d0, r0, r1
 80098a8:	b003      	add	sp, #12
 80098aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098ae <__copybits>:
 80098ae:	3901      	subs	r1, #1
 80098b0:	b570      	push	{r4, r5, r6, lr}
 80098b2:	1149      	asrs	r1, r1, #5
 80098b4:	6914      	ldr	r4, [r2, #16]
 80098b6:	3101      	adds	r1, #1
 80098b8:	f102 0314 	add.w	r3, r2, #20
 80098bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80098c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80098c4:	1f05      	subs	r5, r0, #4
 80098c6:	42a3      	cmp	r3, r4
 80098c8:	d30c      	bcc.n	80098e4 <__copybits+0x36>
 80098ca:	1aa3      	subs	r3, r4, r2
 80098cc:	3b11      	subs	r3, #17
 80098ce:	f023 0303 	bic.w	r3, r3, #3
 80098d2:	3211      	adds	r2, #17
 80098d4:	42a2      	cmp	r2, r4
 80098d6:	bf88      	it	hi
 80098d8:	2300      	movhi	r3, #0
 80098da:	4418      	add	r0, r3
 80098dc:	2300      	movs	r3, #0
 80098de:	4288      	cmp	r0, r1
 80098e0:	d305      	bcc.n	80098ee <__copybits+0x40>
 80098e2:	bd70      	pop	{r4, r5, r6, pc}
 80098e4:	f853 6b04 	ldr.w	r6, [r3], #4
 80098e8:	f845 6f04 	str.w	r6, [r5, #4]!
 80098ec:	e7eb      	b.n	80098c6 <__copybits+0x18>
 80098ee:	f840 3b04 	str.w	r3, [r0], #4
 80098f2:	e7f4      	b.n	80098de <__copybits+0x30>

080098f4 <__any_on>:
 80098f4:	f100 0214 	add.w	r2, r0, #20
 80098f8:	6900      	ldr	r0, [r0, #16]
 80098fa:	114b      	asrs	r3, r1, #5
 80098fc:	4298      	cmp	r0, r3
 80098fe:	b510      	push	{r4, lr}
 8009900:	db11      	blt.n	8009926 <__any_on+0x32>
 8009902:	dd0a      	ble.n	800991a <__any_on+0x26>
 8009904:	f011 011f 	ands.w	r1, r1, #31
 8009908:	d007      	beq.n	800991a <__any_on+0x26>
 800990a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800990e:	fa24 f001 	lsr.w	r0, r4, r1
 8009912:	fa00 f101 	lsl.w	r1, r0, r1
 8009916:	428c      	cmp	r4, r1
 8009918:	d10b      	bne.n	8009932 <__any_on+0x3e>
 800991a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800991e:	4293      	cmp	r3, r2
 8009920:	d803      	bhi.n	800992a <__any_on+0x36>
 8009922:	2000      	movs	r0, #0
 8009924:	bd10      	pop	{r4, pc}
 8009926:	4603      	mov	r3, r0
 8009928:	e7f7      	b.n	800991a <__any_on+0x26>
 800992a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800992e:	2900      	cmp	r1, #0
 8009930:	d0f5      	beq.n	800991e <__any_on+0x2a>
 8009932:	2001      	movs	r0, #1
 8009934:	e7f6      	b.n	8009924 <__any_on+0x30>

08009936 <_calloc_r>:
 8009936:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009938:	fba1 2402 	umull	r2, r4, r1, r2
 800993c:	b94c      	cbnz	r4, 8009952 <_calloc_r+0x1c>
 800993e:	4611      	mov	r1, r2
 8009940:	9201      	str	r2, [sp, #4]
 8009942:	f000 f87b 	bl	8009a3c <_malloc_r>
 8009946:	9a01      	ldr	r2, [sp, #4]
 8009948:	4605      	mov	r5, r0
 800994a:	b930      	cbnz	r0, 800995a <_calloc_r+0x24>
 800994c:	4628      	mov	r0, r5
 800994e:	b003      	add	sp, #12
 8009950:	bd30      	pop	{r4, r5, pc}
 8009952:	220c      	movs	r2, #12
 8009954:	6002      	str	r2, [r0, #0]
 8009956:	2500      	movs	r5, #0
 8009958:	e7f8      	b.n	800994c <_calloc_r+0x16>
 800995a:	4621      	mov	r1, r4
 800995c:	f7fc fbc0 	bl	80060e0 <memset>
 8009960:	e7f4      	b.n	800994c <_calloc_r+0x16>
	...

08009964 <_free_r>:
 8009964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009966:	2900      	cmp	r1, #0
 8009968:	d044      	beq.n	80099f4 <_free_r+0x90>
 800996a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800996e:	9001      	str	r0, [sp, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	f1a1 0404 	sub.w	r4, r1, #4
 8009976:	bfb8      	it	lt
 8009978:	18e4      	addlt	r4, r4, r3
 800997a:	f000 fab5 	bl	8009ee8 <__malloc_lock>
 800997e:	4a1e      	ldr	r2, [pc, #120]	; (80099f8 <_free_r+0x94>)
 8009980:	9801      	ldr	r0, [sp, #4]
 8009982:	6813      	ldr	r3, [r2, #0]
 8009984:	b933      	cbnz	r3, 8009994 <_free_r+0x30>
 8009986:	6063      	str	r3, [r4, #4]
 8009988:	6014      	str	r4, [r2, #0]
 800998a:	b003      	add	sp, #12
 800998c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009990:	f000 bab0 	b.w	8009ef4 <__malloc_unlock>
 8009994:	42a3      	cmp	r3, r4
 8009996:	d908      	bls.n	80099aa <_free_r+0x46>
 8009998:	6825      	ldr	r5, [r4, #0]
 800999a:	1961      	adds	r1, r4, r5
 800999c:	428b      	cmp	r3, r1
 800999e:	bf01      	itttt	eq
 80099a0:	6819      	ldreq	r1, [r3, #0]
 80099a2:	685b      	ldreq	r3, [r3, #4]
 80099a4:	1949      	addeq	r1, r1, r5
 80099a6:	6021      	streq	r1, [r4, #0]
 80099a8:	e7ed      	b.n	8009986 <_free_r+0x22>
 80099aa:	461a      	mov	r2, r3
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	b10b      	cbz	r3, 80099b4 <_free_r+0x50>
 80099b0:	42a3      	cmp	r3, r4
 80099b2:	d9fa      	bls.n	80099aa <_free_r+0x46>
 80099b4:	6811      	ldr	r1, [r2, #0]
 80099b6:	1855      	adds	r5, r2, r1
 80099b8:	42a5      	cmp	r5, r4
 80099ba:	d10b      	bne.n	80099d4 <_free_r+0x70>
 80099bc:	6824      	ldr	r4, [r4, #0]
 80099be:	4421      	add	r1, r4
 80099c0:	1854      	adds	r4, r2, r1
 80099c2:	42a3      	cmp	r3, r4
 80099c4:	6011      	str	r1, [r2, #0]
 80099c6:	d1e0      	bne.n	800998a <_free_r+0x26>
 80099c8:	681c      	ldr	r4, [r3, #0]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	6053      	str	r3, [r2, #4]
 80099ce:	4421      	add	r1, r4
 80099d0:	6011      	str	r1, [r2, #0]
 80099d2:	e7da      	b.n	800998a <_free_r+0x26>
 80099d4:	d902      	bls.n	80099dc <_free_r+0x78>
 80099d6:	230c      	movs	r3, #12
 80099d8:	6003      	str	r3, [r0, #0]
 80099da:	e7d6      	b.n	800998a <_free_r+0x26>
 80099dc:	6825      	ldr	r5, [r4, #0]
 80099de:	1961      	adds	r1, r4, r5
 80099e0:	428b      	cmp	r3, r1
 80099e2:	bf04      	itt	eq
 80099e4:	6819      	ldreq	r1, [r3, #0]
 80099e6:	685b      	ldreq	r3, [r3, #4]
 80099e8:	6063      	str	r3, [r4, #4]
 80099ea:	bf04      	itt	eq
 80099ec:	1949      	addeq	r1, r1, r5
 80099ee:	6021      	streq	r1, [r4, #0]
 80099f0:	6054      	str	r4, [r2, #4]
 80099f2:	e7ca      	b.n	800998a <_free_r+0x26>
 80099f4:	b003      	add	sp, #12
 80099f6:	bd30      	pop	{r4, r5, pc}
 80099f8:	2000082c 	.word	0x2000082c

080099fc <sbrk_aligned>:
 80099fc:	b570      	push	{r4, r5, r6, lr}
 80099fe:	4e0e      	ldr	r6, [pc, #56]	; (8009a38 <sbrk_aligned+0x3c>)
 8009a00:	460c      	mov	r4, r1
 8009a02:	6831      	ldr	r1, [r6, #0]
 8009a04:	4605      	mov	r5, r0
 8009a06:	b911      	cbnz	r1, 8009a0e <sbrk_aligned+0x12>
 8009a08:	f000 f9f2 	bl	8009df0 <_sbrk_r>
 8009a0c:	6030      	str	r0, [r6, #0]
 8009a0e:	4621      	mov	r1, r4
 8009a10:	4628      	mov	r0, r5
 8009a12:	f000 f9ed 	bl	8009df0 <_sbrk_r>
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	d00a      	beq.n	8009a30 <sbrk_aligned+0x34>
 8009a1a:	1cc4      	adds	r4, r0, #3
 8009a1c:	f024 0403 	bic.w	r4, r4, #3
 8009a20:	42a0      	cmp	r0, r4
 8009a22:	d007      	beq.n	8009a34 <sbrk_aligned+0x38>
 8009a24:	1a21      	subs	r1, r4, r0
 8009a26:	4628      	mov	r0, r5
 8009a28:	f000 f9e2 	bl	8009df0 <_sbrk_r>
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	d101      	bne.n	8009a34 <sbrk_aligned+0x38>
 8009a30:	f04f 34ff 	mov.w	r4, #4294967295
 8009a34:	4620      	mov	r0, r4
 8009a36:	bd70      	pop	{r4, r5, r6, pc}
 8009a38:	20000830 	.word	0x20000830

08009a3c <_malloc_r>:
 8009a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a40:	1ccd      	adds	r5, r1, #3
 8009a42:	f025 0503 	bic.w	r5, r5, #3
 8009a46:	3508      	adds	r5, #8
 8009a48:	2d0c      	cmp	r5, #12
 8009a4a:	bf38      	it	cc
 8009a4c:	250c      	movcc	r5, #12
 8009a4e:	2d00      	cmp	r5, #0
 8009a50:	4607      	mov	r7, r0
 8009a52:	db01      	blt.n	8009a58 <_malloc_r+0x1c>
 8009a54:	42a9      	cmp	r1, r5
 8009a56:	d905      	bls.n	8009a64 <_malloc_r+0x28>
 8009a58:	230c      	movs	r3, #12
 8009a5a:	603b      	str	r3, [r7, #0]
 8009a5c:	2600      	movs	r6, #0
 8009a5e:	4630      	mov	r0, r6
 8009a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a64:	4e2e      	ldr	r6, [pc, #184]	; (8009b20 <_malloc_r+0xe4>)
 8009a66:	f000 fa3f 	bl	8009ee8 <__malloc_lock>
 8009a6a:	6833      	ldr	r3, [r6, #0]
 8009a6c:	461c      	mov	r4, r3
 8009a6e:	bb34      	cbnz	r4, 8009abe <_malloc_r+0x82>
 8009a70:	4629      	mov	r1, r5
 8009a72:	4638      	mov	r0, r7
 8009a74:	f7ff ffc2 	bl	80099fc <sbrk_aligned>
 8009a78:	1c43      	adds	r3, r0, #1
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	d14d      	bne.n	8009b1a <_malloc_r+0xde>
 8009a7e:	6834      	ldr	r4, [r6, #0]
 8009a80:	4626      	mov	r6, r4
 8009a82:	2e00      	cmp	r6, #0
 8009a84:	d140      	bne.n	8009b08 <_malloc_r+0xcc>
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	4631      	mov	r1, r6
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	eb04 0803 	add.w	r8, r4, r3
 8009a90:	f000 f9ae 	bl	8009df0 <_sbrk_r>
 8009a94:	4580      	cmp	r8, r0
 8009a96:	d13a      	bne.n	8009b0e <_malloc_r+0xd2>
 8009a98:	6821      	ldr	r1, [r4, #0]
 8009a9a:	3503      	adds	r5, #3
 8009a9c:	1a6d      	subs	r5, r5, r1
 8009a9e:	f025 0503 	bic.w	r5, r5, #3
 8009aa2:	3508      	adds	r5, #8
 8009aa4:	2d0c      	cmp	r5, #12
 8009aa6:	bf38      	it	cc
 8009aa8:	250c      	movcc	r5, #12
 8009aaa:	4629      	mov	r1, r5
 8009aac:	4638      	mov	r0, r7
 8009aae:	f7ff ffa5 	bl	80099fc <sbrk_aligned>
 8009ab2:	3001      	adds	r0, #1
 8009ab4:	d02b      	beq.n	8009b0e <_malloc_r+0xd2>
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	442b      	add	r3, r5
 8009aba:	6023      	str	r3, [r4, #0]
 8009abc:	e00e      	b.n	8009adc <_malloc_r+0xa0>
 8009abe:	6822      	ldr	r2, [r4, #0]
 8009ac0:	1b52      	subs	r2, r2, r5
 8009ac2:	d41e      	bmi.n	8009b02 <_malloc_r+0xc6>
 8009ac4:	2a0b      	cmp	r2, #11
 8009ac6:	d916      	bls.n	8009af6 <_malloc_r+0xba>
 8009ac8:	1961      	adds	r1, r4, r5
 8009aca:	42a3      	cmp	r3, r4
 8009acc:	6025      	str	r5, [r4, #0]
 8009ace:	bf18      	it	ne
 8009ad0:	6059      	strne	r1, [r3, #4]
 8009ad2:	6863      	ldr	r3, [r4, #4]
 8009ad4:	bf08      	it	eq
 8009ad6:	6031      	streq	r1, [r6, #0]
 8009ad8:	5162      	str	r2, [r4, r5]
 8009ada:	604b      	str	r3, [r1, #4]
 8009adc:	4638      	mov	r0, r7
 8009ade:	f104 060b 	add.w	r6, r4, #11
 8009ae2:	f000 fa07 	bl	8009ef4 <__malloc_unlock>
 8009ae6:	f026 0607 	bic.w	r6, r6, #7
 8009aea:	1d23      	adds	r3, r4, #4
 8009aec:	1af2      	subs	r2, r6, r3
 8009aee:	d0b6      	beq.n	8009a5e <_malloc_r+0x22>
 8009af0:	1b9b      	subs	r3, r3, r6
 8009af2:	50a3      	str	r3, [r4, r2]
 8009af4:	e7b3      	b.n	8009a5e <_malloc_r+0x22>
 8009af6:	6862      	ldr	r2, [r4, #4]
 8009af8:	42a3      	cmp	r3, r4
 8009afa:	bf0c      	ite	eq
 8009afc:	6032      	streq	r2, [r6, #0]
 8009afe:	605a      	strne	r2, [r3, #4]
 8009b00:	e7ec      	b.n	8009adc <_malloc_r+0xa0>
 8009b02:	4623      	mov	r3, r4
 8009b04:	6864      	ldr	r4, [r4, #4]
 8009b06:	e7b2      	b.n	8009a6e <_malloc_r+0x32>
 8009b08:	4634      	mov	r4, r6
 8009b0a:	6876      	ldr	r6, [r6, #4]
 8009b0c:	e7b9      	b.n	8009a82 <_malloc_r+0x46>
 8009b0e:	230c      	movs	r3, #12
 8009b10:	603b      	str	r3, [r7, #0]
 8009b12:	4638      	mov	r0, r7
 8009b14:	f000 f9ee 	bl	8009ef4 <__malloc_unlock>
 8009b18:	e7a1      	b.n	8009a5e <_malloc_r+0x22>
 8009b1a:	6025      	str	r5, [r4, #0]
 8009b1c:	e7de      	b.n	8009adc <_malloc_r+0xa0>
 8009b1e:	bf00      	nop
 8009b20:	2000082c 	.word	0x2000082c

08009b24 <__ssputs_r>:
 8009b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b28:	688e      	ldr	r6, [r1, #8]
 8009b2a:	429e      	cmp	r6, r3
 8009b2c:	4682      	mov	sl, r0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	4690      	mov	r8, r2
 8009b32:	461f      	mov	r7, r3
 8009b34:	d838      	bhi.n	8009ba8 <__ssputs_r+0x84>
 8009b36:	898a      	ldrh	r2, [r1, #12]
 8009b38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b3c:	d032      	beq.n	8009ba4 <__ssputs_r+0x80>
 8009b3e:	6825      	ldr	r5, [r4, #0]
 8009b40:	6909      	ldr	r1, [r1, #16]
 8009b42:	eba5 0901 	sub.w	r9, r5, r1
 8009b46:	6965      	ldr	r5, [r4, #20]
 8009b48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b50:	3301      	adds	r3, #1
 8009b52:	444b      	add	r3, r9
 8009b54:	106d      	asrs	r5, r5, #1
 8009b56:	429d      	cmp	r5, r3
 8009b58:	bf38      	it	cc
 8009b5a:	461d      	movcc	r5, r3
 8009b5c:	0553      	lsls	r3, r2, #21
 8009b5e:	d531      	bpl.n	8009bc4 <__ssputs_r+0xa0>
 8009b60:	4629      	mov	r1, r5
 8009b62:	f7ff ff6b 	bl	8009a3c <_malloc_r>
 8009b66:	4606      	mov	r6, r0
 8009b68:	b950      	cbnz	r0, 8009b80 <__ssputs_r+0x5c>
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	f8ca 3000 	str.w	r3, [sl]
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b76:	81a3      	strh	r3, [r4, #12]
 8009b78:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b80:	6921      	ldr	r1, [r4, #16]
 8009b82:	464a      	mov	r2, r9
 8009b84:	f7ff fa08 	bl	8008f98 <memcpy>
 8009b88:	89a3      	ldrh	r3, [r4, #12]
 8009b8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b92:	81a3      	strh	r3, [r4, #12]
 8009b94:	6126      	str	r6, [r4, #16]
 8009b96:	6165      	str	r5, [r4, #20]
 8009b98:	444e      	add	r6, r9
 8009b9a:	eba5 0509 	sub.w	r5, r5, r9
 8009b9e:	6026      	str	r6, [r4, #0]
 8009ba0:	60a5      	str	r5, [r4, #8]
 8009ba2:	463e      	mov	r6, r7
 8009ba4:	42be      	cmp	r6, r7
 8009ba6:	d900      	bls.n	8009baa <__ssputs_r+0x86>
 8009ba8:	463e      	mov	r6, r7
 8009baa:	6820      	ldr	r0, [r4, #0]
 8009bac:	4632      	mov	r2, r6
 8009bae:	4641      	mov	r1, r8
 8009bb0:	f000 f980 	bl	8009eb4 <memmove>
 8009bb4:	68a3      	ldr	r3, [r4, #8]
 8009bb6:	1b9b      	subs	r3, r3, r6
 8009bb8:	60a3      	str	r3, [r4, #8]
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	4433      	add	r3, r6
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	e7db      	b.n	8009b7c <__ssputs_r+0x58>
 8009bc4:	462a      	mov	r2, r5
 8009bc6:	f000 f99b 	bl	8009f00 <_realloc_r>
 8009bca:	4606      	mov	r6, r0
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d1e1      	bne.n	8009b94 <__ssputs_r+0x70>
 8009bd0:	6921      	ldr	r1, [r4, #16]
 8009bd2:	4650      	mov	r0, sl
 8009bd4:	f7ff fec6 	bl	8009964 <_free_r>
 8009bd8:	e7c7      	b.n	8009b6a <__ssputs_r+0x46>
	...

08009bdc <_svfiprintf_r>:
 8009bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	4698      	mov	r8, r3
 8009be2:	898b      	ldrh	r3, [r1, #12]
 8009be4:	061b      	lsls	r3, r3, #24
 8009be6:	b09d      	sub	sp, #116	; 0x74
 8009be8:	4607      	mov	r7, r0
 8009bea:	460d      	mov	r5, r1
 8009bec:	4614      	mov	r4, r2
 8009bee:	d50e      	bpl.n	8009c0e <_svfiprintf_r+0x32>
 8009bf0:	690b      	ldr	r3, [r1, #16]
 8009bf2:	b963      	cbnz	r3, 8009c0e <_svfiprintf_r+0x32>
 8009bf4:	2140      	movs	r1, #64	; 0x40
 8009bf6:	f7ff ff21 	bl	8009a3c <_malloc_r>
 8009bfa:	6028      	str	r0, [r5, #0]
 8009bfc:	6128      	str	r0, [r5, #16]
 8009bfe:	b920      	cbnz	r0, 8009c0a <_svfiprintf_r+0x2e>
 8009c00:	230c      	movs	r3, #12
 8009c02:	603b      	str	r3, [r7, #0]
 8009c04:	f04f 30ff 	mov.w	r0, #4294967295
 8009c08:	e0d1      	b.n	8009dae <_svfiprintf_r+0x1d2>
 8009c0a:	2340      	movs	r3, #64	; 0x40
 8009c0c:	616b      	str	r3, [r5, #20]
 8009c0e:	2300      	movs	r3, #0
 8009c10:	9309      	str	r3, [sp, #36]	; 0x24
 8009c12:	2320      	movs	r3, #32
 8009c14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c18:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c1c:	2330      	movs	r3, #48	; 0x30
 8009c1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009dc8 <_svfiprintf_r+0x1ec>
 8009c22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c26:	f04f 0901 	mov.w	r9, #1
 8009c2a:	4623      	mov	r3, r4
 8009c2c:	469a      	mov	sl, r3
 8009c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c32:	b10a      	cbz	r2, 8009c38 <_svfiprintf_r+0x5c>
 8009c34:	2a25      	cmp	r2, #37	; 0x25
 8009c36:	d1f9      	bne.n	8009c2c <_svfiprintf_r+0x50>
 8009c38:	ebba 0b04 	subs.w	fp, sl, r4
 8009c3c:	d00b      	beq.n	8009c56 <_svfiprintf_r+0x7a>
 8009c3e:	465b      	mov	r3, fp
 8009c40:	4622      	mov	r2, r4
 8009c42:	4629      	mov	r1, r5
 8009c44:	4638      	mov	r0, r7
 8009c46:	f7ff ff6d 	bl	8009b24 <__ssputs_r>
 8009c4a:	3001      	adds	r0, #1
 8009c4c:	f000 80aa 	beq.w	8009da4 <_svfiprintf_r+0x1c8>
 8009c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c52:	445a      	add	r2, fp
 8009c54:	9209      	str	r2, [sp, #36]	; 0x24
 8009c56:	f89a 3000 	ldrb.w	r3, [sl]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f000 80a2 	beq.w	8009da4 <_svfiprintf_r+0x1c8>
 8009c60:	2300      	movs	r3, #0
 8009c62:	f04f 32ff 	mov.w	r2, #4294967295
 8009c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c6a:	f10a 0a01 	add.w	sl, sl, #1
 8009c6e:	9304      	str	r3, [sp, #16]
 8009c70:	9307      	str	r3, [sp, #28]
 8009c72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c76:	931a      	str	r3, [sp, #104]	; 0x68
 8009c78:	4654      	mov	r4, sl
 8009c7a:	2205      	movs	r2, #5
 8009c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c80:	4851      	ldr	r0, [pc, #324]	; (8009dc8 <_svfiprintf_r+0x1ec>)
 8009c82:	f7f6 fad5 	bl	8000230 <memchr>
 8009c86:	9a04      	ldr	r2, [sp, #16]
 8009c88:	b9d8      	cbnz	r0, 8009cc2 <_svfiprintf_r+0xe6>
 8009c8a:	06d0      	lsls	r0, r2, #27
 8009c8c:	bf44      	itt	mi
 8009c8e:	2320      	movmi	r3, #32
 8009c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c94:	0711      	lsls	r1, r2, #28
 8009c96:	bf44      	itt	mi
 8009c98:	232b      	movmi	r3, #43	; 0x2b
 8009c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ca4:	d015      	beq.n	8009cd2 <_svfiprintf_r+0xf6>
 8009ca6:	9a07      	ldr	r2, [sp, #28]
 8009ca8:	4654      	mov	r4, sl
 8009caa:	2000      	movs	r0, #0
 8009cac:	f04f 0c0a 	mov.w	ip, #10
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cb6:	3b30      	subs	r3, #48	; 0x30
 8009cb8:	2b09      	cmp	r3, #9
 8009cba:	d94e      	bls.n	8009d5a <_svfiprintf_r+0x17e>
 8009cbc:	b1b0      	cbz	r0, 8009cec <_svfiprintf_r+0x110>
 8009cbe:	9207      	str	r2, [sp, #28]
 8009cc0:	e014      	b.n	8009cec <_svfiprintf_r+0x110>
 8009cc2:	eba0 0308 	sub.w	r3, r0, r8
 8009cc6:	fa09 f303 	lsl.w	r3, r9, r3
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	9304      	str	r3, [sp, #16]
 8009cce:	46a2      	mov	sl, r4
 8009cd0:	e7d2      	b.n	8009c78 <_svfiprintf_r+0x9c>
 8009cd2:	9b03      	ldr	r3, [sp, #12]
 8009cd4:	1d19      	adds	r1, r3, #4
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	9103      	str	r1, [sp, #12]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	bfbb      	ittet	lt
 8009cde:	425b      	neglt	r3, r3
 8009ce0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ce4:	9307      	strge	r3, [sp, #28]
 8009ce6:	9307      	strlt	r3, [sp, #28]
 8009ce8:	bfb8      	it	lt
 8009cea:	9204      	strlt	r2, [sp, #16]
 8009cec:	7823      	ldrb	r3, [r4, #0]
 8009cee:	2b2e      	cmp	r3, #46	; 0x2e
 8009cf0:	d10c      	bne.n	8009d0c <_svfiprintf_r+0x130>
 8009cf2:	7863      	ldrb	r3, [r4, #1]
 8009cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8009cf6:	d135      	bne.n	8009d64 <_svfiprintf_r+0x188>
 8009cf8:	9b03      	ldr	r3, [sp, #12]
 8009cfa:	1d1a      	adds	r2, r3, #4
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	9203      	str	r2, [sp, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	bfb8      	it	lt
 8009d04:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d08:	3402      	adds	r4, #2
 8009d0a:	9305      	str	r3, [sp, #20]
 8009d0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009dd8 <_svfiprintf_r+0x1fc>
 8009d10:	7821      	ldrb	r1, [r4, #0]
 8009d12:	2203      	movs	r2, #3
 8009d14:	4650      	mov	r0, sl
 8009d16:	f7f6 fa8b 	bl	8000230 <memchr>
 8009d1a:	b140      	cbz	r0, 8009d2e <_svfiprintf_r+0x152>
 8009d1c:	2340      	movs	r3, #64	; 0x40
 8009d1e:	eba0 000a 	sub.w	r0, r0, sl
 8009d22:	fa03 f000 	lsl.w	r0, r3, r0
 8009d26:	9b04      	ldr	r3, [sp, #16]
 8009d28:	4303      	orrs	r3, r0
 8009d2a:	3401      	adds	r4, #1
 8009d2c:	9304      	str	r3, [sp, #16]
 8009d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d32:	4826      	ldr	r0, [pc, #152]	; (8009dcc <_svfiprintf_r+0x1f0>)
 8009d34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d38:	2206      	movs	r2, #6
 8009d3a:	f7f6 fa79 	bl	8000230 <memchr>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d038      	beq.n	8009db4 <_svfiprintf_r+0x1d8>
 8009d42:	4b23      	ldr	r3, [pc, #140]	; (8009dd0 <_svfiprintf_r+0x1f4>)
 8009d44:	bb1b      	cbnz	r3, 8009d8e <_svfiprintf_r+0x1b2>
 8009d46:	9b03      	ldr	r3, [sp, #12]
 8009d48:	3307      	adds	r3, #7
 8009d4a:	f023 0307 	bic.w	r3, r3, #7
 8009d4e:	3308      	adds	r3, #8
 8009d50:	9303      	str	r3, [sp, #12]
 8009d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d54:	4433      	add	r3, r6
 8009d56:	9309      	str	r3, [sp, #36]	; 0x24
 8009d58:	e767      	b.n	8009c2a <_svfiprintf_r+0x4e>
 8009d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d5e:	460c      	mov	r4, r1
 8009d60:	2001      	movs	r0, #1
 8009d62:	e7a5      	b.n	8009cb0 <_svfiprintf_r+0xd4>
 8009d64:	2300      	movs	r3, #0
 8009d66:	3401      	adds	r4, #1
 8009d68:	9305      	str	r3, [sp, #20]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	f04f 0c0a 	mov.w	ip, #10
 8009d70:	4620      	mov	r0, r4
 8009d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d76:	3a30      	subs	r2, #48	; 0x30
 8009d78:	2a09      	cmp	r2, #9
 8009d7a:	d903      	bls.n	8009d84 <_svfiprintf_r+0x1a8>
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d0c5      	beq.n	8009d0c <_svfiprintf_r+0x130>
 8009d80:	9105      	str	r1, [sp, #20]
 8009d82:	e7c3      	b.n	8009d0c <_svfiprintf_r+0x130>
 8009d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d88:	4604      	mov	r4, r0
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e7f0      	b.n	8009d70 <_svfiprintf_r+0x194>
 8009d8e:	ab03      	add	r3, sp, #12
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	462a      	mov	r2, r5
 8009d94:	4b0f      	ldr	r3, [pc, #60]	; (8009dd4 <_svfiprintf_r+0x1f8>)
 8009d96:	a904      	add	r1, sp, #16
 8009d98:	4638      	mov	r0, r7
 8009d9a:	f7fc fa49 	bl	8006230 <_printf_float>
 8009d9e:	1c42      	adds	r2, r0, #1
 8009da0:	4606      	mov	r6, r0
 8009da2:	d1d6      	bne.n	8009d52 <_svfiprintf_r+0x176>
 8009da4:	89ab      	ldrh	r3, [r5, #12]
 8009da6:	065b      	lsls	r3, r3, #25
 8009da8:	f53f af2c 	bmi.w	8009c04 <_svfiprintf_r+0x28>
 8009dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dae:	b01d      	add	sp, #116	; 0x74
 8009db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db4:	ab03      	add	r3, sp, #12
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	462a      	mov	r2, r5
 8009dba:	4b06      	ldr	r3, [pc, #24]	; (8009dd4 <_svfiprintf_r+0x1f8>)
 8009dbc:	a904      	add	r1, sp, #16
 8009dbe:	4638      	mov	r0, r7
 8009dc0:	f7fc fcda 	bl	8006778 <_printf_i>
 8009dc4:	e7eb      	b.n	8009d9e <_svfiprintf_r+0x1c2>
 8009dc6:	bf00      	nop
 8009dc8:	0800c304 	.word	0x0800c304
 8009dcc:	0800c30e 	.word	0x0800c30e
 8009dd0:	08006231 	.word	0x08006231
 8009dd4:	08009b25 	.word	0x08009b25
 8009dd8:	0800c30a 	.word	0x0800c30a
 8009ddc:	00000000 	.word	0x00000000

08009de0 <nan>:
 8009de0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009de8 <nan+0x8>
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	00000000 	.word	0x00000000
 8009dec:	7ff80000 	.word	0x7ff80000

08009df0 <_sbrk_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4d06      	ldr	r5, [pc, #24]	; (8009e0c <_sbrk_r+0x1c>)
 8009df4:	2300      	movs	r3, #0
 8009df6:	4604      	mov	r4, r0
 8009df8:	4608      	mov	r0, r1
 8009dfa:	602b      	str	r3, [r5, #0]
 8009dfc:	f7f8 f830 	bl	8001e60 <_sbrk>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d102      	bne.n	8009e0a <_sbrk_r+0x1a>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	b103      	cbz	r3, 8009e0a <_sbrk_r+0x1a>
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
 8009e0c:	20000834 	.word	0x20000834

08009e10 <strncmp>:
 8009e10:	b510      	push	{r4, lr}
 8009e12:	b17a      	cbz	r2, 8009e34 <strncmp+0x24>
 8009e14:	4603      	mov	r3, r0
 8009e16:	3901      	subs	r1, #1
 8009e18:	1884      	adds	r4, r0, r2
 8009e1a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009e1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e22:	4290      	cmp	r0, r2
 8009e24:	d101      	bne.n	8009e2a <strncmp+0x1a>
 8009e26:	42a3      	cmp	r3, r4
 8009e28:	d101      	bne.n	8009e2e <strncmp+0x1e>
 8009e2a:	1a80      	subs	r0, r0, r2
 8009e2c:	bd10      	pop	{r4, pc}
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d1f3      	bne.n	8009e1a <strncmp+0xa>
 8009e32:	e7fa      	b.n	8009e2a <strncmp+0x1a>
 8009e34:	4610      	mov	r0, r2
 8009e36:	e7f9      	b.n	8009e2c <strncmp+0x1c>

08009e38 <__ascii_wctomb>:
 8009e38:	b149      	cbz	r1, 8009e4e <__ascii_wctomb+0x16>
 8009e3a:	2aff      	cmp	r2, #255	; 0xff
 8009e3c:	bf85      	ittet	hi
 8009e3e:	238a      	movhi	r3, #138	; 0x8a
 8009e40:	6003      	strhi	r3, [r0, #0]
 8009e42:	700a      	strbls	r2, [r1, #0]
 8009e44:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e48:	bf98      	it	ls
 8009e4a:	2001      	movls	r0, #1
 8009e4c:	4770      	bx	lr
 8009e4e:	4608      	mov	r0, r1
 8009e50:	4770      	bx	lr
	...

08009e54 <__assert_func>:
 8009e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e56:	4614      	mov	r4, r2
 8009e58:	461a      	mov	r2, r3
 8009e5a:	4b09      	ldr	r3, [pc, #36]	; (8009e80 <__assert_func+0x2c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4605      	mov	r5, r0
 8009e60:	68d8      	ldr	r0, [r3, #12]
 8009e62:	b14c      	cbz	r4, 8009e78 <__assert_func+0x24>
 8009e64:	4b07      	ldr	r3, [pc, #28]	; (8009e84 <__assert_func+0x30>)
 8009e66:	9100      	str	r1, [sp, #0]
 8009e68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e6c:	4906      	ldr	r1, [pc, #24]	; (8009e88 <__assert_func+0x34>)
 8009e6e:	462b      	mov	r3, r5
 8009e70:	f000 f80e 	bl	8009e90 <fiprintf>
 8009e74:	f000 fa8c 	bl	800a390 <abort>
 8009e78:	4b04      	ldr	r3, [pc, #16]	; (8009e8c <__assert_func+0x38>)
 8009e7a:	461c      	mov	r4, r3
 8009e7c:	e7f3      	b.n	8009e66 <__assert_func+0x12>
 8009e7e:	bf00      	nop
 8009e80:	2000001c 	.word	0x2000001c
 8009e84:	0800c315 	.word	0x0800c315
 8009e88:	0800c322 	.word	0x0800c322
 8009e8c:	0800c350 	.word	0x0800c350

08009e90 <fiprintf>:
 8009e90:	b40e      	push	{r1, r2, r3}
 8009e92:	b503      	push	{r0, r1, lr}
 8009e94:	4601      	mov	r1, r0
 8009e96:	ab03      	add	r3, sp, #12
 8009e98:	4805      	ldr	r0, [pc, #20]	; (8009eb0 <fiprintf+0x20>)
 8009e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e9e:	6800      	ldr	r0, [r0, #0]
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	f000 f885 	bl	8009fb0 <_vfiprintf_r>
 8009ea6:	b002      	add	sp, #8
 8009ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eac:	b003      	add	sp, #12
 8009eae:	4770      	bx	lr
 8009eb0:	2000001c 	.word	0x2000001c

08009eb4 <memmove>:
 8009eb4:	4288      	cmp	r0, r1
 8009eb6:	b510      	push	{r4, lr}
 8009eb8:	eb01 0402 	add.w	r4, r1, r2
 8009ebc:	d902      	bls.n	8009ec4 <memmove+0x10>
 8009ebe:	4284      	cmp	r4, r0
 8009ec0:	4623      	mov	r3, r4
 8009ec2:	d807      	bhi.n	8009ed4 <memmove+0x20>
 8009ec4:	1e43      	subs	r3, r0, #1
 8009ec6:	42a1      	cmp	r1, r4
 8009ec8:	d008      	beq.n	8009edc <memmove+0x28>
 8009eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ece:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ed2:	e7f8      	b.n	8009ec6 <memmove+0x12>
 8009ed4:	4402      	add	r2, r0
 8009ed6:	4601      	mov	r1, r0
 8009ed8:	428a      	cmp	r2, r1
 8009eda:	d100      	bne.n	8009ede <memmove+0x2a>
 8009edc:	bd10      	pop	{r4, pc}
 8009ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ee6:	e7f7      	b.n	8009ed8 <memmove+0x24>

08009ee8 <__malloc_lock>:
 8009ee8:	4801      	ldr	r0, [pc, #4]	; (8009ef0 <__malloc_lock+0x8>)
 8009eea:	f000 bc11 	b.w	800a710 <__retarget_lock_acquire_recursive>
 8009eee:	bf00      	nop
 8009ef0:	20000838 	.word	0x20000838

08009ef4 <__malloc_unlock>:
 8009ef4:	4801      	ldr	r0, [pc, #4]	; (8009efc <__malloc_unlock+0x8>)
 8009ef6:	f000 bc0c 	b.w	800a712 <__retarget_lock_release_recursive>
 8009efa:	bf00      	nop
 8009efc:	20000838 	.word	0x20000838

08009f00 <_realloc_r>:
 8009f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f04:	4680      	mov	r8, r0
 8009f06:	4614      	mov	r4, r2
 8009f08:	460e      	mov	r6, r1
 8009f0a:	b921      	cbnz	r1, 8009f16 <_realloc_r+0x16>
 8009f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f10:	4611      	mov	r1, r2
 8009f12:	f7ff bd93 	b.w	8009a3c <_malloc_r>
 8009f16:	b92a      	cbnz	r2, 8009f24 <_realloc_r+0x24>
 8009f18:	f7ff fd24 	bl	8009964 <_free_r>
 8009f1c:	4625      	mov	r5, r4
 8009f1e:	4628      	mov	r0, r5
 8009f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f24:	f000 fc5c 	bl	800a7e0 <_malloc_usable_size_r>
 8009f28:	4284      	cmp	r4, r0
 8009f2a:	4607      	mov	r7, r0
 8009f2c:	d802      	bhi.n	8009f34 <_realloc_r+0x34>
 8009f2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f32:	d812      	bhi.n	8009f5a <_realloc_r+0x5a>
 8009f34:	4621      	mov	r1, r4
 8009f36:	4640      	mov	r0, r8
 8009f38:	f7ff fd80 	bl	8009a3c <_malloc_r>
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d0ed      	beq.n	8009f1e <_realloc_r+0x1e>
 8009f42:	42bc      	cmp	r4, r7
 8009f44:	4622      	mov	r2, r4
 8009f46:	4631      	mov	r1, r6
 8009f48:	bf28      	it	cs
 8009f4a:	463a      	movcs	r2, r7
 8009f4c:	f7ff f824 	bl	8008f98 <memcpy>
 8009f50:	4631      	mov	r1, r6
 8009f52:	4640      	mov	r0, r8
 8009f54:	f7ff fd06 	bl	8009964 <_free_r>
 8009f58:	e7e1      	b.n	8009f1e <_realloc_r+0x1e>
 8009f5a:	4635      	mov	r5, r6
 8009f5c:	e7df      	b.n	8009f1e <_realloc_r+0x1e>

08009f5e <__sfputc_r>:
 8009f5e:	6893      	ldr	r3, [r2, #8]
 8009f60:	3b01      	subs	r3, #1
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	b410      	push	{r4}
 8009f66:	6093      	str	r3, [r2, #8]
 8009f68:	da08      	bge.n	8009f7c <__sfputc_r+0x1e>
 8009f6a:	6994      	ldr	r4, [r2, #24]
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	db01      	blt.n	8009f74 <__sfputc_r+0x16>
 8009f70:	290a      	cmp	r1, #10
 8009f72:	d103      	bne.n	8009f7c <__sfputc_r+0x1e>
 8009f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f78:	f000 b94a 	b.w	800a210 <__swbuf_r>
 8009f7c:	6813      	ldr	r3, [r2, #0]
 8009f7e:	1c58      	adds	r0, r3, #1
 8009f80:	6010      	str	r0, [r2, #0]
 8009f82:	7019      	strb	r1, [r3, #0]
 8009f84:	4608      	mov	r0, r1
 8009f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <__sfputs_r>:
 8009f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f8e:	4606      	mov	r6, r0
 8009f90:	460f      	mov	r7, r1
 8009f92:	4614      	mov	r4, r2
 8009f94:	18d5      	adds	r5, r2, r3
 8009f96:	42ac      	cmp	r4, r5
 8009f98:	d101      	bne.n	8009f9e <__sfputs_r+0x12>
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	e007      	b.n	8009fae <__sfputs_r+0x22>
 8009f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa2:	463a      	mov	r2, r7
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f7ff ffda 	bl	8009f5e <__sfputc_r>
 8009faa:	1c43      	adds	r3, r0, #1
 8009fac:	d1f3      	bne.n	8009f96 <__sfputs_r+0xa>
 8009fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fb0 <_vfiprintf_r>:
 8009fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	460d      	mov	r5, r1
 8009fb6:	b09d      	sub	sp, #116	; 0x74
 8009fb8:	4614      	mov	r4, r2
 8009fba:	4698      	mov	r8, r3
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	b118      	cbz	r0, 8009fc8 <_vfiprintf_r+0x18>
 8009fc0:	6983      	ldr	r3, [r0, #24]
 8009fc2:	b90b      	cbnz	r3, 8009fc8 <_vfiprintf_r+0x18>
 8009fc4:	f000 fb06 	bl	800a5d4 <__sinit>
 8009fc8:	4b89      	ldr	r3, [pc, #548]	; (800a1f0 <_vfiprintf_r+0x240>)
 8009fca:	429d      	cmp	r5, r3
 8009fcc:	d11b      	bne.n	800a006 <_vfiprintf_r+0x56>
 8009fce:	6875      	ldr	r5, [r6, #4]
 8009fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fd2:	07d9      	lsls	r1, r3, #31
 8009fd4:	d405      	bmi.n	8009fe2 <_vfiprintf_r+0x32>
 8009fd6:	89ab      	ldrh	r3, [r5, #12]
 8009fd8:	059a      	lsls	r2, r3, #22
 8009fda:	d402      	bmi.n	8009fe2 <_vfiprintf_r+0x32>
 8009fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fde:	f000 fb97 	bl	800a710 <__retarget_lock_acquire_recursive>
 8009fe2:	89ab      	ldrh	r3, [r5, #12]
 8009fe4:	071b      	lsls	r3, r3, #28
 8009fe6:	d501      	bpl.n	8009fec <_vfiprintf_r+0x3c>
 8009fe8:	692b      	ldr	r3, [r5, #16]
 8009fea:	b9eb      	cbnz	r3, 800a028 <_vfiprintf_r+0x78>
 8009fec:	4629      	mov	r1, r5
 8009fee:	4630      	mov	r0, r6
 8009ff0:	f000 f960 	bl	800a2b4 <__swsetup_r>
 8009ff4:	b1c0      	cbz	r0, 800a028 <_vfiprintf_r+0x78>
 8009ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ff8:	07dc      	lsls	r4, r3, #31
 8009ffa:	d50e      	bpl.n	800a01a <_vfiprintf_r+0x6a>
 8009ffc:	f04f 30ff 	mov.w	r0, #4294967295
 800a000:	b01d      	add	sp, #116	; 0x74
 800a002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a006:	4b7b      	ldr	r3, [pc, #492]	; (800a1f4 <_vfiprintf_r+0x244>)
 800a008:	429d      	cmp	r5, r3
 800a00a:	d101      	bne.n	800a010 <_vfiprintf_r+0x60>
 800a00c:	68b5      	ldr	r5, [r6, #8]
 800a00e:	e7df      	b.n	8009fd0 <_vfiprintf_r+0x20>
 800a010:	4b79      	ldr	r3, [pc, #484]	; (800a1f8 <_vfiprintf_r+0x248>)
 800a012:	429d      	cmp	r5, r3
 800a014:	bf08      	it	eq
 800a016:	68f5      	ldreq	r5, [r6, #12]
 800a018:	e7da      	b.n	8009fd0 <_vfiprintf_r+0x20>
 800a01a:	89ab      	ldrh	r3, [r5, #12]
 800a01c:	0598      	lsls	r0, r3, #22
 800a01e:	d4ed      	bmi.n	8009ffc <_vfiprintf_r+0x4c>
 800a020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a022:	f000 fb76 	bl	800a712 <__retarget_lock_release_recursive>
 800a026:	e7e9      	b.n	8009ffc <_vfiprintf_r+0x4c>
 800a028:	2300      	movs	r3, #0
 800a02a:	9309      	str	r3, [sp, #36]	; 0x24
 800a02c:	2320      	movs	r3, #32
 800a02e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a032:	f8cd 800c 	str.w	r8, [sp, #12]
 800a036:	2330      	movs	r3, #48	; 0x30
 800a038:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a1fc <_vfiprintf_r+0x24c>
 800a03c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a040:	f04f 0901 	mov.w	r9, #1
 800a044:	4623      	mov	r3, r4
 800a046:	469a      	mov	sl, r3
 800a048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a04c:	b10a      	cbz	r2, 800a052 <_vfiprintf_r+0xa2>
 800a04e:	2a25      	cmp	r2, #37	; 0x25
 800a050:	d1f9      	bne.n	800a046 <_vfiprintf_r+0x96>
 800a052:	ebba 0b04 	subs.w	fp, sl, r4
 800a056:	d00b      	beq.n	800a070 <_vfiprintf_r+0xc0>
 800a058:	465b      	mov	r3, fp
 800a05a:	4622      	mov	r2, r4
 800a05c:	4629      	mov	r1, r5
 800a05e:	4630      	mov	r0, r6
 800a060:	f7ff ff94 	bl	8009f8c <__sfputs_r>
 800a064:	3001      	adds	r0, #1
 800a066:	f000 80aa 	beq.w	800a1be <_vfiprintf_r+0x20e>
 800a06a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a06c:	445a      	add	r2, fp
 800a06e:	9209      	str	r2, [sp, #36]	; 0x24
 800a070:	f89a 3000 	ldrb.w	r3, [sl]
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 80a2 	beq.w	800a1be <_vfiprintf_r+0x20e>
 800a07a:	2300      	movs	r3, #0
 800a07c:	f04f 32ff 	mov.w	r2, #4294967295
 800a080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a084:	f10a 0a01 	add.w	sl, sl, #1
 800a088:	9304      	str	r3, [sp, #16]
 800a08a:	9307      	str	r3, [sp, #28]
 800a08c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a090:	931a      	str	r3, [sp, #104]	; 0x68
 800a092:	4654      	mov	r4, sl
 800a094:	2205      	movs	r2, #5
 800a096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a09a:	4858      	ldr	r0, [pc, #352]	; (800a1fc <_vfiprintf_r+0x24c>)
 800a09c:	f7f6 f8c8 	bl	8000230 <memchr>
 800a0a0:	9a04      	ldr	r2, [sp, #16]
 800a0a2:	b9d8      	cbnz	r0, 800a0dc <_vfiprintf_r+0x12c>
 800a0a4:	06d1      	lsls	r1, r2, #27
 800a0a6:	bf44      	itt	mi
 800a0a8:	2320      	movmi	r3, #32
 800a0aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ae:	0713      	lsls	r3, r2, #28
 800a0b0:	bf44      	itt	mi
 800a0b2:	232b      	movmi	r3, #43	; 0x2b
 800a0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a0be:	d015      	beq.n	800a0ec <_vfiprintf_r+0x13c>
 800a0c0:	9a07      	ldr	r2, [sp, #28]
 800a0c2:	4654      	mov	r4, sl
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	f04f 0c0a 	mov.w	ip, #10
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0d0:	3b30      	subs	r3, #48	; 0x30
 800a0d2:	2b09      	cmp	r3, #9
 800a0d4:	d94e      	bls.n	800a174 <_vfiprintf_r+0x1c4>
 800a0d6:	b1b0      	cbz	r0, 800a106 <_vfiprintf_r+0x156>
 800a0d8:	9207      	str	r2, [sp, #28]
 800a0da:	e014      	b.n	800a106 <_vfiprintf_r+0x156>
 800a0dc:	eba0 0308 	sub.w	r3, r0, r8
 800a0e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	9304      	str	r3, [sp, #16]
 800a0e8:	46a2      	mov	sl, r4
 800a0ea:	e7d2      	b.n	800a092 <_vfiprintf_r+0xe2>
 800a0ec:	9b03      	ldr	r3, [sp, #12]
 800a0ee:	1d19      	adds	r1, r3, #4
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	9103      	str	r1, [sp, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	bfbb      	ittet	lt
 800a0f8:	425b      	neglt	r3, r3
 800a0fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a0fe:	9307      	strge	r3, [sp, #28]
 800a100:	9307      	strlt	r3, [sp, #28]
 800a102:	bfb8      	it	lt
 800a104:	9204      	strlt	r2, [sp, #16]
 800a106:	7823      	ldrb	r3, [r4, #0]
 800a108:	2b2e      	cmp	r3, #46	; 0x2e
 800a10a:	d10c      	bne.n	800a126 <_vfiprintf_r+0x176>
 800a10c:	7863      	ldrb	r3, [r4, #1]
 800a10e:	2b2a      	cmp	r3, #42	; 0x2a
 800a110:	d135      	bne.n	800a17e <_vfiprintf_r+0x1ce>
 800a112:	9b03      	ldr	r3, [sp, #12]
 800a114:	1d1a      	adds	r2, r3, #4
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	9203      	str	r2, [sp, #12]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	bfb8      	it	lt
 800a11e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a122:	3402      	adds	r4, #2
 800a124:	9305      	str	r3, [sp, #20]
 800a126:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a20c <_vfiprintf_r+0x25c>
 800a12a:	7821      	ldrb	r1, [r4, #0]
 800a12c:	2203      	movs	r2, #3
 800a12e:	4650      	mov	r0, sl
 800a130:	f7f6 f87e 	bl	8000230 <memchr>
 800a134:	b140      	cbz	r0, 800a148 <_vfiprintf_r+0x198>
 800a136:	2340      	movs	r3, #64	; 0x40
 800a138:	eba0 000a 	sub.w	r0, r0, sl
 800a13c:	fa03 f000 	lsl.w	r0, r3, r0
 800a140:	9b04      	ldr	r3, [sp, #16]
 800a142:	4303      	orrs	r3, r0
 800a144:	3401      	adds	r4, #1
 800a146:	9304      	str	r3, [sp, #16]
 800a148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a14c:	482c      	ldr	r0, [pc, #176]	; (800a200 <_vfiprintf_r+0x250>)
 800a14e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a152:	2206      	movs	r2, #6
 800a154:	f7f6 f86c 	bl	8000230 <memchr>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d03f      	beq.n	800a1dc <_vfiprintf_r+0x22c>
 800a15c:	4b29      	ldr	r3, [pc, #164]	; (800a204 <_vfiprintf_r+0x254>)
 800a15e:	bb1b      	cbnz	r3, 800a1a8 <_vfiprintf_r+0x1f8>
 800a160:	9b03      	ldr	r3, [sp, #12]
 800a162:	3307      	adds	r3, #7
 800a164:	f023 0307 	bic.w	r3, r3, #7
 800a168:	3308      	adds	r3, #8
 800a16a:	9303      	str	r3, [sp, #12]
 800a16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a16e:	443b      	add	r3, r7
 800a170:	9309      	str	r3, [sp, #36]	; 0x24
 800a172:	e767      	b.n	800a044 <_vfiprintf_r+0x94>
 800a174:	fb0c 3202 	mla	r2, ip, r2, r3
 800a178:	460c      	mov	r4, r1
 800a17a:	2001      	movs	r0, #1
 800a17c:	e7a5      	b.n	800a0ca <_vfiprintf_r+0x11a>
 800a17e:	2300      	movs	r3, #0
 800a180:	3401      	adds	r4, #1
 800a182:	9305      	str	r3, [sp, #20]
 800a184:	4619      	mov	r1, r3
 800a186:	f04f 0c0a 	mov.w	ip, #10
 800a18a:	4620      	mov	r0, r4
 800a18c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a190:	3a30      	subs	r2, #48	; 0x30
 800a192:	2a09      	cmp	r2, #9
 800a194:	d903      	bls.n	800a19e <_vfiprintf_r+0x1ee>
 800a196:	2b00      	cmp	r3, #0
 800a198:	d0c5      	beq.n	800a126 <_vfiprintf_r+0x176>
 800a19a:	9105      	str	r1, [sp, #20]
 800a19c:	e7c3      	b.n	800a126 <_vfiprintf_r+0x176>
 800a19e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e7f0      	b.n	800a18a <_vfiprintf_r+0x1da>
 800a1a8:	ab03      	add	r3, sp, #12
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	462a      	mov	r2, r5
 800a1ae:	4b16      	ldr	r3, [pc, #88]	; (800a208 <_vfiprintf_r+0x258>)
 800a1b0:	a904      	add	r1, sp, #16
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f7fc f83c 	bl	8006230 <_printf_float>
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	1c78      	adds	r0, r7, #1
 800a1bc:	d1d6      	bne.n	800a16c <_vfiprintf_r+0x1bc>
 800a1be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1c0:	07d9      	lsls	r1, r3, #31
 800a1c2:	d405      	bmi.n	800a1d0 <_vfiprintf_r+0x220>
 800a1c4:	89ab      	ldrh	r3, [r5, #12]
 800a1c6:	059a      	lsls	r2, r3, #22
 800a1c8:	d402      	bmi.n	800a1d0 <_vfiprintf_r+0x220>
 800a1ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1cc:	f000 faa1 	bl	800a712 <__retarget_lock_release_recursive>
 800a1d0:	89ab      	ldrh	r3, [r5, #12]
 800a1d2:	065b      	lsls	r3, r3, #25
 800a1d4:	f53f af12 	bmi.w	8009ffc <_vfiprintf_r+0x4c>
 800a1d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1da:	e711      	b.n	800a000 <_vfiprintf_r+0x50>
 800a1dc:	ab03      	add	r3, sp, #12
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	462a      	mov	r2, r5
 800a1e2:	4b09      	ldr	r3, [pc, #36]	; (800a208 <_vfiprintf_r+0x258>)
 800a1e4:	a904      	add	r1, sp, #16
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	f7fc fac6 	bl	8006778 <_printf_i>
 800a1ec:	e7e4      	b.n	800a1b8 <_vfiprintf_r+0x208>
 800a1ee:	bf00      	nop
 800a1f0:	0800c374 	.word	0x0800c374
 800a1f4:	0800c394 	.word	0x0800c394
 800a1f8:	0800c354 	.word	0x0800c354
 800a1fc:	0800c304 	.word	0x0800c304
 800a200:	0800c30e 	.word	0x0800c30e
 800a204:	08006231 	.word	0x08006231
 800a208:	08009f8d 	.word	0x08009f8d
 800a20c:	0800c30a 	.word	0x0800c30a

0800a210 <__swbuf_r>:
 800a210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a212:	460e      	mov	r6, r1
 800a214:	4614      	mov	r4, r2
 800a216:	4605      	mov	r5, r0
 800a218:	b118      	cbz	r0, 800a222 <__swbuf_r+0x12>
 800a21a:	6983      	ldr	r3, [r0, #24]
 800a21c:	b90b      	cbnz	r3, 800a222 <__swbuf_r+0x12>
 800a21e:	f000 f9d9 	bl	800a5d4 <__sinit>
 800a222:	4b21      	ldr	r3, [pc, #132]	; (800a2a8 <__swbuf_r+0x98>)
 800a224:	429c      	cmp	r4, r3
 800a226:	d12b      	bne.n	800a280 <__swbuf_r+0x70>
 800a228:	686c      	ldr	r4, [r5, #4]
 800a22a:	69a3      	ldr	r3, [r4, #24]
 800a22c:	60a3      	str	r3, [r4, #8]
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	071a      	lsls	r2, r3, #28
 800a232:	d52f      	bpl.n	800a294 <__swbuf_r+0x84>
 800a234:	6923      	ldr	r3, [r4, #16]
 800a236:	b36b      	cbz	r3, 800a294 <__swbuf_r+0x84>
 800a238:	6923      	ldr	r3, [r4, #16]
 800a23a:	6820      	ldr	r0, [r4, #0]
 800a23c:	1ac0      	subs	r0, r0, r3
 800a23e:	6963      	ldr	r3, [r4, #20]
 800a240:	b2f6      	uxtb	r6, r6
 800a242:	4283      	cmp	r3, r0
 800a244:	4637      	mov	r7, r6
 800a246:	dc04      	bgt.n	800a252 <__swbuf_r+0x42>
 800a248:	4621      	mov	r1, r4
 800a24a:	4628      	mov	r0, r5
 800a24c:	f000 f92e 	bl	800a4ac <_fflush_r>
 800a250:	bb30      	cbnz	r0, 800a2a0 <__swbuf_r+0x90>
 800a252:	68a3      	ldr	r3, [r4, #8]
 800a254:	3b01      	subs	r3, #1
 800a256:	60a3      	str	r3, [r4, #8]
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	1c5a      	adds	r2, r3, #1
 800a25c:	6022      	str	r2, [r4, #0]
 800a25e:	701e      	strb	r6, [r3, #0]
 800a260:	6963      	ldr	r3, [r4, #20]
 800a262:	3001      	adds	r0, #1
 800a264:	4283      	cmp	r3, r0
 800a266:	d004      	beq.n	800a272 <__swbuf_r+0x62>
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	07db      	lsls	r3, r3, #31
 800a26c:	d506      	bpl.n	800a27c <__swbuf_r+0x6c>
 800a26e:	2e0a      	cmp	r6, #10
 800a270:	d104      	bne.n	800a27c <__swbuf_r+0x6c>
 800a272:	4621      	mov	r1, r4
 800a274:	4628      	mov	r0, r5
 800a276:	f000 f919 	bl	800a4ac <_fflush_r>
 800a27a:	b988      	cbnz	r0, 800a2a0 <__swbuf_r+0x90>
 800a27c:	4638      	mov	r0, r7
 800a27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a280:	4b0a      	ldr	r3, [pc, #40]	; (800a2ac <__swbuf_r+0x9c>)
 800a282:	429c      	cmp	r4, r3
 800a284:	d101      	bne.n	800a28a <__swbuf_r+0x7a>
 800a286:	68ac      	ldr	r4, [r5, #8]
 800a288:	e7cf      	b.n	800a22a <__swbuf_r+0x1a>
 800a28a:	4b09      	ldr	r3, [pc, #36]	; (800a2b0 <__swbuf_r+0xa0>)
 800a28c:	429c      	cmp	r4, r3
 800a28e:	bf08      	it	eq
 800a290:	68ec      	ldreq	r4, [r5, #12]
 800a292:	e7ca      	b.n	800a22a <__swbuf_r+0x1a>
 800a294:	4621      	mov	r1, r4
 800a296:	4628      	mov	r0, r5
 800a298:	f000 f80c 	bl	800a2b4 <__swsetup_r>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d0cb      	beq.n	800a238 <__swbuf_r+0x28>
 800a2a0:	f04f 37ff 	mov.w	r7, #4294967295
 800a2a4:	e7ea      	b.n	800a27c <__swbuf_r+0x6c>
 800a2a6:	bf00      	nop
 800a2a8:	0800c374 	.word	0x0800c374
 800a2ac:	0800c394 	.word	0x0800c394
 800a2b0:	0800c354 	.word	0x0800c354

0800a2b4 <__swsetup_r>:
 800a2b4:	4b32      	ldr	r3, [pc, #200]	; (800a380 <__swsetup_r+0xcc>)
 800a2b6:	b570      	push	{r4, r5, r6, lr}
 800a2b8:	681d      	ldr	r5, [r3, #0]
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	460c      	mov	r4, r1
 800a2be:	b125      	cbz	r5, 800a2ca <__swsetup_r+0x16>
 800a2c0:	69ab      	ldr	r3, [r5, #24]
 800a2c2:	b913      	cbnz	r3, 800a2ca <__swsetup_r+0x16>
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	f000 f985 	bl	800a5d4 <__sinit>
 800a2ca:	4b2e      	ldr	r3, [pc, #184]	; (800a384 <__swsetup_r+0xd0>)
 800a2cc:	429c      	cmp	r4, r3
 800a2ce:	d10f      	bne.n	800a2f0 <__swsetup_r+0x3c>
 800a2d0:	686c      	ldr	r4, [r5, #4]
 800a2d2:	89a3      	ldrh	r3, [r4, #12]
 800a2d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2d8:	0719      	lsls	r1, r3, #28
 800a2da:	d42c      	bmi.n	800a336 <__swsetup_r+0x82>
 800a2dc:	06dd      	lsls	r5, r3, #27
 800a2de:	d411      	bmi.n	800a304 <__swsetup_r+0x50>
 800a2e0:	2309      	movs	r3, #9
 800a2e2:	6033      	str	r3, [r6, #0]
 800a2e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2e8:	81a3      	strh	r3, [r4, #12]
 800a2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ee:	e03e      	b.n	800a36e <__swsetup_r+0xba>
 800a2f0:	4b25      	ldr	r3, [pc, #148]	; (800a388 <__swsetup_r+0xd4>)
 800a2f2:	429c      	cmp	r4, r3
 800a2f4:	d101      	bne.n	800a2fa <__swsetup_r+0x46>
 800a2f6:	68ac      	ldr	r4, [r5, #8]
 800a2f8:	e7eb      	b.n	800a2d2 <__swsetup_r+0x1e>
 800a2fa:	4b24      	ldr	r3, [pc, #144]	; (800a38c <__swsetup_r+0xd8>)
 800a2fc:	429c      	cmp	r4, r3
 800a2fe:	bf08      	it	eq
 800a300:	68ec      	ldreq	r4, [r5, #12]
 800a302:	e7e6      	b.n	800a2d2 <__swsetup_r+0x1e>
 800a304:	0758      	lsls	r0, r3, #29
 800a306:	d512      	bpl.n	800a32e <__swsetup_r+0x7a>
 800a308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a30a:	b141      	cbz	r1, 800a31e <__swsetup_r+0x6a>
 800a30c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a310:	4299      	cmp	r1, r3
 800a312:	d002      	beq.n	800a31a <__swsetup_r+0x66>
 800a314:	4630      	mov	r0, r6
 800a316:	f7ff fb25 	bl	8009964 <_free_r>
 800a31a:	2300      	movs	r3, #0
 800a31c:	6363      	str	r3, [r4, #52]	; 0x34
 800a31e:	89a3      	ldrh	r3, [r4, #12]
 800a320:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a324:	81a3      	strh	r3, [r4, #12]
 800a326:	2300      	movs	r3, #0
 800a328:	6063      	str	r3, [r4, #4]
 800a32a:	6923      	ldr	r3, [r4, #16]
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	89a3      	ldrh	r3, [r4, #12]
 800a330:	f043 0308 	orr.w	r3, r3, #8
 800a334:	81a3      	strh	r3, [r4, #12]
 800a336:	6923      	ldr	r3, [r4, #16]
 800a338:	b94b      	cbnz	r3, 800a34e <__swsetup_r+0x9a>
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a344:	d003      	beq.n	800a34e <__swsetup_r+0x9a>
 800a346:	4621      	mov	r1, r4
 800a348:	4630      	mov	r0, r6
 800a34a:	f000 fa09 	bl	800a760 <__smakebuf_r>
 800a34e:	89a0      	ldrh	r0, [r4, #12]
 800a350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a354:	f010 0301 	ands.w	r3, r0, #1
 800a358:	d00a      	beq.n	800a370 <__swsetup_r+0xbc>
 800a35a:	2300      	movs	r3, #0
 800a35c:	60a3      	str	r3, [r4, #8]
 800a35e:	6963      	ldr	r3, [r4, #20]
 800a360:	425b      	negs	r3, r3
 800a362:	61a3      	str	r3, [r4, #24]
 800a364:	6923      	ldr	r3, [r4, #16]
 800a366:	b943      	cbnz	r3, 800a37a <__swsetup_r+0xc6>
 800a368:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a36c:	d1ba      	bne.n	800a2e4 <__swsetup_r+0x30>
 800a36e:	bd70      	pop	{r4, r5, r6, pc}
 800a370:	0781      	lsls	r1, r0, #30
 800a372:	bf58      	it	pl
 800a374:	6963      	ldrpl	r3, [r4, #20]
 800a376:	60a3      	str	r3, [r4, #8]
 800a378:	e7f4      	b.n	800a364 <__swsetup_r+0xb0>
 800a37a:	2000      	movs	r0, #0
 800a37c:	e7f7      	b.n	800a36e <__swsetup_r+0xba>
 800a37e:	bf00      	nop
 800a380:	2000001c 	.word	0x2000001c
 800a384:	0800c374 	.word	0x0800c374
 800a388:	0800c394 	.word	0x0800c394
 800a38c:	0800c354 	.word	0x0800c354

0800a390 <abort>:
 800a390:	b508      	push	{r3, lr}
 800a392:	2006      	movs	r0, #6
 800a394:	f000 fa54 	bl	800a840 <raise>
 800a398:	2001      	movs	r0, #1
 800a39a:	f7f7 fce9 	bl	8001d70 <_exit>
	...

0800a3a0 <__sflush_r>:
 800a3a0:	898a      	ldrh	r2, [r1, #12]
 800a3a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	0710      	lsls	r0, r2, #28
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	d458      	bmi.n	800a460 <__sflush_r+0xc0>
 800a3ae:	684b      	ldr	r3, [r1, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	dc05      	bgt.n	800a3c0 <__sflush_r+0x20>
 800a3b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	dc02      	bgt.n	800a3c0 <__sflush_r+0x20>
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3c2:	2e00      	cmp	r6, #0
 800a3c4:	d0f9      	beq.n	800a3ba <__sflush_r+0x1a>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3cc:	682f      	ldr	r7, [r5, #0]
 800a3ce:	602b      	str	r3, [r5, #0]
 800a3d0:	d032      	beq.n	800a438 <__sflush_r+0x98>
 800a3d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	075a      	lsls	r2, r3, #29
 800a3d8:	d505      	bpl.n	800a3e6 <__sflush_r+0x46>
 800a3da:	6863      	ldr	r3, [r4, #4]
 800a3dc:	1ac0      	subs	r0, r0, r3
 800a3de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3e0:	b10b      	cbz	r3, 800a3e6 <__sflush_r+0x46>
 800a3e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3e4:	1ac0      	subs	r0, r0, r3
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3ec:	6a21      	ldr	r1, [r4, #32]
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	47b0      	blx	r6
 800a3f2:	1c43      	adds	r3, r0, #1
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	d106      	bne.n	800a406 <__sflush_r+0x66>
 800a3f8:	6829      	ldr	r1, [r5, #0]
 800a3fa:	291d      	cmp	r1, #29
 800a3fc:	d82c      	bhi.n	800a458 <__sflush_r+0xb8>
 800a3fe:	4a2a      	ldr	r2, [pc, #168]	; (800a4a8 <__sflush_r+0x108>)
 800a400:	40ca      	lsrs	r2, r1
 800a402:	07d6      	lsls	r6, r2, #31
 800a404:	d528      	bpl.n	800a458 <__sflush_r+0xb8>
 800a406:	2200      	movs	r2, #0
 800a408:	6062      	str	r2, [r4, #4]
 800a40a:	04d9      	lsls	r1, r3, #19
 800a40c:	6922      	ldr	r2, [r4, #16]
 800a40e:	6022      	str	r2, [r4, #0]
 800a410:	d504      	bpl.n	800a41c <__sflush_r+0x7c>
 800a412:	1c42      	adds	r2, r0, #1
 800a414:	d101      	bne.n	800a41a <__sflush_r+0x7a>
 800a416:	682b      	ldr	r3, [r5, #0]
 800a418:	b903      	cbnz	r3, 800a41c <__sflush_r+0x7c>
 800a41a:	6560      	str	r0, [r4, #84]	; 0x54
 800a41c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a41e:	602f      	str	r7, [r5, #0]
 800a420:	2900      	cmp	r1, #0
 800a422:	d0ca      	beq.n	800a3ba <__sflush_r+0x1a>
 800a424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a428:	4299      	cmp	r1, r3
 800a42a:	d002      	beq.n	800a432 <__sflush_r+0x92>
 800a42c:	4628      	mov	r0, r5
 800a42e:	f7ff fa99 	bl	8009964 <_free_r>
 800a432:	2000      	movs	r0, #0
 800a434:	6360      	str	r0, [r4, #52]	; 0x34
 800a436:	e7c1      	b.n	800a3bc <__sflush_r+0x1c>
 800a438:	6a21      	ldr	r1, [r4, #32]
 800a43a:	2301      	movs	r3, #1
 800a43c:	4628      	mov	r0, r5
 800a43e:	47b0      	blx	r6
 800a440:	1c41      	adds	r1, r0, #1
 800a442:	d1c7      	bne.n	800a3d4 <__sflush_r+0x34>
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d0c4      	beq.n	800a3d4 <__sflush_r+0x34>
 800a44a:	2b1d      	cmp	r3, #29
 800a44c:	d001      	beq.n	800a452 <__sflush_r+0xb2>
 800a44e:	2b16      	cmp	r3, #22
 800a450:	d101      	bne.n	800a456 <__sflush_r+0xb6>
 800a452:	602f      	str	r7, [r5, #0]
 800a454:	e7b1      	b.n	800a3ba <__sflush_r+0x1a>
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a45c:	81a3      	strh	r3, [r4, #12]
 800a45e:	e7ad      	b.n	800a3bc <__sflush_r+0x1c>
 800a460:	690f      	ldr	r7, [r1, #16]
 800a462:	2f00      	cmp	r7, #0
 800a464:	d0a9      	beq.n	800a3ba <__sflush_r+0x1a>
 800a466:	0793      	lsls	r3, r2, #30
 800a468:	680e      	ldr	r6, [r1, #0]
 800a46a:	bf08      	it	eq
 800a46c:	694b      	ldreq	r3, [r1, #20]
 800a46e:	600f      	str	r7, [r1, #0]
 800a470:	bf18      	it	ne
 800a472:	2300      	movne	r3, #0
 800a474:	eba6 0807 	sub.w	r8, r6, r7
 800a478:	608b      	str	r3, [r1, #8]
 800a47a:	f1b8 0f00 	cmp.w	r8, #0
 800a47e:	dd9c      	ble.n	800a3ba <__sflush_r+0x1a>
 800a480:	6a21      	ldr	r1, [r4, #32]
 800a482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a484:	4643      	mov	r3, r8
 800a486:	463a      	mov	r2, r7
 800a488:	4628      	mov	r0, r5
 800a48a:	47b0      	blx	r6
 800a48c:	2800      	cmp	r0, #0
 800a48e:	dc06      	bgt.n	800a49e <__sflush_r+0xfe>
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a496:	81a3      	strh	r3, [r4, #12]
 800a498:	f04f 30ff 	mov.w	r0, #4294967295
 800a49c:	e78e      	b.n	800a3bc <__sflush_r+0x1c>
 800a49e:	4407      	add	r7, r0
 800a4a0:	eba8 0800 	sub.w	r8, r8, r0
 800a4a4:	e7e9      	b.n	800a47a <__sflush_r+0xda>
 800a4a6:	bf00      	nop
 800a4a8:	20400001 	.word	0x20400001

0800a4ac <_fflush_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	690b      	ldr	r3, [r1, #16]
 800a4b0:	4605      	mov	r5, r0
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	b913      	cbnz	r3, 800a4bc <_fflush_r+0x10>
 800a4b6:	2500      	movs	r5, #0
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	bd38      	pop	{r3, r4, r5, pc}
 800a4bc:	b118      	cbz	r0, 800a4c6 <_fflush_r+0x1a>
 800a4be:	6983      	ldr	r3, [r0, #24]
 800a4c0:	b90b      	cbnz	r3, 800a4c6 <_fflush_r+0x1a>
 800a4c2:	f000 f887 	bl	800a5d4 <__sinit>
 800a4c6:	4b14      	ldr	r3, [pc, #80]	; (800a518 <_fflush_r+0x6c>)
 800a4c8:	429c      	cmp	r4, r3
 800a4ca:	d11b      	bne.n	800a504 <_fflush_r+0x58>
 800a4cc:	686c      	ldr	r4, [r5, #4]
 800a4ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d0ef      	beq.n	800a4b6 <_fflush_r+0xa>
 800a4d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4d8:	07d0      	lsls	r0, r2, #31
 800a4da:	d404      	bmi.n	800a4e6 <_fflush_r+0x3a>
 800a4dc:	0599      	lsls	r1, r3, #22
 800a4de:	d402      	bmi.n	800a4e6 <_fflush_r+0x3a>
 800a4e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4e2:	f000 f915 	bl	800a710 <__retarget_lock_acquire_recursive>
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	f7ff ff59 	bl	800a3a0 <__sflush_r>
 800a4ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4f0:	07da      	lsls	r2, r3, #31
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	d4e0      	bmi.n	800a4b8 <_fflush_r+0xc>
 800a4f6:	89a3      	ldrh	r3, [r4, #12]
 800a4f8:	059b      	lsls	r3, r3, #22
 800a4fa:	d4dd      	bmi.n	800a4b8 <_fflush_r+0xc>
 800a4fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4fe:	f000 f908 	bl	800a712 <__retarget_lock_release_recursive>
 800a502:	e7d9      	b.n	800a4b8 <_fflush_r+0xc>
 800a504:	4b05      	ldr	r3, [pc, #20]	; (800a51c <_fflush_r+0x70>)
 800a506:	429c      	cmp	r4, r3
 800a508:	d101      	bne.n	800a50e <_fflush_r+0x62>
 800a50a:	68ac      	ldr	r4, [r5, #8]
 800a50c:	e7df      	b.n	800a4ce <_fflush_r+0x22>
 800a50e:	4b04      	ldr	r3, [pc, #16]	; (800a520 <_fflush_r+0x74>)
 800a510:	429c      	cmp	r4, r3
 800a512:	bf08      	it	eq
 800a514:	68ec      	ldreq	r4, [r5, #12]
 800a516:	e7da      	b.n	800a4ce <_fflush_r+0x22>
 800a518:	0800c374 	.word	0x0800c374
 800a51c:	0800c394 	.word	0x0800c394
 800a520:	0800c354 	.word	0x0800c354

0800a524 <std>:
 800a524:	2300      	movs	r3, #0
 800a526:	b510      	push	{r4, lr}
 800a528:	4604      	mov	r4, r0
 800a52a:	e9c0 3300 	strd	r3, r3, [r0]
 800a52e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a532:	6083      	str	r3, [r0, #8]
 800a534:	8181      	strh	r1, [r0, #12]
 800a536:	6643      	str	r3, [r0, #100]	; 0x64
 800a538:	81c2      	strh	r2, [r0, #14]
 800a53a:	6183      	str	r3, [r0, #24]
 800a53c:	4619      	mov	r1, r3
 800a53e:	2208      	movs	r2, #8
 800a540:	305c      	adds	r0, #92	; 0x5c
 800a542:	f7fb fdcd 	bl	80060e0 <memset>
 800a546:	4b05      	ldr	r3, [pc, #20]	; (800a55c <std+0x38>)
 800a548:	6263      	str	r3, [r4, #36]	; 0x24
 800a54a:	4b05      	ldr	r3, [pc, #20]	; (800a560 <std+0x3c>)
 800a54c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a54e:	4b05      	ldr	r3, [pc, #20]	; (800a564 <std+0x40>)
 800a550:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a552:	4b05      	ldr	r3, [pc, #20]	; (800a568 <std+0x44>)
 800a554:	6224      	str	r4, [r4, #32]
 800a556:	6323      	str	r3, [r4, #48]	; 0x30
 800a558:	bd10      	pop	{r4, pc}
 800a55a:	bf00      	nop
 800a55c:	0800a879 	.word	0x0800a879
 800a560:	0800a89b 	.word	0x0800a89b
 800a564:	0800a8d3 	.word	0x0800a8d3
 800a568:	0800a8f7 	.word	0x0800a8f7

0800a56c <_cleanup_r>:
 800a56c:	4901      	ldr	r1, [pc, #4]	; (800a574 <_cleanup_r+0x8>)
 800a56e:	f000 b8af 	b.w	800a6d0 <_fwalk_reent>
 800a572:	bf00      	nop
 800a574:	0800a4ad 	.word	0x0800a4ad

0800a578 <__sfmoreglue>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	2268      	movs	r2, #104	; 0x68
 800a57c:	1e4d      	subs	r5, r1, #1
 800a57e:	4355      	muls	r5, r2
 800a580:	460e      	mov	r6, r1
 800a582:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a586:	f7ff fa59 	bl	8009a3c <_malloc_r>
 800a58a:	4604      	mov	r4, r0
 800a58c:	b140      	cbz	r0, 800a5a0 <__sfmoreglue+0x28>
 800a58e:	2100      	movs	r1, #0
 800a590:	e9c0 1600 	strd	r1, r6, [r0]
 800a594:	300c      	adds	r0, #12
 800a596:	60a0      	str	r0, [r4, #8]
 800a598:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a59c:	f7fb fda0 	bl	80060e0 <memset>
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	bd70      	pop	{r4, r5, r6, pc}

0800a5a4 <__sfp_lock_acquire>:
 800a5a4:	4801      	ldr	r0, [pc, #4]	; (800a5ac <__sfp_lock_acquire+0x8>)
 800a5a6:	f000 b8b3 	b.w	800a710 <__retarget_lock_acquire_recursive>
 800a5aa:	bf00      	nop
 800a5ac:	20000839 	.word	0x20000839

0800a5b0 <__sfp_lock_release>:
 800a5b0:	4801      	ldr	r0, [pc, #4]	; (800a5b8 <__sfp_lock_release+0x8>)
 800a5b2:	f000 b8ae 	b.w	800a712 <__retarget_lock_release_recursive>
 800a5b6:	bf00      	nop
 800a5b8:	20000839 	.word	0x20000839

0800a5bc <__sinit_lock_acquire>:
 800a5bc:	4801      	ldr	r0, [pc, #4]	; (800a5c4 <__sinit_lock_acquire+0x8>)
 800a5be:	f000 b8a7 	b.w	800a710 <__retarget_lock_acquire_recursive>
 800a5c2:	bf00      	nop
 800a5c4:	2000083a 	.word	0x2000083a

0800a5c8 <__sinit_lock_release>:
 800a5c8:	4801      	ldr	r0, [pc, #4]	; (800a5d0 <__sinit_lock_release+0x8>)
 800a5ca:	f000 b8a2 	b.w	800a712 <__retarget_lock_release_recursive>
 800a5ce:	bf00      	nop
 800a5d0:	2000083a 	.word	0x2000083a

0800a5d4 <__sinit>:
 800a5d4:	b510      	push	{r4, lr}
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	f7ff fff0 	bl	800a5bc <__sinit_lock_acquire>
 800a5dc:	69a3      	ldr	r3, [r4, #24]
 800a5de:	b11b      	cbz	r3, 800a5e8 <__sinit+0x14>
 800a5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e4:	f7ff bff0 	b.w	800a5c8 <__sinit_lock_release>
 800a5e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a5ec:	6523      	str	r3, [r4, #80]	; 0x50
 800a5ee:	4b13      	ldr	r3, [pc, #76]	; (800a63c <__sinit+0x68>)
 800a5f0:	4a13      	ldr	r2, [pc, #76]	; (800a640 <__sinit+0x6c>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5f6:	42a3      	cmp	r3, r4
 800a5f8:	bf04      	itt	eq
 800a5fa:	2301      	moveq	r3, #1
 800a5fc:	61a3      	streq	r3, [r4, #24]
 800a5fe:	4620      	mov	r0, r4
 800a600:	f000 f820 	bl	800a644 <__sfp>
 800a604:	6060      	str	r0, [r4, #4]
 800a606:	4620      	mov	r0, r4
 800a608:	f000 f81c 	bl	800a644 <__sfp>
 800a60c:	60a0      	str	r0, [r4, #8]
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 f818 	bl	800a644 <__sfp>
 800a614:	2200      	movs	r2, #0
 800a616:	60e0      	str	r0, [r4, #12]
 800a618:	2104      	movs	r1, #4
 800a61a:	6860      	ldr	r0, [r4, #4]
 800a61c:	f7ff ff82 	bl	800a524 <std>
 800a620:	68a0      	ldr	r0, [r4, #8]
 800a622:	2201      	movs	r2, #1
 800a624:	2109      	movs	r1, #9
 800a626:	f7ff ff7d 	bl	800a524 <std>
 800a62a:	68e0      	ldr	r0, [r4, #12]
 800a62c:	2202      	movs	r2, #2
 800a62e:	2112      	movs	r1, #18
 800a630:	f7ff ff78 	bl	800a524 <std>
 800a634:	2301      	movs	r3, #1
 800a636:	61a3      	str	r3, [r4, #24]
 800a638:	e7d2      	b.n	800a5e0 <__sinit+0xc>
 800a63a:	bf00      	nop
 800a63c:	0800bf10 	.word	0x0800bf10
 800a640:	0800a56d 	.word	0x0800a56d

0800a644 <__sfp>:
 800a644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a646:	4607      	mov	r7, r0
 800a648:	f7ff ffac 	bl	800a5a4 <__sfp_lock_acquire>
 800a64c:	4b1e      	ldr	r3, [pc, #120]	; (800a6c8 <__sfp+0x84>)
 800a64e:	681e      	ldr	r6, [r3, #0]
 800a650:	69b3      	ldr	r3, [r6, #24]
 800a652:	b913      	cbnz	r3, 800a65a <__sfp+0x16>
 800a654:	4630      	mov	r0, r6
 800a656:	f7ff ffbd 	bl	800a5d4 <__sinit>
 800a65a:	3648      	adds	r6, #72	; 0x48
 800a65c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a660:	3b01      	subs	r3, #1
 800a662:	d503      	bpl.n	800a66c <__sfp+0x28>
 800a664:	6833      	ldr	r3, [r6, #0]
 800a666:	b30b      	cbz	r3, 800a6ac <__sfp+0x68>
 800a668:	6836      	ldr	r6, [r6, #0]
 800a66a:	e7f7      	b.n	800a65c <__sfp+0x18>
 800a66c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a670:	b9d5      	cbnz	r5, 800a6a8 <__sfp+0x64>
 800a672:	4b16      	ldr	r3, [pc, #88]	; (800a6cc <__sfp+0x88>)
 800a674:	60e3      	str	r3, [r4, #12]
 800a676:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a67a:	6665      	str	r5, [r4, #100]	; 0x64
 800a67c:	f000 f847 	bl	800a70e <__retarget_lock_init_recursive>
 800a680:	f7ff ff96 	bl	800a5b0 <__sfp_lock_release>
 800a684:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a688:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a68c:	6025      	str	r5, [r4, #0]
 800a68e:	61a5      	str	r5, [r4, #24]
 800a690:	2208      	movs	r2, #8
 800a692:	4629      	mov	r1, r5
 800a694:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a698:	f7fb fd22 	bl	80060e0 <memset>
 800a69c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6a8:	3468      	adds	r4, #104	; 0x68
 800a6aa:	e7d9      	b.n	800a660 <__sfp+0x1c>
 800a6ac:	2104      	movs	r1, #4
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	f7ff ff62 	bl	800a578 <__sfmoreglue>
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	6030      	str	r0, [r6, #0]
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d1d5      	bne.n	800a668 <__sfp+0x24>
 800a6bc:	f7ff ff78 	bl	800a5b0 <__sfp_lock_release>
 800a6c0:	230c      	movs	r3, #12
 800a6c2:	603b      	str	r3, [r7, #0]
 800a6c4:	e7ee      	b.n	800a6a4 <__sfp+0x60>
 800a6c6:	bf00      	nop
 800a6c8:	0800bf10 	.word	0x0800bf10
 800a6cc:	ffff0001 	.word	0xffff0001

0800a6d0 <_fwalk_reent>:
 800a6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d4:	4606      	mov	r6, r0
 800a6d6:	4688      	mov	r8, r1
 800a6d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6dc:	2700      	movs	r7, #0
 800a6de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6e2:	f1b9 0901 	subs.w	r9, r9, #1
 800a6e6:	d505      	bpl.n	800a6f4 <_fwalk_reent+0x24>
 800a6e8:	6824      	ldr	r4, [r4, #0]
 800a6ea:	2c00      	cmp	r4, #0
 800a6ec:	d1f7      	bne.n	800a6de <_fwalk_reent+0xe>
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6f4:	89ab      	ldrh	r3, [r5, #12]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d907      	bls.n	800a70a <_fwalk_reent+0x3a>
 800a6fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6fe:	3301      	adds	r3, #1
 800a700:	d003      	beq.n	800a70a <_fwalk_reent+0x3a>
 800a702:	4629      	mov	r1, r5
 800a704:	4630      	mov	r0, r6
 800a706:	47c0      	blx	r8
 800a708:	4307      	orrs	r7, r0
 800a70a:	3568      	adds	r5, #104	; 0x68
 800a70c:	e7e9      	b.n	800a6e2 <_fwalk_reent+0x12>

0800a70e <__retarget_lock_init_recursive>:
 800a70e:	4770      	bx	lr

0800a710 <__retarget_lock_acquire_recursive>:
 800a710:	4770      	bx	lr

0800a712 <__retarget_lock_release_recursive>:
 800a712:	4770      	bx	lr

0800a714 <__swhatbuf_r>:
 800a714:	b570      	push	{r4, r5, r6, lr}
 800a716:	460e      	mov	r6, r1
 800a718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a71c:	2900      	cmp	r1, #0
 800a71e:	b096      	sub	sp, #88	; 0x58
 800a720:	4614      	mov	r4, r2
 800a722:	461d      	mov	r5, r3
 800a724:	da08      	bge.n	800a738 <__swhatbuf_r+0x24>
 800a726:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	602a      	str	r2, [r5, #0]
 800a72e:	061a      	lsls	r2, r3, #24
 800a730:	d410      	bmi.n	800a754 <__swhatbuf_r+0x40>
 800a732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a736:	e00e      	b.n	800a756 <__swhatbuf_r+0x42>
 800a738:	466a      	mov	r2, sp
 800a73a:	f000 f903 	bl	800a944 <_fstat_r>
 800a73e:	2800      	cmp	r0, #0
 800a740:	dbf1      	blt.n	800a726 <__swhatbuf_r+0x12>
 800a742:	9a01      	ldr	r2, [sp, #4]
 800a744:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a748:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a74c:	425a      	negs	r2, r3
 800a74e:	415a      	adcs	r2, r3
 800a750:	602a      	str	r2, [r5, #0]
 800a752:	e7ee      	b.n	800a732 <__swhatbuf_r+0x1e>
 800a754:	2340      	movs	r3, #64	; 0x40
 800a756:	2000      	movs	r0, #0
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	b016      	add	sp, #88	; 0x58
 800a75c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a760 <__smakebuf_r>:
 800a760:	898b      	ldrh	r3, [r1, #12]
 800a762:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a764:	079d      	lsls	r5, r3, #30
 800a766:	4606      	mov	r6, r0
 800a768:	460c      	mov	r4, r1
 800a76a:	d507      	bpl.n	800a77c <__smakebuf_r+0x1c>
 800a76c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	6123      	str	r3, [r4, #16]
 800a774:	2301      	movs	r3, #1
 800a776:	6163      	str	r3, [r4, #20]
 800a778:	b002      	add	sp, #8
 800a77a:	bd70      	pop	{r4, r5, r6, pc}
 800a77c:	ab01      	add	r3, sp, #4
 800a77e:	466a      	mov	r2, sp
 800a780:	f7ff ffc8 	bl	800a714 <__swhatbuf_r>
 800a784:	9900      	ldr	r1, [sp, #0]
 800a786:	4605      	mov	r5, r0
 800a788:	4630      	mov	r0, r6
 800a78a:	f7ff f957 	bl	8009a3c <_malloc_r>
 800a78e:	b948      	cbnz	r0, 800a7a4 <__smakebuf_r+0x44>
 800a790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a794:	059a      	lsls	r2, r3, #22
 800a796:	d4ef      	bmi.n	800a778 <__smakebuf_r+0x18>
 800a798:	f023 0303 	bic.w	r3, r3, #3
 800a79c:	f043 0302 	orr.w	r3, r3, #2
 800a7a0:	81a3      	strh	r3, [r4, #12]
 800a7a2:	e7e3      	b.n	800a76c <__smakebuf_r+0xc>
 800a7a4:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <__smakebuf_r+0x7c>)
 800a7a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	6020      	str	r0, [r4, #0]
 800a7ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7b0:	81a3      	strh	r3, [r4, #12]
 800a7b2:	9b00      	ldr	r3, [sp, #0]
 800a7b4:	6163      	str	r3, [r4, #20]
 800a7b6:	9b01      	ldr	r3, [sp, #4]
 800a7b8:	6120      	str	r0, [r4, #16]
 800a7ba:	b15b      	cbz	r3, 800a7d4 <__smakebuf_r+0x74>
 800a7bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f000 f8d1 	bl	800a968 <_isatty_r>
 800a7c6:	b128      	cbz	r0, 800a7d4 <__smakebuf_r+0x74>
 800a7c8:	89a3      	ldrh	r3, [r4, #12]
 800a7ca:	f023 0303 	bic.w	r3, r3, #3
 800a7ce:	f043 0301 	orr.w	r3, r3, #1
 800a7d2:	81a3      	strh	r3, [r4, #12]
 800a7d4:	89a0      	ldrh	r0, [r4, #12]
 800a7d6:	4305      	orrs	r5, r0
 800a7d8:	81a5      	strh	r5, [r4, #12]
 800a7da:	e7cd      	b.n	800a778 <__smakebuf_r+0x18>
 800a7dc:	0800a56d 	.word	0x0800a56d

0800a7e0 <_malloc_usable_size_r>:
 800a7e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7e4:	1f18      	subs	r0, r3, #4
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	bfbc      	itt	lt
 800a7ea:	580b      	ldrlt	r3, [r1, r0]
 800a7ec:	18c0      	addlt	r0, r0, r3
 800a7ee:	4770      	bx	lr

0800a7f0 <_raise_r>:
 800a7f0:	291f      	cmp	r1, #31
 800a7f2:	b538      	push	{r3, r4, r5, lr}
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	460d      	mov	r5, r1
 800a7f8:	d904      	bls.n	800a804 <_raise_r+0x14>
 800a7fa:	2316      	movs	r3, #22
 800a7fc:	6003      	str	r3, [r0, #0]
 800a7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a806:	b112      	cbz	r2, 800a80e <_raise_r+0x1e>
 800a808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a80c:	b94b      	cbnz	r3, 800a822 <_raise_r+0x32>
 800a80e:	4620      	mov	r0, r4
 800a810:	f000 f830 	bl	800a874 <_getpid_r>
 800a814:	462a      	mov	r2, r5
 800a816:	4601      	mov	r1, r0
 800a818:	4620      	mov	r0, r4
 800a81a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a81e:	f000 b817 	b.w	800a850 <_kill_r>
 800a822:	2b01      	cmp	r3, #1
 800a824:	d00a      	beq.n	800a83c <_raise_r+0x4c>
 800a826:	1c59      	adds	r1, r3, #1
 800a828:	d103      	bne.n	800a832 <_raise_r+0x42>
 800a82a:	2316      	movs	r3, #22
 800a82c:	6003      	str	r3, [r0, #0]
 800a82e:	2001      	movs	r0, #1
 800a830:	e7e7      	b.n	800a802 <_raise_r+0x12>
 800a832:	2400      	movs	r4, #0
 800a834:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a838:	4628      	mov	r0, r5
 800a83a:	4798      	blx	r3
 800a83c:	2000      	movs	r0, #0
 800a83e:	e7e0      	b.n	800a802 <_raise_r+0x12>

0800a840 <raise>:
 800a840:	4b02      	ldr	r3, [pc, #8]	; (800a84c <raise+0xc>)
 800a842:	4601      	mov	r1, r0
 800a844:	6818      	ldr	r0, [r3, #0]
 800a846:	f7ff bfd3 	b.w	800a7f0 <_raise_r>
 800a84a:	bf00      	nop
 800a84c:	2000001c 	.word	0x2000001c

0800a850 <_kill_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4d07      	ldr	r5, [pc, #28]	; (800a870 <_kill_r+0x20>)
 800a854:	2300      	movs	r3, #0
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	4611      	mov	r1, r2
 800a85c:	602b      	str	r3, [r5, #0]
 800a85e:	f7f7 fa77 	bl	8001d50 <_kill>
 800a862:	1c43      	adds	r3, r0, #1
 800a864:	d102      	bne.n	800a86c <_kill_r+0x1c>
 800a866:	682b      	ldr	r3, [r5, #0]
 800a868:	b103      	cbz	r3, 800a86c <_kill_r+0x1c>
 800a86a:	6023      	str	r3, [r4, #0]
 800a86c:	bd38      	pop	{r3, r4, r5, pc}
 800a86e:	bf00      	nop
 800a870:	20000834 	.word	0x20000834

0800a874 <_getpid_r>:
 800a874:	f7f7 ba64 	b.w	8001d40 <_getpid>

0800a878 <__sread>:
 800a878:	b510      	push	{r4, lr}
 800a87a:	460c      	mov	r4, r1
 800a87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a880:	f000 f894 	bl	800a9ac <_read_r>
 800a884:	2800      	cmp	r0, #0
 800a886:	bfab      	itete	ge
 800a888:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a88a:	89a3      	ldrhlt	r3, [r4, #12]
 800a88c:	181b      	addge	r3, r3, r0
 800a88e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a892:	bfac      	ite	ge
 800a894:	6563      	strge	r3, [r4, #84]	; 0x54
 800a896:	81a3      	strhlt	r3, [r4, #12]
 800a898:	bd10      	pop	{r4, pc}

0800a89a <__swrite>:
 800a89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a89e:	461f      	mov	r7, r3
 800a8a0:	898b      	ldrh	r3, [r1, #12]
 800a8a2:	05db      	lsls	r3, r3, #23
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	4616      	mov	r6, r2
 800a8aa:	d505      	bpl.n	800a8b8 <__swrite+0x1e>
 800a8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f000 f868 	bl	800a988 <_lseek_r>
 800a8b8:	89a3      	ldrh	r3, [r4, #12]
 800a8ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8c2:	81a3      	strh	r3, [r4, #12]
 800a8c4:	4632      	mov	r2, r6
 800a8c6:	463b      	mov	r3, r7
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ce:	f000 b817 	b.w	800a900 <_write_r>

0800a8d2 <__sseek>:
 800a8d2:	b510      	push	{r4, lr}
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8da:	f000 f855 	bl	800a988 <_lseek_r>
 800a8de:	1c43      	adds	r3, r0, #1
 800a8e0:	89a3      	ldrh	r3, [r4, #12]
 800a8e2:	bf15      	itete	ne
 800a8e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8ee:	81a3      	strheq	r3, [r4, #12]
 800a8f0:	bf18      	it	ne
 800a8f2:	81a3      	strhne	r3, [r4, #12]
 800a8f4:	bd10      	pop	{r4, pc}

0800a8f6 <__sclose>:
 800a8f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8fa:	f000 b813 	b.w	800a924 <_close_r>
	...

0800a900 <_write_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4d07      	ldr	r5, [pc, #28]	; (800a920 <_write_r+0x20>)
 800a904:	4604      	mov	r4, r0
 800a906:	4608      	mov	r0, r1
 800a908:	4611      	mov	r1, r2
 800a90a:	2200      	movs	r2, #0
 800a90c:	602a      	str	r2, [r5, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	f7f7 fa55 	bl	8001dbe <_write>
 800a914:	1c43      	adds	r3, r0, #1
 800a916:	d102      	bne.n	800a91e <_write_r+0x1e>
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	b103      	cbz	r3, 800a91e <_write_r+0x1e>
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	bd38      	pop	{r3, r4, r5, pc}
 800a920:	20000834 	.word	0x20000834

0800a924 <_close_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	4d06      	ldr	r5, [pc, #24]	; (800a940 <_close_r+0x1c>)
 800a928:	2300      	movs	r3, #0
 800a92a:	4604      	mov	r4, r0
 800a92c:	4608      	mov	r0, r1
 800a92e:	602b      	str	r3, [r5, #0]
 800a930:	f7f7 fa61 	bl	8001df6 <_close>
 800a934:	1c43      	adds	r3, r0, #1
 800a936:	d102      	bne.n	800a93e <_close_r+0x1a>
 800a938:	682b      	ldr	r3, [r5, #0]
 800a93a:	b103      	cbz	r3, 800a93e <_close_r+0x1a>
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	bd38      	pop	{r3, r4, r5, pc}
 800a940:	20000834 	.word	0x20000834

0800a944 <_fstat_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	4d07      	ldr	r5, [pc, #28]	; (800a964 <_fstat_r+0x20>)
 800a948:	2300      	movs	r3, #0
 800a94a:	4604      	mov	r4, r0
 800a94c:	4608      	mov	r0, r1
 800a94e:	4611      	mov	r1, r2
 800a950:	602b      	str	r3, [r5, #0]
 800a952:	f7f7 fa5c 	bl	8001e0e <_fstat>
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	d102      	bne.n	800a960 <_fstat_r+0x1c>
 800a95a:	682b      	ldr	r3, [r5, #0]
 800a95c:	b103      	cbz	r3, 800a960 <_fstat_r+0x1c>
 800a95e:	6023      	str	r3, [r4, #0]
 800a960:	bd38      	pop	{r3, r4, r5, pc}
 800a962:	bf00      	nop
 800a964:	20000834 	.word	0x20000834

0800a968 <_isatty_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	4d06      	ldr	r5, [pc, #24]	; (800a984 <_isatty_r+0x1c>)
 800a96c:	2300      	movs	r3, #0
 800a96e:	4604      	mov	r4, r0
 800a970:	4608      	mov	r0, r1
 800a972:	602b      	str	r3, [r5, #0]
 800a974:	f7f7 fa5b 	bl	8001e2e <_isatty>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d102      	bne.n	800a982 <_isatty_r+0x1a>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	b103      	cbz	r3, 800a982 <_isatty_r+0x1a>
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	20000834 	.word	0x20000834

0800a988 <_lseek_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4d07      	ldr	r5, [pc, #28]	; (800a9a8 <_lseek_r+0x20>)
 800a98c:	4604      	mov	r4, r0
 800a98e:	4608      	mov	r0, r1
 800a990:	4611      	mov	r1, r2
 800a992:	2200      	movs	r2, #0
 800a994:	602a      	str	r2, [r5, #0]
 800a996:	461a      	mov	r2, r3
 800a998:	f7f7 fa54 	bl	8001e44 <_lseek>
 800a99c:	1c43      	adds	r3, r0, #1
 800a99e:	d102      	bne.n	800a9a6 <_lseek_r+0x1e>
 800a9a0:	682b      	ldr	r3, [r5, #0]
 800a9a2:	b103      	cbz	r3, 800a9a6 <_lseek_r+0x1e>
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	bd38      	pop	{r3, r4, r5, pc}
 800a9a8:	20000834 	.word	0x20000834

0800a9ac <_read_r>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	4d07      	ldr	r5, [pc, #28]	; (800a9cc <_read_r+0x20>)
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	4608      	mov	r0, r1
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	602a      	str	r2, [r5, #0]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	f7f7 f9e2 	bl	8001d84 <_read>
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	d102      	bne.n	800a9ca <_read_r+0x1e>
 800a9c4:	682b      	ldr	r3, [r5, #0]
 800a9c6:	b103      	cbz	r3, 800a9ca <_read_r+0x1e>
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
 800a9cc:	20000834 	.word	0x20000834

0800a9d0 <_init>:
 800a9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d2:	bf00      	nop
 800a9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9d6:	bc08      	pop	{r3}
 800a9d8:	469e      	mov	lr, r3
 800a9da:	4770      	bx	lr

0800a9dc <_fini>:
 800a9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9de:	bf00      	nop
 800a9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9e2:	bc08      	pop	{r3}
 800a9e4:	469e      	mov	lr, r3
 800a9e6:	4770      	bx	lr
