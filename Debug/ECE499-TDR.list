
ECE499-TDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009710  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  080098f0  080098f0  000198f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009da4  08009da4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009da4  08009da4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009da4  08009da4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009da4  08009da4  00019da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009da8  08009da8  00019da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  200001e0  08009f8c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08009f8c  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001677e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033fb  00000000  00000000  0003698e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00039d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  0003b2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000552a  00000000  00000000  0003c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a855  00000000  00000000  00041b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca053  00000000  00000000  0005c397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001263ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d30  00000000  00000000  0012643c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080098d8 	.word	0x080098d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	080098d8 	.word	0x080098d8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <TDC7200_WriteRegister>:
#include <stdint.h>

extern SPI_HandleTypeDef hspi1; //declared in OG SPI source/header file generated by CubeMX IDE

uint8_t TDC7200_WriteRegister(uint8_t reg, uint8_t* dataToWrite)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
	//select this slave device, CS = 0
	HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f001 fdcf 	bl	80028fc <HAL_GPIO_WritePin>

	uint8_t combinedJuicer[2];
	combinedJuicer[0] = reg;
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	733b      	strb	r3, [r7, #12]
	combinedJuicer[1] = *dataToWrite;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	737b      	strb	r3, [r7, #13]
	/*	Tx 2 bytes to TDC:
			Byte 1: Contains the read/write/auto-increment command bits and desired register to access
			Byte 2: Contains the data in which we want to write into desired register
	*/
	//Tx data via SPI API, if SPI txn fails (ie: != HAL_OK), return -1
	if((HAL_SPI_Transmit(&hspi1, combinedJuicer, 2, HAL_MAX_DELAY)) != HAL_OK)
 8000d68:	f107 010c 	add.w	r1, r7, #12
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	2202      	movs	r2, #2
 8000d72:	480a      	ldr	r0, [pc, #40]	; (8000d9c <TDC7200_WriteRegister+0x58>)
 8000d74:	f002 ff47 	bl	8003c06 <HAL_SPI_Transmit>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <TDC7200_WriteRegister+0x3e>
		return -1;
 8000d7e:	23ff      	movs	r3, #255	; 0xff
 8000d80:	e007      	b.n	8000d92 <TDC7200_WriteRegister+0x4e>

	//de-select this slave device, set CS line HIGH/1
	HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8c:	f001 fdb6 	bl	80028fc <HAL_GPIO_WritePin>

	return 0;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000025c 	.word	0x2000025c

08000da0 <TDC7200_Read_N_Registers>:



double TDC7200_Read_N_Registers(uint8_t regToRead, uint8_t n)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
	//Note: the TDC chip reads from 1 register (1byte) or 3 registers if AutoIncr bit cmd is used (ie: 3bytes)
	//User chooses whether to send n=1 or n=3 into this function depending on what register(s) they want to read from


	uint8_t	rxSpiData[3]; //this array will hold either 1 or 3 bytes of data sent from TDC register(s)
	uint32_t processedData = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
	double finalResult = 0;
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t regAndOpcode = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	72fb      	strb	r3, [r7, #11]


	if (n == 3) //ie: if reading more than 1 byte..(ex: 3), enable auto_incr cmd bit and read cmd bit
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d105      	bne.n	8000dd6 <TDC7200_Read_N_Registers+0x36>
		regAndOpcode = regToRead | TDC_READ_CMD | TDC_AUTO_INCR;
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	72fb      	strb	r3, [r7, #11]
 8000dd4:	e001      	b.n	8000dda <TDC7200_Read_N_Registers+0x3a>

	else //if reading 1 byte, simply attach read cmd bit, no auto incr
		regAndOpcode = regToRead | TDC_READ_CMD;
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	72fb      	strb	r3, [r7, #11]

	//select this slave device, CS = 0
	HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f001 fd8a 	bl	80028fc <HAL_GPIO_WritePin>

	//Tx data via SPI API, if SPI txn fails (ie: != HAL_OK), return -1
	if((HAL_SPI_Transmit(&hspi1, &regAndOpcode, 1, HAL_MAX_DELAY)) != HAL_OK)
 8000de8:	f107 010b 	add.w	r1, r7, #11
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	2201      	movs	r2, #1
 8000df2:	4821      	ldr	r0, [pc, #132]	; (8000e78 <TDC7200_Read_N_Registers+0xd8>)
 8000df4:	f002 ff07 	bl	8003c06 <HAL_SPI_Transmit>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <TDC7200_Read_N_Registers+0x66>
		return -1;
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <TDC7200_Read_N_Registers+0xdc>)
 8000e04:	e02f      	b.n	8000e66 <TDC7200_Read_N_Registers+0xc6>

	//Rx data via SPI API, if SPI rxn fails (ie: != HAL_OK), return -1
	if((HAL_SPI_Receive(&hspi1, rxSpiData, n, 2000)) != HAL_OK)
 8000e06:	79bb      	ldrb	r3, [r7, #6]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	f107 010c 	add.w	r1, r7, #12
 8000e0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e12:	4819      	ldr	r0, [pc, #100]	; (8000e78 <TDC7200_Read_N_Registers+0xd8>)
 8000e14:	f003 f865 	bl	8003ee2 <HAL_SPI_Receive>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <TDC7200_Read_N_Registers+0x86>
		return -1;
 8000e1e:	f04f 0200 	mov.w	r2, #0
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <TDC7200_Read_N_Registers+0xdc>)
 8000e24:	e01f      	b.n	8000e66 <TDC7200_Read_N_Registers+0xc6>


	if(n == 1)
 8000e26:	79bb      	ldrb	r3, [r7, #6]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d101      	bne.n	8000e30 <TDC7200_Read_N_Registers+0x90>
		processedData = rxSpiData[0];
 8000e2c:	7b3b      	ldrb	r3, [r7, #12]
 8000e2e:	61fb      	str	r3, [r7, #28]
	if(n==3)
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d107      	bne.n	8000e46 <TDC7200_Read_N_Registers+0xa6>
		processedData = (rxSpiData[0] << 16) | (rxSpiData[1] << 8) | (rxSpiData[0] << 0);
 8000e36:	7b3b      	ldrb	r3, [r7, #12]
 8000e38:	041a      	lsls	r2, r3, #16
 8000e3a:	7b7b      	ldrb	r3, [r7, #13]
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	7b3a      	ldrb	r2, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61fb      	str	r3, [r7, #28]


	finalResult = processedData;
 8000e46:	69f8      	ldr	r0, [r7, #28]
 8000e48:	f7ff fb84 	bl	8000554 <__aeabi_ui2d>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	e9c7 2304 	strd	r2, r3, [r7, #16]

	HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_SET); //release SPI CS line, un-select this slave device
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5e:	f001 fd4d 	bl	80028fc <HAL_GPIO_WritePin>
	return finalResult;
 8000e62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8000e66:	ec43 2b17 	vmov	d7, r2, r3
 8000e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8000e6e:	eef0 0a67 	vmov.f32	s1, s15
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	2000025c 	.word	0x2000025c
 8000e7c:	bff00000 	.word	0xbff00000

08000e80 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08c      	sub	sp, #48	; 0x30
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	2230      	movs	r2, #48	; 0x30
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 f8ab 	bl	8004fe8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_DAC1_Init+0x80>)
 8000e94:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <MX_DAC1_Init+0x84>)
 8000e96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e98:	4819      	ldr	r0, [pc, #100]	; (8000f00 <MX_DAC1_Init+0x80>)
 8000e9a:	f000 fff0 	bl	8001e7e <HAL_DAC_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ea4:	f000 fad5 	bl	8001452 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8000eb8:	230a      	movs	r3, #10
 8000eba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <MX_DAC1_Init+0x80>)
 8000ed4:	f000 fff6 	bl	8001ec4 <HAL_DAC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000ede:	f000 fab8 	bl	8001452 <Error_Handler>
  }

  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_2047) != HAL_OK)
 8000ee2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_DAC1_Init+0x80>)
 8000eea:	f001 f993 	bl	8002214 <HAL_DACEx_TriangleWaveGenerate>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000ef4:	f000 faad 	bl	8001452 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3730      	adds	r7, #48	; 0x30
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200001fc 	.word	0x200001fc
 8000f04:	50000800 	.word	0x50000800

08000f08 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <HAL_DAC_MspInit+0x74>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d124      	bne.n	8000f74 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_DAC_MspInit+0x78>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <HAL_DAC_MspInit+0x78>)
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_DAC_MspInit+0x78>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_DAC_MspInit+0x78>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_DAC_MspInit+0x78>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_DAC_MspInit+0x78>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f70:	f001 fb42 	bl	80025f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	; 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	50000800 	.word	0x50000800
 8000f80:	40021000 	.word	0x40021000

08000f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <MX_DMA_Init+0x50>)
 8000f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f8e:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <MX_DMA_Init+0x50>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6493      	str	r3, [r2, #72]	; 0x48
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_DMA_Init+0x50>)
 8000f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_DMA_Init+0x50>)
 8000fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <MX_DMA_Init+0x50>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6493      	str	r3, [r2, #72]	; 0x48
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_DMA_Init+0x50>)
 8000fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	200c      	movs	r0, #12
 8000fc0:	f000 ff29 	bl	8001e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000fc4:	200c      	movs	r0, #12
 8000fc6:	f000 ff40 	bl	8001e4a <HAL_NVIC_EnableIRQ>

}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fee:	4b6c      	ldr	r3, [pc, #432]	; (80011a0 <MX_GPIO_Init+0x1c8>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a6b      	ldr	r2, [pc, #428]	; (80011a0 <MX_GPIO_Init+0x1c8>)
 8000ff4:	f043 0320 	orr.w	r3, r3, #32
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b69      	ldr	r3, [pc, #420]	; (80011a0 <MX_GPIO_Init+0x1c8>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0320 	and.w	r3, r3, #32
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001006:	4b66      	ldr	r3, [pc, #408]	; (80011a0 <MX_GPIO_Init+0x1c8>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a65      	ldr	r2, [pc, #404]	; (80011a0 <MX_GPIO_Init+0x1c8>)
 800100c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b63      	ldr	r3, [pc, #396]	; (80011a0 <MX_GPIO_Init+0x1c8>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b60      	ldr	r3, [pc, #384]	; (80011a0 <MX_GPIO_Init+0x1c8>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a5f      	ldr	r2, [pc, #380]	; (80011a0 <MX_GPIO_Init+0x1c8>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b5d      	ldr	r3, [pc, #372]	; (80011a0 <MX_GPIO_Init+0x1c8>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b5a      	ldr	r3, [pc, #360]	; (80011a0 <MX_GPIO_Init+0x1c8>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a59      	ldr	r2, [pc, #356]	; (80011a0 <MX_GPIO_Init+0x1c8>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b57      	ldr	r3, [pc, #348]	; (80011a0 <MX_GPIO_Init+0x1c8>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TDC7200_EN_GPIO_Port, TDC7200_EN_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2101      	movs	r1, #1
 8001052:	4854      	ldr	r0, [pc, #336]	; (80011a4 <MX_GPIO_Init+0x1cc>)
 8001054:	f001 fc52 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADXL345_Pin|TDC7200_CS_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f001 fc4b 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TDC7200_TRIG_GPIO_Port, TDC7200_TRIG_Pin, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	2140      	movs	r1, #64	; 0x40
 800106a:	484f      	ldr	r0, [pc, #316]	; (80011a8 <MX_GPIO_Init+0x1d0>)
 800106c:	f001 fc46 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	484c      	ldr	r0, [pc, #304]	; (80011a8 <MX_GPIO_Init+0x1d0>)
 8001078:	f001 fc40 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDC7200_EN_Pin;
 800107c:	2301      	movs	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TDC7200_EN_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4844      	ldr	r0, [pc, #272]	; (80011a4 <MX_GPIO_Init+0x1cc>)
 8001094:	f001 fab0 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001098:	2302      	movs	r3, #2
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109c:	2303      	movs	r3, #3
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	483e      	ldr	r0, [pc, #248]	; (80011a4 <MX_GPIO_Init+0x1cc>)
 80010ac:	f001 faa4 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b6:	2303      	movs	r3, #3
 80010b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4839      	ldr	r0, [pc, #228]	; (80011ac <MX_GPIO_Init+0x1d4>)
 80010c6:	f001 fa97 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA5 PA6 PA7 PA8
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010ca:	f240 53ef 	movw	r3, #1519	; 0x5ef
 80010ce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d0:	2303      	movs	r3, #3
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f001 fa89 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_SIG_IN_Pin;
 80010e6:	2301      	movs	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PULSE_SIG_IN_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	482b      	ldr	r0, [pc, #172]	; (80011a8 <MX_GPIO_Init+0x1d0>)
 80010fa:	f001 fa7d 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADXL345_Pin;
 80010fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADXL345_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f001 fa6d 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDC7200_CS_Pin;
 800111e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TDC7200_CS_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f001 fa5d 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDC7200_INT_Pin;
 800113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001144:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TDC7200_INT_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001158:	f001 fa4e 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDC7200_TRIG_Pin;
 800115c:	2340      	movs	r3, #64	; 0x40
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001168:	2302      	movs	r3, #2
 800116a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TDC7200_TRIG_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <MX_GPIO_Init+0x1d0>)
 8001174:	f001 fa40 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_GPIO_Init+0x1d0>)
 8001192:	f001 fa31 	bl	80025f8 <HAL_GPIO_Init>

}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	; 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48001400 	.word	0x48001400
 80011a8:	48000400 	.word	0x48000400
 80011ac:	48001800 	.word	0x48001800

080011b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_I2C1_Init+0x74>)
 80011b6:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <MX_I2C1_Init+0x78>)
 80011b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_I2C1_Init+0x74>)
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <MX_I2C1_Init+0x7c>)
 80011be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MX_I2C1_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_I2C1_Init+0x74>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_I2C1_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_I2C1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_I2C1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ea:	480e      	ldr	r0, [pc, #56]	; (8001224 <MX_I2C1_Init+0x74>)
 80011ec:	f001 fb9e 	bl	800292c <HAL_I2C_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011f6:	f000 f92c 	bl	8001452 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fa:	2100      	movs	r1, #0
 80011fc:	4809      	ldr	r0, [pc, #36]	; (8001224 <MX_I2C1_Init+0x74>)
 80011fe:	f001 fc24 	bl	8002a4a <HAL_I2CEx_ConfigAnalogFilter>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001208:	f000 f923 	bl	8001452 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800120c:	2100      	movs	r1, #0
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_I2C1_Init+0x74>)
 8001210:	f001 fc66 	bl	8002ae0 <HAL_I2CEx_ConfigDigitalFilter>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800121a:	f000 f91a 	bl	8001452 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000210 	.word	0x20000210
 8001228:	40005400 	.word	0x40005400
 800122c:	10802d9b 	.word	0x10802d9b

08001230 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b09c      	sub	sp, #112	; 0x70
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	2244      	movs	r2, #68	; 0x44
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fec9 	bl	8004fe8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a2d      	ldr	r2, [pc, #180]	; (8001310 <HAL_I2C_MspInit+0xe0>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d153      	bne.n	8001308 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001260:	2340      	movs	r3, #64	; 0x40
 8001262:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001264:	2300      	movs	r3, #0
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fa2f 	bl	80036d0 <HAL_RCCEx_PeriphCLKConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001278:	f000 f8eb 	bl	8001452 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <HAL_I2C_MspInit+0xe4>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001280:	4a24      	ldr	r2, [pc, #144]	; (8001314 <HAL_I2C_MspInit+0xe4>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <HAL_I2C_MspInit+0xe4>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001294:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <HAL_I2C_MspInit+0xe4>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <HAL_I2C_MspInit+0xe4>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <HAL_I2C_MspInit+0xe4>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b2:	2312      	movs	r3, #18
 80012b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012be:	2304      	movs	r3, #4
 80012c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012cc:	f001 f994 	bl	80025f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d4:	2312      	movs	r3, #18
 80012d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e0:	2304      	movs	r3, #4
 80012e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012e8:	4619      	mov	r1, r3
 80012ea:	480b      	ldr	r0, [pc, #44]	; (8001318 <HAL_I2C_MspInit+0xe8>)
 80012ec:	f001 f984 	bl	80025f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_I2C_MspInit+0xe4>)
 80012f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_I2C_MspInit+0xe4>)
 80012f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fa:	6593      	str	r3, [r2, #88]	; 0x58
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_I2C_MspInit+0xe4>)
 80012fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001308:	bf00      	nop
 800130a:	3770      	adds	r7, #112	; 0x70
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40005400 	.word	0x40005400
 8001314:	40021000 	.word	0x40021000
 8001318:	48000400 	.word	0x48000400
 800131c:	00000000 	.word	0x00000000

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001326:	f000 fc08 	bl	8001b3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132a:	f000 f847 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132e:	f7ff fe53 	bl	8000fd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001332:	f7ff fe27 	bl	8000f84 <MX_DMA_Init>
  MX_I2C1_Init();
 8001336:	f7ff ff3b 	bl	80011b0 <MX_I2C1_Init>
  MX_DAC1_Init();
 800133a:	f7ff fda1 	bl	8000e80 <MX_DAC1_Init>
  MX_TIM6_Init();
 800133e:	f000 fad9 	bl	80018f4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001342:	f000 fb17 	bl	8001974 <MX_TIM7_Init>
  MX_TIM3_Init();
 8001346:	f000 fa87 	bl	8001858 <MX_TIM3_Init>
  MX_TIM2_Init();
 800134a:	f000 fa39 	bl	80017c0 <MX_TIM2_Init>
  MX_SPI1_Init();
 800134e:	f000 f885 	bl	800145c <MX_SPI1_Init>
//	SSD1306_Init();
//	OLED_Startup();
//	HAL_Delay(2000);
//	SSD1306_Clear();

  HAL_GPIO_WritePin(TDC7200_EN_GPIO_Port, TDC7200_EN_Pin, 1);
 8001352:	2201      	movs	r2, #1
 8001354:	2101      	movs	r1, #1
 8001356:	4818      	ldr	r0, [pc, #96]	; (80013b8 <main+0x98>)
 8001358:	f001 fad0 	bl	80028fc <HAL_GPIO_WritePin>
  HAL_Delay(250);
 800135c:	20fa      	movs	r0, #250	; 0xfa
 800135e:	f000 fc5d 	bl	8001c1c <HAL_Delay>
  HAL_GPIO_WritePin(TDC7200_EN_GPIO_Port, TDC7200_EN_Pin, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2101      	movs	r1, #1
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <main+0x98>)
 8001368:	f001 fac8 	bl	80028fc <HAL_GPIO_WritePin>
  HAL_Delay(250);
 800136c:	20fa      	movs	r0, #250	; 0xfa
 800136e:	f000 fc55 	bl	8001c1c <HAL_Delay>
	uint8_t juice = TDC_READ_CMD | MEASURE_MODE_2 | START_EDGE_RISING | STOP_EDGE_FALLING;
 8001372:	2312      	movs	r3, #18
 8001374:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(TDC7200_EN_GPIO_Port, TDC7200_EN_Pin, 1);
 8001376:	2201      	movs	r2, #1
 8001378:	2101      	movs	r1, #1
 800137a:	480f      	ldr	r0, [pc, #60]	; (80013b8 <main+0x98>)
 800137c:	f001 fabe 	bl	80028fc <HAL_GPIO_WritePin>

  //HAL_Delay(500);
	TDC7200_WriteRegister(TDC_CONFIG1, &juice);
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	4619      	mov	r1, r3
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff fcdd 	bl	8000d44 <TDC7200_WriteRegister>
  //HAL_Delay(500);
  double idk = 99;
 800138a:	a309      	add	r3, pc, #36	; (adr r3, 80013b0 <main+0x90>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	e9c7 2302 	strd	r2, r3, [r7, #8]
  idk = TDC7200_Read_N_Registers(TDC_CONFIG2, 1);
 8001394:	2101      	movs	r1, #1
 8001396:	2001      	movs	r0, #1
 8001398:	f7ff fd02 	bl	8000da0 <TDC7200_Read_N_Registers>
 800139c:	ed87 0b02 	vstr	d0, [r7, #8]
//		sprintf(buff, "Z: %0.2f", accelDevice.acc_mps2[2]);
//		SSD1306_Puts(buff, &Font_7x10, 1);
//
//		SSD1306_UpdateScreen();

		HAL_Delay(1000);
 80013a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a4:	f000 fc3a 	bl	8001c1c <HAL_Delay>
 80013a8:	e7fa      	b.n	80013a0 <main+0x80>
 80013aa:	bf00      	nop
 80013ac:	f3af 8000 	nop.w
 80013b0:	00000000 	.word	0x00000000
 80013b4:	4058c000 	.word	0x4058c000
 80013b8:	48001400 	.word	0x48001400

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	; 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	2238      	movs	r2, #56	; 0x38
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fe0c 	bl	8004fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013de:	2000      	movs	r0, #0
 80013e0:	f001 fbca 	bl	8002b78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e4:	2302      	movs	r3, #2
 80013e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ee:	2340      	movs	r3, #64	; 0x40
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f2:	2302      	movs	r3, #2
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f6:	2302      	movs	r3, #2
 80013f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80013fa:	2304      	movs	r3, #4
 80013fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80013fe:	2355      	movs	r3, #85	; 0x55
 8001400:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001402:	2302      	movs	r3, #2
 8001404:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001406:	2302      	movs	r3, #2
 8001408:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800140a:	2302      	movs	r3, #2
 800140c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140e:	f107 0318 	add.w	r3, r7, #24
 8001412:	4618      	mov	r0, r3
 8001414:	f001 fc54 	bl	8002cc0 <HAL_RCC_OscConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800141e:	f000 f818 	bl	8001452 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001422:	230f      	movs	r3, #15
 8001424:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001426:	2303      	movs	r3, #3
 8001428:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2104      	movs	r1, #4
 800143a:	4618      	mov	r0, r3
 800143c:	f001 ff58 	bl	80032f0 <HAL_RCC_ClockConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001446:	f000 f804 	bl	8001452 <Error_Handler>
  }
}
 800144a:	bf00      	nop
 800144c:	3750      	adds	r7, #80	; 0x50
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001456:	b672      	cpsid	i
}
 8001458:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1)
 800145a:	e7fe      	b.n	800145a <Error_Handler+0x8>

0800145c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <MX_SPI1_Init+0x74>)
 8001462:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <MX_SPI1_Init+0x78>)
 8001464:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_SPI1_Init+0x74>)
 8001468:	f44f 7282 	mov.w	r2, #260	; 0x104
 800146c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <MX_SPI1_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001474:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <MX_SPI1_Init+0x74>)
 8001476:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800147a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_SPI1_Init+0x74>)
 800147e:	2202      	movs	r2, #2
 8001480:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <MX_SPI1_Init+0x74>)
 8001484:	2201      	movs	r2, #1
 8001486:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_SPI1_Init+0x74>)
 800148a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_SPI1_Init+0x74>)
 8001492:	2218      	movs	r2, #24
 8001494:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_SPI1_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_SPI1_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_SPI1_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_SPI1_Init+0x74>)
 80014aa:	2207      	movs	r2, #7
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_SPI1_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_SPI1_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_SPI1_Init+0x74>)
 80014bc:	f002 faf8 	bl	8003ab0 <HAL_SPI_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014c6:	f7ff ffc4 	bl	8001452 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000025c 	.word	0x2000025c
 80014d4:	40013000 	.word	0x40013000

080014d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_SPI_MspInit+0x7c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d127      	bne.n	800154a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_SPI_MspInit+0x80>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fe:	4a16      	ldr	r2, [pc, #88]	; (8001558 <HAL_SPI_MspInit+0x80>)
 8001500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001504:	6613      	str	r3, [r2, #96]	; 0x60
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_SPI_MspInit+0x80>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_SPI_MspInit+0x80>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <HAL_SPI_MspInit+0x80>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_SPI_MspInit+0x80>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800152a:	2338      	movs	r3, #56	; 0x38
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800153a:	2305      	movs	r3, #5
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <HAL_SPI_MspInit+0x84>)
 8001546:	f001 f857 	bl	80025f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40013000 	.word	0x40013000
 8001558:	40021000 	.word	0x40021000
 800155c:	48000400 	.word	0x48000400

08001560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_MspInit+0x44>)
 8001568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156a:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <HAL_MspInit+0x44>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6613      	str	r3, [r2, #96]	; 0x60
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_MspInit+0x44>)
 8001574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_MspInit+0x44>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <HAL_MspInit+0x44>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6593      	str	r3, [r2, #88]	; 0x58
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_MspInit+0x44>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <NMI_Handler+0x4>

080015ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <MemManage_Handler+0x4>

080015ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f4:	f000 faf4 	bl	8001be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}

080015fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <DMA1_Channel2_IRQHandler+0x10>)
 8001602:	f000 fee7 	bl	80023d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200003f4 	.word	0x200003f4

08001610 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return 1;
 8001614:	2301      	movs	r3, #1
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_kill>:

int _kill(int pid, int sig)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800162a:	f003 fcb3 	bl	8004f94 <__errno>
 800162e:	4603      	mov	r3, r0
 8001630:	2216      	movs	r2, #22
 8001632:	601a      	str	r2, [r3, #0]
  return -1;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_exit>:

void _exit (int status)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001648:	f04f 31ff 	mov.w	r1, #4294967295
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ffe7 	bl	8001620 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001652:	e7fe      	b.n	8001652 <_exit+0x12>

08001654 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e00a      	b.n	800167c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001666:	f3af 8000 	nop.w
 800166a:	4601      	mov	r1, r0
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	60ba      	str	r2, [r7, #8]
 8001672:	b2ca      	uxtb	r2, r1
 8001674:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3301      	adds	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	dbf0      	blt.n	8001666 <_read+0x12>
  }

  return len;
 8001684:	687b      	ldr	r3, [r7, #4]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e009      	b.n	80016b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	60ba      	str	r2, [r7, #8]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbf1      	blt.n	80016a0 <_write+0x12>
  }
  return len;
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_close>:

int _close(int file)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ee:	605a      	str	r2, [r3, #4]
  return 0;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_isatty>:

int _isatty(int file)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f003 fc18 	bl	8004f94 <__errno>
 8001764:	4603      	mov	r3, r0
 8001766:	220c      	movs	r2, #12
 8001768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <_sbrk+0x64>)
 8001780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20008000 	.word	0x20008000
 8001790:	00000400 	.word	0x00000400
 8001794:	200002c0 	.word	0x200002c0
 8001798:	20000468 	.word	0x20000468

0800179c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <SystemInit+0x20>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <SystemInit+0x20>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
DMA_HandleTypeDef hdma_tim2_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <MX_TIM2_Init+0x94>)
 80017e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <MX_TIM2_Init+0x94>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MX_TIM2_Init+0x94>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <MX_TIM2_Init+0x94>)
 80017f4:	2204      	movs	r2, #4
 80017f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <MX_TIM2_Init+0x94>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <MX_TIM2_Init+0x94>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001804:	4813      	ldr	r0, [pc, #76]	; (8001854 <MX_TIM2_Init+0x94>)
 8001806:	f003 f86b 	bl	80048e0 <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001810:	f7ff fe1f 	bl	8001452 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001818:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800181a:	f107 0310 	add.w	r3, r7, #16
 800181e:	4619      	mov	r1, r3
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <MX_TIM2_Init+0x94>)
 8001822:	f003 f90f 	bl	8004a44 <HAL_TIM_ConfigClockSource>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800182c:	f7ff fe11 	bl	8001452 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001830:	2320      	movs	r3, #32
 8001832:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_TIM2_Init+0x94>)
 800183e:	f003 fb27 	bl	8004e90 <HAL_TIMEx_MasterConfigSynchronization>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001848:	f7ff fe03 	bl	8001452 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200002c4 	.word	0x200002c4

08001858 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001876:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <MX_TIM3_Init+0x94>)
 8001878:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <MX_TIM3_Init+0x98>)
 800187a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <MX_TIM3_Init+0x94>)
 800187e:	2200      	movs	r2, #0
 8001880:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <MX_TIM3_Init+0x94>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 84;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_TIM3_Init+0x94>)
 800188a:	2254      	movs	r2, #84	; 0x54
 800188c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <MX_TIM3_Init+0x94>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <MX_TIM3_Init+0x94>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800189a:	4814      	ldr	r0, [pc, #80]	; (80018ec <MX_TIM3_Init+0x94>)
 800189c:	f003 f820 	bl	80048e0 <HAL_TIM_Base_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80018a6:	f7ff fdd4 	bl	8001452 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	4619      	mov	r1, r3
 80018b6:	480d      	ldr	r0, [pc, #52]	; (80018ec <MX_TIM3_Init+0x94>)
 80018b8:	f003 f8c4 	bl	8004a44 <HAL_TIM_ConfigClockSource>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80018c2:	f7ff fdc6 	bl	8001452 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018c6:	2320      	movs	r3, #32
 80018c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	4619      	mov	r1, r3
 80018d2:	4806      	ldr	r0, [pc, #24]	; (80018ec <MX_TIM3_Init+0x94>)
 80018d4:	f003 fadc 	bl	8004e90 <HAL_TIMEx_MasterConfigSynchronization>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80018de:	f7ff fdb8 	bl	8001452 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	3720      	adds	r7, #32
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000310 	.word	0x20000310
 80018f0:	40000400 	.word	0x40000400

080018f4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <MX_TIM6_Init+0x78>)
 8001906:	4a1a      	ldr	r2, [pc, #104]	; (8001970 <MX_TIM6_Init+0x7c>)
 8001908:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40000-1;
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <MX_TIM6_Init+0x78>)
 800190c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001910:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <MX_TIM6_Init+0x78>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20999;
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <MX_TIM6_Init+0x78>)
 800191a:	f245 2207 	movw	r2, #20999	; 0x5207
 800191e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <MX_TIM6_Init+0x78>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001926:	4811      	ldr	r0, [pc, #68]	; (800196c <MX_TIM6_Init+0x78>)
 8001928:	f002 ffda 	bl	80048e0 <HAL_TIM_Base_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001932:	f7ff fd8e 	bl	8001452 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8001936:	2108      	movs	r1, #8
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <MX_TIM6_Init+0x78>)
 800193a:	f003 f828 	bl	800498e <HAL_TIM_OnePulse_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM6_Init+0x54>
  {
    Error_Handler();
 8001944:	f7ff fd85 	bl	8001452 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_TIM6_Init+0x78>)
 8001956:	f003 fa9b 	bl	8004e90 <HAL_TIMEx_MasterConfigSynchronization>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM6_Init+0x70>
  {
    Error_Handler();
 8001960:	f7ff fd77 	bl	8001452 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2000035c 	.word	0x2000035c
 8001970:	40001000 	.word	0x40001000

08001974 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <MX_TIM7_Init+0x64>)
 8001986:	4a15      	ldr	r2, [pc, #84]	; (80019dc <MX_TIM7_Init+0x68>)
 8001988:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1-1;
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <MX_TIM7_Init+0x64>)
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <MX_TIM7_Init+0x64>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 84;
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <MX_TIM7_Init+0x64>)
 8001998:	2254      	movs	r2, #84	; 0x54
 800199a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <MX_TIM7_Init+0x64>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019a2:	480d      	ldr	r0, [pc, #52]	; (80019d8 <MX_TIM7_Init+0x64>)
 80019a4:	f002 ff9c 	bl	80048e0 <HAL_TIM_Base_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80019ae:	f7ff fd50 	bl	8001452 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019b2:	2320      	movs	r3, #32
 80019b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	4619      	mov	r1, r3
 80019be:	4806      	ldr	r0, [pc, #24]	; (80019d8 <MX_TIM7_Init+0x64>)
 80019c0:	f003 fa66 	bl	8004e90 <HAL_TIMEx_MasterConfigSynchronization>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80019ca:	f7ff fd42 	bl	8001452 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200003a8 	.word	0x200003a8
 80019dc:	40001400 	.word	0x40001400

080019e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f0:	d135      	bne.n	8001a5e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019f2:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <HAL_TIM_Base_MspInit+0xf0>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	4a36      	ldr	r2, [pc, #216]	; (8001ad0 <HAL_TIM_Base_MspInit+0xf0>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6593      	str	r3, [r2, #88]	; 0x58
 80019fe:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <HAL_TIM_Base_MspInit+0xf0>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8001a0a:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <HAL_TIM_Base_MspInit+0xf4>)
 8001a0c:	4a32      	ldr	r2, [pc, #200]	; (8001ad8 <HAL_TIM_Base_MspInit+0xf8>)
 8001a0e:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 8001a10:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <HAL_TIM_Base_MspInit+0xf4>)
 8001a12:	223c      	movs	r2, #60	; 0x3c
 8001a14:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_TIM_Base_MspInit+0xf4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <HAL_TIM_Base_MspInit+0xf4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8001a22:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <HAL_TIM_Base_MspInit+0xf4>)
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a28:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <HAL_TIM_Base_MspInit+0xf4>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a2e:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <HAL_TIM_Base_MspInit+0xf4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8001a34:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <HAL_TIM_Base_MspInit+0xf4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8001a3a:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <HAL_TIM_Base_MspInit+0xf4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8001a40:	4824      	ldr	r0, [pc, #144]	; (8001ad4 <HAL_TIM_Base_MspInit+0xf4>)
 8001a42:	f000 fc1f 	bl	8002284 <HAL_DMA_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8001a4c:	f7ff fd01 	bl	8001452 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a20      	ldr	r2, [pc, #128]	; (8001ad4 <HAL_TIM_Base_MspInit+0xf4>)
 8001a54:	621a      	str	r2, [r3, #32]
 8001a56:	4a1f      	ldr	r2, [pc, #124]	; (8001ad4 <HAL_TIM_Base_MspInit+0xf4>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001a5c:	e034      	b.n	8001ac8 <HAL_TIM_Base_MspInit+0xe8>
  else if(tim_baseHandle->Instance==TIM3)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <HAL_TIM_Base_MspInit+0xfc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d10c      	bne.n	8001a82 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_TIM_Base_MspInit+0xf0>)
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6c:	4a18      	ldr	r2, [pc, #96]	; (8001ad0 <HAL_TIM_Base_MspInit+0xf0>)
 8001a6e:	f043 0302 	orr.w	r3, r3, #2
 8001a72:	6593      	str	r3, [r2, #88]	; 0x58
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_TIM_Base_MspInit+0xf0>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693b      	ldr	r3, [r7, #16]
}
 8001a80:	e022      	b.n	8001ac8 <HAL_TIM_Base_MspInit+0xe8>
  else if(tim_baseHandle->Instance==TIM6)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a16      	ldr	r2, [pc, #88]	; (8001ae0 <HAL_TIM_Base_MspInit+0x100>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d10c      	bne.n	8001aa6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_TIM_Base_MspInit+0xf0>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	4a0f      	ldr	r2, [pc, #60]	; (8001ad0 <HAL_TIM_Base_MspInit+0xf0>)
 8001a92:	f043 0310 	orr.w	r3, r3, #16
 8001a96:	6593      	str	r3, [r2, #88]	; 0x58
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <HAL_TIM_Base_MspInit+0xf0>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
}
 8001aa4:	e010      	b.n	8001ac8 <HAL_TIM_Base_MspInit+0xe8>
  else if(tim_baseHandle->Instance==TIM7)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_TIM_Base_MspInit+0x104>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d10b      	bne.n	8001ac8 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_TIM_Base_MspInit+0xf0>)
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <HAL_TIM_Base_MspInit+0xf0>)
 8001ab6:	f043 0320 	orr.w	r3, r3, #32
 8001aba:	6593      	str	r3, [r2, #88]	; 0x58
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <HAL_TIM_Base_MspInit+0xf0>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
}
 8001ac8:	bf00      	nop
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	200003f4 	.word	0x200003f4
 8001ad8:	4002001c 	.word	0x4002001c
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	40001000 	.word	0x40001000
 8001ae4:	40001400 	.word	0x40001400

08001ae8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ae8:	480d      	ldr	r0, [pc, #52]	; (8001b20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aec:	480d      	ldr	r0, [pc, #52]	; (8001b24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aee:	490e      	ldr	r1, [pc, #56]	; (8001b28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001af0:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <LoopForever+0xe>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b04:	4c0b      	ldr	r4, [pc, #44]	; (8001b34 <LoopForever+0x16>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b12:	f7ff fe43 	bl	800179c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b16:	f003 fa43 	bl	8004fa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b1a:	f7ff fc01 	bl	8001320 <main>

08001b1e <LoopForever>:

LoopForever:
    b LoopForever
 8001b1e:	e7fe      	b.n	8001b1e <LoopForever>
  ldr   r0, =_estack
 8001b20:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b28:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b2c:	08009dac 	.word	0x08009dac
  ldr r2, =_sbss
 8001b30:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b34:	20000468 	.word	0x20000468

08001b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b38:	e7fe      	b.n	8001b38 <ADC1_2_IRQHandler>

08001b3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f000 f95b 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f000 f80e 	bl	8001b6c <HAL_InitTick>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	71fb      	strb	r3, [r7, #7]
 8001b5a:	e001      	b.n	8001b60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b5c:	f7ff fd00 	bl	8001560 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b60:	79fb      	ldrb	r3, [r7, #7]

}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <HAL_InitTick+0x68>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d022      	beq.n	8001bc6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_InitTick+0x6c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <HAL_InitTick+0x68>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 f966 	bl	8001e66 <HAL_SYSTICK_Config>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10f      	bne.n	8001bc0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b0f      	cmp	r3, #15
 8001ba4:	d809      	bhi.n	8001bba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	f04f 30ff 	mov.w	r0, #4294967295
 8001bae:	f000 f932 	bl	8001e16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <HAL_InitTick+0x70>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	e007      	b.n	8001bca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	e004      	b.n	8001bca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	e001      	b.n	8001bca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000008 	.word	0x20000008
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000004 	.word	0x20000004

08001be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_IncTick+0x1c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_IncTick+0x20>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4413      	add	r3, r2
 8001bee:	4a03      	ldr	r2, [pc, #12]	; (8001bfc <HAL_IncTick+0x1c>)
 8001bf0:	6013      	str	r3, [r2, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	20000454 	.word	0x20000454
 8001c00:	20000008 	.word	0x20000008

08001c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return uwTick;
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_GetTick+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000454 	.word	0x20000454

08001c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c24:	f7ff ffee 	bl	8001c04 <HAL_GetTick>
 8001c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c34:	d004      	beq.n	8001c40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_Delay+0x40>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c40:	bf00      	nop
 8001c42:	f7ff ffdf 	bl	8001c04 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d8f7      	bhi.n	8001c42 <HAL_Delay+0x26>
  {
  }
}
 8001c52:	bf00      	nop
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000008 	.word	0x20000008

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4907      	ldr	r1, [pc, #28]	; (8001cfc <__NVIC_EnableIRQ+0x38>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	; (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	; (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
         );
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f7ff ff8e 	bl	8001d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff29 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff40 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff90 	bl	8001d54 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5f 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff33 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffa4 	bl	8001dbc <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e014      	b.n	8001eba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	791b      	ldrb	r3, [r3, #4]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d105      	bne.n	8001ea6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff f831 	bl	8000f08 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	795b      	ldrb	r3, [r3, #5]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_DAC_ConfigChannel+0x18>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e192      	b.n	8002202 <HAL_DAC_ConfigChannel+0x33e>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d174      	bne.n	8001fda <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001ef0:	f7ff fe88 	bl	8001c04 <HAL_GetTick>
 8001ef4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d134      	bne.n	8001f66 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001efc:	e011      	b.n	8001f22 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001efe:	f7ff fe81 	bl	8001c04 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d90a      	bls.n	8001f22 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	f043 0208 	orr.w	r2, r3, #8
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e16f      	b.n	8002202 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1e6      	bne.n	8001efe <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f7ff fe73 	bl	8001c1c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40
 8001f40:	e01e      	b.n	8001f80 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001f42:	f7ff fe5f 	bl	8001c04 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d90a      	bls.n	8001f66 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f043 0208 	orr.w	r2, r3, #8
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2203      	movs	r2, #3
 8001f60:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e14d      	b.n	8002202 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	dbe8      	blt.n	8001f42 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7ff fe53 	bl	8001c1c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	ea02 0103 	and.w	r1, r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	21ff      	movs	r1, #255	; 0xff
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	ea02 0103 	and.w	r1, r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d11d      	bne.n	800201e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	221f      	movs	r2, #31
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0310 	and.w	r3, r3, #16
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002012:	4313      	orrs	r3, r2
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	2207      	movs	r2, #7
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002036:	4013      	ands	r3, r2
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d102      	bne.n	8002048 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
 8002046:	e00f      	b.n	8002068 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d102      	bne.n	8002056 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002050:	2301      	movs	r3, #1
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	e008      	b.n	8002068 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800205e:	2301      	movs	r3, #1
 8002060:	623b      	str	r3, [r7, #32]
 8002062:	e001      	b.n	8002068 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	4313      	orrs	r3, r2
 8002072:	6a3a      	ldr	r2, [r7, #32]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208a:	4013      	ands	r3, r2
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	791b      	ldrb	r3, [r3, #4]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d102      	bne.n	800209c <HAL_DAC_ConfigChannel+0x1d8>
 8002096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800209a:	e000      	b.n	800209e <HAL_DAC_ConfigChannel+0x1da>
 800209c:	2300      	movs	r3, #0
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b6:	4013      	ands	r3, r2
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	795b      	ldrb	r3, [r3, #5]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d102      	bne.n	80020c8 <HAL_DAC_ConfigChannel+0x204>
 80020c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c6:	e000      	b.n	80020ca <HAL_DAC_ConfigChannel+0x206>
 80020c8:	2300      	movs	r3, #0
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d114      	bne.n	800210a <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80020e0:	f001 faa4 	bl	800362c <HAL_RCC_GetHCLKFreq>
 80020e4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	4a48      	ldr	r2, [pc, #288]	; (800220c <HAL_DAC_ConfigChannel+0x348>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d904      	bls.n	80020f8 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
 80020f6:	e00f      	b.n	8002118 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	4a45      	ldr	r2, [pc, #276]	; (8002210 <HAL_DAC_ConfigChannel+0x34c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d90a      	bls.n	8002116 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
 8002108:	e006      	b.n	8002118 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002110:	4313      	orrs	r3, r2
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
 8002114:	e000      	b.n	8002118 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002116:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002126:	4313      	orrs	r3, r2
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002130:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6819      	ldr	r1, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	400a      	ands	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216a:	4013      	ands	r3, r2
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002182:	4313      	orrs	r3, r2
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6819      	ldr	r1, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	22c0      	movs	r2, #192	; 0xc0
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43da      	mvns	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	400a      	ands	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	f640 710f 	movw	r1, #3855	; 0xf0f
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	ea02 0103 	and.w	r1, r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	409a      	lsls	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3728      	adds	r7, #40	; 0x28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	09896800 	.word	0x09896800
 8002210:	04c4b400 	.word	0x04c4b400

08002214 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	795b      	ldrb	r3, [r3, #5]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_DACEx_TriangleWaveGenerate+0x18>
 8002228:	2302      	movs	r3, #2
 800222a:	e024      	b.n	8002276 <HAL_DACEx_TriangleWaveGenerate+0x62>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2202      	movs	r2, #2
 8002236:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	ea02 0103 	and.w	r1, r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	409a      	lsls	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e08d      	b.n	80023b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_DMA_Init+0x138>)
 800229e:	429a      	cmp	r2, r3
 80022a0:	d80f      	bhi.n	80022c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b45      	ldr	r3, [pc, #276]	; (80023c0 <HAL_DMA_Init+0x13c>)
 80022aa:	4413      	add	r3, r2
 80022ac:	4a45      	ldr	r2, [pc, #276]	; (80023c4 <HAL_DMA_Init+0x140>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	009a      	lsls	r2, r3, #2
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a42      	ldr	r2, [pc, #264]	; (80023c8 <HAL_DMA_Init+0x144>)
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
 80022c0:	e00e      	b.n	80022e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b40      	ldr	r3, [pc, #256]	; (80023cc <HAL_DMA_Init+0x148>)
 80022ca:	4413      	add	r3, r2
 80022cc:	4a3d      	ldr	r2, [pc, #244]	; (80023c4 <HAL_DMA_Init+0x140>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	009a      	lsls	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a3c      	ldr	r2, [pc, #240]	; (80023d0 <HAL_DMA_Init+0x14c>)
 80022de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80022f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f8fe 	bl	8002534 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002340:	d102      	bne.n	8002348 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800235c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d010      	beq.n	8002388 <HAL_DMA_Init+0x104>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b04      	cmp	r3, #4
 800236c:	d80c      	bhi.n	8002388 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f91e 	bl	80025b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	e008      	b.n	800239a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40020407 	.word	0x40020407
 80023c0:	bffdfff8 	.word	0xbffdfff8
 80023c4:	cccccccd 	.word	0xcccccccd
 80023c8:	40020000 	.word	0x40020000
 80023cc:	bffdfbf8 	.word	0xbffdfbf8
 80023d0:	40020400 	.word	0x40020400

080023d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	2204      	movs	r2, #4
 80023f6:	409a      	lsls	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d026      	beq.n	800244e <HAL_DMA_IRQHandler+0x7a>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d021      	beq.n	800244e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d107      	bne.n	8002428 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0204 	bic.w	r2, r2, #4
 8002426:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	2104      	movs	r1, #4
 8002436:	fa01 f202 	lsl.w	r2, r1, r2
 800243a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	2b00      	cmp	r3, #0
 8002442:	d071      	beq.n	8002528 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800244c:	e06c      	b.n	8002528 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	2202      	movs	r2, #2
 8002458:	409a      	lsls	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d02e      	beq.n	80024c0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d029      	beq.n	80024c0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10b      	bne.n	8002492 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 020a 	bic.w	r2, r2, #10
 8002488:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f003 021f 	and.w	r2, r3, #31
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	2102      	movs	r1, #2
 80024a0:	fa01 f202 	lsl.w	r2, r1, r2
 80024a4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d038      	beq.n	8002528 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80024be:	e033      	b.n	8002528 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2208      	movs	r2, #8
 80024ca:	409a      	lsls	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d02a      	beq.n	800252a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d025      	beq.n	800252a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 020e 	bic.w	r2, r2, #14
 80024ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f003 021f 	and.w	r2, r3, #31
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002500:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251c:	2b00      	cmp	r3, #0
 800251e:	d004      	beq.n	800252a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002528:	bf00      	nop
 800252a:	bf00      	nop
}
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	4b16      	ldr	r3, [pc, #88]	; (800259c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002544:	429a      	cmp	r2, r3
 8002546:	d802      	bhi.n	800254e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002548:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	e001      	b.n	8002552 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002550:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3b08      	subs	r3, #8
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002560:	fba2 2303 	umull	r2, r3, r2, r3
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	089b      	lsrs	r3, r3, #2
 800256e:	009a      	lsls	r2, r3, #2
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	461a      	mov	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800257e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	2201      	movs	r2, #1
 8002588:	409a      	lsls	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800258e:	bf00      	nop
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40020407 	.word	0x40020407
 80025a0:	40020800 	.word	0x40020800
 80025a4:	40020820 	.word	0x40020820
 80025a8:	cccccccd 	.word	0xcccccccd
 80025ac:	40020880 	.word	0x40020880

080025b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	461a      	mov	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80025d2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	2201      	movs	r2, #1
 80025de:	409a      	lsls	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	1000823f 	.word	0x1000823f
 80025f4:	40020940 	.word	0x40020940

080025f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002606:	e15a      	b.n	80028be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2101      	movs	r1, #1
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	4013      	ands	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 814c 	beq.w	80028b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d005      	beq.n	8002638 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002634:	2b02      	cmp	r3, #2
 8002636:	d130      	bne.n	800269a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2203      	movs	r2, #3
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800266e:	2201      	movs	r2, #1
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	f003 0201 	and.w	r2, r3, #1
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d017      	beq.n	80026d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2203      	movs	r2, #3
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4013      	ands	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d123      	bne.n	800272a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	08da      	lsrs	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3208      	adds	r2, #8
 80026ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	220f      	movs	r2, #15
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4013      	ands	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	08da      	lsrs	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3208      	adds	r2, #8
 8002724:	6939      	ldr	r1, [r7, #16]
 8002726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	2203      	movs	r2, #3
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 0203 	and.w	r2, r3, #3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 80a6 	beq.w	80028b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276c:	4b5b      	ldr	r3, [pc, #364]	; (80028dc <HAL_GPIO_Init+0x2e4>)
 800276e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002770:	4a5a      	ldr	r2, [pc, #360]	; (80028dc <HAL_GPIO_Init+0x2e4>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6613      	str	r3, [r2, #96]	; 0x60
 8002778:	4b58      	ldr	r3, [pc, #352]	; (80028dc <HAL_GPIO_Init+0x2e4>)
 800277a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002784:	4a56      	ldr	r2, [pc, #344]	; (80028e0 <HAL_GPIO_Init+0x2e8>)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	3302      	adds	r3, #2
 800278c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002790:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	220f      	movs	r2, #15
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027ae:	d01f      	beq.n	80027f0 <HAL_GPIO_Init+0x1f8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a4c      	ldr	r2, [pc, #304]	; (80028e4 <HAL_GPIO_Init+0x2ec>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d019      	beq.n	80027ec <HAL_GPIO_Init+0x1f4>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a4b      	ldr	r2, [pc, #300]	; (80028e8 <HAL_GPIO_Init+0x2f0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d013      	beq.n	80027e8 <HAL_GPIO_Init+0x1f0>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a4a      	ldr	r2, [pc, #296]	; (80028ec <HAL_GPIO_Init+0x2f4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00d      	beq.n	80027e4 <HAL_GPIO_Init+0x1ec>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a49      	ldr	r2, [pc, #292]	; (80028f0 <HAL_GPIO_Init+0x2f8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d007      	beq.n	80027e0 <HAL_GPIO_Init+0x1e8>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a48      	ldr	r2, [pc, #288]	; (80028f4 <HAL_GPIO_Init+0x2fc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d101      	bne.n	80027dc <HAL_GPIO_Init+0x1e4>
 80027d8:	2305      	movs	r3, #5
 80027da:	e00a      	b.n	80027f2 <HAL_GPIO_Init+0x1fa>
 80027dc:	2306      	movs	r3, #6
 80027de:	e008      	b.n	80027f2 <HAL_GPIO_Init+0x1fa>
 80027e0:	2304      	movs	r3, #4
 80027e2:	e006      	b.n	80027f2 <HAL_GPIO_Init+0x1fa>
 80027e4:	2303      	movs	r3, #3
 80027e6:	e004      	b.n	80027f2 <HAL_GPIO_Init+0x1fa>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e002      	b.n	80027f2 <HAL_GPIO_Init+0x1fa>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_GPIO_Init+0x1fa>
 80027f0:	2300      	movs	r3, #0
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	f002 0203 	and.w	r2, r2, #3
 80027f8:	0092      	lsls	r2, r2, #2
 80027fa:	4093      	lsls	r3, r2
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002802:	4937      	ldr	r1, [pc, #220]	; (80028e0 <HAL_GPIO_Init+0x2e8>)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	3302      	adds	r3, #2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002810:	4b39      	ldr	r3, [pc, #228]	; (80028f8 <HAL_GPIO_Init+0x300>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	43db      	mvns	r3, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002834:	4a30      	ldr	r2, [pc, #192]	; (80028f8 <HAL_GPIO_Init+0x300>)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800283a:	4b2f      	ldr	r3, [pc, #188]	; (80028f8 <HAL_GPIO_Init+0x300>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	43db      	mvns	r3, r3
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4013      	ands	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800285e:	4a26      	ldr	r2, [pc, #152]	; (80028f8 <HAL_GPIO_Init+0x300>)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_GPIO_Init+0x300>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	43db      	mvns	r3, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002888:	4a1b      	ldr	r2, [pc, #108]	; (80028f8 <HAL_GPIO_Init+0x300>)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <HAL_GPIO_Init+0x300>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	43db      	mvns	r3, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028b2:	4a11      	ldr	r2, [pc, #68]	; (80028f8 <HAL_GPIO_Init+0x300>)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	3301      	adds	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f47f ae9d 	bne.w	8002608 <HAL_GPIO_Init+0x10>
  }
}
 80028ce:	bf00      	nop
 80028d0:	bf00      	nop
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40010000 	.word	0x40010000
 80028e4:	48000400 	.word	0x48000400
 80028e8:	48000800 	.word	0x48000800
 80028ec:	48000c00 	.word	0x48000c00
 80028f0:	48001000 	.word	0x48001000
 80028f4:	48001400 	.word	0x48001400
 80028f8:	40010400 	.word	0x40010400

080028fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
 8002908:	4613      	mov	r3, r2
 800290a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800290c:	787b      	ldrb	r3, [r7, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002918:	e002      	b.n	8002920 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e081      	b.n	8002a42 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe fc6c 	bl	8001230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2224      	movs	r2, #36	; 0x24
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800297c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800298c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	e006      	b.n	80029b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d104      	bne.n	80029c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69d9      	ldr	r1, [r3, #28]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1a      	ldr	r2, [r3, #32]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d138      	bne.n	8002ad2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e032      	b.n	8002ad4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2224      	movs	r2, #36	; 0x24
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a9c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6819      	ldr	r1, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
  }
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d139      	bne.n	8002b6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e033      	b.n	8002b6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2224      	movs	r2, #36	; 0x24
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0201 	orr.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d141      	bne.n	8002c0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b86:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b92:	d131      	bne.n	8002bf8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b94:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b9a:	4a46      	ldr	r2, [pc, #280]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ba4:	4b43      	ldr	r3, [pc, #268]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bac:	4a41      	ldr	r2, [pc, #260]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bb4:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2232      	movs	r2, #50	; 0x32
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	4a3f      	ldr	r2, [pc, #252]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc4:	0c9b      	lsrs	r3, r3, #18
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bca:	e002      	b.n	8002bd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bde:	d102      	bne.n	8002be6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f2      	bne.n	8002bcc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002be6:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf2:	d158      	bne.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e057      	b.n	8002ca8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bf8:	4b2e      	ldr	r3, [pc, #184]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bfe:	4a2d      	ldr	r2, [pc, #180]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c08:	e04d      	b.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c10:	d141      	bne.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c12:	4b28      	ldr	r3, [pc, #160]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1e:	d131      	bne.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c20:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c26:	4a23      	ldr	r2, [pc, #140]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c30:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c38:	4a1e      	ldr	r2, [pc, #120]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2232      	movs	r2, #50	; 0x32
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	0c9b      	lsrs	r3, r3, #18
 8002c52:	3301      	adds	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c56:	e002      	b.n	8002c5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6a:	d102      	bne.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f2      	bne.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7e:	d112      	bne.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e011      	b.n	8002ca8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c94:	e007      	b.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c96:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c9e:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	431bde83 	.word	0x431bde83

08002cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e306      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d075      	beq.n	8002dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cde:	4b97      	ldr	r3, [pc, #604]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ce8:	4b94      	ldr	r3, [pc, #592]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b0c      	cmp	r3, #12
 8002cf6:	d102      	bne.n	8002cfe <HAL_RCC_OscConfig+0x3e>
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d002      	beq.n	8002d04 <HAL_RCC_OscConfig+0x44>
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d10b      	bne.n	8002d1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	4b8d      	ldr	r3, [pc, #564]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d05b      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x108>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d157      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e2e1      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d24:	d106      	bne.n	8002d34 <HAL_RCC_OscConfig+0x74>
 8002d26:	4b85      	ldr	r3, [pc, #532]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a84      	ldr	r2, [pc, #528]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e01d      	b.n	8002d70 <HAL_RCC_OscConfig+0xb0>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x98>
 8002d3e:	4b7f      	ldr	r3, [pc, #508]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a7e      	ldr	r2, [pc, #504]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b7c      	ldr	r3, [pc, #496]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a7b      	ldr	r2, [pc, #492]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e00b      	b.n	8002d70 <HAL_RCC_OscConfig+0xb0>
 8002d58:	4b78      	ldr	r3, [pc, #480]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a77      	ldr	r2, [pc, #476]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4b75      	ldr	r3, [pc, #468]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a74      	ldr	r2, [pc, #464]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d013      	beq.n	8002da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe ff44 	bl	8001c04 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d80:	f7fe ff40 	bl	8001c04 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e2a6      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d92:	4b6a      	ldr	r3, [pc, #424]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0xc0>
 8002d9e:	e014      	b.n	8002dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe ff30 	bl	8001c04 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da8:	f7fe ff2c 	bl	8001c04 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e292      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dba:	4b60      	ldr	r3, [pc, #384]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0xe8>
 8002dc6:	e000      	b.n	8002dca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d075      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd6:	4b59      	ldr	r3, [pc, #356]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de0:	4b56      	ldr	r3, [pc, #344]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	d102      	bne.n	8002df6 <HAL_RCC_OscConfig+0x136>
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d002      	beq.n	8002dfc <HAL_RCC_OscConfig+0x13c>
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d11f      	bne.n	8002e3c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dfc:	4b4f      	ldr	r3, [pc, #316]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_RCC_OscConfig+0x154>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e265      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e14:	4b49      	ldr	r3, [pc, #292]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	4946      	ldr	r1, [pc, #280]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e28:	4b45      	ldr	r3, [pc, #276]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe fe9d 	bl	8001b6c <HAL_InitTick>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d043      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e251      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d023      	beq.n	8002e8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e44:	4b3d      	ldr	r3, [pc, #244]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a3c      	ldr	r2, [pc, #240]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe fed8 	bl	8001c04 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e58:	f7fe fed4 	bl	8001c04 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e23a      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6a:	4b34      	ldr	r3, [pc, #208]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e76:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	061b      	lsls	r3, r3, #24
 8002e84:	492d      	ldr	r1, [pc, #180]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
 8002e8a:	e01a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a2a      	ldr	r2, [pc, #168]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002e92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe feb4 	bl	8001c04 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7fe feb0 	bl	8001c04 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e216      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eb2:	4b22      	ldr	r3, [pc, #136]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x1e0>
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d041      	beq.n	8002f52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01c      	beq.n	8002f10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed6:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002edc:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7fe fe8d 	bl	8001c04 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eee:	f7fe fe89 	bl	8001c04 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e1ef      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f00:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0ef      	beq.n	8002eee <HAL_RCC_OscConfig+0x22e>
 8002f0e:	e020      	b.n	8002f52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f16:	4a09      	ldr	r2, [pc, #36]	; (8002f3c <HAL_RCC_OscConfig+0x27c>)
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f20:	f7fe fe70 	bl	8001c04 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f26:	e00d      	b.n	8002f44 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f28:	f7fe fe6c 	bl	8001c04 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d906      	bls.n	8002f44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e1d2      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f44:	4b8c      	ldr	r3, [pc, #560]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8002f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1ea      	bne.n	8002f28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80a6 	beq.w	80030ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f64:	4b84      	ldr	r3, [pc, #528]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2b4>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x2b6>
 8002f74:	2300      	movs	r3, #0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00d      	beq.n	8002f96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7a:	4b7f      	ldr	r3, [pc, #508]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	4a7e      	ldr	r2, [pc, #504]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8002f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f84:	6593      	str	r3, [r2, #88]	; 0x58
 8002f86:	4b7c      	ldr	r3, [pc, #496]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f92:	2301      	movs	r3, #1
 8002f94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f96:	4b79      	ldr	r3, [pc, #484]	; (800317c <HAL_RCC_OscConfig+0x4bc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d118      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa2:	4b76      	ldr	r3, [pc, #472]	; (800317c <HAL_RCC_OscConfig+0x4bc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a75      	ldr	r2, [pc, #468]	; (800317c <HAL_RCC_OscConfig+0x4bc>)
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fae:	f7fe fe29 	bl	8001c04 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb6:	f7fe fe25 	bl	8001c04 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e18b      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc8:	4b6c      	ldr	r3, [pc, #432]	; (800317c <HAL_RCC_OscConfig+0x4bc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d108      	bne.n	8002fee <HAL_RCC_OscConfig+0x32e>
 8002fdc:	4b66      	ldr	r3, [pc, #408]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe2:	4a65      	ldr	r2, [pc, #404]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fec:	e024      	b.n	8003038 <HAL_RCC_OscConfig+0x378>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b05      	cmp	r3, #5
 8002ff4:	d110      	bne.n	8003018 <HAL_RCC_OscConfig+0x358>
 8002ff6:	4b60      	ldr	r3, [pc, #384]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffc:	4a5e      	ldr	r2, [pc, #376]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003006:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8003008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300c:	4a5a      	ldr	r2, [pc, #360]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003016:	e00f      	b.n	8003038 <HAL_RCC_OscConfig+0x378>
 8003018:	4b57      	ldr	r3, [pc, #348]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301e:	4a56      	ldr	r2, [pc, #344]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003028:	4b53      	ldr	r3, [pc, #332]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	4a52      	ldr	r2, [pc, #328]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d016      	beq.n	800306e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fe fde0 	bl	8001c04 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003046:	e00a      	b.n	800305e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003048:	f7fe fddc 	bl	8001c04 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e140      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800305e:	4b46      	ldr	r3, [pc, #280]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0ed      	beq.n	8003048 <HAL_RCC_OscConfig+0x388>
 800306c:	e015      	b.n	800309a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306e:	f7fe fdc9 	bl	8001c04 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003074:	e00a      	b.n	800308c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003076:	f7fe fdc5 	bl	8001c04 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f241 3288 	movw	r2, #5000	; 0x1388
 8003084:	4293      	cmp	r3, r2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e129      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800308c:	4b3a      	ldr	r3, [pc, #232]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1ed      	bne.n	8003076 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800309a:	7ffb      	ldrb	r3, [r7, #31]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d105      	bne.n	80030ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a0:	4b35      	ldr	r3, [pc, #212]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	4a34      	ldr	r2, [pc, #208]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 80030a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d03c      	beq.n	8003132 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01c      	beq.n	80030fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030c0:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 80030c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030c6:	4a2c      	ldr	r2, [pc, #176]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7fe fd98 	bl	8001c04 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030d8:	f7fe fd94 	bl	8001c04 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e0fa      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030ea:	4b23      	ldr	r3, [pc, #140]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 80030ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ef      	beq.n	80030d8 <HAL_RCC_OscConfig+0x418>
 80030f8:	e01b      	b.n	8003132 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030fa:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 80030fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003100:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310a:	f7fe fd7b 	bl	8001c04 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003112:	f7fe fd77 	bl	8001c04 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0dd      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003124:	4b14      	ldr	r3, [pc, #80]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8003126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1ef      	bne.n	8003112 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80d1 	beq.w	80032de <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800313c:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b0c      	cmp	r3, #12
 8003146:	f000 808b 	beq.w	8003260 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d15e      	bne.n	8003210 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a08      	ldr	r2, [pc, #32]	; (8003178 <HAL_RCC_OscConfig+0x4b8>)
 8003158:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800315c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7fe fd51 	bl	8001c04 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003164:	e00c      	b.n	8003180 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003166:	f7fe fd4d 	bl	8001c04 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d905      	bls.n	8003180 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e0b3      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
 8003178:	40021000 	.word	0x40021000
 800317c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003180:	4b59      	ldr	r3, [pc, #356]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ec      	bne.n	8003166 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800318c:	4b56      	ldr	r3, [pc, #344]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	4b56      	ldr	r3, [pc, #344]	; (80032ec <HAL_RCC_OscConfig+0x62c>)
 8003192:	4013      	ands	r3, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6a11      	ldr	r1, [r2, #32]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800319c:	3a01      	subs	r2, #1
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	4311      	orrs	r1, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80031a6:	0212      	lsls	r2, r2, #8
 80031a8:	4311      	orrs	r1, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031ae:	0852      	lsrs	r2, r2, #1
 80031b0:	3a01      	subs	r2, #1
 80031b2:	0552      	lsls	r2, r2, #21
 80031b4:	4311      	orrs	r1, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031ba:	0852      	lsrs	r2, r2, #1
 80031bc:	3a01      	subs	r2, #1
 80031be:	0652      	lsls	r2, r2, #25
 80031c0:	4311      	orrs	r1, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031c6:	06d2      	lsls	r2, r2, #27
 80031c8:	430a      	orrs	r2, r1
 80031ca:	4947      	ldr	r1, [pc, #284]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d0:	4b45      	ldr	r3, [pc, #276]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a44      	ldr	r2, [pc, #272]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 80031d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031dc:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4a41      	ldr	r2, [pc, #260]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 80031e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe fd0c 	bl	8001c04 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe fd08 	bl	8001c04 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e06e      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003202:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x530>
 800320e:	e066      	b.n	80032de <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a34      	ldr	r2, [pc, #208]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 8003216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800321a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800321c:	4b32      	ldr	r3, [pc, #200]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4a31      	ldr	r2, [pc, #196]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 8003222:	f023 0303 	bic.w	r3, r3, #3
 8003226:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003228:	4b2f      	ldr	r3, [pc, #188]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4a2e      	ldr	r2, [pc, #184]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 800322e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003236:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe fce4 	bl	8001c04 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe fce0 	bl	8001c04 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e046      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003252:	4b25      	ldr	r3, [pc, #148]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x580>
 800325e:	e03e      	b.n	80032de <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e039      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800326c:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <HAL_RCC_OscConfig+0x628>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 0203 	and.w	r2, r3, #3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	429a      	cmp	r2, r3
 800327e:	d12c      	bne.n	80032da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	3b01      	subs	r3, #1
 800328c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	d123      	bne.n	80032da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800329e:	429a      	cmp	r2, r3
 80032a0:	d11b      	bne.n	80032da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d113      	bne.n	80032da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	3b01      	subs	r3, #1
 80032c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d109      	bne.n	80032da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	085b      	lsrs	r3, r3, #1
 80032d2:	3b01      	subs	r3, #1
 80032d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3720      	adds	r7, #32
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000
 80032ec:	019f800c 	.word	0x019f800c

080032f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e11e      	b.n	8003546 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003308:	4b91      	ldr	r3, [pc, #580]	; (8003550 <HAL_RCC_ClockConfig+0x260>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d910      	bls.n	8003338 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b8e      	ldr	r3, [pc, #568]	; (8003550 <HAL_RCC_ClockConfig+0x260>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 020f 	bic.w	r2, r3, #15
 800331e:	498c      	ldr	r1, [pc, #560]	; (8003550 <HAL_RCC_ClockConfig+0x260>)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b8a      	ldr	r3, [pc, #552]	; (8003550 <HAL_RCC_ClockConfig+0x260>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e106      	b.n	8003546 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d073      	beq.n	800342c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d129      	bne.n	80033a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334c:	4b81      	ldr	r3, [pc, #516]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0f4      	b.n	8003546 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800335c:	f000 f972 	bl	8003644 <RCC_GetSysClockFreqFromPLLSource>
 8003360:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4a7c      	ldr	r2, [pc, #496]	; (8003558 <HAL_RCC_ClockConfig+0x268>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d93f      	bls.n	80033ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800336a:	4b7a      	ldr	r3, [pc, #488]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800337e:	2b00      	cmp	r3, #0
 8003380:	d033      	beq.n	80033ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003386:	2b00      	cmp	r3, #0
 8003388:	d12f      	bne.n	80033ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800338a:	4b72      	ldr	r3, [pc, #456]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003392:	4a70      	ldr	r2, [pc, #448]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 8003394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003398:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	e024      	b.n	80033ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a8:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d109      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0c6      	b.n	8003546 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b8:	4b66      	ldr	r3, [pc, #408]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0be      	b.n	8003546 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033c8:	f000 f8ce 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4a61      	ldr	r2, [pc, #388]	; (8003558 <HAL_RCC_ClockConfig+0x268>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d909      	bls.n	80033ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033d6:	4b5f      	ldr	r3, [pc, #380]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033de:	4a5d      	ldr	r2, [pc, #372]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 80033e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033e6:	2380      	movs	r3, #128	; 0x80
 80033e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033ea:	4b5a      	ldr	r3, [pc, #360]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 0203 	bic.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4957      	ldr	r1, [pc, #348]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033fc:	f7fe fc02 	bl	8001c04 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	e00a      	b.n	800341a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7fe fbfe 	bl	8001c04 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e095      	b.n	8003546 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	4b4e      	ldr	r3, [pc, #312]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 020c 	and.w	r2, r3, #12
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	429a      	cmp	r2, r3
 800342a:	d1eb      	bne.n	8003404 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d023      	beq.n	8003480 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003444:	4b43      	ldr	r3, [pc, #268]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a42      	ldr	r2, [pc, #264]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 800344a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800344e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800345c:	4b3d      	ldr	r3, [pc, #244]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003464:	4a3b      	ldr	r2, [pc, #236]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 8003466:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800346a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800346c:	4b39      	ldr	r3, [pc, #228]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4936      	ldr	r1, [pc, #216]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
 800347e:	e008      	b.n	8003492 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2b80      	cmp	r3, #128	; 0x80
 8003484:	d105      	bne.n	8003492 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003486:	4b33      	ldr	r3, [pc, #204]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	4a32      	ldr	r2, [pc, #200]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 800348c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003490:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003492:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <HAL_RCC_ClockConfig+0x260>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d21d      	bcs.n	80034dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a0:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <HAL_RCC_ClockConfig+0x260>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f023 020f 	bic.w	r2, r3, #15
 80034a8:	4929      	ldr	r1, [pc, #164]	; (8003550 <HAL_RCC_ClockConfig+0x260>)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034b0:	f7fe fba8 	bl	8001c04 <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b8:	f7fe fba4 	bl	8001c04 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e03b      	b.n	8003546 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <HAL_RCC_ClockConfig+0x260>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d1ed      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e8:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4917      	ldr	r1, [pc, #92]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003506:	4b13      	ldr	r3, [pc, #76]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	490f      	ldr	r1, [pc, #60]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800351a:	f000 f825 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 800351e:	4602      	mov	r2, r0
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <HAL_RCC_ClockConfig+0x264>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	490c      	ldr	r1, [pc, #48]	; (800355c <HAL_RCC_ClockConfig+0x26c>)
 800352c:	5ccb      	ldrb	r3, [r1, r3]
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <HAL_RCC_ClockConfig+0x270>)
 8003538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <HAL_RCC_ClockConfig+0x274>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe fb14 	bl	8001b6c <HAL_InitTick>
 8003544:	4603      	mov	r3, r0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40022000 	.word	0x40022000
 8003554:	40021000 	.word	0x40021000
 8003558:	04c4b400 	.word	0x04c4b400
 800355c:	080098f0 	.word	0x080098f0
 8003560:	20000000 	.word	0x20000000
 8003564:	20000004 	.word	0x20000004

08003568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800356e:	4b2c      	ldr	r3, [pc, #176]	; (8003620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b04      	cmp	r3, #4
 8003578:	d102      	bne.n	8003580 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800357a:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <HAL_RCC_GetSysClockFreq+0xbc>)
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	e047      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003580:	4b27      	ldr	r3, [pc, #156]	; (8003620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b08      	cmp	r3, #8
 800358a:	d102      	bne.n	8003592 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800358c:	4b26      	ldr	r3, [pc, #152]	; (8003628 <HAL_RCC_GetSysClockFreq+0xc0>)
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	e03e      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003592:	4b23      	ldr	r3, [pc, #140]	; (8003620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d136      	bne.n	800360c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800359e:	4b20      	ldr	r3, [pc, #128]	; (8003620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035a8:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	3301      	adds	r3, #1
 80035b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d10c      	bne.n	80035d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035bc:	4a1a      	ldr	r2, [pc, #104]	; (8003628 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	4a16      	ldr	r2, [pc, #88]	; (8003620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035c6:	68d2      	ldr	r2, [r2, #12]
 80035c8:	0a12      	lsrs	r2, r2, #8
 80035ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035ce:	fb02 f303 	mul.w	r3, r2, r3
 80035d2:	617b      	str	r3, [r7, #20]
      break;
 80035d4:	e00c      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035d6:	4a13      	ldr	r2, [pc, #76]	; (8003624 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	fbb2 f3f3 	udiv	r3, r2, r3
 80035de:	4a10      	ldr	r2, [pc, #64]	; (8003620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035e0:	68d2      	ldr	r2, [r2, #12]
 80035e2:	0a12      	lsrs	r2, r2, #8
 80035e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035e8:	fb02 f303 	mul.w	r3, r2, r3
 80035ec:	617b      	str	r3, [r7, #20]
      break;
 80035ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	0e5b      	lsrs	r3, r3, #25
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	3301      	adds	r3, #1
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	e001      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003610:	693b      	ldr	r3, [r7, #16]
}
 8003612:	4618      	mov	r0, r3
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000
 8003624:	00f42400 	.word	0x00f42400
 8003628:	017d7840 	.word	0x017d7840

0800362c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003630:	4b03      	ldr	r3, [pc, #12]	; (8003640 <HAL_RCC_GetHCLKFreq+0x14>)
 8003632:	681b      	ldr	r3, [r3, #0]
}
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20000000 	.word	0x20000000

08003644 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800364a:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003654:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	3301      	adds	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d10c      	bne.n	8003682 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003668:	4a17      	ldr	r2, [pc, #92]	; (80036c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	4a14      	ldr	r2, [pc, #80]	; (80036c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003672:	68d2      	ldr	r2, [r2, #12]
 8003674:	0a12      	lsrs	r2, r2, #8
 8003676:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800367a:	fb02 f303 	mul.w	r3, r2, r3
 800367e:	617b      	str	r3, [r7, #20]
    break;
 8003680:	e00c      	b.n	800369c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003682:	4a12      	ldr	r2, [pc, #72]	; (80036cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	4a0e      	ldr	r2, [pc, #56]	; (80036c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800368c:	68d2      	ldr	r2, [r2, #12]
 800368e:	0a12      	lsrs	r2, r2, #8
 8003690:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003694:	fb02 f303 	mul.w	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]
    break;
 800369a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	0e5b      	lsrs	r3, r3, #25
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	3301      	adds	r3, #1
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80036b6:	687b      	ldr	r3, [r7, #4]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	40021000 	.word	0x40021000
 80036c8:	017d7840 	.word	0x017d7840
 80036cc:	00f42400 	.word	0x00f42400

080036d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036d8:	2300      	movs	r3, #0
 80036da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036dc:	2300      	movs	r3, #0
 80036de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8098 	beq.w	800381e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ee:	2300      	movs	r3, #0
 80036f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f2:	4b43      	ldr	r3, [pc, #268]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	4b40      	ldr	r3, [pc, #256]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	4a3f      	ldr	r2, [pc, #252]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003708:	6593      	str	r3, [r2, #88]	; 0x58
 800370a:	4b3d      	ldr	r3, [pc, #244]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003716:	2301      	movs	r3, #1
 8003718:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800371a:	4b3a      	ldr	r3, [pc, #232]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a39      	ldr	r2, [pc, #228]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003724:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003726:	f7fe fa6d 	bl	8001c04 <HAL_GetTick>
 800372a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800372c:	e009      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372e:	f7fe fa69 	bl	8001c04 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d902      	bls.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	74fb      	strb	r3, [r7, #19]
        break;
 8003740:	e005      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003742:	4b30      	ldr	r3, [pc, #192]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0ef      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d159      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003754:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d01e      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	429a      	cmp	r2, r3
 800376e:	d019      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003770:	4b23      	ldr	r3, [pc, #140]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800377c:	4b20      	ldr	r3, [pc, #128]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800378c:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	4a1b      	ldr	r2, [pc, #108]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800379c:	4a18      	ldr	r2, [pc, #96]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d016      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ae:	f7fe fa29 	bl	8001c04 <HAL_GetTick>
 80037b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b4:	e00b      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7fe fa25 	bl	8001c04 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d902      	bls.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	74fb      	strb	r3, [r7, #19]
            break;
 80037cc:	e006      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ce:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ec      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80037dc:	7cfb      	ldrb	r3, [r7, #19]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10b      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037e2:	4b07      	ldr	r3, [pc, #28]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	4903      	ldr	r1, [pc, #12]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037f8:	e008      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037fa:	7cfb      	ldrb	r3, [r7, #19]
 80037fc:	74bb      	strb	r3, [r7, #18]
 80037fe:	e005      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003800:	40021000 	.word	0x40021000
 8003804:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800380c:	7c7b      	ldrb	r3, [r7, #17]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d105      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003812:	4ba6      	ldr	r3, [pc, #664]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003816:	4aa5      	ldr	r2, [pc, #660]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800381c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800382a:	4ba0      	ldr	r3, [pc, #640]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f023 0203 	bic.w	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	499c      	ldr	r1, [pc, #624]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800384c:	4b97      	ldr	r3, [pc, #604]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	f023 020c 	bic.w	r2, r3, #12
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	4994      	ldr	r1, [pc, #592]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800386e:	4b8f      	ldr	r3, [pc, #572]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	498b      	ldr	r1, [pc, #556]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003890:	4b86      	ldr	r3, [pc, #536]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	4983      	ldr	r1, [pc, #524]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038b2:	4b7e      	ldr	r3, [pc, #504]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	497a      	ldr	r1, [pc, #488]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038d4:	4b75      	ldr	r3, [pc, #468]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	4972      	ldr	r1, [pc, #456]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038f6:	4b6d      	ldr	r3, [pc, #436]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	4969      	ldr	r1, [pc, #420]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003918:	4b64      	ldr	r3, [pc, #400]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	4961      	ldr	r1, [pc, #388]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800393a:	4b5c      	ldr	r3, [pc, #368]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	4958      	ldr	r1, [pc, #352]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003958:	2b00      	cmp	r3, #0
 800395a:	d015      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800395c:	4b53      	ldr	r3, [pc, #332]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	4950      	ldr	r1, [pc, #320]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800397a:	d105      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800397c:	4b4b      	ldr	r3, [pc, #300]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	4a4a      	ldr	r2, [pc, #296]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003986:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003990:	2b00      	cmp	r3, #0
 8003992:	d015      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003994:	4b45      	ldr	r3, [pc, #276]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	4942      	ldr	r1, [pc, #264]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b2:	d105      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b4:	4b3d      	ldr	r3, [pc, #244]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4a3c      	ldr	r2, [pc, #240]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d015      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039cc:	4b37      	ldr	r3, [pc, #220]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	4934      	ldr	r1, [pc, #208]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039ea:	d105      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ec:	4b2f      	ldr	r3, [pc, #188]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4a2e      	ldr	r2, [pc, #184]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d015      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a04:	4b29      	ldr	r3, [pc, #164]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	4926      	ldr	r1, [pc, #152]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a22:	d105      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a24:	4b21      	ldr	r3, [pc, #132]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4a20      	ldr	r2, [pc, #128]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d015      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a3c:	4b1b      	ldr	r3, [pc, #108]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	4918      	ldr	r1, [pc, #96]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a5a:	d105      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a5c:	4b13      	ldr	r3, [pc, #76]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4a12      	ldr	r2, [pc, #72]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d015      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a74:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	490a      	ldr	r1, [pc, #40]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a04      	ldr	r2, [pc, #16]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003aa0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000

08003ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e09d      	b.n	8003bfe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d108      	bne.n	8003adc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad2:	d009      	beq.n	8003ae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	61da      	str	r2, [r3, #28]
 8003ada:	e005      	b.n	8003ae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fd fce8 	bl	80014d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b28:	d902      	bls.n	8003b30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	e002      	b.n	8003b36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b3e:	d007      	beq.n	8003b50 <HAL_SPI_Init+0xa0>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b48:	d002      	beq.n	8003b50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b92:	ea42 0103 	orr.w	r1, r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	0c1b      	lsrs	r3, r3, #16
 8003bac:	f003 0204 	and.w	r2, r3, #4
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bcc:	ea42 0103 	orr.w	r1, r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b088      	sub	sp, #32
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	4613      	mov	r3, r2
 8003c14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_SPI_Transmit+0x22>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e158      	b.n	8003eda <HAL_SPI_Transmit+0x2d4>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c30:	f7fd ffe8 	bl	8001c04 <HAL_GetTick>
 8003c34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d002      	beq.n	8003c4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c46:	2302      	movs	r3, #2
 8003c48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c4a:	e13d      	b.n	8003ec8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_SPI_Transmit+0x52>
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c5c:	e134      	b.n	8003ec8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2203      	movs	r2, #3
 8003c62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	88fa      	ldrh	r2, [r7, #6]
 8003c76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	88fa      	ldrh	r2, [r7, #6]
 8003c7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca8:	d10f      	bne.n	8003cca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd4:	2b40      	cmp	r3, #64	; 0x40
 8003cd6:	d007      	beq.n	8003ce8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cf0:	d94b      	bls.n	8003d8a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_SPI_Transmit+0xfa>
 8003cfa:	8afb      	ldrh	r3, [r7, #22]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d13e      	bne.n	8003d7e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	881a      	ldrh	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	1c9a      	adds	r2, r3, #2
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d24:	e02b      	b.n	8003d7e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d112      	bne.n	8003d5a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	881a      	ldrh	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	1c9a      	adds	r2, r3, #2
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d58:	e011      	b.n	8003d7e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d5a:	f7fd ff53 	bl	8001c04 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d803      	bhi.n	8003d72 <HAL_SPI_Transmit+0x16c>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d102      	bne.n	8003d78 <HAL_SPI_Transmit+0x172>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d7c:	e0a4      	b.n	8003ec8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1ce      	bne.n	8003d26 <HAL_SPI_Transmit+0x120>
 8003d88:	e07c      	b.n	8003e84 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_SPI_Transmit+0x192>
 8003d92:	8afb      	ldrh	r3, [r7, #22]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d170      	bne.n	8003e7a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d912      	bls.n	8003dc8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	881a      	ldrh	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	1c9a      	adds	r2, r3, #2
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b02      	subs	r3, #2
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dc6:	e058      	b.n	8003e7a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	7812      	ldrb	r2, [r2, #0]
 8003dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003dee:	e044      	b.n	8003e7a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d12b      	bne.n	8003e56 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d912      	bls.n	8003e2e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	881a      	ldrh	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	1c9a      	adds	r2, r3, #2
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b02      	subs	r3, #2
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e2c:	e025      	b.n	8003e7a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	330c      	adds	r3, #12
 8003e38:	7812      	ldrb	r2, [r2, #0]
 8003e3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e54:	e011      	b.n	8003e7a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e56:	f7fd fed5 	bl	8001c04 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d803      	bhi.n	8003e6e <HAL_SPI_Transmit+0x268>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d102      	bne.n	8003e74 <HAL_SPI_Transmit+0x26e>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e78:	e026      	b.n	8003ec8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1b5      	bne.n	8003df0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	6839      	ldr	r1, [r7, #0]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 fce3 	bl	8004854 <SPI_EndRxTxTransaction>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e000      	b.n	8003ec8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003ec6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ed8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3720      	adds	r7, #32
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b088      	sub	sp, #32
 8003ee6:	af02      	add	r7, sp, #8
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	603b      	str	r3, [r7, #0]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003efe:	d112      	bne.n	8003f26 <HAL_SPI_Receive+0x44>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10e      	bne.n	8003f26 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f10:	88fa      	ldrh	r2, [r7, #6]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	4613      	mov	r3, r2
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f910 	bl	8004142 <HAL_SPI_TransmitReceive>
 8003f22:	4603      	mov	r3, r0
 8003f24:	e109      	b.n	800413a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_SPI_Receive+0x52>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e102      	b.n	800413a <HAL_SPI_Receive+0x258>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f3c:	f7fd fe62 	bl	8001c04 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d002      	beq.n	8003f54 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f52:	e0e9      	b.n	8004128 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_SPI_Receive+0x7e>
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d102      	bne.n	8003f66 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f64:	e0e0      	b.n	8004128 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2204      	movs	r2, #4
 8003f6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	88fa      	ldrh	r2, [r7, #6]
 8003f7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	88fa      	ldrh	r2, [r7, #6]
 8003f86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fb0:	d908      	bls.n	8003fc4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	e007      	b.n	8003fd4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fd2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fdc:	d10f      	bne.n	8003ffe <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ffc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b40      	cmp	r3, #64	; 0x40
 800400a:	d007      	beq.n	800401c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800401a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004024:	d867      	bhi.n	80040f6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004026:	e030      	b.n	800408a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b01      	cmp	r3, #1
 8004034:	d117      	bne.n	8004066 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f103 020c 	add.w	r2, r3, #12
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	7812      	ldrb	r2, [r2, #0]
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004064:	e011      	b.n	800408a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004066:	f7fd fdcd 	bl	8001c04 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d803      	bhi.n	800407e <HAL_SPI_Receive+0x19c>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d102      	bne.n	8004084 <HAL_SPI_Receive+0x1a2>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d102      	bne.n	800408a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004088:	e04e      	b.n	8004128 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1c8      	bne.n	8004028 <HAL_SPI_Receive+0x146>
 8004096:	e034      	b.n	8004102 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d115      	bne.n	80040d2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	b292      	uxth	r2, r2
 80040b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	1c9a      	adds	r2, r3, #2
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80040d0:	e011      	b.n	80040f6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040d2:	f7fd fd97 	bl	8001c04 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d803      	bhi.n	80040ea <HAL_SPI_Receive+0x208>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d102      	bne.n	80040f0 <HAL_SPI_Receive+0x20e>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040f4:	e018      	b.n	8004128 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1ca      	bne.n	8004098 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	6839      	ldr	r1, [r7, #0]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fb4c 	bl	80047a4 <SPI_EndRxTransaction>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	75fb      	strb	r3, [r7, #23]
 8004124:	e000      	b.n	8004128 <HAL_SPI_Receive+0x246>
  }

error :
 8004126:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004138:	7dfb      	ldrb	r3, [r7, #23]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b08a      	sub	sp, #40	; 0x28
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004150:	2301      	movs	r3, #1
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_SPI_TransmitReceive+0x26>
 8004164:	2302      	movs	r3, #2
 8004166:	e1fb      	b.n	8004560 <HAL_SPI_TransmitReceive+0x41e>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004170:	f7fd fd48 	bl	8001c04 <HAL_GetTick>
 8004174:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800417c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004184:	887b      	ldrh	r3, [r7, #2]
 8004186:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004188:	887b      	ldrh	r3, [r7, #2]
 800418a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800418c:	7efb      	ldrb	r3, [r7, #27]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d00e      	beq.n	80041b0 <HAL_SPI_TransmitReceive+0x6e>
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004198:	d106      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d102      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x66>
 80041a2:	7efb      	ldrb	r3, [r7, #27]
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d003      	beq.n	80041b0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80041a8:	2302      	movs	r3, #2
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80041ae:	e1cd      	b.n	800454c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_SPI_TransmitReceive+0x80>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_SPI_TransmitReceive+0x80>
 80041bc:	887b      	ldrh	r3, [r7, #2]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d103      	bne.n	80041ca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80041c8:	e1c0      	b.n	800454c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d003      	beq.n	80041de <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2205      	movs	r2, #5
 80041da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	887a      	ldrh	r2, [r7, #2]
 80041ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	887a      	ldrh	r2, [r7, #2]
 80041f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	887a      	ldrh	r2, [r7, #2]
 800420a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004220:	d802      	bhi.n	8004228 <HAL_SPI_TransmitReceive+0xe6>
 8004222:	8a3b      	ldrh	r3, [r7, #16]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d908      	bls.n	800423a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004236:	605a      	str	r2, [r3, #4]
 8004238:	e007      	b.n	800424a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004248:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d007      	beq.n	8004268 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004266:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004270:	d97c      	bls.n	800436c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_SPI_TransmitReceive+0x13e>
 800427a:	8a7b      	ldrh	r3, [r7, #18]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d169      	bne.n	8004354 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	881a      	ldrh	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	1c9a      	adds	r2, r3, #2
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042a4:	e056      	b.n	8004354 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d11b      	bne.n	80042ec <HAL_SPI_TransmitReceive+0x1aa>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d016      	beq.n	80042ec <HAL_SPI_TransmitReceive+0x1aa>
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d113      	bne.n	80042ec <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	881a      	ldrh	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	1c9a      	adds	r2, r3, #2
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d11c      	bne.n	8004334 <HAL_SPI_TransmitReceive+0x1f2>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d016      	beq.n	8004334 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	b292      	uxth	r2, r2
 8004312:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	1c9a      	adds	r2, r3, #2
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004330:	2301      	movs	r3, #1
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004334:	f7fd fc66 	bl	8001c04 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004340:	429a      	cmp	r2, r3
 8004342:	d807      	bhi.n	8004354 <HAL_SPI_TransmitReceive+0x212>
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434a:	d003      	beq.n	8004354 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004352:	e0fb      	b.n	800454c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1a3      	bne.n	80042a6 <HAL_SPI_TransmitReceive+0x164>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d19d      	bne.n	80042a6 <HAL_SPI_TransmitReceive+0x164>
 800436a:	e0df      	b.n	800452c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_SPI_TransmitReceive+0x23a>
 8004374:	8a7b      	ldrh	r3, [r7, #18]
 8004376:	2b01      	cmp	r3, #1
 8004378:	f040 80cb 	bne.w	8004512 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d912      	bls.n	80043ac <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	881a      	ldrh	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004396:	1c9a      	adds	r2, r3, #2
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b02      	subs	r3, #2
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043aa:	e0b2      	b.n	8004512 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	7812      	ldrb	r2, [r2, #0]
 80043b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043d2:	e09e      	b.n	8004512 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d134      	bne.n	800444c <HAL_SPI_TransmitReceive+0x30a>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02f      	beq.n	800444c <HAL_SPI_TransmitReceive+0x30a>
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d12c      	bne.n	800444c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d912      	bls.n	8004422 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	881a      	ldrh	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	1c9a      	adds	r2, r3, #2
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b02      	subs	r3, #2
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004420:	e012      	b.n	8004448 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	330c      	adds	r3, #12
 800442c:	7812      	ldrb	r2, [r2, #0]
 800442e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b01      	cmp	r3, #1
 8004458:	d148      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x3aa>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d042      	beq.n	80044ec <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b01      	cmp	r3, #1
 8004470:	d923      	bls.n	80044ba <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	b292      	uxth	r2, r2
 800447e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	1c9a      	adds	r2, r3, #2
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b02      	subs	r3, #2
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d81f      	bhi.n	80044e8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	e016      	b.n	80044e8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f103 020c 	add.w	r2, r3, #12
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	7812      	ldrb	r2, [r2, #0]
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044e8:	2301      	movs	r3, #1
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044ec:	f7fd fb8a 	bl	8001c04 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d803      	bhi.n	8004504 <HAL_SPI_TransmitReceive+0x3c2>
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d102      	bne.n	800450a <HAL_SPI_TransmitReceive+0x3c8>
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	2b00      	cmp	r3, #0
 8004508:	d103      	bne.n	8004512 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004510:	e01c      	b.n	800454c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	f47f af5b 	bne.w	80043d4 <HAL_SPI_TransmitReceive+0x292>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	f47f af54 	bne.w	80043d4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f98f 	bl	8004854 <SPI_EndRxTxTransaction>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d006      	beq.n	800454a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	661a      	str	r2, [r3, #96]	; 0x60
 8004548:	e000      	b.n	800454c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800454a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800455c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004560:	4618      	mov	r0, r3
 8004562:	3728      	adds	r7, #40	; 0x28
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	4613      	mov	r3, r2
 8004576:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004578:	f7fd fb44 	bl	8001c04 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	4413      	add	r3, r2
 8004586:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004588:	f7fd fb3c 	bl	8001c04 <HAL_GetTick>
 800458c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800458e:	4b39      	ldr	r3, [pc, #228]	; (8004674 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	015b      	lsls	r3, r3, #5
 8004594:	0d1b      	lsrs	r3, r3, #20
 8004596:	69fa      	ldr	r2, [r7, #28]
 8004598:	fb02 f303 	mul.w	r3, r2, r3
 800459c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800459e:	e054      	b.n	800464a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	d050      	beq.n	800464a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045a8:	f7fd fb2c 	bl	8001c04 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d902      	bls.n	80045be <SPI_WaitFlagStateUntilTimeout+0x56>
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d13d      	bne.n	800463a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045d6:	d111      	bne.n	80045fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e0:	d004      	beq.n	80045ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ea:	d107      	bne.n	80045fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004604:	d10f      	bne.n	8004626 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004624:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e017      	b.n	800466a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	3b01      	subs	r3, #1
 8004648:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4013      	ands	r3, r2
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	429a      	cmp	r2, r3
 8004658:	bf0c      	ite	eq
 800465a:	2301      	moveq	r3, #1
 800465c:	2300      	movne	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	429a      	cmp	r2, r3
 8004666:	d19b      	bne.n	80045a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3720      	adds	r7, #32
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000000 	.word	0x20000000

08004678 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800468a:	f7fd fabb 	bl	8001c04 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	4413      	add	r3, r2
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800469a:	f7fd fab3 	bl	8001c04 <HAL_GetTick>
 800469e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	330c      	adds	r3, #12
 80046a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046a8:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	00da      	lsls	r2, r3, #3
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	0d1b      	lsrs	r3, r3, #20
 80046b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046c0:	e060      	b.n	8004784 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046c8:	d107      	bne.n	80046da <SPI_WaitFifoStateUntilTimeout+0x62>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d104      	bne.n	80046da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80046d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d050      	beq.n	8004784 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046e2:	f7fd fa8f 	bl	8001c04 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d902      	bls.n	80046f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d13d      	bne.n	8004774 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004706:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004710:	d111      	bne.n	8004736 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471a:	d004      	beq.n	8004726 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004724:	d107      	bne.n	8004736 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004734:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473e:	d10f      	bne.n	8004760 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800475e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e010      	b.n	8004796 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	3b01      	subs	r3, #1
 8004782:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4013      	ands	r3, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	429a      	cmp	r2, r3
 8004792:	d196      	bne.n	80046c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3728      	adds	r7, #40	; 0x28
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000000 	.word	0x20000000

080047a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047b8:	d111      	bne.n	80047de <SPI_EndRxTransaction+0x3a>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c2:	d004      	beq.n	80047ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047cc:	d107      	bne.n	80047de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047dc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2200      	movs	r2, #0
 80047e6:	2180      	movs	r1, #128	; 0x80
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f7ff febd 	bl	8004568 <SPI_WaitFlagStateUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f8:	f043 0220 	orr.w	r2, r3, #32
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e023      	b.n	800484c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800480c:	d11d      	bne.n	800484a <SPI_EndRxTransaction+0xa6>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004816:	d004      	beq.n	8004822 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004820:	d113      	bne.n	800484a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2200      	movs	r2, #0
 800482a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f7ff ff22 	bl	8004678 <SPI_WaitFifoStateUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483e:	f043 0220 	orr.w	r2, r3, #32
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e000      	b.n	800484c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2200      	movs	r2, #0
 8004868:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f7ff ff03 	bl	8004678 <SPI_WaitFifoStateUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d007      	beq.n	8004888 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487c:	f043 0220 	orr.w	r2, r3, #32
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e027      	b.n	80048d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2200      	movs	r2, #0
 8004890:	2180      	movs	r1, #128	; 0x80
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7ff fe68 	bl	8004568 <SPI_WaitFlagStateUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a2:	f043 0220 	orr.w	r2, r3, #32
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e014      	b.n	80048d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f7ff fedc 	bl	8004678 <SPI_WaitFifoStateUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d007      	beq.n	80048d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ca:	f043 0220 	orr.w	r2, r3, #32
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e000      	b.n	80048d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e049      	b.n	8004986 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fd f86a 	bl	80019e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f000 f98a 	bl	8004c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e041      	b.n	8004a26 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f839 	bl	8004a2e <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f000 f932 	bl	8004c38 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0208 	bic.w	r2, r2, #8
 80049e2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6819      	ldr	r1, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
	...

08004a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIM_ConfigClockSource+0x1c>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e0de      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x1da>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004a7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a63      	ldr	r2, [pc, #396]	; (8004c28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	f000 80a9 	beq.w	8004bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004aa0:	4a61      	ldr	r2, [pc, #388]	; (8004c28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	f200 80ae 	bhi.w	8004c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004aa8:	4a60      	ldr	r2, [pc, #384]	; (8004c2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	f000 80a1 	beq.w	8004bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004ab0:	4a5e      	ldr	r2, [pc, #376]	; (8004c2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	f200 80a6 	bhi.w	8004c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ab8:	4a5d      	ldr	r2, [pc, #372]	; (8004c30 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	f000 8099 	beq.w	8004bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004ac0:	4a5b      	ldr	r2, [pc, #364]	; (8004c30 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	f200 809e 	bhi.w	8004c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ac8:	4a5a      	ldr	r2, [pc, #360]	; (8004c34 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	f000 8091 	beq.w	8004bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004ad0:	4a58      	ldr	r2, [pc, #352]	; (8004c34 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	f200 8096 	bhi.w	8004c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ad8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004adc:	f000 8089 	beq.w	8004bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004ae0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ae4:	f200 808e 	bhi.w	8004c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aec:	d03e      	beq.n	8004b6c <HAL_TIM_ConfigClockSource+0x128>
 8004aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af2:	f200 8087 	bhi.w	8004c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afa:	f000 8086 	beq.w	8004c0a <HAL_TIM_ConfigClockSource+0x1c6>
 8004afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b02:	d87f      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b04:	2b70      	cmp	r3, #112	; 0x70
 8004b06:	d01a      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0xfa>
 8004b08:	2b70      	cmp	r3, #112	; 0x70
 8004b0a:	d87b      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b0c:	2b60      	cmp	r3, #96	; 0x60
 8004b0e:	d050      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0x16e>
 8004b10:	2b60      	cmp	r3, #96	; 0x60
 8004b12:	d877      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b14:	2b50      	cmp	r3, #80	; 0x50
 8004b16:	d03c      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x14e>
 8004b18:	2b50      	cmp	r3, #80	; 0x50
 8004b1a:	d873      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b1c:	2b40      	cmp	r3, #64	; 0x40
 8004b1e:	d058      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x18e>
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d86f      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b24:	2b30      	cmp	r3, #48	; 0x30
 8004b26:	d064      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004b28:	2b30      	cmp	r3, #48	; 0x30
 8004b2a:	d86b      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d060      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d867      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x1c0>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d05c      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d05a      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004b3c:	e062      	b.n	8004c04 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6899      	ldr	r1, [r3, #8]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f000 f97f 	bl	8004e50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	609a      	str	r2, [r3, #8]
      break;
 8004b6a:	e04f      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	6899      	ldr	r1, [r3, #8]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f000 f968 	bl	8004e50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b8e:	609a      	str	r2, [r3, #8]
      break;
 8004b90:	e03c      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6859      	ldr	r1, [r3, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f000 f8da 	bl	8004d58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2150      	movs	r1, #80	; 0x50
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f933 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 8004bb0:	e02c      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6859      	ldr	r1, [r3, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f000 f8f9 	bl	8004db6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2160      	movs	r1, #96	; 0x60
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 f923 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 8004bd0:	e01c      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6859      	ldr	r1, [r3, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f000 f8ba 	bl	8004d58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2140      	movs	r1, #64	; 0x40
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 f913 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 8004bf0:	e00c      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	f000 f90a 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 8004c02:	e003      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
      break;
 8004c08:	e000      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	00100070 	.word	0x00100070
 8004c2c:	00100040 	.word	0x00100040
 8004c30:	00100030 	.word	0x00100030
 8004c34:	00100020 	.word	0x00100020

08004c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3c      	ldr	r2, [pc, #240]	; (8004d3c <TIM_Base_SetConfig+0x104>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00f      	beq.n	8004c70 <TIM_Base_SetConfig+0x38>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c56:	d00b      	beq.n	8004c70 <TIM_Base_SetConfig+0x38>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a39      	ldr	r2, [pc, #228]	; (8004d40 <TIM_Base_SetConfig+0x108>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d007      	beq.n	8004c70 <TIM_Base_SetConfig+0x38>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a38      	ldr	r2, [pc, #224]	; (8004d44 <TIM_Base_SetConfig+0x10c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_Base_SetConfig+0x38>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a37      	ldr	r2, [pc, #220]	; (8004d48 <TIM_Base_SetConfig+0x110>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d108      	bne.n	8004c82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2d      	ldr	r2, [pc, #180]	; (8004d3c <TIM_Base_SetConfig+0x104>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d01b      	beq.n	8004cc2 <TIM_Base_SetConfig+0x8a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c90:	d017      	beq.n	8004cc2 <TIM_Base_SetConfig+0x8a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2a      	ldr	r2, [pc, #168]	; (8004d40 <TIM_Base_SetConfig+0x108>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <TIM_Base_SetConfig+0x8a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a29      	ldr	r2, [pc, #164]	; (8004d44 <TIM_Base_SetConfig+0x10c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00f      	beq.n	8004cc2 <TIM_Base_SetConfig+0x8a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a28      	ldr	r2, [pc, #160]	; (8004d48 <TIM_Base_SetConfig+0x110>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00b      	beq.n	8004cc2 <TIM_Base_SetConfig+0x8a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a27      	ldr	r2, [pc, #156]	; (8004d4c <TIM_Base_SetConfig+0x114>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d007      	beq.n	8004cc2 <TIM_Base_SetConfig+0x8a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a26      	ldr	r2, [pc, #152]	; (8004d50 <TIM_Base_SetConfig+0x118>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d003      	beq.n	8004cc2 <TIM_Base_SetConfig+0x8a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a25      	ldr	r2, [pc, #148]	; (8004d54 <TIM_Base_SetConfig+0x11c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d108      	bne.n	8004cd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a10      	ldr	r2, [pc, #64]	; (8004d3c <TIM_Base_SetConfig+0x104>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00f      	beq.n	8004d20 <TIM_Base_SetConfig+0xe8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a11      	ldr	r2, [pc, #68]	; (8004d48 <TIM_Base_SetConfig+0x110>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00b      	beq.n	8004d20 <TIM_Base_SetConfig+0xe8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a10      	ldr	r2, [pc, #64]	; (8004d4c <TIM_Base_SetConfig+0x114>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d007      	beq.n	8004d20 <TIM_Base_SetConfig+0xe8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a0f      	ldr	r2, [pc, #60]	; (8004d50 <TIM_Base_SetConfig+0x118>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d003      	beq.n	8004d20 <TIM_Base_SetConfig+0xe8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a0e      	ldr	r2, [pc, #56]	; (8004d54 <TIM_Base_SetConfig+0x11c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d103      	bne.n	8004d28 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	615a      	str	r2, [r3, #20]
}
 8004d2e:	bf00      	nop
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40000800 	.word	0x40000800
 8004d48:	40013400 	.word	0x40013400
 8004d4c:	40014000 	.word	0x40014000
 8004d50:	40014400 	.word	0x40014400
 8004d54:	40014800 	.word	0x40014800

08004d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f023 0201 	bic.w	r2, r3, #1
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f023 030a 	bic.w	r3, r3, #10
 8004d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	621a      	str	r2, [r3, #32]
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b087      	sub	sp, #28
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f023 0210 	bic.w	r2, r3, #16
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004de0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	031b      	lsls	r3, r3, #12
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004df2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b085      	sub	sp, #20
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f043 0307 	orr.w	r3, r3, #7
 8004e3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	609a      	str	r2, [r3, #8]
}
 8004e44:	bf00      	nop
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	021a      	lsls	r2, r3, #8
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	609a      	str	r2, [r3, #8]
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e065      	b.n	8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a2c      	ldr	r2, [pc, #176]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d004      	beq.n	8004edc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a2b      	ldr	r2, [pc, #172]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d108      	bne.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ee2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1b      	ldr	r2, [pc, #108]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d018      	beq.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1e:	d013      	beq.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00e      	beq.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a17      	ldr	r2, [pc, #92]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d009      	beq.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a12      	ldr	r2, [pc, #72]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d004      	beq.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a13      	ldr	r2, [pc, #76]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d10c      	bne.n	8004f62 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	40012c00 	.word	0x40012c00
 8004f84:	40013400 	.word	0x40013400
 8004f88:	40000400 	.word	0x40000400
 8004f8c:	40000800 	.word	0x40000800
 8004f90:	40014000 	.word	0x40014000

08004f94 <__errno>:
 8004f94:	4b01      	ldr	r3, [pc, #4]	; (8004f9c <__errno+0x8>)
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	2000000c 	.word	0x2000000c

08004fa0 <__libc_init_array>:
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	4d0d      	ldr	r5, [pc, #52]	; (8004fd8 <__libc_init_array+0x38>)
 8004fa4:	4c0d      	ldr	r4, [pc, #52]	; (8004fdc <__libc_init_array+0x3c>)
 8004fa6:	1b64      	subs	r4, r4, r5
 8004fa8:	10a4      	asrs	r4, r4, #2
 8004faa:	2600      	movs	r6, #0
 8004fac:	42a6      	cmp	r6, r4
 8004fae:	d109      	bne.n	8004fc4 <__libc_init_array+0x24>
 8004fb0:	4d0b      	ldr	r5, [pc, #44]	; (8004fe0 <__libc_init_array+0x40>)
 8004fb2:	4c0c      	ldr	r4, [pc, #48]	; (8004fe4 <__libc_init_array+0x44>)
 8004fb4:	f004 fc90 	bl	80098d8 <_init>
 8004fb8:	1b64      	subs	r4, r4, r5
 8004fba:	10a4      	asrs	r4, r4, #2
 8004fbc:	2600      	movs	r6, #0
 8004fbe:	42a6      	cmp	r6, r4
 8004fc0:	d105      	bne.n	8004fce <__libc_init_array+0x2e>
 8004fc2:	bd70      	pop	{r4, r5, r6, pc}
 8004fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc8:	4798      	blx	r3
 8004fca:	3601      	adds	r6, #1
 8004fcc:	e7ee      	b.n	8004fac <__libc_init_array+0xc>
 8004fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd2:	4798      	blx	r3
 8004fd4:	3601      	adds	r6, #1
 8004fd6:	e7f2      	b.n	8004fbe <__libc_init_array+0x1e>
 8004fd8:	08009da4 	.word	0x08009da4
 8004fdc:	08009da4 	.word	0x08009da4
 8004fe0:	08009da4 	.word	0x08009da4
 8004fe4:	08009da8 	.word	0x08009da8

08004fe8 <memset>:
 8004fe8:	4402      	add	r2, r0
 8004fea:	4603      	mov	r3, r0
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d100      	bne.n	8004ff2 <memset+0xa>
 8004ff0:	4770      	bx	lr
 8004ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ff6:	e7f9      	b.n	8004fec <memset+0x4>

08004ff8 <__cvt>:
 8004ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ffc:	ec55 4b10 	vmov	r4, r5, d0
 8005000:	2d00      	cmp	r5, #0
 8005002:	460e      	mov	r6, r1
 8005004:	4619      	mov	r1, r3
 8005006:	462b      	mov	r3, r5
 8005008:	bfbb      	ittet	lt
 800500a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800500e:	461d      	movlt	r5, r3
 8005010:	2300      	movge	r3, #0
 8005012:	232d      	movlt	r3, #45	; 0x2d
 8005014:	700b      	strb	r3, [r1, #0]
 8005016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005018:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800501c:	4691      	mov	r9, r2
 800501e:	f023 0820 	bic.w	r8, r3, #32
 8005022:	bfbc      	itt	lt
 8005024:	4622      	movlt	r2, r4
 8005026:	4614      	movlt	r4, r2
 8005028:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800502c:	d005      	beq.n	800503a <__cvt+0x42>
 800502e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005032:	d100      	bne.n	8005036 <__cvt+0x3e>
 8005034:	3601      	adds	r6, #1
 8005036:	2102      	movs	r1, #2
 8005038:	e000      	b.n	800503c <__cvt+0x44>
 800503a:	2103      	movs	r1, #3
 800503c:	ab03      	add	r3, sp, #12
 800503e:	9301      	str	r3, [sp, #4]
 8005040:	ab02      	add	r3, sp, #8
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	ec45 4b10 	vmov	d0, r4, r5
 8005048:	4653      	mov	r3, sl
 800504a:	4632      	mov	r2, r6
 800504c:	f001 fdac 	bl	8006ba8 <_dtoa_r>
 8005050:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005054:	4607      	mov	r7, r0
 8005056:	d102      	bne.n	800505e <__cvt+0x66>
 8005058:	f019 0f01 	tst.w	r9, #1
 800505c:	d022      	beq.n	80050a4 <__cvt+0xac>
 800505e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005062:	eb07 0906 	add.w	r9, r7, r6
 8005066:	d110      	bne.n	800508a <__cvt+0x92>
 8005068:	783b      	ldrb	r3, [r7, #0]
 800506a:	2b30      	cmp	r3, #48	; 0x30
 800506c:	d10a      	bne.n	8005084 <__cvt+0x8c>
 800506e:	2200      	movs	r2, #0
 8005070:	2300      	movs	r3, #0
 8005072:	4620      	mov	r0, r4
 8005074:	4629      	mov	r1, r5
 8005076:	f7fb fd4f 	bl	8000b18 <__aeabi_dcmpeq>
 800507a:	b918      	cbnz	r0, 8005084 <__cvt+0x8c>
 800507c:	f1c6 0601 	rsb	r6, r6, #1
 8005080:	f8ca 6000 	str.w	r6, [sl]
 8005084:	f8da 3000 	ldr.w	r3, [sl]
 8005088:	4499      	add	r9, r3
 800508a:	2200      	movs	r2, #0
 800508c:	2300      	movs	r3, #0
 800508e:	4620      	mov	r0, r4
 8005090:	4629      	mov	r1, r5
 8005092:	f7fb fd41 	bl	8000b18 <__aeabi_dcmpeq>
 8005096:	b108      	cbz	r0, 800509c <__cvt+0xa4>
 8005098:	f8cd 900c 	str.w	r9, [sp, #12]
 800509c:	2230      	movs	r2, #48	; 0x30
 800509e:	9b03      	ldr	r3, [sp, #12]
 80050a0:	454b      	cmp	r3, r9
 80050a2:	d307      	bcc.n	80050b4 <__cvt+0xbc>
 80050a4:	9b03      	ldr	r3, [sp, #12]
 80050a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050a8:	1bdb      	subs	r3, r3, r7
 80050aa:	4638      	mov	r0, r7
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	b004      	add	sp, #16
 80050b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b4:	1c59      	adds	r1, r3, #1
 80050b6:	9103      	str	r1, [sp, #12]
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	e7f0      	b.n	800509e <__cvt+0xa6>

080050bc <__exponent>:
 80050bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050be:	4603      	mov	r3, r0
 80050c0:	2900      	cmp	r1, #0
 80050c2:	bfb8      	it	lt
 80050c4:	4249      	neglt	r1, r1
 80050c6:	f803 2b02 	strb.w	r2, [r3], #2
 80050ca:	bfb4      	ite	lt
 80050cc:	222d      	movlt	r2, #45	; 0x2d
 80050ce:	222b      	movge	r2, #43	; 0x2b
 80050d0:	2909      	cmp	r1, #9
 80050d2:	7042      	strb	r2, [r0, #1]
 80050d4:	dd2a      	ble.n	800512c <__exponent+0x70>
 80050d6:	f10d 0407 	add.w	r4, sp, #7
 80050da:	46a4      	mov	ip, r4
 80050dc:	270a      	movs	r7, #10
 80050de:	46a6      	mov	lr, r4
 80050e0:	460a      	mov	r2, r1
 80050e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80050e6:	fb07 1516 	mls	r5, r7, r6, r1
 80050ea:	3530      	adds	r5, #48	; 0x30
 80050ec:	2a63      	cmp	r2, #99	; 0x63
 80050ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80050f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80050f6:	4631      	mov	r1, r6
 80050f8:	dcf1      	bgt.n	80050de <__exponent+0x22>
 80050fa:	3130      	adds	r1, #48	; 0x30
 80050fc:	f1ae 0502 	sub.w	r5, lr, #2
 8005100:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005104:	1c44      	adds	r4, r0, #1
 8005106:	4629      	mov	r1, r5
 8005108:	4561      	cmp	r1, ip
 800510a:	d30a      	bcc.n	8005122 <__exponent+0x66>
 800510c:	f10d 0209 	add.w	r2, sp, #9
 8005110:	eba2 020e 	sub.w	r2, r2, lr
 8005114:	4565      	cmp	r5, ip
 8005116:	bf88      	it	hi
 8005118:	2200      	movhi	r2, #0
 800511a:	4413      	add	r3, r2
 800511c:	1a18      	subs	r0, r3, r0
 800511e:	b003      	add	sp, #12
 8005120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005126:	f804 2f01 	strb.w	r2, [r4, #1]!
 800512a:	e7ed      	b.n	8005108 <__exponent+0x4c>
 800512c:	2330      	movs	r3, #48	; 0x30
 800512e:	3130      	adds	r1, #48	; 0x30
 8005130:	7083      	strb	r3, [r0, #2]
 8005132:	70c1      	strb	r1, [r0, #3]
 8005134:	1d03      	adds	r3, r0, #4
 8005136:	e7f1      	b.n	800511c <__exponent+0x60>

08005138 <_printf_float>:
 8005138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513c:	ed2d 8b02 	vpush	{d8}
 8005140:	b08d      	sub	sp, #52	; 0x34
 8005142:	460c      	mov	r4, r1
 8005144:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005148:	4616      	mov	r6, r2
 800514a:	461f      	mov	r7, r3
 800514c:	4605      	mov	r5, r0
 800514e:	f002 fe89 	bl	8007e64 <_localeconv_r>
 8005152:	f8d0 a000 	ldr.w	sl, [r0]
 8005156:	4650      	mov	r0, sl
 8005158:	f7fb f862 	bl	8000220 <strlen>
 800515c:	2300      	movs	r3, #0
 800515e:	930a      	str	r3, [sp, #40]	; 0x28
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	9305      	str	r3, [sp, #20]
 8005164:	f8d8 3000 	ldr.w	r3, [r8]
 8005168:	f894 b018 	ldrb.w	fp, [r4, #24]
 800516c:	3307      	adds	r3, #7
 800516e:	f023 0307 	bic.w	r3, r3, #7
 8005172:	f103 0208 	add.w	r2, r3, #8
 8005176:	f8c8 2000 	str.w	r2, [r8]
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005182:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005186:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800518a:	9307      	str	r3, [sp, #28]
 800518c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005190:	ee08 0a10 	vmov	s16, r0
 8005194:	4b9f      	ldr	r3, [pc, #636]	; (8005414 <_printf_float+0x2dc>)
 8005196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800519a:	f04f 32ff 	mov.w	r2, #4294967295
 800519e:	f7fb fced 	bl	8000b7c <__aeabi_dcmpun>
 80051a2:	bb88      	cbnz	r0, 8005208 <_printf_float+0xd0>
 80051a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051a8:	4b9a      	ldr	r3, [pc, #616]	; (8005414 <_printf_float+0x2dc>)
 80051aa:	f04f 32ff 	mov.w	r2, #4294967295
 80051ae:	f7fb fcc7 	bl	8000b40 <__aeabi_dcmple>
 80051b2:	bb48      	cbnz	r0, 8005208 <_printf_float+0xd0>
 80051b4:	2200      	movs	r2, #0
 80051b6:	2300      	movs	r3, #0
 80051b8:	4640      	mov	r0, r8
 80051ba:	4649      	mov	r1, r9
 80051bc:	f7fb fcb6 	bl	8000b2c <__aeabi_dcmplt>
 80051c0:	b110      	cbz	r0, 80051c8 <_printf_float+0x90>
 80051c2:	232d      	movs	r3, #45	; 0x2d
 80051c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c8:	4b93      	ldr	r3, [pc, #588]	; (8005418 <_printf_float+0x2e0>)
 80051ca:	4894      	ldr	r0, [pc, #592]	; (800541c <_printf_float+0x2e4>)
 80051cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80051d0:	bf94      	ite	ls
 80051d2:	4698      	movls	r8, r3
 80051d4:	4680      	movhi	r8, r0
 80051d6:	2303      	movs	r3, #3
 80051d8:	6123      	str	r3, [r4, #16]
 80051da:	9b05      	ldr	r3, [sp, #20]
 80051dc:	f023 0204 	bic.w	r2, r3, #4
 80051e0:	6022      	str	r2, [r4, #0]
 80051e2:	f04f 0900 	mov.w	r9, #0
 80051e6:	9700      	str	r7, [sp, #0]
 80051e8:	4633      	mov	r3, r6
 80051ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80051ec:	4621      	mov	r1, r4
 80051ee:	4628      	mov	r0, r5
 80051f0:	f000 f9d8 	bl	80055a4 <_printf_common>
 80051f4:	3001      	adds	r0, #1
 80051f6:	f040 8090 	bne.w	800531a <_printf_float+0x1e2>
 80051fa:	f04f 30ff 	mov.w	r0, #4294967295
 80051fe:	b00d      	add	sp, #52	; 0x34
 8005200:	ecbd 8b02 	vpop	{d8}
 8005204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005208:	4642      	mov	r2, r8
 800520a:	464b      	mov	r3, r9
 800520c:	4640      	mov	r0, r8
 800520e:	4649      	mov	r1, r9
 8005210:	f7fb fcb4 	bl	8000b7c <__aeabi_dcmpun>
 8005214:	b140      	cbz	r0, 8005228 <_printf_float+0xf0>
 8005216:	464b      	mov	r3, r9
 8005218:	2b00      	cmp	r3, #0
 800521a:	bfbc      	itt	lt
 800521c:	232d      	movlt	r3, #45	; 0x2d
 800521e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005222:	487f      	ldr	r0, [pc, #508]	; (8005420 <_printf_float+0x2e8>)
 8005224:	4b7f      	ldr	r3, [pc, #508]	; (8005424 <_printf_float+0x2ec>)
 8005226:	e7d1      	b.n	80051cc <_printf_float+0x94>
 8005228:	6863      	ldr	r3, [r4, #4]
 800522a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800522e:	9206      	str	r2, [sp, #24]
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	d13f      	bne.n	80052b4 <_printf_float+0x17c>
 8005234:	2306      	movs	r3, #6
 8005236:	6063      	str	r3, [r4, #4]
 8005238:	9b05      	ldr	r3, [sp, #20]
 800523a:	6861      	ldr	r1, [r4, #4]
 800523c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005240:	2300      	movs	r3, #0
 8005242:	9303      	str	r3, [sp, #12]
 8005244:	ab0a      	add	r3, sp, #40	; 0x28
 8005246:	e9cd b301 	strd	fp, r3, [sp, #4]
 800524a:	ab09      	add	r3, sp, #36	; 0x24
 800524c:	ec49 8b10 	vmov	d0, r8, r9
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	6022      	str	r2, [r4, #0]
 8005254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005258:	4628      	mov	r0, r5
 800525a:	f7ff fecd 	bl	8004ff8 <__cvt>
 800525e:	9b06      	ldr	r3, [sp, #24]
 8005260:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005262:	2b47      	cmp	r3, #71	; 0x47
 8005264:	4680      	mov	r8, r0
 8005266:	d108      	bne.n	800527a <_printf_float+0x142>
 8005268:	1cc8      	adds	r0, r1, #3
 800526a:	db02      	blt.n	8005272 <_printf_float+0x13a>
 800526c:	6863      	ldr	r3, [r4, #4]
 800526e:	4299      	cmp	r1, r3
 8005270:	dd41      	ble.n	80052f6 <_printf_float+0x1be>
 8005272:	f1ab 0b02 	sub.w	fp, fp, #2
 8005276:	fa5f fb8b 	uxtb.w	fp, fp
 800527a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800527e:	d820      	bhi.n	80052c2 <_printf_float+0x18a>
 8005280:	3901      	subs	r1, #1
 8005282:	465a      	mov	r2, fp
 8005284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005288:	9109      	str	r1, [sp, #36]	; 0x24
 800528a:	f7ff ff17 	bl	80050bc <__exponent>
 800528e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005290:	1813      	adds	r3, r2, r0
 8005292:	2a01      	cmp	r2, #1
 8005294:	4681      	mov	r9, r0
 8005296:	6123      	str	r3, [r4, #16]
 8005298:	dc02      	bgt.n	80052a0 <_printf_float+0x168>
 800529a:	6822      	ldr	r2, [r4, #0]
 800529c:	07d2      	lsls	r2, r2, #31
 800529e:	d501      	bpl.n	80052a4 <_printf_float+0x16c>
 80052a0:	3301      	adds	r3, #1
 80052a2:	6123      	str	r3, [r4, #16]
 80052a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d09c      	beq.n	80051e6 <_printf_float+0xae>
 80052ac:	232d      	movs	r3, #45	; 0x2d
 80052ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052b2:	e798      	b.n	80051e6 <_printf_float+0xae>
 80052b4:	9a06      	ldr	r2, [sp, #24]
 80052b6:	2a47      	cmp	r2, #71	; 0x47
 80052b8:	d1be      	bne.n	8005238 <_printf_float+0x100>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1bc      	bne.n	8005238 <_printf_float+0x100>
 80052be:	2301      	movs	r3, #1
 80052c0:	e7b9      	b.n	8005236 <_printf_float+0xfe>
 80052c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80052c6:	d118      	bne.n	80052fa <_printf_float+0x1c2>
 80052c8:	2900      	cmp	r1, #0
 80052ca:	6863      	ldr	r3, [r4, #4]
 80052cc:	dd0b      	ble.n	80052e6 <_printf_float+0x1ae>
 80052ce:	6121      	str	r1, [r4, #16]
 80052d0:	b913      	cbnz	r3, 80052d8 <_printf_float+0x1a0>
 80052d2:	6822      	ldr	r2, [r4, #0]
 80052d4:	07d0      	lsls	r0, r2, #31
 80052d6:	d502      	bpl.n	80052de <_printf_float+0x1a6>
 80052d8:	3301      	adds	r3, #1
 80052da:	440b      	add	r3, r1
 80052dc:	6123      	str	r3, [r4, #16]
 80052de:	65a1      	str	r1, [r4, #88]	; 0x58
 80052e0:	f04f 0900 	mov.w	r9, #0
 80052e4:	e7de      	b.n	80052a4 <_printf_float+0x16c>
 80052e6:	b913      	cbnz	r3, 80052ee <_printf_float+0x1b6>
 80052e8:	6822      	ldr	r2, [r4, #0]
 80052ea:	07d2      	lsls	r2, r2, #31
 80052ec:	d501      	bpl.n	80052f2 <_printf_float+0x1ba>
 80052ee:	3302      	adds	r3, #2
 80052f0:	e7f4      	b.n	80052dc <_printf_float+0x1a4>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e7f2      	b.n	80052dc <_printf_float+0x1a4>
 80052f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80052fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052fc:	4299      	cmp	r1, r3
 80052fe:	db05      	blt.n	800530c <_printf_float+0x1d4>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	6121      	str	r1, [r4, #16]
 8005304:	07d8      	lsls	r0, r3, #31
 8005306:	d5ea      	bpl.n	80052de <_printf_float+0x1a6>
 8005308:	1c4b      	adds	r3, r1, #1
 800530a:	e7e7      	b.n	80052dc <_printf_float+0x1a4>
 800530c:	2900      	cmp	r1, #0
 800530e:	bfd4      	ite	le
 8005310:	f1c1 0202 	rsble	r2, r1, #2
 8005314:	2201      	movgt	r2, #1
 8005316:	4413      	add	r3, r2
 8005318:	e7e0      	b.n	80052dc <_printf_float+0x1a4>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	055a      	lsls	r2, r3, #21
 800531e:	d407      	bmi.n	8005330 <_printf_float+0x1f8>
 8005320:	6923      	ldr	r3, [r4, #16]
 8005322:	4642      	mov	r2, r8
 8005324:	4631      	mov	r1, r6
 8005326:	4628      	mov	r0, r5
 8005328:	47b8      	blx	r7
 800532a:	3001      	adds	r0, #1
 800532c:	d12c      	bne.n	8005388 <_printf_float+0x250>
 800532e:	e764      	b.n	80051fa <_printf_float+0xc2>
 8005330:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005334:	f240 80e0 	bls.w	80054f8 <_printf_float+0x3c0>
 8005338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800533c:	2200      	movs	r2, #0
 800533e:	2300      	movs	r3, #0
 8005340:	f7fb fbea 	bl	8000b18 <__aeabi_dcmpeq>
 8005344:	2800      	cmp	r0, #0
 8005346:	d034      	beq.n	80053b2 <_printf_float+0x27a>
 8005348:	4a37      	ldr	r2, [pc, #220]	; (8005428 <_printf_float+0x2f0>)
 800534a:	2301      	movs	r3, #1
 800534c:	4631      	mov	r1, r6
 800534e:	4628      	mov	r0, r5
 8005350:	47b8      	blx	r7
 8005352:	3001      	adds	r0, #1
 8005354:	f43f af51 	beq.w	80051fa <_printf_float+0xc2>
 8005358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800535c:	429a      	cmp	r2, r3
 800535e:	db02      	blt.n	8005366 <_printf_float+0x22e>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	07d8      	lsls	r0, r3, #31
 8005364:	d510      	bpl.n	8005388 <_printf_float+0x250>
 8005366:	ee18 3a10 	vmov	r3, s16
 800536a:	4652      	mov	r2, sl
 800536c:	4631      	mov	r1, r6
 800536e:	4628      	mov	r0, r5
 8005370:	47b8      	blx	r7
 8005372:	3001      	adds	r0, #1
 8005374:	f43f af41 	beq.w	80051fa <_printf_float+0xc2>
 8005378:	f04f 0800 	mov.w	r8, #0
 800537c:	f104 091a 	add.w	r9, r4, #26
 8005380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005382:	3b01      	subs	r3, #1
 8005384:	4543      	cmp	r3, r8
 8005386:	dc09      	bgt.n	800539c <_printf_float+0x264>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	079b      	lsls	r3, r3, #30
 800538c:	f100 8105 	bmi.w	800559a <_printf_float+0x462>
 8005390:	68e0      	ldr	r0, [r4, #12]
 8005392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005394:	4298      	cmp	r0, r3
 8005396:	bfb8      	it	lt
 8005398:	4618      	movlt	r0, r3
 800539a:	e730      	b.n	80051fe <_printf_float+0xc6>
 800539c:	2301      	movs	r3, #1
 800539e:	464a      	mov	r2, r9
 80053a0:	4631      	mov	r1, r6
 80053a2:	4628      	mov	r0, r5
 80053a4:	47b8      	blx	r7
 80053a6:	3001      	adds	r0, #1
 80053a8:	f43f af27 	beq.w	80051fa <_printf_float+0xc2>
 80053ac:	f108 0801 	add.w	r8, r8, #1
 80053b0:	e7e6      	b.n	8005380 <_printf_float+0x248>
 80053b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	dc39      	bgt.n	800542c <_printf_float+0x2f4>
 80053b8:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <_printf_float+0x2f0>)
 80053ba:	2301      	movs	r3, #1
 80053bc:	4631      	mov	r1, r6
 80053be:	4628      	mov	r0, r5
 80053c0:	47b8      	blx	r7
 80053c2:	3001      	adds	r0, #1
 80053c4:	f43f af19 	beq.w	80051fa <_printf_float+0xc2>
 80053c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053cc:	4313      	orrs	r3, r2
 80053ce:	d102      	bne.n	80053d6 <_printf_float+0x29e>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	07d9      	lsls	r1, r3, #31
 80053d4:	d5d8      	bpl.n	8005388 <_printf_float+0x250>
 80053d6:	ee18 3a10 	vmov	r3, s16
 80053da:	4652      	mov	r2, sl
 80053dc:	4631      	mov	r1, r6
 80053de:	4628      	mov	r0, r5
 80053e0:	47b8      	blx	r7
 80053e2:	3001      	adds	r0, #1
 80053e4:	f43f af09 	beq.w	80051fa <_printf_float+0xc2>
 80053e8:	f04f 0900 	mov.w	r9, #0
 80053ec:	f104 0a1a 	add.w	sl, r4, #26
 80053f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f2:	425b      	negs	r3, r3
 80053f4:	454b      	cmp	r3, r9
 80053f6:	dc01      	bgt.n	80053fc <_printf_float+0x2c4>
 80053f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053fa:	e792      	b.n	8005322 <_printf_float+0x1ea>
 80053fc:	2301      	movs	r3, #1
 80053fe:	4652      	mov	r2, sl
 8005400:	4631      	mov	r1, r6
 8005402:	4628      	mov	r0, r5
 8005404:	47b8      	blx	r7
 8005406:	3001      	adds	r0, #1
 8005408:	f43f aef7 	beq.w	80051fa <_printf_float+0xc2>
 800540c:	f109 0901 	add.w	r9, r9, #1
 8005410:	e7ee      	b.n	80053f0 <_printf_float+0x2b8>
 8005412:	bf00      	nop
 8005414:	7fefffff 	.word	0x7fefffff
 8005418:	08009904 	.word	0x08009904
 800541c:	08009908 	.word	0x08009908
 8005420:	08009910 	.word	0x08009910
 8005424:	0800990c 	.word	0x0800990c
 8005428:	08009914 	.word	0x08009914
 800542c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800542e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005430:	429a      	cmp	r2, r3
 8005432:	bfa8      	it	ge
 8005434:	461a      	movge	r2, r3
 8005436:	2a00      	cmp	r2, #0
 8005438:	4691      	mov	r9, r2
 800543a:	dc37      	bgt.n	80054ac <_printf_float+0x374>
 800543c:	f04f 0b00 	mov.w	fp, #0
 8005440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005444:	f104 021a 	add.w	r2, r4, #26
 8005448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800544a:	9305      	str	r3, [sp, #20]
 800544c:	eba3 0309 	sub.w	r3, r3, r9
 8005450:	455b      	cmp	r3, fp
 8005452:	dc33      	bgt.n	80054bc <_printf_float+0x384>
 8005454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005458:	429a      	cmp	r2, r3
 800545a:	db3b      	blt.n	80054d4 <_printf_float+0x39c>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	07da      	lsls	r2, r3, #31
 8005460:	d438      	bmi.n	80054d4 <_printf_float+0x39c>
 8005462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005464:	9a05      	ldr	r2, [sp, #20]
 8005466:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005468:	1a9a      	subs	r2, r3, r2
 800546a:	eba3 0901 	sub.w	r9, r3, r1
 800546e:	4591      	cmp	r9, r2
 8005470:	bfa8      	it	ge
 8005472:	4691      	movge	r9, r2
 8005474:	f1b9 0f00 	cmp.w	r9, #0
 8005478:	dc35      	bgt.n	80054e6 <_printf_float+0x3ae>
 800547a:	f04f 0800 	mov.w	r8, #0
 800547e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005482:	f104 0a1a 	add.w	sl, r4, #26
 8005486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	eba3 0309 	sub.w	r3, r3, r9
 8005490:	4543      	cmp	r3, r8
 8005492:	f77f af79 	ble.w	8005388 <_printf_float+0x250>
 8005496:	2301      	movs	r3, #1
 8005498:	4652      	mov	r2, sl
 800549a:	4631      	mov	r1, r6
 800549c:	4628      	mov	r0, r5
 800549e:	47b8      	blx	r7
 80054a0:	3001      	adds	r0, #1
 80054a2:	f43f aeaa 	beq.w	80051fa <_printf_float+0xc2>
 80054a6:	f108 0801 	add.w	r8, r8, #1
 80054aa:	e7ec      	b.n	8005486 <_printf_float+0x34e>
 80054ac:	4613      	mov	r3, r2
 80054ae:	4631      	mov	r1, r6
 80054b0:	4642      	mov	r2, r8
 80054b2:	4628      	mov	r0, r5
 80054b4:	47b8      	blx	r7
 80054b6:	3001      	adds	r0, #1
 80054b8:	d1c0      	bne.n	800543c <_printf_float+0x304>
 80054ba:	e69e      	b.n	80051fa <_printf_float+0xc2>
 80054bc:	2301      	movs	r3, #1
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	9205      	str	r2, [sp, #20]
 80054c4:	47b8      	blx	r7
 80054c6:	3001      	adds	r0, #1
 80054c8:	f43f ae97 	beq.w	80051fa <_printf_float+0xc2>
 80054cc:	9a05      	ldr	r2, [sp, #20]
 80054ce:	f10b 0b01 	add.w	fp, fp, #1
 80054d2:	e7b9      	b.n	8005448 <_printf_float+0x310>
 80054d4:	ee18 3a10 	vmov	r3, s16
 80054d8:	4652      	mov	r2, sl
 80054da:	4631      	mov	r1, r6
 80054dc:	4628      	mov	r0, r5
 80054de:	47b8      	blx	r7
 80054e0:	3001      	adds	r0, #1
 80054e2:	d1be      	bne.n	8005462 <_printf_float+0x32a>
 80054e4:	e689      	b.n	80051fa <_printf_float+0xc2>
 80054e6:	9a05      	ldr	r2, [sp, #20]
 80054e8:	464b      	mov	r3, r9
 80054ea:	4442      	add	r2, r8
 80054ec:	4631      	mov	r1, r6
 80054ee:	4628      	mov	r0, r5
 80054f0:	47b8      	blx	r7
 80054f2:	3001      	adds	r0, #1
 80054f4:	d1c1      	bne.n	800547a <_printf_float+0x342>
 80054f6:	e680      	b.n	80051fa <_printf_float+0xc2>
 80054f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054fa:	2a01      	cmp	r2, #1
 80054fc:	dc01      	bgt.n	8005502 <_printf_float+0x3ca>
 80054fe:	07db      	lsls	r3, r3, #31
 8005500:	d538      	bpl.n	8005574 <_printf_float+0x43c>
 8005502:	2301      	movs	r3, #1
 8005504:	4642      	mov	r2, r8
 8005506:	4631      	mov	r1, r6
 8005508:	4628      	mov	r0, r5
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	f43f ae74 	beq.w	80051fa <_printf_float+0xc2>
 8005512:	ee18 3a10 	vmov	r3, s16
 8005516:	4652      	mov	r2, sl
 8005518:	4631      	mov	r1, r6
 800551a:	4628      	mov	r0, r5
 800551c:	47b8      	blx	r7
 800551e:	3001      	adds	r0, #1
 8005520:	f43f ae6b 	beq.w	80051fa <_printf_float+0xc2>
 8005524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005528:	2200      	movs	r2, #0
 800552a:	2300      	movs	r3, #0
 800552c:	f7fb faf4 	bl	8000b18 <__aeabi_dcmpeq>
 8005530:	b9d8      	cbnz	r0, 800556a <_printf_float+0x432>
 8005532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005534:	f108 0201 	add.w	r2, r8, #1
 8005538:	3b01      	subs	r3, #1
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	47b8      	blx	r7
 8005540:	3001      	adds	r0, #1
 8005542:	d10e      	bne.n	8005562 <_printf_float+0x42a>
 8005544:	e659      	b.n	80051fa <_printf_float+0xc2>
 8005546:	2301      	movs	r3, #1
 8005548:	4652      	mov	r2, sl
 800554a:	4631      	mov	r1, r6
 800554c:	4628      	mov	r0, r5
 800554e:	47b8      	blx	r7
 8005550:	3001      	adds	r0, #1
 8005552:	f43f ae52 	beq.w	80051fa <_printf_float+0xc2>
 8005556:	f108 0801 	add.w	r8, r8, #1
 800555a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800555c:	3b01      	subs	r3, #1
 800555e:	4543      	cmp	r3, r8
 8005560:	dcf1      	bgt.n	8005546 <_printf_float+0x40e>
 8005562:	464b      	mov	r3, r9
 8005564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005568:	e6dc      	b.n	8005324 <_printf_float+0x1ec>
 800556a:	f04f 0800 	mov.w	r8, #0
 800556e:	f104 0a1a 	add.w	sl, r4, #26
 8005572:	e7f2      	b.n	800555a <_printf_float+0x422>
 8005574:	2301      	movs	r3, #1
 8005576:	4642      	mov	r2, r8
 8005578:	e7df      	b.n	800553a <_printf_float+0x402>
 800557a:	2301      	movs	r3, #1
 800557c:	464a      	mov	r2, r9
 800557e:	4631      	mov	r1, r6
 8005580:	4628      	mov	r0, r5
 8005582:	47b8      	blx	r7
 8005584:	3001      	adds	r0, #1
 8005586:	f43f ae38 	beq.w	80051fa <_printf_float+0xc2>
 800558a:	f108 0801 	add.w	r8, r8, #1
 800558e:	68e3      	ldr	r3, [r4, #12]
 8005590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005592:	1a5b      	subs	r3, r3, r1
 8005594:	4543      	cmp	r3, r8
 8005596:	dcf0      	bgt.n	800557a <_printf_float+0x442>
 8005598:	e6fa      	b.n	8005390 <_printf_float+0x258>
 800559a:	f04f 0800 	mov.w	r8, #0
 800559e:	f104 0919 	add.w	r9, r4, #25
 80055a2:	e7f4      	b.n	800558e <_printf_float+0x456>

080055a4 <_printf_common>:
 80055a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a8:	4616      	mov	r6, r2
 80055aa:	4699      	mov	r9, r3
 80055ac:	688a      	ldr	r2, [r1, #8]
 80055ae:	690b      	ldr	r3, [r1, #16]
 80055b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055b4:	4293      	cmp	r3, r2
 80055b6:	bfb8      	it	lt
 80055b8:	4613      	movlt	r3, r2
 80055ba:	6033      	str	r3, [r6, #0]
 80055bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055c0:	4607      	mov	r7, r0
 80055c2:	460c      	mov	r4, r1
 80055c4:	b10a      	cbz	r2, 80055ca <_printf_common+0x26>
 80055c6:	3301      	adds	r3, #1
 80055c8:	6033      	str	r3, [r6, #0]
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	0699      	lsls	r1, r3, #26
 80055ce:	bf42      	ittt	mi
 80055d0:	6833      	ldrmi	r3, [r6, #0]
 80055d2:	3302      	addmi	r3, #2
 80055d4:	6033      	strmi	r3, [r6, #0]
 80055d6:	6825      	ldr	r5, [r4, #0]
 80055d8:	f015 0506 	ands.w	r5, r5, #6
 80055dc:	d106      	bne.n	80055ec <_printf_common+0x48>
 80055de:	f104 0a19 	add.w	sl, r4, #25
 80055e2:	68e3      	ldr	r3, [r4, #12]
 80055e4:	6832      	ldr	r2, [r6, #0]
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	42ab      	cmp	r3, r5
 80055ea:	dc26      	bgt.n	800563a <_printf_common+0x96>
 80055ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055f0:	1e13      	subs	r3, r2, #0
 80055f2:	6822      	ldr	r2, [r4, #0]
 80055f4:	bf18      	it	ne
 80055f6:	2301      	movne	r3, #1
 80055f8:	0692      	lsls	r2, r2, #26
 80055fa:	d42b      	bmi.n	8005654 <_printf_common+0xb0>
 80055fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005600:	4649      	mov	r1, r9
 8005602:	4638      	mov	r0, r7
 8005604:	47c0      	blx	r8
 8005606:	3001      	adds	r0, #1
 8005608:	d01e      	beq.n	8005648 <_printf_common+0xa4>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	68e5      	ldr	r5, [r4, #12]
 800560e:	6832      	ldr	r2, [r6, #0]
 8005610:	f003 0306 	and.w	r3, r3, #6
 8005614:	2b04      	cmp	r3, #4
 8005616:	bf08      	it	eq
 8005618:	1aad      	subeq	r5, r5, r2
 800561a:	68a3      	ldr	r3, [r4, #8]
 800561c:	6922      	ldr	r2, [r4, #16]
 800561e:	bf0c      	ite	eq
 8005620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005624:	2500      	movne	r5, #0
 8005626:	4293      	cmp	r3, r2
 8005628:	bfc4      	itt	gt
 800562a:	1a9b      	subgt	r3, r3, r2
 800562c:	18ed      	addgt	r5, r5, r3
 800562e:	2600      	movs	r6, #0
 8005630:	341a      	adds	r4, #26
 8005632:	42b5      	cmp	r5, r6
 8005634:	d11a      	bne.n	800566c <_printf_common+0xc8>
 8005636:	2000      	movs	r0, #0
 8005638:	e008      	b.n	800564c <_printf_common+0xa8>
 800563a:	2301      	movs	r3, #1
 800563c:	4652      	mov	r2, sl
 800563e:	4649      	mov	r1, r9
 8005640:	4638      	mov	r0, r7
 8005642:	47c0      	blx	r8
 8005644:	3001      	adds	r0, #1
 8005646:	d103      	bne.n	8005650 <_printf_common+0xac>
 8005648:	f04f 30ff 	mov.w	r0, #4294967295
 800564c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005650:	3501      	adds	r5, #1
 8005652:	e7c6      	b.n	80055e2 <_printf_common+0x3e>
 8005654:	18e1      	adds	r1, r4, r3
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	2030      	movs	r0, #48	; 0x30
 800565a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800565e:	4422      	add	r2, r4
 8005660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005668:	3302      	adds	r3, #2
 800566a:	e7c7      	b.n	80055fc <_printf_common+0x58>
 800566c:	2301      	movs	r3, #1
 800566e:	4622      	mov	r2, r4
 8005670:	4649      	mov	r1, r9
 8005672:	4638      	mov	r0, r7
 8005674:	47c0      	blx	r8
 8005676:	3001      	adds	r0, #1
 8005678:	d0e6      	beq.n	8005648 <_printf_common+0xa4>
 800567a:	3601      	adds	r6, #1
 800567c:	e7d9      	b.n	8005632 <_printf_common+0x8e>
	...

08005680 <_printf_i>:
 8005680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005684:	7e0f      	ldrb	r7, [r1, #24]
 8005686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005688:	2f78      	cmp	r7, #120	; 0x78
 800568a:	4691      	mov	r9, r2
 800568c:	4680      	mov	r8, r0
 800568e:	460c      	mov	r4, r1
 8005690:	469a      	mov	sl, r3
 8005692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005696:	d807      	bhi.n	80056a8 <_printf_i+0x28>
 8005698:	2f62      	cmp	r7, #98	; 0x62
 800569a:	d80a      	bhi.n	80056b2 <_printf_i+0x32>
 800569c:	2f00      	cmp	r7, #0
 800569e:	f000 80d8 	beq.w	8005852 <_printf_i+0x1d2>
 80056a2:	2f58      	cmp	r7, #88	; 0x58
 80056a4:	f000 80a3 	beq.w	80057ee <_printf_i+0x16e>
 80056a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056b0:	e03a      	b.n	8005728 <_printf_i+0xa8>
 80056b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056b6:	2b15      	cmp	r3, #21
 80056b8:	d8f6      	bhi.n	80056a8 <_printf_i+0x28>
 80056ba:	a101      	add	r1, pc, #4	; (adr r1, 80056c0 <_printf_i+0x40>)
 80056bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056c0:	08005719 	.word	0x08005719
 80056c4:	0800572d 	.word	0x0800572d
 80056c8:	080056a9 	.word	0x080056a9
 80056cc:	080056a9 	.word	0x080056a9
 80056d0:	080056a9 	.word	0x080056a9
 80056d4:	080056a9 	.word	0x080056a9
 80056d8:	0800572d 	.word	0x0800572d
 80056dc:	080056a9 	.word	0x080056a9
 80056e0:	080056a9 	.word	0x080056a9
 80056e4:	080056a9 	.word	0x080056a9
 80056e8:	080056a9 	.word	0x080056a9
 80056ec:	08005839 	.word	0x08005839
 80056f0:	0800575d 	.word	0x0800575d
 80056f4:	0800581b 	.word	0x0800581b
 80056f8:	080056a9 	.word	0x080056a9
 80056fc:	080056a9 	.word	0x080056a9
 8005700:	0800585b 	.word	0x0800585b
 8005704:	080056a9 	.word	0x080056a9
 8005708:	0800575d 	.word	0x0800575d
 800570c:	080056a9 	.word	0x080056a9
 8005710:	080056a9 	.word	0x080056a9
 8005714:	08005823 	.word	0x08005823
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	1d1a      	adds	r2, r3, #4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	602a      	str	r2, [r5, #0]
 8005720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005728:	2301      	movs	r3, #1
 800572a:	e0a3      	b.n	8005874 <_printf_i+0x1f4>
 800572c:	6820      	ldr	r0, [r4, #0]
 800572e:	6829      	ldr	r1, [r5, #0]
 8005730:	0606      	lsls	r6, r0, #24
 8005732:	f101 0304 	add.w	r3, r1, #4
 8005736:	d50a      	bpl.n	800574e <_printf_i+0xce>
 8005738:	680e      	ldr	r6, [r1, #0]
 800573a:	602b      	str	r3, [r5, #0]
 800573c:	2e00      	cmp	r6, #0
 800573e:	da03      	bge.n	8005748 <_printf_i+0xc8>
 8005740:	232d      	movs	r3, #45	; 0x2d
 8005742:	4276      	negs	r6, r6
 8005744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005748:	485e      	ldr	r0, [pc, #376]	; (80058c4 <_printf_i+0x244>)
 800574a:	230a      	movs	r3, #10
 800574c:	e019      	b.n	8005782 <_printf_i+0x102>
 800574e:	680e      	ldr	r6, [r1, #0]
 8005750:	602b      	str	r3, [r5, #0]
 8005752:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005756:	bf18      	it	ne
 8005758:	b236      	sxthne	r6, r6
 800575a:	e7ef      	b.n	800573c <_printf_i+0xbc>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	6820      	ldr	r0, [r4, #0]
 8005760:	1d19      	adds	r1, r3, #4
 8005762:	6029      	str	r1, [r5, #0]
 8005764:	0601      	lsls	r1, r0, #24
 8005766:	d501      	bpl.n	800576c <_printf_i+0xec>
 8005768:	681e      	ldr	r6, [r3, #0]
 800576a:	e002      	b.n	8005772 <_printf_i+0xf2>
 800576c:	0646      	lsls	r6, r0, #25
 800576e:	d5fb      	bpl.n	8005768 <_printf_i+0xe8>
 8005770:	881e      	ldrh	r6, [r3, #0]
 8005772:	4854      	ldr	r0, [pc, #336]	; (80058c4 <_printf_i+0x244>)
 8005774:	2f6f      	cmp	r7, #111	; 0x6f
 8005776:	bf0c      	ite	eq
 8005778:	2308      	moveq	r3, #8
 800577a:	230a      	movne	r3, #10
 800577c:	2100      	movs	r1, #0
 800577e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005782:	6865      	ldr	r5, [r4, #4]
 8005784:	60a5      	str	r5, [r4, #8]
 8005786:	2d00      	cmp	r5, #0
 8005788:	bfa2      	ittt	ge
 800578a:	6821      	ldrge	r1, [r4, #0]
 800578c:	f021 0104 	bicge.w	r1, r1, #4
 8005790:	6021      	strge	r1, [r4, #0]
 8005792:	b90e      	cbnz	r6, 8005798 <_printf_i+0x118>
 8005794:	2d00      	cmp	r5, #0
 8005796:	d04d      	beq.n	8005834 <_printf_i+0x1b4>
 8005798:	4615      	mov	r5, r2
 800579a:	fbb6 f1f3 	udiv	r1, r6, r3
 800579e:	fb03 6711 	mls	r7, r3, r1, r6
 80057a2:	5dc7      	ldrb	r7, [r0, r7]
 80057a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057a8:	4637      	mov	r7, r6
 80057aa:	42bb      	cmp	r3, r7
 80057ac:	460e      	mov	r6, r1
 80057ae:	d9f4      	bls.n	800579a <_printf_i+0x11a>
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d10b      	bne.n	80057cc <_printf_i+0x14c>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	07de      	lsls	r6, r3, #31
 80057b8:	d508      	bpl.n	80057cc <_printf_i+0x14c>
 80057ba:	6923      	ldr	r3, [r4, #16]
 80057bc:	6861      	ldr	r1, [r4, #4]
 80057be:	4299      	cmp	r1, r3
 80057c0:	bfde      	ittt	le
 80057c2:	2330      	movle	r3, #48	; 0x30
 80057c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057cc:	1b52      	subs	r2, r2, r5
 80057ce:	6122      	str	r2, [r4, #16]
 80057d0:	f8cd a000 	str.w	sl, [sp]
 80057d4:	464b      	mov	r3, r9
 80057d6:	aa03      	add	r2, sp, #12
 80057d8:	4621      	mov	r1, r4
 80057da:	4640      	mov	r0, r8
 80057dc:	f7ff fee2 	bl	80055a4 <_printf_common>
 80057e0:	3001      	adds	r0, #1
 80057e2:	d14c      	bne.n	800587e <_printf_i+0x1fe>
 80057e4:	f04f 30ff 	mov.w	r0, #4294967295
 80057e8:	b004      	add	sp, #16
 80057ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ee:	4835      	ldr	r0, [pc, #212]	; (80058c4 <_printf_i+0x244>)
 80057f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057f4:	6829      	ldr	r1, [r5, #0]
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80057fc:	6029      	str	r1, [r5, #0]
 80057fe:	061d      	lsls	r5, r3, #24
 8005800:	d514      	bpl.n	800582c <_printf_i+0x1ac>
 8005802:	07df      	lsls	r7, r3, #31
 8005804:	bf44      	itt	mi
 8005806:	f043 0320 	orrmi.w	r3, r3, #32
 800580a:	6023      	strmi	r3, [r4, #0]
 800580c:	b91e      	cbnz	r6, 8005816 <_printf_i+0x196>
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	f023 0320 	bic.w	r3, r3, #32
 8005814:	6023      	str	r3, [r4, #0]
 8005816:	2310      	movs	r3, #16
 8005818:	e7b0      	b.n	800577c <_printf_i+0xfc>
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	f043 0320 	orr.w	r3, r3, #32
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	2378      	movs	r3, #120	; 0x78
 8005824:	4828      	ldr	r0, [pc, #160]	; (80058c8 <_printf_i+0x248>)
 8005826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800582a:	e7e3      	b.n	80057f4 <_printf_i+0x174>
 800582c:	0659      	lsls	r1, r3, #25
 800582e:	bf48      	it	mi
 8005830:	b2b6      	uxthmi	r6, r6
 8005832:	e7e6      	b.n	8005802 <_printf_i+0x182>
 8005834:	4615      	mov	r5, r2
 8005836:	e7bb      	b.n	80057b0 <_printf_i+0x130>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	6826      	ldr	r6, [r4, #0]
 800583c:	6961      	ldr	r1, [r4, #20]
 800583e:	1d18      	adds	r0, r3, #4
 8005840:	6028      	str	r0, [r5, #0]
 8005842:	0635      	lsls	r5, r6, #24
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	d501      	bpl.n	800584c <_printf_i+0x1cc>
 8005848:	6019      	str	r1, [r3, #0]
 800584a:	e002      	b.n	8005852 <_printf_i+0x1d2>
 800584c:	0670      	lsls	r0, r6, #25
 800584e:	d5fb      	bpl.n	8005848 <_printf_i+0x1c8>
 8005850:	8019      	strh	r1, [r3, #0]
 8005852:	2300      	movs	r3, #0
 8005854:	6123      	str	r3, [r4, #16]
 8005856:	4615      	mov	r5, r2
 8005858:	e7ba      	b.n	80057d0 <_printf_i+0x150>
 800585a:	682b      	ldr	r3, [r5, #0]
 800585c:	1d1a      	adds	r2, r3, #4
 800585e:	602a      	str	r2, [r5, #0]
 8005860:	681d      	ldr	r5, [r3, #0]
 8005862:	6862      	ldr	r2, [r4, #4]
 8005864:	2100      	movs	r1, #0
 8005866:	4628      	mov	r0, r5
 8005868:	f7fa fce2 	bl	8000230 <memchr>
 800586c:	b108      	cbz	r0, 8005872 <_printf_i+0x1f2>
 800586e:	1b40      	subs	r0, r0, r5
 8005870:	6060      	str	r0, [r4, #4]
 8005872:	6863      	ldr	r3, [r4, #4]
 8005874:	6123      	str	r3, [r4, #16]
 8005876:	2300      	movs	r3, #0
 8005878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800587c:	e7a8      	b.n	80057d0 <_printf_i+0x150>
 800587e:	6923      	ldr	r3, [r4, #16]
 8005880:	462a      	mov	r2, r5
 8005882:	4649      	mov	r1, r9
 8005884:	4640      	mov	r0, r8
 8005886:	47d0      	blx	sl
 8005888:	3001      	adds	r0, #1
 800588a:	d0ab      	beq.n	80057e4 <_printf_i+0x164>
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	079b      	lsls	r3, r3, #30
 8005890:	d413      	bmi.n	80058ba <_printf_i+0x23a>
 8005892:	68e0      	ldr	r0, [r4, #12]
 8005894:	9b03      	ldr	r3, [sp, #12]
 8005896:	4298      	cmp	r0, r3
 8005898:	bfb8      	it	lt
 800589a:	4618      	movlt	r0, r3
 800589c:	e7a4      	b.n	80057e8 <_printf_i+0x168>
 800589e:	2301      	movs	r3, #1
 80058a0:	4632      	mov	r2, r6
 80058a2:	4649      	mov	r1, r9
 80058a4:	4640      	mov	r0, r8
 80058a6:	47d0      	blx	sl
 80058a8:	3001      	adds	r0, #1
 80058aa:	d09b      	beq.n	80057e4 <_printf_i+0x164>
 80058ac:	3501      	adds	r5, #1
 80058ae:	68e3      	ldr	r3, [r4, #12]
 80058b0:	9903      	ldr	r1, [sp, #12]
 80058b2:	1a5b      	subs	r3, r3, r1
 80058b4:	42ab      	cmp	r3, r5
 80058b6:	dcf2      	bgt.n	800589e <_printf_i+0x21e>
 80058b8:	e7eb      	b.n	8005892 <_printf_i+0x212>
 80058ba:	2500      	movs	r5, #0
 80058bc:	f104 0619 	add.w	r6, r4, #25
 80058c0:	e7f5      	b.n	80058ae <_printf_i+0x22e>
 80058c2:	bf00      	nop
 80058c4:	08009916 	.word	0x08009916
 80058c8:	08009927 	.word	0x08009927

080058cc <_scanf_float>:
 80058cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d0:	b087      	sub	sp, #28
 80058d2:	4617      	mov	r7, r2
 80058d4:	9303      	str	r3, [sp, #12]
 80058d6:	688b      	ldr	r3, [r1, #8]
 80058d8:	1e5a      	subs	r2, r3, #1
 80058da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80058de:	bf83      	ittte	hi
 80058e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80058e4:	195b      	addhi	r3, r3, r5
 80058e6:	9302      	strhi	r3, [sp, #8]
 80058e8:	2300      	movls	r3, #0
 80058ea:	bf86      	itte	hi
 80058ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80058f0:	608b      	strhi	r3, [r1, #8]
 80058f2:	9302      	strls	r3, [sp, #8]
 80058f4:	680b      	ldr	r3, [r1, #0]
 80058f6:	468b      	mov	fp, r1
 80058f8:	2500      	movs	r5, #0
 80058fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80058fe:	f84b 3b1c 	str.w	r3, [fp], #28
 8005902:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005906:	4680      	mov	r8, r0
 8005908:	460c      	mov	r4, r1
 800590a:	465e      	mov	r6, fp
 800590c:	46aa      	mov	sl, r5
 800590e:	46a9      	mov	r9, r5
 8005910:	9501      	str	r5, [sp, #4]
 8005912:	68a2      	ldr	r2, [r4, #8]
 8005914:	b152      	cbz	r2, 800592c <_scanf_float+0x60>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b4e      	cmp	r3, #78	; 0x4e
 800591c:	d864      	bhi.n	80059e8 <_scanf_float+0x11c>
 800591e:	2b40      	cmp	r3, #64	; 0x40
 8005920:	d83c      	bhi.n	800599c <_scanf_float+0xd0>
 8005922:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005926:	b2c8      	uxtb	r0, r1
 8005928:	280e      	cmp	r0, #14
 800592a:	d93a      	bls.n	80059a2 <_scanf_float+0xd6>
 800592c:	f1b9 0f00 	cmp.w	r9, #0
 8005930:	d003      	beq.n	800593a <_scanf_float+0x6e>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800593e:	f1ba 0f01 	cmp.w	sl, #1
 8005942:	f200 8113 	bhi.w	8005b6c <_scanf_float+0x2a0>
 8005946:	455e      	cmp	r6, fp
 8005948:	f200 8105 	bhi.w	8005b56 <_scanf_float+0x28a>
 800594c:	2501      	movs	r5, #1
 800594e:	4628      	mov	r0, r5
 8005950:	b007      	add	sp, #28
 8005952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005956:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800595a:	2a0d      	cmp	r2, #13
 800595c:	d8e6      	bhi.n	800592c <_scanf_float+0x60>
 800595e:	a101      	add	r1, pc, #4	; (adr r1, 8005964 <_scanf_float+0x98>)
 8005960:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005964:	08005aa3 	.word	0x08005aa3
 8005968:	0800592d 	.word	0x0800592d
 800596c:	0800592d 	.word	0x0800592d
 8005970:	0800592d 	.word	0x0800592d
 8005974:	08005b03 	.word	0x08005b03
 8005978:	08005adb 	.word	0x08005adb
 800597c:	0800592d 	.word	0x0800592d
 8005980:	0800592d 	.word	0x0800592d
 8005984:	08005ab1 	.word	0x08005ab1
 8005988:	0800592d 	.word	0x0800592d
 800598c:	0800592d 	.word	0x0800592d
 8005990:	0800592d 	.word	0x0800592d
 8005994:	0800592d 	.word	0x0800592d
 8005998:	08005a69 	.word	0x08005a69
 800599c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80059a0:	e7db      	b.n	800595a <_scanf_float+0x8e>
 80059a2:	290e      	cmp	r1, #14
 80059a4:	d8c2      	bhi.n	800592c <_scanf_float+0x60>
 80059a6:	a001      	add	r0, pc, #4	; (adr r0, 80059ac <_scanf_float+0xe0>)
 80059a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80059ac:	08005a5b 	.word	0x08005a5b
 80059b0:	0800592d 	.word	0x0800592d
 80059b4:	08005a5b 	.word	0x08005a5b
 80059b8:	08005aef 	.word	0x08005aef
 80059bc:	0800592d 	.word	0x0800592d
 80059c0:	08005a09 	.word	0x08005a09
 80059c4:	08005a45 	.word	0x08005a45
 80059c8:	08005a45 	.word	0x08005a45
 80059cc:	08005a45 	.word	0x08005a45
 80059d0:	08005a45 	.word	0x08005a45
 80059d4:	08005a45 	.word	0x08005a45
 80059d8:	08005a45 	.word	0x08005a45
 80059dc:	08005a45 	.word	0x08005a45
 80059e0:	08005a45 	.word	0x08005a45
 80059e4:	08005a45 	.word	0x08005a45
 80059e8:	2b6e      	cmp	r3, #110	; 0x6e
 80059ea:	d809      	bhi.n	8005a00 <_scanf_float+0x134>
 80059ec:	2b60      	cmp	r3, #96	; 0x60
 80059ee:	d8b2      	bhi.n	8005956 <_scanf_float+0x8a>
 80059f0:	2b54      	cmp	r3, #84	; 0x54
 80059f2:	d077      	beq.n	8005ae4 <_scanf_float+0x218>
 80059f4:	2b59      	cmp	r3, #89	; 0x59
 80059f6:	d199      	bne.n	800592c <_scanf_float+0x60>
 80059f8:	2d07      	cmp	r5, #7
 80059fa:	d197      	bne.n	800592c <_scanf_float+0x60>
 80059fc:	2508      	movs	r5, #8
 80059fe:	e029      	b.n	8005a54 <_scanf_float+0x188>
 8005a00:	2b74      	cmp	r3, #116	; 0x74
 8005a02:	d06f      	beq.n	8005ae4 <_scanf_float+0x218>
 8005a04:	2b79      	cmp	r3, #121	; 0x79
 8005a06:	e7f6      	b.n	80059f6 <_scanf_float+0x12a>
 8005a08:	6821      	ldr	r1, [r4, #0]
 8005a0a:	05c8      	lsls	r0, r1, #23
 8005a0c:	d51a      	bpl.n	8005a44 <_scanf_float+0x178>
 8005a0e:	9b02      	ldr	r3, [sp, #8]
 8005a10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005a14:	6021      	str	r1, [r4, #0]
 8005a16:	f109 0901 	add.w	r9, r9, #1
 8005a1a:	b11b      	cbz	r3, 8005a24 <_scanf_float+0x158>
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	3201      	adds	r2, #1
 8005a20:	9302      	str	r3, [sp, #8]
 8005a22:	60a2      	str	r2, [r4, #8]
 8005a24:	68a3      	ldr	r3, [r4, #8]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	60a3      	str	r3, [r4, #8]
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	6123      	str	r3, [r4, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	607b      	str	r3, [r7, #4]
 8005a38:	f340 8084 	ble.w	8005b44 <_scanf_float+0x278>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	603b      	str	r3, [r7, #0]
 8005a42:	e766      	b.n	8005912 <_scanf_float+0x46>
 8005a44:	eb1a 0f05 	cmn.w	sl, r5
 8005a48:	f47f af70 	bne.w	800592c <_scanf_float+0x60>
 8005a4c:	6822      	ldr	r2, [r4, #0]
 8005a4e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005a52:	6022      	str	r2, [r4, #0]
 8005a54:	f806 3b01 	strb.w	r3, [r6], #1
 8005a58:	e7e4      	b.n	8005a24 <_scanf_float+0x158>
 8005a5a:	6822      	ldr	r2, [r4, #0]
 8005a5c:	0610      	lsls	r0, r2, #24
 8005a5e:	f57f af65 	bpl.w	800592c <_scanf_float+0x60>
 8005a62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a66:	e7f4      	b.n	8005a52 <_scanf_float+0x186>
 8005a68:	f1ba 0f00 	cmp.w	sl, #0
 8005a6c:	d10e      	bne.n	8005a8c <_scanf_float+0x1c0>
 8005a6e:	f1b9 0f00 	cmp.w	r9, #0
 8005a72:	d10e      	bne.n	8005a92 <_scanf_float+0x1c6>
 8005a74:	6822      	ldr	r2, [r4, #0]
 8005a76:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005a7a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005a7e:	d108      	bne.n	8005a92 <_scanf_float+0x1c6>
 8005a80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005a84:	6022      	str	r2, [r4, #0]
 8005a86:	f04f 0a01 	mov.w	sl, #1
 8005a8a:	e7e3      	b.n	8005a54 <_scanf_float+0x188>
 8005a8c:	f1ba 0f02 	cmp.w	sl, #2
 8005a90:	d055      	beq.n	8005b3e <_scanf_float+0x272>
 8005a92:	2d01      	cmp	r5, #1
 8005a94:	d002      	beq.n	8005a9c <_scanf_float+0x1d0>
 8005a96:	2d04      	cmp	r5, #4
 8005a98:	f47f af48 	bne.w	800592c <_scanf_float+0x60>
 8005a9c:	3501      	adds	r5, #1
 8005a9e:	b2ed      	uxtb	r5, r5
 8005aa0:	e7d8      	b.n	8005a54 <_scanf_float+0x188>
 8005aa2:	f1ba 0f01 	cmp.w	sl, #1
 8005aa6:	f47f af41 	bne.w	800592c <_scanf_float+0x60>
 8005aaa:	f04f 0a02 	mov.w	sl, #2
 8005aae:	e7d1      	b.n	8005a54 <_scanf_float+0x188>
 8005ab0:	b97d      	cbnz	r5, 8005ad2 <_scanf_float+0x206>
 8005ab2:	f1b9 0f00 	cmp.w	r9, #0
 8005ab6:	f47f af3c 	bne.w	8005932 <_scanf_float+0x66>
 8005aba:	6822      	ldr	r2, [r4, #0]
 8005abc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ac0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ac4:	f47f af39 	bne.w	800593a <_scanf_float+0x6e>
 8005ac8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005acc:	6022      	str	r2, [r4, #0]
 8005ace:	2501      	movs	r5, #1
 8005ad0:	e7c0      	b.n	8005a54 <_scanf_float+0x188>
 8005ad2:	2d03      	cmp	r5, #3
 8005ad4:	d0e2      	beq.n	8005a9c <_scanf_float+0x1d0>
 8005ad6:	2d05      	cmp	r5, #5
 8005ad8:	e7de      	b.n	8005a98 <_scanf_float+0x1cc>
 8005ada:	2d02      	cmp	r5, #2
 8005adc:	f47f af26 	bne.w	800592c <_scanf_float+0x60>
 8005ae0:	2503      	movs	r5, #3
 8005ae2:	e7b7      	b.n	8005a54 <_scanf_float+0x188>
 8005ae4:	2d06      	cmp	r5, #6
 8005ae6:	f47f af21 	bne.w	800592c <_scanf_float+0x60>
 8005aea:	2507      	movs	r5, #7
 8005aec:	e7b2      	b.n	8005a54 <_scanf_float+0x188>
 8005aee:	6822      	ldr	r2, [r4, #0]
 8005af0:	0591      	lsls	r1, r2, #22
 8005af2:	f57f af1b 	bpl.w	800592c <_scanf_float+0x60>
 8005af6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005afa:	6022      	str	r2, [r4, #0]
 8005afc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b00:	e7a8      	b.n	8005a54 <_scanf_float+0x188>
 8005b02:	6822      	ldr	r2, [r4, #0]
 8005b04:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005b08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005b0c:	d006      	beq.n	8005b1c <_scanf_float+0x250>
 8005b0e:	0550      	lsls	r0, r2, #21
 8005b10:	f57f af0c 	bpl.w	800592c <_scanf_float+0x60>
 8005b14:	f1b9 0f00 	cmp.w	r9, #0
 8005b18:	f43f af0f 	beq.w	800593a <_scanf_float+0x6e>
 8005b1c:	0591      	lsls	r1, r2, #22
 8005b1e:	bf58      	it	pl
 8005b20:	9901      	ldrpl	r1, [sp, #4]
 8005b22:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b26:	bf58      	it	pl
 8005b28:	eba9 0101 	subpl.w	r1, r9, r1
 8005b2c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005b30:	bf58      	it	pl
 8005b32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005b36:	6022      	str	r2, [r4, #0]
 8005b38:	f04f 0900 	mov.w	r9, #0
 8005b3c:	e78a      	b.n	8005a54 <_scanf_float+0x188>
 8005b3e:	f04f 0a03 	mov.w	sl, #3
 8005b42:	e787      	b.n	8005a54 <_scanf_float+0x188>
 8005b44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005b48:	4639      	mov	r1, r7
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	4798      	blx	r3
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	f43f aedf 	beq.w	8005912 <_scanf_float+0x46>
 8005b54:	e6ea      	b.n	800592c <_scanf_float+0x60>
 8005b56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b5e:	463a      	mov	r2, r7
 8005b60:	4640      	mov	r0, r8
 8005b62:	4798      	blx	r3
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	6123      	str	r3, [r4, #16]
 8005b6a:	e6ec      	b.n	8005946 <_scanf_float+0x7a>
 8005b6c:	1e6b      	subs	r3, r5, #1
 8005b6e:	2b06      	cmp	r3, #6
 8005b70:	d825      	bhi.n	8005bbe <_scanf_float+0x2f2>
 8005b72:	2d02      	cmp	r5, #2
 8005b74:	d836      	bhi.n	8005be4 <_scanf_float+0x318>
 8005b76:	455e      	cmp	r6, fp
 8005b78:	f67f aee8 	bls.w	800594c <_scanf_float+0x80>
 8005b7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b84:	463a      	mov	r2, r7
 8005b86:	4640      	mov	r0, r8
 8005b88:	4798      	blx	r3
 8005b8a:	6923      	ldr	r3, [r4, #16]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	6123      	str	r3, [r4, #16]
 8005b90:	e7f1      	b.n	8005b76 <_scanf_float+0x2aa>
 8005b92:	9802      	ldr	r0, [sp, #8]
 8005b94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b98:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005b9c:	9002      	str	r0, [sp, #8]
 8005b9e:	463a      	mov	r2, r7
 8005ba0:	4640      	mov	r0, r8
 8005ba2:	4798      	blx	r3
 8005ba4:	6923      	ldr	r3, [r4, #16]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	6123      	str	r3, [r4, #16]
 8005baa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bae:	fa5f fa8a 	uxtb.w	sl, sl
 8005bb2:	f1ba 0f02 	cmp.w	sl, #2
 8005bb6:	d1ec      	bne.n	8005b92 <_scanf_float+0x2c6>
 8005bb8:	3d03      	subs	r5, #3
 8005bba:	b2ed      	uxtb	r5, r5
 8005bbc:	1b76      	subs	r6, r6, r5
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	05da      	lsls	r2, r3, #23
 8005bc2:	d52f      	bpl.n	8005c24 <_scanf_float+0x358>
 8005bc4:	055b      	lsls	r3, r3, #21
 8005bc6:	d510      	bpl.n	8005bea <_scanf_float+0x31e>
 8005bc8:	455e      	cmp	r6, fp
 8005bca:	f67f aebf 	bls.w	800594c <_scanf_float+0x80>
 8005bce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bd6:	463a      	mov	r2, r7
 8005bd8:	4640      	mov	r0, r8
 8005bda:	4798      	blx	r3
 8005bdc:	6923      	ldr	r3, [r4, #16]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	6123      	str	r3, [r4, #16]
 8005be2:	e7f1      	b.n	8005bc8 <_scanf_float+0x2fc>
 8005be4:	46aa      	mov	sl, r5
 8005be6:	9602      	str	r6, [sp, #8]
 8005be8:	e7df      	b.n	8005baa <_scanf_float+0x2de>
 8005bea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	2965      	cmp	r1, #101	; 0x65
 8005bf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005bf6:	f106 35ff 	add.w	r5, r6, #4294967295
 8005bfa:	6123      	str	r3, [r4, #16]
 8005bfc:	d00c      	beq.n	8005c18 <_scanf_float+0x34c>
 8005bfe:	2945      	cmp	r1, #69	; 0x45
 8005c00:	d00a      	beq.n	8005c18 <_scanf_float+0x34c>
 8005c02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c06:	463a      	mov	r2, r7
 8005c08:	4640      	mov	r0, r8
 8005c0a:	4798      	blx	r3
 8005c0c:	6923      	ldr	r3, [r4, #16]
 8005c0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	1eb5      	subs	r5, r6, #2
 8005c16:	6123      	str	r3, [r4, #16]
 8005c18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c1c:	463a      	mov	r2, r7
 8005c1e:	4640      	mov	r0, r8
 8005c20:	4798      	blx	r3
 8005c22:	462e      	mov	r6, r5
 8005c24:	6825      	ldr	r5, [r4, #0]
 8005c26:	f015 0510 	ands.w	r5, r5, #16
 8005c2a:	d159      	bne.n	8005ce0 <_scanf_float+0x414>
 8005c2c:	7035      	strb	r5, [r6, #0]
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c38:	d11b      	bne.n	8005c72 <_scanf_float+0x3a6>
 8005c3a:	9b01      	ldr	r3, [sp, #4]
 8005c3c:	454b      	cmp	r3, r9
 8005c3e:	eba3 0209 	sub.w	r2, r3, r9
 8005c42:	d123      	bne.n	8005c8c <_scanf_float+0x3c0>
 8005c44:	2200      	movs	r2, #0
 8005c46:	4659      	mov	r1, fp
 8005c48:	4640      	mov	r0, r8
 8005c4a:	f000 fe97 	bl	800697c <_strtod_r>
 8005c4e:	6822      	ldr	r2, [r4, #0]
 8005c50:	9b03      	ldr	r3, [sp, #12]
 8005c52:	f012 0f02 	tst.w	r2, #2
 8005c56:	ec57 6b10 	vmov	r6, r7, d0
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	d021      	beq.n	8005ca2 <_scanf_float+0x3d6>
 8005c5e:	9903      	ldr	r1, [sp, #12]
 8005c60:	1d1a      	adds	r2, r3, #4
 8005c62:	600a      	str	r2, [r1, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	e9c3 6700 	strd	r6, r7, [r3]
 8005c6a:	68e3      	ldr	r3, [r4, #12]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	60e3      	str	r3, [r4, #12]
 8005c70:	e66d      	b.n	800594e <_scanf_float+0x82>
 8005c72:	9b04      	ldr	r3, [sp, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0e5      	beq.n	8005c44 <_scanf_float+0x378>
 8005c78:	9905      	ldr	r1, [sp, #20]
 8005c7a:	230a      	movs	r3, #10
 8005c7c:	462a      	mov	r2, r5
 8005c7e:	3101      	adds	r1, #1
 8005c80:	4640      	mov	r0, r8
 8005c82:	f000 ff03 	bl	8006a8c <_strtol_r>
 8005c86:	9b04      	ldr	r3, [sp, #16]
 8005c88:	9e05      	ldr	r6, [sp, #20]
 8005c8a:	1ac2      	subs	r2, r0, r3
 8005c8c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005c90:	429e      	cmp	r6, r3
 8005c92:	bf28      	it	cs
 8005c94:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005c98:	4912      	ldr	r1, [pc, #72]	; (8005ce4 <_scanf_float+0x418>)
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f000 f82c 	bl	8005cf8 <siprintf>
 8005ca0:	e7d0      	b.n	8005c44 <_scanf_float+0x378>
 8005ca2:	9903      	ldr	r1, [sp, #12]
 8005ca4:	f012 0f04 	tst.w	r2, #4
 8005ca8:	f103 0204 	add.w	r2, r3, #4
 8005cac:	600a      	str	r2, [r1, #0]
 8005cae:	d1d9      	bne.n	8005c64 <_scanf_float+0x398>
 8005cb0:	f8d3 8000 	ldr.w	r8, [r3]
 8005cb4:	ee10 2a10 	vmov	r2, s0
 8005cb8:	ee10 0a10 	vmov	r0, s0
 8005cbc:	463b      	mov	r3, r7
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	f7fa ff5c 	bl	8000b7c <__aeabi_dcmpun>
 8005cc4:	b128      	cbz	r0, 8005cd2 <_scanf_float+0x406>
 8005cc6:	4808      	ldr	r0, [pc, #32]	; (8005ce8 <_scanf_float+0x41c>)
 8005cc8:	f000 f810 	bl	8005cec <nanf>
 8005ccc:	ed88 0a00 	vstr	s0, [r8]
 8005cd0:	e7cb      	b.n	8005c6a <_scanf_float+0x39e>
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	4639      	mov	r1, r7
 8005cd6:	f7fa ffaf 	bl	8000c38 <__aeabi_d2f>
 8005cda:	f8c8 0000 	str.w	r0, [r8]
 8005cde:	e7c4      	b.n	8005c6a <_scanf_float+0x39e>
 8005ce0:	2500      	movs	r5, #0
 8005ce2:	e634      	b.n	800594e <_scanf_float+0x82>
 8005ce4:	08009938 	.word	0x08009938
 8005ce8:	08009d40 	.word	0x08009d40

08005cec <nanf>:
 8005cec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005cf4 <nanf+0x8>
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	7fc00000 	.word	0x7fc00000

08005cf8 <siprintf>:
 8005cf8:	b40e      	push	{r1, r2, r3}
 8005cfa:	b500      	push	{lr}
 8005cfc:	b09c      	sub	sp, #112	; 0x70
 8005cfe:	ab1d      	add	r3, sp, #116	; 0x74
 8005d00:	9002      	str	r0, [sp, #8]
 8005d02:	9006      	str	r0, [sp, #24]
 8005d04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d08:	4809      	ldr	r0, [pc, #36]	; (8005d30 <siprintf+0x38>)
 8005d0a:	9107      	str	r1, [sp, #28]
 8005d0c:	9104      	str	r1, [sp, #16]
 8005d0e:	4909      	ldr	r1, [pc, #36]	; (8005d34 <siprintf+0x3c>)
 8005d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d14:	9105      	str	r1, [sp, #20]
 8005d16:	6800      	ldr	r0, [r0, #0]
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	a902      	add	r1, sp, #8
 8005d1c:	f002 fee2 	bl	8008ae4 <_svfiprintf_r>
 8005d20:	9b02      	ldr	r3, [sp, #8]
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	b01c      	add	sp, #112	; 0x70
 8005d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d2c:	b003      	add	sp, #12
 8005d2e:	4770      	bx	lr
 8005d30:	2000000c 	.word	0x2000000c
 8005d34:	ffff0208 	.word	0xffff0208

08005d38 <sulp>:
 8005d38:	b570      	push	{r4, r5, r6, lr}
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	460d      	mov	r5, r1
 8005d3e:	ec45 4b10 	vmov	d0, r4, r5
 8005d42:	4616      	mov	r6, r2
 8005d44:	f002 fc2c 	bl	80085a0 <__ulp>
 8005d48:	ec51 0b10 	vmov	r0, r1, d0
 8005d4c:	b17e      	cbz	r6, 8005d6e <sulp+0x36>
 8005d4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005d52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	dd09      	ble.n	8005d6e <sulp+0x36>
 8005d5a:	051b      	lsls	r3, r3, #20
 8005d5c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005d60:	2400      	movs	r4, #0
 8005d62:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005d66:	4622      	mov	r2, r4
 8005d68:	462b      	mov	r3, r5
 8005d6a:	f7fa fc6d 	bl	8000648 <__aeabi_dmul>
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}

08005d70 <_strtod_l>:
 8005d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d74:	ed2d 8b02 	vpush	{d8}
 8005d78:	b09d      	sub	sp, #116	; 0x74
 8005d7a:	461f      	mov	r7, r3
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	9318      	str	r3, [sp, #96]	; 0x60
 8005d80:	4ba2      	ldr	r3, [pc, #648]	; (800600c <_strtod_l+0x29c>)
 8005d82:	9213      	str	r2, [sp, #76]	; 0x4c
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	9305      	str	r3, [sp, #20]
 8005d88:	4604      	mov	r4, r0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	4688      	mov	r8, r1
 8005d8e:	f7fa fa47 	bl	8000220 <strlen>
 8005d92:	f04f 0a00 	mov.w	sl, #0
 8005d96:	4605      	mov	r5, r0
 8005d98:	f04f 0b00 	mov.w	fp, #0
 8005d9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005da0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005da2:	781a      	ldrb	r2, [r3, #0]
 8005da4:	2a2b      	cmp	r2, #43	; 0x2b
 8005da6:	d04e      	beq.n	8005e46 <_strtod_l+0xd6>
 8005da8:	d83b      	bhi.n	8005e22 <_strtod_l+0xb2>
 8005daa:	2a0d      	cmp	r2, #13
 8005dac:	d834      	bhi.n	8005e18 <_strtod_l+0xa8>
 8005dae:	2a08      	cmp	r2, #8
 8005db0:	d834      	bhi.n	8005e1c <_strtod_l+0xac>
 8005db2:	2a00      	cmp	r2, #0
 8005db4:	d03e      	beq.n	8005e34 <_strtod_l+0xc4>
 8005db6:	2300      	movs	r3, #0
 8005db8:	930a      	str	r3, [sp, #40]	; 0x28
 8005dba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005dbc:	7833      	ldrb	r3, [r6, #0]
 8005dbe:	2b30      	cmp	r3, #48	; 0x30
 8005dc0:	f040 80b0 	bne.w	8005f24 <_strtod_l+0x1b4>
 8005dc4:	7873      	ldrb	r3, [r6, #1]
 8005dc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005dca:	2b58      	cmp	r3, #88	; 0x58
 8005dcc:	d168      	bne.n	8005ea0 <_strtod_l+0x130>
 8005dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd0:	9301      	str	r3, [sp, #4]
 8005dd2:	ab18      	add	r3, sp, #96	; 0x60
 8005dd4:	9702      	str	r7, [sp, #8]
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	4a8d      	ldr	r2, [pc, #564]	; (8006010 <_strtod_l+0x2a0>)
 8005dda:	ab19      	add	r3, sp, #100	; 0x64
 8005ddc:	a917      	add	r1, sp, #92	; 0x5c
 8005dde:	4620      	mov	r0, r4
 8005de0:	f001 fd38 	bl	8007854 <__gethex>
 8005de4:	f010 0707 	ands.w	r7, r0, #7
 8005de8:	4605      	mov	r5, r0
 8005dea:	d005      	beq.n	8005df8 <_strtod_l+0x88>
 8005dec:	2f06      	cmp	r7, #6
 8005dee:	d12c      	bne.n	8005e4a <_strtod_l+0xda>
 8005df0:	3601      	adds	r6, #1
 8005df2:	2300      	movs	r3, #0
 8005df4:	9617      	str	r6, [sp, #92]	; 0x5c
 8005df6:	930a      	str	r3, [sp, #40]	; 0x28
 8005df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f040 8590 	bne.w	8006920 <_strtod_l+0xbb0>
 8005e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e02:	b1eb      	cbz	r3, 8005e40 <_strtod_l+0xd0>
 8005e04:	4652      	mov	r2, sl
 8005e06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005e0a:	ec43 2b10 	vmov	d0, r2, r3
 8005e0e:	b01d      	add	sp, #116	; 0x74
 8005e10:	ecbd 8b02 	vpop	{d8}
 8005e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e18:	2a20      	cmp	r2, #32
 8005e1a:	d1cc      	bne.n	8005db6 <_strtod_l+0x46>
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e20:	e7be      	b.n	8005da0 <_strtod_l+0x30>
 8005e22:	2a2d      	cmp	r2, #45	; 0x2d
 8005e24:	d1c7      	bne.n	8005db6 <_strtod_l+0x46>
 8005e26:	2201      	movs	r2, #1
 8005e28:	920a      	str	r2, [sp, #40]	; 0x28
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e2e:	785b      	ldrb	r3, [r3, #1]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1c2      	bne.n	8005dba <_strtod_l+0x4a>
 8005e34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f040 856e 	bne.w	800691c <_strtod_l+0xbac>
 8005e40:	4652      	mov	r2, sl
 8005e42:	465b      	mov	r3, fp
 8005e44:	e7e1      	b.n	8005e0a <_strtod_l+0x9a>
 8005e46:	2200      	movs	r2, #0
 8005e48:	e7ee      	b.n	8005e28 <_strtod_l+0xb8>
 8005e4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005e4c:	b13a      	cbz	r2, 8005e5e <_strtod_l+0xee>
 8005e4e:	2135      	movs	r1, #53	; 0x35
 8005e50:	a81a      	add	r0, sp, #104	; 0x68
 8005e52:	f002 fcb0 	bl	80087b6 <__copybits>
 8005e56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f002 f86f 	bl	8007f3c <_Bfree>
 8005e5e:	3f01      	subs	r7, #1
 8005e60:	2f04      	cmp	r7, #4
 8005e62:	d806      	bhi.n	8005e72 <_strtod_l+0x102>
 8005e64:	e8df f007 	tbb	[pc, r7]
 8005e68:	1714030a 	.word	0x1714030a
 8005e6c:	0a          	.byte	0x0a
 8005e6d:	00          	.byte	0x00
 8005e6e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005e72:	0728      	lsls	r0, r5, #28
 8005e74:	d5c0      	bpl.n	8005df8 <_strtod_l+0x88>
 8005e76:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005e7a:	e7bd      	b.n	8005df8 <_strtod_l+0x88>
 8005e7c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005e80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005e82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005e8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005e8e:	e7f0      	b.n	8005e72 <_strtod_l+0x102>
 8005e90:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006014 <_strtod_l+0x2a4>
 8005e94:	e7ed      	b.n	8005e72 <_strtod_l+0x102>
 8005e96:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005e9a:	f04f 3aff 	mov.w	sl, #4294967295
 8005e9e:	e7e8      	b.n	8005e72 <_strtod_l+0x102>
 8005ea0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2b30      	cmp	r3, #48	; 0x30
 8005eaa:	d0f9      	beq.n	8005ea0 <_strtod_l+0x130>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0a3      	beq.n	8005df8 <_strtod_l+0x88>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f04f 0900 	mov.w	r9, #0
 8005eb6:	9304      	str	r3, [sp, #16]
 8005eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005eba:	9308      	str	r3, [sp, #32]
 8005ebc:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ec0:	464f      	mov	r7, r9
 8005ec2:	220a      	movs	r2, #10
 8005ec4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005ec6:	7806      	ldrb	r6, [r0, #0]
 8005ec8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005ecc:	b2d9      	uxtb	r1, r3
 8005ece:	2909      	cmp	r1, #9
 8005ed0:	d92a      	bls.n	8005f28 <_strtod_l+0x1b8>
 8005ed2:	9905      	ldr	r1, [sp, #20]
 8005ed4:	462a      	mov	r2, r5
 8005ed6:	f002 ff1f 	bl	8008d18 <strncmp>
 8005eda:	b398      	cbz	r0, 8005f44 <_strtod_l+0x1d4>
 8005edc:	2000      	movs	r0, #0
 8005ede:	4632      	mov	r2, r6
 8005ee0:	463d      	mov	r5, r7
 8005ee2:	9005      	str	r0, [sp, #20]
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2a65      	cmp	r2, #101	; 0x65
 8005ee8:	d001      	beq.n	8005eee <_strtod_l+0x17e>
 8005eea:	2a45      	cmp	r2, #69	; 0x45
 8005eec:	d118      	bne.n	8005f20 <_strtod_l+0x1b0>
 8005eee:	b91d      	cbnz	r5, 8005ef8 <_strtod_l+0x188>
 8005ef0:	9a04      	ldr	r2, [sp, #16]
 8005ef2:	4302      	orrs	r2, r0
 8005ef4:	d09e      	beq.n	8005e34 <_strtod_l+0xc4>
 8005ef6:	2500      	movs	r5, #0
 8005ef8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005efc:	f108 0201 	add.w	r2, r8, #1
 8005f00:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f02:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005f06:	2a2b      	cmp	r2, #43	; 0x2b
 8005f08:	d075      	beq.n	8005ff6 <_strtod_l+0x286>
 8005f0a:	2a2d      	cmp	r2, #45	; 0x2d
 8005f0c:	d07b      	beq.n	8006006 <_strtod_l+0x296>
 8005f0e:	f04f 0c00 	mov.w	ip, #0
 8005f12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005f16:	2909      	cmp	r1, #9
 8005f18:	f240 8082 	bls.w	8006020 <_strtod_l+0x2b0>
 8005f1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005f20:	2600      	movs	r6, #0
 8005f22:	e09d      	b.n	8006060 <_strtod_l+0x2f0>
 8005f24:	2300      	movs	r3, #0
 8005f26:	e7c4      	b.n	8005eb2 <_strtod_l+0x142>
 8005f28:	2f08      	cmp	r7, #8
 8005f2a:	bfd8      	it	le
 8005f2c:	9907      	ldrle	r1, [sp, #28]
 8005f2e:	f100 0001 	add.w	r0, r0, #1
 8005f32:	bfda      	itte	le
 8005f34:	fb02 3301 	mlale	r3, r2, r1, r3
 8005f38:	9307      	strle	r3, [sp, #28]
 8005f3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005f3e:	3701      	adds	r7, #1
 8005f40:	9017      	str	r0, [sp, #92]	; 0x5c
 8005f42:	e7bf      	b.n	8005ec4 <_strtod_l+0x154>
 8005f44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f46:	195a      	adds	r2, r3, r5
 8005f48:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f4a:	5d5a      	ldrb	r2, [r3, r5]
 8005f4c:	2f00      	cmp	r7, #0
 8005f4e:	d037      	beq.n	8005fc0 <_strtod_l+0x250>
 8005f50:	9005      	str	r0, [sp, #20]
 8005f52:	463d      	mov	r5, r7
 8005f54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005f58:	2b09      	cmp	r3, #9
 8005f5a:	d912      	bls.n	8005f82 <_strtod_l+0x212>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e7c2      	b.n	8005ee6 <_strtod_l+0x176>
 8005f60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f66:	785a      	ldrb	r2, [r3, #1]
 8005f68:	3001      	adds	r0, #1
 8005f6a:	2a30      	cmp	r2, #48	; 0x30
 8005f6c:	d0f8      	beq.n	8005f60 <_strtod_l+0x1f0>
 8005f6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	f200 84d9 	bhi.w	800692a <_strtod_l+0xbba>
 8005f78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f7a:	9005      	str	r0, [sp, #20]
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	9308      	str	r3, [sp, #32]
 8005f80:	4605      	mov	r5, r0
 8005f82:	3a30      	subs	r2, #48	; 0x30
 8005f84:	f100 0301 	add.w	r3, r0, #1
 8005f88:	d014      	beq.n	8005fb4 <_strtod_l+0x244>
 8005f8a:	9905      	ldr	r1, [sp, #20]
 8005f8c:	4419      	add	r1, r3
 8005f8e:	9105      	str	r1, [sp, #20]
 8005f90:	462b      	mov	r3, r5
 8005f92:	eb00 0e05 	add.w	lr, r0, r5
 8005f96:	210a      	movs	r1, #10
 8005f98:	4573      	cmp	r3, lr
 8005f9a:	d113      	bne.n	8005fc4 <_strtod_l+0x254>
 8005f9c:	182b      	adds	r3, r5, r0
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	f105 0501 	add.w	r5, r5, #1
 8005fa4:	4405      	add	r5, r0
 8005fa6:	dc1c      	bgt.n	8005fe2 <_strtod_l+0x272>
 8005fa8:	9907      	ldr	r1, [sp, #28]
 8005faa:	230a      	movs	r3, #10
 8005fac:	fb03 2301 	mla	r3, r3, r1, r2
 8005fb0:	9307      	str	r3, [sp, #28]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005fb6:	1c51      	adds	r1, r2, #1
 8005fb8:	9117      	str	r1, [sp, #92]	; 0x5c
 8005fba:	7852      	ldrb	r2, [r2, #1]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	e7c9      	b.n	8005f54 <_strtod_l+0x1e4>
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	e7d2      	b.n	8005f6a <_strtod_l+0x1fa>
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	dc04      	bgt.n	8005fd2 <_strtod_l+0x262>
 8005fc8:	9e07      	ldr	r6, [sp, #28]
 8005fca:	434e      	muls	r6, r1
 8005fcc:	9607      	str	r6, [sp, #28]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	e7e2      	b.n	8005f98 <_strtod_l+0x228>
 8005fd2:	f103 0c01 	add.w	ip, r3, #1
 8005fd6:	f1bc 0f10 	cmp.w	ip, #16
 8005fda:	bfd8      	it	le
 8005fdc:	fb01 f909 	mulle.w	r9, r1, r9
 8005fe0:	e7f5      	b.n	8005fce <_strtod_l+0x25e>
 8005fe2:	2d10      	cmp	r5, #16
 8005fe4:	bfdc      	itt	le
 8005fe6:	230a      	movle	r3, #10
 8005fe8:	fb03 2909 	mlale	r9, r3, r9, r2
 8005fec:	e7e1      	b.n	8005fb2 <_strtod_l+0x242>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9305      	str	r3, [sp, #20]
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e77c      	b.n	8005ef0 <_strtod_l+0x180>
 8005ff6:	f04f 0c00 	mov.w	ip, #0
 8005ffa:	f108 0202 	add.w	r2, r8, #2
 8005ffe:	9217      	str	r2, [sp, #92]	; 0x5c
 8006000:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006004:	e785      	b.n	8005f12 <_strtod_l+0x1a2>
 8006006:	f04f 0c01 	mov.w	ip, #1
 800600a:	e7f6      	b.n	8005ffa <_strtod_l+0x28a>
 800600c:	08009b88 	.word	0x08009b88
 8006010:	08009940 	.word	0x08009940
 8006014:	7ff00000 	.word	0x7ff00000
 8006018:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800601a:	1c51      	adds	r1, r2, #1
 800601c:	9117      	str	r1, [sp, #92]	; 0x5c
 800601e:	7852      	ldrb	r2, [r2, #1]
 8006020:	2a30      	cmp	r2, #48	; 0x30
 8006022:	d0f9      	beq.n	8006018 <_strtod_l+0x2a8>
 8006024:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006028:	2908      	cmp	r1, #8
 800602a:	f63f af79 	bhi.w	8005f20 <_strtod_l+0x1b0>
 800602e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006032:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006034:	9206      	str	r2, [sp, #24]
 8006036:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006038:	1c51      	adds	r1, r2, #1
 800603a:	9117      	str	r1, [sp, #92]	; 0x5c
 800603c:	7852      	ldrb	r2, [r2, #1]
 800603e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006042:	2e09      	cmp	r6, #9
 8006044:	d937      	bls.n	80060b6 <_strtod_l+0x346>
 8006046:	9e06      	ldr	r6, [sp, #24]
 8006048:	1b89      	subs	r1, r1, r6
 800604a:	2908      	cmp	r1, #8
 800604c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006050:	dc02      	bgt.n	8006058 <_strtod_l+0x2e8>
 8006052:	4576      	cmp	r6, lr
 8006054:	bfa8      	it	ge
 8006056:	4676      	movge	r6, lr
 8006058:	f1bc 0f00 	cmp.w	ip, #0
 800605c:	d000      	beq.n	8006060 <_strtod_l+0x2f0>
 800605e:	4276      	negs	r6, r6
 8006060:	2d00      	cmp	r5, #0
 8006062:	d14d      	bne.n	8006100 <_strtod_l+0x390>
 8006064:	9904      	ldr	r1, [sp, #16]
 8006066:	4301      	orrs	r1, r0
 8006068:	f47f aec6 	bne.w	8005df8 <_strtod_l+0x88>
 800606c:	2b00      	cmp	r3, #0
 800606e:	f47f aee1 	bne.w	8005e34 <_strtod_l+0xc4>
 8006072:	2a69      	cmp	r2, #105	; 0x69
 8006074:	d027      	beq.n	80060c6 <_strtod_l+0x356>
 8006076:	dc24      	bgt.n	80060c2 <_strtod_l+0x352>
 8006078:	2a49      	cmp	r2, #73	; 0x49
 800607a:	d024      	beq.n	80060c6 <_strtod_l+0x356>
 800607c:	2a4e      	cmp	r2, #78	; 0x4e
 800607e:	f47f aed9 	bne.w	8005e34 <_strtod_l+0xc4>
 8006082:	499f      	ldr	r1, [pc, #636]	; (8006300 <_strtod_l+0x590>)
 8006084:	a817      	add	r0, sp, #92	; 0x5c
 8006086:	f001 fe3d 	bl	8007d04 <__match>
 800608a:	2800      	cmp	r0, #0
 800608c:	f43f aed2 	beq.w	8005e34 <_strtod_l+0xc4>
 8006090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b28      	cmp	r3, #40	; 0x28
 8006096:	d12d      	bne.n	80060f4 <_strtod_l+0x384>
 8006098:	499a      	ldr	r1, [pc, #616]	; (8006304 <_strtod_l+0x594>)
 800609a:	aa1a      	add	r2, sp, #104	; 0x68
 800609c:	a817      	add	r0, sp, #92	; 0x5c
 800609e:	f001 fe45 	bl	8007d2c <__hexnan>
 80060a2:	2805      	cmp	r0, #5
 80060a4:	d126      	bne.n	80060f4 <_strtod_l+0x384>
 80060a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80060ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80060b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80060b4:	e6a0      	b.n	8005df8 <_strtod_l+0x88>
 80060b6:	210a      	movs	r1, #10
 80060b8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80060bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80060c0:	e7b9      	b.n	8006036 <_strtod_l+0x2c6>
 80060c2:	2a6e      	cmp	r2, #110	; 0x6e
 80060c4:	e7db      	b.n	800607e <_strtod_l+0x30e>
 80060c6:	4990      	ldr	r1, [pc, #576]	; (8006308 <_strtod_l+0x598>)
 80060c8:	a817      	add	r0, sp, #92	; 0x5c
 80060ca:	f001 fe1b 	bl	8007d04 <__match>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	f43f aeb0 	beq.w	8005e34 <_strtod_l+0xc4>
 80060d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060d6:	498d      	ldr	r1, [pc, #564]	; (800630c <_strtod_l+0x59c>)
 80060d8:	3b01      	subs	r3, #1
 80060da:	a817      	add	r0, sp, #92	; 0x5c
 80060dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80060de:	f001 fe11 	bl	8007d04 <__match>
 80060e2:	b910      	cbnz	r0, 80060ea <_strtod_l+0x37a>
 80060e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060e6:	3301      	adds	r3, #1
 80060e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80060ea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800631c <_strtod_l+0x5ac>
 80060ee:	f04f 0a00 	mov.w	sl, #0
 80060f2:	e681      	b.n	8005df8 <_strtod_l+0x88>
 80060f4:	4886      	ldr	r0, [pc, #536]	; (8006310 <_strtod_l+0x5a0>)
 80060f6:	f002 fdf7 	bl	8008ce8 <nan>
 80060fa:	ec5b ab10 	vmov	sl, fp, d0
 80060fe:	e67b      	b.n	8005df8 <_strtod_l+0x88>
 8006100:	9b05      	ldr	r3, [sp, #20]
 8006102:	9807      	ldr	r0, [sp, #28]
 8006104:	1af3      	subs	r3, r6, r3
 8006106:	2f00      	cmp	r7, #0
 8006108:	bf08      	it	eq
 800610a:	462f      	moveq	r7, r5
 800610c:	2d10      	cmp	r5, #16
 800610e:	9306      	str	r3, [sp, #24]
 8006110:	46a8      	mov	r8, r5
 8006112:	bfa8      	it	ge
 8006114:	f04f 0810 	movge.w	r8, #16
 8006118:	f7fa fa1c 	bl	8000554 <__aeabi_ui2d>
 800611c:	2d09      	cmp	r5, #9
 800611e:	4682      	mov	sl, r0
 8006120:	468b      	mov	fp, r1
 8006122:	dd13      	ble.n	800614c <_strtod_l+0x3dc>
 8006124:	4b7b      	ldr	r3, [pc, #492]	; (8006314 <_strtod_l+0x5a4>)
 8006126:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800612a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800612e:	f7fa fa8b 	bl	8000648 <__aeabi_dmul>
 8006132:	4682      	mov	sl, r0
 8006134:	4648      	mov	r0, r9
 8006136:	468b      	mov	fp, r1
 8006138:	f7fa fa0c 	bl	8000554 <__aeabi_ui2d>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4650      	mov	r0, sl
 8006142:	4659      	mov	r1, fp
 8006144:	f7fa f8ca 	bl	80002dc <__adddf3>
 8006148:	4682      	mov	sl, r0
 800614a:	468b      	mov	fp, r1
 800614c:	2d0f      	cmp	r5, #15
 800614e:	dc38      	bgt.n	80061c2 <_strtod_l+0x452>
 8006150:	9b06      	ldr	r3, [sp, #24]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f43f ae50 	beq.w	8005df8 <_strtod_l+0x88>
 8006158:	dd24      	ble.n	80061a4 <_strtod_l+0x434>
 800615a:	2b16      	cmp	r3, #22
 800615c:	dc0b      	bgt.n	8006176 <_strtod_l+0x406>
 800615e:	496d      	ldr	r1, [pc, #436]	; (8006314 <_strtod_l+0x5a4>)
 8006160:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006168:	4652      	mov	r2, sl
 800616a:	465b      	mov	r3, fp
 800616c:	f7fa fa6c 	bl	8000648 <__aeabi_dmul>
 8006170:	4682      	mov	sl, r0
 8006172:	468b      	mov	fp, r1
 8006174:	e640      	b.n	8005df8 <_strtod_l+0x88>
 8006176:	9a06      	ldr	r2, [sp, #24]
 8006178:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800617c:	4293      	cmp	r3, r2
 800617e:	db20      	blt.n	80061c2 <_strtod_l+0x452>
 8006180:	4c64      	ldr	r4, [pc, #400]	; (8006314 <_strtod_l+0x5a4>)
 8006182:	f1c5 050f 	rsb	r5, r5, #15
 8006186:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800618a:	4652      	mov	r2, sl
 800618c:	465b      	mov	r3, fp
 800618e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006192:	f7fa fa59 	bl	8000648 <__aeabi_dmul>
 8006196:	9b06      	ldr	r3, [sp, #24]
 8006198:	1b5d      	subs	r5, r3, r5
 800619a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800619e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80061a2:	e7e3      	b.n	800616c <_strtod_l+0x3fc>
 80061a4:	9b06      	ldr	r3, [sp, #24]
 80061a6:	3316      	adds	r3, #22
 80061a8:	db0b      	blt.n	80061c2 <_strtod_l+0x452>
 80061aa:	9b05      	ldr	r3, [sp, #20]
 80061ac:	1b9e      	subs	r6, r3, r6
 80061ae:	4b59      	ldr	r3, [pc, #356]	; (8006314 <_strtod_l+0x5a4>)
 80061b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80061b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061b8:	4650      	mov	r0, sl
 80061ba:	4659      	mov	r1, fp
 80061bc:	f7fa fb6e 	bl	800089c <__aeabi_ddiv>
 80061c0:	e7d6      	b.n	8006170 <_strtod_l+0x400>
 80061c2:	9b06      	ldr	r3, [sp, #24]
 80061c4:	eba5 0808 	sub.w	r8, r5, r8
 80061c8:	4498      	add	r8, r3
 80061ca:	f1b8 0f00 	cmp.w	r8, #0
 80061ce:	dd74      	ble.n	80062ba <_strtod_l+0x54a>
 80061d0:	f018 030f 	ands.w	r3, r8, #15
 80061d4:	d00a      	beq.n	80061ec <_strtod_l+0x47c>
 80061d6:	494f      	ldr	r1, [pc, #316]	; (8006314 <_strtod_l+0x5a4>)
 80061d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80061dc:	4652      	mov	r2, sl
 80061de:	465b      	mov	r3, fp
 80061e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061e4:	f7fa fa30 	bl	8000648 <__aeabi_dmul>
 80061e8:	4682      	mov	sl, r0
 80061ea:	468b      	mov	fp, r1
 80061ec:	f038 080f 	bics.w	r8, r8, #15
 80061f0:	d04f      	beq.n	8006292 <_strtod_l+0x522>
 80061f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80061f6:	dd22      	ble.n	800623e <_strtod_l+0x4ce>
 80061f8:	2500      	movs	r5, #0
 80061fa:	462e      	mov	r6, r5
 80061fc:	9507      	str	r5, [sp, #28]
 80061fe:	9505      	str	r5, [sp, #20]
 8006200:	2322      	movs	r3, #34	; 0x22
 8006202:	f8df b118 	ldr.w	fp, [pc, #280]	; 800631c <_strtod_l+0x5ac>
 8006206:	6023      	str	r3, [r4, #0]
 8006208:	f04f 0a00 	mov.w	sl, #0
 800620c:	9b07      	ldr	r3, [sp, #28]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f43f adf2 	beq.w	8005df8 <_strtod_l+0x88>
 8006214:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006216:	4620      	mov	r0, r4
 8006218:	f001 fe90 	bl	8007f3c <_Bfree>
 800621c:	9905      	ldr	r1, [sp, #20]
 800621e:	4620      	mov	r0, r4
 8006220:	f001 fe8c 	bl	8007f3c <_Bfree>
 8006224:	4631      	mov	r1, r6
 8006226:	4620      	mov	r0, r4
 8006228:	f001 fe88 	bl	8007f3c <_Bfree>
 800622c:	9907      	ldr	r1, [sp, #28]
 800622e:	4620      	mov	r0, r4
 8006230:	f001 fe84 	bl	8007f3c <_Bfree>
 8006234:	4629      	mov	r1, r5
 8006236:	4620      	mov	r0, r4
 8006238:	f001 fe80 	bl	8007f3c <_Bfree>
 800623c:	e5dc      	b.n	8005df8 <_strtod_l+0x88>
 800623e:	4b36      	ldr	r3, [pc, #216]	; (8006318 <_strtod_l+0x5a8>)
 8006240:	9304      	str	r3, [sp, #16]
 8006242:	2300      	movs	r3, #0
 8006244:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006248:	4650      	mov	r0, sl
 800624a:	4659      	mov	r1, fp
 800624c:	4699      	mov	r9, r3
 800624e:	f1b8 0f01 	cmp.w	r8, #1
 8006252:	dc21      	bgt.n	8006298 <_strtod_l+0x528>
 8006254:	b10b      	cbz	r3, 800625a <_strtod_l+0x4ea>
 8006256:	4682      	mov	sl, r0
 8006258:	468b      	mov	fp, r1
 800625a:	4b2f      	ldr	r3, [pc, #188]	; (8006318 <_strtod_l+0x5a8>)
 800625c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006260:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006264:	4652      	mov	r2, sl
 8006266:	465b      	mov	r3, fp
 8006268:	e9d9 0100 	ldrd	r0, r1, [r9]
 800626c:	f7fa f9ec 	bl	8000648 <__aeabi_dmul>
 8006270:	4b2a      	ldr	r3, [pc, #168]	; (800631c <_strtod_l+0x5ac>)
 8006272:	460a      	mov	r2, r1
 8006274:	400b      	ands	r3, r1
 8006276:	492a      	ldr	r1, [pc, #168]	; (8006320 <_strtod_l+0x5b0>)
 8006278:	428b      	cmp	r3, r1
 800627a:	4682      	mov	sl, r0
 800627c:	d8bc      	bhi.n	80061f8 <_strtod_l+0x488>
 800627e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006282:	428b      	cmp	r3, r1
 8006284:	bf86      	itte	hi
 8006286:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006324 <_strtod_l+0x5b4>
 800628a:	f04f 3aff 	movhi.w	sl, #4294967295
 800628e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006292:	2300      	movs	r3, #0
 8006294:	9304      	str	r3, [sp, #16]
 8006296:	e084      	b.n	80063a2 <_strtod_l+0x632>
 8006298:	f018 0f01 	tst.w	r8, #1
 800629c:	d005      	beq.n	80062aa <_strtod_l+0x53a>
 800629e:	9b04      	ldr	r3, [sp, #16]
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f7fa f9d0 	bl	8000648 <__aeabi_dmul>
 80062a8:	2301      	movs	r3, #1
 80062aa:	9a04      	ldr	r2, [sp, #16]
 80062ac:	3208      	adds	r2, #8
 80062ae:	f109 0901 	add.w	r9, r9, #1
 80062b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80062b6:	9204      	str	r2, [sp, #16]
 80062b8:	e7c9      	b.n	800624e <_strtod_l+0x4de>
 80062ba:	d0ea      	beq.n	8006292 <_strtod_l+0x522>
 80062bc:	f1c8 0800 	rsb	r8, r8, #0
 80062c0:	f018 020f 	ands.w	r2, r8, #15
 80062c4:	d00a      	beq.n	80062dc <_strtod_l+0x56c>
 80062c6:	4b13      	ldr	r3, [pc, #76]	; (8006314 <_strtod_l+0x5a4>)
 80062c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062cc:	4650      	mov	r0, sl
 80062ce:	4659      	mov	r1, fp
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f7fa fae2 	bl	800089c <__aeabi_ddiv>
 80062d8:	4682      	mov	sl, r0
 80062da:	468b      	mov	fp, r1
 80062dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80062e0:	d0d7      	beq.n	8006292 <_strtod_l+0x522>
 80062e2:	f1b8 0f1f 	cmp.w	r8, #31
 80062e6:	dd1f      	ble.n	8006328 <_strtod_l+0x5b8>
 80062e8:	2500      	movs	r5, #0
 80062ea:	462e      	mov	r6, r5
 80062ec:	9507      	str	r5, [sp, #28]
 80062ee:	9505      	str	r5, [sp, #20]
 80062f0:	2322      	movs	r3, #34	; 0x22
 80062f2:	f04f 0a00 	mov.w	sl, #0
 80062f6:	f04f 0b00 	mov.w	fp, #0
 80062fa:	6023      	str	r3, [r4, #0]
 80062fc:	e786      	b.n	800620c <_strtod_l+0x49c>
 80062fe:	bf00      	nop
 8006300:	08009911 	.word	0x08009911
 8006304:	08009954 	.word	0x08009954
 8006308:	08009909 	.word	0x08009909
 800630c:	08009a94 	.word	0x08009a94
 8006310:	08009d40 	.word	0x08009d40
 8006314:	08009c20 	.word	0x08009c20
 8006318:	08009bf8 	.word	0x08009bf8
 800631c:	7ff00000 	.word	0x7ff00000
 8006320:	7ca00000 	.word	0x7ca00000
 8006324:	7fefffff 	.word	0x7fefffff
 8006328:	f018 0310 	ands.w	r3, r8, #16
 800632c:	bf18      	it	ne
 800632e:	236a      	movne	r3, #106	; 0x6a
 8006330:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80066e0 <_strtod_l+0x970>
 8006334:	9304      	str	r3, [sp, #16]
 8006336:	4650      	mov	r0, sl
 8006338:	4659      	mov	r1, fp
 800633a:	2300      	movs	r3, #0
 800633c:	f018 0f01 	tst.w	r8, #1
 8006340:	d004      	beq.n	800634c <_strtod_l+0x5dc>
 8006342:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006346:	f7fa f97f 	bl	8000648 <__aeabi_dmul>
 800634a:	2301      	movs	r3, #1
 800634c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006350:	f109 0908 	add.w	r9, r9, #8
 8006354:	d1f2      	bne.n	800633c <_strtod_l+0x5cc>
 8006356:	b10b      	cbz	r3, 800635c <_strtod_l+0x5ec>
 8006358:	4682      	mov	sl, r0
 800635a:	468b      	mov	fp, r1
 800635c:	9b04      	ldr	r3, [sp, #16]
 800635e:	b1c3      	cbz	r3, 8006392 <_strtod_l+0x622>
 8006360:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006364:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006368:	2b00      	cmp	r3, #0
 800636a:	4659      	mov	r1, fp
 800636c:	dd11      	ble.n	8006392 <_strtod_l+0x622>
 800636e:	2b1f      	cmp	r3, #31
 8006370:	f340 8124 	ble.w	80065bc <_strtod_l+0x84c>
 8006374:	2b34      	cmp	r3, #52	; 0x34
 8006376:	bfde      	ittt	le
 8006378:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800637c:	f04f 33ff 	movle.w	r3, #4294967295
 8006380:	fa03 f202 	lslle.w	r2, r3, r2
 8006384:	f04f 0a00 	mov.w	sl, #0
 8006388:	bfcc      	ite	gt
 800638a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800638e:	ea02 0b01 	andle.w	fp, r2, r1
 8006392:	2200      	movs	r2, #0
 8006394:	2300      	movs	r3, #0
 8006396:	4650      	mov	r0, sl
 8006398:	4659      	mov	r1, fp
 800639a:	f7fa fbbd 	bl	8000b18 <__aeabi_dcmpeq>
 800639e:	2800      	cmp	r0, #0
 80063a0:	d1a2      	bne.n	80062e8 <_strtod_l+0x578>
 80063a2:	9b07      	ldr	r3, [sp, #28]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	9908      	ldr	r1, [sp, #32]
 80063a8:	462b      	mov	r3, r5
 80063aa:	463a      	mov	r2, r7
 80063ac:	4620      	mov	r0, r4
 80063ae:	f001 fe2d 	bl	800800c <__s2b>
 80063b2:	9007      	str	r0, [sp, #28]
 80063b4:	2800      	cmp	r0, #0
 80063b6:	f43f af1f 	beq.w	80061f8 <_strtod_l+0x488>
 80063ba:	9b05      	ldr	r3, [sp, #20]
 80063bc:	1b9e      	subs	r6, r3, r6
 80063be:	9b06      	ldr	r3, [sp, #24]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	bfb4      	ite	lt
 80063c4:	4633      	movlt	r3, r6
 80063c6:	2300      	movge	r3, #0
 80063c8:	930c      	str	r3, [sp, #48]	; 0x30
 80063ca:	9b06      	ldr	r3, [sp, #24]
 80063cc:	2500      	movs	r5, #0
 80063ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80063d2:	9312      	str	r3, [sp, #72]	; 0x48
 80063d4:	462e      	mov	r6, r5
 80063d6:	9b07      	ldr	r3, [sp, #28]
 80063d8:	4620      	mov	r0, r4
 80063da:	6859      	ldr	r1, [r3, #4]
 80063dc:	f001 fd6e 	bl	8007ebc <_Balloc>
 80063e0:	9005      	str	r0, [sp, #20]
 80063e2:	2800      	cmp	r0, #0
 80063e4:	f43f af0c 	beq.w	8006200 <_strtod_l+0x490>
 80063e8:	9b07      	ldr	r3, [sp, #28]
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	3202      	adds	r2, #2
 80063ee:	f103 010c 	add.w	r1, r3, #12
 80063f2:	0092      	lsls	r2, r2, #2
 80063f4:	300c      	adds	r0, #12
 80063f6:	f001 fd53 	bl	8007ea0 <memcpy>
 80063fa:	ec4b ab10 	vmov	d0, sl, fp
 80063fe:	aa1a      	add	r2, sp, #104	; 0x68
 8006400:	a919      	add	r1, sp, #100	; 0x64
 8006402:	4620      	mov	r0, r4
 8006404:	f002 f948 	bl	8008698 <__d2b>
 8006408:	ec4b ab18 	vmov	d8, sl, fp
 800640c:	9018      	str	r0, [sp, #96]	; 0x60
 800640e:	2800      	cmp	r0, #0
 8006410:	f43f aef6 	beq.w	8006200 <_strtod_l+0x490>
 8006414:	2101      	movs	r1, #1
 8006416:	4620      	mov	r0, r4
 8006418:	f001 fe92 	bl	8008140 <__i2b>
 800641c:	4606      	mov	r6, r0
 800641e:	2800      	cmp	r0, #0
 8006420:	f43f aeee 	beq.w	8006200 <_strtod_l+0x490>
 8006424:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006426:	9904      	ldr	r1, [sp, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	bfab      	itete	ge
 800642c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800642e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006430:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006432:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006436:	bfac      	ite	ge
 8006438:	eb03 0902 	addge.w	r9, r3, r2
 800643c:	1ad7      	sublt	r7, r2, r3
 800643e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006440:	eba3 0801 	sub.w	r8, r3, r1
 8006444:	4490      	add	r8, r2
 8006446:	4ba1      	ldr	r3, [pc, #644]	; (80066cc <_strtod_l+0x95c>)
 8006448:	f108 38ff 	add.w	r8, r8, #4294967295
 800644c:	4598      	cmp	r8, r3
 800644e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006452:	f280 80c7 	bge.w	80065e4 <_strtod_l+0x874>
 8006456:	eba3 0308 	sub.w	r3, r3, r8
 800645a:	2b1f      	cmp	r3, #31
 800645c:	eba2 0203 	sub.w	r2, r2, r3
 8006460:	f04f 0101 	mov.w	r1, #1
 8006464:	f300 80b1 	bgt.w	80065ca <_strtod_l+0x85a>
 8006468:	fa01 f303 	lsl.w	r3, r1, r3
 800646c:	930d      	str	r3, [sp, #52]	; 0x34
 800646e:	2300      	movs	r3, #0
 8006470:	9308      	str	r3, [sp, #32]
 8006472:	eb09 0802 	add.w	r8, r9, r2
 8006476:	9b04      	ldr	r3, [sp, #16]
 8006478:	45c1      	cmp	r9, r8
 800647a:	4417      	add	r7, r2
 800647c:	441f      	add	r7, r3
 800647e:	464b      	mov	r3, r9
 8006480:	bfa8      	it	ge
 8006482:	4643      	movge	r3, r8
 8006484:	42bb      	cmp	r3, r7
 8006486:	bfa8      	it	ge
 8006488:	463b      	movge	r3, r7
 800648a:	2b00      	cmp	r3, #0
 800648c:	bfc2      	ittt	gt
 800648e:	eba8 0803 	subgt.w	r8, r8, r3
 8006492:	1aff      	subgt	r7, r7, r3
 8006494:	eba9 0903 	subgt.w	r9, r9, r3
 8006498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800649a:	2b00      	cmp	r3, #0
 800649c:	dd17      	ble.n	80064ce <_strtod_l+0x75e>
 800649e:	4631      	mov	r1, r6
 80064a0:	461a      	mov	r2, r3
 80064a2:	4620      	mov	r0, r4
 80064a4:	f001 ff0c 	bl	80082c0 <__pow5mult>
 80064a8:	4606      	mov	r6, r0
 80064aa:	2800      	cmp	r0, #0
 80064ac:	f43f aea8 	beq.w	8006200 <_strtod_l+0x490>
 80064b0:	4601      	mov	r1, r0
 80064b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80064b4:	4620      	mov	r0, r4
 80064b6:	f001 fe59 	bl	800816c <__multiply>
 80064ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80064bc:	2800      	cmp	r0, #0
 80064be:	f43f ae9f 	beq.w	8006200 <_strtod_l+0x490>
 80064c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80064c4:	4620      	mov	r0, r4
 80064c6:	f001 fd39 	bl	8007f3c <_Bfree>
 80064ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064cc:	9318      	str	r3, [sp, #96]	; 0x60
 80064ce:	f1b8 0f00 	cmp.w	r8, #0
 80064d2:	f300 808c 	bgt.w	80065ee <_strtod_l+0x87e>
 80064d6:	9b06      	ldr	r3, [sp, #24]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	dd08      	ble.n	80064ee <_strtod_l+0x77e>
 80064dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064de:	9905      	ldr	r1, [sp, #20]
 80064e0:	4620      	mov	r0, r4
 80064e2:	f001 feed 	bl	80082c0 <__pow5mult>
 80064e6:	9005      	str	r0, [sp, #20]
 80064e8:	2800      	cmp	r0, #0
 80064ea:	f43f ae89 	beq.w	8006200 <_strtod_l+0x490>
 80064ee:	2f00      	cmp	r7, #0
 80064f0:	dd08      	ble.n	8006504 <_strtod_l+0x794>
 80064f2:	9905      	ldr	r1, [sp, #20]
 80064f4:	463a      	mov	r2, r7
 80064f6:	4620      	mov	r0, r4
 80064f8:	f001 ff3c 	bl	8008374 <__lshift>
 80064fc:	9005      	str	r0, [sp, #20]
 80064fe:	2800      	cmp	r0, #0
 8006500:	f43f ae7e 	beq.w	8006200 <_strtod_l+0x490>
 8006504:	f1b9 0f00 	cmp.w	r9, #0
 8006508:	dd08      	ble.n	800651c <_strtod_l+0x7ac>
 800650a:	4631      	mov	r1, r6
 800650c:	464a      	mov	r2, r9
 800650e:	4620      	mov	r0, r4
 8006510:	f001 ff30 	bl	8008374 <__lshift>
 8006514:	4606      	mov	r6, r0
 8006516:	2800      	cmp	r0, #0
 8006518:	f43f ae72 	beq.w	8006200 <_strtod_l+0x490>
 800651c:	9a05      	ldr	r2, [sp, #20]
 800651e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006520:	4620      	mov	r0, r4
 8006522:	f001 ffb3 	bl	800848c <__mdiff>
 8006526:	4605      	mov	r5, r0
 8006528:	2800      	cmp	r0, #0
 800652a:	f43f ae69 	beq.w	8006200 <_strtod_l+0x490>
 800652e:	68c3      	ldr	r3, [r0, #12]
 8006530:	930b      	str	r3, [sp, #44]	; 0x2c
 8006532:	2300      	movs	r3, #0
 8006534:	60c3      	str	r3, [r0, #12]
 8006536:	4631      	mov	r1, r6
 8006538:	f001 ff8c 	bl	8008454 <__mcmp>
 800653c:	2800      	cmp	r0, #0
 800653e:	da60      	bge.n	8006602 <_strtod_l+0x892>
 8006540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006542:	ea53 030a 	orrs.w	r3, r3, sl
 8006546:	f040 8082 	bne.w	800664e <_strtod_l+0x8de>
 800654a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800654e:	2b00      	cmp	r3, #0
 8006550:	d17d      	bne.n	800664e <_strtod_l+0x8de>
 8006552:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006556:	0d1b      	lsrs	r3, r3, #20
 8006558:	051b      	lsls	r3, r3, #20
 800655a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800655e:	d976      	bls.n	800664e <_strtod_l+0x8de>
 8006560:	696b      	ldr	r3, [r5, #20]
 8006562:	b913      	cbnz	r3, 800656a <_strtod_l+0x7fa>
 8006564:	692b      	ldr	r3, [r5, #16]
 8006566:	2b01      	cmp	r3, #1
 8006568:	dd71      	ble.n	800664e <_strtod_l+0x8de>
 800656a:	4629      	mov	r1, r5
 800656c:	2201      	movs	r2, #1
 800656e:	4620      	mov	r0, r4
 8006570:	f001 ff00 	bl	8008374 <__lshift>
 8006574:	4631      	mov	r1, r6
 8006576:	4605      	mov	r5, r0
 8006578:	f001 ff6c 	bl	8008454 <__mcmp>
 800657c:	2800      	cmp	r0, #0
 800657e:	dd66      	ble.n	800664e <_strtod_l+0x8de>
 8006580:	9904      	ldr	r1, [sp, #16]
 8006582:	4a53      	ldr	r2, [pc, #332]	; (80066d0 <_strtod_l+0x960>)
 8006584:	465b      	mov	r3, fp
 8006586:	2900      	cmp	r1, #0
 8006588:	f000 8081 	beq.w	800668e <_strtod_l+0x91e>
 800658c:	ea02 010b 	and.w	r1, r2, fp
 8006590:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006594:	dc7b      	bgt.n	800668e <_strtod_l+0x91e>
 8006596:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800659a:	f77f aea9 	ble.w	80062f0 <_strtod_l+0x580>
 800659e:	4b4d      	ldr	r3, [pc, #308]	; (80066d4 <_strtod_l+0x964>)
 80065a0:	4650      	mov	r0, sl
 80065a2:	4659      	mov	r1, fp
 80065a4:	2200      	movs	r2, #0
 80065a6:	f7fa f84f 	bl	8000648 <__aeabi_dmul>
 80065aa:	460b      	mov	r3, r1
 80065ac:	4303      	orrs	r3, r0
 80065ae:	bf08      	it	eq
 80065b0:	2322      	moveq	r3, #34	; 0x22
 80065b2:	4682      	mov	sl, r0
 80065b4:	468b      	mov	fp, r1
 80065b6:	bf08      	it	eq
 80065b8:	6023      	streq	r3, [r4, #0]
 80065ba:	e62b      	b.n	8006214 <_strtod_l+0x4a4>
 80065bc:	f04f 32ff 	mov.w	r2, #4294967295
 80065c0:	fa02 f303 	lsl.w	r3, r2, r3
 80065c4:	ea03 0a0a 	and.w	sl, r3, sl
 80065c8:	e6e3      	b.n	8006392 <_strtod_l+0x622>
 80065ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80065ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80065d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80065d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80065da:	fa01 f308 	lsl.w	r3, r1, r8
 80065de:	9308      	str	r3, [sp, #32]
 80065e0:	910d      	str	r1, [sp, #52]	; 0x34
 80065e2:	e746      	b.n	8006472 <_strtod_l+0x702>
 80065e4:	2300      	movs	r3, #0
 80065e6:	9308      	str	r3, [sp, #32]
 80065e8:	2301      	movs	r3, #1
 80065ea:	930d      	str	r3, [sp, #52]	; 0x34
 80065ec:	e741      	b.n	8006472 <_strtod_l+0x702>
 80065ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80065f0:	4642      	mov	r2, r8
 80065f2:	4620      	mov	r0, r4
 80065f4:	f001 febe 	bl	8008374 <__lshift>
 80065f8:	9018      	str	r0, [sp, #96]	; 0x60
 80065fa:	2800      	cmp	r0, #0
 80065fc:	f47f af6b 	bne.w	80064d6 <_strtod_l+0x766>
 8006600:	e5fe      	b.n	8006200 <_strtod_l+0x490>
 8006602:	465f      	mov	r7, fp
 8006604:	d16e      	bne.n	80066e4 <_strtod_l+0x974>
 8006606:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006608:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800660c:	b342      	cbz	r2, 8006660 <_strtod_l+0x8f0>
 800660e:	4a32      	ldr	r2, [pc, #200]	; (80066d8 <_strtod_l+0x968>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d128      	bne.n	8006666 <_strtod_l+0x8f6>
 8006614:	9b04      	ldr	r3, [sp, #16]
 8006616:	4651      	mov	r1, sl
 8006618:	b1eb      	cbz	r3, 8006656 <_strtod_l+0x8e6>
 800661a:	4b2d      	ldr	r3, [pc, #180]	; (80066d0 <_strtod_l+0x960>)
 800661c:	403b      	ands	r3, r7
 800661e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006622:	f04f 32ff 	mov.w	r2, #4294967295
 8006626:	d819      	bhi.n	800665c <_strtod_l+0x8ec>
 8006628:	0d1b      	lsrs	r3, r3, #20
 800662a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	4299      	cmp	r1, r3
 8006634:	d117      	bne.n	8006666 <_strtod_l+0x8f6>
 8006636:	4b29      	ldr	r3, [pc, #164]	; (80066dc <_strtod_l+0x96c>)
 8006638:	429f      	cmp	r7, r3
 800663a:	d102      	bne.n	8006642 <_strtod_l+0x8d2>
 800663c:	3101      	adds	r1, #1
 800663e:	f43f addf 	beq.w	8006200 <_strtod_l+0x490>
 8006642:	4b23      	ldr	r3, [pc, #140]	; (80066d0 <_strtod_l+0x960>)
 8006644:	403b      	ands	r3, r7
 8006646:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800664a:	f04f 0a00 	mov.w	sl, #0
 800664e:	9b04      	ldr	r3, [sp, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1a4      	bne.n	800659e <_strtod_l+0x82e>
 8006654:	e5de      	b.n	8006214 <_strtod_l+0x4a4>
 8006656:	f04f 33ff 	mov.w	r3, #4294967295
 800665a:	e7ea      	b.n	8006632 <_strtod_l+0x8c2>
 800665c:	4613      	mov	r3, r2
 800665e:	e7e8      	b.n	8006632 <_strtod_l+0x8c2>
 8006660:	ea53 030a 	orrs.w	r3, r3, sl
 8006664:	d08c      	beq.n	8006580 <_strtod_l+0x810>
 8006666:	9b08      	ldr	r3, [sp, #32]
 8006668:	b1db      	cbz	r3, 80066a2 <_strtod_l+0x932>
 800666a:	423b      	tst	r3, r7
 800666c:	d0ef      	beq.n	800664e <_strtod_l+0x8de>
 800666e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006670:	9a04      	ldr	r2, [sp, #16]
 8006672:	4650      	mov	r0, sl
 8006674:	4659      	mov	r1, fp
 8006676:	b1c3      	cbz	r3, 80066aa <_strtod_l+0x93a>
 8006678:	f7ff fb5e 	bl	8005d38 <sulp>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	ec51 0b18 	vmov	r0, r1, d8
 8006684:	f7f9 fe2a 	bl	80002dc <__adddf3>
 8006688:	4682      	mov	sl, r0
 800668a:	468b      	mov	fp, r1
 800668c:	e7df      	b.n	800664e <_strtod_l+0x8de>
 800668e:	4013      	ands	r3, r2
 8006690:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006694:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006698:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800669c:	f04f 3aff 	mov.w	sl, #4294967295
 80066a0:	e7d5      	b.n	800664e <_strtod_l+0x8de>
 80066a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066a4:	ea13 0f0a 	tst.w	r3, sl
 80066a8:	e7e0      	b.n	800666c <_strtod_l+0x8fc>
 80066aa:	f7ff fb45 	bl	8005d38 <sulp>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	ec51 0b18 	vmov	r0, r1, d8
 80066b6:	f7f9 fe0f 	bl	80002d8 <__aeabi_dsub>
 80066ba:	2200      	movs	r2, #0
 80066bc:	2300      	movs	r3, #0
 80066be:	4682      	mov	sl, r0
 80066c0:	468b      	mov	fp, r1
 80066c2:	f7fa fa29 	bl	8000b18 <__aeabi_dcmpeq>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d0c1      	beq.n	800664e <_strtod_l+0x8de>
 80066ca:	e611      	b.n	80062f0 <_strtod_l+0x580>
 80066cc:	fffffc02 	.word	0xfffffc02
 80066d0:	7ff00000 	.word	0x7ff00000
 80066d4:	39500000 	.word	0x39500000
 80066d8:	000fffff 	.word	0x000fffff
 80066dc:	7fefffff 	.word	0x7fefffff
 80066e0:	08009968 	.word	0x08009968
 80066e4:	4631      	mov	r1, r6
 80066e6:	4628      	mov	r0, r5
 80066e8:	f002 f832 	bl	8008750 <__ratio>
 80066ec:	ec59 8b10 	vmov	r8, r9, d0
 80066f0:	ee10 0a10 	vmov	r0, s0
 80066f4:	2200      	movs	r2, #0
 80066f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066fa:	4649      	mov	r1, r9
 80066fc:	f7fa fa20 	bl	8000b40 <__aeabi_dcmple>
 8006700:	2800      	cmp	r0, #0
 8006702:	d07a      	beq.n	80067fa <_strtod_l+0xa8a>
 8006704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006706:	2b00      	cmp	r3, #0
 8006708:	d04a      	beq.n	80067a0 <_strtod_l+0xa30>
 800670a:	4b95      	ldr	r3, [pc, #596]	; (8006960 <_strtod_l+0xbf0>)
 800670c:	2200      	movs	r2, #0
 800670e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006712:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006960 <_strtod_l+0xbf0>
 8006716:	f04f 0800 	mov.w	r8, #0
 800671a:	4b92      	ldr	r3, [pc, #584]	; (8006964 <_strtod_l+0xbf4>)
 800671c:	403b      	ands	r3, r7
 800671e:	930d      	str	r3, [sp, #52]	; 0x34
 8006720:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006722:	4b91      	ldr	r3, [pc, #580]	; (8006968 <_strtod_l+0xbf8>)
 8006724:	429a      	cmp	r2, r3
 8006726:	f040 80b0 	bne.w	800688a <_strtod_l+0xb1a>
 800672a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800672e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006732:	ec4b ab10 	vmov	d0, sl, fp
 8006736:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800673a:	f001 ff31 	bl	80085a0 <__ulp>
 800673e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006742:	ec53 2b10 	vmov	r2, r3, d0
 8006746:	f7f9 ff7f 	bl	8000648 <__aeabi_dmul>
 800674a:	4652      	mov	r2, sl
 800674c:	465b      	mov	r3, fp
 800674e:	f7f9 fdc5 	bl	80002dc <__adddf3>
 8006752:	460b      	mov	r3, r1
 8006754:	4983      	ldr	r1, [pc, #524]	; (8006964 <_strtod_l+0xbf4>)
 8006756:	4a85      	ldr	r2, [pc, #532]	; (800696c <_strtod_l+0xbfc>)
 8006758:	4019      	ands	r1, r3
 800675a:	4291      	cmp	r1, r2
 800675c:	4682      	mov	sl, r0
 800675e:	d960      	bls.n	8006822 <_strtod_l+0xab2>
 8006760:	ee18 3a90 	vmov	r3, s17
 8006764:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006768:	4293      	cmp	r3, r2
 800676a:	d104      	bne.n	8006776 <_strtod_l+0xa06>
 800676c:	ee18 3a10 	vmov	r3, s16
 8006770:	3301      	adds	r3, #1
 8006772:	f43f ad45 	beq.w	8006200 <_strtod_l+0x490>
 8006776:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006978 <_strtod_l+0xc08>
 800677a:	f04f 3aff 	mov.w	sl, #4294967295
 800677e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006780:	4620      	mov	r0, r4
 8006782:	f001 fbdb 	bl	8007f3c <_Bfree>
 8006786:	9905      	ldr	r1, [sp, #20]
 8006788:	4620      	mov	r0, r4
 800678a:	f001 fbd7 	bl	8007f3c <_Bfree>
 800678e:	4631      	mov	r1, r6
 8006790:	4620      	mov	r0, r4
 8006792:	f001 fbd3 	bl	8007f3c <_Bfree>
 8006796:	4629      	mov	r1, r5
 8006798:	4620      	mov	r0, r4
 800679a:	f001 fbcf 	bl	8007f3c <_Bfree>
 800679e:	e61a      	b.n	80063d6 <_strtod_l+0x666>
 80067a0:	f1ba 0f00 	cmp.w	sl, #0
 80067a4:	d11b      	bne.n	80067de <_strtod_l+0xa6e>
 80067a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067aa:	b9f3      	cbnz	r3, 80067ea <_strtod_l+0xa7a>
 80067ac:	4b6c      	ldr	r3, [pc, #432]	; (8006960 <_strtod_l+0xbf0>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	4640      	mov	r0, r8
 80067b2:	4649      	mov	r1, r9
 80067b4:	f7fa f9ba 	bl	8000b2c <__aeabi_dcmplt>
 80067b8:	b9d0      	cbnz	r0, 80067f0 <_strtod_l+0xa80>
 80067ba:	4640      	mov	r0, r8
 80067bc:	4649      	mov	r1, r9
 80067be:	4b6c      	ldr	r3, [pc, #432]	; (8006970 <_strtod_l+0xc00>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	f7f9 ff41 	bl	8000648 <__aeabi_dmul>
 80067c6:	4680      	mov	r8, r0
 80067c8:	4689      	mov	r9, r1
 80067ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80067ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80067d2:	9315      	str	r3, [sp, #84]	; 0x54
 80067d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80067d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80067dc:	e79d      	b.n	800671a <_strtod_l+0x9aa>
 80067de:	f1ba 0f01 	cmp.w	sl, #1
 80067e2:	d102      	bne.n	80067ea <_strtod_l+0xa7a>
 80067e4:	2f00      	cmp	r7, #0
 80067e6:	f43f ad83 	beq.w	80062f0 <_strtod_l+0x580>
 80067ea:	4b62      	ldr	r3, [pc, #392]	; (8006974 <_strtod_l+0xc04>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	e78e      	b.n	800670e <_strtod_l+0x99e>
 80067f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006970 <_strtod_l+0xc00>
 80067f4:	f04f 0800 	mov.w	r8, #0
 80067f8:	e7e7      	b.n	80067ca <_strtod_l+0xa5a>
 80067fa:	4b5d      	ldr	r3, [pc, #372]	; (8006970 <_strtod_l+0xc00>)
 80067fc:	4640      	mov	r0, r8
 80067fe:	4649      	mov	r1, r9
 8006800:	2200      	movs	r2, #0
 8006802:	f7f9 ff21 	bl	8000648 <__aeabi_dmul>
 8006806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006808:	4680      	mov	r8, r0
 800680a:	4689      	mov	r9, r1
 800680c:	b933      	cbnz	r3, 800681c <_strtod_l+0xaac>
 800680e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006812:	900e      	str	r0, [sp, #56]	; 0x38
 8006814:	930f      	str	r3, [sp, #60]	; 0x3c
 8006816:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800681a:	e7dd      	b.n	80067d8 <_strtod_l+0xa68>
 800681c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006820:	e7f9      	b.n	8006816 <_strtod_l+0xaa6>
 8006822:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006826:	9b04      	ldr	r3, [sp, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1a8      	bne.n	800677e <_strtod_l+0xa0e>
 800682c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006830:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006832:	0d1b      	lsrs	r3, r3, #20
 8006834:	051b      	lsls	r3, r3, #20
 8006836:	429a      	cmp	r2, r3
 8006838:	d1a1      	bne.n	800677e <_strtod_l+0xa0e>
 800683a:	4640      	mov	r0, r8
 800683c:	4649      	mov	r1, r9
 800683e:	f7fa fa4b 	bl	8000cd8 <__aeabi_d2lz>
 8006842:	f7f9 fed3 	bl	80005ec <__aeabi_l2d>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4640      	mov	r0, r8
 800684c:	4649      	mov	r1, r9
 800684e:	f7f9 fd43 	bl	80002d8 <__aeabi_dsub>
 8006852:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006854:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006858:	ea43 030a 	orr.w	r3, r3, sl
 800685c:	4313      	orrs	r3, r2
 800685e:	4680      	mov	r8, r0
 8006860:	4689      	mov	r9, r1
 8006862:	d055      	beq.n	8006910 <_strtod_l+0xba0>
 8006864:	a336      	add	r3, pc, #216	; (adr r3, 8006940 <_strtod_l+0xbd0>)
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	f7fa f95f 	bl	8000b2c <__aeabi_dcmplt>
 800686e:	2800      	cmp	r0, #0
 8006870:	f47f acd0 	bne.w	8006214 <_strtod_l+0x4a4>
 8006874:	a334      	add	r3, pc, #208	; (adr r3, 8006948 <_strtod_l+0xbd8>)
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	4640      	mov	r0, r8
 800687c:	4649      	mov	r1, r9
 800687e:	f7fa f973 	bl	8000b68 <__aeabi_dcmpgt>
 8006882:	2800      	cmp	r0, #0
 8006884:	f43f af7b 	beq.w	800677e <_strtod_l+0xa0e>
 8006888:	e4c4      	b.n	8006214 <_strtod_l+0x4a4>
 800688a:	9b04      	ldr	r3, [sp, #16]
 800688c:	b333      	cbz	r3, 80068dc <_strtod_l+0xb6c>
 800688e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006890:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006894:	d822      	bhi.n	80068dc <_strtod_l+0xb6c>
 8006896:	a32e      	add	r3, pc, #184	; (adr r3, 8006950 <_strtod_l+0xbe0>)
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	4640      	mov	r0, r8
 800689e:	4649      	mov	r1, r9
 80068a0:	f7fa f94e 	bl	8000b40 <__aeabi_dcmple>
 80068a4:	b1a0      	cbz	r0, 80068d0 <_strtod_l+0xb60>
 80068a6:	4649      	mov	r1, r9
 80068a8:	4640      	mov	r0, r8
 80068aa:	f7fa f9a5 	bl	8000bf8 <__aeabi_d2uiz>
 80068ae:	2801      	cmp	r0, #1
 80068b0:	bf38      	it	cc
 80068b2:	2001      	movcc	r0, #1
 80068b4:	f7f9 fe4e 	bl	8000554 <__aeabi_ui2d>
 80068b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ba:	4680      	mov	r8, r0
 80068bc:	4689      	mov	r9, r1
 80068be:	bb23      	cbnz	r3, 800690a <_strtod_l+0xb9a>
 80068c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068c4:	9010      	str	r0, [sp, #64]	; 0x40
 80068c6:	9311      	str	r3, [sp, #68]	; 0x44
 80068c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80068d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80068d8:	1a9b      	subs	r3, r3, r2
 80068da:	9309      	str	r3, [sp, #36]	; 0x24
 80068dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80068e0:	eeb0 0a48 	vmov.f32	s0, s16
 80068e4:	eef0 0a68 	vmov.f32	s1, s17
 80068e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80068ec:	f001 fe58 	bl	80085a0 <__ulp>
 80068f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80068f4:	ec53 2b10 	vmov	r2, r3, d0
 80068f8:	f7f9 fea6 	bl	8000648 <__aeabi_dmul>
 80068fc:	ec53 2b18 	vmov	r2, r3, d8
 8006900:	f7f9 fcec 	bl	80002dc <__adddf3>
 8006904:	4682      	mov	sl, r0
 8006906:	468b      	mov	fp, r1
 8006908:	e78d      	b.n	8006826 <_strtod_l+0xab6>
 800690a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800690e:	e7db      	b.n	80068c8 <_strtod_l+0xb58>
 8006910:	a311      	add	r3, pc, #68	; (adr r3, 8006958 <_strtod_l+0xbe8>)
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	f7fa f909 	bl	8000b2c <__aeabi_dcmplt>
 800691a:	e7b2      	b.n	8006882 <_strtod_l+0xb12>
 800691c:	2300      	movs	r3, #0
 800691e:	930a      	str	r3, [sp, #40]	; 0x28
 8006920:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006922:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	f7ff ba6b 	b.w	8005e00 <_strtod_l+0x90>
 800692a:	2a65      	cmp	r2, #101	; 0x65
 800692c:	f43f ab5f 	beq.w	8005fee <_strtod_l+0x27e>
 8006930:	2a45      	cmp	r2, #69	; 0x45
 8006932:	f43f ab5c 	beq.w	8005fee <_strtod_l+0x27e>
 8006936:	2301      	movs	r3, #1
 8006938:	f7ff bb94 	b.w	8006064 <_strtod_l+0x2f4>
 800693c:	f3af 8000 	nop.w
 8006940:	94a03595 	.word	0x94a03595
 8006944:	3fdfffff 	.word	0x3fdfffff
 8006948:	35afe535 	.word	0x35afe535
 800694c:	3fe00000 	.word	0x3fe00000
 8006950:	ffc00000 	.word	0xffc00000
 8006954:	41dfffff 	.word	0x41dfffff
 8006958:	94a03595 	.word	0x94a03595
 800695c:	3fcfffff 	.word	0x3fcfffff
 8006960:	3ff00000 	.word	0x3ff00000
 8006964:	7ff00000 	.word	0x7ff00000
 8006968:	7fe00000 	.word	0x7fe00000
 800696c:	7c9fffff 	.word	0x7c9fffff
 8006970:	3fe00000 	.word	0x3fe00000
 8006974:	bff00000 	.word	0xbff00000
 8006978:	7fefffff 	.word	0x7fefffff

0800697c <_strtod_r>:
 800697c:	4b01      	ldr	r3, [pc, #4]	; (8006984 <_strtod_r+0x8>)
 800697e:	f7ff b9f7 	b.w	8005d70 <_strtod_l>
 8006982:	bf00      	nop
 8006984:	20000074 	.word	0x20000074

08006988 <_strtol_l.constprop.0>:
 8006988:	2b01      	cmp	r3, #1
 800698a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800698e:	d001      	beq.n	8006994 <_strtol_l.constprop.0+0xc>
 8006990:	2b24      	cmp	r3, #36	; 0x24
 8006992:	d906      	bls.n	80069a2 <_strtol_l.constprop.0+0x1a>
 8006994:	f7fe fafe 	bl	8004f94 <__errno>
 8006998:	2316      	movs	r3, #22
 800699a:	6003      	str	r3, [r0, #0]
 800699c:	2000      	movs	r0, #0
 800699e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006a88 <_strtol_l.constprop.0+0x100>
 80069a6:	460d      	mov	r5, r1
 80069a8:	462e      	mov	r6, r5
 80069aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80069b2:	f017 0708 	ands.w	r7, r7, #8
 80069b6:	d1f7      	bne.n	80069a8 <_strtol_l.constprop.0+0x20>
 80069b8:	2c2d      	cmp	r4, #45	; 0x2d
 80069ba:	d132      	bne.n	8006a22 <_strtol_l.constprop.0+0x9a>
 80069bc:	782c      	ldrb	r4, [r5, #0]
 80069be:	2701      	movs	r7, #1
 80069c0:	1cb5      	adds	r5, r6, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d05b      	beq.n	8006a7e <_strtol_l.constprop.0+0xf6>
 80069c6:	2b10      	cmp	r3, #16
 80069c8:	d109      	bne.n	80069de <_strtol_l.constprop.0+0x56>
 80069ca:	2c30      	cmp	r4, #48	; 0x30
 80069cc:	d107      	bne.n	80069de <_strtol_l.constprop.0+0x56>
 80069ce:	782c      	ldrb	r4, [r5, #0]
 80069d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80069d4:	2c58      	cmp	r4, #88	; 0x58
 80069d6:	d14d      	bne.n	8006a74 <_strtol_l.constprop.0+0xec>
 80069d8:	786c      	ldrb	r4, [r5, #1]
 80069da:	2310      	movs	r3, #16
 80069dc:	3502      	adds	r5, #2
 80069de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80069e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80069e6:	f04f 0c00 	mov.w	ip, #0
 80069ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80069ee:	4666      	mov	r6, ip
 80069f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80069f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80069f8:	f1be 0f09 	cmp.w	lr, #9
 80069fc:	d816      	bhi.n	8006a2c <_strtol_l.constprop.0+0xa4>
 80069fe:	4674      	mov	r4, lr
 8006a00:	42a3      	cmp	r3, r4
 8006a02:	dd24      	ble.n	8006a4e <_strtol_l.constprop.0+0xc6>
 8006a04:	f1bc 0f00 	cmp.w	ip, #0
 8006a08:	db1e      	blt.n	8006a48 <_strtol_l.constprop.0+0xc0>
 8006a0a:	45b1      	cmp	r9, r6
 8006a0c:	d31c      	bcc.n	8006a48 <_strtol_l.constprop.0+0xc0>
 8006a0e:	d101      	bne.n	8006a14 <_strtol_l.constprop.0+0x8c>
 8006a10:	45a2      	cmp	sl, r4
 8006a12:	db19      	blt.n	8006a48 <_strtol_l.constprop.0+0xc0>
 8006a14:	fb06 4603 	mla	r6, r6, r3, r4
 8006a18:	f04f 0c01 	mov.w	ip, #1
 8006a1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a20:	e7e8      	b.n	80069f4 <_strtol_l.constprop.0+0x6c>
 8006a22:	2c2b      	cmp	r4, #43	; 0x2b
 8006a24:	bf04      	itt	eq
 8006a26:	782c      	ldrbeq	r4, [r5, #0]
 8006a28:	1cb5      	addeq	r5, r6, #2
 8006a2a:	e7ca      	b.n	80069c2 <_strtol_l.constprop.0+0x3a>
 8006a2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006a30:	f1be 0f19 	cmp.w	lr, #25
 8006a34:	d801      	bhi.n	8006a3a <_strtol_l.constprop.0+0xb2>
 8006a36:	3c37      	subs	r4, #55	; 0x37
 8006a38:	e7e2      	b.n	8006a00 <_strtol_l.constprop.0+0x78>
 8006a3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006a3e:	f1be 0f19 	cmp.w	lr, #25
 8006a42:	d804      	bhi.n	8006a4e <_strtol_l.constprop.0+0xc6>
 8006a44:	3c57      	subs	r4, #87	; 0x57
 8006a46:	e7db      	b.n	8006a00 <_strtol_l.constprop.0+0x78>
 8006a48:	f04f 3cff 	mov.w	ip, #4294967295
 8006a4c:	e7e6      	b.n	8006a1c <_strtol_l.constprop.0+0x94>
 8006a4e:	f1bc 0f00 	cmp.w	ip, #0
 8006a52:	da05      	bge.n	8006a60 <_strtol_l.constprop.0+0xd8>
 8006a54:	2322      	movs	r3, #34	; 0x22
 8006a56:	6003      	str	r3, [r0, #0]
 8006a58:	4646      	mov	r6, r8
 8006a5a:	b942      	cbnz	r2, 8006a6e <_strtol_l.constprop.0+0xe6>
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	e79e      	b.n	800699e <_strtol_l.constprop.0+0x16>
 8006a60:	b107      	cbz	r7, 8006a64 <_strtol_l.constprop.0+0xdc>
 8006a62:	4276      	negs	r6, r6
 8006a64:	2a00      	cmp	r2, #0
 8006a66:	d0f9      	beq.n	8006a5c <_strtol_l.constprop.0+0xd4>
 8006a68:	f1bc 0f00 	cmp.w	ip, #0
 8006a6c:	d000      	beq.n	8006a70 <_strtol_l.constprop.0+0xe8>
 8006a6e:	1e69      	subs	r1, r5, #1
 8006a70:	6011      	str	r1, [r2, #0]
 8006a72:	e7f3      	b.n	8006a5c <_strtol_l.constprop.0+0xd4>
 8006a74:	2430      	movs	r4, #48	; 0x30
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1b1      	bne.n	80069de <_strtol_l.constprop.0+0x56>
 8006a7a:	2308      	movs	r3, #8
 8006a7c:	e7af      	b.n	80069de <_strtol_l.constprop.0+0x56>
 8006a7e:	2c30      	cmp	r4, #48	; 0x30
 8006a80:	d0a5      	beq.n	80069ce <_strtol_l.constprop.0+0x46>
 8006a82:	230a      	movs	r3, #10
 8006a84:	e7ab      	b.n	80069de <_strtol_l.constprop.0+0x56>
 8006a86:	bf00      	nop
 8006a88:	08009991 	.word	0x08009991

08006a8c <_strtol_r>:
 8006a8c:	f7ff bf7c 	b.w	8006988 <_strtol_l.constprop.0>

08006a90 <quorem>:
 8006a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	6903      	ldr	r3, [r0, #16]
 8006a96:	690c      	ldr	r4, [r1, #16]
 8006a98:	42a3      	cmp	r3, r4
 8006a9a:	4607      	mov	r7, r0
 8006a9c:	f2c0 8081 	blt.w	8006ba2 <quorem+0x112>
 8006aa0:	3c01      	subs	r4, #1
 8006aa2:	f101 0814 	add.w	r8, r1, #20
 8006aa6:	f100 0514 	add.w	r5, r0, #20
 8006aaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ab4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	429a      	cmp	r2, r3
 8006abc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ac0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ac4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ac8:	d331      	bcc.n	8006b2e <quorem+0x9e>
 8006aca:	f04f 0e00 	mov.w	lr, #0
 8006ace:	4640      	mov	r0, r8
 8006ad0:	46ac      	mov	ip, r5
 8006ad2:	46f2      	mov	sl, lr
 8006ad4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ad8:	b293      	uxth	r3, r2
 8006ada:	fb06 e303 	mla	r3, r6, r3, lr
 8006ade:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	ebaa 0303 	sub.w	r3, sl, r3
 8006ae8:	f8dc a000 	ldr.w	sl, [ip]
 8006aec:	0c12      	lsrs	r2, r2, #16
 8006aee:	fa13 f38a 	uxtah	r3, r3, sl
 8006af2:	fb06 e202 	mla	r2, r6, r2, lr
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	9b00      	ldr	r3, [sp, #0]
 8006afa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006afe:	b292      	uxth	r2, r2
 8006b00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b08:	f8bd 3000 	ldrh.w	r3, [sp]
 8006b0c:	4581      	cmp	r9, r0
 8006b0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b12:	f84c 3b04 	str.w	r3, [ip], #4
 8006b16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b1a:	d2db      	bcs.n	8006ad4 <quorem+0x44>
 8006b1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b20:	b92b      	cbnz	r3, 8006b2e <quorem+0x9e>
 8006b22:	9b01      	ldr	r3, [sp, #4]
 8006b24:	3b04      	subs	r3, #4
 8006b26:	429d      	cmp	r5, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	d32e      	bcc.n	8006b8a <quorem+0xfa>
 8006b2c:	613c      	str	r4, [r7, #16]
 8006b2e:	4638      	mov	r0, r7
 8006b30:	f001 fc90 	bl	8008454 <__mcmp>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	db24      	blt.n	8006b82 <quorem+0xf2>
 8006b38:	3601      	adds	r6, #1
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f04f 0c00 	mov.w	ip, #0
 8006b40:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b44:	f8d0 e000 	ldr.w	lr, [r0]
 8006b48:	b293      	uxth	r3, r2
 8006b4a:	ebac 0303 	sub.w	r3, ip, r3
 8006b4e:	0c12      	lsrs	r2, r2, #16
 8006b50:	fa13 f38e 	uxtah	r3, r3, lr
 8006b54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b62:	45c1      	cmp	r9, r8
 8006b64:	f840 3b04 	str.w	r3, [r0], #4
 8006b68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b6c:	d2e8      	bcs.n	8006b40 <quorem+0xb0>
 8006b6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b76:	b922      	cbnz	r2, 8006b82 <quorem+0xf2>
 8006b78:	3b04      	subs	r3, #4
 8006b7a:	429d      	cmp	r5, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	d30a      	bcc.n	8006b96 <quorem+0x106>
 8006b80:	613c      	str	r4, [r7, #16]
 8006b82:	4630      	mov	r0, r6
 8006b84:	b003      	add	sp, #12
 8006b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8a:	6812      	ldr	r2, [r2, #0]
 8006b8c:	3b04      	subs	r3, #4
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	d1cc      	bne.n	8006b2c <quorem+0x9c>
 8006b92:	3c01      	subs	r4, #1
 8006b94:	e7c7      	b.n	8006b26 <quorem+0x96>
 8006b96:	6812      	ldr	r2, [r2, #0]
 8006b98:	3b04      	subs	r3, #4
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	d1f0      	bne.n	8006b80 <quorem+0xf0>
 8006b9e:	3c01      	subs	r4, #1
 8006ba0:	e7eb      	b.n	8006b7a <quorem+0xea>
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	e7ee      	b.n	8006b84 <quorem+0xf4>
	...

08006ba8 <_dtoa_r>:
 8006ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	ed2d 8b04 	vpush	{d8-d9}
 8006bb0:	ec57 6b10 	vmov	r6, r7, d0
 8006bb4:	b093      	sub	sp, #76	; 0x4c
 8006bb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006bb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006bbc:	9106      	str	r1, [sp, #24]
 8006bbe:	ee10 aa10 	vmov	sl, s0
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8006bc6:	930c      	str	r3, [sp, #48]	; 0x30
 8006bc8:	46bb      	mov	fp, r7
 8006bca:	b975      	cbnz	r5, 8006bea <_dtoa_r+0x42>
 8006bcc:	2010      	movs	r0, #16
 8006bce:	f001 f94d 	bl	8007e6c <malloc>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	6260      	str	r0, [r4, #36]	; 0x24
 8006bd6:	b920      	cbnz	r0, 8006be2 <_dtoa_r+0x3a>
 8006bd8:	4ba7      	ldr	r3, [pc, #668]	; (8006e78 <_dtoa_r+0x2d0>)
 8006bda:	21ea      	movs	r1, #234	; 0xea
 8006bdc:	48a7      	ldr	r0, [pc, #668]	; (8006e7c <_dtoa_r+0x2d4>)
 8006bde:	f002 f8bd 	bl	8008d5c <__assert_func>
 8006be2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006be6:	6005      	str	r5, [r0, #0]
 8006be8:	60c5      	str	r5, [r0, #12]
 8006bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bec:	6819      	ldr	r1, [r3, #0]
 8006bee:	b151      	cbz	r1, 8006c06 <_dtoa_r+0x5e>
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	604a      	str	r2, [r1, #4]
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	4093      	lsls	r3, r2
 8006bf8:	608b      	str	r3, [r1, #8]
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f001 f99e 	bl	8007f3c <_Bfree>
 8006c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	1e3b      	subs	r3, r7, #0
 8006c08:	bfaa      	itet	ge
 8006c0a:	2300      	movge	r3, #0
 8006c0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006c10:	f8c8 3000 	strge.w	r3, [r8]
 8006c14:	4b9a      	ldr	r3, [pc, #616]	; (8006e80 <_dtoa_r+0x2d8>)
 8006c16:	bfbc      	itt	lt
 8006c18:	2201      	movlt	r2, #1
 8006c1a:	f8c8 2000 	strlt.w	r2, [r8]
 8006c1e:	ea33 030b 	bics.w	r3, r3, fp
 8006c22:	d11b      	bne.n	8006c5c <_dtoa_r+0xb4>
 8006c24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c26:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c30:	4333      	orrs	r3, r6
 8006c32:	f000 8592 	beq.w	800775a <_dtoa_r+0xbb2>
 8006c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c38:	b963      	cbnz	r3, 8006c54 <_dtoa_r+0xac>
 8006c3a:	4b92      	ldr	r3, [pc, #584]	; (8006e84 <_dtoa_r+0x2dc>)
 8006c3c:	e022      	b.n	8006c84 <_dtoa_r+0xdc>
 8006c3e:	4b92      	ldr	r3, [pc, #584]	; (8006e88 <_dtoa_r+0x2e0>)
 8006c40:	9301      	str	r3, [sp, #4]
 8006c42:	3308      	adds	r3, #8
 8006c44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	9801      	ldr	r0, [sp, #4]
 8006c4a:	b013      	add	sp, #76	; 0x4c
 8006c4c:	ecbd 8b04 	vpop	{d8-d9}
 8006c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c54:	4b8b      	ldr	r3, [pc, #556]	; (8006e84 <_dtoa_r+0x2dc>)
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	3303      	adds	r3, #3
 8006c5a:	e7f3      	b.n	8006c44 <_dtoa_r+0x9c>
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2300      	movs	r3, #0
 8006c60:	4650      	mov	r0, sl
 8006c62:	4659      	mov	r1, fp
 8006c64:	f7f9 ff58 	bl	8000b18 <__aeabi_dcmpeq>
 8006c68:	ec4b ab19 	vmov	d9, sl, fp
 8006c6c:	4680      	mov	r8, r0
 8006c6e:	b158      	cbz	r0, 8006c88 <_dtoa_r+0xe0>
 8006c70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c72:	2301      	movs	r3, #1
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 856b 	beq.w	8007754 <_dtoa_r+0xbac>
 8006c7e:	4883      	ldr	r0, [pc, #524]	; (8006e8c <_dtoa_r+0x2e4>)
 8006c80:	6018      	str	r0, [r3, #0]
 8006c82:	1e43      	subs	r3, r0, #1
 8006c84:	9301      	str	r3, [sp, #4]
 8006c86:	e7df      	b.n	8006c48 <_dtoa_r+0xa0>
 8006c88:	ec4b ab10 	vmov	d0, sl, fp
 8006c8c:	aa10      	add	r2, sp, #64	; 0x40
 8006c8e:	a911      	add	r1, sp, #68	; 0x44
 8006c90:	4620      	mov	r0, r4
 8006c92:	f001 fd01 	bl	8008698 <__d2b>
 8006c96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006c9a:	ee08 0a10 	vmov	s16, r0
 8006c9e:	2d00      	cmp	r5, #0
 8006ca0:	f000 8084 	beq.w	8006dac <_dtoa_r+0x204>
 8006ca4:	ee19 3a90 	vmov	r3, s19
 8006ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006cb0:	4656      	mov	r6, sl
 8006cb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006cb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006cba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006cbe:	4b74      	ldr	r3, [pc, #464]	; (8006e90 <_dtoa_r+0x2e8>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	4639      	mov	r1, r7
 8006cc6:	f7f9 fb07 	bl	80002d8 <__aeabi_dsub>
 8006cca:	a365      	add	r3, pc, #404	; (adr r3, 8006e60 <_dtoa_r+0x2b8>)
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	f7f9 fcba 	bl	8000648 <__aeabi_dmul>
 8006cd4:	a364      	add	r3, pc, #400	; (adr r3, 8006e68 <_dtoa_r+0x2c0>)
 8006cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cda:	f7f9 faff 	bl	80002dc <__adddf3>
 8006cde:	4606      	mov	r6, r0
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	460f      	mov	r7, r1
 8006ce4:	f7f9 fc46 	bl	8000574 <__aeabi_i2d>
 8006ce8:	a361      	add	r3, pc, #388	; (adr r3, 8006e70 <_dtoa_r+0x2c8>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fcab 	bl	8000648 <__aeabi_dmul>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	4639      	mov	r1, r7
 8006cfa:	f7f9 faef 	bl	80002dc <__adddf3>
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460f      	mov	r7, r1
 8006d02:	f7f9 ff51 	bl	8000ba8 <__aeabi_d2iz>
 8006d06:	2200      	movs	r2, #0
 8006d08:	9000      	str	r0, [sp, #0]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	4639      	mov	r1, r7
 8006d10:	f7f9 ff0c 	bl	8000b2c <__aeabi_dcmplt>
 8006d14:	b150      	cbz	r0, 8006d2c <_dtoa_r+0x184>
 8006d16:	9800      	ldr	r0, [sp, #0]
 8006d18:	f7f9 fc2c 	bl	8000574 <__aeabi_i2d>
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	463b      	mov	r3, r7
 8006d20:	f7f9 fefa 	bl	8000b18 <__aeabi_dcmpeq>
 8006d24:	b910      	cbnz	r0, 8006d2c <_dtoa_r+0x184>
 8006d26:	9b00      	ldr	r3, [sp, #0]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	9b00      	ldr	r3, [sp, #0]
 8006d2e:	2b16      	cmp	r3, #22
 8006d30:	d85a      	bhi.n	8006de8 <_dtoa_r+0x240>
 8006d32:	9a00      	ldr	r2, [sp, #0]
 8006d34:	4b57      	ldr	r3, [pc, #348]	; (8006e94 <_dtoa_r+0x2ec>)
 8006d36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	ec51 0b19 	vmov	r0, r1, d9
 8006d42:	f7f9 fef3 	bl	8000b2c <__aeabi_dcmplt>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d050      	beq.n	8006dec <_dtoa_r+0x244>
 8006d4a:	9b00      	ldr	r3, [sp, #0]
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	2300      	movs	r3, #0
 8006d52:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d56:	1b5d      	subs	r5, r3, r5
 8006d58:	1e6b      	subs	r3, r5, #1
 8006d5a:	9305      	str	r3, [sp, #20]
 8006d5c:	bf45      	ittet	mi
 8006d5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006d62:	9304      	strmi	r3, [sp, #16]
 8006d64:	2300      	movpl	r3, #0
 8006d66:	2300      	movmi	r3, #0
 8006d68:	bf4c      	ite	mi
 8006d6a:	9305      	strmi	r3, [sp, #20]
 8006d6c:	9304      	strpl	r3, [sp, #16]
 8006d6e:	9b00      	ldr	r3, [sp, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	db3d      	blt.n	8006df0 <_dtoa_r+0x248>
 8006d74:	9b05      	ldr	r3, [sp, #20]
 8006d76:	9a00      	ldr	r2, [sp, #0]
 8006d78:	920a      	str	r2, [sp, #40]	; 0x28
 8006d7a:	4413      	add	r3, r2
 8006d7c:	9305      	str	r3, [sp, #20]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	9307      	str	r3, [sp, #28]
 8006d82:	9b06      	ldr	r3, [sp, #24]
 8006d84:	2b09      	cmp	r3, #9
 8006d86:	f200 8089 	bhi.w	8006e9c <_dtoa_r+0x2f4>
 8006d8a:	2b05      	cmp	r3, #5
 8006d8c:	bfc4      	itt	gt
 8006d8e:	3b04      	subgt	r3, #4
 8006d90:	9306      	strgt	r3, [sp, #24]
 8006d92:	9b06      	ldr	r3, [sp, #24]
 8006d94:	f1a3 0302 	sub.w	r3, r3, #2
 8006d98:	bfcc      	ite	gt
 8006d9a:	2500      	movgt	r5, #0
 8006d9c:	2501      	movle	r5, #1
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	f200 8087 	bhi.w	8006eb2 <_dtoa_r+0x30a>
 8006da4:	e8df f003 	tbb	[pc, r3]
 8006da8:	59383a2d 	.word	0x59383a2d
 8006dac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006db0:	441d      	add	r5, r3
 8006db2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	bfc1      	itttt	gt
 8006dba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006dbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006dc2:	fa0b f303 	lslgt.w	r3, fp, r3
 8006dc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006dca:	bfda      	itte	le
 8006dcc:	f1c3 0320 	rsble	r3, r3, #32
 8006dd0:	fa06 f003 	lslle.w	r0, r6, r3
 8006dd4:	4318      	orrgt	r0, r3
 8006dd6:	f7f9 fbbd 	bl	8000554 <__aeabi_ui2d>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	4606      	mov	r6, r0
 8006dde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006de2:	3d01      	subs	r5, #1
 8006de4:	930e      	str	r3, [sp, #56]	; 0x38
 8006de6:	e76a      	b.n	8006cbe <_dtoa_r+0x116>
 8006de8:	2301      	movs	r3, #1
 8006dea:	e7b2      	b.n	8006d52 <_dtoa_r+0x1aa>
 8006dec:	900b      	str	r0, [sp, #44]	; 0x2c
 8006dee:	e7b1      	b.n	8006d54 <_dtoa_r+0x1ac>
 8006df0:	9b04      	ldr	r3, [sp, #16]
 8006df2:	9a00      	ldr	r2, [sp, #0]
 8006df4:	1a9b      	subs	r3, r3, r2
 8006df6:	9304      	str	r3, [sp, #16]
 8006df8:	4253      	negs	r3, r2
 8006dfa:	9307      	str	r3, [sp, #28]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8006e00:	e7bf      	b.n	8006d82 <_dtoa_r+0x1da>
 8006e02:	2300      	movs	r3, #0
 8006e04:	9308      	str	r3, [sp, #32]
 8006e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	dc55      	bgt.n	8006eb8 <_dtoa_r+0x310>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e12:	461a      	mov	r2, r3
 8006e14:	9209      	str	r2, [sp, #36]	; 0x24
 8006e16:	e00c      	b.n	8006e32 <_dtoa_r+0x28a>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e7f3      	b.n	8006e04 <_dtoa_r+0x25c>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e20:	9308      	str	r3, [sp, #32]
 8006e22:	9b00      	ldr	r3, [sp, #0]
 8006e24:	4413      	add	r3, r2
 8006e26:	9302      	str	r3, [sp, #8]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	9303      	str	r3, [sp, #12]
 8006e2e:	bfb8      	it	lt
 8006e30:	2301      	movlt	r3, #1
 8006e32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e34:	2200      	movs	r2, #0
 8006e36:	6042      	str	r2, [r0, #4]
 8006e38:	2204      	movs	r2, #4
 8006e3a:	f102 0614 	add.w	r6, r2, #20
 8006e3e:	429e      	cmp	r6, r3
 8006e40:	6841      	ldr	r1, [r0, #4]
 8006e42:	d93d      	bls.n	8006ec0 <_dtoa_r+0x318>
 8006e44:	4620      	mov	r0, r4
 8006e46:	f001 f839 	bl	8007ebc <_Balloc>
 8006e4a:	9001      	str	r0, [sp, #4]
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d13b      	bne.n	8006ec8 <_dtoa_r+0x320>
 8006e50:	4b11      	ldr	r3, [pc, #68]	; (8006e98 <_dtoa_r+0x2f0>)
 8006e52:	4602      	mov	r2, r0
 8006e54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e58:	e6c0      	b.n	8006bdc <_dtoa_r+0x34>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e7df      	b.n	8006e1e <_dtoa_r+0x276>
 8006e5e:	bf00      	nop
 8006e60:	636f4361 	.word	0x636f4361
 8006e64:	3fd287a7 	.word	0x3fd287a7
 8006e68:	8b60c8b3 	.word	0x8b60c8b3
 8006e6c:	3fc68a28 	.word	0x3fc68a28
 8006e70:	509f79fb 	.word	0x509f79fb
 8006e74:	3fd34413 	.word	0x3fd34413
 8006e78:	08009a9e 	.word	0x08009a9e
 8006e7c:	08009ab5 	.word	0x08009ab5
 8006e80:	7ff00000 	.word	0x7ff00000
 8006e84:	08009a9a 	.word	0x08009a9a
 8006e88:	08009a91 	.word	0x08009a91
 8006e8c:	08009915 	.word	0x08009915
 8006e90:	3ff80000 	.word	0x3ff80000
 8006e94:	08009c20 	.word	0x08009c20
 8006e98:	08009b10 	.word	0x08009b10
 8006e9c:	2501      	movs	r5, #1
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	9306      	str	r3, [sp, #24]
 8006ea2:	9508      	str	r5, [sp, #32]
 8006ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006eac:	2200      	movs	r2, #0
 8006eae:	2312      	movs	r3, #18
 8006eb0:	e7b0      	b.n	8006e14 <_dtoa_r+0x26c>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	9308      	str	r3, [sp, #32]
 8006eb6:	e7f5      	b.n	8006ea4 <_dtoa_r+0x2fc>
 8006eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006ebe:	e7b8      	b.n	8006e32 <_dtoa_r+0x28a>
 8006ec0:	3101      	adds	r1, #1
 8006ec2:	6041      	str	r1, [r0, #4]
 8006ec4:	0052      	lsls	r2, r2, #1
 8006ec6:	e7b8      	b.n	8006e3a <_dtoa_r+0x292>
 8006ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eca:	9a01      	ldr	r2, [sp, #4]
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	9b03      	ldr	r3, [sp, #12]
 8006ed0:	2b0e      	cmp	r3, #14
 8006ed2:	f200 809d 	bhi.w	8007010 <_dtoa_r+0x468>
 8006ed6:	2d00      	cmp	r5, #0
 8006ed8:	f000 809a 	beq.w	8007010 <_dtoa_r+0x468>
 8006edc:	9b00      	ldr	r3, [sp, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	dd32      	ble.n	8006f48 <_dtoa_r+0x3a0>
 8006ee2:	4ab7      	ldr	r2, [pc, #732]	; (80071c0 <_dtoa_r+0x618>)
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006eec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ef0:	9b00      	ldr	r3, [sp, #0]
 8006ef2:	05d8      	lsls	r0, r3, #23
 8006ef4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006ef8:	d516      	bpl.n	8006f28 <_dtoa_r+0x380>
 8006efa:	4bb2      	ldr	r3, [pc, #712]	; (80071c4 <_dtoa_r+0x61c>)
 8006efc:	ec51 0b19 	vmov	r0, r1, d9
 8006f00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f04:	f7f9 fcca 	bl	800089c <__aeabi_ddiv>
 8006f08:	f007 070f 	and.w	r7, r7, #15
 8006f0c:	4682      	mov	sl, r0
 8006f0e:	468b      	mov	fp, r1
 8006f10:	2503      	movs	r5, #3
 8006f12:	4eac      	ldr	r6, [pc, #688]	; (80071c4 <_dtoa_r+0x61c>)
 8006f14:	b957      	cbnz	r7, 8006f2c <_dtoa_r+0x384>
 8006f16:	4642      	mov	r2, r8
 8006f18:	464b      	mov	r3, r9
 8006f1a:	4650      	mov	r0, sl
 8006f1c:	4659      	mov	r1, fp
 8006f1e:	f7f9 fcbd 	bl	800089c <__aeabi_ddiv>
 8006f22:	4682      	mov	sl, r0
 8006f24:	468b      	mov	fp, r1
 8006f26:	e028      	b.n	8006f7a <_dtoa_r+0x3d2>
 8006f28:	2502      	movs	r5, #2
 8006f2a:	e7f2      	b.n	8006f12 <_dtoa_r+0x36a>
 8006f2c:	07f9      	lsls	r1, r7, #31
 8006f2e:	d508      	bpl.n	8006f42 <_dtoa_r+0x39a>
 8006f30:	4640      	mov	r0, r8
 8006f32:	4649      	mov	r1, r9
 8006f34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f38:	f7f9 fb86 	bl	8000648 <__aeabi_dmul>
 8006f3c:	3501      	adds	r5, #1
 8006f3e:	4680      	mov	r8, r0
 8006f40:	4689      	mov	r9, r1
 8006f42:	107f      	asrs	r7, r7, #1
 8006f44:	3608      	adds	r6, #8
 8006f46:	e7e5      	b.n	8006f14 <_dtoa_r+0x36c>
 8006f48:	f000 809b 	beq.w	8007082 <_dtoa_r+0x4da>
 8006f4c:	9b00      	ldr	r3, [sp, #0]
 8006f4e:	4f9d      	ldr	r7, [pc, #628]	; (80071c4 <_dtoa_r+0x61c>)
 8006f50:	425e      	negs	r6, r3
 8006f52:	4b9b      	ldr	r3, [pc, #620]	; (80071c0 <_dtoa_r+0x618>)
 8006f54:	f006 020f 	and.w	r2, r6, #15
 8006f58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	ec51 0b19 	vmov	r0, r1, d9
 8006f64:	f7f9 fb70 	bl	8000648 <__aeabi_dmul>
 8006f68:	1136      	asrs	r6, r6, #4
 8006f6a:	4682      	mov	sl, r0
 8006f6c:	468b      	mov	fp, r1
 8006f6e:	2300      	movs	r3, #0
 8006f70:	2502      	movs	r5, #2
 8006f72:	2e00      	cmp	r6, #0
 8006f74:	d17a      	bne.n	800706c <_dtoa_r+0x4c4>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1d3      	bne.n	8006f22 <_dtoa_r+0x37a>
 8006f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 8082 	beq.w	8007086 <_dtoa_r+0x4de>
 8006f82:	4b91      	ldr	r3, [pc, #580]	; (80071c8 <_dtoa_r+0x620>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	4650      	mov	r0, sl
 8006f88:	4659      	mov	r1, fp
 8006f8a:	f7f9 fdcf 	bl	8000b2c <__aeabi_dcmplt>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d079      	beq.n	8007086 <_dtoa_r+0x4de>
 8006f92:	9b03      	ldr	r3, [sp, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d076      	beq.n	8007086 <_dtoa_r+0x4de>
 8006f98:	9b02      	ldr	r3, [sp, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	dd36      	ble.n	800700c <_dtoa_r+0x464>
 8006f9e:	9b00      	ldr	r3, [sp, #0]
 8006fa0:	4650      	mov	r0, sl
 8006fa2:	4659      	mov	r1, fp
 8006fa4:	1e5f      	subs	r7, r3, #1
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4b88      	ldr	r3, [pc, #544]	; (80071cc <_dtoa_r+0x624>)
 8006faa:	f7f9 fb4d 	bl	8000648 <__aeabi_dmul>
 8006fae:	9e02      	ldr	r6, [sp, #8]
 8006fb0:	4682      	mov	sl, r0
 8006fb2:	468b      	mov	fp, r1
 8006fb4:	3501      	adds	r5, #1
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f7f9 fadc 	bl	8000574 <__aeabi_i2d>
 8006fbc:	4652      	mov	r2, sl
 8006fbe:	465b      	mov	r3, fp
 8006fc0:	f7f9 fb42 	bl	8000648 <__aeabi_dmul>
 8006fc4:	4b82      	ldr	r3, [pc, #520]	; (80071d0 <_dtoa_r+0x628>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f7f9 f988 	bl	80002dc <__adddf3>
 8006fcc:	46d0      	mov	r8, sl
 8006fce:	46d9      	mov	r9, fp
 8006fd0:	4682      	mov	sl, r0
 8006fd2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006fd6:	2e00      	cmp	r6, #0
 8006fd8:	d158      	bne.n	800708c <_dtoa_r+0x4e4>
 8006fda:	4b7e      	ldr	r3, [pc, #504]	; (80071d4 <_dtoa_r+0x62c>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4640      	mov	r0, r8
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	f7f9 f979 	bl	80002d8 <__aeabi_dsub>
 8006fe6:	4652      	mov	r2, sl
 8006fe8:	465b      	mov	r3, fp
 8006fea:	4680      	mov	r8, r0
 8006fec:	4689      	mov	r9, r1
 8006fee:	f7f9 fdbb 	bl	8000b68 <__aeabi_dcmpgt>
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	f040 8295 	bne.w	8007522 <_dtoa_r+0x97a>
 8006ff8:	4652      	mov	r2, sl
 8006ffa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006ffe:	4640      	mov	r0, r8
 8007000:	4649      	mov	r1, r9
 8007002:	f7f9 fd93 	bl	8000b2c <__aeabi_dcmplt>
 8007006:	2800      	cmp	r0, #0
 8007008:	f040 8289 	bne.w	800751e <_dtoa_r+0x976>
 800700c:	ec5b ab19 	vmov	sl, fp, d9
 8007010:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007012:	2b00      	cmp	r3, #0
 8007014:	f2c0 8148 	blt.w	80072a8 <_dtoa_r+0x700>
 8007018:	9a00      	ldr	r2, [sp, #0]
 800701a:	2a0e      	cmp	r2, #14
 800701c:	f300 8144 	bgt.w	80072a8 <_dtoa_r+0x700>
 8007020:	4b67      	ldr	r3, [pc, #412]	; (80071c0 <_dtoa_r+0x618>)
 8007022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007026:	e9d3 8900 	ldrd	r8, r9, [r3]
 800702a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800702c:	2b00      	cmp	r3, #0
 800702e:	f280 80d5 	bge.w	80071dc <_dtoa_r+0x634>
 8007032:	9b03      	ldr	r3, [sp, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f300 80d1 	bgt.w	80071dc <_dtoa_r+0x634>
 800703a:	f040 826f 	bne.w	800751c <_dtoa_r+0x974>
 800703e:	4b65      	ldr	r3, [pc, #404]	; (80071d4 <_dtoa_r+0x62c>)
 8007040:	2200      	movs	r2, #0
 8007042:	4640      	mov	r0, r8
 8007044:	4649      	mov	r1, r9
 8007046:	f7f9 faff 	bl	8000648 <__aeabi_dmul>
 800704a:	4652      	mov	r2, sl
 800704c:	465b      	mov	r3, fp
 800704e:	f7f9 fd81 	bl	8000b54 <__aeabi_dcmpge>
 8007052:	9e03      	ldr	r6, [sp, #12]
 8007054:	4637      	mov	r7, r6
 8007056:	2800      	cmp	r0, #0
 8007058:	f040 8245 	bne.w	80074e6 <_dtoa_r+0x93e>
 800705c:	9d01      	ldr	r5, [sp, #4]
 800705e:	2331      	movs	r3, #49	; 0x31
 8007060:	f805 3b01 	strb.w	r3, [r5], #1
 8007064:	9b00      	ldr	r3, [sp, #0]
 8007066:	3301      	adds	r3, #1
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	e240      	b.n	80074ee <_dtoa_r+0x946>
 800706c:	07f2      	lsls	r2, r6, #31
 800706e:	d505      	bpl.n	800707c <_dtoa_r+0x4d4>
 8007070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007074:	f7f9 fae8 	bl	8000648 <__aeabi_dmul>
 8007078:	3501      	adds	r5, #1
 800707a:	2301      	movs	r3, #1
 800707c:	1076      	asrs	r6, r6, #1
 800707e:	3708      	adds	r7, #8
 8007080:	e777      	b.n	8006f72 <_dtoa_r+0x3ca>
 8007082:	2502      	movs	r5, #2
 8007084:	e779      	b.n	8006f7a <_dtoa_r+0x3d2>
 8007086:	9f00      	ldr	r7, [sp, #0]
 8007088:	9e03      	ldr	r6, [sp, #12]
 800708a:	e794      	b.n	8006fb6 <_dtoa_r+0x40e>
 800708c:	9901      	ldr	r1, [sp, #4]
 800708e:	4b4c      	ldr	r3, [pc, #304]	; (80071c0 <_dtoa_r+0x618>)
 8007090:	4431      	add	r1, r6
 8007092:	910d      	str	r1, [sp, #52]	; 0x34
 8007094:	9908      	ldr	r1, [sp, #32]
 8007096:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800709a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800709e:	2900      	cmp	r1, #0
 80070a0:	d043      	beq.n	800712a <_dtoa_r+0x582>
 80070a2:	494d      	ldr	r1, [pc, #308]	; (80071d8 <_dtoa_r+0x630>)
 80070a4:	2000      	movs	r0, #0
 80070a6:	f7f9 fbf9 	bl	800089c <__aeabi_ddiv>
 80070aa:	4652      	mov	r2, sl
 80070ac:	465b      	mov	r3, fp
 80070ae:	f7f9 f913 	bl	80002d8 <__aeabi_dsub>
 80070b2:	9d01      	ldr	r5, [sp, #4]
 80070b4:	4682      	mov	sl, r0
 80070b6:	468b      	mov	fp, r1
 80070b8:	4649      	mov	r1, r9
 80070ba:	4640      	mov	r0, r8
 80070bc:	f7f9 fd74 	bl	8000ba8 <__aeabi_d2iz>
 80070c0:	4606      	mov	r6, r0
 80070c2:	f7f9 fa57 	bl	8000574 <__aeabi_i2d>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4640      	mov	r0, r8
 80070cc:	4649      	mov	r1, r9
 80070ce:	f7f9 f903 	bl	80002d8 <__aeabi_dsub>
 80070d2:	3630      	adds	r6, #48	; 0x30
 80070d4:	f805 6b01 	strb.w	r6, [r5], #1
 80070d8:	4652      	mov	r2, sl
 80070da:	465b      	mov	r3, fp
 80070dc:	4680      	mov	r8, r0
 80070de:	4689      	mov	r9, r1
 80070e0:	f7f9 fd24 	bl	8000b2c <__aeabi_dcmplt>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d163      	bne.n	80071b0 <_dtoa_r+0x608>
 80070e8:	4642      	mov	r2, r8
 80070ea:	464b      	mov	r3, r9
 80070ec:	4936      	ldr	r1, [pc, #216]	; (80071c8 <_dtoa_r+0x620>)
 80070ee:	2000      	movs	r0, #0
 80070f0:	f7f9 f8f2 	bl	80002d8 <__aeabi_dsub>
 80070f4:	4652      	mov	r2, sl
 80070f6:	465b      	mov	r3, fp
 80070f8:	f7f9 fd18 	bl	8000b2c <__aeabi_dcmplt>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	f040 80b5 	bne.w	800726c <_dtoa_r+0x6c4>
 8007102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007104:	429d      	cmp	r5, r3
 8007106:	d081      	beq.n	800700c <_dtoa_r+0x464>
 8007108:	4b30      	ldr	r3, [pc, #192]	; (80071cc <_dtoa_r+0x624>)
 800710a:	2200      	movs	r2, #0
 800710c:	4650      	mov	r0, sl
 800710e:	4659      	mov	r1, fp
 8007110:	f7f9 fa9a 	bl	8000648 <__aeabi_dmul>
 8007114:	4b2d      	ldr	r3, [pc, #180]	; (80071cc <_dtoa_r+0x624>)
 8007116:	4682      	mov	sl, r0
 8007118:	468b      	mov	fp, r1
 800711a:	4640      	mov	r0, r8
 800711c:	4649      	mov	r1, r9
 800711e:	2200      	movs	r2, #0
 8007120:	f7f9 fa92 	bl	8000648 <__aeabi_dmul>
 8007124:	4680      	mov	r8, r0
 8007126:	4689      	mov	r9, r1
 8007128:	e7c6      	b.n	80070b8 <_dtoa_r+0x510>
 800712a:	4650      	mov	r0, sl
 800712c:	4659      	mov	r1, fp
 800712e:	f7f9 fa8b 	bl	8000648 <__aeabi_dmul>
 8007132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007134:	9d01      	ldr	r5, [sp, #4]
 8007136:	930f      	str	r3, [sp, #60]	; 0x3c
 8007138:	4682      	mov	sl, r0
 800713a:	468b      	mov	fp, r1
 800713c:	4649      	mov	r1, r9
 800713e:	4640      	mov	r0, r8
 8007140:	f7f9 fd32 	bl	8000ba8 <__aeabi_d2iz>
 8007144:	4606      	mov	r6, r0
 8007146:	f7f9 fa15 	bl	8000574 <__aeabi_i2d>
 800714a:	3630      	adds	r6, #48	; 0x30
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4640      	mov	r0, r8
 8007152:	4649      	mov	r1, r9
 8007154:	f7f9 f8c0 	bl	80002d8 <__aeabi_dsub>
 8007158:	f805 6b01 	strb.w	r6, [r5], #1
 800715c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800715e:	429d      	cmp	r5, r3
 8007160:	4680      	mov	r8, r0
 8007162:	4689      	mov	r9, r1
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	d124      	bne.n	80071b4 <_dtoa_r+0x60c>
 800716a:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <_dtoa_r+0x630>)
 800716c:	4650      	mov	r0, sl
 800716e:	4659      	mov	r1, fp
 8007170:	f7f9 f8b4 	bl	80002dc <__adddf3>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4640      	mov	r0, r8
 800717a:	4649      	mov	r1, r9
 800717c:	f7f9 fcf4 	bl	8000b68 <__aeabi_dcmpgt>
 8007180:	2800      	cmp	r0, #0
 8007182:	d173      	bne.n	800726c <_dtoa_r+0x6c4>
 8007184:	4652      	mov	r2, sl
 8007186:	465b      	mov	r3, fp
 8007188:	4913      	ldr	r1, [pc, #76]	; (80071d8 <_dtoa_r+0x630>)
 800718a:	2000      	movs	r0, #0
 800718c:	f7f9 f8a4 	bl	80002d8 <__aeabi_dsub>
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	4640      	mov	r0, r8
 8007196:	4649      	mov	r1, r9
 8007198:	f7f9 fcc8 	bl	8000b2c <__aeabi_dcmplt>
 800719c:	2800      	cmp	r0, #0
 800719e:	f43f af35 	beq.w	800700c <_dtoa_r+0x464>
 80071a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80071a4:	1e6b      	subs	r3, r5, #1
 80071a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80071a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071ac:	2b30      	cmp	r3, #48	; 0x30
 80071ae:	d0f8      	beq.n	80071a2 <_dtoa_r+0x5fa>
 80071b0:	9700      	str	r7, [sp, #0]
 80071b2:	e049      	b.n	8007248 <_dtoa_r+0x6a0>
 80071b4:	4b05      	ldr	r3, [pc, #20]	; (80071cc <_dtoa_r+0x624>)
 80071b6:	f7f9 fa47 	bl	8000648 <__aeabi_dmul>
 80071ba:	4680      	mov	r8, r0
 80071bc:	4689      	mov	r9, r1
 80071be:	e7bd      	b.n	800713c <_dtoa_r+0x594>
 80071c0:	08009c20 	.word	0x08009c20
 80071c4:	08009bf8 	.word	0x08009bf8
 80071c8:	3ff00000 	.word	0x3ff00000
 80071cc:	40240000 	.word	0x40240000
 80071d0:	401c0000 	.word	0x401c0000
 80071d4:	40140000 	.word	0x40140000
 80071d8:	3fe00000 	.word	0x3fe00000
 80071dc:	9d01      	ldr	r5, [sp, #4]
 80071de:	4656      	mov	r6, sl
 80071e0:	465f      	mov	r7, fp
 80071e2:	4642      	mov	r2, r8
 80071e4:	464b      	mov	r3, r9
 80071e6:	4630      	mov	r0, r6
 80071e8:	4639      	mov	r1, r7
 80071ea:	f7f9 fb57 	bl	800089c <__aeabi_ddiv>
 80071ee:	f7f9 fcdb 	bl	8000ba8 <__aeabi_d2iz>
 80071f2:	4682      	mov	sl, r0
 80071f4:	f7f9 f9be 	bl	8000574 <__aeabi_i2d>
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	f7f9 fa24 	bl	8000648 <__aeabi_dmul>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4630      	mov	r0, r6
 8007206:	4639      	mov	r1, r7
 8007208:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800720c:	f7f9 f864 	bl	80002d8 <__aeabi_dsub>
 8007210:	f805 6b01 	strb.w	r6, [r5], #1
 8007214:	9e01      	ldr	r6, [sp, #4]
 8007216:	9f03      	ldr	r7, [sp, #12]
 8007218:	1bae      	subs	r6, r5, r6
 800721a:	42b7      	cmp	r7, r6
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	d135      	bne.n	800728e <_dtoa_r+0x6e6>
 8007222:	f7f9 f85b 	bl	80002dc <__adddf3>
 8007226:	4642      	mov	r2, r8
 8007228:	464b      	mov	r3, r9
 800722a:	4606      	mov	r6, r0
 800722c:	460f      	mov	r7, r1
 800722e:	f7f9 fc9b 	bl	8000b68 <__aeabi_dcmpgt>
 8007232:	b9d0      	cbnz	r0, 800726a <_dtoa_r+0x6c2>
 8007234:	4642      	mov	r2, r8
 8007236:	464b      	mov	r3, r9
 8007238:	4630      	mov	r0, r6
 800723a:	4639      	mov	r1, r7
 800723c:	f7f9 fc6c 	bl	8000b18 <__aeabi_dcmpeq>
 8007240:	b110      	cbz	r0, 8007248 <_dtoa_r+0x6a0>
 8007242:	f01a 0f01 	tst.w	sl, #1
 8007246:	d110      	bne.n	800726a <_dtoa_r+0x6c2>
 8007248:	4620      	mov	r0, r4
 800724a:	ee18 1a10 	vmov	r1, s16
 800724e:	f000 fe75 	bl	8007f3c <_Bfree>
 8007252:	2300      	movs	r3, #0
 8007254:	9800      	ldr	r0, [sp, #0]
 8007256:	702b      	strb	r3, [r5, #0]
 8007258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800725a:	3001      	adds	r0, #1
 800725c:	6018      	str	r0, [r3, #0]
 800725e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007260:	2b00      	cmp	r3, #0
 8007262:	f43f acf1 	beq.w	8006c48 <_dtoa_r+0xa0>
 8007266:	601d      	str	r5, [r3, #0]
 8007268:	e4ee      	b.n	8006c48 <_dtoa_r+0xa0>
 800726a:	9f00      	ldr	r7, [sp, #0]
 800726c:	462b      	mov	r3, r5
 800726e:	461d      	mov	r5, r3
 8007270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007274:	2a39      	cmp	r2, #57	; 0x39
 8007276:	d106      	bne.n	8007286 <_dtoa_r+0x6de>
 8007278:	9a01      	ldr	r2, [sp, #4]
 800727a:	429a      	cmp	r2, r3
 800727c:	d1f7      	bne.n	800726e <_dtoa_r+0x6c6>
 800727e:	9901      	ldr	r1, [sp, #4]
 8007280:	2230      	movs	r2, #48	; 0x30
 8007282:	3701      	adds	r7, #1
 8007284:	700a      	strb	r2, [r1, #0]
 8007286:	781a      	ldrb	r2, [r3, #0]
 8007288:	3201      	adds	r2, #1
 800728a:	701a      	strb	r2, [r3, #0]
 800728c:	e790      	b.n	80071b0 <_dtoa_r+0x608>
 800728e:	4ba6      	ldr	r3, [pc, #664]	; (8007528 <_dtoa_r+0x980>)
 8007290:	2200      	movs	r2, #0
 8007292:	f7f9 f9d9 	bl	8000648 <__aeabi_dmul>
 8007296:	2200      	movs	r2, #0
 8007298:	2300      	movs	r3, #0
 800729a:	4606      	mov	r6, r0
 800729c:	460f      	mov	r7, r1
 800729e:	f7f9 fc3b 	bl	8000b18 <__aeabi_dcmpeq>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d09d      	beq.n	80071e2 <_dtoa_r+0x63a>
 80072a6:	e7cf      	b.n	8007248 <_dtoa_r+0x6a0>
 80072a8:	9a08      	ldr	r2, [sp, #32]
 80072aa:	2a00      	cmp	r2, #0
 80072ac:	f000 80d7 	beq.w	800745e <_dtoa_r+0x8b6>
 80072b0:	9a06      	ldr	r2, [sp, #24]
 80072b2:	2a01      	cmp	r2, #1
 80072b4:	f300 80ba 	bgt.w	800742c <_dtoa_r+0x884>
 80072b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072ba:	2a00      	cmp	r2, #0
 80072bc:	f000 80b2 	beq.w	8007424 <_dtoa_r+0x87c>
 80072c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072c4:	9e07      	ldr	r6, [sp, #28]
 80072c6:	9d04      	ldr	r5, [sp, #16]
 80072c8:	9a04      	ldr	r2, [sp, #16]
 80072ca:	441a      	add	r2, r3
 80072cc:	9204      	str	r2, [sp, #16]
 80072ce:	9a05      	ldr	r2, [sp, #20]
 80072d0:	2101      	movs	r1, #1
 80072d2:	441a      	add	r2, r3
 80072d4:	4620      	mov	r0, r4
 80072d6:	9205      	str	r2, [sp, #20]
 80072d8:	f000 ff32 	bl	8008140 <__i2b>
 80072dc:	4607      	mov	r7, r0
 80072de:	2d00      	cmp	r5, #0
 80072e0:	dd0c      	ble.n	80072fc <_dtoa_r+0x754>
 80072e2:	9b05      	ldr	r3, [sp, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	dd09      	ble.n	80072fc <_dtoa_r+0x754>
 80072e8:	42ab      	cmp	r3, r5
 80072ea:	9a04      	ldr	r2, [sp, #16]
 80072ec:	bfa8      	it	ge
 80072ee:	462b      	movge	r3, r5
 80072f0:	1ad2      	subs	r2, r2, r3
 80072f2:	9204      	str	r2, [sp, #16]
 80072f4:	9a05      	ldr	r2, [sp, #20]
 80072f6:	1aed      	subs	r5, r5, r3
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	9305      	str	r3, [sp, #20]
 80072fc:	9b07      	ldr	r3, [sp, #28]
 80072fe:	b31b      	cbz	r3, 8007348 <_dtoa_r+0x7a0>
 8007300:	9b08      	ldr	r3, [sp, #32]
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 80af 	beq.w	8007466 <_dtoa_r+0x8be>
 8007308:	2e00      	cmp	r6, #0
 800730a:	dd13      	ble.n	8007334 <_dtoa_r+0x78c>
 800730c:	4639      	mov	r1, r7
 800730e:	4632      	mov	r2, r6
 8007310:	4620      	mov	r0, r4
 8007312:	f000 ffd5 	bl	80082c0 <__pow5mult>
 8007316:	ee18 2a10 	vmov	r2, s16
 800731a:	4601      	mov	r1, r0
 800731c:	4607      	mov	r7, r0
 800731e:	4620      	mov	r0, r4
 8007320:	f000 ff24 	bl	800816c <__multiply>
 8007324:	ee18 1a10 	vmov	r1, s16
 8007328:	4680      	mov	r8, r0
 800732a:	4620      	mov	r0, r4
 800732c:	f000 fe06 	bl	8007f3c <_Bfree>
 8007330:	ee08 8a10 	vmov	s16, r8
 8007334:	9b07      	ldr	r3, [sp, #28]
 8007336:	1b9a      	subs	r2, r3, r6
 8007338:	d006      	beq.n	8007348 <_dtoa_r+0x7a0>
 800733a:	ee18 1a10 	vmov	r1, s16
 800733e:	4620      	mov	r0, r4
 8007340:	f000 ffbe 	bl	80082c0 <__pow5mult>
 8007344:	ee08 0a10 	vmov	s16, r0
 8007348:	2101      	movs	r1, #1
 800734a:	4620      	mov	r0, r4
 800734c:	f000 fef8 	bl	8008140 <__i2b>
 8007350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007352:	2b00      	cmp	r3, #0
 8007354:	4606      	mov	r6, r0
 8007356:	f340 8088 	ble.w	800746a <_dtoa_r+0x8c2>
 800735a:	461a      	mov	r2, r3
 800735c:	4601      	mov	r1, r0
 800735e:	4620      	mov	r0, r4
 8007360:	f000 ffae 	bl	80082c0 <__pow5mult>
 8007364:	9b06      	ldr	r3, [sp, #24]
 8007366:	2b01      	cmp	r3, #1
 8007368:	4606      	mov	r6, r0
 800736a:	f340 8081 	ble.w	8007470 <_dtoa_r+0x8c8>
 800736e:	f04f 0800 	mov.w	r8, #0
 8007372:	6933      	ldr	r3, [r6, #16]
 8007374:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007378:	6918      	ldr	r0, [r3, #16]
 800737a:	f000 fe91 	bl	80080a0 <__hi0bits>
 800737e:	f1c0 0020 	rsb	r0, r0, #32
 8007382:	9b05      	ldr	r3, [sp, #20]
 8007384:	4418      	add	r0, r3
 8007386:	f010 001f 	ands.w	r0, r0, #31
 800738a:	f000 8092 	beq.w	80074b2 <_dtoa_r+0x90a>
 800738e:	f1c0 0320 	rsb	r3, r0, #32
 8007392:	2b04      	cmp	r3, #4
 8007394:	f340 808a 	ble.w	80074ac <_dtoa_r+0x904>
 8007398:	f1c0 001c 	rsb	r0, r0, #28
 800739c:	9b04      	ldr	r3, [sp, #16]
 800739e:	4403      	add	r3, r0
 80073a0:	9304      	str	r3, [sp, #16]
 80073a2:	9b05      	ldr	r3, [sp, #20]
 80073a4:	4403      	add	r3, r0
 80073a6:	4405      	add	r5, r0
 80073a8:	9305      	str	r3, [sp, #20]
 80073aa:	9b04      	ldr	r3, [sp, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dd07      	ble.n	80073c0 <_dtoa_r+0x818>
 80073b0:	ee18 1a10 	vmov	r1, s16
 80073b4:	461a      	mov	r2, r3
 80073b6:	4620      	mov	r0, r4
 80073b8:	f000 ffdc 	bl	8008374 <__lshift>
 80073bc:	ee08 0a10 	vmov	s16, r0
 80073c0:	9b05      	ldr	r3, [sp, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	dd05      	ble.n	80073d2 <_dtoa_r+0x82a>
 80073c6:	4631      	mov	r1, r6
 80073c8:	461a      	mov	r2, r3
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 ffd2 	bl	8008374 <__lshift>
 80073d0:	4606      	mov	r6, r0
 80073d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d06e      	beq.n	80074b6 <_dtoa_r+0x90e>
 80073d8:	ee18 0a10 	vmov	r0, s16
 80073dc:	4631      	mov	r1, r6
 80073de:	f001 f839 	bl	8008454 <__mcmp>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	da67      	bge.n	80074b6 <_dtoa_r+0x90e>
 80073e6:	9b00      	ldr	r3, [sp, #0]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	ee18 1a10 	vmov	r1, s16
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	220a      	movs	r2, #10
 80073f2:	2300      	movs	r3, #0
 80073f4:	4620      	mov	r0, r4
 80073f6:	f000 fdc3 	bl	8007f80 <__multadd>
 80073fa:	9b08      	ldr	r3, [sp, #32]
 80073fc:	ee08 0a10 	vmov	s16, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 81b1 	beq.w	8007768 <_dtoa_r+0xbc0>
 8007406:	2300      	movs	r3, #0
 8007408:	4639      	mov	r1, r7
 800740a:	220a      	movs	r2, #10
 800740c:	4620      	mov	r0, r4
 800740e:	f000 fdb7 	bl	8007f80 <__multadd>
 8007412:	9b02      	ldr	r3, [sp, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	4607      	mov	r7, r0
 8007418:	f300 808e 	bgt.w	8007538 <_dtoa_r+0x990>
 800741c:	9b06      	ldr	r3, [sp, #24]
 800741e:	2b02      	cmp	r3, #2
 8007420:	dc51      	bgt.n	80074c6 <_dtoa_r+0x91e>
 8007422:	e089      	b.n	8007538 <_dtoa_r+0x990>
 8007424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007426:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800742a:	e74b      	b.n	80072c4 <_dtoa_r+0x71c>
 800742c:	9b03      	ldr	r3, [sp, #12]
 800742e:	1e5e      	subs	r6, r3, #1
 8007430:	9b07      	ldr	r3, [sp, #28]
 8007432:	42b3      	cmp	r3, r6
 8007434:	bfbf      	itttt	lt
 8007436:	9b07      	ldrlt	r3, [sp, #28]
 8007438:	9607      	strlt	r6, [sp, #28]
 800743a:	1af2      	sublt	r2, r6, r3
 800743c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800743e:	bfb6      	itet	lt
 8007440:	189b      	addlt	r3, r3, r2
 8007442:	1b9e      	subge	r6, r3, r6
 8007444:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	bfb8      	it	lt
 800744a:	2600      	movlt	r6, #0
 800744c:	2b00      	cmp	r3, #0
 800744e:	bfb7      	itett	lt
 8007450:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007454:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007458:	1a9d      	sublt	r5, r3, r2
 800745a:	2300      	movlt	r3, #0
 800745c:	e734      	b.n	80072c8 <_dtoa_r+0x720>
 800745e:	9e07      	ldr	r6, [sp, #28]
 8007460:	9d04      	ldr	r5, [sp, #16]
 8007462:	9f08      	ldr	r7, [sp, #32]
 8007464:	e73b      	b.n	80072de <_dtoa_r+0x736>
 8007466:	9a07      	ldr	r2, [sp, #28]
 8007468:	e767      	b.n	800733a <_dtoa_r+0x792>
 800746a:	9b06      	ldr	r3, [sp, #24]
 800746c:	2b01      	cmp	r3, #1
 800746e:	dc18      	bgt.n	80074a2 <_dtoa_r+0x8fa>
 8007470:	f1ba 0f00 	cmp.w	sl, #0
 8007474:	d115      	bne.n	80074a2 <_dtoa_r+0x8fa>
 8007476:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800747a:	b993      	cbnz	r3, 80074a2 <_dtoa_r+0x8fa>
 800747c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007480:	0d1b      	lsrs	r3, r3, #20
 8007482:	051b      	lsls	r3, r3, #20
 8007484:	b183      	cbz	r3, 80074a8 <_dtoa_r+0x900>
 8007486:	9b04      	ldr	r3, [sp, #16]
 8007488:	3301      	adds	r3, #1
 800748a:	9304      	str	r3, [sp, #16]
 800748c:	9b05      	ldr	r3, [sp, #20]
 800748e:	3301      	adds	r3, #1
 8007490:	9305      	str	r3, [sp, #20]
 8007492:	f04f 0801 	mov.w	r8, #1
 8007496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007498:	2b00      	cmp	r3, #0
 800749a:	f47f af6a 	bne.w	8007372 <_dtoa_r+0x7ca>
 800749e:	2001      	movs	r0, #1
 80074a0:	e76f      	b.n	8007382 <_dtoa_r+0x7da>
 80074a2:	f04f 0800 	mov.w	r8, #0
 80074a6:	e7f6      	b.n	8007496 <_dtoa_r+0x8ee>
 80074a8:	4698      	mov	r8, r3
 80074aa:	e7f4      	b.n	8007496 <_dtoa_r+0x8ee>
 80074ac:	f43f af7d 	beq.w	80073aa <_dtoa_r+0x802>
 80074b0:	4618      	mov	r0, r3
 80074b2:	301c      	adds	r0, #28
 80074b4:	e772      	b.n	800739c <_dtoa_r+0x7f4>
 80074b6:	9b03      	ldr	r3, [sp, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	dc37      	bgt.n	800752c <_dtoa_r+0x984>
 80074bc:	9b06      	ldr	r3, [sp, #24]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	dd34      	ble.n	800752c <_dtoa_r+0x984>
 80074c2:	9b03      	ldr	r3, [sp, #12]
 80074c4:	9302      	str	r3, [sp, #8]
 80074c6:	9b02      	ldr	r3, [sp, #8]
 80074c8:	b96b      	cbnz	r3, 80074e6 <_dtoa_r+0x93e>
 80074ca:	4631      	mov	r1, r6
 80074cc:	2205      	movs	r2, #5
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 fd56 	bl	8007f80 <__multadd>
 80074d4:	4601      	mov	r1, r0
 80074d6:	4606      	mov	r6, r0
 80074d8:	ee18 0a10 	vmov	r0, s16
 80074dc:	f000 ffba 	bl	8008454 <__mcmp>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	f73f adbb 	bgt.w	800705c <_dtoa_r+0x4b4>
 80074e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e8:	9d01      	ldr	r5, [sp, #4]
 80074ea:	43db      	mvns	r3, r3
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	f04f 0800 	mov.w	r8, #0
 80074f2:	4631      	mov	r1, r6
 80074f4:	4620      	mov	r0, r4
 80074f6:	f000 fd21 	bl	8007f3c <_Bfree>
 80074fa:	2f00      	cmp	r7, #0
 80074fc:	f43f aea4 	beq.w	8007248 <_dtoa_r+0x6a0>
 8007500:	f1b8 0f00 	cmp.w	r8, #0
 8007504:	d005      	beq.n	8007512 <_dtoa_r+0x96a>
 8007506:	45b8      	cmp	r8, r7
 8007508:	d003      	beq.n	8007512 <_dtoa_r+0x96a>
 800750a:	4641      	mov	r1, r8
 800750c:	4620      	mov	r0, r4
 800750e:	f000 fd15 	bl	8007f3c <_Bfree>
 8007512:	4639      	mov	r1, r7
 8007514:	4620      	mov	r0, r4
 8007516:	f000 fd11 	bl	8007f3c <_Bfree>
 800751a:	e695      	b.n	8007248 <_dtoa_r+0x6a0>
 800751c:	2600      	movs	r6, #0
 800751e:	4637      	mov	r7, r6
 8007520:	e7e1      	b.n	80074e6 <_dtoa_r+0x93e>
 8007522:	9700      	str	r7, [sp, #0]
 8007524:	4637      	mov	r7, r6
 8007526:	e599      	b.n	800705c <_dtoa_r+0x4b4>
 8007528:	40240000 	.word	0x40240000
 800752c:	9b08      	ldr	r3, [sp, #32]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 80ca 	beq.w	80076c8 <_dtoa_r+0xb20>
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	9302      	str	r3, [sp, #8]
 8007538:	2d00      	cmp	r5, #0
 800753a:	dd05      	ble.n	8007548 <_dtoa_r+0x9a0>
 800753c:	4639      	mov	r1, r7
 800753e:	462a      	mov	r2, r5
 8007540:	4620      	mov	r0, r4
 8007542:	f000 ff17 	bl	8008374 <__lshift>
 8007546:	4607      	mov	r7, r0
 8007548:	f1b8 0f00 	cmp.w	r8, #0
 800754c:	d05b      	beq.n	8007606 <_dtoa_r+0xa5e>
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	4620      	mov	r0, r4
 8007552:	f000 fcb3 	bl	8007ebc <_Balloc>
 8007556:	4605      	mov	r5, r0
 8007558:	b928      	cbnz	r0, 8007566 <_dtoa_r+0x9be>
 800755a:	4b87      	ldr	r3, [pc, #540]	; (8007778 <_dtoa_r+0xbd0>)
 800755c:	4602      	mov	r2, r0
 800755e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007562:	f7ff bb3b 	b.w	8006bdc <_dtoa_r+0x34>
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	3202      	adds	r2, #2
 800756a:	0092      	lsls	r2, r2, #2
 800756c:	f107 010c 	add.w	r1, r7, #12
 8007570:	300c      	adds	r0, #12
 8007572:	f000 fc95 	bl	8007ea0 <memcpy>
 8007576:	2201      	movs	r2, #1
 8007578:	4629      	mov	r1, r5
 800757a:	4620      	mov	r0, r4
 800757c:	f000 fefa 	bl	8008374 <__lshift>
 8007580:	9b01      	ldr	r3, [sp, #4]
 8007582:	f103 0901 	add.w	r9, r3, #1
 8007586:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800758a:	4413      	add	r3, r2
 800758c:	9305      	str	r3, [sp, #20]
 800758e:	f00a 0301 	and.w	r3, sl, #1
 8007592:	46b8      	mov	r8, r7
 8007594:	9304      	str	r3, [sp, #16]
 8007596:	4607      	mov	r7, r0
 8007598:	4631      	mov	r1, r6
 800759a:	ee18 0a10 	vmov	r0, s16
 800759e:	f7ff fa77 	bl	8006a90 <quorem>
 80075a2:	4641      	mov	r1, r8
 80075a4:	9002      	str	r0, [sp, #8]
 80075a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80075aa:	ee18 0a10 	vmov	r0, s16
 80075ae:	f000 ff51 	bl	8008454 <__mcmp>
 80075b2:	463a      	mov	r2, r7
 80075b4:	9003      	str	r0, [sp, #12]
 80075b6:	4631      	mov	r1, r6
 80075b8:	4620      	mov	r0, r4
 80075ba:	f000 ff67 	bl	800848c <__mdiff>
 80075be:	68c2      	ldr	r2, [r0, #12]
 80075c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80075c4:	4605      	mov	r5, r0
 80075c6:	bb02      	cbnz	r2, 800760a <_dtoa_r+0xa62>
 80075c8:	4601      	mov	r1, r0
 80075ca:	ee18 0a10 	vmov	r0, s16
 80075ce:	f000 ff41 	bl	8008454 <__mcmp>
 80075d2:	4602      	mov	r2, r0
 80075d4:	4629      	mov	r1, r5
 80075d6:	4620      	mov	r0, r4
 80075d8:	9207      	str	r2, [sp, #28]
 80075da:	f000 fcaf 	bl	8007f3c <_Bfree>
 80075de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80075e2:	ea43 0102 	orr.w	r1, r3, r2
 80075e6:	9b04      	ldr	r3, [sp, #16]
 80075e8:	430b      	orrs	r3, r1
 80075ea:	464d      	mov	r5, r9
 80075ec:	d10f      	bne.n	800760e <_dtoa_r+0xa66>
 80075ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075f2:	d02a      	beq.n	800764a <_dtoa_r+0xaa2>
 80075f4:	9b03      	ldr	r3, [sp, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	dd02      	ble.n	8007600 <_dtoa_r+0xa58>
 80075fa:	9b02      	ldr	r3, [sp, #8]
 80075fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007600:	f88b a000 	strb.w	sl, [fp]
 8007604:	e775      	b.n	80074f2 <_dtoa_r+0x94a>
 8007606:	4638      	mov	r0, r7
 8007608:	e7ba      	b.n	8007580 <_dtoa_r+0x9d8>
 800760a:	2201      	movs	r2, #1
 800760c:	e7e2      	b.n	80075d4 <_dtoa_r+0xa2c>
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	db04      	blt.n	800761e <_dtoa_r+0xa76>
 8007614:	9906      	ldr	r1, [sp, #24]
 8007616:	430b      	orrs	r3, r1
 8007618:	9904      	ldr	r1, [sp, #16]
 800761a:	430b      	orrs	r3, r1
 800761c:	d122      	bne.n	8007664 <_dtoa_r+0xabc>
 800761e:	2a00      	cmp	r2, #0
 8007620:	ddee      	ble.n	8007600 <_dtoa_r+0xa58>
 8007622:	ee18 1a10 	vmov	r1, s16
 8007626:	2201      	movs	r2, #1
 8007628:	4620      	mov	r0, r4
 800762a:	f000 fea3 	bl	8008374 <__lshift>
 800762e:	4631      	mov	r1, r6
 8007630:	ee08 0a10 	vmov	s16, r0
 8007634:	f000 ff0e 	bl	8008454 <__mcmp>
 8007638:	2800      	cmp	r0, #0
 800763a:	dc03      	bgt.n	8007644 <_dtoa_r+0xa9c>
 800763c:	d1e0      	bne.n	8007600 <_dtoa_r+0xa58>
 800763e:	f01a 0f01 	tst.w	sl, #1
 8007642:	d0dd      	beq.n	8007600 <_dtoa_r+0xa58>
 8007644:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007648:	d1d7      	bne.n	80075fa <_dtoa_r+0xa52>
 800764a:	2339      	movs	r3, #57	; 0x39
 800764c:	f88b 3000 	strb.w	r3, [fp]
 8007650:	462b      	mov	r3, r5
 8007652:	461d      	mov	r5, r3
 8007654:	3b01      	subs	r3, #1
 8007656:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800765a:	2a39      	cmp	r2, #57	; 0x39
 800765c:	d071      	beq.n	8007742 <_dtoa_r+0xb9a>
 800765e:	3201      	adds	r2, #1
 8007660:	701a      	strb	r2, [r3, #0]
 8007662:	e746      	b.n	80074f2 <_dtoa_r+0x94a>
 8007664:	2a00      	cmp	r2, #0
 8007666:	dd07      	ble.n	8007678 <_dtoa_r+0xad0>
 8007668:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800766c:	d0ed      	beq.n	800764a <_dtoa_r+0xaa2>
 800766e:	f10a 0301 	add.w	r3, sl, #1
 8007672:	f88b 3000 	strb.w	r3, [fp]
 8007676:	e73c      	b.n	80074f2 <_dtoa_r+0x94a>
 8007678:	9b05      	ldr	r3, [sp, #20]
 800767a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800767e:	4599      	cmp	r9, r3
 8007680:	d047      	beq.n	8007712 <_dtoa_r+0xb6a>
 8007682:	ee18 1a10 	vmov	r1, s16
 8007686:	2300      	movs	r3, #0
 8007688:	220a      	movs	r2, #10
 800768a:	4620      	mov	r0, r4
 800768c:	f000 fc78 	bl	8007f80 <__multadd>
 8007690:	45b8      	cmp	r8, r7
 8007692:	ee08 0a10 	vmov	s16, r0
 8007696:	f04f 0300 	mov.w	r3, #0
 800769a:	f04f 020a 	mov.w	r2, #10
 800769e:	4641      	mov	r1, r8
 80076a0:	4620      	mov	r0, r4
 80076a2:	d106      	bne.n	80076b2 <_dtoa_r+0xb0a>
 80076a4:	f000 fc6c 	bl	8007f80 <__multadd>
 80076a8:	4680      	mov	r8, r0
 80076aa:	4607      	mov	r7, r0
 80076ac:	f109 0901 	add.w	r9, r9, #1
 80076b0:	e772      	b.n	8007598 <_dtoa_r+0x9f0>
 80076b2:	f000 fc65 	bl	8007f80 <__multadd>
 80076b6:	4639      	mov	r1, r7
 80076b8:	4680      	mov	r8, r0
 80076ba:	2300      	movs	r3, #0
 80076bc:	220a      	movs	r2, #10
 80076be:	4620      	mov	r0, r4
 80076c0:	f000 fc5e 	bl	8007f80 <__multadd>
 80076c4:	4607      	mov	r7, r0
 80076c6:	e7f1      	b.n	80076ac <_dtoa_r+0xb04>
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	9302      	str	r3, [sp, #8]
 80076cc:	9d01      	ldr	r5, [sp, #4]
 80076ce:	ee18 0a10 	vmov	r0, s16
 80076d2:	4631      	mov	r1, r6
 80076d4:	f7ff f9dc 	bl	8006a90 <quorem>
 80076d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80076dc:	9b01      	ldr	r3, [sp, #4]
 80076de:	f805 ab01 	strb.w	sl, [r5], #1
 80076e2:	1aea      	subs	r2, r5, r3
 80076e4:	9b02      	ldr	r3, [sp, #8]
 80076e6:	4293      	cmp	r3, r2
 80076e8:	dd09      	ble.n	80076fe <_dtoa_r+0xb56>
 80076ea:	ee18 1a10 	vmov	r1, s16
 80076ee:	2300      	movs	r3, #0
 80076f0:	220a      	movs	r2, #10
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 fc44 	bl	8007f80 <__multadd>
 80076f8:	ee08 0a10 	vmov	s16, r0
 80076fc:	e7e7      	b.n	80076ce <_dtoa_r+0xb26>
 80076fe:	9b02      	ldr	r3, [sp, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	bfc8      	it	gt
 8007704:	461d      	movgt	r5, r3
 8007706:	9b01      	ldr	r3, [sp, #4]
 8007708:	bfd8      	it	le
 800770a:	2501      	movle	r5, #1
 800770c:	441d      	add	r5, r3
 800770e:	f04f 0800 	mov.w	r8, #0
 8007712:	ee18 1a10 	vmov	r1, s16
 8007716:	2201      	movs	r2, #1
 8007718:	4620      	mov	r0, r4
 800771a:	f000 fe2b 	bl	8008374 <__lshift>
 800771e:	4631      	mov	r1, r6
 8007720:	ee08 0a10 	vmov	s16, r0
 8007724:	f000 fe96 	bl	8008454 <__mcmp>
 8007728:	2800      	cmp	r0, #0
 800772a:	dc91      	bgt.n	8007650 <_dtoa_r+0xaa8>
 800772c:	d102      	bne.n	8007734 <_dtoa_r+0xb8c>
 800772e:	f01a 0f01 	tst.w	sl, #1
 8007732:	d18d      	bne.n	8007650 <_dtoa_r+0xaa8>
 8007734:	462b      	mov	r3, r5
 8007736:	461d      	mov	r5, r3
 8007738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800773c:	2a30      	cmp	r2, #48	; 0x30
 800773e:	d0fa      	beq.n	8007736 <_dtoa_r+0xb8e>
 8007740:	e6d7      	b.n	80074f2 <_dtoa_r+0x94a>
 8007742:	9a01      	ldr	r2, [sp, #4]
 8007744:	429a      	cmp	r2, r3
 8007746:	d184      	bne.n	8007652 <_dtoa_r+0xaaa>
 8007748:	9b00      	ldr	r3, [sp, #0]
 800774a:	3301      	adds	r3, #1
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	2331      	movs	r3, #49	; 0x31
 8007750:	7013      	strb	r3, [r2, #0]
 8007752:	e6ce      	b.n	80074f2 <_dtoa_r+0x94a>
 8007754:	4b09      	ldr	r3, [pc, #36]	; (800777c <_dtoa_r+0xbd4>)
 8007756:	f7ff ba95 	b.w	8006c84 <_dtoa_r+0xdc>
 800775a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800775c:	2b00      	cmp	r3, #0
 800775e:	f47f aa6e 	bne.w	8006c3e <_dtoa_r+0x96>
 8007762:	4b07      	ldr	r3, [pc, #28]	; (8007780 <_dtoa_r+0xbd8>)
 8007764:	f7ff ba8e 	b.w	8006c84 <_dtoa_r+0xdc>
 8007768:	9b02      	ldr	r3, [sp, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	dcae      	bgt.n	80076cc <_dtoa_r+0xb24>
 800776e:	9b06      	ldr	r3, [sp, #24]
 8007770:	2b02      	cmp	r3, #2
 8007772:	f73f aea8 	bgt.w	80074c6 <_dtoa_r+0x91e>
 8007776:	e7a9      	b.n	80076cc <_dtoa_r+0xb24>
 8007778:	08009b10 	.word	0x08009b10
 800777c:	08009914 	.word	0x08009914
 8007780:	08009a91 	.word	0x08009a91

08007784 <rshift>:
 8007784:	6903      	ldr	r3, [r0, #16]
 8007786:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800778a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800778e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007792:	f100 0414 	add.w	r4, r0, #20
 8007796:	dd45      	ble.n	8007824 <rshift+0xa0>
 8007798:	f011 011f 	ands.w	r1, r1, #31
 800779c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80077a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80077a4:	d10c      	bne.n	80077c0 <rshift+0x3c>
 80077a6:	f100 0710 	add.w	r7, r0, #16
 80077aa:	4629      	mov	r1, r5
 80077ac:	42b1      	cmp	r1, r6
 80077ae:	d334      	bcc.n	800781a <rshift+0x96>
 80077b0:	1a9b      	subs	r3, r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	1eea      	subs	r2, r5, #3
 80077b6:	4296      	cmp	r6, r2
 80077b8:	bf38      	it	cc
 80077ba:	2300      	movcc	r3, #0
 80077bc:	4423      	add	r3, r4
 80077be:	e015      	b.n	80077ec <rshift+0x68>
 80077c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80077c4:	f1c1 0820 	rsb	r8, r1, #32
 80077c8:	40cf      	lsrs	r7, r1
 80077ca:	f105 0e04 	add.w	lr, r5, #4
 80077ce:	46a1      	mov	r9, r4
 80077d0:	4576      	cmp	r6, lr
 80077d2:	46f4      	mov	ip, lr
 80077d4:	d815      	bhi.n	8007802 <rshift+0x7e>
 80077d6:	1a9a      	subs	r2, r3, r2
 80077d8:	0092      	lsls	r2, r2, #2
 80077da:	3a04      	subs	r2, #4
 80077dc:	3501      	adds	r5, #1
 80077de:	42ae      	cmp	r6, r5
 80077e0:	bf38      	it	cc
 80077e2:	2200      	movcc	r2, #0
 80077e4:	18a3      	adds	r3, r4, r2
 80077e6:	50a7      	str	r7, [r4, r2]
 80077e8:	b107      	cbz	r7, 80077ec <rshift+0x68>
 80077ea:	3304      	adds	r3, #4
 80077ec:	1b1a      	subs	r2, r3, r4
 80077ee:	42a3      	cmp	r3, r4
 80077f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80077f4:	bf08      	it	eq
 80077f6:	2300      	moveq	r3, #0
 80077f8:	6102      	str	r2, [r0, #16]
 80077fa:	bf08      	it	eq
 80077fc:	6143      	streq	r3, [r0, #20]
 80077fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007802:	f8dc c000 	ldr.w	ip, [ip]
 8007806:	fa0c fc08 	lsl.w	ip, ip, r8
 800780a:	ea4c 0707 	orr.w	r7, ip, r7
 800780e:	f849 7b04 	str.w	r7, [r9], #4
 8007812:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007816:	40cf      	lsrs	r7, r1
 8007818:	e7da      	b.n	80077d0 <rshift+0x4c>
 800781a:	f851 cb04 	ldr.w	ip, [r1], #4
 800781e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007822:	e7c3      	b.n	80077ac <rshift+0x28>
 8007824:	4623      	mov	r3, r4
 8007826:	e7e1      	b.n	80077ec <rshift+0x68>

08007828 <__hexdig_fun>:
 8007828:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800782c:	2b09      	cmp	r3, #9
 800782e:	d802      	bhi.n	8007836 <__hexdig_fun+0xe>
 8007830:	3820      	subs	r0, #32
 8007832:	b2c0      	uxtb	r0, r0
 8007834:	4770      	bx	lr
 8007836:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800783a:	2b05      	cmp	r3, #5
 800783c:	d801      	bhi.n	8007842 <__hexdig_fun+0x1a>
 800783e:	3847      	subs	r0, #71	; 0x47
 8007840:	e7f7      	b.n	8007832 <__hexdig_fun+0xa>
 8007842:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007846:	2b05      	cmp	r3, #5
 8007848:	d801      	bhi.n	800784e <__hexdig_fun+0x26>
 800784a:	3827      	subs	r0, #39	; 0x27
 800784c:	e7f1      	b.n	8007832 <__hexdig_fun+0xa>
 800784e:	2000      	movs	r0, #0
 8007850:	4770      	bx	lr
	...

08007854 <__gethex>:
 8007854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007858:	ed2d 8b02 	vpush	{d8}
 800785c:	b089      	sub	sp, #36	; 0x24
 800785e:	ee08 0a10 	vmov	s16, r0
 8007862:	9304      	str	r3, [sp, #16]
 8007864:	4bb4      	ldr	r3, [pc, #720]	; (8007b38 <__gethex+0x2e4>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	9301      	str	r3, [sp, #4]
 800786a:	4618      	mov	r0, r3
 800786c:	468b      	mov	fp, r1
 800786e:	4690      	mov	r8, r2
 8007870:	f7f8 fcd6 	bl	8000220 <strlen>
 8007874:	9b01      	ldr	r3, [sp, #4]
 8007876:	f8db 2000 	ldr.w	r2, [fp]
 800787a:	4403      	add	r3, r0
 800787c:	4682      	mov	sl, r0
 800787e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007882:	9305      	str	r3, [sp, #20]
 8007884:	1c93      	adds	r3, r2, #2
 8007886:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800788a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800788e:	32fe      	adds	r2, #254	; 0xfe
 8007890:	18d1      	adds	r1, r2, r3
 8007892:	461f      	mov	r7, r3
 8007894:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007898:	9100      	str	r1, [sp, #0]
 800789a:	2830      	cmp	r0, #48	; 0x30
 800789c:	d0f8      	beq.n	8007890 <__gethex+0x3c>
 800789e:	f7ff ffc3 	bl	8007828 <__hexdig_fun>
 80078a2:	4604      	mov	r4, r0
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d13a      	bne.n	800791e <__gethex+0xca>
 80078a8:	9901      	ldr	r1, [sp, #4]
 80078aa:	4652      	mov	r2, sl
 80078ac:	4638      	mov	r0, r7
 80078ae:	f001 fa33 	bl	8008d18 <strncmp>
 80078b2:	4605      	mov	r5, r0
 80078b4:	2800      	cmp	r0, #0
 80078b6:	d168      	bne.n	800798a <__gethex+0x136>
 80078b8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80078bc:	eb07 060a 	add.w	r6, r7, sl
 80078c0:	f7ff ffb2 	bl	8007828 <__hexdig_fun>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d062      	beq.n	800798e <__gethex+0x13a>
 80078c8:	4633      	mov	r3, r6
 80078ca:	7818      	ldrb	r0, [r3, #0]
 80078cc:	2830      	cmp	r0, #48	; 0x30
 80078ce:	461f      	mov	r7, r3
 80078d0:	f103 0301 	add.w	r3, r3, #1
 80078d4:	d0f9      	beq.n	80078ca <__gethex+0x76>
 80078d6:	f7ff ffa7 	bl	8007828 <__hexdig_fun>
 80078da:	2301      	movs	r3, #1
 80078dc:	fab0 f480 	clz	r4, r0
 80078e0:	0964      	lsrs	r4, r4, #5
 80078e2:	4635      	mov	r5, r6
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	463a      	mov	r2, r7
 80078e8:	4616      	mov	r6, r2
 80078ea:	3201      	adds	r2, #1
 80078ec:	7830      	ldrb	r0, [r6, #0]
 80078ee:	f7ff ff9b 	bl	8007828 <__hexdig_fun>
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d1f8      	bne.n	80078e8 <__gethex+0x94>
 80078f6:	9901      	ldr	r1, [sp, #4]
 80078f8:	4652      	mov	r2, sl
 80078fa:	4630      	mov	r0, r6
 80078fc:	f001 fa0c 	bl	8008d18 <strncmp>
 8007900:	b980      	cbnz	r0, 8007924 <__gethex+0xd0>
 8007902:	b94d      	cbnz	r5, 8007918 <__gethex+0xc4>
 8007904:	eb06 050a 	add.w	r5, r6, sl
 8007908:	462a      	mov	r2, r5
 800790a:	4616      	mov	r6, r2
 800790c:	3201      	adds	r2, #1
 800790e:	7830      	ldrb	r0, [r6, #0]
 8007910:	f7ff ff8a 	bl	8007828 <__hexdig_fun>
 8007914:	2800      	cmp	r0, #0
 8007916:	d1f8      	bne.n	800790a <__gethex+0xb6>
 8007918:	1bad      	subs	r5, r5, r6
 800791a:	00ad      	lsls	r5, r5, #2
 800791c:	e004      	b.n	8007928 <__gethex+0xd4>
 800791e:	2400      	movs	r4, #0
 8007920:	4625      	mov	r5, r4
 8007922:	e7e0      	b.n	80078e6 <__gethex+0x92>
 8007924:	2d00      	cmp	r5, #0
 8007926:	d1f7      	bne.n	8007918 <__gethex+0xc4>
 8007928:	7833      	ldrb	r3, [r6, #0]
 800792a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800792e:	2b50      	cmp	r3, #80	; 0x50
 8007930:	d13b      	bne.n	80079aa <__gethex+0x156>
 8007932:	7873      	ldrb	r3, [r6, #1]
 8007934:	2b2b      	cmp	r3, #43	; 0x2b
 8007936:	d02c      	beq.n	8007992 <__gethex+0x13e>
 8007938:	2b2d      	cmp	r3, #45	; 0x2d
 800793a:	d02e      	beq.n	800799a <__gethex+0x146>
 800793c:	1c71      	adds	r1, r6, #1
 800793e:	f04f 0900 	mov.w	r9, #0
 8007942:	7808      	ldrb	r0, [r1, #0]
 8007944:	f7ff ff70 	bl	8007828 <__hexdig_fun>
 8007948:	1e43      	subs	r3, r0, #1
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b18      	cmp	r3, #24
 800794e:	d82c      	bhi.n	80079aa <__gethex+0x156>
 8007950:	f1a0 0210 	sub.w	r2, r0, #16
 8007954:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007958:	f7ff ff66 	bl	8007828 <__hexdig_fun>
 800795c:	1e43      	subs	r3, r0, #1
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b18      	cmp	r3, #24
 8007962:	d91d      	bls.n	80079a0 <__gethex+0x14c>
 8007964:	f1b9 0f00 	cmp.w	r9, #0
 8007968:	d000      	beq.n	800796c <__gethex+0x118>
 800796a:	4252      	negs	r2, r2
 800796c:	4415      	add	r5, r2
 800796e:	f8cb 1000 	str.w	r1, [fp]
 8007972:	b1e4      	cbz	r4, 80079ae <__gethex+0x15a>
 8007974:	9b00      	ldr	r3, [sp, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	bf14      	ite	ne
 800797a:	2700      	movne	r7, #0
 800797c:	2706      	moveq	r7, #6
 800797e:	4638      	mov	r0, r7
 8007980:	b009      	add	sp, #36	; 0x24
 8007982:	ecbd 8b02 	vpop	{d8}
 8007986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798a:	463e      	mov	r6, r7
 800798c:	4625      	mov	r5, r4
 800798e:	2401      	movs	r4, #1
 8007990:	e7ca      	b.n	8007928 <__gethex+0xd4>
 8007992:	f04f 0900 	mov.w	r9, #0
 8007996:	1cb1      	adds	r1, r6, #2
 8007998:	e7d3      	b.n	8007942 <__gethex+0xee>
 800799a:	f04f 0901 	mov.w	r9, #1
 800799e:	e7fa      	b.n	8007996 <__gethex+0x142>
 80079a0:	230a      	movs	r3, #10
 80079a2:	fb03 0202 	mla	r2, r3, r2, r0
 80079a6:	3a10      	subs	r2, #16
 80079a8:	e7d4      	b.n	8007954 <__gethex+0x100>
 80079aa:	4631      	mov	r1, r6
 80079ac:	e7df      	b.n	800796e <__gethex+0x11a>
 80079ae:	1bf3      	subs	r3, r6, r7
 80079b0:	3b01      	subs	r3, #1
 80079b2:	4621      	mov	r1, r4
 80079b4:	2b07      	cmp	r3, #7
 80079b6:	dc0b      	bgt.n	80079d0 <__gethex+0x17c>
 80079b8:	ee18 0a10 	vmov	r0, s16
 80079bc:	f000 fa7e 	bl	8007ebc <_Balloc>
 80079c0:	4604      	mov	r4, r0
 80079c2:	b940      	cbnz	r0, 80079d6 <__gethex+0x182>
 80079c4:	4b5d      	ldr	r3, [pc, #372]	; (8007b3c <__gethex+0x2e8>)
 80079c6:	4602      	mov	r2, r0
 80079c8:	21de      	movs	r1, #222	; 0xde
 80079ca:	485d      	ldr	r0, [pc, #372]	; (8007b40 <__gethex+0x2ec>)
 80079cc:	f001 f9c6 	bl	8008d5c <__assert_func>
 80079d0:	3101      	adds	r1, #1
 80079d2:	105b      	asrs	r3, r3, #1
 80079d4:	e7ee      	b.n	80079b4 <__gethex+0x160>
 80079d6:	f100 0914 	add.w	r9, r0, #20
 80079da:	f04f 0b00 	mov.w	fp, #0
 80079de:	f1ca 0301 	rsb	r3, sl, #1
 80079e2:	f8cd 9008 	str.w	r9, [sp, #8]
 80079e6:	f8cd b000 	str.w	fp, [sp]
 80079ea:	9306      	str	r3, [sp, #24]
 80079ec:	42b7      	cmp	r7, r6
 80079ee:	d340      	bcc.n	8007a72 <__gethex+0x21e>
 80079f0:	9802      	ldr	r0, [sp, #8]
 80079f2:	9b00      	ldr	r3, [sp, #0]
 80079f4:	f840 3b04 	str.w	r3, [r0], #4
 80079f8:	eba0 0009 	sub.w	r0, r0, r9
 80079fc:	1080      	asrs	r0, r0, #2
 80079fe:	0146      	lsls	r6, r0, #5
 8007a00:	6120      	str	r0, [r4, #16]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fb4c 	bl	80080a0 <__hi0bits>
 8007a08:	1a30      	subs	r0, r6, r0
 8007a0a:	f8d8 6000 	ldr.w	r6, [r8]
 8007a0e:	42b0      	cmp	r0, r6
 8007a10:	dd63      	ble.n	8007ada <__gethex+0x286>
 8007a12:	1b87      	subs	r7, r0, r6
 8007a14:	4639      	mov	r1, r7
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 fef0 	bl	80087fc <__any_on>
 8007a1c:	4682      	mov	sl, r0
 8007a1e:	b1a8      	cbz	r0, 8007a4c <__gethex+0x1f8>
 8007a20:	1e7b      	subs	r3, r7, #1
 8007a22:	1159      	asrs	r1, r3, #5
 8007a24:	f003 021f 	and.w	r2, r3, #31
 8007a28:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007a2c:	f04f 0a01 	mov.w	sl, #1
 8007a30:	fa0a f202 	lsl.w	r2, sl, r2
 8007a34:	420a      	tst	r2, r1
 8007a36:	d009      	beq.n	8007a4c <__gethex+0x1f8>
 8007a38:	4553      	cmp	r3, sl
 8007a3a:	dd05      	ble.n	8007a48 <__gethex+0x1f4>
 8007a3c:	1eb9      	subs	r1, r7, #2
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f000 fedc 	bl	80087fc <__any_on>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d145      	bne.n	8007ad4 <__gethex+0x280>
 8007a48:	f04f 0a02 	mov.w	sl, #2
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f7ff fe98 	bl	8007784 <rshift>
 8007a54:	443d      	add	r5, r7
 8007a56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a5a:	42ab      	cmp	r3, r5
 8007a5c:	da4c      	bge.n	8007af8 <__gethex+0x2a4>
 8007a5e:	ee18 0a10 	vmov	r0, s16
 8007a62:	4621      	mov	r1, r4
 8007a64:	f000 fa6a 	bl	8007f3c <_Bfree>
 8007a68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	27a3      	movs	r7, #163	; 0xa3
 8007a70:	e785      	b.n	800797e <__gethex+0x12a>
 8007a72:	1e73      	subs	r3, r6, #1
 8007a74:	9a05      	ldr	r2, [sp, #20]
 8007a76:	9303      	str	r3, [sp, #12]
 8007a78:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d019      	beq.n	8007ab4 <__gethex+0x260>
 8007a80:	f1bb 0f20 	cmp.w	fp, #32
 8007a84:	d107      	bne.n	8007a96 <__gethex+0x242>
 8007a86:	9b02      	ldr	r3, [sp, #8]
 8007a88:	9a00      	ldr	r2, [sp, #0]
 8007a8a:	f843 2b04 	str.w	r2, [r3], #4
 8007a8e:	9302      	str	r3, [sp, #8]
 8007a90:	2300      	movs	r3, #0
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	469b      	mov	fp, r3
 8007a96:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007a9a:	f7ff fec5 	bl	8007828 <__hexdig_fun>
 8007a9e:	9b00      	ldr	r3, [sp, #0]
 8007aa0:	f000 000f 	and.w	r0, r0, #15
 8007aa4:	fa00 f00b 	lsl.w	r0, r0, fp
 8007aa8:	4303      	orrs	r3, r0
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	f10b 0b04 	add.w	fp, fp, #4
 8007ab0:	9b03      	ldr	r3, [sp, #12]
 8007ab2:	e00d      	b.n	8007ad0 <__gethex+0x27c>
 8007ab4:	9b03      	ldr	r3, [sp, #12]
 8007ab6:	9a06      	ldr	r2, [sp, #24]
 8007ab8:	4413      	add	r3, r2
 8007aba:	42bb      	cmp	r3, r7
 8007abc:	d3e0      	bcc.n	8007a80 <__gethex+0x22c>
 8007abe:	4618      	mov	r0, r3
 8007ac0:	9901      	ldr	r1, [sp, #4]
 8007ac2:	9307      	str	r3, [sp, #28]
 8007ac4:	4652      	mov	r2, sl
 8007ac6:	f001 f927 	bl	8008d18 <strncmp>
 8007aca:	9b07      	ldr	r3, [sp, #28]
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d1d7      	bne.n	8007a80 <__gethex+0x22c>
 8007ad0:	461e      	mov	r6, r3
 8007ad2:	e78b      	b.n	80079ec <__gethex+0x198>
 8007ad4:	f04f 0a03 	mov.w	sl, #3
 8007ad8:	e7b8      	b.n	8007a4c <__gethex+0x1f8>
 8007ada:	da0a      	bge.n	8007af2 <__gethex+0x29e>
 8007adc:	1a37      	subs	r7, r6, r0
 8007ade:	4621      	mov	r1, r4
 8007ae0:	ee18 0a10 	vmov	r0, s16
 8007ae4:	463a      	mov	r2, r7
 8007ae6:	f000 fc45 	bl	8008374 <__lshift>
 8007aea:	1bed      	subs	r5, r5, r7
 8007aec:	4604      	mov	r4, r0
 8007aee:	f100 0914 	add.w	r9, r0, #20
 8007af2:	f04f 0a00 	mov.w	sl, #0
 8007af6:	e7ae      	b.n	8007a56 <__gethex+0x202>
 8007af8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007afc:	42a8      	cmp	r0, r5
 8007afe:	dd72      	ble.n	8007be6 <__gethex+0x392>
 8007b00:	1b45      	subs	r5, r0, r5
 8007b02:	42ae      	cmp	r6, r5
 8007b04:	dc36      	bgt.n	8007b74 <__gethex+0x320>
 8007b06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d02a      	beq.n	8007b64 <__gethex+0x310>
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d02c      	beq.n	8007b6c <__gethex+0x318>
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d11c      	bne.n	8007b50 <__gethex+0x2fc>
 8007b16:	42ae      	cmp	r6, r5
 8007b18:	d11a      	bne.n	8007b50 <__gethex+0x2fc>
 8007b1a:	2e01      	cmp	r6, #1
 8007b1c:	d112      	bne.n	8007b44 <__gethex+0x2f0>
 8007b1e:	9a04      	ldr	r2, [sp, #16]
 8007b20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	2301      	movs	r3, #1
 8007b28:	6123      	str	r3, [r4, #16]
 8007b2a:	f8c9 3000 	str.w	r3, [r9]
 8007b2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b30:	2762      	movs	r7, #98	; 0x62
 8007b32:	601c      	str	r4, [r3, #0]
 8007b34:	e723      	b.n	800797e <__gethex+0x12a>
 8007b36:	bf00      	nop
 8007b38:	08009b88 	.word	0x08009b88
 8007b3c:	08009b10 	.word	0x08009b10
 8007b40:	08009b21 	.word	0x08009b21
 8007b44:	1e71      	subs	r1, r6, #1
 8007b46:	4620      	mov	r0, r4
 8007b48:	f000 fe58 	bl	80087fc <__any_on>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d1e6      	bne.n	8007b1e <__gethex+0x2ca>
 8007b50:	ee18 0a10 	vmov	r0, s16
 8007b54:	4621      	mov	r1, r4
 8007b56:	f000 f9f1 	bl	8007f3c <_Bfree>
 8007b5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	2750      	movs	r7, #80	; 0x50
 8007b62:	e70c      	b.n	800797e <__gethex+0x12a>
 8007b64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1f2      	bne.n	8007b50 <__gethex+0x2fc>
 8007b6a:	e7d8      	b.n	8007b1e <__gethex+0x2ca>
 8007b6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1d5      	bne.n	8007b1e <__gethex+0x2ca>
 8007b72:	e7ed      	b.n	8007b50 <__gethex+0x2fc>
 8007b74:	1e6f      	subs	r7, r5, #1
 8007b76:	f1ba 0f00 	cmp.w	sl, #0
 8007b7a:	d131      	bne.n	8007be0 <__gethex+0x38c>
 8007b7c:	b127      	cbz	r7, 8007b88 <__gethex+0x334>
 8007b7e:	4639      	mov	r1, r7
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 fe3b 	bl	80087fc <__any_on>
 8007b86:	4682      	mov	sl, r0
 8007b88:	117b      	asrs	r3, r7, #5
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007b90:	f007 071f 	and.w	r7, r7, #31
 8007b94:	fa01 f707 	lsl.w	r7, r1, r7
 8007b98:	421f      	tst	r7, r3
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	bf18      	it	ne
 8007ba0:	f04a 0a02 	orrne.w	sl, sl, #2
 8007ba4:	1b76      	subs	r6, r6, r5
 8007ba6:	f7ff fded 	bl	8007784 <rshift>
 8007baa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007bae:	2702      	movs	r7, #2
 8007bb0:	f1ba 0f00 	cmp.w	sl, #0
 8007bb4:	d048      	beq.n	8007c48 <__gethex+0x3f4>
 8007bb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d015      	beq.n	8007bea <__gethex+0x396>
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d017      	beq.n	8007bf2 <__gethex+0x39e>
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d109      	bne.n	8007bda <__gethex+0x386>
 8007bc6:	f01a 0f02 	tst.w	sl, #2
 8007bca:	d006      	beq.n	8007bda <__gethex+0x386>
 8007bcc:	f8d9 0000 	ldr.w	r0, [r9]
 8007bd0:	ea4a 0a00 	orr.w	sl, sl, r0
 8007bd4:	f01a 0f01 	tst.w	sl, #1
 8007bd8:	d10e      	bne.n	8007bf8 <__gethex+0x3a4>
 8007bda:	f047 0710 	orr.w	r7, r7, #16
 8007bde:	e033      	b.n	8007c48 <__gethex+0x3f4>
 8007be0:	f04f 0a01 	mov.w	sl, #1
 8007be4:	e7d0      	b.n	8007b88 <__gethex+0x334>
 8007be6:	2701      	movs	r7, #1
 8007be8:	e7e2      	b.n	8007bb0 <__gethex+0x35c>
 8007bea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bec:	f1c3 0301 	rsb	r3, r3, #1
 8007bf0:	9315      	str	r3, [sp, #84]	; 0x54
 8007bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0f0      	beq.n	8007bda <__gethex+0x386>
 8007bf8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007bfc:	f104 0314 	add.w	r3, r4, #20
 8007c00:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007c04:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007c08:	f04f 0c00 	mov.w	ip, #0
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c12:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007c16:	d01c      	beq.n	8007c52 <__gethex+0x3fe>
 8007c18:	3201      	adds	r2, #1
 8007c1a:	6002      	str	r2, [r0, #0]
 8007c1c:	2f02      	cmp	r7, #2
 8007c1e:	f104 0314 	add.w	r3, r4, #20
 8007c22:	d13f      	bne.n	8007ca4 <__gethex+0x450>
 8007c24:	f8d8 2000 	ldr.w	r2, [r8]
 8007c28:	3a01      	subs	r2, #1
 8007c2a:	42b2      	cmp	r2, r6
 8007c2c:	d10a      	bne.n	8007c44 <__gethex+0x3f0>
 8007c2e:	1171      	asrs	r1, r6, #5
 8007c30:	2201      	movs	r2, #1
 8007c32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c36:	f006 061f 	and.w	r6, r6, #31
 8007c3a:	fa02 f606 	lsl.w	r6, r2, r6
 8007c3e:	421e      	tst	r6, r3
 8007c40:	bf18      	it	ne
 8007c42:	4617      	movne	r7, r2
 8007c44:	f047 0720 	orr.w	r7, r7, #32
 8007c48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c4a:	601c      	str	r4, [r3, #0]
 8007c4c:	9b04      	ldr	r3, [sp, #16]
 8007c4e:	601d      	str	r5, [r3, #0]
 8007c50:	e695      	b.n	800797e <__gethex+0x12a>
 8007c52:	4299      	cmp	r1, r3
 8007c54:	f843 cc04 	str.w	ip, [r3, #-4]
 8007c58:	d8d8      	bhi.n	8007c0c <__gethex+0x3b8>
 8007c5a:	68a3      	ldr	r3, [r4, #8]
 8007c5c:	459b      	cmp	fp, r3
 8007c5e:	db19      	blt.n	8007c94 <__gethex+0x440>
 8007c60:	6861      	ldr	r1, [r4, #4]
 8007c62:	ee18 0a10 	vmov	r0, s16
 8007c66:	3101      	adds	r1, #1
 8007c68:	f000 f928 	bl	8007ebc <_Balloc>
 8007c6c:	4681      	mov	r9, r0
 8007c6e:	b918      	cbnz	r0, 8007c78 <__gethex+0x424>
 8007c70:	4b1a      	ldr	r3, [pc, #104]	; (8007cdc <__gethex+0x488>)
 8007c72:	4602      	mov	r2, r0
 8007c74:	2184      	movs	r1, #132	; 0x84
 8007c76:	e6a8      	b.n	80079ca <__gethex+0x176>
 8007c78:	6922      	ldr	r2, [r4, #16]
 8007c7a:	3202      	adds	r2, #2
 8007c7c:	f104 010c 	add.w	r1, r4, #12
 8007c80:	0092      	lsls	r2, r2, #2
 8007c82:	300c      	adds	r0, #12
 8007c84:	f000 f90c 	bl	8007ea0 <memcpy>
 8007c88:	4621      	mov	r1, r4
 8007c8a:	ee18 0a10 	vmov	r0, s16
 8007c8e:	f000 f955 	bl	8007f3c <_Bfree>
 8007c92:	464c      	mov	r4, r9
 8007c94:	6923      	ldr	r3, [r4, #16]
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c9c:	6122      	str	r2, [r4, #16]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	615a      	str	r2, [r3, #20]
 8007ca2:	e7bb      	b.n	8007c1c <__gethex+0x3c8>
 8007ca4:	6922      	ldr	r2, [r4, #16]
 8007ca6:	455a      	cmp	r2, fp
 8007ca8:	dd0b      	ble.n	8007cc2 <__gethex+0x46e>
 8007caa:	2101      	movs	r1, #1
 8007cac:	4620      	mov	r0, r4
 8007cae:	f7ff fd69 	bl	8007784 <rshift>
 8007cb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cb6:	3501      	adds	r5, #1
 8007cb8:	42ab      	cmp	r3, r5
 8007cba:	f6ff aed0 	blt.w	8007a5e <__gethex+0x20a>
 8007cbe:	2701      	movs	r7, #1
 8007cc0:	e7c0      	b.n	8007c44 <__gethex+0x3f0>
 8007cc2:	f016 061f 	ands.w	r6, r6, #31
 8007cc6:	d0fa      	beq.n	8007cbe <__gethex+0x46a>
 8007cc8:	4453      	add	r3, sl
 8007cca:	f1c6 0620 	rsb	r6, r6, #32
 8007cce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007cd2:	f000 f9e5 	bl	80080a0 <__hi0bits>
 8007cd6:	42b0      	cmp	r0, r6
 8007cd8:	dbe7      	blt.n	8007caa <__gethex+0x456>
 8007cda:	e7f0      	b.n	8007cbe <__gethex+0x46a>
 8007cdc:	08009b10 	.word	0x08009b10

08007ce0 <L_shift>:
 8007ce0:	f1c2 0208 	rsb	r2, r2, #8
 8007ce4:	0092      	lsls	r2, r2, #2
 8007ce6:	b570      	push	{r4, r5, r6, lr}
 8007ce8:	f1c2 0620 	rsb	r6, r2, #32
 8007cec:	6843      	ldr	r3, [r0, #4]
 8007cee:	6804      	ldr	r4, [r0, #0]
 8007cf0:	fa03 f506 	lsl.w	r5, r3, r6
 8007cf4:	432c      	orrs	r4, r5
 8007cf6:	40d3      	lsrs	r3, r2
 8007cf8:	6004      	str	r4, [r0, #0]
 8007cfa:	f840 3f04 	str.w	r3, [r0, #4]!
 8007cfe:	4288      	cmp	r0, r1
 8007d00:	d3f4      	bcc.n	8007cec <L_shift+0xc>
 8007d02:	bd70      	pop	{r4, r5, r6, pc}

08007d04 <__match>:
 8007d04:	b530      	push	{r4, r5, lr}
 8007d06:	6803      	ldr	r3, [r0, #0]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d0e:	b914      	cbnz	r4, 8007d16 <__match+0x12>
 8007d10:	6003      	str	r3, [r0, #0]
 8007d12:	2001      	movs	r0, #1
 8007d14:	bd30      	pop	{r4, r5, pc}
 8007d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007d1e:	2d19      	cmp	r5, #25
 8007d20:	bf98      	it	ls
 8007d22:	3220      	addls	r2, #32
 8007d24:	42a2      	cmp	r2, r4
 8007d26:	d0f0      	beq.n	8007d0a <__match+0x6>
 8007d28:	2000      	movs	r0, #0
 8007d2a:	e7f3      	b.n	8007d14 <__match+0x10>

08007d2c <__hexnan>:
 8007d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d30:	680b      	ldr	r3, [r1, #0]
 8007d32:	115e      	asrs	r6, r3, #5
 8007d34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007d38:	f013 031f 	ands.w	r3, r3, #31
 8007d3c:	b087      	sub	sp, #28
 8007d3e:	bf18      	it	ne
 8007d40:	3604      	addne	r6, #4
 8007d42:	2500      	movs	r5, #0
 8007d44:	1f37      	subs	r7, r6, #4
 8007d46:	4690      	mov	r8, r2
 8007d48:	6802      	ldr	r2, [r0, #0]
 8007d4a:	9301      	str	r3, [sp, #4]
 8007d4c:	4682      	mov	sl, r0
 8007d4e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007d52:	46b9      	mov	r9, r7
 8007d54:	463c      	mov	r4, r7
 8007d56:	9502      	str	r5, [sp, #8]
 8007d58:	46ab      	mov	fp, r5
 8007d5a:	7851      	ldrb	r1, [r2, #1]
 8007d5c:	1c53      	adds	r3, r2, #1
 8007d5e:	9303      	str	r3, [sp, #12]
 8007d60:	b341      	cbz	r1, 8007db4 <__hexnan+0x88>
 8007d62:	4608      	mov	r0, r1
 8007d64:	9205      	str	r2, [sp, #20]
 8007d66:	9104      	str	r1, [sp, #16]
 8007d68:	f7ff fd5e 	bl	8007828 <__hexdig_fun>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d14f      	bne.n	8007e10 <__hexnan+0xe4>
 8007d70:	9904      	ldr	r1, [sp, #16]
 8007d72:	9a05      	ldr	r2, [sp, #20]
 8007d74:	2920      	cmp	r1, #32
 8007d76:	d818      	bhi.n	8007daa <__hexnan+0x7e>
 8007d78:	9b02      	ldr	r3, [sp, #8]
 8007d7a:	459b      	cmp	fp, r3
 8007d7c:	dd13      	ble.n	8007da6 <__hexnan+0x7a>
 8007d7e:	454c      	cmp	r4, r9
 8007d80:	d206      	bcs.n	8007d90 <__hexnan+0x64>
 8007d82:	2d07      	cmp	r5, #7
 8007d84:	dc04      	bgt.n	8007d90 <__hexnan+0x64>
 8007d86:	462a      	mov	r2, r5
 8007d88:	4649      	mov	r1, r9
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f7ff ffa8 	bl	8007ce0 <L_shift>
 8007d90:	4544      	cmp	r4, r8
 8007d92:	d950      	bls.n	8007e36 <__hexnan+0x10a>
 8007d94:	2300      	movs	r3, #0
 8007d96:	f1a4 0904 	sub.w	r9, r4, #4
 8007d9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d9e:	f8cd b008 	str.w	fp, [sp, #8]
 8007da2:	464c      	mov	r4, r9
 8007da4:	461d      	mov	r5, r3
 8007da6:	9a03      	ldr	r2, [sp, #12]
 8007da8:	e7d7      	b.n	8007d5a <__hexnan+0x2e>
 8007daa:	2929      	cmp	r1, #41	; 0x29
 8007dac:	d156      	bne.n	8007e5c <__hexnan+0x130>
 8007dae:	3202      	adds	r2, #2
 8007db0:	f8ca 2000 	str.w	r2, [sl]
 8007db4:	f1bb 0f00 	cmp.w	fp, #0
 8007db8:	d050      	beq.n	8007e5c <__hexnan+0x130>
 8007dba:	454c      	cmp	r4, r9
 8007dbc:	d206      	bcs.n	8007dcc <__hexnan+0xa0>
 8007dbe:	2d07      	cmp	r5, #7
 8007dc0:	dc04      	bgt.n	8007dcc <__hexnan+0xa0>
 8007dc2:	462a      	mov	r2, r5
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f7ff ff8a 	bl	8007ce0 <L_shift>
 8007dcc:	4544      	cmp	r4, r8
 8007dce:	d934      	bls.n	8007e3a <__hexnan+0x10e>
 8007dd0:	f1a8 0204 	sub.w	r2, r8, #4
 8007dd4:	4623      	mov	r3, r4
 8007dd6:	f853 1b04 	ldr.w	r1, [r3], #4
 8007dda:	f842 1f04 	str.w	r1, [r2, #4]!
 8007dde:	429f      	cmp	r7, r3
 8007de0:	d2f9      	bcs.n	8007dd6 <__hexnan+0xaa>
 8007de2:	1b3b      	subs	r3, r7, r4
 8007de4:	f023 0303 	bic.w	r3, r3, #3
 8007de8:	3304      	adds	r3, #4
 8007dea:	3401      	adds	r4, #1
 8007dec:	3e03      	subs	r6, #3
 8007dee:	42b4      	cmp	r4, r6
 8007df0:	bf88      	it	hi
 8007df2:	2304      	movhi	r3, #4
 8007df4:	4443      	add	r3, r8
 8007df6:	2200      	movs	r2, #0
 8007df8:	f843 2b04 	str.w	r2, [r3], #4
 8007dfc:	429f      	cmp	r7, r3
 8007dfe:	d2fb      	bcs.n	8007df8 <__hexnan+0xcc>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	b91b      	cbnz	r3, 8007e0c <__hexnan+0xe0>
 8007e04:	4547      	cmp	r7, r8
 8007e06:	d127      	bne.n	8007e58 <__hexnan+0x12c>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	603b      	str	r3, [r7, #0]
 8007e0c:	2005      	movs	r0, #5
 8007e0e:	e026      	b.n	8007e5e <__hexnan+0x132>
 8007e10:	3501      	adds	r5, #1
 8007e12:	2d08      	cmp	r5, #8
 8007e14:	f10b 0b01 	add.w	fp, fp, #1
 8007e18:	dd06      	ble.n	8007e28 <__hexnan+0xfc>
 8007e1a:	4544      	cmp	r4, r8
 8007e1c:	d9c3      	bls.n	8007da6 <__hexnan+0x7a>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e24:	2501      	movs	r5, #1
 8007e26:	3c04      	subs	r4, #4
 8007e28:	6822      	ldr	r2, [r4, #0]
 8007e2a:	f000 000f 	and.w	r0, r0, #15
 8007e2e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007e32:	6022      	str	r2, [r4, #0]
 8007e34:	e7b7      	b.n	8007da6 <__hexnan+0x7a>
 8007e36:	2508      	movs	r5, #8
 8007e38:	e7b5      	b.n	8007da6 <__hexnan+0x7a>
 8007e3a:	9b01      	ldr	r3, [sp, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d0df      	beq.n	8007e00 <__hexnan+0xd4>
 8007e40:	f04f 32ff 	mov.w	r2, #4294967295
 8007e44:	f1c3 0320 	rsb	r3, r3, #32
 8007e48:	fa22 f303 	lsr.w	r3, r2, r3
 8007e4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007e50:	401a      	ands	r2, r3
 8007e52:	f846 2c04 	str.w	r2, [r6, #-4]
 8007e56:	e7d3      	b.n	8007e00 <__hexnan+0xd4>
 8007e58:	3f04      	subs	r7, #4
 8007e5a:	e7d1      	b.n	8007e00 <__hexnan+0xd4>
 8007e5c:	2004      	movs	r0, #4
 8007e5e:	b007      	add	sp, #28
 8007e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e64 <_localeconv_r>:
 8007e64:	4800      	ldr	r0, [pc, #0]	; (8007e68 <_localeconv_r+0x4>)
 8007e66:	4770      	bx	lr
 8007e68:	20000164 	.word	0x20000164

08007e6c <malloc>:
 8007e6c:	4b02      	ldr	r3, [pc, #8]	; (8007e78 <malloc+0xc>)
 8007e6e:	4601      	mov	r1, r0
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	f000 bd67 	b.w	8008944 <_malloc_r>
 8007e76:	bf00      	nop
 8007e78:	2000000c 	.word	0x2000000c

08007e7c <__ascii_mbtowc>:
 8007e7c:	b082      	sub	sp, #8
 8007e7e:	b901      	cbnz	r1, 8007e82 <__ascii_mbtowc+0x6>
 8007e80:	a901      	add	r1, sp, #4
 8007e82:	b142      	cbz	r2, 8007e96 <__ascii_mbtowc+0x1a>
 8007e84:	b14b      	cbz	r3, 8007e9a <__ascii_mbtowc+0x1e>
 8007e86:	7813      	ldrb	r3, [r2, #0]
 8007e88:	600b      	str	r3, [r1, #0]
 8007e8a:	7812      	ldrb	r2, [r2, #0]
 8007e8c:	1e10      	subs	r0, r2, #0
 8007e8e:	bf18      	it	ne
 8007e90:	2001      	movne	r0, #1
 8007e92:	b002      	add	sp, #8
 8007e94:	4770      	bx	lr
 8007e96:	4610      	mov	r0, r2
 8007e98:	e7fb      	b.n	8007e92 <__ascii_mbtowc+0x16>
 8007e9a:	f06f 0001 	mvn.w	r0, #1
 8007e9e:	e7f8      	b.n	8007e92 <__ascii_mbtowc+0x16>

08007ea0 <memcpy>:
 8007ea0:	440a      	add	r2, r1
 8007ea2:	4291      	cmp	r1, r2
 8007ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ea8:	d100      	bne.n	8007eac <memcpy+0xc>
 8007eaa:	4770      	bx	lr
 8007eac:	b510      	push	{r4, lr}
 8007eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eb6:	4291      	cmp	r1, r2
 8007eb8:	d1f9      	bne.n	8007eae <memcpy+0xe>
 8007eba:	bd10      	pop	{r4, pc}

08007ebc <_Balloc>:
 8007ebc:	b570      	push	{r4, r5, r6, lr}
 8007ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	460d      	mov	r5, r1
 8007ec4:	b976      	cbnz	r6, 8007ee4 <_Balloc+0x28>
 8007ec6:	2010      	movs	r0, #16
 8007ec8:	f7ff ffd0 	bl	8007e6c <malloc>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	6260      	str	r0, [r4, #36]	; 0x24
 8007ed0:	b920      	cbnz	r0, 8007edc <_Balloc+0x20>
 8007ed2:	4b18      	ldr	r3, [pc, #96]	; (8007f34 <_Balloc+0x78>)
 8007ed4:	4818      	ldr	r0, [pc, #96]	; (8007f38 <_Balloc+0x7c>)
 8007ed6:	2166      	movs	r1, #102	; 0x66
 8007ed8:	f000 ff40 	bl	8008d5c <__assert_func>
 8007edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ee0:	6006      	str	r6, [r0, #0]
 8007ee2:	60c6      	str	r6, [r0, #12]
 8007ee4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ee6:	68f3      	ldr	r3, [r6, #12]
 8007ee8:	b183      	cbz	r3, 8007f0c <_Balloc+0x50>
 8007eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ef2:	b9b8      	cbnz	r0, 8007f24 <_Balloc+0x68>
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	fa01 f605 	lsl.w	r6, r1, r5
 8007efa:	1d72      	adds	r2, r6, #5
 8007efc:	0092      	lsls	r2, r2, #2
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 fc9d 	bl	800883e <_calloc_r>
 8007f04:	b160      	cbz	r0, 8007f20 <_Balloc+0x64>
 8007f06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f0a:	e00e      	b.n	8007f2a <_Balloc+0x6e>
 8007f0c:	2221      	movs	r2, #33	; 0x21
 8007f0e:	2104      	movs	r1, #4
 8007f10:	4620      	mov	r0, r4
 8007f12:	f000 fc94 	bl	800883e <_calloc_r>
 8007f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f18:	60f0      	str	r0, [r6, #12]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e4      	bne.n	8007eea <_Balloc+0x2e>
 8007f20:	2000      	movs	r0, #0
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
 8007f24:	6802      	ldr	r2, [r0, #0]
 8007f26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f30:	e7f7      	b.n	8007f22 <_Balloc+0x66>
 8007f32:	bf00      	nop
 8007f34:	08009a9e 	.word	0x08009a9e
 8007f38:	08009b9c 	.word	0x08009b9c

08007f3c <_Bfree>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f40:	4605      	mov	r5, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	b976      	cbnz	r6, 8007f64 <_Bfree+0x28>
 8007f46:	2010      	movs	r0, #16
 8007f48:	f7ff ff90 	bl	8007e6c <malloc>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	6268      	str	r0, [r5, #36]	; 0x24
 8007f50:	b920      	cbnz	r0, 8007f5c <_Bfree+0x20>
 8007f52:	4b09      	ldr	r3, [pc, #36]	; (8007f78 <_Bfree+0x3c>)
 8007f54:	4809      	ldr	r0, [pc, #36]	; (8007f7c <_Bfree+0x40>)
 8007f56:	218a      	movs	r1, #138	; 0x8a
 8007f58:	f000 ff00 	bl	8008d5c <__assert_func>
 8007f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f60:	6006      	str	r6, [r0, #0]
 8007f62:	60c6      	str	r6, [r0, #12]
 8007f64:	b13c      	cbz	r4, 8007f76 <_Bfree+0x3a>
 8007f66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f68:	6862      	ldr	r2, [r4, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f70:	6021      	str	r1, [r4, #0]
 8007f72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
 8007f78:	08009a9e 	.word	0x08009a9e
 8007f7c:	08009b9c 	.word	0x08009b9c

08007f80 <__multadd>:
 8007f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f84:	690d      	ldr	r5, [r1, #16]
 8007f86:	4607      	mov	r7, r0
 8007f88:	460c      	mov	r4, r1
 8007f8a:	461e      	mov	r6, r3
 8007f8c:	f101 0c14 	add.w	ip, r1, #20
 8007f90:	2000      	movs	r0, #0
 8007f92:	f8dc 3000 	ldr.w	r3, [ip]
 8007f96:	b299      	uxth	r1, r3
 8007f98:	fb02 6101 	mla	r1, r2, r1, r6
 8007f9c:	0c1e      	lsrs	r6, r3, #16
 8007f9e:	0c0b      	lsrs	r3, r1, #16
 8007fa0:	fb02 3306 	mla	r3, r2, r6, r3
 8007fa4:	b289      	uxth	r1, r1
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fac:	4285      	cmp	r5, r0
 8007fae:	f84c 1b04 	str.w	r1, [ip], #4
 8007fb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fb6:	dcec      	bgt.n	8007f92 <__multadd+0x12>
 8007fb8:	b30e      	cbz	r6, 8007ffe <__multadd+0x7e>
 8007fba:	68a3      	ldr	r3, [r4, #8]
 8007fbc:	42ab      	cmp	r3, r5
 8007fbe:	dc19      	bgt.n	8007ff4 <__multadd+0x74>
 8007fc0:	6861      	ldr	r1, [r4, #4]
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	3101      	adds	r1, #1
 8007fc6:	f7ff ff79 	bl	8007ebc <_Balloc>
 8007fca:	4680      	mov	r8, r0
 8007fcc:	b928      	cbnz	r0, 8007fda <__multadd+0x5a>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	4b0c      	ldr	r3, [pc, #48]	; (8008004 <__multadd+0x84>)
 8007fd2:	480d      	ldr	r0, [pc, #52]	; (8008008 <__multadd+0x88>)
 8007fd4:	21b5      	movs	r1, #181	; 0xb5
 8007fd6:	f000 fec1 	bl	8008d5c <__assert_func>
 8007fda:	6922      	ldr	r2, [r4, #16]
 8007fdc:	3202      	adds	r2, #2
 8007fde:	f104 010c 	add.w	r1, r4, #12
 8007fe2:	0092      	lsls	r2, r2, #2
 8007fe4:	300c      	adds	r0, #12
 8007fe6:	f7ff ff5b 	bl	8007ea0 <memcpy>
 8007fea:	4621      	mov	r1, r4
 8007fec:	4638      	mov	r0, r7
 8007fee:	f7ff ffa5 	bl	8007f3c <_Bfree>
 8007ff2:	4644      	mov	r4, r8
 8007ff4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ff8:	3501      	adds	r5, #1
 8007ffa:	615e      	str	r6, [r3, #20]
 8007ffc:	6125      	str	r5, [r4, #16]
 8007ffe:	4620      	mov	r0, r4
 8008000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008004:	08009b10 	.word	0x08009b10
 8008008:	08009b9c 	.word	0x08009b9c

0800800c <__s2b>:
 800800c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008010:	460c      	mov	r4, r1
 8008012:	4615      	mov	r5, r2
 8008014:	461f      	mov	r7, r3
 8008016:	2209      	movs	r2, #9
 8008018:	3308      	adds	r3, #8
 800801a:	4606      	mov	r6, r0
 800801c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008020:	2100      	movs	r1, #0
 8008022:	2201      	movs	r2, #1
 8008024:	429a      	cmp	r2, r3
 8008026:	db09      	blt.n	800803c <__s2b+0x30>
 8008028:	4630      	mov	r0, r6
 800802a:	f7ff ff47 	bl	8007ebc <_Balloc>
 800802e:	b940      	cbnz	r0, 8008042 <__s2b+0x36>
 8008030:	4602      	mov	r2, r0
 8008032:	4b19      	ldr	r3, [pc, #100]	; (8008098 <__s2b+0x8c>)
 8008034:	4819      	ldr	r0, [pc, #100]	; (800809c <__s2b+0x90>)
 8008036:	21ce      	movs	r1, #206	; 0xce
 8008038:	f000 fe90 	bl	8008d5c <__assert_func>
 800803c:	0052      	lsls	r2, r2, #1
 800803e:	3101      	adds	r1, #1
 8008040:	e7f0      	b.n	8008024 <__s2b+0x18>
 8008042:	9b08      	ldr	r3, [sp, #32]
 8008044:	6143      	str	r3, [r0, #20]
 8008046:	2d09      	cmp	r5, #9
 8008048:	f04f 0301 	mov.w	r3, #1
 800804c:	6103      	str	r3, [r0, #16]
 800804e:	dd16      	ble.n	800807e <__s2b+0x72>
 8008050:	f104 0909 	add.w	r9, r4, #9
 8008054:	46c8      	mov	r8, r9
 8008056:	442c      	add	r4, r5
 8008058:	f818 3b01 	ldrb.w	r3, [r8], #1
 800805c:	4601      	mov	r1, r0
 800805e:	3b30      	subs	r3, #48	; 0x30
 8008060:	220a      	movs	r2, #10
 8008062:	4630      	mov	r0, r6
 8008064:	f7ff ff8c 	bl	8007f80 <__multadd>
 8008068:	45a0      	cmp	r8, r4
 800806a:	d1f5      	bne.n	8008058 <__s2b+0x4c>
 800806c:	f1a5 0408 	sub.w	r4, r5, #8
 8008070:	444c      	add	r4, r9
 8008072:	1b2d      	subs	r5, r5, r4
 8008074:	1963      	adds	r3, r4, r5
 8008076:	42bb      	cmp	r3, r7
 8008078:	db04      	blt.n	8008084 <__s2b+0x78>
 800807a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800807e:	340a      	adds	r4, #10
 8008080:	2509      	movs	r5, #9
 8008082:	e7f6      	b.n	8008072 <__s2b+0x66>
 8008084:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008088:	4601      	mov	r1, r0
 800808a:	3b30      	subs	r3, #48	; 0x30
 800808c:	220a      	movs	r2, #10
 800808e:	4630      	mov	r0, r6
 8008090:	f7ff ff76 	bl	8007f80 <__multadd>
 8008094:	e7ee      	b.n	8008074 <__s2b+0x68>
 8008096:	bf00      	nop
 8008098:	08009b10 	.word	0x08009b10
 800809c:	08009b9c 	.word	0x08009b9c

080080a0 <__hi0bits>:
 80080a0:	0c03      	lsrs	r3, r0, #16
 80080a2:	041b      	lsls	r3, r3, #16
 80080a4:	b9d3      	cbnz	r3, 80080dc <__hi0bits+0x3c>
 80080a6:	0400      	lsls	r0, r0, #16
 80080a8:	2310      	movs	r3, #16
 80080aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80080ae:	bf04      	itt	eq
 80080b0:	0200      	lsleq	r0, r0, #8
 80080b2:	3308      	addeq	r3, #8
 80080b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80080b8:	bf04      	itt	eq
 80080ba:	0100      	lsleq	r0, r0, #4
 80080bc:	3304      	addeq	r3, #4
 80080be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80080c2:	bf04      	itt	eq
 80080c4:	0080      	lsleq	r0, r0, #2
 80080c6:	3302      	addeq	r3, #2
 80080c8:	2800      	cmp	r0, #0
 80080ca:	db05      	blt.n	80080d8 <__hi0bits+0x38>
 80080cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80080d0:	f103 0301 	add.w	r3, r3, #1
 80080d4:	bf08      	it	eq
 80080d6:	2320      	moveq	r3, #32
 80080d8:	4618      	mov	r0, r3
 80080da:	4770      	bx	lr
 80080dc:	2300      	movs	r3, #0
 80080de:	e7e4      	b.n	80080aa <__hi0bits+0xa>

080080e0 <__lo0bits>:
 80080e0:	6803      	ldr	r3, [r0, #0]
 80080e2:	f013 0207 	ands.w	r2, r3, #7
 80080e6:	4601      	mov	r1, r0
 80080e8:	d00b      	beq.n	8008102 <__lo0bits+0x22>
 80080ea:	07da      	lsls	r2, r3, #31
 80080ec:	d423      	bmi.n	8008136 <__lo0bits+0x56>
 80080ee:	0798      	lsls	r0, r3, #30
 80080f0:	bf49      	itett	mi
 80080f2:	085b      	lsrmi	r3, r3, #1
 80080f4:	089b      	lsrpl	r3, r3, #2
 80080f6:	2001      	movmi	r0, #1
 80080f8:	600b      	strmi	r3, [r1, #0]
 80080fa:	bf5c      	itt	pl
 80080fc:	600b      	strpl	r3, [r1, #0]
 80080fe:	2002      	movpl	r0, #2
 8008100:	4770      	bx	lr
 8008102:	b298      	uxth	r0, r3
 8008104:	b9a8      	cbnz	r0, 8008132 <__lo0bits+0x52>
 8008106:	0c1b      	lsrs	r3, r3, #16
 8008108:	2010      	movs	r0, #16
 800810a:	b2da      	uxtb	r2, r3
 800810c:	b90a      	cbnz	r2, 8008112 <__lo0bits+0x32>
 800810e:	3008      	adds	r0, #8
 8008110:	0a1b      	lsrs	r3, r3, #8
 8008112:	071a      	lsls	r2, r3, #28
 8008114:	bf04      	itt	eq
 8008116:	091b      	lsreq	r3, r3, #4
 8008118:	3004      	addeq	r0, #4
 800811a:	079a      	lsls	r2, r3, #30
 800811c:	bf04      	itt	eq
 800811e:	089b      	lsreq	r3, r3, #2
 8008120:	3002      	addeq	r0, #2
 8008122:	07da      	lsls	r2, r3, #31
 8008124:	d403      	bmi.n	800812e <__lo0bits+0x4e>
 8008126:	085b      	lsrs	r3, r3, #1
 8008128:	f100 0001 	add.w	r0, r0, #1
 800812c:	d005      	beq.n	800813a <__lo0bits+0x5a>
 800812e:	600b      	str	r3, [r1, #0]
 8008130:	4770      	bx	lr
 8008132:	4610      	mov	r0, r2
 8008134:	e7e9      	b.n	800810a <__lo0bits+0x2a>
 8008136:	2000      	movs	r0, #0
 8008138:	4770      	bx	lr
 800813a:	2020      	movs	r0, #32
 800813c:	4770      	bx	lr
	...

08008140 <__i2b>:
 8008140:	b510      	push	{r4, lr}
 8008142:	460c      	mov	r4, r1
 8008144:	2101      	movs	r1, #1
 8008146:	f7ff feb9 	bl	8007ebc <_Balloc>
 800814a:	4602      	mov	r2, r0
 800814c:	b928      	cbnz	r0, 800815a <__i2b+0x1a>
 800814e:	4b05      	ldr	r3, [pc, #20]	; (8008164 <__i2b+0x24>)
 8008150:	4805      	ldr	r0, [pc, #20]	; (8008168 <__i2b+0x28>)
 8008152:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008156:	f000 fe01 	bl	8008d5c <__assert_func>
 800815a:	2301      	movs	r3, #1
 800815c:	6144      	str	r4, [r0, #20]
 800815e:	6103      	str	r3, [r0, #16]
 8008160:	bd10      	pop	{r4, pc}
 8008162:	bf00      	nop
 8008164:	08009b10 	.word	0x08009b10
 8008168:	08009b9c 	.word	0x08009b9c

0800816c <__multiply>:
 800816c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008170:	4691      	mov	r9, r2
 8008172:	690a      	ldr	r2, [r1, #16]
 8008174:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008178:	429a      	cmp	r2, r3
 800817a:	bfb8      	it	lt
 800817c:	460b      	movlt	r3, r1
 800817e:	460c      	mov	r4, r1
 8008180:	bfbc      	itt	lt
 8008182:	464c      	movlt	r4, r9
 8008184:	4699      	movlt	r9, r3
 8008186:	6927      	ldr	r7, [r4, #16]
 8008188:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800818c:	68a3      	ldr	r3, [r4, #8]
 800818e:	6861      	ldr	r1, [r4, #4]
 8008190:	eb07 060a 	add.w	r6, r7, sl
 8008194:	42b3      	cmp	r3, r6
 8008196:	b085      	sub	sp, #20
 8008198:	bfb8      	it	lt
 800819a:	3101      	addlt	r1, #1
 800819c:	f7ff fe8e 	bl	8007ebc <_Balloc>
 80081a0:	b930      	cbnz	r0, 80081b0 <__multiply+0x44>
 80081a2:	4602      	mov	r2, r0
 80081a4:	4b44      	ldr	r3, [pc, #272]	; (80082b8 <__multiply+0x14c>)
 80081a6:	4845      	ldr	r0, [pc, #276]	; (80082bc <__multiply+0x150>)
 80081a8:	f240 115d 	movw	r1, #349	; 0x15d
 80081ac:	f000 fdd6 	bl	8008d5c <__assert_func>
 80081b0:	f100 0514 	add.w	r5, r0, #20
 80081b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081b8:	462b      	mov	r3, r5
 80081ba:	2200      	movs	r2, #0
 80081bc:	4543      	cmp	r3, r8
 80081be:	d321      	bcc.n	8008204 <__multiply+0x98>
 80081c0:	f104 0314 	add.w	r3, r4, #20
 80081c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80081c8:	f109 0314 	add.w	r3, r9, #20
 80081cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80081d0:	9202      	str	r2, [sp, #8]
 80081d2:	1b3a      	subs	r2, r7, r4
 80081d4:	3a15      	subs	r2, #21
 80081d6:	f022 0203 	bic.w	r2, r2, #3
 80081da:	3204      	adds	r2, #4
 80081dc:	f104 0115 	add.w	r1, r4, #21
 80081e0:	428f      	cmp	r7, r1
 80081e2:	bf38      	it	cc
 80081e4:	2204      	movcc	r2, #4
 80081e6:	9201      	str	r2, [sp, #4]
 80081e8:	9a02      	ldr	r2, [sp, #8]
 80081ea:	9303      	str	r3, [sp, #12]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d80c      	bhi.n	800820a <__multiply+0x9e>
 80081f0:	2e00      	cmp	r6, #0
 80081f2:	dd03      	ble.n	80081fc <__multiply+0x90>
 80081f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d05a      	beq.n	80082b2 <__multiply+0x146>
 80081fc:	6106      	str	r6, [r0, #16]
 80081fe:	b005      	add	sp, #20
 8008200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008204:	f843 2b04 	str.w	r2, [r3], #4
 8008208:	e7d8      	b.n	80081bc <__multiply+0x50>
 800820a:	f8b3 a000 	ldrh.w	sl, [r3]
 800820e:	f1ba 0f00 	cmp.w	sl, #0
 8008212:	d024      	beq.n	800825e <__multiply+0xf2>
 8008214:	f104 0e14 	add.w	lr, r4, #20
 8008218:	46a9      	mov	r9, r5
 800821a:	f04f 0c00 	mov.w	ip, #0
 800821e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008222:	f8d9 1000 	ldr.w	r1, [r9]
 8008226:	fa1f fb82 	uxth.w	fp, r2
 800822a:	b289      	uxth	r1, r1
 800822c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008230:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008234:	f8d9 2000 	ldr.w	r2, [r9]
 8008238:	4461      	add	r1, ip
 800823a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800823e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008242:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008246:	b289      	uxth	r1, r1
 8008248:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800824c:	4577      	cmp	r7, lr
 800824e:	f849 1b04 	str.w	r1, [r9], #4
 8008252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008256:	d8e2      	bhi.n	800821e <__multiply+0xb2>
 8008258:	9a01      	ldr	r2, [sp, #4]
 800825a:	f845 c002 	str.w	ip, [r5, r2]
 800825e:	9a03      	ldr	r2, [sp, #12]
 8008260:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008264:	3304      	adds	r3, #4
 8008266:	f1b9 0f00 	cmp.w	r9, #0
 800826a:	d020      	beq.n	80082ae <__multiply+0x142>
 800826c:	6829      	ldr	r1, [r5, #0]
 800826e:	f104 0c14 	add.w	ip, r4, #20
 8008272:	46ae      	mov	lr, r5
 8008274:	f04f 0a00 	mov.w	sl, #0
 8008278:	f8bc b000 	ldrh.w	fp, [ip]
 800827c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008280:	fb09 220b 	mla	r2, r9, fp, r2
 8008284:	4492      	add	sl, r2
 8008286:	b289      	uxth	r1, r1
 8008288:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800828c:	f84e 1b04 	str.w	r1, [lr], #4
 8008290:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008294:	f8be 1000 	ldrh.w	r1, [lr]
 8008298:	0c12      	lsrs	r2, r2, #16
 800829a:	fb09 1102 	mla	r1, r9, r2, r1
 800829e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80082a2:	4567      	cmp	r7, ip
 80082a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082a8:	d8e6      	bhi.n	8008278 <__multiply+0x10c>
 80082aa:	9a01      	ldr	r2, [sp, #4]
 80082ac:	50a9      	str	r1, [r5, r2]
 80082ae:	3504      	adds	r5, #4
 80082b0:	e79a      	b.n	80081e8 <__multiply+0x7c>
 80082b2:	3e01      	subs	r6, #1
 80082b4:	e79c      	b.n	80081f0 <__multiply+0x84>
 80082b6:	bf00      	nop
 80082b8:	08009b10 	.word	0x08009b10
 80082bc:	08009b9c 	.word	0x08009b9c

080082c0 <__pow5mult>:
 80082c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c4:	4615      	mov	r5, r2
 80082c6:	f012 0203 	ands.w	r2, r2, #3
 80082ca:	4606      	mov	r6, r0
 80082cc:	460f      	mov	r7, r1
 80082ce:	d007      	beq.n	80082e0 <__pow5mult+0x20>
 80082d0:	4c25      	ldr	r4, [pc, #148]	; (8008368 <__pow5mult+0xa8>)
 80082d2:	3a01      	subs	r2, #1
 80082d4:	2300      	movs	r3, #0
 80082d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082da:	f7ff fe51 	bl	8007f80 <__multadd>
 80082de:	4607      	mov	r7, r0
 80082e0:	10ad      	asrs	r5, r5, #2
 80082e2:	d03d      	beq.n	8008360 <__pow5mult+0xa0>
 80082e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80082e6:	b97c      	cbnz	r4, 8008308 <__pow5mult+0x48>
 80082e8:	2010      	movs	r0, #16
 80082ea:	f7ff fdbf 	bl	8007e6c <malloc>
 80082ee:	4602      	mov	r2, r0
 80082f0:	6270      	str	r0, [r6, #36]	; 0x24
 80082f2:	b928      	cbnz	r0, 8008300 <__pow5mult+0x40>
 80082f4:	4b1d      	ldr	r3, [pc, #116]	; (800836c <__pow5mult+0xac>)
 80082f6:	481e      	ldr	r0, [pc, #120]	; (8008370 <__pow5mult+0xb0>)
 80082f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80082fc:	f000 fd2e 	bl	8008d5c <__assert_func>
 8008300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008304:	6004      	str	r4, [r0, #0]
 8008306:	60c4      	str	r4, [r0, #12]
 8008308:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800830c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008310:	b94c      	cbnz	r4, 8008326 <__pow5mult+0x66>
 8008312:	f240 2171 	movw	r1, #625	; 0x271
 8008316:	4630      	mov	r0, r6
 8008318:	f7ff ff12 	bl	8008140 <__i2b>
 800831c:	2300      	movs	r3, #0
 800831e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008322:	4604      	mov	r4, r0
 8008324:	6003      	str	r3, [r0, #0]
 8008326:	f04f 0900 	mov.w	r9, #0
 800832a:	07eb      	lsls	r3, r5, #31
 800832c:	d50a      	bpl.n	8008344 <__pow5mult+0x84>
 800832e:	4639      	mov	r1, r7
 8008330:	4622      	mov	r2, r4
 8008332:	4630      	mov	r0, r6
 8008334:	f7ff ff1a 	bl	800816c <__multiply>
 8008338:	4639      	mov	r1, r7
 800833a:	4680      	mov	r8, r0
 800833c:	4630      	mov	r0, r6
 800833e:	f7ff fdfd 	bl	8007f3c <_Bfree>
 8008342:	4647      	mov	r7, r8
 8008344:	106d      	asrs	r5, r5, #1
 8008346:	d00b      	beq.n	8008360 <__pow5mult+0xa0>
 8008348:	6820      	ldr	r0, [r4, #0]
 800834a:	b938      	cbnz	r0, 800835c <__pow5mult+0x9c>
 800834c:	4622      	mov	r2, r4
 800834e:	4621      	mov	r1, r4
 8008350:	4630      	mov	r0, r6
 8008352:	f7ff ff0b 	bl	800816c <__multiply>
 8008356:	6020      	str	r0, [r4, #0]
 8008358:	f8c0 9000 	str.w	r9, [r0]
 800835c:	4604      	mov	r4, r0
 800835e:	e7e4      	b.n	800832a <__pow5mult+0x6a>
 8008360:	4638      	mov	r0, r7
 8008362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008366:	bf00      	nop
 8008368:	08009ce8 	.word	0x08009ce8
 800836c:	08009a9e 	.word	0x08009a9e
 8008370:	08009b9c 	.word	0x08009b9c

08008374 <__lshift>:
 8008374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008378:	460c      	mov	r4, r1
 800837a:	6849      	ldr	r1, [r1, #4]
 800837c:	6923      	ldr	r3, [r4, #16]
 800837e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008382:	68a3      	ldr	r3, [r4, #8]
 8008384:	4607      	mov	r7, r0
 8008386:	4691      	mov	r9, r2
 8008388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800838c:	f108 0601 	add.w	r6, r8, #1
 8008390:	42b3      	cmp	r3, r6
 8008392:	db0b      	blt.n	80083ac <__lshift+0x38>
 8008394:	4638      	mov	r0, r7
 8008396:	f7ff fd91 	bl	8007ebc <_Balloc>
 800839a:	4605      	mov	r5, r0
 800839c:	b948      	cbnz	r0, 80083b2 <__lshift+0x3e>
 800839e:	4602      	mov	r2, r0
 80083a0:	4b2a      	ldr	r3, [pc, #168]	; (800844c <__lshift+0xd8>)
 80083a2:	482b      	ldr	r0, [pc, #172]	; (8008450 <__lshift+0xdc>)
 80083a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80083a8:	f000 fcd8 	bl	8008d5c <__assert_func>
 80083ac:	3101      	adds	r1, #1
 80083ae:	005b      	lsls	r3, r3, #1
 80083b0:	e7ee      	b.n	8008390 <__lshift+0x1c>
 80083b2:	2300      	movs	r3, #0
 80083b4:	f100 0114 	add.w	r1, r0, #20
 80083b8:	f100 0210 	add.w	r2, r0, #16
 80083bc:	4618      	mov	r0, r3
 80083be:	4553      	cmp	r3, sl
 80083c0:	db37      	blt.n	8008432 <__lshift+0xbe>
 80083c2:	6920      	ldr	r0, [r4, #16]
 80083c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083c8:	f104 0314 	add.w	r3, r4, #20
 80083cc:	f019 091f 	ands.w	r9, r9, #31
 80083d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80083d8:	d02f      	beq.n	800843a <__lshift+0xc6>
 80083da:	f1c9 0e20 	rsb	lr, r9, #32
 80083de:	468a      	mov	sl, r1
 80083e0:	f04f 0c00 	mov.w	ip, #0
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	fa02 f209 	lsl.w	r2, r2, r9
 80083ea:	ea42 020c 	orr.w	r2, r2, ip
 80083ee:	f84a 2b04 	str.w	r2, [sl], #4
 80083f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80083f6:	4298      	cmp	r0, r3
 80083f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80083fc:	d8f2      	bhi.n	80083e4 <__lshift+0x70>
 80083fe:	1b03      	subs	r3, r0, r4
 8008400:	3b15      	subs	r3, #21
 8008402:	f023 0303 	bic.w	r3, r3, #3
 8008406:	3304      	adds	r3, #4
 8008408:	f104 0215 	add.w	r2, r4, #21
 800840c:	4290      	cmp	r0, r2
 800840e:	bf38      	it	cc
 8008410:	2304      	movcc	r3, #4
 8008412:	f841 c003 	str.w	ip, [r1, r3]
 8008416:	f1bc 0f00 	cmp.w	ip, #0
 800841a:	d001      	beq.n	8008420 <__lshift+0xac>
 800841c:	f108 0602 	add.w	r6, r8, #2
 8008420:	3e01      	subs	r6, #1
 8008422:	4638      	mov	r0, r7
 8008424:	612e      	str	r6, [r5, #16]
 8008426:	4621      	mov	r1, r4
 8008428:	f7ff fd88 	bl	8007f3c <_Bfree>
 800842c:	4628      	mov	r0, r5
 800842e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008432:	f842 0f04 	str.w	r0, [r2, #4]!
 8008436:	3301      	adds	r3, #1
 8008438:	e7c1      	b.n	80083be <__lshift+0x4a>
 800843a:	3904      	subs	r1, #4
 800843c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008440:	f841 2f04 	str.w	r2, [r1, #4]!
 8008444:	4298      	cmp	r0, r3
 8008446:	d8f9      	bhi.n	800843c <__lshift+0xc8>
 8008448:	e7ea      	b.n	8008420 <__lshift+0xac>
 800844a:	bf00      	nop
 800844c:	08009b10 	.word	0x08009b10
 8008450:	08009b9c 	.word	0x08009b9c

08008454 <__mcmp>:
 8008454:	b530      	push	{r4, r5, lr}
 8008456:	6902      	ldr	r2, [r0, #16]
 8008458:	690c      	ldr	r4, [r1, #16]
 800845a:	1b12      	subs	r2, r2, r4
 800845c:	d10e      	bne.n	800847c <__mcmp+0x28>
 800845e:	f100 0314 	add.w	r3, r0, #20
 8008462:	3114      	adds	r1, #20
 8008464:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008468:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800846c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008470:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008474:	42a5      	cmp	r5, r4
 8008476:	d003      	beq.n	8008480 <__mcmp+0x2c>
 8008478:	d305      	bcc.n	8008486 <__mcmp+0x32>
 800847a:	2201      	movs	r2, #1
 800847c:	4610      	mov	r0, r2
 800847e:	bd30      	pop	{r4, r5, pc}
 8008480:	4283      	cmp	r3, r0
 8008482:	d3f3      	bcc.n	800846c <__mcmp+0x18>
 8008484:	e7fa      	b.n	800847c <__mcmp+0x28>
 8008486:	f04f 32ff 	mov.w	r2, #4294967295
 800848a:	e7f7      	b.n	800847c <__mcmp+0x28>

0800848c <__mdiff>:
 800848c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008490:	460c      	mov	r4, r1
 8008492:	4606      	mov	r6, r0
 8008494:	4611      	mov	r1, r2
 8008496:	4620      	mov	r0, r4
 8008498:	4690      	mov	r8, r2
 800849a:	f7ff ffdb 	bl	8008454 <__mcmp>
 800849e:	1e05      	subs	r5, r0, #0
 80084a0:	d110      	bne.n	80084c4 <__mdiff+0x38>
 80084a2:	4629      	mov	r1, r5
 80084a4:	4630      	mov	r0, r6
 80084a6:	f7ff fd09 	bl	8007ebc <_Balloc>
 80084aa:	b930      	cbnz	r0, 80084ba <__mdiff+0x2e>
 80084ac:	4b3a      	ldr	r3, [pc, #232]	; (8008598 <__mdiff+0x10c>)
 80084ae:	4602      	mov	r2, r0
 80084b0:	f240 2132 	movw	r1, #562	; 0x232
 80084b4:	4839      	ldr	r0, [pc, #228]	; (800859c <__mdiff+0x110>)
 80084b6:	f000 fc51 	bl	8008d5c <__assert_func>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c4:	bfa4      	itt	ge
 80084c6:	4643      	movge	r3, r8
 80084c8:	46a0      	movge	r8, r4
 80084ca:	4630      	mov	r0, r6
 80084cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80084d0:	bfa6      	itte	ge
 80084d2:	461c      	movge	r4, r3
 80084d4:	2500      	movge	r5, #0
 80084d6:	2501      	movlt	r5, #1
 80084d8:	f7ff fcf0 	bl	8007ebc <_Balloc>
 80084dc:	b920      	cbnz	r0, 80084e8 <__mdiff+0x5c>
 80084de:	4b2e      	ldr	r3, [pc, #184]	; (8008598 <__mdiff+0x10c>)
 80084e0:	4602      	mov	r2, r0
 80084e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80084e6:	e7e5      	b.n	80084b4 <__mdiff+0x28>
 80084e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80084ec:	6926      	ldr	r6, [r4, #16]
 80084ee:	60c5      	str	r5, [r0, #12]
 80084f0:	f104 0914 	add.w	r9, r4, #20
 80084f4:	f108 0514 	add.w	r5, r8, #20
 80084f8:	f100 0e14 	add.w	lr, r0, #20
 80084fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008500:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008504:	f108 0210 	add.w	r2, r8, #16
 8008508:	46f2      	mov	sl, lr
 800850a:	2100      	movs	r1, #0
 800850c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008510:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008514:	fa1f f883 	uxth.w	r8, r3
 8008518:	fa11 f18b 	uxtah	r1, r1, fp
 800851c:	0c1b      	lsrs	r3, r3, #16
 800851e:	eba1 0808 	sub.w	r8, r1, r8
 8008522:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008526:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800852a:	fa1f f888 	uxth.w	r8, r8
 800852e:	1419      	asrs	r1, r3, #16
 8008530:	454e      	cmp	r6, r9
 8008532:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008536:	f84a 3b04 	str.w	r3, [sl], #4
 800853a:	d8e7      	bhi.n	800850c <__mdiff+0x80>
 800853c:	1b33      	subs	r3, r6, r4
 800853e:	3b15      	subs	r3, #21
 8008540:	f023 0303 	bic.w	r3, r3, #3
 8008544:	3304      	adds	r3, #4
 8008546:	3415      	adds	r4, #21
 8008548:	42a6      	cmp	r6, r4
 800854a:	bf38      	it	cc
 800854c:	2304      	movcc	r3, #4
 800854e:	441d      	add	r5, r3
 8008550:	4473      	add	r3, lr
 8008552:	469e      	mov	lr, r3
 8008554:	462e      	mov	r6, r5
 8008556:	4566      	cmp	r6, ip
 8008558:	d30e      	bcc.n	8008578 <__mdiff+0xec>
 800855a:	f10c 0203 	add.w	r2, ip, #3
 800855e:	1b52      	subs	r2, r2, r5
 8008560:	f022 0203 	bic.w	r2, r2, #3
 8008564:	3d03      	subs	r5, #3
 8008566:	45ac      	cmp	ip, r5
 8008568:	bf38      	it	cc
 800856a:	2200      	movcc	r2, #0
 800856c:	441a      	add	r2, r3
 800856e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008572:	b17b      	cbz	r3, 8008594 <__mdiff+0x108>
 8008574:	6107      	str	r7, [r0, #16]
 8008576:	e7a3      	b.n	80084c0 <__mdiff+0x34>
 8008578:	f856 8b04 	ldr.w	r8, [r6], #4
 800857c:	fa11 f288 	uxtah	r2, r1, r8
 8008580:	1414      	asrs	r4, r2, #16
 8008582:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008586:	b292      	uxth	r2, r2
 8008588:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800858c:	f84e 2b04 	str.w	r2, [lr], #4
 8008590:	1421      	asrs	r1, r4, #16
 8008592:	e7e0      	b.n	8008556 <__mdiff+0xca>
 8008594:	3f01      	subs	r7, #1
 8008596:	e7ea      	b.n	800856e <__mdiff+0xe2>
 8008598:	08009b10 	.word	0x08009b10
 800859c:	08009b9c 	.word	0x08009b9c

080085a0 <__ulp>:
 80085a0:	b082      	sub	sp, #8
 80085a2:	ed8d 0b00 	vstr	d0, [sp]
 80085a6:	9b01      	ldr	r3, [sp, #4]
 80085a8:	4912      	ldr	r1, [pc, #72]	; (80085f4 <__ulp+0x54>)
 80085aa:	4019      	ands	r1, r3
 80085ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80085b0:	2900      	cmp	r1, #0
 80085b2:	dd05      	ble.n	80085c0 <__ulp+0x20>
 80085b4:	2200      	movs	r2, #0
 80085b6:	460b      	mov	r3, r1
 80085b8:	ec43 2b10 	vmov	d0, r2, r3
 80085bc:	b002      	add	sp, #8
 80085be:	4770      	bx	lr
 80085c0:	4249      	negs	r1, r1
 80085c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80085c6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80085ca:	f04f 0200 	mov.w	r2, #0
 80085ce:	f04f 0300 	mov.w	r3, #0
 80085d2:	da04      	bge.n	80085de <__ulp+0x3e>
 80085d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80085d8:	fa41 f300 	asr.w	r3, r1, r0
 80085dc:	e7ec      	b.n	80085b8 <__ulp+0x18>
 80085de:	f1a0 0114 	sub.w	r1, r0, #20
 80085e2:	291e      	cmp	r1, #30
 80085e4:	bfda      	itte	le
 80085e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80085ea:	fa20 f101 	lsrle.w	r1, r0, r1
 80085ee:	2101      	movgt	r1, #1
 80085f0:	460a      	mov	r2, r1
 80085f2:	e7e1      	b.n	80085b8 <__ulp+0x18>
 80085f4:	7ff00000 	.word	0x7ff00000

080085f8 <__b2d>:
 80085f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fa:	6905      	ldr	r5, [r0, #16]
 80085fc:	f100 0714 	add.w	r7, r0, #20
 8008600:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008604:	1f2e      	subs	r6, r5, #4
 8008606:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800860a:	4620      	mov	r0, r4
 800860c:	f7ff fd48 	bl	80080a0 <__hi0bits>
 8008610:	f1c0 0320 	rsb	r3, r0, #32
 8008614:	280a      	cmp	r0, #10
 8008616:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008694 <__b2d+0x9c>
 800861a:	600b      	str	r3, [r1, #0]
 800861c:	dc14      	bgt.n	8008648 <__b2d+0x50>
 800861e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008622:	fa24 f10e 	lsr.w	r1, r4, lr
 8008626:	42b7      	cmp	r7, r6
 8008628:	ea41 030c 	orr.w	r3, r1, ip
 800862c:	bf34      	ite	cc
 800862e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008632:	2100      	movcs	r1, #0
 8008634:	3015      	adds	r0, #21
 8008636:	fa04 f000 	lsl.w	r0, r4, r0
 800863a:	fa21 f10e 	lsr.w	r1, r1, lr
 800863e:	ea40 0201 	orr.w	r2, r0, r1
 8008642:	ec43 2b10 	vmov	d0, r2, r3
 8008646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008648:	42b7      	cmp	r7, r6
 800864a:	bf3a      	itte	cc
 800864c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008650:	f1a5 0608 	subcc.w	r6, r5, #8
 8008654:	2100      	movcs	r1, #0
 8008656:	380b      	subs	r0, #11
 8008658:	d017      	beq.n	800868a <__b2d+0x92>
 800865a:	f1c0 0c20 	rsb	ip, r0, #32
 800865e:	fa04 f500 	lsl.w	r5, r4, r0
 8008662:	42be      	cmp	r6, r7
 8008664:	fa21 f40c 	lsr.w	r4, r1, ip
 8008668:	ea45 0504 	orr.w	r5, r5, r4
 800866c:	bf8c      	ite	hi
 800866e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008672:	2400      	movls	r4, #0
 8008674:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008678:	fa01 f000 	lsl.w	r0, r1, r0
 800867c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008680:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008684:	ea40 0204 	orr.w	r2, r0, r4
 8008688:	e7db      	b.n	8008642 <__b2d+0x4a>
 800868a:	ea44 030c 	orr.w	r3, r4, ip
 800868e:	460a      	mov	r2, r1
 8008690:	e7d7      	b.n	8008642 <__b2d+0x4a>
 8008692:	bf00      	nop
 8008694:	3ff00000 	.word	0x3ff00000

08008698 <__d2b>:
 8008698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800869c:	4689      	mov	r9, r1
 800869e:	2101      	movs	r1, #1
 80086a0:	ec57 6b10 	vmov	r6, r7, d0
 80086a4:	4690      	mov	r8, r2
 80086a6:	f7ff fc09 	bl	8007ebc <_Balloc>
 80086aa:	4604      	mov	r4, r0
 80086ac:	b930      	cbnz	r0, 80086bc <__d2b+0x24>
 80086ae:	4602      	mov	r2, r0
 80086b0:	4b25      	ldr	r3, [pc, #148]	; (8008748 <__d2b+0xb0>)
 80086b2:	4826      	ldr	r0, [pc, #152]	; (800874c <__d2b+0xb4>)
 80086b4:	f240 310a 	movw	r1, #778	; 0x30a
 80086b8:	f000 fb50 	bl	8008d5c <__assert_func>
 80086bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086c4:	bb35      	cbnz	r5, 8008714 <__d2b+0x7c>
 80086c6:	2e00      	cmp	r6, #0
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	d028      	beq.n	800871e <__d2b+0x86>
 80086cc:	4668      	mov	r0, sp
 80086ce:	9600      	str	r6, [sp, #0]
 80086d0:	f7ff fd06 	bl	80080e0 <__lo0bits>
 80086d4:	9900      	ldr	r1, [sp, #0]
 80086d6:	b300      	cbz	r0, 800871a <__d2b+0x82>
 80086d8:	9a01      	ldr	r2, [sp, #4]
 80086da:	f1c0 0320 	rsb	r3, r0, #32
 80086de:	fa02 f303 	lsl.w	r3, r2, r3
 80086e2:	430b      	orrs	r3, r1
 80086e4:	40c2      	lsrs	r2, r0
 80086e6:	6163      	str	r3, [r4, #20]
 80086e8:	9201      	str	r2, [sp, #4]
 80086ea:	9b01      	ldr	r3, [sp, #4]
 80086ec:	61a3      	str	r3, [r4, #24]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bf14      	ite	ne
 80086f2:	2202      	movne	r2, #2
 80086f4:	2201      	moveq	r2, #1
 80086f6:	6122      	str	r2, [r4, #16]
 80086f8:	b1d5      	cbz	r5, 8008730 <__d2b+0x98>
 80086fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086fe:	4405      	add	r5, r0
 8008700:	f8c9 5000 	str.w	r5, [r9]
 8008704:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008708:	f8c8 0000 	str.w	r0, [r8]
 800870c:	4620      	mov	r0, r4
 800870e:	b003      	add	sp, #12
 8008710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008718:	e7d5      	b.n	80086c6 <__d2b+0x2e>
 800871a:	6161      	str	r1, [r4, #20]
 800871c:	e7e5      	b.n	80086ea <__d2b+0x52>
 800871e:	a801      	add	r0, sp, #4
 8008720:	f7ff fcde 	bl	80080e0 <__lo0bits>
 8008724:	9b01      	ldr	r3, [sp, #4]
 8008726:	6163      	str	r3, [r4, #20]
 8008728:	2201      	movs	r2, #1
 800872a:	6122      	str	r2, [r4, #16]
 800872c:	3020      	adds	r0, #32
 800872e:	e7e3      	b.n	80086f8 <__d2b+0x60>
 8008730:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008734:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008738:	f8c9 0000 	str.w	r0, [r9]
 800873c:	6918      	ldr	r0, [r3, #16]
 800873e:	f7ff fcaf 	bl	80080a0 <__hi0bits>
 8008742:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008746:	e7df      	b.n	8008708 <__d2b+0x70>
 8008748:	08009b10 	.word	0x08009b10
 800874c:	08009b9c 	.word	0x08009b9c

08008750 <__ratio>:
 8008750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	4688      	mov	r8, r1
 8008756:	4669      	mov	r1, sp
 8008758:	4681      	mov	r9, r0
 800875a:	f7ff ff4d 	bl	80085f8 <__b2d>
 800875e:	a901      	add	r1, sp, #4
 8008760:	4640      	mov	r0, r8
 8008762:	ec55 4b10 	vmov	r4, r5, d0
 8008766:	f7ff ff47 	bl	80085f8 <__b2d>
 800876a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800876e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008772:	eba3 0c02 	sub.w	ip, r3, r2
 8008776:	e9dd 3200 	ldrd	r3, r2, [sp]
 800877a:	1a9b      	subs	r3, r3, r2
 800877c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008780:	ec51 0b10 	vmov	r0, r1, d0
 8008784:	2b00      	cmp	r3, #0
 8008786:	bfd6      	itet	le
 8008788:	460a      	movle	r2, r1
 800878a:	462a      	movgt	r2, r5
 800878c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008790:	468b      	mov	fp, r1
 8008792:	462f      	mov	r7, r5
 8008794:	bfd4      	ite	le
 8008796:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800879a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800879e:	4620      	mov	r0, r4
 80087a0:	ee10 2a10 	vmov	r2, s0
 80087a4:	465b      	mov	r3, fp
 80087a6:	4639      	mov	r1, r7
 80087a8:	f7f8 f878 	bl	800089c <__aeabi_ddiv>
 80087ac:	ec41 0b10 	vmov	d0, r0, r1
 80087b0:	b003      	add	sp, #12
 80087b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087b6 <__copybits>:
 80087b6:	3901      	subs	r1, #1
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	1149      	asrs	r1, r1, #5
 80087bc:	6914      	ldr	r4, [r2, #16]
 80087be:	3101      	adds	r1, #1
 80087c0:	f102 0314 	add.w	r3, r2, #20
 80087c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80087c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80087cc:	1f05      	subs	r5, r0, #4
 80087ce:	42a3      	cmp	r3, r4
 80087d0:	d30c      	bcc.n	80087ec <__copybits+0x36>
 80087d2:	1aa3      	subs	r3, r4, r2
 80087d4:	3b11      	subs	r3, #17
 80087d6:	f023 0303 	bic.w	r3, r3, #3
 80087da:	3211      	adds	r2, #17
 80087dc:	42a2      	cmp	r2, r4
 80087de:	bf88      	it	hi
 80087e0:	2300      	movhi	r3, #0
 80087e2:	4418      	add	r0, r3
 80087e4:	2300      	movs	r3, #0
 80087e6:	4288      	cmp	r0, r1
 80087e8:	d305      	bcc.n	80087f6 <__copybits+0x40>
 80087ea:	bd70      	pop	{r4, r5, r6, pc}
 80087ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80087f0:	f845 6f04 	str.w	r6, [r5, #4]!
 80087f4:	e7eb      	b.n	80087ce <__copybits+0x18>
 80087f6:	f840 3b04 	str.w	r3, [r0], #4
 80087fa:	e7f4      	b.n	80087e6 <__copybits+0x30>

080087fc <__any_on>:
 80087fc:	f100 0214 	add.w	r2, r0, #20
 8008800:	6900      	ldr	r0, [r0, #16]
 8008802:	114b      	asrs	r3, r1, #5
 8008804:	4298      	cmp	r0, r3
 8008806:	b510      	push	{r4, lr}
 8008808:	db11      	blt.n	800882e <__any_on+0x32>
 800880a:	dd0a      	ble.n	8008822 <__any_on+0x26>
 800880c:	f011 011f 	ands.w	r1, r1, #31
 8008810:	d007      	beq.n	8008822 <__any_on+0x26>
 8008812:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008816:	fa24 f001 	lsr.w	r0, r4, r1
 800881a:	fa00 f101 	lsl.w	r1, r0, r1
 800881e:	428c      	cmp	r4, r1
 8008820:	d10b      	bne.n	800883a <__any_on+0x3e>
 8008822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008826:	4293      	cmp	r3, r2
 8008828:	d803      	bhi.n	8008832 <__any_on+0x36>
 800882a:	2000      	movs	r0, #0
 800882c:	bd10      	pop	{r4, pc}
 800882e:	4603      	mov	r3, r0
 8008830:	e7f7      	b.n	8008822 <__any_on+0x26>
 8008832:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008836:	2900      	cmp	r1, #0
 8008838:	d0f5      	beq.n	8008826 <__any_on+0x2a>
 800883a:	2001      	movs	r0, #1
 800883c:	e7f6      	b.n	800882c <__any_on+0x30>

0800883e <_calloc_r>:
 800883e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008840:	fba1 2402 	umull	r2, r4, r1, r2
 8008844:	b94c      	cbnz	r4, 800885a <_calloc_r+0x1c>
 8008846:	4611      	mov	r1, r2
 8008848:	9201      	str	r2, [sp, #4]
 800884a:	f000 f87b 	bl	8008944 <_malloc_r>
 800884e:	9a01      	ldr	r2, [sp, #4]
 8008850:	4605      	mov	r5, r0
 8008852:	b930      	cbnz	r0, 8008862 <_calloc_r+0x24>
 8008854:	4628      	mov	r0, r5
 8008856:	b003      	add	sp, #12
 8008858:	bd30      	pop	{r4, r5, pc}
 800885a:	220c      	movs	r2, #12
 800885c:	6002      	str	r2, [r0, #0]
 800885e:	2500      	movs	r5, #0
 8008860:	e7f8      	b.n	8008854 <_calloc_r+0x16>
 8008862:	4621      	mov	r1, r4
 8008864:	f7fc fbc0 	bl	8004fe8 <memset>
 8008868:	e7f4      	b.n	8008854 <_calloc_r+0x16>
	...

0800886c <_free_r>:
 800886c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800886e:	2900      	cmp	r1, #0
 8008870:	d044      	beq.n	80088fc <_free_r+0x90>
 8008872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008876:	9001      	str	r0, [sp, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	f1a1 0404 	sub.w	r4, r1, #4
 800887e:	bfb8      	it	lt
 8008880:	18e4      	addlt	r4, r4, r3
 8008882:	f000 fab5 	bl	8008df0 <__malloc_lock>
 8008886:	4a1e      	ldr	r2, [pc, #120]	; (8008900 <_free_r+0x94>)
 8008888:	9801      	ldr	r0, [sp, #4]
 800888a:	6813      	ldr	r3, [r2, #0]
 800888c:	b933      	cbnz	r3, 800889c <_free_r+0x30>
 800888e:	6063      	str	r3, [r4, #4]
 8008890:	6014      	str	r4, [r2, #0]
 8008892:	b003      	add	sp, #12
 8008894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008898:	f000 bab0 	b.w	8008dfc <__malloc_unlock>
 800889c:	42a3      	cmp	r3, r4
 800889e:	d908      	bls.n	80088b2 <_free_r+0x46>
 80088a0:	6825      	ldr	r5, [r4, #0]
 80088a2:	1961      	adds	r1, r4, r5
 80088a4:	428b      	cmp	r3, r1
 80088a6:	bf01      	itttt	eq
 80088a8:	6819      	ldreq	r1, [r3, #0]
 80088aa:	685b      	ldreq	r3, [r3, #4]
 80088ac:	1949      	addeq	r1, r1, r5
 80088ae:	6021      	streq	r1, [r4, #0]
 80088b0:	e7ed      	b.n	800888e <_free_r+0x22>
 80088b2:	461a      	mov	r2, r3
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	b10b      	cbz	r3, 80088bc <_free_r+0x50>
 80088b8:	42a3      	cmp	r3, r4
 80088ba:	d9fa      	bls.n	80088b2 <_free_r+0x46>
 80088bc:	6811      	ldr	r1, [r2, #0]
 80088be:	1855      	adds	r5, r2, r1
 80088c0:	42a5      	cmp	r5, r4
 80088c2:	d10b      	bne.n	80088dc <_free_r+0x70>
 80088c4:	6824      	ldr	r4, [r4, #0]
 80088c6:	4421      	add	r1, r4
 80088c8:	1854      	adds	r4, r2, r1
 80088ca:	42a3      	cmp	r3, r4
 80088cc:	6011      	str	r1, [r2, #0]
 80088ce:	d1e0      	bne.n	8008892 <_free_r+0x26>
 80088d0:	681c      	ldr	r4, [r3, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	6053      	str	r3, [r2, #4]
 80088d6:	4421      	add	r1, r4
 80088d8:	6011      	str	r1, [r2, #0]
 80088da:	e7da      	b.n	8008892 <_free_r+0x26>
 80088dc:	d902      	bls.n	80088e4 <_free_r+0x78>
 80088de:	230c      	movs	r3, #12
 80088e0:	6003      	str	r3, [r0, #0]
 80088e2:	e7d6      	b.n	8008892 <_free_r+0x26>
 80088e4:	6825      	ldr	r5, [r4, #0]
 80088e6:	1961      	adds	r1, r4, r5
 80088e8:	428b      	cmp	r3, r1
 80088ea:	bf04      	itt	eq
 80088ec:	6819      	ldreq	r1, [r3, #0]
 80088ee:	685b      	ldreq	r3, [r3, #4]
 80088f0:	6063      	str	r3, [r4, #4]
 80088f2:	bf04      	itt	eq
 80088f4:	1949      	addeq	r1, r1, r5
 80088f6:	6021      	streq	r1, [r4, #0]
 80088f8:	6054      	str	r4, [r2, #4]
 80088fa:	e7ca      	b.n	8008892 <_free_r+0x26>
 80088fc:	b003      	add	sp, #12
 80088fe:	bd30      	pop	{r4, r5, pc}
 8008900:	20000458 	.word	0x20000458

08008904 <sbrk_aligned>:
 8008904:	b570      	push	{r4, r5, r6, lr}
 8008906:	4e0e      	ldr	r6, [pc, #56]	; (8008940 <sbrk_aligned+0x3c>)
 8008908:	460c      	mov	r4, r1
 800890a:	6831      	ldr	r1, [r6, #0]
 800890c:	4605      	mov	r5, r0
 800890e:	b911      	cbnz	r1, 8008916 <sbrk_aligned+0x12>
 8008910:	f000 f9f2 	bl	8008cf8 <_sbrk_r>
 8008914:	6030      	str	r0, [r6, #0]
 8008916:	4621      	mov	r1, r4
 8008918:	4628      	mov	r0, r5
 800891a:	f000 f9ed 	bl	8008cf8 <_sbrk_r>
 800891e:	1c43      	adds	r3, r0, #1
 8008920:	d00a      	beq.n	8008938 <sbrk_aligned+0x34>
 8008922:	1cc4      	adds	r4, r0, #3
 8008924:	f024 0403 	bic.w	r4, r4, #3
 8008928:	42a0      	cmp	r0, r4
 800892a:	d007      	beq.n	800893c <sbrk_aligned+0x38>
 800892c:	1a21      	subs	r1, r4, r0
 800892e:	4628      	mov	r0, r5
 8008930:	f000 f9e2 	bl	8008cf8 <_sbrk_r>
 8008934:	3001      	adds	r0, #1
 8008936:	d101      	bne.n	800893c <sbrk_aligned+0x38>
 8008938:	f04f 34ff 	mov.w	r4, #4294967295
 800893c:	4620      	mov	r0, r4
 800893e:	bd70      	pop	{r4, r5, r6, pc}
 8008940:	2000045c 	.word	0x2000045c

08008944 <_malloc_r>:
 8008944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008948:	1ccd      	adds	r5, r1, #3
 800894a:	f025 0503 	bic.w	r5, r5, #3
 800894e:	3508      	adds	r5, #8
 8008950:	2d0c      	cmp	r5, #12
 8008952:	bf38      	it	cc
 8008954:	250c      	movcc	r5, #12
 8008956:	2d00      	cmp	r5, #0
 8008958:	4607      	mov	r7, r0
 800895a:	db01      	blt.n	8008960 <_malloc_r+0x1c>
 800895c:	42a9      	cmp	r1, r5
 800895e:	d905      	bls.n	800896c <_malloc_r+0x28>
 8008960:	230c      	movs	r3, #12
 8008962:	603b      	str	r3, [r7, #0]
 8008964:	2600      	movs	r6, #0
 8008966:	4630      	mov	r0, r6
 8008968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800896c:	4e2e      	ldr	r6, [pc, #184]	; (8008a28 <_malloc_r+0xe4>)
 800896e:	f000 fa3f 	bl	8008df0 <__malloc_lock>
 8008972:	6833      	ldr	r3, [r6, #0]
 8008974:	461c      	mov	r4, r3
 8008976:	bb34      	cbnz	r4, 80089c6 <_malloc_r+0x82>
 8008978:	4629      	mov	r1, r5
 800897a:	4638      	mov	r0, r7
 800897c:	f7ff ffc2 	bl	8008904 <sbrk_aligned>
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	4604      	mov	r4, r0
 8008984:	d14d      	bne.n	8008a22 <_malloc_r+0xde>
 8008986:	6834      	ldr	r4, [r6, #0]
 8008988:	4626      	mov	r6, r4
 800898a:	2e00      	cmp	r6, #0
 800898c:	d140      	bne.n	8008a10 <_malloc_r+0xcc>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	4631      	mov	r1, r6
 8008992:	4638      	mov	r0, r7
 8008994:	eb04 0803 	add.w	r8, r4, r3
 8008998:	f000 f9ae 	bl	8008cf8 <_sbrk_r>
 800899c:	4580      	cmp	r8, r0
 800899e:	d13a      	bne.n	8008a16 <_malloc_r+0xd2>
 80089a0:	6821      	ldr	r1, [r4, #0]
 80089a2:	3503      	adds	r5, #3
 80089a4:	1a6d      	subs	r5, r5, r1
 80089a6:	f025 0503 	bic.w	r5, r5, #3
 80089aa:	3508      	adds	r5, #8
 80089ac:	2d0c      	cmp	r5, #12
 80089ae:	bf38      	it	cc
 80089b0:	250c      	movcc	r5, #12
 80089b2:	4629      	mov	r1, r5
 80089b4:	4638      	mov	r0, r7
 80089b6:	f7ff ffa5 	bl	8008904 <sbrk_aligned>
 80089ba:	3001      	adds	r0, #1
 80089bc:	d02b      	beq.n	8008a16 <_malloc_r+0xd2>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	442b      	add	r3, r5
 80089c2:	6023      	str	r3, [r4, #0]
 80089c4:	e00e      	b.n	80089e4 <_malloc_r+0xa0>
 80089c6:	6822      	ldr	r2, [r4, #0]
 80089c8:	1b52      	subs	r2, r2, r5
 80089ca:	d41e      	bmi.n	8008a0a <_malloc_r+0xc6>
 80089cc:	2a0b      	cmp	r2, #11
 80089ce:	d916      	bls.n	80089fe <_malloc_r+0xba>
 80089d0:	1961      	adds	r1, r4, r5
 80089d2:	42a3      	cmp	r3, r4
 80089d4:	6025      	str	r5, [r4, #0]
 80089d6:	bf18      	it	ne
 80089d8:	6059      	strne	r1, [r3, #4]
 80089da:	6863      	ldr	r3, [r4, #4]
 80089dc:	bf08      	it	eq
 80089de:	6031      	streq	r1, [r6, #0]
 80089e0:	5162      	str	r2, [r4, r5]
 80089e2:	604b      	str	r3, [r1, #4]
 80089e4:	4638      	mov	r0, r7
 80089e6:	f104 060b 	add.w	r6, r4, #11
 80089ea:	f000 fa07 	bl	8008dfc <__malloc_unlock>
 80089ee:	f026 0607 	bic.w	r6, r6, #7
 80089f2:	1d23      	adds	r3, r4, #4
 80089f4:	1af2      	subs	r2, r6, r3
 80089f6:	d0b6      	beq.n	8008966 <_malloc_r+0x22>
 80089f8:	1b9b      	subs	r3, r3, r6
 80089fa:	50a3      	str	r3, [r4, r2]
 80089fc:	e7b3      	b.n	8008966 <_malloc_r+0x22>
 80089fe:	6862      	ldr	r2, [r4, #4]
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	bf0c      	ite	eq
 8008a04:	6032      	streq	r2, [r6, #0]
 8008a06:	605a      	strne	r2, [r3, #4]
 8008a08:	e7ec      	b.n	80089e4 <_malloc_r+0xa0>
 8008a0a:	4623      	mov	r3, r4
 8008a0c:	6864      	ldr	r4, [r4, #4]
 8008a0e:	e7b2      	b.n	8008976 <_malloc_r+0x32>
 8008a10:	4634      	mov	r4, r6
 8008a12:	6876      	ldr	r6, [r6, #4]
 8008a14:	e7b9      	b.n	800898a <_malloc_r+0x46>
 8008a16:	230c      	movs	r3, #12
 8008a18:	603b      	str	r3, [r7, #0]
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	f000 f9ee 	bl	8008dfc <__malloc_unlock>
 8008a20:	e7a1      	b.n	8008966 <_malloc_r+0x22>
 8008a22:	6025      	str	r5, [r4, #0]
 8008a24:	e7de      	b.n	80089e4 <_malloc_r+0xa0>
 8008a26:	bf00      	nop
 8008a28:	20000458 	.word	0x20000458

08008a2c <__ssputs_r>:
 8008a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a30:	688e      	ldr	r6, [r1, #8]
 8008a32:	429e      	cmp	r6, r3
 8008a34:	4682      	mov	sl, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	4690      	mov	r8, r2
 8008a3a:	461f      	mov	r7, r3
 8008a3c:	d838      	bhi.n	8008ab0 <__ssputs_r+0x84>
 8008a3e:	898a      	ldrh	r2, [r1, #12]
 8008a40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a44:	d032      	beq.n	8008aac <__ssputs_r+0x80>
 8008a46:	6825      	ldr	r5, [r4, #0]
 8008a48:	6909      	ldr	r1, [r1, #16]
 8008a4a:	eba5 0901 	sub.w	r9, r5, r1
 8008a4e:	6965      	ldr	r5, [r4, #20]
 8008a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a58:	3301      	adds	r3, #1
 8008a5a:	444b      	add	r3, r9
 8008a5c:	106d      	asrs	r5, r5, #1
 8008a5e:	429d      	cmp	r5, r3
 8008a60:	bf38      	it	cc
 8008a62:	461d      	movcc	r5, r3
 8008a64:	0553      	lsls	r3, r2, #21
 8008a66:	d531      	bpl.n	8008acc <__ssputs_r+0xa0>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	f7ff ff6b 	bl	8008944 <_malloc_r>
 8008a6e:	4606      	mov	r6, r0
 8008a70:	b950      	cbnz	r0, 8008a88 <__ssputs_r+0x5c>
 8008a72:	230c      	movs	r3, #12
 8008a74:	f8ca 3000 	str.w	r3, [sl]
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a7e:	81a3      	strh	r3, [r4, #12]
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a88:	6921      	ldr	r1, [r4, #16]
 8008a8a:	464a      	mov	r2, r9
 8008a8c:	f7ff fa08 	bl	8007ea0 <memcpy>
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9a:	81a3      	strh	r3, [r4, #12]
 8008a9c:	6126      	str	r6, [r4, #16]
 8008a9e:	6165      	str	r5, [r4, #20]
 8008aa0:	444e      	add	r6, r9
 8008aa2:	eba5 0509 	sub.w	r5, r5, r9
 8008aa6:	6026      	str	r6, [r4, #0]
 8008aa8:	60a5      	str	r5, [r4, #8]
 8008aaa:	463e      	mov	r6, r7
 8008aac:	42be      	cmp	r6, r7
 8008aae:	d900      	bls.n	8008ab2 <__ssputs_r+0x86>
 8008ab0:	463e      	mov	r6, r7
 8008ab2:	6820      	ldr	r0, [r4, #0]
 8008ab4:	4632      	mov	r2, r6
 8008ab6:	4641      	mov	r1, r8
 8008ab8:	f000 f980 	bl	8008dbc <memmove>
 8008abc:	68a3      	ldr	r3, [r4, #8]
 8008abe:	1b9b      	subs	r3, r3, r6
 8008ac0:	60a3      	str	r3, [r4, #8]
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	4433      	add	r3, r6
 8008ac6:	6023      	str	r3, [r4, #0]
 8008ac8:	2000      	movs	r0, #0
 8008aca:	e7db      	b.n	8008a84 <__ssputs_r+0x58>
 8008acc:	462a      	mov	r2, r5
 8008ace:	f000 f99b 	bl	8008e08 <_realloc_r>
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d1e1      	bne.n	8008a9c <__ssputs_r+0x70>
 8008ad8:	6921      	ldr	r1, [r4, #16]
 8008ada:	4650      	mov	r0, sl
 8008adc:	f7ff fec6 	bl	800886c <_free_r>
 8008ae0:	e7c7      	b.n	8008a72 <__ssputs_r+0x46>
	...

08008ae4 <_svfiprintf_r>:
 8008ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	4698      	mov	r8, r3
 8008aea:	898b      	ldrh	r3, [r1, #12]
 8008aec:	061b      	lsls	r3, r3, #24
 8008aee:	b09d      	sub	sp, #116	; 0x74
 8008af0:	4607      	mov	r7, r0
 8008af2:	460d      	mov	r5, r1
 8008af4:	4614      	mov	r4, r2
 8008af6:	d50e      	bpl.n	8008b16 <_svfiprintf_r+0x32>
 8008af8:	690b      	ldr	r3, [r1, #16]
 8008afa:	b963      	cbnz	r3, 8008b16 <_svfiprintf_r+0x32>
 8008afc:	2140      	movs	r1, #64	; 0x40
 8008afe:	f7ff ff21 	bl	8008944 <_malloc_r>
 8008b02:	6028      	str	r0, [r5, #0]
 8008b04:	6128      	str	r0, [r5, #16]
 8008b06:	b920      	cbnz	r0, 8008b12 <_svfiprintf_r+0x2e>
 8008b08:	230c      	movs	r3, #12
 8008b0a:	603b      	str	r3, [r7, #0]
 8008b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b10:	e0d1      	b.n	8008cb6 <_svfiprintf_r+0x1d2>
 8008b12:	2340      	movs	r3, #64	; 0x40
 8008b14:	616b      	str	r3, [r5, #20]
 8008b16:	2300      	movs	r3, #0
 8008b18:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1a:	2320      	movs	r3, #32
 8008b1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b24:	2330      	movs	r3, #48	; 0x30
 8008b26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008cd0 <_svfiprintf_r+0x1ec>
 8008b2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b2e:	f04f 0901 	mov.w	r9, #1
 8008b32:	4623      	mov	r3, r4
 8008b34:	469a      	mov	sl, r3
 8008b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b3a:	b10a      	cbz	r2, 8008b40 <_svfiprintf_r+0x5c>
 8008b3c:	2a25      	cmp	r2, #37	; 0x25
 8008b3e:	d1f9      	bne.n	8008b34 <_svfiprintf_r+0x50>
 8008b40:	ebba 0b04 	subs.w	fp, sl, r4
 8008b44:	d00b      	beq.n	8008b5e <_svfiprintf_r+0x7a>
 8008b46:	465b      	mov	r3, fp
 8008b48:	4622      	mov	r2, r4
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	f7ff ff6d 	bl	8008a2c <__ssputs_r>
 8008b52:	3001      	adds	r0, #1
 8008b54:	f000 80aa 	beq.w	8008cac <_svfiprintf_r+0x1c8>
 8008b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b5a:	445a      	add	r2, fp
 8008b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 80a2 	beq.w	8008cac <_svfiprintf_r+0x1c8>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b72:	f10a 0a01 	add.w	sl, sl, #1
 8008b76:	9304      	str	r3, [sp, #16]
 8008b78:	9307      	str	r3, [sp, #28]
 8008b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8008b80:	4654      	mov	r4, sl
 8008b82:	2205      	movs	r2, #5
 8008b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b88:	4851      	ldr	r0, [pc, #324]	; (8008cd0 <_svfiprintf_r+0x1ec>)
 8008b8a:	f7f7 fb51 	bl	8000230 <memchr>
 8008b8e:	9a04      	ldr	r2, [sp, #16]
 8008b90:	b9d8      	cbnz	r0, 8008bca <_svfiprintf_r+0xe6>
 8008b92:	06d0      	lsls	r0, r2, #27
 8008b94:	bf44      	itt	mi
 8008b96:	2320      	movmi	r3, #32
 8008b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b9c:	0711      	lsls	r1, r2, #28
 8008b9e:	bf44      	itt	mi
 8008ba0:	232b      	movmi	r3, #43	; 0x2b
 8008ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8008baa:	2b2a      	cmp	r3, #42	; 0x2a
 8008bac:	d015      	beq.n	8008bda <_svfiprintf_r+0xf6>
 8008bae:	9a07      	ldr	r2, [sp, #28]
 8008bb0:	4654      	mov	r4, sl
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	f04f 0c0a 	mov.w	ip, #10
 8008bb8:	4621      	mov	r1, r4
 8008bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bbe:	3b30      	subs	r3, #48	; 0x30
 8008bc0:	2b09      	cmp	r3, #9
 8008bc2:	d94e      	bls.n	8008c62 <_svfiprintf_r+0x17e>
 8008bc4:	b1b0      	cbz	r0, 8008bf4 <_svfiprintf_r+0x110>
 8008bc6:	9207      	str	r2, [sp, #28]
 8008bc8:	e014      	b.n	8008bf4 <_svfiprintf_r+0x110>
 8008bca:	eba0 0308 	sub.w	r3, r0, r8
 8008bce:	fa09 f303 	lsl.w	r3, r9, r3
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	9304      	str	r3, [sp, #16]
 8008bd6:	46a2      	mov	sl, r4
 8008bd8:	e7d2      	b.n	8008b80 <_svfiprintf_r+0x9c>
 8008bda:	9b03      	ldr	r3, [sp, #12]
 8008bdc:	1d19      	adds	r1, r3, #4
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	9103      	str	r1, [sp, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	bfbb      	ittet	lt
 8008be6:	425b      	neglt	r3, r3
 8008be8:	f042 0202 	orrlt.w	r2, r2, #2
 8008bec:	9307      	strge	r3, [sp, #28]
 8008bee:	9307      	strlt	r3, [sp, #28]
 8008bf0:	bfb8      	it	lt
 8008bf2:	9204      	strlt	r2, [sp, #16]
 8008bf4:	7823      	ldrb	r3, [r4, #0]
 8008bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8008bf8:	d10c      	bne.n	8008c14 <_svfiprintf_r+0x130>
 8008bfa:	7863      	ldrb	r3, [r4, #1]
 8008bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8008bfe:	d135      	bne.n	8008c6c <_svfiprintf_r+0x188>
 8008c00:	9b03      	ldr	r3, [sp, #12]
 8008c02:	1d1a      	adds	r2, r3, #4
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	9203      	str	r2, [sp, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	bfb8      	it	lt
 8008c0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c10:	3402      	adds	r4, #2
 8008c12:	9305      	str	r3, [sp, #20]
 8008c14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ce0 <_svfiprintf_r+0x1fc>
 8008c18:	7821      	ldrb	r1, [r4, #0]
 8008c1a:	2203      	movs	r2, #3
 8008c1c:	4650      	mov	r0, sl
 8008c1e:	f7f7 fb07 	bl	8000230 <memchr>
 8008c22:	b140      	cbz	r0, 8008c36 <_svfiprintf_r+0x152>
 8008c24:	2340      	movs	r3, #64	; 0x40
 8008c26:	eba0 000a 	sub.w	r0, r0, sl
 8008c2a:	fa03 f000 	lsl.w	r0, r3, r0
 8008c2e:	9b04      	ldr	r3, [sp, #16]
 8008c30:	4303      	orrs	r3, r0
 8008c32:	3401      	adds	r4, #1
 8008c34:	9304      	str	r3, [sp, #16]
 8008c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c3a:	4826      	ldr	r0, [pc, #152]	; (8008cd4 <_svfiprintf_r+0x1f0>)
 8008c3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c40:	2206      	movs	r2, #6
 8008c42:	f7f7 faf5 	bl	8000230 <memchr>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d038      	beq.n	8008cbc <_svfiprintf_r+0x1d8>
 8008c4a:	4b23      	ldr	r3, [pc, #140]	; (8008cd8 <_svfiprintf_r+0x1f4>)
 8008c4c:	bb1b      	cbnz	r3, 8008c96 <_svfiprintf_r+0x1b2>
 8008c4e:	9b03      	ldr	r3, [sp, #12]
 8008c50:	3307      	adds	r3, #7
 8008c52:	f023 0307 	bic.w	r3, r3, #7
 8008c56:	3308      	adds	r3, #8
 8008c58:	9303      	str	r3, [sp, #12]
 8008c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c5c:	4433      	add	r3, r6
 8008c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c60:	e767      	b.n	8008b32 <_svfiprintf_r+0x4e>
 8008c62:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c66:	460c      	mov	r4, r1
 8008c68:	2001      	movs	r0, #1
 8008c6a:	e7a5      	b.n	8008bb8 <_svfiprintf_r+0xd4>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	3401      	adds	r4, #1
 8008c70:	9305      	str	r3, [sp, #20]
 8008c72:	4619      	mov	r1, r3
 8008c74:	f04f 0c0a 	mov.w	ip, #10
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c7e:	3a30      	subs	r2, #48	; 0x30
 8008c80:	2a09      	cmp	r2, #9
 8008c82:	d903      	bls.n	8008c8c <_svfiprintf_r+0x1a8>
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0c5      	beq.n	8008c14 <_svfiprintf_r+0x130>
 8008c88:	9105      	str	r1, [sp, #20]
 8008c8a:	e7c3      	b.n	8008c14 <_svfiprintf_r+0x130>
 8008c8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c90:	4604      	mov	r4, r0
 8008c92:	2301      	movs	r3, #1
 8008c94:	e7f0      	b.n	8008c78 <_svfiprintf_r+0x194>
 8008c96:	ab03      	add	r3, sp, #12
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	462a      	mov	r2, r5
 8008c9c:	4b0f      	ldr	r3, [pc, #60]	; (8008cdc <_svfiprintf_r+0x1f8>)
 8008c9e:	a904      	add	r1, sp, #16
 8008ca0:	4638      	mov	r0, r7
 8008ca2:	f7fc fa49 	bl	8005138 <_printf_float>
 8008ca6:	1c42      	adds	r2, r0, #1
 8008ca8:	4606      	mov	r6, r0
 8008caa:	d1d6      	bne.n	8008c5a <_svfiprintf_r+0x176>
 8008cac:	89ab      	ldrh	r3, [r5, #12]
 8008cae:	065b      	lsls	r3, r3, #25
 8008cb0:	f53f af2c 	bmi.w	8008b0c <_svfiprintf_r+0x28>
 8008cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cb6:	b01d      	add	sp, #116	; 0x74
 8008cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cbc:	ab03      	add	r3, sp, #12
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	462a      	mov	r2, r5
 8008cc2:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <_svfiprintf_r+0x1f8>)
 8008cc4:	a904      	add	r1, sp, #16
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	f7fc fcda 	bl	8005680 <_printf_i>
 8008ccc:	e7eb      	b.n	8008ca6 <_svfiprintf_r+0x1c2>
 8008cce:	bf00      	nop
 8008cd0:	08009cf4 	.word	0x08009cf4
 8008cd4:	08009cfe 	.word	0x08009cfe
 8008cd8:	08005139 	.word	0x08005139
 8008cdc:	08008a2d 	.word	0x08008a2d
 8008ce0:	08009cfa 	.word	0x08009cfa
 8008ce4:	00000000 	.word	0x00000000

08008ce8 <nan>:
 8008ce8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008cf0 <nan+0x8>
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	00000000 	.word	0x00000000
 8008cf4:	7ff80000 	.word	0x7ff80000

08008cf8 <_sbrk_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	4d06      	ldr	r5, [pc, #24]	; (8008d14 <_sbrk_r+0x1c>)
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4604      	mov	r4, r0
 8008d00:	4608      	mov	r0, r1
 8008d02:	602b      	str	r3, [r5, #0]
 8008d04:	f7f8 fd14 	bl	8001730 <_sbrk>
 8008d08:	1c43      	adds	r3, r0, #1
 8008d0a:	d102      	bne.n	8008d12 <_sbrk_r+0x1a>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	b103      	cbz	r3, 8008d12 <_sbrk_r+0x1a>
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	bd38      	pop	{r3, r4, r5, pc}
 8008d14:	20000460 	.word	0x20000460

08008d18 <strncmp>:
 8008d18:	b510      	push	{r4, lr}
 8008d1a:	b17a      	cbz	r2, 8008d3c <strncmp+0x24>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	3901      	subs	r1, #1
 8008d20:	1884      	adds	r4, r0, r2
 8008d22:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008d26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008d2a:	4290      	cmp	r0, r2
 8008d2c:	d101      	bne.n	8008d32 <strncmp+0x1a>
 8008d2e:	42a3      	cmp	r3, r4
 8008d30:	d101      	bne.n	8008d36 <strncmp+0x1e>
 8008d32:	1a80      	subs	r0, r0, r2
 8008d34:	bd10      	pop	{r4, pc}
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d1f3      	bne.n	8008d22 <strncmp+0xa>
 8008d3a:	e7fa      	b.n	8008d32 <strncmp+0x1a>
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	e7f9      	b.n	8008d34 <strncmp+0x1c>

08008d40 <__ascii_wctomb>:
 8008d40:	b149      	cbz	r1, 8008d56 <__ascii_wctomb+0x16>
 8008d42:	2aff      	cmp	r2, #255	; 0xff
 8008d44:	bf85      	ittet	hi
 8008d46:	238a      	movhi	r3, #138	; 0x8a
 8008d48:	6003      	strhi	r3, [r0, #0]
 8008d4a:	700a      	strbls	r2, [r1, #0]
 8008d4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d50:	bf98      	it	ls
 8008d52:	2001      	movls	r0, #1
 8008d54:	4770      	bx	lr
 8008d56:	4608      	mov	r0, r1
 8008d58:	4770      	bx	lr
	...

08008d5c <__assert_func>:
 8008d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d5e:	4614      	mov	r4, r2
 8008d60:	461a      	mov	r2, r3
 8008d62:	4b09      	ldr	r3, [pc, #36]	; (8008d88 <__assert_func+0x2c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4605      	mov	r5, r0
 8008d68:	68d8      	ldr	r0, [r3, #12]
 8008d6a:	b14c      	cbz	r4, 8008d80 <__assert_func+0x24>
 8008d6c:	4b07      	ldr	r3, [pc, #28]	; (8008d8c <__assert_func+0x30>)
 8008d6e:	9100      	str	r1, [sp, #0]
 8008d70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d74:	4906      	ldr	r1, [pc, #24]	; (8008d90 <__assert_func+0x34>)
 8008d76:	462b      	mov	r3, r5
 8008d78:	f000 f80e 	bl	8008d98 <fiprintf>
 8008d7c:	f000 fa8c 	bl	8009298 <abort>
 8008d80:	4b04      	ldr	r3, [pc, #16]	; (8008d94 <__assert_func+0x38>)
 8008d82:	461c      	mov	r4, r3
 8008d84:	e7f3      	b.n	8008d6e <__assert_func+0x12>
 8008d86:	bf00      	nop
 8008d88:	2000000c 	.word	0x2000000c
 8008d8c:	08009d05 	.word	0x08009d05
 8008d90:	08009d12 	.word	0x08009d12
 8008d94:	08009d40 	.word	0x08009d40

08008d98 <fiprintf>:
 8008d98:	b40e      	push	{r1, r2, r3}
 8008d9a:	b503      	push	{r0, r1, lr}
 8008d9c:	4601      	mov	r1, r0
 8008d9e:	ab03      	add	r3, sp, #12
 8008da0:	4805      	ldr	r0, [pc, #20]	; (8008db8 <fiprintf+0x20>)
 8008da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008da6:	6800      	ldr	r0, [r0, #0]
 8008da8:	9301      	str	r3, [sp, #4]
 8008daa:	f000 f885 	bl	8008eb8 <_vfiprintf_r>
 8008dae:	b002      	add	sp, #8
 8008db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008db4:	b003      	add	sp, #12
 8008db6:	4770      	bx	lr
 8008db8:	2000000c 	.word	0x2000000c

08008dbc <memmove>:
 8008dbc:	4288      	cmp	r0, r1
 8008dbe:	b510      	push	{r4, lr}
 8008dc0:	eb01 0402 	add.w	r4, r1, r2
 8008dc4:	d902      	bls.n	8008dcc <memmove+0x10>
 8008dc6:	4284      	cmp	r4, r0
 8008dc8:	4623      	mov	r3, r4
 8008dca:	d807      	bhi.n	8008ddc <memmove+0x20>
 8008dcc:	1e43      	subs	r3, r0, #1
 8008dce:	42a1      	cmp	r1, r4
 8008dd0:	d008      	beq.n	8008de4 <memmove+0x28>
 8008dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dda:	e7f8      	b.n	8008dce <memmove+0x12>
 8008ddc:	4402      	add	r2, r0
 8008dde:	4601      	mov	r1, r0
 8008de0:	428a      	cmp	r2, r1
 8008de2:	d100      	bne.n	8008de6 <memmove+0x2a>
 8008de4:	bd10      	pop	{r4, pc}
 8008de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dee:	e7f7      	b.n	8008de0 <memmove+0x24>

08008df0 <__malloc_lock>:
 8008df0:	4801      	ldr	r0, [pc, #4]	; (8008df8 <__malloc_lock+0x8>)
 8008df2:	f000 bc11 	b.w	8009618 <__retarget_lock_acquire_recursive>
 8008df6:	bf00      	nop
 8008df8:	20000464 	.word	0x20000464

08008dfc <__malloc_unlock>:
 8008dfc:	4801      	ldr	r0, [pc, #4]	; (8008e04 <__malloc_unlock+0x8>)
 8008dfe:	f000 bc0c 	b.w	800961a <__retarget_lock_release_recursive>
 8008e02:	bf00      	nop
 8008e04:	20000464 	.word	0x20000464

08008e08 <_realloc_r>:
 8008e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0c:	4680      	mov	r8, r0
 8008e0e:	4614      	mov	r4, r2
 8008e10:	460e      	mov	r6, r1
 8008e12:	b921      	cbnz	r1, 8008e1e <_realloc_r+0x16>
 8008e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e18:	4611      	mov	r1, r2
 8008e1a:	f7ff bd93 	b.w	8008944 <_malloc_r>
 8008e1e:	b92a      	cbnz	r2, 8008e2c <_realloc_r+0x24>
 8008e20:	f7ff fd24 	bl	800886c <_free_r>
 8008e24:	4625      	mov	r5, r4
 8008e26:	4628      	mov	r0, r5
 8008e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e2c:	f000 fc5c 	bl	80096e8 <_malloc_usable_size_r>
 8008e30:	4284      	cmp	r4, r0
 8008e32:	4607      	mov	r7, r0
 8008e34:	d802      	bhi.n	8008e3c <_realloc_r+0x34>
 8008e36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e3a:	d812      	bhi.n	8008e62 <_realloc_r+0x5a>
 8008e3c:	4621      	mov	r1, r4
 8008e3e:	4640      	mov	r0, r8
 8008e40:	f7ff fd80 	bl	8008944 <_malloc_r>
 8008e44:	4605      	mov	r5, r0
 8008e46:	2800      	cmp	r0, #0
 8008e48:	d0ed      	beq.n	8008e26 <_realloc_r+0x1e>
 8008e4a:	42bc      	cmp	r4, r7
 8008e4c:	4622      	mov	r2, r4
 8008e4e:	4631      	mov	r1, r6
 8008e50:	bf28      	it	cs
 8008e52:	463a      	movcs	r2, r7
 8008e54:	f7ff f824 	bl	8007ea0 <memcpy>
 8008e58:	4631      	mov	r1, r6
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	f7ff fd06 	bl	800886c <_free_r>
 8008e60:	e7e1      	b.n	8008e26 <_realloc_r+0x1e>
 8008e62:	4635      	mov	r5, r6
 8008e64:	e7df      	b.n	8008e26 <_realloc_r+0x1e>

08008e66 <__sfputc_r>:
 8008e66:	6893      	ldr	r3, [r2, #8]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	b410      	push	{r4}
 8008e6e:	6093      	str	r3, [r2, #8]
 8008e70:	da08      	bge.n	8008e84 <__sfputc_r+0x1e>
 8008e72:	6994      	ldr	r4, [r2, #24]
 8008e74:	42a3      	cmp	r3, r4
 8008e76:	db01      	blt.n	8008e7c <__sfputc_r+0x16>
 8008e78:	290a      	cmp	r1, #10
 8008e7a:	d103      	bne.n	8008e84 <__sfputc_r+0x1e>
 8008e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e80:	f000 b94a 	b.w	8009118 <__swbuf_r>
 8008e84:	6813      	ldr	r3, [r2, #0]
 8008e86:	1c58      	adds	r0, r3, #1
 8008e88:	6010      	str	r0, [r2, #0]
 8008e8a:	7019      	strb	r1, [r3, #0]
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <__sfputs_r>:
 8008e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e96:	4606      	mov	r6, r0
 8008e98:	460f      	mov	r7, r1
 8008e9a:	4614      	mov	r4, r2
 8008e9c:	18d5      	adds	r5, r2, r3
 8008e9e:	42ac      	cmp	r4, r5
 8008ea0:	d101      	bne.n	8008ea6 <__sfputs_r+0x12>
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	e007      	b.n	8008eb6 <__sfputs_r+0x22>
 8008ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eaa:	463a      	mov	r2, r7
 8008eac:	4630      	mov	r0, r6
 8008eae:	f7ff ffda 	bl	8008e66 <__sfputc_r>
 8008eb2:	1c43      	adds	r3, r0, #1
 8008eb4:	d1f3      	bne.n	8008e9e <__sfputs_r+0xa>
 8008eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008eb8 <_vfiprintf_r>:
 8008eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ebc:	460d      	mov	r5, r1
 8008ebe:	b09d      	sub	sp, #116	; 0x74
 8008ec0:	4614      	mov	r4, r2
 8008ec2:	4698      	mov	r8, r3
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	b118      	cbz	r0, 8008ed0 <_vfiprintf_r+0x18>
 8008ec8:	6983      	ldr	r3, [r0, #24]
 8008eca:	b90b      	cbnz	r3, 8008ed0 <_vfiprintf_r+0x18>
 8008ecc:	f000 fb06 	bl	80094dc <__sinit>
 8008ed0:	4b89      	ldr	r3, [pc, #548]	; (80090f8 <_vfiprintf_r+0x240>)
 8008ed2:	429d      	cmp	r5, r3
 8008ed4:	d11b      	bne.n	8008f0e <_vfiprintf_r+0x56>
 8008ed6:	6875      	ldr	r5, [r6, #4]
 8008ed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eda:	07d9      	lsls	r1, r3, #31
 8008edc:	d405      	bmi.n	8008eea <_vfiprintf_r+0x32>
 8008ede:	89ab      	ldrh	r3, [r5, #12]
 8008ee0:	059a      	lsls	r2, r3, #22
 8008ee2:	d402      	bmi.n	8008eea <_vfiprintf_r+0x32>
 8008ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ee6:	f000 fb97 	bl	8009618 <__retarget_lock_acquire_recursive>
 8008eea:	89ab      	ldrh	r3, [r5, #12]
 8008eec:	071b      	lsls	r3, r3, #28
 8008eee:	d501      	bpl.n	8008ef4 <_vfiprintf_r+0x3c>
 8008ef0:	692b      	ldr	r3, [r5, #16]
 8008ef2:	b9eb      	cbnz	r3, 8008f30 <_vfiprintf_r+0x78>
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f000 f960 	bl	80091bc <__swsetup_r>
 8008efc:	b1c0      	cbz	r0, 8008f30 <_vfiprintf_r+0x78>
 8008efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f00:	07dc      	lsls	r4, r3, #31
 8008f02:	d50e      	bpl.n	8008f22 <_vfiprintf_r+0x6a>
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295
 8008f08:	b01d      	add	sp, #116	; 0x74
 8008f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0e:	4b7b      	ldr	r3, [pc, #492]	; (80090fc <_vfiprintf_r+0x244>)
 8008f10:	429d      	cmp	r5, r3
 8008f12:	d101      	bne.n	8008f18 <_vfiprintf_r+0x60>
 8008f14:	68b5      	ldr	r5, [r6, #8]
 8008f16:	e7df      	b.n	8008ed8 <_vfiprintf_r+0x20>
 8008f18:	4b79      	ldr	r3, [pc, #484]	; (8009100 <_vfiprintf_r+0x248>)
 8008f1a:	429d      	cmp	r5, r3
 8008f1c:	bf08      	it	eq
 8008f1e:	68f5      	ldreq	r5, [r6, #12]
 8008f20:	e7da      	b.n	8008ed8 <_vfiprintf_r+0x20>
 8008f22:	89ab      	ldrh	r3, [r5, #12]
 8008f24:	0598      	lsls	r0, r3, #22
 8008f26:	d4ed      	bmi.n	8008f04 <_vfiprintf_r+0x4c>
 8008f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f2a:	f000 fb76 	bl	800961a <__retarget_lock_release_recursive>
 8008f2e:	e7e9      	b.n	8008f04 <_vfiprintf_r+0x4c>
 8008f30:	2300      	movs	r3, #0
 8008f32:	9309      	str	r3, [sp, #36]	; 0x24
 8008f34:	2320      	movs	r3, #32
 8008f36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f3e:	2330      	movs	r3, #48	; 0x30
 8008f40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009104 <_vfiprintf_r+0x24c>
 8008f44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f48:	f04f 0901 	mov.w	r9, #1
 8008f4c:	4623      	mov	r3, r4
 8008f4e:	469a      	mov	sl, r3
 8008f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f54:	b10a      	cbz	r2, 8008f5a <_vfiprintf_r+0xa2>
 8008f56:	2a25      	cmp	r2, #37	; 0x25
 8008f58:	d1f9      	bne.n	8008f4e <_vfiprintf_r+0x96>
 8008f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8008f5e:	d00b      	beq.n	8008f78 <_vfiprintf_r+0xc0>
 8008f60:	465b      	mov	r3, fp
 8008f62:	4622      	mov	r2, r4
 8008f64:	4629      	mov	r1, r5
 8008f66:	4630      	mov	r0, r6
 8008f68:	f7ff ff94 	bl	8008e94 <__sfputs_r>
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	f000 80aa 	beq.w	80090c6 <_vfiprintf_r+0x20e>
 8008f72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f74:	445a      	add	r2, fp
 8008f76:	9209      	str	r2, [sp, #36]	; 0x24
 8008f78:	f89a 3000 	ldrb.w	r3, [sl]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 80a2 	beq.w	80090c6 <_vfiprintf_r+0x20e>
 8008f82:	2300      	movs	r3, #0
 8008f84:	f04f 32ff 	mov.w	r2, #4294967295
 8008f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f8c:	f10a 0a01 	add.w	sl, sl, #1
 8008f90:	9304      	str	r3, [sp, #16]
 8008f92:	9307      	str	r3, [sp, #28]
 8008f94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f98:	931a      	str	r3, [sp, #104]	; 0x68
 8008f9a:	4654      	mov	r4, sl
 8008f9c:	2205      	movs	r2, #5
 8008f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa2:	4858      	ldr	r0, [pc, #352]	; (8009104 <_vfiprintf_r+0x24c>)
 8008fa4:	f7f7 f944 	bl	8000230 <memchr>
 8008fa8:	9a04      	ldr	r2, [sp, #16]
 8008faa:	b9d8      	cbnz	r0, 8008fe4 <_vfiprintf_r+0x12c>
 8008fac:	06d1      	lsls	r1, r2, #27
 8008fae:	bf44      	itt	mi
 8008fb0:	2320      	movmi	r3, #32
 8008fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fb6:	0713      	lsls	r3, r2, #28
 8008fb8:	bf44      	itt	mi
 8008fba:	232b      	movmi	r3, #43	; 0x2b
 8008fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc6:	d015      	beq.n	8008ff4 <_vfiprintf_r+0x13c>
 8008fc8:	9a07      	ldr	r2, [sp, #28]
 8008fca:	4654      	mov	r4, sl
 8008fcc:	2000      	movs	r0, #0
 8008fce:	f04f 0c0a 	mov.w	ip, #10
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fd8:	3b30      	subs	r3, #48	; 0x30
 8008fda:	2b09      	cmp	r3, #9
 8008fdc:	d94e      	bls.n	800907c <_vfiprintf_r+0x1c4>
 8008fde:	b1b0      	cbz	r0, 800900e <_vfiprintf_r+0x156>
 8008fe0:	9207      	str	r2, [sp, #28]
 8008fe2:	e014      	b.n	800900e <_vfiprintf_r+0x156>
 8008fe4:	eba0 0308 	sub.w	r3, r0, r8
 8008fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8008fec:	4313      	orrs	r3, r2
 8008fee:	9304      	str	r3, [sp, #16]
 8008ff0:	46a2      	mov	sl, r4
 8008ff2:	e7d2      	b.n	8008f9a <_vfiprintf_r+0xe2>
 8008ff4:	9b03      	ldr	r3, [sp, #12]
 8008ff6:	1d19      	adds	r1, r3, #4
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	9103      	str	r1, [sp, #12]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	bfbb      	ittet	lt
 8009000:	425b      	neglt	r3, r3
 8009002:	f042 0202 	orrlt.w	r2, r2, #2
 8009006:	9307      	strge	r3, [sp, #28]
 8009008:	9307      	strlt	r3, [sp, #28]
 800900a:	bfb8      	it	lt
 800900c:	9204      	strlt	r2, [sp, #16]
 800900e:	7823      	ldrb	r3, [r4, #0]
 8009010:	2b2e      	cmp	r3, #46	; 0x2e
 8009012:	d10c      	bne.n	800902e <_vfiprintf_r+0x176>
 8009014:	7863      	ldrb	r3, [r4, #1]
 8009016:	2b2a      	cmp	r3, #42	; 0x2a
 8009018:	d135      	bne.n	8009086 <_vfiprintf_r+0x1ce>
 800901a:	9b03      	ldr	r3, [sp, #12]
 800901c:	1d1a      	adds	r2, r3, #4
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	9203      	str	r2, [sp, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	bfb8      	it	lt
 8009026:	f04f 33ff 	movlt.w	r3, #4294967295
 800902a:	3402      	adds	r4, #2
 800902c:	9305      	str	r3, [sp, #20]
 800902e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009114 <_vfiprintf_r+0x25c>
 8009032:	7821      	ldrb	r1, [r4, #0]
 8009034:	2203      	movs	r2, #3
 8009036:	4650      	mov	r0, sl
 8009038:	f7f7 f8fa 	bl	8000230 <memchr>
 800903c:	b140      	cbz	r0, 8009050 <_vfiprintf_r+0x198>
 800903e:	2340      	movs	r3, #64	; 0x40
 8009040:	eba0 000a 	sub.w	r0, r0, sl
 8009044:	fa03 f000 	lsl.w	r0, r3, r0
 8009048:	9b04      	ldr	r3, [sp, #16]
 800904a:	4303      	orrs	r3, r0
 800904c:	3401      	adds	r4, #1
 800904e:	9304      	str	r3, [sp, #16]
 8009050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009054:	482c      	ldr	r0, [pc, #176]	; (8009108 <_vfiprintf_r+0x250>)
 8009056:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800905a:	2206      	movs	r2, #6
 800905c:	f7f7 f8e8 	bl	8000230 <memchr>
 8009060:	2800      	cmp	r0, #0
 8009062:	d03f      	beq.n	80090e4 <_vfiprintf_r+0x22c>
 8009064:	4b29      	ldr	r3, [pc, #164]	; (800910c <_vfiprintf_r+0x254>)
 8009066:	bb1b      	cbnz	r3, 80090b0 <_vfiprintf_r+0x1f8>
 8009068:	9b03      	ldr	r3, [sp, #12]
 800906a:	3307      	adds	r3, #7
 800906c:	f023 0307 	bic.w	r3, r3, #7
 8009070:	3308      	adds	r3, #8
 8009072:	9303      	str	r3, [sp, #12]
 8009074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009076:	443b      	add	r3, r7
 8009078:	9309      	str	r3, [sp, #36]	; 0x24
 800907a:	e767      	b.n	8008f4c <_vfiprintf_r+0x94>
 800907c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009080:	460c      	mov	r4, r1
 8009082:	2001      	movs	r0, #1
 8009084:	e7a5      	b.n	8008fd2 <_vfiprintf_r+0x11a>
 8009086:	2300      	movs	r3, #0
 8009088:	3401      	adds	r4, #1
 800908a:	9305      	str	r3, [sp, #20]
 800908c:	4619      	mov	r1, r3
 800908e:	f04f 0c0a 	mov.w	ip, #10
 8009092:	4620      	mov	r0, r4
 8009094:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009098:	3a30      	subs	r2, #48	; 0x30
 800909a:	2a09      	cmp	r2, #9
 800909c:	d903      	bls.n	80090a6 <_vfiprintf_r+0x1ee>
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d0c5      	beq.n	800902e <_vfiprintf_r+0x176>
 80090a2:	9105      	str	r1, [sp, #20]
 80090a4:	e7c3      	b.n	800902e <_vfiprintf_r+0x176>
 80090a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80090aa:	4604      	mov	r4, r0
 80090ac:	2301      	movs	r3, #1
 80090ae:	e7f0      	b.n	8009092 <_vfiprintf_r+0x1da>
 80090b0:	ab03      	add	r3, sp, #12
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	462a      	mov	r2, r5
 80090b6:	4b16      	ldr	r3, [pc, #88]	; (8009110 <_vfiprintf_r+0x258>)
 80090b8:	a904      	add	r1, sp, #16
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7fc f83c 	bl	8005138 <_printf_float>
 80090c0:	4607      	mov	r7, r0
 80090c2:	1c78      	adds	r0, r7, #1
 80090c4:	d1d6      	bne.n	8009074 <_vfiprintf_r+0x1bc>
 80090c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090c8:	07d9      	lsls	r1, r3, #31
 80090ca:	d405      	bmi.n	80090d8 <_vfiprintf_r+0x220>
 80090cc:	89ab      	ldrh	r3, [r5, #12]
 80090ce:	059a      	lsls	r2, r3, #22
 80090d0:	d402      	bmi.n	80090d8 <_vfiprintf_r+0x220>
 80090d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090d4:	f000 faa1 	bl	800961a <__retarget_lock_release_recursive>
 80090d8:	89ab      	ldrh	r3, [r5, #12]
 80090da:	065b      	lsls	r3, r3, #25
 80090dc:	f53f af12 	bmi.w	8008f04 <_vfiprintf_r+0x4c>
 80090e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090e2:	e711      	b.n	8008f08 <_vfiprintf_r+0x50>
 80090e4:	ab03      	add	r3, sp, #12
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	462a      	mov	r2, r5
 80090ea:	4b09      	ldr	r3, [pc, #36]	; (8009110 <_vfiprintf_r+0x258>)
 80090ec:	a904      	add	r1, sp, #16
 80090ee:	4630      	mov	r0, r6
 80090f0:	f7fc fac6 	bl	8005680 <_printf_i>
 80090f4:	e7e4      	b.n	80090c0 <_vfiprintf_r+0x208>
 80090f6:	bf00      	nop
 80090f8:	08009d64 	.word	0x08009d64
 80090fc:	08009d84 	.word	0x08009d84
 8009100:	08009d44 	.word	0x08009d44
 8009104:	08009cf4 	.word	0x08009cf4
 8009108:	08009cfe 	.word	0x08009cfe
 800910c:	08005139 	.word	0x08005139
 8009110:	08008e95 	.word	0x08008e95
 8009114:	08009cfa 	.word	0x08009cfa

08009118 <__swbuf_r>:
 8009118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911a:	460e      	mov	r6, r1
 800911c:	4614      	mov	r4, r2
 800911e:	4605      	mov	r5, r0
 8009120:	b118      	cbz	r0, 800912a <__swbuf_r+0x12>
 8009122:	6983      	ldr	r3, [r0, #24]
 8009124:	b90b      	cbnz	r3, 800912a <__swbuf_r+0x12>
 8009126:	f000 f9d9 	bl	80094dc <__sinit>
 800912a:	4b21      	ldr	r3, [pc, #132]	; (80091b0 <__swbuf_r+0x98>)
 800912c:	429c      	cmp	r4, r3
 800912e:	d12b      	bne.n	8009188 <__swbuf_r+0x70>
 8009130:	686c      	ldr	r4, [r5, #4]
 8009132:	69a3      	ldr	r3, [r4, #24]
 8009134:	60a3      	str	r3, [r4, #8]
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	071a      	lsls	r2, r3, #28
 800913a:	d52f      	bpl.n	800919c <__swbuf_r+0x84>
 800913c:	6923      	ldr	r3, [r4, #16]
 800913e:	b36b      	cbz	r3, 800919c <__swbuf_r+0x84>
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	6820      	ldr	r0, [r4, #0]
 8009144:	1ac0      	subs	r0, r0, r3
 8009146:	6963      	ldr	r3, [r4, #20]
 8009148:	b2f6      	uxtb	r6, r6
 800914a:	4283      	cmp	r3, r0
 800914c:	4637      	mov	r7, r6
 800914e:	dc04      	bgt.n	800915a <__swbuf_r+0x42>
 8009150:	4621      	mov	r1, r4
 8009152:	4628      	mov	r0, r5
 8009154:	f000 f92e 	bl	80093b4 <_fflush_r>
 8009158:	bb30      	cbnz	r0, 80091a8 <__swbuf_r+0x90>
 800915a:	68a3      	ldr	r3, [r4, #8]
 800915c:	3b01      	subs	r3, #1
 800915e:	60a3      	str	r3, [r4, #8]
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	6022      	str	r2, [r4, #0]
 8009166:	701e      	strb	r6, [r3, #0]
 8009168:	6963      	ldr	r3, [r4, #20]
 800916a:	3001      	adds	r0, #1
 800916c:	4283      	cmp	r3, r0
 800916e:	d004      	beq.n	800917a <__swbuf_r+0x62>
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	07db      	lsls	r3, r3, #31
 8009174:	d506      	bpl.n	8009184 <__swbuf_r+0x6c>
 8009176:	2e0a      	cmp	r6, #10
 8009178:	d104      	bne.n	8009184 <__swbuf_r+0x6c>
 800917a:	4621      	mov	r1, r4
 800917c:	4628      	mov	r0, r5
 800917e:	f000 f919 	bl	80093b4 <_fflush_r>
 8009182:	b988      	cbnz	r0, 80091a8 <__swbuf_r+0x90>
 8009184:	4638      	mov	r0, r7
 8009186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009188:	4b0a      	ldr	r3, [pc, #40]	; (80091b4 <__swbuf_r+0x9c>)
 800918a:	429c      	cmp	r4, r3
 800918c:	d101      	bne.n	8009192 <__swbuf_r+0x7a>
 800918e:	68ac      	ldr	r4, [r5, #8]
 8009190:	e7cf      	b.n	8009132 <__swbuf_r+0x1a>
 8009192:	4b09      	ldr	r3, [pc, #36]	; (80091b8 <__swbuf_r+0xa0>)
 8009194:	429c      	cmp	r4, r3
 8009196:	bf08      	it	eq
 8009198:	68ec      	ldreq	r4, [r5, #12]
 800919a:	e7ca      	b.n	8009132 <__swbuf_r+0x1a>
 800919c:	4621      	mov	r1, r4
 800919e:	4628      	mov	r0, r5
 80091a0:	f000 f80c 	bl	80091bc <__swsetup_r>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d0cb      	beq.n	8009140 <__swbuf_r+0x28>
 80091a8:	f04f 37ff 	mov.w	r7, #4294967295
 80091ac:	e7ea      	b.n	8009184 <__swbuf_r+0x6c>
 80091ae:	bf00      	nop
 80091b0:	08009d64 	.word	0x08009d64
 80091b4:	08009d84 	.word	0x08009d84
 80091b8:	08009d44 	.word	0x08009d44

080091bc <__swsetup_r>:
 80091bc:	4b32      	ldr	r3, [pc, #200]	; (8009288 <__swsetup_r+0xcc>)
 80091be:	b570      	push	{r4, r5, r6, lr}
 80091c0:	681d      	ldr	r5, [r3, #0]
 80091c2:	4606      	mov	r6, r0
 80091c4:	460c      	mov	r4, r1
 80091c6:	b125      	cbz	r5, 80091d2 <__swsetup_r+0x16>
 80091c8:	69ab      	ldr	r3, [r5, #24]
 80091ca:	b913      	cbnz	r3, 80091d2 <__swsetup_r+0x16>
 80091cc:	4628      	mov	r0, r5
 80091ce:	f000 f985 	bl	80094dc <__sinit>
 80091d2:	4b2e      	ldr	r3, [pc, #184]	; (800928c <__swsetup_r+0xd0>)
 80091d4:	429c      	cmp	r4, r3
 80091d6:	d10f      	bne.n	80091f8 <__swsetup_r+0x3c>
 80091d8:	686c      	ldr	r4, [r5, #4]
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091e0:	0719      	lsls	r1, r3, #28
 80091e2:	d42c      	bmi.n	800923e <__swsetup_r+0x82>
 80091e4:	06dd      	lsls	r5, r3, #27
 80091e6:	d411      	bmi.n	800920c <__swsetup_r+0x50>
 80091e8:	2309      	movs	r3, #9
 80091ea:	6033      	str	r3, [r6, #0]
 80091ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091f0:	81a3      	strh	r3, [r4, #12]
 80091f2:	f04f 30ff 	mov.w	r0, #4294967295
 80091f6:	e03e      	b.n	8009276 <__swsetup_r+0xba>
 80091f8:	4b25      	ldr	r3, [pc, #148]	; (8009290 <__swsetup_r+0xd4>)
 80091fa:	429c      	cmp	r4, r3
 80091fc:	d101      	bne.n	8009202 <__swsetup_r+0x46>
 80091fe:	68ac      	ldr	r4, [r5, #8]
 8009200:	e7eb      	b.n	80091da <__swsetup_r+0x1e>
 8009202:	4b24      	ldr	r3, [pc, #144]	; (8009294 <__swsetup_r+0xd8>)
 8009204:	429c      	cmp	r4, r3
 8009206:	bf08      	it	eq
 8009208:	68ec      	ldreq	r4, [r5, #12]
 800920a:	e7e6      	b.n	80091da <__swsetup_r+0x1e>
 800920c:	0758      	lsls	r0, r3, #29
 800920e:	d512      	bpl.n	8009236 <__swsetup_r+0x7a>
 8009210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009212:	b141      	cbz	r1, 8009226 <__swsetup_r+0x6a>
 8009214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009218:	4299      	cmp	r1, r3
 800921a:	d002      	beq.n	8009222 <__swsetup_r+0x66>
 800921c:	4630      	mov	r0, r6
 800921e:	f7ff fb25 	bl	800886c <_free_r>
 8009222:	2300      	movs	r3, #0
 8009224:	6363      	str	r3, [r4, #52]	; 0x34
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800922c:	81a3      	strh	r3, [r4, #12]
 800922e:	2300      	movs	r3, #0
 8009230:	6063      	str	r3, [r4, #4]
 8009232:	6923      	ldr	r3, [r4, #16]
 8009234:	6023      	str	r3, [r4, #0]
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	f043 0308 	orr.w	r3, r3, #8
 800923c:	81a3      	strh	r3, [r4, #12]
 800923e:	6923      	ldr	r3, [r4, #16]
 8009240:	b94b      	cbnz	r3, 8009256 <__swsetup_r+0x9a>
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800924c:	d003      	beq.n	8009256 <__swsetup_r+0x9a>
 800924e:	4621      	mov	r1, r4
 8009250:	4630      	mov	r0, r6
 8009252:	f000 fa09 	bl	8009668 <__smakebuf_r>
 8009256:	89a0      	ldrh	r0, [r4, #12]
 8009258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800925c:	f010 0301 	ands.w	r3, r0, #1
 8009260:	d00a      	beq.n	8009278 <__swsetup_r+0xbc>
 8009262:	2300      	movs	r3, #0
 8009264:	60a3      	str	r3, [r4, #8]
 8009266:	6963      	ldr	r3, [r4, #20]
 8009268:	425b      	negs	r3, r3
 800926a:	61a3      	str	r3, [r4, #24]
 800926c:	6923      	ldr	r3, [r4, #16]
 800926e:	b943      	cbnz	r3, 8009282 <__swsetup_r+0xc6>
 8009270:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009274:	d1ba      	bne.n	80091ec <__swsetup_r+0x30>
 8009276:	bd70      	pop	{r4, r5, r6, pc}
 8009278:	0781      	lsls	r1, r0, #30
 800927a:	bf58      	it	pl
 800927c:	6963      	ldrpl	r3, [r4, #20]
 800927e:	60a3      	str	r3, [r4, #8]
 8009280:	e7f4      	b.n	800926c <__swsetup_r+0xb0>
 8009282:	2000      	movs	r0, #0
 8009284:	e7f7      	b.n	8009276 <__swsetup_r+0xba>
 8009286:	bf00      	nop
 8009288:	2000000c 	.word	0x2000000c
 800928c:	08009d64 	.word	0x08009d64
 8009290:	08009d84 	.word	0x08009d84
 8009294:	08009d44 	.word	0x08009d44

08009298 <abort>:
 8009298:	b508      	push	{r3, lr}
 800929a:	2006      	movs	r0, #6
 800929c:	f000 fa54 	bl	8009748 <raise>
 80092a0:	2001      	movs	r0, #1
 80092a2:	f7f8 f9cd 	bl	8001640 <_exit>
	...

080092a8 <__sflush_r>:
 80092a8:	898a      	ldrh	r2, [r1, #12]
 80092aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ae:	4605      	mov	r5, r0
 80092b0:	0710      	lsls	r0, r2, #28
 80092b2:	460c      	mov	r4, r1
 80092b4:	d458      	bmi.n	8009368 <__sflush_r+0xc0>
 80092b6:	684b      	ldr	r3, [r1, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	dc05      	bgt.n	80092c8 <__sflush_r+0x20>
 80092bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092be:	2b00      	cmp	r3, #0
 80092c0:	dc02      	bgt.n	80092c8 <__sflush_r+0x20>
 80092c2:	2000      	movs	r0, #0
 80092c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092ca:	2e00      	cmp	r6, #0
 80092cc:	d0f9      	beq.n	80092c2 <__sflush_r+0x1a>
 80092ce:	2300      	movs	r3, #0
 80092d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092d4:	682f      	ldr	r7, [r5, #0]
 80092d6:	602b      	str	r3, [r5, #0]
 80092d8:	d032      	beq.n	8009340 <__sflush_r+0x98>
 80092da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092dc:	89a3      	ldrh	r3, [r4, #12]
 80092de:	075a      	lsls	r2, r3, #29
 80092e0:	d505      	bpl.n	80092ee <__sflush_r+0x46>
 80092e2:	6863      	ldr	r3, [r4, #4]
 80092e4:	1ac0      	subs	r0, r0, r3
 80092e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092e8:	b10b      	cbz	r3, 80092ee <__sflush_r+0x46>
 80092ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092ec:	1ac0      	subs	r0, r0, r3
 80092ee:	2300      	movs	r3, #0
 80092f0:	4602      	mov	r2, r0
 80092f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092f4:	6a21      	ldr	r1, [r4, #32]
 80092f6:	4628      	mov	r0, r5
 80092f8:	47b0      	blx	r6
 80092fa:	1c43      	adds	r3, r0, #1
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	d106      	bne.n	800930e <__sflush_r+0x66>
 8009300:	6829      	ldr	r1, [r5, #0]
 8009302:	291d      	cmp	r1, #29
 8009304:	d82c      	bhi.n	8009360 <__sflush_r+0xb8>
 8009306:	4a2a      	ldr	r2, [pc, #168]	; (80093b0 <__sflush_r+0x108>)
 8009308:	40ca      	lsrs	r2, r1
 800930a:	07d6      	lsls	r6, r2, #31
 800930c:	d528      	bpl.n	8009360 <__sflush_r+0xb8>
 800930e:	2200      	movs	r2, #0
 8009310:	6062      	str	r2, [r4, #4]
 8009312:	04d9      	lsls	r1, r3, #19
 8009314:	6922      	ldr	r2, [r4, #16]
 8009316:	6022      	str	r2, [r4, #0]
 8009318:	d504      	bpl.n	8009324 <__sflush_r+0x7c>
 800931a:	1c42      	adds	r2, r0, #1
 800931c:	d101      	bne.n	8009322 <__sflush_r+0x7a>
 800931e:	682b      	ldr	r3, [r5, #0]
 8009320:	b903      	cbnz	r3, 8009324 <__sflush_r+0x7c>
 8009322:	6560      	str	r0, [r4, #84]	; 0x54
 8009324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009326:	602f      	str	r7, [r5, #0]
 8009328:	2900      	cmp	r1, #0
 800932a:	d0ca      	beq.n	80092c2 <__sflush_r+0x1a>
 800932c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009330:	4299      	cmp	r1, r3
 8009332:	d002      	beq.n	800933a <__sflush_r+0x92>
 8009334:	4628      	mov	r0, r5
 8009336:	f7ff fa99 	bl	800886c <_free_r>
 800933a:	2000      	movs	r0, #0
 800933c:	6360      	str	r0, [r4, #52]	; 0x34
 800933e:	e7c1      	b.n	80092c4 <__sflush_r+0x1c>
 8009340:	6a21      	ldr	r1, [r4, #32]
 8009342:	2301      	movs	r3, #1
 8009344:	4628      	mov	r0, r5
 8009346:	47b0      	blx	r6
 8009348:	1c41      	adds	r1, r0, #1
 800934a:	d1c7      	bne.n	80092dc <__sflush_r+0x34>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0c4      	beq.n	80092dc <__sflush_r+0x34>
 8009352:	2b1d      	cmp	r3, #29
 8009354:	d001      	beq.n	800935a <__sflush_r+0xb2>
 8009356:	2b16      	cmp	r3, #22
 8009358:	d101      	bne.n	800935e <__sflush_r+0xb6>
 800935a:	602f      	str	r7, [r5, #0]
 800935c:	e7b1      	b.n	80092c2 <__sflush_r+0x1a>
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009364:	81a3      	strh	r3, [r4, #12]
 8009366:	e7ad      	b.n	80092c4 <__sflush_r+0x1c>
 8009368:	690f      	ldr	r7, [r1, #16]
 800936a:	2f00      	cmp	r7, #0
 800936c:	d0a9      	beq.n	80092c2 <__sflush_r+0x1a>
 800936e:	0793      	lsls	r3, r2, #30
 8009370:	680e      	ldr	r6, [r1, #0]
 8009372:	bf08      	it	eq
 8009374:	694b      	ldreq	r3, [r1, #20]
 8009376:	600f      	str	r7, [r1, #0]
 8009378:	bf18      	it	ne
 800937a:	2300      	movne	r3, #0
 800937c:	eba6 0807 	sub.w	r8, r6, r7
 8009380:	608b      	str	r3, [r1, #8]
 8009382:	f1b8 0f00 	cmp.w	r8, #0
 8009386:	dd9c      	ble.n	80092c2 <__sflush_r+0x1a>
 8009388:	6a21      	ldr	r1, [r4, #32]
 800938a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800938c:	4643      	mov	r3, r8
 800938e:	463a      	mov	r2, r7
 8009390:	4628      	mov	r0, r5
 8009392:	47b0      	blx	r6
 8009394:	2800      	cmp	r0, #0
 8009396:	dc06      	bgt.n	80093a6 <__sflush_r+0xfe>
 8009398:	89a3      	ldrh	r3, [r4, #12]
 800939a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800939e:	81a3      	strh	r3, [r4, #12]
 80093a0:	f04f 30ff 	mov.w	r0, #4294967295
 80093a4:	e78e      	b.n	80092c4 <__sflush_r+0x1c>
 80093a6:	4407      	add	r7, r0
 80093a8:	eba8 0800 	sub.w	r8, r8, r0
 80093ac:	e7e9      	b.n	8009382 <__sflush_r+0xda>
 80093ae:	bf00      	nop
 80093b0:	20400001 	.word	0x20400001

080093b4 <_fflush_r>:
 80093b4:	b538      	push	{r3, r4, r5, lr}
 80093b6:	690b      	ldr	r3, [r1, #16]
 80093b8:	4605      	mov	r5, r0
 80093ba:	460c      	mov	r4, r1
 80093bc:	b913      	cbnz	r3, 80093c4 <_fflush_r+0x10>
 80093be:	2500      	movs	r5, #0
 80093c0:	4628      	mov	r0, r5
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	b118      	cbz	r0, 80093ce <_fflush_r+0x1a>
 80093c6:	6983      	ldr	r3, [r0, #24]
 80093c8:	b90b      	cbnz	r3, 80093ce <_fflush_r+0x1a>
 80093ca:	f000 f887 	bl	80094dc <__sinit>
 80093ce:	4b14      	ldr	r3, [pc, #80]	; (8009420 <_fflush_r+0x6c>)
 80093d0:	429c      	cmp	r4, r3
 80093d2:	d11b      	bne.n	800940c <_fflush_r+0x58>
 80093d4:	686c      	ldr	r4, [r5, #4]
 80093d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0ef      	beq.n	80093be <_fflush_r+0xa>
 80093de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093e0:	07d0      	lsls	r0, r2, #31
 80093e2:	d404      	bmi.n	80093ee <_fflush_r+0x3a>
 80093e4:	0599      	lsls	r1, r3, #22
 80093e6:	d402      	bmi.n	80093ee <_fflush_r+0x3a>
 80093e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ea:	f000 f915 	bl	8009618 <__retarget_lock_acquire_recursive>
 80093ee:	4628      	mov	r0, r5
 80093f0:	4621      	mov	r1, r4
 80093f2:	f7ff ff59 	bl	80092a8 <__sflush_r>
 80093f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093f8:	07da      	lsls	r2, r3, #31
 80093fa:	4605      	mov	r5, r0
 80093fc:	d4e0      	bmi.n	80093c0 <_fflush_r+0xc>
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	059b      	lsls	r3, r3, #22
 8009402:	d4dd      	bmi.n	80093c0 <_fflush_r+0xc>
 8009404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009406:	f000 f908 	bl	800961a <__retarget_lock_release_recursive>
 800940a:	e7d9      	b.n	80093c0 <_fflush_r+0xc>
 800940c:	4b05      	ldr	r3, [pc, #20]	; (8009424 <_fflush_r+0x70>)
 800940e:	429c      	cmp	r4, r3
 8009410:	d101      	bne.n	8009416 <_fflush_r+0x62>
 8009412:	68ac      	ldr	r4, [r5, #8]
 8009414:	e7df      	b.n	80093d6 <_fflush_r+0x22>
 8009416:	4b04      	ldr	r3, [pc, #16]	; (8009428 <_fflush_r+0x74>)
 8009418:	429c      	cmp	r4, r3
 800941a:	bf08      	it	eq
 800941c:	68ec      	ldreq	r4, [r5, #12]
 800941e:	e7da      	b.n	80093d6 <_fflush_r+0x22>
 8009420:	08009d64 	.word	0x08009d64
 8009424:	08009d84 	.word	0x08009d84
 8009428:	08009d44 	.word	0x08009d44

0800942c <std>:
 800942c:	2300      	movs	r3, #0
 800942e:	b510      	push	{r4, lr}
 8009430:	4604      	mov	r4, r0
 8009432:	e9c0 3300 	strd	r3, r3, [r0]
 8009436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800943a:	6083      	str	r3, [r0, #8]
 800943c:	8181      	strh	r1, [r0, #12]
 800943e:	6643      	str	r3, [r0, #100]	; 0x64
 8009440:	81c2      	strh	r2, [r0, #14]
 8009442:	6183      	str	r3, [r0, #24]
 8009444:	4619      	mov	r1, r3
 8009446:	2208      	movs	r2, #8
 8009448:	305c      	adds	r0, #92	; 0x5c
 800944a:	f7fb fdcd 	bl	8004fe8 <memset>
 800944e:	4b05      	ldr	r3, [pc, #20]	; (8009464 <std+0x38>)
 8009450:	6263      	str	r3, [r4, #36]	; 0x24
 8009452:	4b05      	ldr	r3, [pc, #20]	; (8009468 <std+0x3c>)
 8009454:	62a3      	str	r3, [r4, #40]	; 0x28
 8009456:	4b05      	ldr	r3, [pc, #20]	; (800946c <std+0x40>)
 8009458:	62e3      	str	r3, [r4, #44]	; 0x2c
 800945a:	4b05      	ldr	r3, [pc, #20]	; (8009470 <std+0x44>)
 800945c:	6224      	str	r4, [r4, #32]
 800945e:	6323      	str	r3, [r4, #48]	; 0x30
 8009460:	bd10      	pop	{r4, pc}
 8009462:	bf00      	nop
 8009464:	08009781 	.word	0x08009781
 8009468:	080097a3 	.word	0x080097a3
 800946c:	080097db 	.word	0x080097db
 8009470:	080097ff 	.word	0x080097ff

08009474 <_cleanup_r>:
 8009474:	4901      	ldr	r1, [pc, #4]	; (800947c <_cleanup_r+0x8>)
 8009476:	f000 b8af 	b.w	80095d8 <_fwalk_reent>
 800947a:	bf00      	nop
 800947c:	080093b5 	.word	0x080093b5

08009480 <__sfmoreglue>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	2268      	movs	r2, #104	; 0x68
 8009484:	1e4d      	subs	r5, r1, #1
 8009486:	4355      	muls	r5, r2
 8009488:	460e      	mov	r6, r1
 800948a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800948e:	f7ff fa59 	bl	8008944 <_malloc_r>
 8009492:	4604      	mov	r4, r0
 8009494:	b140      	cbz	r0, 80094a8 <__sfmoreglue+0x28>
 8009496:	2100      	movs	r1, #0
 8009498:	e9c0 1600 	strd	r1, r6, [r0]
 800949c:	300c      	adds	r0, #12
 800949e:	60a0      	str	r0, [r4, #8]
 80094a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094a4:	f7fb fda0 	bl	8004fe8 <memset>
 80094a8:	4620      	mov	r0, r4
 80094aa:	bd70      	pop	{r4, r5, r6, pc}

080094ac <__sfp_lock_acquire>:
 80094ac:	4801      	ldr	r0, [pc, #4]	; (80094b4 <__sfp_lock_acquire+0x8>)
 80094ae:	f000 b8b3 	b.w	8009618 <__retarget_lock_acquire_recursive>
 80094b2:	bf00      	nop
 80094b4:	20000465 	.word	0x20000465

080094b8 <__sfp_lock_release>:
 80094b8:	4801      	ldr	r0, [pc, #4]	; (80094c0 <__sfp_lock_release+0x8>)
 80094ba:	f000 b8ae 	b.w	800961a <__retarget_lock_release_recursive>
 80094be:	bf00      	nop
 80094c0:	20000465 	.word	0x20000465

080094c4 <__sinit_lock_acquire>:
 80094c4:	4801      	ldr	r0, [pc, #4]	; (80094cc <__sinit_lock_acquire+0x8>)
 80094c6:	f000 b8a7 	b.w	8009618 <__retarget_lock_acquire_recursive>
 80094ca:	bf00      	nop
 80094cc:	20000466 	.word	0x20000466

080094d0 <__sinit_lock_release>:
 80094d0:	4801      	ldr	r0, [pc, #4]	; (80094d8 <__sinit_lock_release+0x8>)
 80094d2:	f000 b8a2 	b.w	800961a <__retarget_lock_release_recursive>
 80094d6:	bf00      	nop
 80094d8:	20000466 	.word	0x20000466

080094dc <__sinit>:
 80094dc:	b510      	push	{r4, lr}
 80094de:	4604      	mov	r4, r0
 80094e0:	f7ff fff0 	bl	80094c4 <__sinit_lock_acquire>
 80094e4:	69a3      	ldr	r3, [r4, #24]
 80094e6:	b11b      	cbz	r3, 80094f0 <__sinit+0x14>
 80094e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094ec:	f7ff bff0 	b.w	80094d0 <__sinit_lock_release>
 80094f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094f4:	6523      	str	r3, [r4, #80]	; 0x50
 80094f6:	4b13      	ldr	r3, [pc, #76]	; (8009544 <__sinit+0x68>)
 80094f8:	4a13      	ldr	r2, [pc, #76]	; (8009548 <__sinit+0x6c>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80094fe:	42a3      	cmp	r3, r4
 8009500:	bf04      	itt	eq
 8009502:	2301      	moveq	r3, #1
 8009504:	61a3      	streq	r3, [r4, #24]
 8009506:	4620      	mov	r0, r4
 8009508:	f000 f820 	bl	800954c <__sfp>
 800950c:	6060      	str	r0, [r4, #4]
 800950e:	4620      	mov	r0, r4
 8009510:	f000 f81c 	bl	800954c <__sfp>
 8009514:	60a0      	str	r0, [r4, #8]
 8009516:	4620      	mov	r0, r4
 8009518:	f000 f818 	bl	800954c <__sfp>
 800951c:	2200      	movs	r2, #0
 800951e:	60e0      	str	r0, [r4, #12]
 8009520:	2104      	movs	r1, #4
 8009522:	6860      	ldr	r0, [r4, #4]
 8009524:	f7ff ff82 	bl	800942c <std>
 8009528:	68a0      	ldr	r0, [r4, #8]
 800952a:	2201      	movs	r2, #1
 800952c:	2109      	movs	r1, #9
 800952e:	f7ff ff7d 	bl	800942c <std>
 8009532:	68e0      	ldr	r0, [r4, #12]
 8009534:	2202      	movs	r2, #2
 8009536:	2112      	movs	r1, #18
 8009538:	f7ff ff78 	bl	800942c <std>
 800953c:	2301      	movs	r3, #1
 800953e:	61a3      	str	r3, [r4, #24]
 8009540:	e7d2      	b.n	80094e8 <__sinit+0xc>
 8009542:	bf00      	nop
 8009544:	08009900 	.word	0x08009900
 8009548:	08009475 	.word	0x08009475

0800954c <__sfp>:
 800954c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954e:	4607      	mov	r7, r0
 8009550:	f7ff ffac 	bl	80094ac <__sfp_lock_acquire>
 8009554:	4b1e      	ldr	r3, [pc, #120]	; (80095d0 <__sfp+0x84>)
 8009556:	681e      	ldr	r6, [r3, #0]
 8009558:	69b3      	ldr	r3, [r6, #24]
 800955a:	b913      	cbnz	r3, 8009562 <__sfp+0x16>
 800955c:	4630      	mov	r0, r6
 800955e:	f7ff ffbd 	bl	80094dc <__sinit>
 8009562:	3648      	adds	r6, #72	; 0x48
 8009564:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009568:	3b01      	subs	r3, #1
 800956a:	d503      	bpl.n	8009574 <__sfp+0x28>
 800956c:	6833      	ldr	r3, [r6, #0]
 800956e:	b30b      	cbz	r3, 80095b4 <__sfp+0x68>
 8009570:	6836      	ldr	r6, [r6, #0]
 8009572:	e7f7      	b.n	8009564 <__sfp+0x18>
 8009574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009578:	b9d5      	cbnz	r5, 80095b0 <__sfp+0x64>
 800957a:	4b16      	ldr	r3, [pc, #88]	; (80095d4 <__sfp+0x88>)
 800957c:	60e3      	str	r3, [r4, #12]
 800957e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009582:	6665      	str	r5, [r4, #100]	; 0x64
 8009584:	f000 f847 	bl	8009616 <__retarget_lock_init_recursive>
 8009588:	f7ff ff96 	bl	80094b8 <__sfp_lock_release>
 800958c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009590:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009594:	6025      	str	r5, [r4, #0]
 8009596:	61a5      	str	r5, [r4, #24]
 8009598:	2208      	movs	r2, #8
 800959a:	4629      	mov	r1, r5
 800959c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095a0:	f7fb fd22 	bl	8004fe8 <memset>
 80095a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095ac:	4620      	mov	r0, r4
 80095ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b0:	3468      	adds	r4, #104	; 0x68
 80095b2:	e7d9      	b.n	8009568 <__sfp+0x1c>
 80095b4:	2104      	movs	r1, #4
 80095b6:	4638      	mov	r0, r7
 80095b8:	f7ff ff62 	bl	8009480 <__sfmoreglue>
 80095bc:	4604      	mov	r4, r0
 80095be:	6030      	str	r0, [r6, #0]
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d1d5      	bne.n	8009570 <__sfp+0x24>
 80095c4:	f7ff ff78 	bl	80094b8 <__sfp_lock_release>
 80095c8:	230c      	movs	r3, #12
 80095ca:	603b      	str	r3, [r7, #0]
 80095cc:	e7ee      	b.n	80095ac <__sfp+0x60>
 80095ce:	bf00      	nop
 80095d0:	08009900 	.word	0x08009900
 80095d4:	ffff0001 	.word	0xffff0001

080095d8 <_fwalk_reent>:
 80095d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095dc:	4606      	mov	r6, r0
 80095de:	4688      	mov	r8, r1
 80095e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095e4:	2700      	movs	r7, #0
 80095e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095ea:	f1b9 0901 	subs.w	r9, r9, #1
 80095ee:	d505      	bpl.n	80095fc <_fwalk_reent+0x24>
 80095f0:	6824      	ldr	r4, [r4, #0]
 80095f2:	2c00      	cmp	r4, #0
 80095f4:	d1f7      	bne.n	80095e6 <_fwalk_reent+0xe>
 80095f6:	4638      	mov	r0, r7
 80095f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095fc:	89ab      	ldrh	r3, [r5, #12]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d907      	bls.n	8009612 <_fwalk_reent+0x3a>
 8009602:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009606:	3301      	adds	r3, #1
 8009608:	d003      	beq.n	8009612 <_fwalk_reent+0x3a>
 800960a:	4629      	mov	r1, r5
 800960c:	4630      	mov	r0, r6
 800960e:	47c0      	blx	r8
 8009610:	4307      	orrs	r7, r0
 8009612:	3568      	adds	r5, #104	; 0x68
 8009614:	e7e9      	b.n	80095ea <_fwalk_reent+0x12>

08009616 <__retarget_lock_init_recursive>:
 8009616:	4770      	bx	lr

08009618 <__retarget_lock_acquire_recursive>:
 8009618:	4770      	bx	lr

0800961a <__retarget_lock_release_recursive>:
 800961a:	4770      	bx	lr

0800961c <__swhatbuf_r>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	460e      	mov	r6, r1
 8009620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009624:	2900      	cmp	r1, #0
 8009626:	b096      	sub	sp, #88	; 0x58
 8009628:	4614      	mov	r4, r2
 800962a:	461d      	mov	r5, r3
 800962c:	da08      	bge.n	8009640 <__swhatbuf_r+0x24>
 800962e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	602a      	str	r2, [r5, #0]
 8009636:	061a      	lsls	r2, r3, #24
 8009638:	d410      	bmi.n	800965c <__swhatbuf_r+0x40>
 800963a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800963e:	e00e      	b.n	800965e <__swhatbuf_r+0x42>
 8009640:	466a      	mov	r2, sp
 8009642:	f000 f903 	bl	800984c <_fstat_r>
 8009646:	2800      	cmp	r0, #0
 8009648:	dbf1      	blt.n	800962e <__swhatbuf_r+0x12>
 800964a:	9a01      	ldr	r2, [sp, #4]
 800964c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009650:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009654:	425a      	negs	r2, r3
 8009656:	415a      	adcs	r2, r3
 8009658:	602a      	str	r2, [r5, #0]
 800965a:	e7ee      	b.n	800963a <__swhatbuf_r+0x1e>
 800965c:	2340      	movs	r3, #64	; 0x40
 800965e:	2000      	movs	r0, #0
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	b016      	add	sp, #88	; 0x58
 8009664:	bd70      	pop	{r4, r5, r6, pc}
	...

08009668 <__smakebuf_r>:
 8009668:	898b      	ldrh	r3, [r1, #12]
 800966a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800966c:	079d      	lsls	r5, r3, #30
 800966e:	4606      	mov	r6, r0
 8009670:	460c      	mov	r4, r1
 8009672:	d507      	bpl.n	8009684 <__smakebuf_r+0x1c>
 8009674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	6123      	str	r3, [r4, #16]
 800967c:	2301      	movs	r3, #1
 800967e:	6163      	str	r3, [r4, #20]
 8009680:	b002      	add	sp, #8
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	ab01      	add	r3, sp, #4
 8009686:	466a      	mov	r2, sp
 8009688:	f7ff ffc8 	bl	800961c <__swhatbuf_r>
 800968c:	9900      	ldr	r1, [sp, #0]
 800968e:	4605      	mov	r5, r0
 8009690:	4630      	mov	r0, r6
 8009692:	f7ff f957 	bl	8008944 <_malloc_r>
 8009696:	b948      	cbnz	r0, 80096ac <__smakebuf_r+0x44>
 8009698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800969c:	059a      	lsls	r2, r3, #22
 800969e:	d4ef      	bmi.n	8009680 <__smakebuf_r+0x18>
 80096a0:	f023 0303 	bic.w	r3, r3, #3
 80096a4:	f043 0302 	orr.w	r3, r3, #2
 80096a8:	81a3      	strh	r3, [r4, #12]
 80096aa:	e7e3      	b.n	8009674 <__smakebuf_r+0xc>
 80096ac:	4b0d      	ldr	r3, [pc, #52]	; (80096e4 <__smakebuf_r+0x7c>)
 80096ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80096b0:	89a3      	ldrh	r3, [r4, #12]
 80096b2:	6020      	str	r0, [r4, #0]
 80096b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b8:	81a3      	strh	r3, [r4, #12]
 80096ba:	9b00      	ldr	r3, [sp, #0]
 80096bc:	6163      	str	r3, [r4, #20]
 80096be:	9b01      	ldr	r3, [sp, #4]
 80096c0:	6120      	str	r0, [r4, #16]
 80096c2:	b15b      	cbz	r3, 80096dc <__smakebuf_r+0x74>
 80096c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096c8:	4630      	mov	r0, r6
 80096ca:	f000 f8d1 	bl	8009870 <_isatty_r>
 80096ce:	b128      	cbz	r0, 80096dc <__smakebuf_r+0x74>
 80096d0:	89a3      	ldrh	r3, [r4, #12]
 80096d2:	f023 0303 	bic.w	r3, r3, #3
 80096d6:	f043 0301 	orr.w	r3, r3, #1
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	89a0      	ldrh	r0, [r4, #12]
 80096de:	4305      	orrs	r5, r0
 80096e0:	81a5      	strh	r5, [r4, #12]
 80096e2:	e7cd      	b.n	8009680 <__smakebuf_r+0x18>
 80096e4:	08009475 	.word	0x08009475

080096e8 <_malloc_usable_size_r>:
 80096e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ec:	1f18      	subs	r0, r3, #4
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	bfbc      	itt	lt
 80096f2:	580b      	ldrlt	r3, [r1, r0]
 80096f4:	18c0      	addlt	r0, r0, r3
 80096f6:	4770      	bx	lr

080096f8 <_raise_r>:
 80096f8:	291f      	cmp	r1, #31
 80096fa:	b538      	push	{r3, r4, r5, lr}
 80096fc:	4604      	mov	r4, r0
 80096fe:	460d      	mov	r5, r1
 8009700:	d904      	bls.n	800970c <_raise_r+0x14>
 8009702:	2316      	movs	r3, #22
 8009704:	6003      	str	r3, [r0, #0]
 8009706:	f04f 30ff 	mov.w	r0, #4294967295
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800970e:	b112      	cbz	r2, 8009716 <_raise_r+0x1e>
 8009710:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009714:	b94b      	cbnz	r3, 800972a <_raise_r+0x32>
 8009716:	4620      	mov	r0, r4
 8009718:	f000 f830 	bl	800977c <_getpid_r>
 800971c:	462a      	mov	r2, r5
 800971e:	4601      	mov	r1, r0
 8009720:	4620      	mov	r0, r4
 8009722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009726:	f000 b817 	b.w	8009758 <_kill_r>
 800972a:	2b01      	cmp	r3, #1
 800972c:	d00a      	beq.n	8009744 <_raise_r+0x4c>
 800972e:	1c59      	adds	r1, r3, #1
 8009730:	d103      	bne.n	800973a <_raise_r+0x42>
 8009732:	2316      	movs	r3, #22
 8009734:	6003      	str	r3, [r0, #0]
 8009736:	2001      	movs	r0, #1
 8009738:	e7e7      	b.n	800970a <_raise_r+0x12>
 800973a:	2400      	movs	r4, #0
 800973c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009740:	4628      	mov	r0, r5
 8009742:	4798      	blx	r3
 8009744:	2000      	movs	r0, #0
 8009746:	e7e0      	b.n	800970a <_raise_r+0x12>

08009748 <raise>:
 8009748:	4b02      	ldr	r3, [pc, #8]	; (8009754 <raise+0xc>)
 800974a:	4601      	mov	r1, r0
 800974c:	6818      	ldr	r0, [r3, #0]
 800974e:	f7ff bfd3 	b.w	80096f8 <_raise_r>
 8009752:	bf00      	nop
 8009754:	2000000c 	.word	0x2000000c

08009758 <_kill_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4d07      	ldr	r5, [pc, #28]	; (8009778 <_kill_r+0x20>)
 800975c:	2300      	movs	r3, #0
 800975e:	4604      	mov	r4, r0
 8009760:	4608      	mov	r0, r1
 8009762:	4611      	mov	r1, r2
 8009764:	602b      	str	r3, [r5, #0]
 8009766:	f7f7 ff5b 	bl	8001620 <_kill>
 800976a:	1c43      	adds	r3, r0, #1
 800976c:	d102      	bne.n	8009774 <_kill_r+0x1c>
 800976e:	682b      	ldr	r3, [r5, #0]
 8009770:	b103      	cbz	r3, 8009774 <_kill_r+0x1c>
 8009772:	6023      	str	r3, [r4, #0]
 8009774:	bd38      	pop	{r3, r4, r5, pc}
 8009776:	bf00      	nop
 8009778:	20000460 	.word	0x20000460

0800977c <_getpid_r>:
 800977c:	f7f7 bf48 	b.w	8001610 <_getpid>

08009780 <__sread>:
 8009780:	b510      	push	{r4, lr}
 8009782:	460c      	mov	r4, r1
 8009784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009788:	f000 f894 	bl	80098b4 <_read_r>
 800978c:	2800      	cmp	r0, #0
 800978e:	bfab      	itete	ge
 8009790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009792:	89a3      	ldrhlt	r3, [r4, #12]
 8009794:	181b      	addge	r3, r3, r0
 8009796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800979a:	bfac      	ite	ge
 800979c:	6563      	strge	r3, [r4, #84]	; 0x54
 800979e:	81a3      	strhlt	r3, [r4, #12]
 80097a0:	bd10      	pop	{r4, pc}

080097a2 <__swrite>:
 80097a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a6:	461f      	mov	r7, r3
 80097a8:	898b      	ldrh	r3, [r1, #12]
 80097aa:	05db      	lsls	r3, r3, #23
 80097ac:	4605      	mov	r5, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	4616      	mov	r6, r2
 80097b2:	d505      	bpl.n	80097c0 <__swrite+0x1e>
 80097b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097b8:	2302      	movs	r3, #2
 80097ba:	2200      	movs	r2, #0
 80097bc:	f000 f868 	bl	8009890 <_lseek_r>
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097ca:	81a3      	strh	r3, [r4, #12]
 80097cc:	4632      	mov	r2, r6
 80097ce:	463b      	mov	r3, r7
 80097d0:	4628      	mov	r0, r5
 80097d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097d6:	f000 b817 	b.w	8009808 <_write_r>

080097da <__sseek>:
 80097da:	b510      	push	{r4, lr}
 80097dc:	460c      	mov	r4, r1
 80097de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e2:	f000 f855 	bl	8009890 <_lseek_r>
 80097e6:	1c43      	adds	r3, r0, #1
 80097e8:	89a3      	ldrh	r3, [r4, #12]
 80097ea:	bf15      	itete	ne
 80097ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80097ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097f6:	81a3      	strheq	r3, [r4, #12]
 80097f8:	bf18      	it	ne
 80097fa:	81a3      	strhne	r3, [r4, #12]
 80097fc:	bd10      	pop	{r4, pc}

080097fe <__sclose>:
 80097fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009802:	f000 b813 	b.w	800982c <_close_r>
	...

08009808 <_write_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4d07      	ldr	r5, [pc, #28]	; (8009828 <_write_r+0x20>)
 800980c:	4604      	mov	r4, r0
 800980e:	4608      	mov	r0, r1
 8009810:	4611      	mov	r1, r2
 8009812:	2200      	movs	r2, #0
 8009814:	602a      	str	r2, [r5, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	f7f7 ff39 	bl	800168e <_write>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	d102      	bne.n	8009826 <_write_r+0x1e>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	b103      	cbz	r3, 8009826 <_write_r+0x1e>
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	20000460 	.word	0x20000460

0800982c <_close_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d06      	ldr	r5, [pc, #24]	; (8009848 <_close_r+0x1c>)
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	602b      	str	r3, [r5, #0]
 8009838:	f7f7 ff45 	bl	80016c6 <_close>
 800983c:	1c43      	adds	r3, r0, #1
 800983e:	d102      	bne.n	8009846 <_close_r+0x1a>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	b103      	cbz	r3, 8009846 <_close_r+0x1a>
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	20000460 	.word	0x20000460

0800984c <_fstat_r>:
 800984c:	b538      	push	{r3, r4, r5, lr}
 800984e:	4d07      	ldr	r5, [pc, #28]	; (800986c <_fstat_r+0x20>)
 8009850:	2300      	movs	r3, #0
 8009852:	4604      	mov	r4, r0
 8009854:	4608      	mov	r0, r1
 8009856:	4611      	mov	r1, r2
 8009858:	602b      	str	r3, [r5, #0]
 800985a:	f7f7 ff40 	bl	80016de <_fstat>
 800985e:	1c43      	adds	r3, r0, #1
 8009860:	d102      	bne.n	8009868 <_fstat_r+0x1c>
 8009862:	682b      	ldr	r3, [r5, #0]
 8009864:	b103      	cbz	r3, 8009868 <_fstat_r+0x1c>
 8009866:	6023      	str	r3, [r4, #0]
 8009868:	bd38      	pop	{r3, r4, r5, pc}
 800986a:	bf00      	nop
 800986c:	20000460 	.word	0x20000460

08009870 <_isatty_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4d06      	ldr	r5, [pc, #24]	; (800988c <_isatty_r+0x1c>)
 8009874:	2300      	movs	r3, #0
 8009876:	4604      	mov	r4, r0
 8009878:	4608      	mov	r0, r1
 800987a:	602b      	str	r3, [r5, #0]
 800987c:	f7f7 ff3f 	bl	80016fe <_isatty>
 8009880:	1c43      	adds	r3, r0, #1
 8009882:	d102      	bne.n	800988a <_isatty_r+0x1a>
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	b103      	cbz	r3, 800988a <_isatty_r+0x1a>
 8009888:	6023      	str	r3, [r4, #0]
 800988a:	bd38      	pop	{r3, r4, r5, pc}
 800988c:	20000460 	.word	0x20000460

08009890 <_lseek_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	4d07      	ldr	r5, [pc, #28]	; (80098b0 <_lseek_r+0x20>)
 8009894:	4604      	mov	r4, r0
 8009896:	4608      	mov	r0, r1
 8009898:	4611      	mov	r1, r2
 800989a:	2200      	movs	r2, #0
 800989c:	602a      	str	r2, [r5, #0]
 800989e:	461a      	mov	r2, r3
 80098a0:	f7f7 ff38 	bl	8001714 <_lseek>
 80098a4:	1c43      	adds	r3, r0, #1
 80098a6:	d102      	bne.n	80098ae <_lseek_r+0x1e>
 80098a8:	682b      	ldr	r3, [r5, #0]
 80098aa:	b103      	cbz	r3, 80098ae <_lseek_r+0x1e>
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	bd38      	pop	{r3, r4, r5, pc}
 80098b0:	20000460 	.word	0x20000460

080098b4 <_read_r>:
 80098b4:	b538      	push	{r3, r4, r5, lr}
 80098b6:	4d07      	ldr	r5, [pc, #28]	; (80098d4 <_read_r+0x20>)
 80098b8:	4604      	mov	r4, r0
 80098ba:	4608      	mov	r0, r1
 80098bc:	4611      	mov	r1, r2
 80098be:	2200      	movs	r2, #0
 80098c0:	602a      	str	r2, [r5, #0]
 80098c2:	461a      	mov	r2, r3
 80098c4:	f7f7 fec6 	bl	8001654 <_read>
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	d102      	bne.n	80098d2 <_read_r+0x1e>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	b103      	cbz	r3, 80098d2 <_read_r+0x1e>
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	20000460 	.word	0x20000460

080098d8 <_init>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	bf00      	nop
 80098dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098de:	bc08      	pop	{r3}
 80098e0:	469e      	mov	lr, r3
 80098e2:	4770      	bx	lr

080098e4 <_fini>:
 80098e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e6:	bf00      	nop
 80098e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ea:	bc08      	pop	{r3}
 80098ec:	469e      	mov	lr, r3
 80098ee:	4770      	bx	lr
