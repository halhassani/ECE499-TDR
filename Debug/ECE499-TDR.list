
ECE499-TDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5a0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019bc  0800a780  0800a780  0001a780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c13c  0800c13c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c13c  0800c13c  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c13c  0800c13c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c13c  0800c13c  0001c13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c140  0800c140  0001c140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  200001f8  0800c33c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  0800c33c  00020844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017449  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000358f  00000000  00000000  00037671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0003ac00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  0003c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000566f  00000000  00000000  0003d5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001abc2  00000000  00000000  00042c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca483  00000000  00000000  0005d809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00127c8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007024  00000000  00000000  00127cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a768 	.word	0x0800a768

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	0800a768 	.word	0x0800a768

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <TDC7200_WriteRegister>:
#include <stdint.h>

extern SPI_HandleTypeDef hspi1; //declared in OG SPI source/header file generated by CubeMX IDE

uint8_t TDC7200_WriteRegister(uint8_t reg, uint8_t* dataToWrite)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
	//select this slave device, CS = 0
	HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f002 f899 	bl	8002e90 <HAL_GPIO_WritePin>

	uint8_t combinedJuicer[2];
	combinedJuicer[0] = reg | TDC_WRITE_CMD;
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	733b      	strb	r3, [r7, #12]
	combinedJuicer[1] = *dataToWrite;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	737b      	strb	r3, [r7, #13]
	/*	Tx 2 bytes to TDC:
			Byte 1: Contains the read/write/auto-increment command bits and desired register to access
			Byte 2: Contains the data in which we want to write into desired register
	*/
	//Tx data via SPI API, if SPI txn fails (ie: != HAL_OK), return -1
	if((HAL_SPI_Transmit(&hspi1, combinedJuicer, 2, HAL_MAX_DELAY)) != HAL_OK)
 8000d6e:	f107 010c 	add.w	r1, r7, #12
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	2202      	movs	r2, #2
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <TDC7200_WriteRegister+0x5c>)
 8000d7a:	f003 fe22 	bl	80049c2 <HAL_SPI_Transmit>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <TDC7200_WriteRegister+0x44>
		return -1;
 8000d84:	23ff      	movs	r3, #255	; 0xff
 8000d86:	e007      	b.n	8000d98 <TDC7200_WriteRegister+0x54>

	//de-select this slave device, set CS line HIGH/1
	HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f002 f87d 	bl	8002e90 <HAL_GPIO_WritePin>

	return 0;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000290 	.word	0x20000290

08000da4 <TDC7200_Read_N_Registers>:



uint32_t TDC7200_Read_N_Registers(uint8_t regToRead, uint8_t n)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	460a      	mov	r2, r1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	4613      	mov	r3, r2
 8000db2:	71bb      	strb	r3, [r7, #6]
	//Note: the TDC chip reads from 1 register (1byte) or 3 registers if AutoIncr bit cmd is used (ie: 3bytes)
	//User chooses whether to send n=1 or n=3 into this function depending on what register(s) they want to read from


	uint8_t	rxSpiData[3]; //this array will hold either 1 or 3 bytes of data sent from TDC register(s)
	uint32_t processedData = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
	uint32_t finalResult = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
	uint8_t regAndOpcode = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	72fb      	strb	r3, [r7, #11]


	if (n == 3) //ie: if reading more than 1 byte..(ex: 3), enable auto_incr cmd bit and read cmd bit
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d105      	bne.n	8000dd2 <TDC7200_Read_N_Registers+0x2e>
		regAndOpcode= regToRead | TDC_READ_CMD | TDC_AUTO_INCR;
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	72fb      	strb	r3, [r7, #11]
 8000dd0:	e001      	b.n	8000dd6 <TDC7200_Read_N_Registers+0x32>

	else //if reading 1 byte, simply attach read cmd bit, no auto incr
		regAndOpcode = regToRead | TDC_READ_CMD;
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	72fb      	strb	r3, [r7, #11]

	//select this slave device, CS = 0
	HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de0:	f002 f856 	bl	8002e90 <HAL_GPIO_WritePin>

	//Tx data via SPI API, if SPI txn fails (ie: != HAL_OK), return -1
	HAL_SPI_Transmit(&hspi1, &regAndOpcode, 1, HAL_MAX_DELAY);
 8000de4:	f107 010b 	add.w	r1, r7, #11
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	2201      	movs	r2, #1
 8000dee:	4815      	ldr	r0, [pc, #84]	; (8000e44 <TDC7200_Read_N_Registers+0xa0>)
 8000df0:	f003 fde7 	bl	80049c2 <HAL_SPI_Transmit>


	//Rx data via SPI API, if SPI rxn fails (ie: != HAL_OK), return -1
	HAL_SPI_Receive(&hspi1, rxSpiData, n, HAL_MAX_DELAY);
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	f107 010c 	add.w	r1, r7, #12
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000e00:	4810      	ldr	r0, [pc, #64]	; (8000e44 <TDC7200_Read_N_Registers+0xa0>)
 8000e02:	f003 ff4c 	bl	8004c9e <HAL_SPI_Receive>




	if(n == 1)
 8000e06:	79bb      	ldrb	r3, [r7, #6]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d101      	bne.n	8000e10 <TDC7200_Read_N_Registers+0x6c>
		processedData = rxSpiData[0];
 8000e0c:	7b3b      	ldrb	r3, [r7, #12]
 8000e0e:	617b      	str	r3, [r7, #20]
	if(n==3)
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d107      	bne.n	8000e26 <TDC7200_Read_N_Registers+0x82>
		processedData = (rxSpiData[0] << 16) | (rxSpiData[1] << 8) | (rxSpiData[2] << 0);
 8000e16:	7b3b      	ldrb	r3, [r7, #12]
 8000e18:	041a      	lsls	r2, r3, #16
 8000e1a:	7b7b      	ldrb	r3, [r7, #13]
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	7bba      	ldrb	r2, [r7, #14]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	617b      	str	r3, [r7, #20]


	finalResult = processedData;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_SET); //release SPI CS line, un-select this slave device
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f002 f82c 	bl	8002e90 <HAL_GPIO_WritePin>
	return finalResult;
 8000e38:	693b      	ldr	r3, [r7, #16]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000290 	.word	0x20000290

08000e48 <myTDC_ReadInterruptRegister>:

uint8_t myTDC_ReadInterruptRegister(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	uint8_t INT_STATUS_REGISTER = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71fb      	strb	r3, [r7, #7]
	INT_STATUS_REGISTER = TDC_READ_CMD | TDC_INT_STATUS;
 8000e52:	2302      	movs	r3, #2
 8000e54:	71fb      	strb	r3, [r7, #7]
	uint8_t retVal = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	71bb      	strb	r3, [r7, #6]

	//select this slave device, CS = 0
	HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f002 f814 	bl	8002e90 <HAL_GPIO_WritePin>

	//Tx data via SPI API, if SPI txn fails (ie: != HAL_OK), return -1
	HAL_SPI_Transmit(&hspi1, &INT_STATUS_REGISTER, 1, HAL_MAX_DELAY);
 8000e68:	1df9      	adds	r1, r7, #7
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6e:	2201      	movs	r2, #1
 8000e70:	480a      	ldr	r0, [pc, #40]	; (8000e9c <myTDC_ReadInterruptRegister+0x54>)
 8000e72:	f003 fda6 	bl	80049c2 <HAL_SPI_Transmit>


	//Rx data via SPI API, if SPI rxn fails (ie: != HAL_OK), return -1
	HAL_SPI_Receive(&hspi1, &retVal, 1, HAL_MAX_DELAY);
 8000e76:	1db9      	adds	r1, r7, #6
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4807      	ldr	r0, [pc, #28]	; (8000e9c <myTDC_ReadInterruptRegister+0x54>)
 8000e80:	f003 ff0d 	bl	8004c9e <HAL_SPI_Receive>

	//de-select this slave device, CS = 1
	HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f001 ffff 	bl	8002e90 <HAL_GPIO_WritePin>

	return retVal;
 8000e92:	79bb      	ldrb	r3, [r7, #6]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000290 	.word	0x20000290

08000ea0 <myTDC_EnablePowerOn>:


//This fxn toggles TDC_EN pin from 0 to 1 to ensure TDC powers up properly
//(TDC must see 1 low-to-high edge on EN pin)
void myTDC_EnablePowerOn(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TDC7200_EN_GPIO_Port, TDC7200_EN_Pin, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	4808      	ldr	r0, [pc, #32]	; (8000ecc <myTDC_EnablePowerOn+0x2c>)
 8000eaa:	f001 fff1 	bl	8002e90 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000eae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb2:	f001 fb1f 	bl	80024f4 <HAL_Delay>
	HAL_GPIO_WritePin(TDC7200_EN_GPIO_Port, TDC7200_EN_Pin, 1);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2101      	movs	r1, #1
 8000eba:	4804      	ldr	r0, [pc, #16]	; (8000ecc <myTDC_EnablePowerOn+0x2c>)
 8000ebc:	f001 ffe8 	bl	8002e90 <HAL_GPIO_WritePin>
	HAL_Delay(500); //Delay cuz TDC requires some time until its internal Vregulator becomes stable
 8000ec0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ec4:	f001 fb16 	bl	80024f4 <HAL_Delay>
					//(TDC7200 datasheet pg.20: 8.4.7 Wait Times for TDC7200 Startup)
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	48001400 	.word	0x48001400

08000ed0 <myTDC_Init>:


//THIS FXN INITIALIZES TDC REGISTERS TO SETTINGS THAT WE WANT, NO CAP
void myTDC_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
	uint8_t regConfigurations = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	71fb      	strb	r3, [r7, #7]

	/***************************** TDC CONFIG_1 REG ******************************/
	regConfigurations = MEASURE_MODE_1 | START_EDGE_RISING | STOP_EDGE_RISING
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	71fb      	strb	r3, [r7, #7]
			|	TRIGG_EDGE_RISING | PARITY_DISABLED | FORCE_CALIBRATION_ON; //ie: setting Config_1 reg to 0x80
	TDC7200_WriteRegister(TDC_CONFIG1, &regConfigurations);
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f7ff ff2e 	bl	8000d44 <TDC7200_WriteRegister>
	regConfigurations = 0; //reset variable to get ready for new register configs
 8000ee8:	2300      	movs	r3, #0
 8000eea:	71fb      	strb	r3, [r7, #7]
	/****************************************************************************/
	/****************************************************************************/


	/***************************** TDC CONFIG_2 REG ******************************/
	regConfigurations = NUM_STOP_SINGLE | AVG_CYCLES_1 | CALIBRATION2_PERIOD_2;
 8000eec:	2300      	movs	r3, #0
 8000eee:	71fb      	strb	r3, [r7, #7]
	TDC7200_WriteRegister(TDC_CONFIG2, &regConfigurations); //ie: setting Config_2 reg to 0x00
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f7ff ff25 	bl	8000d44 <TDC7200_WriteRegister>
	regConfigurations = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	71fb      	strb	r3, [r7, #7]
	/****************************************************************************/
	/****************************************************************************/


	/***************************** TDC INT_MASK REG ******************************/
	regConfigurations = CLOCK_CNTR_OVF_MASK_DISABLED | COARSE_CNTR_OVF_MASK_ENABLED
 8000efe:	2303      	movs	r3, #3
 8000f00:	71fb      	strb	r3, [r7, #7]
			| NEW_MEAS_MASK_ENABLED; 	//ie: disable CLOCK OVF INT flag since this used only
																//in Measurement Mode 2 (and we using Mode 1)
			//ie: setting INT_MASK reg to 0x03

	TDC7200_WriteRegister(TDC_INT_MASK, &regConfigurations);
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	4619      	mov	r1, r3
 8000f06:	2003      	movs	r0, #3
 8000f08:	f7ff ff1c 	bl	8000d44 <TDC7200_WriteRegister>
	regConfigurations = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	71fb      	strb	r3, [r7, #7]
	/****************************************************************************/
	/****************************************************************************/
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <myTDC_CalculateTime>:
		TDC_TIME + TDC_TIME5,
		TDC_TIME + TDC_TIME6,
};

void myTDC_CalculateTime(double* pData)
{
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	*pData = 0;
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	f04f 0300 	mov.w	r3, #0
 8000f2a:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t idx = 0; idx < 6; idx++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f34:	e01e      	b.n	8000f74 <myTDC_CalculateTime+0x5c>
	{
		*pData  += TDC7200_Read_N_Registers((TDC_Time_Registers[idx]),3);
 8000f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f3a:	4a47      	ldr	r2, [pc, #284]	; (8001058 <myTDC_CalculateTime+0x140>)
 8000f3c:	5cd3      	ldrb	r3, [r2, r3]
 8000f3e:	2103      	movs	r1, #3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff2f 	bl	8000da4 <TDC7200_Read_N_Registers>
 8000f46:	4602      	mov	r2, r0
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000f4e:	4610      	mov	r0, r2
 8000f50:	f7ff fb00 	bl	8000554 <__aeabi_ui2d>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4620      	mov	r0, r4
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	f7ff f9be 	bl	80002dc <__adddf3>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t idx = 0; idx < 6; idx++)
 8000f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f78:	2b05      	cmp	r3, #5
 8000f7a:	d9dc      	bls.n	8000f36 <myTDC_CalculateTime+0x1e>
	}

	uint32_t calibrationRegData[2] = {0,0};
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
	calibrationRegData[CALIBRATION_REG_1_DATA] = TDC7200_Read_N_Registers(TDC_CALIBRATION1, 3);
 8000f84:	2103      	movs	r1, #3
 8000f86:	201b      	movs	r0, #27
 8000f88:	f7ff ff0c 	bl	8000da4 <TDC7200_Read_N_Registers>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60bb      	str	r3, [r7, #8]
	//right shift by 1 since bit 23 is a parity bit, nothing to do with the calibration value
	calibrationRegData[CALIBRATION_REG_1_DATA] = (calibrationRegData[CALIBRATION_REG_1_DATA] >> 1);
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	085b      	lsrs	r3, r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
	calibrationRegData[CALIBRATION_REG_2_DATA] = TDC7200_Read_N_Registers(TDC_CALIBRATION2, 3);
 8000f96:	2103      	movs	r1, #3
 8000f98:	201c      	movs	r0, #28
 8000f9a:	f7ff ff03 	bl	8000da4 <TDC7200_Read_N_Registers>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	60fb      	str	r3, [r7, #12]
	//right shift by 1 since bit 23 is a parity bit, nothing to do with the calibration value
	calibrationRegData[CALIBRATION_REG_2_DATA] = (calibrationRegData[CALIBRATION_REG_2_DATA] >> 1);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	085b      	lsrs	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]

	uint32_t calibration2Period = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
	calibration2Period = TDC7200_Read_N_Registers(TDC_CONFIG2, 1); //read entire Config2 register into this var
 8000fac:	2101      	movs	r1, #1
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f7ff fef8 	bl	8000da4 <TDC7200_Read_N_Registers>
 8000fb4:	6238      	str	r0, [r7, #32]
	calibration2Period &= CALIBRATION_PERIOD_pos; //isolate for bits 6 and 7, responsible for calibr.Period value
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000fbc:	623b      	str	r3, [r7, #32]

	//now we check which calibr.period settings were used and assign our variable accordingly
	if(calibration2Period == CALIBRATION2_PERIOD_2) calibration2Period = 2;
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <myTDC_CalculateTime+0xb2>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	623b      	str	r3, [r7, #32]
 8000fc8:	e00d      	b.n	8000fe6 <myTDC_CalculateTime+0xce>
	else if(calibration2Period == CALIBRATION2_PERIOD_10) calibration2Period = 10;
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	2b40      	cmp	r3, #64	; 0x40
 8000fce:	d102      	bne.n	8000fd6 <myTDC_CalculateTime+0xbe>
 8000fd0:	230a      	movs	r3, #10
 8000fd2:	623b      	str	r3, [r7, #32]
 8000fd4:	e007      	b.n	8000fe6 <myTDC_CalculateTime+0xce>
	else if(calibration2Period == CALIBRATION2_PERIOD_20) calibration2Period = 20;
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
 8000fd8:	2b80      	cmp	r3, #128	; 0x80
 8000fda:	d102      	bne.n	8000fe2 <myTDC_CalculateTime+0xca>
 8000fdc:	2314      	movs	r3, #20
 8000fde:	623b      	str	r3, [r7, #32]
 8000fe0:	e001      	b.n	8000fe6 <myTDC_CalculateTime+0xce>
	else calibration2Period = 40;
 8000fe2:	2328      	movs	r3, #40	; 0x28
 8000fe4:	623b      	str	r3, [r7, #32]

	//formula used from TDC7200 datasheet pg.16
	double calCount = ((calibrationRegData[CALIBRATION_REG_2_DATA] - calibrationRegData[CALIBRATION_REG_1_DATA] )
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	1ad3      	subs	r3, r2, r3
			/ ((double)calibration2Period - 1) );
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fab1 	bl	8000554 <__aeabi_ui2d>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	460d      	mov	r5, r1
 8000ff6:	6a38      	ldr	r0, [r7, #32]
 8000ff8:	f7ff faac 	bl	8000554 <__aeabi_ui2d>
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <myTDC_CalculateTime+0x144>)
 8001002:	f7ff f969 	bl	80002d8 <__aeabi_dsub>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
	double calCount = ((calibrationRegData[CALIBRATION_REG_2_DATA] - calibrationRegData[CALIBRATION_REG_1_DATA] )
 800100a:	4620      	mov	r0, r4
 800100c:	4629      	mov	r1, r5
 800100e:	f7ff fc45 	bl	800089c <__aeabi_ddiv>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//formula used from TDC7200 datasheet pg.16
	double normLSB = CLOCK_PERIOD / calCount;
 800101a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800101e:	a10c      	add	r1, pc, #48	; (adr r1, 8001050 <myTDC_CalculateTime+0x138>)
 8001020:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001024:	f7ff fc3a 	bl	800089c <__aeabi_ddiv>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	*pData = (	(*pData) * normLSB	);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001036:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800103a:	f7ff fb05 	bl	8000648 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	; 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bdb0      	pop	{r4, r5, r7, pc}
 8001050:	a0b5ed8d 	.word	0xa0b5ed8d
 8001054:	3e80c6f7 	.word	0x3e80c6f7
 8001058:	20000000 	.word	0x20000000
 800105c:	3ff00000 	.word	0x3ff00000

08001060 <myTDC_StartMeasurement>:



void myTDC_StartMeasurement(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	uint8_t regConfigurations = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	71fb      	strb	r3, [r7, #7]
	regConfigurations = START_MEASUREMENT;
 800106a:	2301      	movs	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
	TDC7200_WriteRegister(TDC_CONFIG1, &regConfigurations);
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	4619      	mov	r1, r3
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff fe66 	bl	8000d44 <TDC7200_WriteRegister>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	; 0x30
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2230      	movs	r2, #48	; 0x30
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f004 fef3 	bl	8005e78 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_DAC1_Init+0x80>)
 8001094:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <MX_DAC1_Init+0x84>)
 8001096:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001098:	4819      	ldr	r0, [pc, #100]	; (8001100 <MX_DAC1_Init+0x80>)
 800109a:	f001 fb5c 	bl	8002756 <HAL_DAC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80010a4:	f000 fba0 	bl	80017e8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80010a8:	2302      	movs	r3, #2
 80010aa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80010b8:	2302      	movs	r3, #2
 80010ba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	480b      	ldr	r0, [pc, #44]	; (8001100 <MX_DAC1_Init+0x80>)
 80010d4:	f001 fb62 	bl	800279c <HAL_DAC_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80010de:	f000 fb83 	bl	80017e8 <Error_Handler>
  }

  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_2047) != HAL_OK)
 80010e2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80010e6:	2100      	movs	r1, #0
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_DAC1_Init+0x80>)
 80010ea:	f001 fcff 	bl	8002aec <HAL_DACEx_TriangleWaveGenerate>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80010f4:	f000 fb78 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3730      	adds	r7, #48	; 0x30
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000214 	.word	0x20000214
 8001104:	50000800 	.word	0x50000800

08001108 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a15      	ldr	r2, [pc, #84]	; (800117c <HAL_DAC_MspInit+0x74>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d124      	bne.n	8001174 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_DAC_MspInit+0x78>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a14      	ldr	r2, [pc, #80]	; (8001180 <HAL_DAC_MspInit+0x78>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_DAC_MspInit+0x78>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_DAC_MspInit+0x78>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_DAC_MspInit+0x78>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_DAC_MspInit+0x78>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800115a:	2310      	movs	r3, #16
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115e:	2303      	movs	r3, #3
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f001 fcf4 	bl	8002b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	50000800 	.word	0x50000800
 8001180:	40021000 	.word	0x40021000

08001184 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800119a:	4b77      	ldr	r3, [pc, #476]	; (8001378 <MX_GPIO_Init+0x1f4>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	4a76      	ldr	r2, [pc, #472]	; (8001378 <MX_GPIO_Init+0x1f4>)
 80011a0:	f043 0320 	orr.w	r3, r3, #32
 80011a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a6:	4b74      	ldr	r3, [pc, #464]	; (8001378 <MX_GPIO_Init+0x1f4>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f003 0320 	and.w	r3, r3, #32
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b2:	4b71      	ldr	r3, [pc, #452]	; (8001378 <MX_GPIO_Init+0x1f4>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a70      	ldr	r2, [pc, #448]	; (8001378 <MX_GPIO_Init+0x1f4>)
 80011b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b6e      	ldr	r3, [pc, #440]	; (8001378 <MX_GPIO_Init+0x1f4>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b6b      	ldr	r3, [pc, #428]	; (8001378 <MX_GPIO_Init+0x1f4>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4a6a      	ldr	r2, [pc, #424]	; (8001378 <MX_GPIO_Init+0x1f4>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4b68      	ldr	r3, [pc, #416]	; (8001378 <MX_GPIO_Init+0x1f4>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	4b65      	ldr	r3, [pc, #404]	; (8001378 <MX_GPIO_Init+0x1f4>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4a64      	ldr	r2, [pc, #400]	; (8001378 <MX_GPIO_Init+0x1f4>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b62      	ldr	r3, [pc, #392]	; (8001378 <MX_GPIO_Init+0x1f4>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TDC7200_EN_GPIO_Port, TDC7200_EN_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2101      	movs	r1, #1
 80011fe:	485f      	ldr	r0, [pc, #380]	; (800137c <MX_GPIO_Init+0x1f8>)
 8001200:	f001 fe46 	bl	8002e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PULSE_SIG_GPIO_Port, PULSE_SIG_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2101      	movs	r1, #1
 8001208:	485d      	ldr	r0, [pc, #372]	; (8001380 <MX_GPIO_Init+0x1fc>)
 800120a:	f001 fe41 	bl	8002e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL345_GPIO_Port, ADXL345_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001218:	f001 fe3a 	bl	8002e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TDC7200_CS_GPIO_Port, TDC7200_CS_Pin, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001226:	f001 fe33 	bl	8002e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDC7200_EN_Pin;
 800122a:	2301      	movs	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001236:	2302      	movs	r3, #2
 8001238:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TDC7200_EN_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	484e      	ldr	r0, [pc, #312]	; (800137c <MX_GPIO_Init+0x1f8>)
 8001242:	f001 fc8b 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001246:	2302      	movs	r3, #2
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124a:	2303      	movs	r3, #3
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4848      	ldr	r0, [pc, #288]	; (800137c <MX_GPIO_Init+0x1f8>)
 800125a:	f001 fc7f 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800125e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001264:	2303      	movs	r3, #3
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	4844      	ldr	r0, [pc, #272]	; (8001384 <MX_GPIO_Init+0x200>)
 8001274:	f001 fc72 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA5 PA6 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001278:	f240 436f 	movw	r3, #1135	; 0x46f
 800127c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127e:	2303      	movs	r3, #3
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001290:	f001 fc64 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 8001294:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ac:	f001 fc56 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_SIG_Pin;
 80012b0:	2301      	movs	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_SIG_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	482e      	ldr	r0, [pc, #184]	; (8001380 <MX_GPIO_Init+0x1fc>)
 80012c8:	f001 fc48 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDC7200_INT_Pin;
 80012cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012d2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TDC7200_INT_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f001 fc39 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADXL345_Pin;
 80012ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f8:	2302      	movs	r3, #2
 80012fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADXL345_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001306:	f001 fc29 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDC7200_CS_Pin;
 800130a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001314:	2301      	movs	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001318:	2302      	movs	r3, #2
 800131a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TDC7200_CS_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001326:	f001 fc19 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDC7200_TRIG_Pin;
 800132a:	2340      	movs	r3, #64	; 0x40
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800132e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TDC7200_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4810      	ldr	r0, [pc, #64]	; (8001380 <MX_GPIO_Init+0x1fc>)
 8001340:	f001 fc0c 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	2303      	movs	r3, #3
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	4809      	ldr	r0, [pc, #36]	; (8001380 <MX_GPIO_Init+0x1fc>)
 800135a:	f001 fbff 	bl	8002b5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2017      	movs	r0, #23
 8001364:	f001 f9c3 	bl	80026ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001368:	2017      	movs	r0, #23
 800136a:	f001 f9da 	bl	8002722 <HAL_NVIC_EnableIRQ>

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000
 800137c:	48001400 	.word	0x48001400
 8001380:	48000400 	.word	0x48000400
 8001384:	48001800 	.word	0x48001800

08001388 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_I2C1_Init+0x74>)
 800138e:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <MX_I2C1_Init+0x78>)
 8001390:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F07BFF;
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_I2C1_Init+0x74>)
 8001394:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <MX_I2C1_Init+0x7c>)
 8001396:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_I2C1_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_I2C1_Init+0x74>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_I2C1_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_I2C1_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_I2C1_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_I2C1_Init+0x74>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_I2C1_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013c2:	480e      	ldr	r0, [pc, #56]	; (80013fc <MX_I2C1_Init+0x74>)
 80013c4:	f001 fd94 	bl	8002ef0 <HAL_I2C_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013ce:	f000 fa0b 	bl	80017e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013d2:	2100      	movs	r1, #0
 80013d4:	4809      	ldr	r0, [pc, #36]	; (80013fc <MX_I2C1_Init+0x74>)
 80013d6:	f002 fa15 	bl	8003804 <HAL_I2CEx_ConfigAnalogFilter>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013e0:	f000 fa02 	bl	80017e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013e4:	2100      	movs	r1, #0
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_I2C1_Init+0x74>)
 80013e8:	f002 fa57 	bl	800389a <HAL_I2CEx_ConfigDigitalFilter>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013f2:	f000 f9f9 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000228 	.word	0x20000228
 8001400:	40005400 	.word	0x40005400
 8001404:	00f07bff 	.word	0x00f07bff

08001408 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b09c      	sub	sp, #112	; 0x70
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001420:	f107 0318 	add.w	r3, r7, #24
 8001424:	2244      	movs	r2, #68	; 0x44
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f004 fd25 	bl	8005e78 <memset>
  if(i2cHandle->Instance==I2C1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a2d      	ldr	r2, [pc, #180]	; (80014e8 <HAL_I2C_MspInit+0xe0>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d153      	bne.n	80014e0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001438:	2340      	movs	r3, #64	; 0x40
 800143a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800143c:	2300      	movs	r3, #0
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	4618      	mov	r0, r3
 8001446:	f003 f821 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001450:	f000 f9ca 	bl	80017e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b25      	ldr	r3, [pc, #148]	; (80014ec <HAL_I2C_MspInit+0xe4>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	4a24      	ldr	r2, [pc, #144]	; (80014ec <HAL_I2C_MspInit+0xe4>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <HAL_I2C_MspInit+0xe4>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <HAL_I2C_MspInit+0xe4>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001470:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <HAL_I2C_MspInit+0xe4>)
 8001472:	f043 0302 	orr.w	r3, r3, #2
 8001476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001478:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <HAL_I2C_MspInit+0xe4>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001488:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148a:	2312      	movs	r3, #18
 800148c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001496:	2304      	movs	r3, #4
 8001498:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a4:	f001 fb5a 	bl	8002b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ac:	2312      	movs	r3, #18
 80014ae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014b8:	2304      	movs	r3, #4
 80014ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014c0:	4619      	mov	r1, r3
 80014c2:	480b      	ldr	r0, [pc, #44]	; (80014f0 <HAL_I2C_MspInit+0xe8>)
 80014c4:	f001 fb4a 	bl	8002b5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_I2C_MspInit+0xe4>)
 80014ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_I2C_MspInit+0xe4>)
 80014ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d2:	6593      	str	r3, [r2, #88]	; 0x58
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_I2C_MspInit+0xe4>)
 80014d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014e0:	bf00      	nop
 80014e2:	3770      	adds	r7, #112	; 0x70
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40005400 	.word	0x40005400
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000400 	.word	0x48000400

080014f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fa:	f000 ff8a 	bl	8002412 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fe:	f000 f8a7 	bl	8001650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //Note: this GPIO pin PB4 is assigned to the system JTAG RESET pin for the onboard JTAG debugger.
  	//Since we arent using JTAG debugging, we can release PB4 pin from this alternate functionality
  		//and it can now be set to any GPIO functionality
  			//(in the MX_GPIO_Init fxn, it assigns PB4 as the SPI MISO line)
    GPIOB->MODER &= ~GPIO_MODER_MODE4_Msk;
 8001502:	4b4a      	ldr	r3, [pc, #296]	; (800162c <main+0x138>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a49      	ldr	r2, [pc, #292]	; (800162c <main+0x138>)
 8001508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800150c:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODE4_0;
 800150e:	4b47      	ldr	r3, [pc, #284]	; (800162c <main+0x138>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a46      	ldr	r2, [pc, #280]	; (800162c <main+0x138>)
 8001514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001518:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151a:	f7ff fe33 	bl	8001184 <MX_GPIO_Init>
  MX_I2C1_Init();
 800151e:	f7ff ff33 	bl	8001388 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001522:	f000 fe7d 	bl	8002220 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001526:	f000 febb 	bl	80022a0 <MX_TIM7_Init>
  MX_TIM3_Init();
 800152a:	f000 fe2b 	bl	8002184 <MX_TIM3_Init>
  MX_TIM2_Init();
 800152e:	f000 fddb 	bl	80020e8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001532:	f000 f95f 	bl	80017f4 <MX_SPI1_Init>
  MX_DAC1_Init();
 8001536:	f7ff fda3 	bl	8001080 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 800153a:	483d      	ldr	r0, [pc, #244]	; (8001630 <main+0x13c>)
 800153c:	f004 f906 	bl	800574c <HAL_TIM_Base_Start_IT>

	SSD1306_Init();		//initialize I2C communication b/w MCU and OLED screen
 8001540:	f000 f9da 	bl	80018f8 <SSD1306_Init>
	myOLED_Startup(); //prints startup message to OLED screen
 8001544:	f000 f8d0 	bl	80016e8 <myOLED_Startup>
	HAL_Delay(2000);
 8001548:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800154c:	f000 ffd2 	bl	80024f4 <HAL_Delay>
	SSD1306_Clear(); //screen clears after 2sec
 8001550:	f000 fbf7 	bl	8001d42 <SSD1306_Clear>



	myTDC_EnablePowerOn();	//This fxn toggles TDC_EN pin from 0 to 1 to ensure TDC powers up properly
 8001554:	f7ff fca4 	bl	8000ea0 <myTDC_EnablePowerOn>
  myTDC_Init(); //this fxn configures various TDC registers to our desired settings
 8001558:	f7ff fcba 	bl	8000ed0 <myTDC_Init>

	myDAC_init(); 	//CONFIGURING DAC1 PERIPHERAL MANUALLY
 800155c:	f000 f8fc 	bl	8001758 <myDAC_init>
				//(Cuz STM32CubeMX IDE doesn't let you configure DAC to output a simple DC voltage, which we want)

	//HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
	uint8_t juicerjuice = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]
	uint32_t TDC_timeValues = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
	double TDC_convertedTime = 0;
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	e9c7 2300 	strd	r2, r3, [r7]
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		SSD1306_Clear();
 8001574:	f000 fbe5 	bl	8001d42 <SSD1306_Clear>
		if(HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == 1)
 8001578:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001580:	f001 fc6e 	bl	8002e60 <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	2b01      	cmp	r3, #1
 8001588:	d130      	bne.n	80015ec <main+0xf8>
		{
			//button debouncing and anti-button-holding-juicer
			HAL_Delay(100);
 800158a:	2064      	movs	r0, #100	; 0x64
 800158c:	f000 ffb2 	bl	80024f4 <HAL_Delay>
			while(HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == 1); //do nothing, wait here until user releases button
 8001590:	bf00      	nop
 8001592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159a:	f001 fc61 	bl	8002e60 <HAL_GPIO_ReadPin>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d0f6      	beq.n	8001592 <main+0x9e>


			myTDC_StartMeasurement(); //MCU will write to TDC configReg to START_MEASUREMENT
 80015a4:	f7ff fd5c 	bl	8001060 <myTDC_StartMeasurement>
			while(gTDC_TrigFlag == 0); //DO NOTHING, WAIT UNTIL TDC_TRIG PIN TRIGGERS MCU ISR, ie: w8 until TDC rdy
 80015a8:	bf00      	nop
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <main+0x140>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0fb      	beq.n	80015aa <main+0xb6>

			//SET PULSE SIGNAL TO HIGH (TDC WILL START MEASUREMENT AS SOON AS MCU SETS THIS PULSE SIGNAL HIGH)
			HAL_GPIO_WritePin(PULSE_SIG_GPIO_Port, PULSE_SIG_Pin, 1);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2101      	movs	r1, #1
 80015b6:	481d      	ldr	r0, [pc, #116]	; (800162c <main+0x138>)
 80015b8:	f001 fc6a 	bl	8002e90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PULSE_SIG_GPIO_Port, PULSE_SIG_Pin, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2101      	movs	r1, #1
 80015c0:	481a      	ldr	r0, [pc, #104]	; (800162c <main+0x138>)
 80015c2:	f001 fc65 	bl	8002e90 <HAL_GPIO_WritePin>

			while(gTDC_IntFlag == 0); //wait here until TDC raises interrupt to MCU
 80015c6:	bf00      	nop
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <main+0x144>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0fb      	beq.n	80015c8 <main+0xd4>
					// (ie: wait for TDC to say to MCU: "MEASUREMENT DONE, COME COLLECT JUICER MEASUREMENTS")

			//yoink the measurements from TDC TIMEx registers and do some black magic math to convert to seconds
			juicerjuice = myTDC_ReadInterruptRegister();
 80015d0:	f7ff fc3a 	bl	8000e48 <myTDC_ReadInterruptRegister>
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]
			myTDC_CalculateTime(&TDC_convertedTime);
 80015d8:	463b      	mov	r3, r7
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fc9c 	bl	8000f18 <myTDC_CalculateTime>


			//reset the TDC-related Trigger and Interrupt flags
			gTDC_TrigFlag = 0;
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <main+0x140>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
			gTDC_IntFlag 	= 0;
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <main+0x144>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
		}


		SSD1306_GotoXY(38, 0);
 80015ec:	2100      	movs	r1, #0
 80015ee:	2026      	movs	r0, #38	; 0x26
 80015f0:	f000 faec 	bl	8001bcc <SSD1306_GotoXY>
		SSD1306_Puts(" TDR ", &Font_11x18, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	4911      	ldr	r1, [pc, #68]	; (800163c <main+0x148>)
 80015f8:	4811      	ldr	r0, [pc, #68]	; (8001640 <main+0x14c>)
 80015fa:	f000 fb7d 	bl	8001cf8 <SSD1306_Puts>


		SSD1306_GotoXY(0, 24);
 80015fe:	2118      	movs	r1, #24
 8001600:	2000      	movs	r0, #0
 8001602:	f000 fae3 	bl	8001bcc <SSD1306_GotoXY>
		sprintf(buff, "Config1: %0.2f", TDC_convertedTime);
 8001606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800160a:	490e      	ldr	r1, [pc, #56]	; (8001644 <main+0x150>)
 800160c:	480e      	ldr	r0, [pc, #56]	; (8001648 <main+0x154>)
 800160e:	f005 fabb 	bl	8006b88 <siprintf>
		SSD1306_Puts(buff, &Font_7x10, 1);
 8001612:	2201      	movs	r2, #1
 8001614:	490d      	ldr	r1, [pc, #52]	; (800164c <main+0x158>)
 8001616:	480c      	ldr	r0, [pc, #48]	; (8001648 <main+0x154>)
 8001618:	f000 fb6e 	bl	8001cf8 <SSD1306_Puts>

		SSD1306_UpdateScreen();
 800161c:	f000 fa30 	bl	8001a80 <SSD1306_UpdateScreen>



		HAL_Delay(1000);
 8001620:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001624:	f000 ff66 	bl	80024f4 <HAL_Delay>
		SSD1306_Clear();
 8001628:	e7a4      	b.n	8001574 <main+0x80>
 800162a:	bf00      	nop
 800162c:	48000400 	.word	0x48000400
 8001630:	20000700 	.word	0x20000700
 8001634:	2000028d 	.word	0x2000028d
 8001638:	2000028e 	.word	0x2000028e
 800163c:	20000010 	.word	0x20000010
 8001640:	0800a780 	.word	0x0800a780
 8001644:	0800a788 	.word	0x0800a788
 8001648:	20000274 	.word	0x20000274
 800164c:	20000008 	.word	0x20000008

08001650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b094      	sub	sp, #80	; 0x50
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0318 	add.w	r3, r7, #24
 800165a:	2238      	movs	r2, #56	; 0x38
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fc0a 	bl	8005e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001672:	2000      	movs	r0, #0
 8001674:	f002 f95e 	bl	8003934 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800167c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001682:	2340      	movs	r3, #64	; 0x40
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001686:	2302      	movs	r3, #2
 8001688:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800168a:	2302      	movs	r3, #2
 800168c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800168e:	2301      	movs	r3, #1
 8001690:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001692:	2314      	movs	r3, #20
 8001694:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001696:	2302      	movs	r3, #2
 8001698:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800169a:	2302      	movs	r3, #2
 800169c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800169e:	2302      	movs	r3, #2
 80016a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a2:	f107 0318 	add.w	r3, r7, #24
 80016a6:	4618      	mov	r0, r3
 80016a8:	f002 f9e8 	bl	8003a7c <HAL_RCC_OscConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016b2:	f000 f899 	bl	80017e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b6:	230f      	movs	r3, #15
 80016b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ba:	2303      	movs	r3, #3
 80016bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2104      	movs	r1, #4
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fcec 	bl	80040ac <HAL_RCC_ClockConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80016da:	f000 f885 	bl	80017e8 <Error_Handler>
  }
}
 80016de:	bf00      	nop
 80016e0:	3750      	adds	r7, #80	; 0x50
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <myOLED_Startup>:
	//HAL_GPIO_TogglePin(TDC7200_EN_GPIO_Port, TDC7200_EN_Pin);
	//signalBit = HAL_GPIO_ReadPin(PULSE_SIG_IN_GPIO_Port, PULSE_SIG_IN_Pin);
}

void myOLED_Startup(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80016ec:	f000 fb29 	bl	8001d42 <SSD1306_Clear>
	SSD1306_GotoXY(38, 0);
 80016f0:	2100      	movs	r1, #0
 80016f2:	2026      	movs	r0, #38	; 0x26
 80016f4:	f000 fa6a 	bl	8001bcc <SSD1306_GotoXY>
	SSD1306_Puts(" TDR ", &Font_11x18, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	4911      	ldr	r1, [pc, #68]	; (8001740 <myOLED_Startup+0x58>)
 80016fc:	4811      	ldr	r0, [pc, #68]	; (8001744 <myOLED_Startup+0x5c>)
 80016fe:	f000 fafb 	bl	8001cf8 <SSD1306_Puts>
	SSD1306_GotoXY(24, 22);
 8001702:	2116      	movs	r1, #22
 8001704:	2018      	movs	r0, #24
 8001706:	f000 fa61 	bl	8001bcc <SSD1306_GotoXY>
	SSD1306_Puts("Time-Domain", &Font_7x10, 1);
 800170a:	2201      	movs	r2, #1
 800170c:	490e      	ldr	r1, [pc, #56]	; (8001748 <myOLED_Startup+0x60>)
 800170e:	480f      	ldr	r0, [pc, #60]	; (800174c <myOLED_Startup+0x64>)
 8001710:	f000 faf2 	bl	8001cf8 <SSD1306_Puts>
	SSD1306_GotoXY(20, 34);
 8001714:	2122      	movs	r1, #34	; 0x22
 8001716:	2014      	movs	r0, #20
 8001718:	f000 fa58 	bl	8001bcc <SSD1306_GotoXY>
	SSD1306_Puts("Reflectometer", &Font_7x10, 1);
 800171c:	2201      	movs	r2, #1
 800171e:	490a      	ldr	r1, [pc, #40]	; (8001748 <myOLED_Startup+0x60>)
 8001720:	480b      	ldr	r0, [pc, #44]	; (8001750 <myOLED_Startup+0x68>)
 8001722:	f000 fae9 	bl	8001cf8 <SSD1306_Puts>

	SSD1306_GotoXY(24, 52);
 8001726:	2134      	movs	r1, #52	; 0x34
 8001728:	2018      	movs	r0, #24
 800172a:	f000 fa4f 	bl	8001bcc <SSD1306_GotoXY>
	SSD1306_Puts("UVic ECE499", &Font_7x10, 1);
 800172e:	2201      	movs	r2, #1
 8001730:	4905      	ldr	r1, [pc, #20]	; (8001748 <myOLED_Startup+0x60>)
 8001732:	4808      	ldr	r0, [pc, #32]	; (8001754 <myOLED_Startup+0x6c>)
 8001734:	f000 fae0 	bl	8001cf8 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001738:	f000 f9a2 	bl	8001a80 <SSD1306_UpdateScreen>
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000010 	.word	0x20000010
 8001744:	0800a780 	.word	0x0800a780
 8001748:	20000008 	.word	0x20000008
 800174c:	0800a798 	.word	0x0800a798
 8001750:	0800a7a4 	.word	0x0800a7a4
 8001754:	0800a7b4 	.word	0x0800a7b4

08001758 <myDAC_init>:


//THIS FXN WILL CONFIGURE DAC TO OUTPUT A STEADY VOLTAGE WHICH WE CAN ADJUST AS DESIRED
void myDAC_init(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  DAC->CR |= DAC_CR_EN1; 	// Enable channel 1 (connected to pin PA4)
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <myDAC_init+0x54>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a12      	ldr	r2, [pc, #72]	; (80017ac <myDAC_init+0x54>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6013      	str	r3, [r2, #0]

  // Configure DAC trigger source (software trigger)
  DAC->CR &= ~DAC_CR_TEN1;
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <myDAC_init+0x54>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <myDAC_init+0x54>)
 800176e:	f023 0302 	bic.w	r3, r3, #2
 8001772:	6013      	str	r3, [r2, #0]
  DAC->CR &= ~DAC_CR_TSEL1;
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <myDAC_init+0x54>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <myDAC_init+0x54>)
 800177a:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 800177e:	6013      	str	r3, [r2, #0]

  DAC->CR |= DAC_CR_EN1;	// Enable DAC
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <myDAC_init+0x54>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a09      	ldr	r2, [pc, #36]	; (80017ac <myDAC_init+0x54>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6013      	str	r3, [r2, #0]

	// Set DAC output voltage to "on" state (e.g., VREF)
	DAC->DHR12R1 = 2047; 	//ie: DAC will output VREF/2 on its' output
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <myDAC_init+0x54>)
 800178e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001792:	609a      	str	r2, [r3, #8]
												//(ex: if VREF = 3.3V, DAC outputs a constant 1.65V)

	// Trigger a DAC conversion - ie: DAC will now output 1.65V dc
	DAC->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <myDAC_init+0x54>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <myDAC_init+0x54>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6053      	str	r3, [r2, #4]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	50000800 	.word	0x50000800

080017b0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
	//confirm that the EXTI was triggered by TDC7200_TRIG_Pin (PIN PB6) and not some rando pin
																					// (since this ISR is shared between pins PB5:PB9)
	if(GPIO_Pin == TDC7200_TRIG_Pin)
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	2b40      	cmp	r3, #64	; 0x40
 80017be:	d102      	bne.n	80017c6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		//TDC HAS RAISED INTERRUPT, SIGNALING TO MCU THAT NEW MEASUREMENT HAS BEGUN
		gTDC_TrigFlag = 1;  //set the triggerFlag variable to 1, then main while loop code juicer will continue
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <HAL_GPIO_EXTI_Callback+0x30>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == TDC7200_INT_Pin)
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017cc:	d102      	bne.n	80017d4 <HAL_GPIO_EXTI_Callback+0x24>
	{
		gTDC_IntFlag = 1;
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
	}
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	2000028d 	.word	0x2000028d
 80017e4:	2000028e 	.word	0x2000028e

080017e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1)
 80017f0:	e7fe      	b.n	80017f0 <Error_Handler+0x8>
	...

080017f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <MX_SPI1_Init+0x74>)
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <MX_SPI1_Init+0x78>)
 80017fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017fe:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <MX_SPI1_Init+0x74>)
 8001800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <MX_SPI1_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800180c:	4b16      	ldr	r3, [pc, #88]	; (8001868 <MX_SPI1_Init+0x74>)
 800180e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001812:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <MX_SPI1_Init+0x74>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <MX_SPI1_Init+0x74>)
 800181c:	2200      	movs	r2, #0
 800181e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_SPI1_Init+0x74>)
 8001822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001826:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_SPI1_Init+0x74>)
 800182a:	2238      	movs	r2, #56	; 0x38
 800182c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_SPI1_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_SPI1_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <MX_SPI1_Init+0x74>)
 800183c:	2200      	movs	r2, #0
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_SPI1_Init+0x74>)
 8001842:	2207      	movs	r2, #7
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <MX_SPI1_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_SPI1_Init+0x74>)
 800184e:	2208      	movs	r2, #8
 8001850:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_SPI1_Init+0x74>)
 8001854:	f003 f80a 	bl	800486c <HAL_SPI_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800185e:	f7ff ffc3 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000290 	.word	0x20000290
 800186c:	40013000 	.word	0x40013000

08001870 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a17      	ldr	r2, [pc, #92]	; (80018ec <HAL_SPI_MspInit+0x7c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d127      	bne.n	80018e2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <HAL_SPI_MspInit+0x80>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001896:	4a16      	ldr	r2, [pc, #88]	; (80018f0 <HAL_SPI_MspInit+0x80>)
 8001898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800189c:	6613      	str	r3, [r2, #96]	; 0x60
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_SPI_MspInit+0x80>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_SPI_MspInit+0x80>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_SPI_MspInit+0x80>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_SPI_MspInit+0x80>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018c2:	2338      	movs	r3, #56	; 0x38
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ce:	2302      	movs	r3, #2
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018d2:	2305      	movs	r3, #5
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <HAL_SPI_MspInit+0x84>)
 80018de:	f001 f93d 	bl	8002b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40013000 	.word	0x40013000
 80018f0:	40021000 	.word	0x40021000
 80018f4:	48000400 	.word	0x48000400

080018f8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80018fe:	f000 fa29 	bl	8001d54 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001902:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001906:	2201      	movs	r2, #1
 8001908:	2178      	movs	r1, #120	; 0x78
 800190a:	485b      	ldr	r0, [pc, #364]	; (8001a78 <SSD1306_Init+0x180>)
 800190c:	f001 fc74 	bl	80031f8 <HAL_I2C_IsDeviceReady>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001916:	2300      	movs	r3, #0
 8001918:	e0a9      	b.n	8001a6e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800191a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800191e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001920:	e002      	b.n	8001928 <SSD1306_Init+0x30>
		p--;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3b01      	subs	r3, #1
 8001926:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f9      	bne.n	8001922 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800192e:	22ae      	movs	r2, #174	; 0xae
 8001930:	2100      	movs	r1, #0
 8001932:	2078      	movs	r0, #120	; 0x78
 8001934:	f000 fa8a 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001938:	2220      	movs	r2, #32
 800193a:	2100      	movs	r1, #0
 800193c:	2078      	movs	r0, #120	; 0x78
 800193e:	f000 fa85 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001942:	2210      	movs	r2, #16
 8001944:	2100      	movs	r1, #0
 8001946:	2078      	movs	r0, #120	; 0x78
 8001948:	f000 fa80 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800194c:	22b0      	movs	r2, #176	; 0xb0
 800194e:	2100      	movs	r1, #0
 8001950:	2078      	movs	r0, #120	; 0x78
 8001952:	f000 fa7b 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001956:	22c8      	movs	r2, #200	; 0xc8
 8001958:	2100      	movs	r1, #0
 800195a:	2078      	movs	r0, #120	; 0x78
 800195c:	f000 fa76 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001960:	2200      	movs	r2, #0
 8001962:	2100      	movs	r1, #0
 8001964:	2078      	movs	r0, #120	; 0x78
 8001966:	f000 fa71 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800196a:	2210      	movs	r2, #16
 800196c:	2100      	movs	r1, #0
 800196e:	2078      	movs	r0, #120	; 0x78
 8001970:	f000 fa6c 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001974:	2240      	movs	r2, #64	; 0x40
 8001976:	2100      	movs	r1, #0
 8001978:	2078      	movs	r0, #120	; 0x78
 800197a:	f000 fa67 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800197e:	2281      	movs	r2, #129	; 0x81
 8001980:	2100      	movs	r1, #0
 8001982:	2078      	movs	r0, #120	; 0x78
 8001984:	f000 fa62 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001988:	22ff      	movs	r2, #255	; 0xff
 800198a:	2100      	movs	r1, #0
 800198c:	2078      	movs	r0, #120	; 0x78
 800198e:	f000 fa5d 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001992:	22a1      	movs	r2, #161	; 0xa1
 8001994:	2100      	movs	r1, #0
 8001996:	2078      	movs	r0, #120	; 0x78
 8001998:	f000 fa58 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800199c:	22a6      	movs	r2, #166	; 0xa6
 800199e:	2100      	movs	r1, #0
 80019a0:	2078      	movs	r0, #120	; 0x78
 80019a2:	f000 fa53 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80019a6:	22a8      	movs	r2, #168	; 0xa8
 80019a8:	2100      	movs	r1, #0
 80019aa:	2078      	movs	r0, #120	; 0x78
 80019ac:	f000 fa4e 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80019b0:	223f      	movs	r2, #63	; 0x3f
 80019b2:	2100      	movs	r1, #0
 80019b4:	2078      	movs	r0, #120	; 0x78
 80019b6:	f000 fa49 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019ba:	22a4      	movs	r2, #164	; 0xa4
 80019bc:	2100      	movs	r1, #0
 80019be:	2078      	movs	r0, #120	; 0x78
 80019c0:	f000 fa44 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80019c4:	22d3      	movs	r2, #211	; 0xd3
 80019c6:	2100      	movs	r1, #0
 80019c8:	2078      	movs	r0, #120	; 0x78
 80019ca:	f000 fa3f 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	2078      	movs	r0, #120	; 0x78
 80019d4:	f000 fa3a 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80019d8:	22d5      	movs	r2, #213	; 0xd5
 80019da:	2100      	movs	r1, #0
 80019dc:	2078      	movs	r0, #120	; 0x78
 80019de:	f000 fa35 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80019e2:	22f0      	movs	r2, #240	; 0xf0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2078      	movs	r0, #120	; 0x78
 80019e8:	f000 fa30 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80019ec:	22d9      	movs	r2, #217	; 0xd9
 80019ee:	2100      	movs	r1, #0
 80019f0:	2078      	movs	r0, #120	; 0x78
 80019f2:	f000 fa2b 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80019f6:	2222      	movs	r2, #34	; 0x22
 80019f8:	2100      	movs	r1, #0
 80019fa:	2078      	movs	r0, #120	; 0x78
 80019fc:	f000 fa26 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001a00:	22da      	movs	r2, #218	; 0xda
 8001a02:	2100      	movs	r1, #0
 8001a04:	2078      	movs	r0, #120	; 0x78
 8001a06:	f000 fa21 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001a0a:	2212      	movs	r2, #18
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2078      	movs	r0, #120	; 0x78
 8001a10:	f000 fa1c 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001a14:	22db      	movs	r2, #219	; 0xdb
 8001a16:	2100      	movs	r1, #0
 8001a18:	2078      	movs	r0, #120	; 0x78
 8001a1a:	f000 fa17 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001a1e:	2220      	movs	r2, #32
 8001a20:	2100      	movs	r1, #0
 8001a22:	2078      	movs	r0, #120	; 0x78
 8001a24:	f000 fa12 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001a28:	228d      	movs	r2, #141	; 0x8d
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2078      	movs	r0, #120	; 0x78
 8001a2e:	f000 fa0d 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001a32:	2214      	movs	r2, #20
 8001a34:	2100      	movs	r1, #0
 8001a36:	2078      	movs	r0, #120	; 0x78
 8001a38:	f000 fa08 	bl	8001e4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001a3c:	22af      	movs	r2, #175	; 0xaf
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2078      	movs	r0, #120	; 0x78
 8001a42:	f000 fa03 	bl	8001e4c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001a46:	222e      	movs	r2, #46	; 0x2e
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2078      	movs	r0, #120	; 0x78
 8001a4c:	f000 f9fe 	bl	8001e4c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f000 f843 	bl	8001adc <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001a56:	f000 f813 	bl	8001a80 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <SSD1306_Init+0x184>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <SSD1306_Init+0x184>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SSD1306_Init+0x184>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001a6c:	2301      	movs	r3, #1
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000228 	.word	0x20000228
 8001a7c:	200006f4 	.word	0x200006f4

08001a80 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001a86:	2300      	movs	r3, #0
 8001a88:	71fb      	strb	r3, [r7, #7]
 8001a8a:	e01d      	b.n	8001ac8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	3b50      	subs	r3, #80	; 0x50
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	2100      	movs	r1, #0
 8001a96:	2078      	movs	r0, #120	; 0x78
 8001a98:	f000 f9d8 	bl	8001e4c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	2078      	movs	r0, #120	; 0x78
 8001aa2:	f000 f9d3 	bl	8001e4c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2078      	movs	r0, #120	; 0x78
 8001aac:	f000 f9ce 	bl	8001e4c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	01db      	lsls	r3, r3, #7
 8001ab4:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <SSD1306_UpdateScreen+0x58>)
 8001ab6:	441a      	add	r2, r3
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	2140      	movs	r1, #64	; 0x40
 8001abc:	2078      	movs	r0, #120	; 0x78
 8001abe:	f000 f95f 	bl	8001d80 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	71fb      	strb	r3, [r7, #7]
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	2b07      	cmp	r3, #7
 8001acc:	d9de      	bls.n	8001a8c <SSD1306_UpdateScreen+0xc>
	}
}
 8001ace:	bf00      	nop
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200002f4 	.word	0x200002f4

08001adc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <SSD1306_Fill+0x14>
 8001aec:	2300      	movs	r3, #0
 8001aee:	e000      	b.n	8001af2 <SSD1306_Fill+0x16>
 8001af0:	23ff      	movs	r3, #255	; 0xff
 8001af2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af6:	4619      	mov	r1, r3
 8001af8:	4803      	ldr	r0, [pc, #12]	; (8001b08 <SSD1306_Fill+0x2c>)
 8001afa:	f004 f9bd 	bl	8005e78 <memset>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200002f4 	.word	0x200002f4

08001b0c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
 8001b16:	460b      	mov	r3, r1
 8001b18:	80bb      	strh	r3, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	70fb      	strb	r3, [r7, #3]
	if (
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	2b7f      	cmp	r3, #127	; 0x7f
 8001b22:	d848      	bhi.n	8001bb6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001b24:	88bb      	ldrh	r3, [r7, #4]
 8001b26:	2b3f      	cmp	r3, #63	; 0x3f
 8001b28:	d845      	bhi.n	8001bb6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <SSD1306_DrawPixel+0xb8>)
 8001b2c:	791b      	ldrb	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bf0c      	ite	eq
 8001b38:	2301      	moveq	r3, #1
 8001b3a:	2300      	movne	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d11a      	bne.n	8001b7c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b46:	88fa      	ldrh	r2, [r7, #6]
 8001b48:	88bb      	ldrh	r3, [r7, #4]
 8001b4a:	08db      	lsrs	r3, r3, #3
 8001b4c:	b298      	uxth	r0, r3
 8001b4e:	4603      	mov	r3, r0
 8001b50:	01db      	lsls	r3, r3, #7
 8001b52:	4413      	add	r3, r2
 8001b54:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <SSD1306_DrawPixel+0xbc>)
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	b25a      	sxtb	r2, r3
 8001b5a:	88bb      	ldrh	r3, [r7, #4]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	2101      	movs	r1, #1
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	b25b      	sxtb	r3, r3
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	b259      	sxtb	r1, r3
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	4603      	mov	r3, r0
 8001b70:	01db      	lsls	r3, r3, #7
 8001b72:	4413      	add	r3, r2
 8001b74:	b2c9      	uxtb	r1, r1
 8001b76:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <SSD1306_DrawPixel+0xbc>)
 8001b78:	54d1      	strb	r1, [r2, r3]
 8001b7a:	e01d      	b.n	8001bb8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	88bb      	ldrh	r3, [r7, #4]
 8001b80:	08db      	lsrs	r3, r3, #3
 8001b82:	b298      	uxth	r0, r3
 8001b84:	4603      	mov	r3, r0
 8001b86:	01db      	lsls	r3, r3, #7
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a0f      	ldr	r2, [pc, #60]	; (8001bc8 <SSD1306_DrawPixel+0xbc>)
 8001b8c:	5cd3      	ldrb	r3, [r2, r3]
 8001b8e:	b25a      	sxtb	r2, r3
 8001b90:	88bb      	ldrh	r3, [r7, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	2101      	movs	r1, #1
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	b25b      	sxtb	r3, r3
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	b259      	sxtb	r1, r3
 8001ba6:	88fa      	ldrh	r2, [r7, #6]
 8001ba8:	4603      	mov	r3, r0
 8001baa:	01db      	lsls	r3, r3, #7
 8001bac:	4413      	add	r3, r2
 8001bae:	b2c9      	uxtb	r1, r1
 8001bb0:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <SSD1306_DrawPixel+0xbc>)
 8001bb2:	54d1      	strb	r1, [r2, r3]
 8001bb4:	e000      	b.n	8001bb8 <SSD1306_DrawPixel+0xac>
		return;
 8001bb6:	bf00      	nop
	}
}
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200006f4 	.word	0x200006f4
 8001bc8:	200002f4 	.word	0x200002f4

08001bcc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	80fb      	strh	r3, [r7, #6]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001bdc:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <SSD1306_GotoXY+0x28>)
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <SSD1306_GotoXY+0x28>)
 8001be4:	88bb      	ldrh	r3, [r7, #4]
 8001be6:	8053      	strh	r3, [r2, #2]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	200006f4 	.word	0x200006f4

08001bf8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
 8001c04:	4613      	mov	r3, r2
 8001c06:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c08:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <SSD1306_Putc+0xfc>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
	if (
 8001c14:	2b7f      	cmp	r3, #127	; 0x7f
 8001c16:	dc07      	bgt.n	8001c28 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001c18:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <SSD1306_Putc+0xfc>)
 8001c1a:	885b      	ldrh	r3, [r3, #2]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	785b      	ldrb	r3, [r3, #1]
 8001c22:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c24:	2b3f      	cmp	r3, #63	; 0x3f
 8001c26:	dd01      	ble.n	8001c2c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e05e      	b.n	8001cea <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e04b      	b.n	8001cca <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	3b20      	subs	r3, #32
 8001c3a:	6839      	ldr	r1, [r7, #0]
 8001c3c:	7849      	ldrb	r1, [r1, #1]
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	4619      	mov	r1, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	440b      	add	r3, r1
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	e030      	b.n	8001cb8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d010      	beq.n	8001c88 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <SSD1306_Putc+0xfc>)
 8001c68:	881a      	ldrh	r2, [r3, #0]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	b298      	uxth	r0, r3
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <SSD1306_Putc+0xfc>)
 8001c74:	885a      	ldrh	r2, [r3, #2]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	79ba      	ldrb	r2, [r7, #6]
 8001c80:	4619      	mov	r1, r3
 8001c82:	f7ff ff43 	bl	8001b0c <SSD1306_DrawPixel>
 8001c86:	e014      	b.n	8001cb2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001c88:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <SSD1306_Putc+0xfc>)
 8001c8a:	881a      	ldrh	r2, [r3, #0]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	b298      	uxth	r0, r3
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <SSD1306_Putc+0xfc>)
 8001c96:	885a      	ldrh	r2, [r3, #2]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b299      	uxth	r1, r3
 8001ca0:	79bb      	ldrb	r3, [r7, #6]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bf0c      	ite	eq
 8001ca6:	2301      	moveq	r3, #1
 8001ca8:	2300      	movne	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	f7ff ff2d 	bl	8001b0c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d3c8      	bcc.n	8001c56 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	785b      	ldrb	r3, [r3, #1]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d3ad      	bcc.n	8001c32 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <SSD1306_Putc+0xfc>)
 8001cd8:	881a      	ldrh	r2, [r3, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <SSD1306_Putc+0xfc>)
 8001ce6:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200006f4 	.word	0x200006f4

08001cf8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	4613      	mov	r3, r2
 8001d04:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001d06:	e012      	b.n	8001d2e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	79fa      	ldrb	r2, [r7, #7]
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff71 	bl	8001bf8 <SSD1306_Putc>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d002      	beq.n	8001d28 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	e008      	b.n	8001d3a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1e8      	bne.n	8001d08 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	781b      	ldrb	r3, [r3, #0]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7ff fec8 	bl	8001adc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001d4c:	f7ff fe98 	bl	8001a80 <SSD1306_UpdateScreen>
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <ssd1306_I2C_Init+0x28>)
 8001d5c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d5e:	e002      	b.n	8001d66 <ssd1306_I2C_Init+0x12>
		p--;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f9      	bne.n	8001d60 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	0003d090 	.word	0x0003d090

08001d80 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b0c7      	sub	sp, #284	; 0x11c
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	4604      	mov	r4, r0
 8001d88:	4608      	mov	r0, r1
 8001d8a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001d8e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001d92:	600a      	str	r2, [r1, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d9a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001d9e:	4622      	mov	r2, r4
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001da6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001daa:	4602      	mov	r2, r0
 8001dac:	701a      	strb	r2, [r3, #0]
 8001dae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001db2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001db6:	460a      	mov	r2, r1
 8001db8:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8001dba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dc2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001dc6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001dca:	7812      	ldrb	r2, [r2, #0]
 8001dcc:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001dd4:	e015      	b.n	8001e02 <ssd1306_I2C_WriteMulti+0x82>
		dt[i + 1] = data[i];
 8001dd6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001dda:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001dde:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	441a      	add	r2, r3
 8001de6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001dea:	3301      	adds	r3, #1
 8001dec:	7811      	ldrb	r1, [r2, #0]
 8001dee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001df2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001df6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001df8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001e02:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001e0c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001e10:	8812      	ldrh	r2, [r2, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d8df      	bhi.n	8001dd6 <ssd1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count + 1, 10);
 8001e16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e1a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b299      	uxth	r1, r3
 8001e22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	f107 020c 	add.w	r2, r7, #12
 8001e34:	200a      	movs	r0, #10
 8001e36:	9000      	str	r0, [sp, #0]
 8001e38:	4803      	ldr	r0, [pc, #12]	; (8001e48 <ssd1306_I2C_WriteMulti+0xc8>)
 8001e3a:	f001 f8e9 	bl	8003010 <HAL_I2C_Master_Transmit>
}
 8001e3e:	bf00      	nop
 8001e40:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd90      	pop	{r4, r7, pc}
 8001e48:	20000228 	.word	0x20000228

08001e4c <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af02      	add	r7, sp, #8
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
 8001e56:	460b      	mov	r3, r1
 8001e58:	71bb      	strb	r3, [r7, #6]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001e5e:	79bb      	ldrb	r3, [r7, #6]
 8001e60:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001e62:	797b      	ldrb	r3, [r7, #5]
 8001e64:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	b299      	uxth	r1, r3
 8001e6a:	f107 020c 	add.w	r2, r7, #12
 8001e6e:	230a      	movs	r3, #10
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2302      	movs	r3, #2
 8001e74:	4803      	ldr	r0, [pc, #12]	; (8001e84 <ssd1306_I2C_Write+0x38>)
 8001e76:	f001 f8cb 	bl	8003010 <HAL_I2C_Master_Transmit>
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000228 	.word	0x20000228

08001e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_MspInit+0x44>)
 8001e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e92:	4a0e      	ldr	r2, [pc, #56]	; (8001ecc <HAL_MspInit+0x44>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6613      	str	r3, [r2, #96]	; 0x60
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <HAL_MspInit+0x44>)
 8001e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_MspInit+0x44>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_MspInit+0x44>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_MspInit+0x44>)
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <NMI_Handler+0x4>

08001ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eda:	e7fe      	b.n	8001eda <HardFault_Handler+0x4>

08001edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <MemManage_Handler+0x4>

08001ee2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <BusFault_Handler+0x4>

08001ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <UsageFault_Handler+0x4>

08001eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1c:	f000 facc 	bl	80024b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TDC7200_TRIG_Pin);
 8001f28:	2040      	movs	r0, #64	; 0x40
 8001f2a:	f000 ffc9 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TDC7200_INT_Pin);
 8001f2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f32:	f000 ffc5 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  return 1;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <_kill>:

int _kill(int pid, int sig)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f54:	f003 ff66 	bl	8005e24 <__errno>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2216      	movs	r2, #22
 8001f5c:	601a      	str	r2, [r3, #0]
  return -1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <_exit>:

void _exit (int status)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f72:	f04f 31ff 	mov.w	r1, #4294967295
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ffe7 	bl	8001f4a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f7c:	e7fe      	b.n	8001f7c <_exit+0x12>

08001f7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	e00a      	b.n	8001fa6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f90:	f3af 8000 	nop.w
 8001f94:	4601      	mov	r1, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	60ba      	str	r2, [r7, #8]
 8001f9c:	b2ca      	uxtb	r2, r1
 8001f9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	dbf0      	blt.n	8001f90 <_read+0x12>
  }

  return len;
 8001fae:	687b      	ldr	r3, [r7, #4]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	e009      	b.n	8001fde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	60ba      	str	r2, [r7, #8]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	dbf1      	blt.n	8001fca <_write+0x12>
  }
  return len;
 8001fe6:	687b      	ldr	r3, [r7, #4]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <_close>:

int _close(int file)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002018:	605a      	str	r2, [r3, #4]
  return 0;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <_isatty>:

int _isatty(int file)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002030:	2301      	movs	r3, #1
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800203e:	b480      	push	{r7}
 8002040:	b085      	sub	sp, #20
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <_sbrk+0x5c>)
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <_sbrk+0x60>)
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <_sbrk+0x64>)
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <_sbrk+0x68>)
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	429a      	cmp	r2, r3
 8002086:	d207      	bcs.n	8002098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002088:	f003 fecc 	bl	8005e24 <__errno>
 800208c:	4603      	mov	r3, r0
 800208e:	220c      	movs	r2, #12
 8002090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	e009      	b.n	80020ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <_sbrk+0x64>)
 80020a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20008000 	.word	0x20008000
 80020b8:	00000400 	.word	0x00000400
 80020bc:	200006fc 	.word	0x200006fc
 80020c0:	20000848 	.word	0x20000848

080020c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <SystemInit+0x20>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <SystemInit+0x20>)
 80020d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	f107 0310 	add.w	r3, r7, #16
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002106:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <MX_TIM2_Init+0x98>)
 8002108:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800210c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <MX_TIM2_Init+0x98>)
 8002110:	f242 720f 	movw	r2, #9999	; 0x270f
 8002114:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <MX_TIM2_Init+0x98>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 47999;
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <MX_TIM2_Init+0x98>)
 800211e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8002122:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <MX_TIM2_Init+0x98>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <MX_TIM2_Init+0x98>)
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002130:	4813      	ldr	r0, [pc, #76]	; (8002180 <MX_TIM2_Init+0x98>)
 8002132:	f003 fab3 	bl	800569c <HAL_TIM_Base_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800213c:	f7ff fb54 	bl	80017e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002144:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002146:	f107 0310 	add.w	r3, r7, #16
 800214a:	4619      	mov	r1, r3
 800214c:	480c      	ldr	r0, [pc, #48]	; (8002180 <MX_TIM2_Init+0x98>)
 800214e:	f003 fbc1 	bl	80058d4 <HAL_TIM_ConfigClockSource>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002158:	f7ff fb46 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800215c:	2320      	movs	r3, #32
 800215e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	4619      	mov	r1, r3
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_TIM2_Init+0x98>)
 800216a:	f003 fdd9 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002174:	f7ff fb38 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	3720      	adds	r7, #32
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000700 	.word	0x20000700

08002184 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	f107 0310 	add.w	r3, r7, #16
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <MX_TIM3_Init+0x94>)
 80021a4:	4a1d      	ldr	r2, [pc, #116]	; (800221c <MX_TIM3_Init+0x98>)
 80021a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <MX_TIM3_Init+0x94>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <MX_TIM3_Init+0x94>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 84;
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <MX_TIM3_Init+0x94>)
 80021b6:	2254      	movs	r2, #84	; 0x54
 80021b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ba:	4b17      	ldr	r3, [pc, #92]	; (8002218 <MX_TIM3_Init+0x94>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c0:	4b15      	ldr	r3, [pc, #84]	; (8002218 <MX_TIM3_Init+0x94>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021c6:	4814      	ldr	r0, [pc, #80]	; (8002218 <MX_TIM3_Init+0x94>)
 80021c8:	f003 fa68 	bl	800569c <HAL_TIM_Base_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80021d2:	f7ff fb09 	bl	80017e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	4619      	mov	r1, r3
 80021e2:	480d      	ldr	r0, [pc, #52]	; (8002218 <MX_TIM3_Init+0x94>)
 80021e4:	f003 fb76 	bl	80058d4 <HAL_TIM_ConfigClockSource>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80021ee:	f7ff fafb 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021f2:	2320      	movs	r3, #32
 80021f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	4619      	mov	r1, r3
 80021fe:	4806      	ldr	r0, [pc, #24]	; (8002218 <MX_TIM3_Init+0x94>)
 8002200:	f003 fd8e 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800220a:	f7ff faed 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800220e:	bf00      	nop
 8002210:	3720      	adds	r7, #32
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	2000074c 	.word	0x2000074c
 800221c:	40000400 	.word	0x40000400

08002220 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <MX_TIM6_Init+0x78>)
 8002232:	4a1a      	ldr	r2, [pc, #104]	; (800229c <MX_TIM6_Init+0x7c>)
 8002234:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40000-1;
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <MX_TIM6_Init+0x78>)
 8002238:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800223c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <MX_TIM6_Init+0x78>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20999;
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <MX_TIM6_Init+0x78>)
 8002246:	f245 2207 	movw	r2, #20999	; 0x5207
 800224a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <MX_TIM6_Init+0x78>)
 800224e:	2200      	movs	r2, #0
 8002250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002252:	4811      	ldr	r0, [pc, #68]	; (8002298 <MX_TIM6_Init+0x78>)
 8002254:	f003 fa22 	bl	800569c <HAL_TIM_Base_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800225e:	f7ff fac3 	bl	80017e8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8002262:	2108      	movs	r1, #8
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <MX_TIM6_Init+0x78>)
 8002266:	f003 fadb 	bl	8005820 <HAL_TIM_OnePulse_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM6_Init+0x54>
  {
    Error_Handler();
 8002270:	f7ff faba 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002274:	2300      	movs	r3, #0
 8002276:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	4619      	mov	r1, r3
 8002280:	4805      	ldr	r0, [pc, #20]	; (8002298 <MX_TIM6_Init+0x78>)
 8002282:	f003 fd4d 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM6_Init+0x70>
  {
    Error_Handler();
 800228c:	f7ff faac 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000798 	.word	0x20000798
 800229c:	40001000 	.word	0x40001000

080022a0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <MX_TIM7_Init+0x64>)
 80022b2:	4a15      	ldr	r2, [pc, #84]	; (8002308 <MX_TIM7_Init+0x68>)
 80022b4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1-1;
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <MX_TIM7_Init+0x64>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <MX_TIM7_Init+0x64>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 84;
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <MX_TIM7_Init+0x64>)
 80022c4:	2254      	movs	r2, #84	; 0x54
 80022c6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <MX_TIM7_Init+0x64>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80022ce:	480d      	ldr	r0, [pc, #52]	; (8002304 <MX_TIM7_Init+0x64>)
 80022d0:	f003 f9e4 	bl	800569c <HAL_TIM_Base_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80022da:	f7ff fa85 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022de:	2320      	movs	r3, #32
 80022e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	4619      	mov	r1, r3
 80022ea:	4806      	ldr	r0, [pc, #24]	; (8002304 <MX_TIM7_Init+0x64>)
 80022ec:	f003 fd18 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80022f6:	f7ff fa77 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200007e4 	.word	0x200007e4
 8002308:	40001400 	.word	0x40001400

0800230c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231c:	d10c      	bne.n	8002338 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800231e:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <HAL_TIM_Base_MspInit+0xa4>)
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	4a23      	ldr	r2, [pc, #140]	; (80023b0 <HAL_TIM_Base_MspInit+0xa4>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6593      	str	r3, [r2, #88]	; 0x58
 800232a:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <HAL_TIM_Base_MspInit+0xa4>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002336:	e034      	b.n	80023a2 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <HAL_TIM_Base_MspInit+0xa8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10c      	bne.n	800235c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002342:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HAL_TIM_Base_MspInit+0xa4>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	4a1a      	ldr	r2, [pc, #104]	; (80023b0 <HAL_TIM_Base_MspInit+0xa4>)
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	6593      	str	r3, [r2, #88]	; 0x58
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_TIM_Base_MspInit+0xa4>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
}
 800235a:	e022      	b.n	80023a2 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM6)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a15      	ldr	r2, [pc, #84]	; (80023b8 <HAL_TIM_Base_MspInit+0xac>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d10c      	bne.n	8002380 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_TIM_Base_MspInit+0xa4>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	4a11      	ldr	r2, [pc, #68]	; (80023b0 <HAL_TIM_Base_MspInit+0xa4>)
 800236c:	f043 0310 	orr.w	r3, r3, #16
 8002370:	6593      	str	r3, [r2, #88]	; 0x58
 8002372:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <HAL_TIM_Base_MspInit+0xa4>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
}
 800237e:	e010      	b.n	80023a2 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM7)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0d      	ldr	r2, [pc, #52]	; (80023bc <HAL_TIM_Base_MspInit+0xb0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d10b      	bne.n	80023a2 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_TIM_Base_MspInit+0xa4>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <HAL_TIM_Base_MspInit+0xa4>)
 8002390:	f043 0320 	orr.w	r3, r3, #32
 8002394:	6593      	str	r3, [r2, #88]	; 0x58
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_TIM_Base_MspInit+0xa4>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
}
 80023a2:	bf00      	nop
 80023a4:	371c      	adds	r7, #28
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40001000 	.word	0x40001000
 80023bc:	40001400 	.word	0x40001400

080023c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023c0:	480d      	ldr	r0, [pc, #52]	; (80023f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c4:	480d      	ldr	r0, [pc, #52]	; (80023fc <LoopForever+0x6>)
  ldr r1, =_edata
 80023c6:	490e      	ldr	r1, [pc, #56]	; (8002400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023c8:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <LoopForever+0xe>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023cc:	e002      	b.n	80023d4 <LoopCopyDataInit>

080023ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d2:	3304      	adds	r3, #4

080023d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d8:	d3f9      	bcc.n	80023ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023dc:	4c0b      	ldr	r4, [pc, #44]	; (800240c <LoopForever+0x16>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e0:	e001      	b.n	80023e6 <LoopFillZerobss>

080023e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e4:	3204      	adds	r2, #4

080023e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e8:	d3fb      	bcc.n	80023e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023ea:	f7ff fe6b 	bl	80020c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ee:	f003 fd1f 	bl	8005e30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023f2:	f7ff f87f 	bl	80014f4 <main>

080023f6 <LoopForever>:

LoopForever:
    b LoopForever
 80023f6:	e7fe      	b.n	80023f6 <LoopForever>
  ldr   r0, =_estack
 80023f8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80023fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002400:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002404:	0800c144 	.word	0x0800c144
  ldr r2, =_sbss
 8002408:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800240c:	20000844 	.word	0x20000844

08002410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002410:	e7fe      	b.n	8002410 <ADC1_2_IRQHandler>

08002412 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800241c:	2003      	movs	r0, #3
 800241e:	f000 f95b 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002422:	2000      	movs	r0, #0
 8002424:	f000 f80e 	bl	8002444 <HAL_InitTick>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	71fb      	strb	r3, [r7, #7]
 8002432:	e001      	b.n	8002438 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002434:	f7ff fd28 	bl	8001e88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002438:	79fb      	ldrb	r3, [r7, #7]

}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002450:	4b16      	ldr	r3, [pc, #88]	; (80024ac <HAL_InitTick+0x68>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d022      	beq.n	800249e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_InitTick+0x6c>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <HAL_InitTick+0x68>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002464:	fbb1 f3f3 	udiv	r3, r1, r3
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f966 	bl	800273e <HAL_SYSTICK_Config>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10f      	bne.n	8002498 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b0f      	cmp	r3, #15
 800247c:	d809      	bhi.n	8002492 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247e:	2200      	movs	r2, #0
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	f04f 30ff 	mov.w	r0, #4294967295
 8002486:	f000 f932 	bl	80026ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <HAL_InitTick+0x70>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e007      	b.n	80024a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
 8002496:	e004      	b.n	80024a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	e001      	b.n	80024a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000020 	.word	0x20000020
 80024b0:	20000018 	.word	0x20000018
 80024b4:	2000001c 	.word	0x2000001c

080024b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_IncTick+0x1c>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_IncTick+0x20>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4413      	add	r3, r2
 80024c6:	4a03      	ldr	r2, [pc, #12]	; (80024d4 <HAL_IncTick+0x1c>)
 80024c8:	6013      	str	r3, [r2, #0]
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	20000830 	.word	0x20000830
 80024d8:	20000020 	.word	0x20000020

080024dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_GetTick+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000830 	.word	0x20000830

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ffee 	bl	80024dc <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d004      	beq.n	8002518 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_Delay+0x40>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4413      	add	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002518:	bf00      	nop
 800251a:	f7ff ffdf 	bl	80024dc <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	429a      	cmp	r2, r3
 8002528:	d8f7      	bhi.n	800251a <HAL_Delay+0x26>
  {
  }
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000020 	.word	0x20000020

08002538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002554:	4013      	ands	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256a:	4a04      	ldr	r2, [pc, #16]	; (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	60d3      	str	r3, [r2, #12]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <__NVIC_GetPriorityGrouping+0x18>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	f003 0307 	and.w	r3, r3, #7
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	db0b      	blt.n	80025c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	4907      	ldr	r1, [pc, #28]	; (80025d4 <__NVIC_EnableIRQ+0x38>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	2001      	movs	r0, #1
 80025be:	fa00 f202 	lsl.w	r2, r0, r2
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000e100 	.word	0xe000e100

080025d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf28      	it	cs
 800264a:	2304      	movcs	r3, #4
 800264c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3304      	adds	r3, #4
 8002652:	2b06      	cmp	r3, #6
 8002654:	d902      	bls.n	800265c <NVIC_EncodePriority+0x30>
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3b03      	subs	r3, #3
 800265a:	e000      	b.n	800265e <NVIC_EncodePriority+0x32>
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	f04f 32ff 	mov.w	r2, #4294967295
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	401a      	ands	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43d9      	mvns	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	4313      	orrs	r3, r2
         );
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a4:	d301      	bcc.n	80026aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00f      	b.n	80026ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <SysTick_Config+0x40>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b2:	210f      	movs	r1, #15
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f7ff ff8e 	bl	80025d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <SysTick_Config+0x40>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c2:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <SysTick_Config+0x40>)
 80026c4:	2207      	movs	r2, #7
 80026c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	e000e010 	.word	0xe000e010

080026d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff29 	bl	8002538 <__NVIC_SetPriorityGrouping>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026fc:	f7ff ff40 	bl	8002580 <__NVIC_GetPriorityGrouping>
 8002700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f7ff ff90 	bl	800262c <NVIC_EncodePriority>
 800270c:	4602      	mov	r2, r0
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff5f 	bl	80025d8 <__NVIC_SetPriority>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff33 	bl	800259c <__NVIC_EnableIRQ>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffa4 	bl	8002694 <SysTick_Config>
 800274c:	4603      	mov	r3, r0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e014      	b.n	8002792 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	791b      	ldrb	r3, [r3, #4]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d105      	bne.n	800277e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7fe fcc5 	bl	8001108 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2202      	movs	r2, #2
 8002782:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	795b      	ldrb	r3, [r3, #5]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_DAC_ConfigChannel+0x18>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e192      	b.n	8002ada <HAL_DAC_ConfigChannel+0x33e>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2202      	movs	r2, #2
 80027be:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d174      	bne.n	80028b2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80027c8:	f7ff fe88 	bl	80024dc <HAL_GetTick>
 80027cc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d134      	bne.n	800283e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80027d4:	e011      	b.n	80027fa <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80027d6:	f7ff fe81 	bl	80024dc <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d90a      	bls.n	80027fa <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f043 0208 	orr.w	r2, r3, #8
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2203      	movs	r2, #3
 80027f4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e16f      	b.n	8002ada <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e6      	bne.n	80027d6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002808:	2001      	movs	r0, #1
 800280a:	f7ff fe73 	bl	80024f4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
 8002818:	e01e      	b.n	8002858 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800281a:	f7ff fe5f 	bl	80024dc <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d90a      	bls.n	800283e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f043 0208 	orr.w	r2, r3, #8
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2203      	movs	r2, #3
 8002838:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e14d      	b.n	8002ada <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002844:	2b00      	cmp	r3, #0
 8002846:	dbe8      	blt.n	800281a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002848:	2001      	movs	r0, #1
 800284a:	f7ff fe53 	bl	80024f4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002856:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002868:	fa01 f303 	lsl.w	r3, r1, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	ea02 0103 	and.w	r1, r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	409a      	lsls	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	21ff      	movs	r1, #255	; 0xff
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	ea02 0103 	and.w	r1, r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	409a      	lsls	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d11d      	bne.n	80028f6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	221f      	movs	r2, #31
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d2:	4013      	ands	r3, r2
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ea:	4313      	orrs	r3, r2
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2207      	movs	r2, #7
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290e:	4013      	ands	r3, r2
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d102      	bne.n	8002920 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
 800291e:	e00f      	b.n	8002940 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d102      	bne.n	800292e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002928:	2301      	movs	r3, #1
 800292a:	623b      	str	r3, [r7, #32]
 800292c:	e008      	b.n	8002940 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002936:	2301      	movs	r3, #1
 8002938:	623b      	str	r3, [r7, #32]
 800293a:	e001      	b.n	8002940 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800293c:	2300      	movs	r3, #0
 800293e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	6a3a      	ldr	r2, [r7, #32]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002962:	4013      	ands	r3, r2
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	791b      	ldrb	r3, [r3, #4]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d102      	bne.n	8002974 <HAL_DAC_ConfigChannel+0x1d8>
 800296e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002972:	e000      	b.n	8002976 <HAL_DAC_ConfigChannel+0x1da>
 8002974:	2300      	movs	r3, #0
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298e:	4013      	ands	r3, r2
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	795b      	ldrb	r3, [r3, #5]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d102      	bne.n	80029a0 <HAL_DAC_ConfigChannel+0x204>
 800299a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800299e:	e000      	b.n	80029a2 <HAL_DAC_ConfigChannel+0x206>
 80029a0:	2300      	movs	r3, #0
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d114      	bne.n	80029e2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80029b8:	f001 fd16 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 80029bc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	4a48      	ldr	r2, [pc, #288]	; (8002ae4 <HAL_DAC_ConfigChannel+0x348>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d904      	bls.n	80029d0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
 80029ce:	e00f      	b.n	80029f0 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	4a45      	ldr	r2, [pc, #276]	; (8002ae8 <HAL_DAC_ConfigChannel+0x34c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d90a      	bls.n	80029ee <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
 80029e0:	e006      	b.n	80029f0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	4313      	orrs	r3, r2
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
 80029ec:	e000      	b.n	80029f0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80029ee:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fe:	4313      	orrs	r3, r2
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	400a      	ands	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a42:	4013      	ands	r3, r2
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a64:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6819      	ldr	r1, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	22c0      	movs	r2, #192	; 0xc0
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	400a      	ands	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	f640 710f 	movw	r1, #3855	; 0xf0f
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	ea02 0103 	and.w	r1, r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3728      	adds	r7, #40	; 0x28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	09896800 	.word	0x09896800
 8002ae8:	04c4b400 	.word	0x04c4b400

08002aec <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	795b      	ldrb	r3, [r3, #5]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_DACEx_TriangleWaveGenerate+0x18>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e024      	b.n	8002b4e <HAL_DACEx_TriangleWaveGenerate+0x62>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	ea02 0103 	and.w	r1, r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	409a      	lsls	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2201      	movs	r2, #1
 8002b44:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b6a:	e15a      	b.n	8002e22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2101      	movs	r1, #1
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 814c 	beq.w	8002e1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d005      	beq.n	8002b9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d130      	bne.n	8002bfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4013      	ands	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	f003 0201 	and.w	r2, r3, #1
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d017      	beq.n	8002c3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	2203      	movs	r2, #3
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d123      	bne.n	8002c8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	08da      	lsrs	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3208      	adds	r2, #8
 8002c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	220f      	movs	r2, #15
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	08da      	lsrs	r2, r3, #3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3208      	adds	r2, #8
 8002c88:	6939      	ldr	r1, [r7, #16]
 8002c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	2203      	movs	r2, #3
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 0203 	and.w	r2, r3, #3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80a6 	beq.w	8002e1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd0:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <HAL_GPIO_Init+0x2e4>)
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd4:	4a5a      	ldr	r2, [pc, #360]	; (8002e40 <HAL_GPIO_Init+0x2e4>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6613      	str	r3, [r2, #96]	; 0x60
 8002cdc:	4b58      	ldr	r3, [pc, #352]	; (8002e40 <HAL_GPIO_Init+0x2e4>)
 8002cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ce8:	4a56      	ldr	r2, [pc, #344]	; (8002e44 <HAL_GPIO_Init+0x2e8>)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	089b      	lsrs	r3, r3, #2
 8002cee:	3302      	adds	r3, #2
 8002cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	220f      	movs	r2, #15
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d12:	d01f      	beq.n	8002d54 <HAL_GPIO_Init+0x1f8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a4c      	ldr	r2, [pc, #304]	; (8002e48 <HAL_GPIO_Init+0x2ec>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d019      	beq.n	8002d50 <HAL_GPIO_Init+0x1f4>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a4b      	ldr	r2, [pc, #300]	; (8002e4c <HAL_GPIO_Init+0x2f0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d013      	beq.n	8002d4c <HAL_GPIO_Init+0x1f0>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a4a      	ldr	r2, [pc, #296]	; (8002e50 <HAL_GPIO_Init+0x2f4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00d      	beq.n	8002d48 <HAL_GPIO_Init+0x1ec>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a49      	ldr	r2, [pc, #292]	; (8002e54 <HAL_GPIO_Init+0x2f8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d007      	beq.n	8002d44 <HAL_GPIO_Init+0x1e8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a48      	ldr	r2, [pc, #288]	; (8002e58 <HAL_GPIO_Init+0x2fc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d101      	bne.n	8002d40 <HAL_GPIO_Init+0x1e4>
 8002d3c:	2305      	movs	r3, #5
 8002d3e:	e00a      	b.n	8002d56 <HAL_GPIO_Init+0x1fa>
 8002d40:	2306      	movs	r3, #6
 8002d42:	e008      	b.n	8002d56 <HAL_GPIO_Init+0x1fa>
 8002d44:	2304      	movs	r3, #4
 8002d46:	e006      	b.n	8002d56 <HAL_GPIO_Init+0x1fa>
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e004      	b.n	8002d56 <HAL_GPIO_Init+0x1fa>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e002      	b.n	8002d56 <HAL_GPIO_Init+0x1fa>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_GPIO_Init+0x1fa>
 8002d54:	2300      	movs	r3, #0
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	f002 0203 	and.w	r2, r2, #3
 8002d5c:	0092      	lsls	r2, r2, #2
 8002d5e:	4093      	lsls	r3, r2
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d66:	4937      	ldr	r1, [pc, #220]	; (8002e44 <HAL_GPIO_Init+0x2e8>)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d74:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d98:	4a30      	ldr	r2, [pc, #192]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d9e:	4b2f      	ldr	r3, [pc, #188]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dc2:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002dc8:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dec:	4a1b      	ldr	r2, [pc, #108]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e16:	4a11      	ldr	r2, [pc, #68]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f47f ae9d 	bne.w	8002b6c <HAL_GPIO_Init+0x10>
  }
}
 8002e32:	bf00      	nop
 8002e34:	bf00      	nop
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40010000 	.word	0x40010000
 8002e48:	48000400 	.word	0x48000400
 8002e4c:	48000800 	.word	0x48000800
 8002e50:	48000c00 	.word	0x48000c00
 8002e54:	48001000 	.word	0x48001000
 8002e58:	48001400 	.word	0x48001400
 8002e5c:	40010400 	.word	0x40010400

08002e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	887b      	ldrh	r3, [r7, #2]
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
 8002e7c:	e001      	b.n	8002e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	807b      	strh	r3, [r7, #2]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ea0:	787b      	ldrb	r3, [r7, #1]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ea6:	887a      	ldrh	r2, [r7, #2]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002eac:	e002      	b.n	8002eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d006      	beq.n	8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ed6:	4a05      	ldr	r2, [pc, #20]	; (8002eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe fc66 	bl	80017b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40010400 	.word	0x40010400

08002ef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e081      	b.n	8003006 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fe fa76 	bl	8001408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2224      	movs	r2, #36	; 0x24
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0201 	bic.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d107      	bne.n	8002f6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	e006      	b.n	8002f78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d104      	bne.n	8002f8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69d9      	ldr	r1, [r3, #28]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1a      	ldr	r2, [r3, #32]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	461a      	mov	r2, r3
 800301c:	460b      	mov	r3, r1
 800301e:	817b      	strh	r3, [r7, #10]
 8003020:	4613      	mov	r3, r2
 8003022:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b20      	cmp	r3, #32
 800302e:	f040 80da 	bne.w	80031e6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_I2C_Master_Transmit+0x30>
 800303c:	2302      	movs	r3, #2
 800303e:	e0d3      	b.n	80031e8 <HAL_I2C_Master_Transmit+0x1d8>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003048:	f7ff fa48 	bl	80024dc <HAL_GetTick>
 800304c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2319      	movs	r3, #25
 8003054:	2201      	movs	r2, #1
 8003056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f9f7 	bl	800344e <I2C_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e0be      	b.n	80031e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2221      	movs	r2, #33	; 0x21
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2210      	movs	r2, #16
 8003076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	893a      	ldrh	r2, [r7, #8]
 800308a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	2bff      	cmp	r3, #255	; 0xff
 800309a:	d90e      	bls.n	80030ba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	22ff      	movs	r2, #255	; 0xff
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	8979      	ldrh	r1, [r7, #10]
 80030aa:	4b51      	ldr	r3, [pc, #324]	; (80031f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fb74 	bl	80037a0 <I2C_TransferConfig>
 80030b8:	e06c      	b.n	8003194 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	8979      	ldrh	r1, [r7, #10]
 80030cc:	4b48      	ldr	r3, [pc, #288]	; (80031f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fb63 	bl	80037a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030da:	e05b      	b.n	8003194 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	6a39      	ldr	r1, [r7, #32]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f9f4 	bl	80034ce <I2C_WaitOnTXISFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e07b      	b.n	80031e8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	781a      	ldrb	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d034      	beq.n	8003194 <HAL_I2C_Master_Transmit+0x184>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	2b00      	cmp	r3, #0
 8003130:	d130      	bne.n	8003194 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	2200      	movs	r2, #0
 800313a:	2180      	movs	r1, #128	; 0x80
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f986 	bl	800344e <I2C_WaitOnFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e04d      	b.n	80031e8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	2bff      	cmp	r3, #255	; 0xff
 8003154:	d90e      	bls.n	8003174 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	22ff      	movs	r2, #255	; 0xff
 800315a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	b2da      	uxtb	r2, r3
 8003162:	8979      	ldrh	r1, [r7, #10]
 8003164:	2300      	movs	r3, #0
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fb17 	bl	80037a0 <I2C_TransferConfig>
 8003172:	e00f      	b.n	8003194 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003182:	b2da      	uxtb	r2, r3
 8003184:	8979      	ldrh	r1, [r7, #10]
 8003186:	2300      	movs	r3, #0
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fb06 	bl	80037a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d19e      	bne.n	80030dc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	6a39      	ldr	r1, [r7, #32]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f9d3 	bl	800354e <I2C_WaitOnSTOPFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e01a      	b.n	80031e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2220      	movs	r2, #32
 80031b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_I2C_Master_Transmit+0x1e4>)
 80031c6:	400b      	ands	r3, r1
 80031c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
  }
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	80002000 	.word	0x80002000
 80031f4:	fe00e800 	.word	0xfe00e800

080031f8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	460b      	mov	r3, r1
 8003206:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b20      	cmp	r3, #32
 8003216:	f040 80f1 	bne.w	80033fc <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003228:	d101      	bne.n	800322e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800322a:	2302      	movs	r3, #2
 800322c:	e0e7      	b.n	80033fe <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_I2C_IsDeviceReady+0x44>
 8003238:	2302      	movs	r3, #2
 800323a:	e0e0      	b.n	80033fe <HAL_I2C_IsDeviceReady+0x206>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2224      	movs	r2, #36	; 0x24
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d107      	bne.n	800326a <HAL_I2C_IsDeviceReady+0x72>
 800325a:	897b      	ldrh	r3, [r7, #10]
 800325c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003260:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003264:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003268:	e004      	b.n	8003274 <HAL_I2C_IsDeviceReady+0x7c>
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003270:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800327a:	f7ff f92f 	bl	80024dc <HAL_GetTick>
 800327e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b20      	cmp	r3, #32
 800328c:	bf0c      	ite	eq
 800328e:	2301      	moveq	r3, #1
 8003290:	2300      	movne	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b10      	cmp	r3, #16
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80032ac:	e034      	b.n	8003318 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d01a      	beq.n	80032ec <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032b6:	f7ff f911 	bl	80024dc <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d302      	bcc.n	80032cc <HAL_I2C_IsDeviceReady+0xd4>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10f      	bne.n	80032ec <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e088      	b.n	80033fe <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	bf0c      	ite	eq
 80032fa:	2301      	moveq	r3, #1
 80032fc:	2300      	movne	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b10      	cmp	r3, #16
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003318:	7ffb      	ldrb	r3, [r7, #31]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d102      	bne.n	8003324 <HAL_I2C_IsDeviceReady+0x12c>
 800331e:	7fbb      	ldrb	r3, [r7, #30]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0c4      	beq.n	80032ae <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b10      	cmp	r3, #16
 8003330:	d01a      	beq.n	8003368 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2200      	movs	r2, #0
 800333a:	2120      	movs	r1, #32
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f886 	bl	800344e <I2C_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e058      	b.n	80033fe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2220      	movs	r2, #32
 8003352:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e04a      	b.n	80033fe <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2200      	movs	r2, #0
 8003370:	2120      	movs	r1, #32
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f86b 	bl	800344e <I2C_WaitOnFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e03d      	b.n	80033fe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2210      	movs	r2, #16
 8003388:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2220      	movs	r2, #32
 8003390:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	429a      	cmp	r2, r3
 8003398:	d118      	bne.n	80033cc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2200      	movs	r2, #0
 80033b2:	2120      	movs	r1, #32
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f84a 	bl	800344e <I2C_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e01c      	b.n	80033fe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2220      	movs	r2, #32
 80033ca:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	3301      	adds	r3, #1
 80033d0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	f63f af3b 	bhi.w	8003252 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80033fc:	2302      	movs	r3, #2
  }
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3720      	adds	r7, #32
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b02      	cmp	r3, #2
 800341a:	d103      	bne.n	8003424 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2200      	movs	r2, #0
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b01      	cmp	r3, #1
 8003430:	d007      	beq.n	8003442 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699a      	ldr	r2, [r3, #24]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	619a      	str	r2, [r3, #24]
  }
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	4613      	mov	r3, r2
 800345c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800345e:	e022      	b.n	80034a6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d01e      	beq.n	80034a6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003468:	f7ff f838 	bl	80024dc <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d302      	bcc.n	800347e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d113      	bne.n	80034a6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	f043 0220 	orr.w	r2, r3, #32
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e00f      	b.n	80034c6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699a      	ldr	r2, [r3, #24]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4013      	ands	r3, r2
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	bf0c      	ite	eq
 80034b6:	2301      	moveq	r3, #1
 80034b8:	2300      	movne	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d0cd      	beq.n	8003460 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034da:	e02c      	b.n	8003536 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f871 	bl	80035c8 <I2C_IsErrorOccurred>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e02a      	b.n	8003546 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f6:	d01e      	beq.n	8003536 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f8:	f7fe fff0 	bl	80024dc <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	d302      	bcc.n	800350e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d113      	bne.n	8003536 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f043 0220 	orr.w	r2, r3, #32
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e007      	b.n	8003546 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b02      	cmp	r3, #2
 8003542:	d1cb      	bne.n	80034dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800355a:	e028      	b.n	80035ae <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f831 	bl	80035c8 <I2C_IsErrorOccurred>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e026      	b.n	80035be <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003570:	f7fe ffb4 	bl	80024dc <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	429a      	cmp	r2, r3
 800357e:	d302      	bcc.n	8003586 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d113      	bne.n	80035ae <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	f043 0220 	orr.w	r2, r3, #32
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e007      	b.n	80035be <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d1cf      	bne.n	800355c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08a      	sub	sp, #40	; 0x28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d075      	beq.n	80036e0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2210      	movs	r2, #16
 80035fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035fc:	e056      	b.n	80036ac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d052      	beq.n	80036ac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003606:	f7fe ff69 	bl	80024dc <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	429a      	cmp	r2, r3
 8003614:	d302      	bcc.n	800361c <I2C_IsErrorOccurred+0x54>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d147      	bne.n	80036ac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003626:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800362e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800363a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363e:	d12e      	bne.n	800369e <I2C_IsErrorOccurred+0xd6>
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003646:	d02a      	beq.n	800369e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003648:	7cfb      	ldrb	r3, [r7, #19]
 800364a:	2b20      	cmp	r3, #32
 800364c:	d027      	beq.n	800369e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800365c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800365e:	f7fe ff3d 	bl	80024dc <HAL_GetTick>
 8003662:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003664:	e01b      	b.n	800369e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003666:	f7fe ff39 	bl	80024dc <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b19      	cmp	r3, #25
 8003672:	d914      	bls.n	800369e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003678:	f043 0220 	orr.w	r2, r3, #32
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d1dc      	bne.n	8003666 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d003      	beq.n	80036c2 <I2C_IsErrorOccurred+0xfa>
 80036ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d09d      	beq.n	80035fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d103      	bne.n	80036d2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2220      	movs	r2, #32
 80036d0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	f043 0304 	orr.w	r3, r3, #4
 80036d8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003702:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00b      	beq.n	800372c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	f043 0308 	orr.w	r3, r3, #8
 800371a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003724:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00b      	beq.n	800374e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	f043 0302 	orr.w	r3, r3, #2
 800373c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003746:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800374e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01c      	beq.n	8003790 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7ff fe55 	bl	8003406 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6859      	ldr	r1, [r3, #4]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <I2C_IsErrorOccurred+0x1d4>)
 8003768:	400b      	ands	r3, r1
 800376a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	431a      	orrs	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003794:	4618      	mov	r0, r3
 8003796:	3728      	adds	r7, #40	; 0x28
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	fe00e800 	.word	0xfe00e800

080037a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	460b      	mov	r3, r1
 80037ac:	817b      	strh	r3, [r7, #10]
 80037ae:	4613      	mov	r3, r2
 80037b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037b2:	897b      	ldrh	r3, [r7, #10]
 80037b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037b8:	7a7b      	ldrb	r3, [r7, #9]
 80037ba:	041b      	lsls	r3, r3, #16
 80037bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037c0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037ce:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	0d5b      	lsrs	r3, r3, #21
 80037da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037de:	4b08      	ldr	r3, [pc, #32]	; (8003800 <I2C_TransferConfig+0x60>)
 80037e0:	430b      	orrs	r3, r1
 80037e2:	43db      	mvns	r3, r3
 80037e4:	ea02 0103 	and.w	r1, r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037f2:	bf00      	nop
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	03ff63ff 	.word	0x03ff63ff

08003804 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b20      	cmp	r3, #32
 8003818:	d138      	bne.n	800388c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003824:	2302      	movs	r3, #2
 8003826:	e032      	b.n	800388e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	; 0x24
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003856:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6819      	ldr	r1, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	e000      	b.n	800388e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800388c:	2302      	movs	r3, #2
  }
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800389a:	b480      	push	{r7}
 800389c:	b085      	sub	sp, #20
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d139      	bne.n	8003924 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e033      	b.n	8003926 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2224      	movs	r2, #36	; 0x24
 80038ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	e000      	b.n	8003926 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003924:	2302      	movs	r3, #2
  }
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d141      	bne.n	80039c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003942:	4b4b      	ldr	r3, [pc, #300]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800394a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394e:	d131      	bne.n	80039b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003950:	4b47      	ldr	r3, [pc, #284]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003956:	4a46      	ldr	r2, [pc, #280]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800395c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003960:	4b43      	ldr	r3, [pc, #268]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003968:	4a41      	ldr	r2, [pc, #260]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800396e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003970:	4b40      	ldr	r3, [pc, #256]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2232      	movs	r2, #50	; 0x32
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	4a3f      	ldr	r2, [pc, #252]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	0c9b      	lsrs	r3, r3, #18
 8003982:	3301      	adds	r3, #1
 8003984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003986:	e002      	b.n	800398e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3b01      	subs	r3, #1
 800398c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800398e:	4b38      	ldr	r3, [pc, #224]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399a:	d102      	bne.n	80039a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f2      	bne.n	8003988 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039a2:	4b33      	ldr	r3, [pc, #204]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ae:	d158      	bne.n	8003a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e057      	b.n	8003a64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039b4:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ba:	4a2d      	ldr	r2, [pc, #180]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039c4:	e04d      	b.n	8003a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039cc:	d141      	bne.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039ce:	4b28      	ldr	r3, [pc, #160]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039da:	d131      	bne.n	8003a40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039dc:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039e2:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039ec:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039f4:	4a1e      	ldr	r2, [pc, #120]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039fc:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2232      	movs	r2, #50	; 0x32
 8003a02:	fb02 f303 	mul.w	r3, r2, r3
 8003a06:	4a1c      	ldr	r2, [pc, #112]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	0c9b      	lsrs	r3, r3, #18
 8003a0e:	3301      	adds	r3, #1
 8003a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a12:	e002      	b.n	8003a1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a26:	d102      	bne.n	8003a2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f2      	bne.n	8003a14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3a:	d112      	bne.n	8003a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e011      	b.n	8003a64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a46:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a50:	e007      	b.n	8003a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a52:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a5a:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	40007000 	.word	0x40007000
 8003a74:	20000018 	.word	0x20000018
 8003a78:	431bde83 	.word	0x431bde83

08003a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e306      	b.n	800409c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d075      	beq.n	8003b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9a:	4b97      	ldr	r3, [pc, #604]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa4:	4b94      	ldr	r3, [pc, #592]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	2b0c      	cmp	r3, #12
 8003ab2:	d102      	bne.n	8003aba <HAL_RCC_OscConfig+0x3e>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d002      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x44>
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d10b      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	4b8d      	ldr	r3, [pc, #564]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d05b      	beq.n	8003b84 <HAL_RCC_OscConfig+0x108>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d157      	bne.n	8003b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e2e1      	b.n	800409c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae0:	d106      	bne.n	8003af0 <HAL_RCC_OscConfig+0x74>
 8003ae2:	4b85      	ldr	r3, [pc, #532]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a84      	ldr	r2, [pc, #528]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	e01d      	b.n	8003b2c <HAL_RCC_OscConfig+0xb0>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x98>
 8003afa:	4b7f      	ldr	r3, [pc, #508]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a7e      	ldr	r2, [pc, #504]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4b7c      	ldr	r3, [pc, #496]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a7b      	ldr	r2, [pc, #492]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	e00b      	b.n	8003b2c <HAL_RCC_OscConfig+0xb0>
 8003b14:	4b78      	ldr	r3, [pc, #480]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a77      	ldr	r2, [pc, #476]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	4b75      	ldr	r3, [pc, #468]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a74      	ldr	r2, [pc, #464]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d013      	beq.n	8003b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fe fcd2 	bl	80024dc <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b3c:	f7fe fcce 	bl	80024dc <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	; 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e2a6      	b.n	800409c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4e:	4b6a      	ldr	r3, [pc, #424]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0xc0>
 8003b5a:	e014      	b.n	8003b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fe fcbe 	bl	80024dc <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fe fcba 	bl	80024dc <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e292      	b.n	800409c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b76:	4b60      	ldr	r3, [pc, #384]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0xe8>
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d075      	beq.n	8003c7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b92:	4b59      	ldr	r3, [pc, #356]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b9c:	4b56      	ldr	r3, [pc, #344]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b0c      	cmp	r3, #12
 8003baa:	d102      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x136>
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d002      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x13c>
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d11f      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bb8:	4b4f      	ldr	r3, [pc, #316]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x154>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e265      	b.n	800409c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd0:	4b49      	ldr	r3, [pc, #292]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	061b      	lsls	r3, r3, #24
 8003bde:	4946      	ldr	r1, [pc, #280]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003be4:	4b45      	ldr	r3, [pc, #276]	; (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe fc2b 	bl	8002444 <HAL_InitTick>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d043      	beq.n	8003c7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e251      	b.n	800409c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d023      	beq.n	8003c48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c00:	4b3d      	ldr	r3, [pc, #244]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a3c      	ldr	r2, [pc, #240]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fe fc66 	bl	80024dc <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c14:	f7fe fc62 	bl	80024dc <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e23a      	b.n	800409c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c26:	4b34      	ldr	r3, [pc, #208]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c32:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	061b      	lsls	r3, r3, #24
 8003c40:	492d      	ldr	r1, [pc, #180]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]
 8003c46:	e01a      	b.n	8003c7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c48:	4b2b      	ldr	r3, [pc, #172]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a2a      	ldr	r2, [pc, #168]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe fc42 	bl	80024dc <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5c:	f7fe fc3e 	bl	80024dc <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e216      	b.n	800409c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c6e:	4b22      	ldr	r3, [pc, #136]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x1e0>
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d041      	beq.n	8003d0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c92:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c98:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca2:	f7fe fc1b 	bl	80024dc <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003caa:	f7fe fc17 	bl	80024dc <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e1ef      	b.n	800409c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cbc:	4b0e      	ldr	r3, [pc, #56]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0ef      	beq.n	8003caa <HAL_RCC_OscConfig+0x22e>
 8003cca:	e020      	b.n	8003d0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd2:	4a09      	ldr	r2, [pc, #36]	; (8003cf8 <HAL_RCC_OscConfig+0x27c>)
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fe fbfe 	bl	80024dc <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ce2:	e00d      	b.n	8003d00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce4:	f7fe fbfa 	bl	80024dc <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d906      	bls.n	8003d00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e1d2      	b.n	800409c <HAL_RCC_OscConfig+0x620>
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d00:	4b8c      	ldr	r3, [pc, #560]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1ea      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80a6 	beq.w	8003e68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d20:	4b84      	ldr	r3, [pc, #528]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_OscConfig+0x2b4>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <HAL_RCC_OscConfig+0x2b6>
 8003d30:	2300      	movs	r3, #0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00d      	beq.n	8003d52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d36:	4b7f      	ldr	r3, [pc, #508]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3a:	4a7e      	ldr	r2, [pc, #504]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d40:	6593      	str	r3, [r2, #88]	; 0x58
 8003d42:	4b7c      	ldr	r3, [pc, #496]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d52:	4b79      	ldr	r3, [pc, #484]	; (8003f38 <HAL_RCC_OscConfig+0x4bc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d118      	bne.n	8003d90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d5e:	4b76      	ldr	r3, [pc, #472]	; (8003f38 <HAL_RCC_OscConfig+0x4bc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a75      	ldr	r2, [pc, #468]	; (8003f38 <HAL_RCC_OscConfig+0x4bc>)
 8003d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d6a:	f7fe fbb7 	bl	80024dc <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d72:	f7fe fbb3 	bl	80024dc <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e18b      	b.n	800409c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d84:	4b6c      	ldr	r3, [pc, #432]	; (8003f38 <HAL_RCC_OscConfig+0x4bc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d108      	bne.n	8003daa <HAL_RCC_OscConfig+0x32e>
 8003d98:	4b66      	ldr	r3, [pc, #408]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	4a65      	ldr	r2, [pc, #404]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da8:	e024      	b.n	8003df4 <HAL_RCC_OscConfig+0x378>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b05      	cmp	r3, #5
 8003db0:	d110      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x358>
 8003db2:	4b60      	ldr	r3, [pc, #384]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db8:	4a5e      	ldr	r2, [pc, #376]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003dba:	f043 0304 	orr.w	r3, r3, #4
 8003dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dc2:	4b5c      	ldr	r3, [pc, #368]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	4a5a      	ldr	r2, [pc, #360]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dd2:	e00f      	b.n	8003df4 <HAL_RCC_OscConfig+0x378>
 8003dd4:	4b57      	ldr	r3, [pc, #348]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	4a56      	ldr	r2, [pc, #344]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de4:	4b53      	ldr	r3, [pc, #332]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	4a52      	ldr	r2, [pc, #328]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003dec:	f023 0304 	bic.w	r3, r3, #4
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d016      	beq.n	8003e2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfc:	f7fe fb6e 	bl	80024dc <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e04:	f7fe fb6a 	bl	80024dc <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e140      	b.n	800409c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1a:	4b46      	ldr	r3, [pc, #280]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0ed      	beq.n	8003e04 <HAL_RCC_OscConfig+0x388>
 8003e28:	e015      	b.n	8003e56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2a:	f7fe fb57 	bl	80024dc <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e30:	e00a      	b.n	8003e48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e32:	f7fe fb53 	bl	80024dc <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e129      	b.n	800409c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e48:	4b3a      	ldr	r3, [pc, #232]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1ed      	bne.n	8003e32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e56:	7ffb      	ldrb	r3, [r7, #31]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d105      	bne.n	8003e68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5c:	4b35      	ldr	r3, [pc, #212]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e60:	4a34      	ldr	r2, [pc, #208]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d03c      	beq.n	8003eee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01c      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e7c:	4b2d      	ldr	r3, [pc, #180]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e82:	4a2c      	ldr	r2, [pc, #176]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8c:	f7fe fb26 	bl	80024dc <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e94:	f7fe fb22 	bl	80024dc <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e0fa      	b.n	800409c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ea6:	4b23      	ldr	r3, [pc, #140]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0ef      	beq.n	8003e94 <HAL_RCC_OscConfig+0x418>
 8003eb4:	e01b      	b.n	8003eee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003eb6:	4b1f      	ldr	r3, [pc, #124]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ebc:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fb09 	bl	80024dc <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ece:	f7fe fb05 	bl	80024dc <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e0dd      	b.n	800409c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ee0:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1ef      	bne.n	8003ece <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80d1 	beq.w	800409a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b0c      	cmp	r3, #12
 8003f02:	f000 808b 	beq.w	800401c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d15e      	bne.n	8003fcc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0e:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a08      	ldr	r2, [pc, #32]	; (8003f34 <HAL_RCC_OscConfig+0x4b8>)
 8003f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1a:	f7fe fadf 	bl	80024dc <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f20:	e00c      	b.n	8003f3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f22:	f7fe fadb 	bl	80024dc <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d905      	bls.n	8003f3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e0b3      	b.n	800409c <HAL_RCC_OscConfig+0x620>
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f3c:	4b59      	ldr	r3, [pc, #356]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1ec      	bne.n	8003f22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f48:	4b56      	ldr	r3, [pc, #344]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	4b56      	ldr	r3, [pc, #344]	; (80040a8 <HAL_RCC_OscConfig+0x62c>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6a11      	ldr	r1, [r2, #32]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f58:	3a01      	subs	r2, #1
 8003f5a:	0112      	lsls	r2, r2, #4
 8003f5c:	4311      	orrs	r1, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003f62:	0212      	lsls	r2, r2, #8
 8003f64:	4311      	orrs	r1, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f6a:	0852      	lsrs	r2, r2, #1
 8003f6c:	3a01      	subs	r2, #1
 8003f6e:	0552      	lsls	r2, r2, #21
 8003f70:	4311      	orrs	r1, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f76:	0852      	lsrs	r2, r2, #1
 8003f78:	3a01      	subs	r2, #1
 8003f7a:	0652      	lsls	r2, r2, #25
 8003f7c:	4311      	orrs	r1, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f82:	06d2      	lsls	r2, r2, #27
 8003f84:	430a      	orrs	r2, r1
 8003f86:	4947      	ldr	r1, [pc, #284]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f8c:	4b45      	ldr	r3, [pc, #276]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a44      	ldr	r2, [pc, #272]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 8003f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f98:	4b42      	ldr	r3, [pc, #264]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4a41      	ldr	r2, [pc, #260]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 8003f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fe fa9a 	bl	80024dc <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fac:	f7fe fa96 	bl	80024dc <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e06e      	b.n	800409c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fbe:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0x530>
 8003fca:	e066      	b.n	800409a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fcc:	4b35      	ldr	r3, [pc, #212]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a34      	ldr	r2, [pc, #208]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 8003fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003fd8:	4b32      	ldr	r3, [pc, #200]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4a31      	ldr	r2, [pc, #196]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 8003fde:	f023 0303 	bic.w	r3, r3, #3
 8003fe2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003fe4:	4b2f      	ldr	r3, [pc, #188]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4a2e      	ldr	r2, [pc, #184]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 8003fea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fe fa72 	bl	80024dc <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fe fa6e 	bl	80024dc <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e046      	b.n	800409c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800400e:	4b25      	ldr	r3, [pc, #148]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0x580>
 800401a:	e03e      	b.n	800409a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e039      	b.n	800409c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004028:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <HAL_RCC_OscConfig+0x628>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f003 0203 	and.w	r2, r3, #3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	429a      	cmp	r2, r3
 800403a:	d12c      	bne.n	8004096 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	3b01      	subs	r3, #1
 8004048:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d123      	bne.n	8004096 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800405a:	429a      	cmp	r2, r3
 800405c:	d11b      	bne.n	8004096 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d113      	bne.n	8004096 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	3b01      	subs	r3, #1
 800407c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d109      	bne.n	8004096 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	3b01      	subs	r3, #1
 8004090:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d001      	beq.n	800409a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3720      	adds	r7, #32
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000
 80040a8:	019f800c 	.word	0x019f800c

080040ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e11e      	b.n	8004302 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040c4:	4b91      	ldr	r3, [pc, #580]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d910      	bls.n	80040f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b8e      	ldr	r3, [pc, #568]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 020f 	bic.w	r2, r3, #15
 80040da:	498c      	ldr	r1, [pc, #560]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b8a      	ldr	r3, [pc, #552]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e106      	b.n	8004302 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d073      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d129      	bne.n	800415c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004108:	4b81      	ldr	r3, [pc, #516]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0f4      	b.n	8004302 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004118:	f000 f972 	bl	8004400 <RCC_GetSysClockFreqFromPLLSource>
 800411c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4a7c      	ldr	r2, [pc, #496]	; (8004314 <HAL_RCC_ClockConfig+0x268>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d93f      	bls.n	80041a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004126:	4b7a      	ldr	r3, [pc, #488]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800413a:	2b00      	cmp	r3, #0
 800413c:	d033      	beq.n	80041a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004142:	2b00      	cmp	r3, #0
 8004144:	d12f      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004146:	4b72      	ldr	r3, [pc, #456]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800414e:	4a70      	ldr	r2, [pc, #448]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 8004150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004154:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	e024      	b.n	80041a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d107      	bne.n	8004174 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004164:	4b6a      	ldr	r3, [pc, #424]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d109      	bne.n	8004184 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0c6      	b.n	8004302 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004174:	4b66      	ldr	r3, [pc, #408]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0be      	b.n	8004302 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004184:	f000 f8ce 	bl	8004324 <HAL_RCC_GetSysClockFreq>
 8004188:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4a61      	ldr	r2, [pc, #388]	; (8004314 <HAL_RCC_ClockConfig+0x268>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d909      	bls.n	80041a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004192:	4b5f      	ldr	r3, [pc, #380]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800419a:	4a5d      	ldr	r2, [pc, #372]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 800419c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041a2:	2380      	movs	r3, #128	; 0x80
 80041a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041a6:	4b5a      	ldr	r3, [pc, #360]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f023 0203 	bic.w	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4957      	ldr	r1, [pc, #348]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b8:	f7fe f990 	bl	80024dc <HAL_GetTick>
 80041bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c0:	f7fe f98c 	bl	80024dc <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e095      	b.n	8004302 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d6:	4b4e      	ldr	r3, [pc, #312]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 020c 	and.w	r2, r3, #12
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d1eb      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d023      	beq.n	800423c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004200:	4b43      	ldr	r3, [pc, #268]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	4a42      	ldr	r2, [pc, #264]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 8004206:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800420a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d007      	beq.n	8004228 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004218:	4b3d      	ldr	r3, [pc, #244]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004220:	4a3b      	ldr	r2, [pc, #236]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 8004222:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004226:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004228:	4b39      	ldr	r3, [pc, #228]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4936      	ldr	r1, [pc, #216]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 8004236:	4313      	orrs	r3, r2
 8004238:	608b      	str	r3, [r1, #8]
 800423a:	e008      	b.n	800424e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b80      	cmp	r3, #128	; 0x80
 8004240:	d105      	bne.n	800424e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004242:	4b33      	ldr	r3, [pc, #204]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	4a32      	ldr	r2, [pc, #200]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 8004248:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800424c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800424e:	4b2f      	ldr	r3, [pc, #188]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d21d      	bcs.n	8004298 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425c:	4b2b      	ldr	r3, [pc, #172]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 020f 	bic.w	r2, r3, #15
 8004264:	4929      	ldr	r1, [pc, #164]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	4313      	orrs	r3, r2
 800426a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800426c:	f7fe f936 	bl	80024dc <HAL_GetTick>
 8004270:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	e00a      	b.n	800428a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004274:	f7fe f932 	bl	80024dc <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e03b      	b.n	8004302 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800428a:	4b20      	ldr	r3, [pc, #128]	; (800430c <HAL_RCC_ClockConfig+0x260>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d1ed      	bne.n	8004274 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a4:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4917      	ldr	r1, [pc, #92]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042c2:	4b13      	ldr	r3, [pc, #76]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	490f      	ldr	r1, [pc, #60]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042d6:	f000 f825 	bl	8004324 <HAL_RCC_GetSysClockFreq>
 80042da:	4602      	mov	r2, r0
 80042dc:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <HAL_RCC_ClockConfig+0x264>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	490c      	ldr	r1, [pc, #48]	; (8004318 <HAL_RCC_ClockConfig+0x26c>)
 80042e8:	5ccb      	ldrb	r3, [r1, r3]
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	fa22 f303 	lsr.w	r3, r2, r3
 80042f2:	4a0a      	ldr	r2, [pc, #40]	; (800431c <HAL_RCC_ClockConfig+0x270>)
 80042f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042f6:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <HAL_RCC_ClockConfig+0x274>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe f8a2 	bl	8002444 <HAL_InitTick>
 8004300:	4603      	mov	r3, r0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40022000 	.word	0x40022000
 8004310:	40021000 	.word	0x40021000
 8004314:	04c4b400 	.word	0x04c4b400
 8004318:	0800bc88 	.word	0x0800bc88
 800431c:	20000018 	.word	0x20000018
 8004320:	2000001c 	.word	0x2000001c

08004324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800432a:	4b2c      	ldr	r3, [pc, #176]	; (80043dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	2b04      	cmp	r3, #4
 8004334:	d102      	bne.n	800433c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004336:	4b2a      	ldr	r3, [pc, #168]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	e047      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800433c:	4b27      	ldr	r3, [pc, #156]	; (80043dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 030c 	and.w	r3, r3, #12
 8004344:	2b08      	cmp	r3, #8
 8004346:	d102      	bne.n	800434e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004348:	4b26      	ldr	r3, [pc, #152]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	e03e      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800434e:	4b23      	ldr	r3, [pc, #140]	; (80043dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 030c 	and.w	r3, r3, #12
 8004356:	2b0c      	cmp	r3, #12
 8004358:	d136      	bne.n	80043c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800435a:	4b20      	ldr	r3, [pc, #128]	; (80043dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004364:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	3301      	adds	r3, #1
 8004370:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d10c      	bne.n	8004392 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004378:	4a1a      	ldr	r2, [pc, #104]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004380:	4a16      	ldr	r2, [pc, #88]	; (80043dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004382:	68d2      	ldr	r2, [r2, #12]
 8004384:	0a12      	lsrs	r2, r2, #8
 8004386:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800438a:	fb02 f303 	mul.w	r3, r2, r3
 800438e:	617b      	str	r3, [r7, #20]
      break;
 8004390:	e00c      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004392:	4a13      	ldr	r2, [pc, #76]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	fbb2 f3f3 	udiv	r3, r2, r3
 800439a:	4a10      	ldr	r2, [pc, #64]	; (80043dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800439c:	68d2      	ldr	r2, [r2, #12]
 800439e:	0a12      	lsrs	r2, r2, #8
 80043a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	617b      	str	r3, [r7, #20]
      break;
 80043aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	0e5b      	lsrs	r3, r3, #25
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	3301      	adds	r3, #1
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	e001      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043cc:	693b      	ldr	r3, [r7, #16]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40021000 	.word	0x40021000
 80043e0:	00f42400 	.word	0x00f42400
 80043e4:	017d7840 	.word	0x017d7840

080043e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000018 	.word	0x20000018

08004400 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004410:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d10c      	bne.n	800443e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004424:	4a17      	ldr	r2, [pc, #92]	; (8004484 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	4a14      	ldr	r2, [pc, #80]	; (8004480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800442e:	68d2      	ldr	r2, [r2, #12]
 8004430:	0a12      	lsrs	r2, r2, #8
 8004432:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	617b      	str	r3, [r7, #20]
    break;
 800443c:	e00c      	b.n	8004458 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800443e:	4a12      	ldr	r2, [pc, #72]	; (8004488 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	fbb2 f3f3 	udiv	r3, r2, r3
 8004446:	4a0e      	ldr	r2, [pc, #56]	; (8004480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004448:	68d2      	ldr	r2, [r2, #12]
 800444a:	0a12      	lsrs	r2, r2, #8
 800444c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004450:	fb02 f303 	mul.w	r3, r2, r3
 8004454:	617b      	str	r3, [r7, #20]
    break;
 8004456:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004458:	4b09      	ldr	r3, [pc, #36]	; (8004480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	0e5b      	lsrs	r3, r3, #25
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	3301      	adds	r3, #1
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004472:	687b      	ldr	r3, [r7, #4]
}
 8004474:	4618      	mov	r0, r3
 8004476:	371c      	adds	r7, #28
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40021000 	.word	0x40021000
 8004484:	017d7840 	.word	0x017d7840
 8004488:	00f42400 	.word	0x00f42400

0800448c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004494:	2300      	movs	r3, #0
 8004496:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004498:	2300      	movs	r3, #0
 800449a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 8098 	beq.w	80045da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044aa:	2300      	movs	r3, #0
 80044ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ae:	4b43      	ldr	r3, [pc, #268]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10d      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ba:	4b40      	ldr	r3, [pc, #256]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	4a3f      	ldr	r2, [pc, #252]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c4:	6593      	str	r3, [r2, #88]	; 0x58
 80044c6:	4b3d      	ldr	r3, [pc, #244]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ce:	60bb      	str	r3, [r7, #8]
 80044d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044d2:	2301      	movs	r3, #1
 80044d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044d6:	4b3a      	ldr	r3, [pc, #232]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a39      	ldr	r2, [pc, #228]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044e2:	f7fd fffb 	bl	80024dc <HAL_GetTick>
 80044e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044e8:	e009      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ea:	f7fd fff7 	bl	80024dc <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d902      	bls.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	74fb      	strb	r3, [r7, #19]
        break;
 80044fc:	e005      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044fe:	4b30      	ldr	r3, [pc, #192]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0ef      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800450a:	7cfb      	ldrb	r3, [r7, #19]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d159      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004510:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d01e      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	429a      	cmp	r2, r3
 800452a:	d019      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800452c:	4b23      	ldr	r3, [pc, #140]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004536:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004538:	4b20      	ldr	r3, [pc, #128]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453e:	4a1f      	ldr	r2, [pc, #124]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004548:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	4a1b      	ldr	r2, [pc, #108]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004558:	4a18      	ldr	r2, [pc, #96]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d016      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7fd ffb7 	bl	80024dc <HAL_GetTick>
 800456e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004570:	e00b      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7fd ffb3 	bl	80024dc <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004580:	4293      	cmp	r3, r2
 8004582:	d902      	bls.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	74fb      	strb	r3, [r7, #19]
            break;
 8004588:	e006      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800458a:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0ec      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10b      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800459e:	4b07      	ldr	r3, [pc, #28]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	4903      	ldr	r1, [pc, #12]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045b4:	e008      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045b6:	7cfb      	ldrb	r3, [r7, #19]
 80045b8:	74bb      	strb	r3, [r7, #18]
 80045ba:	e005      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045bc:	40021000 	.word	0x40021000
 80045c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045c8:	7c7b      	ldrb	r3, [r7, #17]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d105      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ce:	4ba6      	ldr	r3, [pc, #664]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d2:	4aa5      	ldr	r2, [pc, #660]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045e6:	4ba0      	ldr	r3, [pc, #640]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ec:	f023 0203 	bic.w	r2, r3, #3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	499c      	ldr	r1, [pc, #624]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004608:	4b97      	ldr	r3, [pc, #604]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460e:	f023 020c 	bic.w	r2, r3, #12
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	4994      	ldr	r1, [pc, #592]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800462a:	4b8f      	ldr	r3, [pc, #572]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	498b      	ldr	r1, [pc, #556]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800464c:	4b86      	ldr	r3, [pc, #536]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004652:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	4983      	ldr	r1, [pc, #524]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800466e:	4b7e      	ldr	r3, [pc, #504]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004674:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	497a      	ldr	r1, [pc, #488]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004690:	4b75      	ldr	r3, [pc, #468]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004696:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	4972      	ldr	r1, [pc, #456]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046b2:	4b6d      	ldr	r3, [pc, #436]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	4969      	ldr	r1, [pc, #420]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046d4:	4b64      	ldr	r3, [pc, #400]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	4961      	ldr	r1, [pc, #388]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046f6:	4b5c      	ldr	r3, [pc, #368]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	4958      	ldr	r1, [pc, #352]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004714:	2b00      	cmp	r3, #0
 8004716:	d015      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004718:	4b53      	ldr	r3, [pc, #332]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	4950      	ldr	r1, [pc, #320]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004736:	d105      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004738:	4b4b      	ldr	r3, [pc, #300]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a4a      	ldr	r2, [pc, #296]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004742:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474c:	2b00      	cmp	r3, #0
 800474e:	d015      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004750:	4b45      	ldr	r3, [pc, #276]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004756:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	4942      	ldr	r1, [pc, #264]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800476e:	d105      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004770:	4b3d      	ldr	r3, [pc, #244]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a3c      	ldr	r2, [pc, #240]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800477a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004788:	4b37      	ldr	r3, [pc, #220]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	4934      	ldr	r1, [pc, #208]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047a6:	d105      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a8:	4b2f      	ldr	r3, [pc, #188]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a2e      	ldr	r2, [pc, #184]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d015      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047c0:	4b29      	ldr	r3, [pc, #164]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	4926      	ldr	r1, [pc, #152]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047de:	d105      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e0:	4b21      	ldr	r3, [pc, #132]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4a20      	ldr	r2, [pc, #128]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d015      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	4918      	ldr	r1, [pc, #96]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004816:	d105      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004818:	4b13      	ldr	r3, [pc, #76]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4a12      	ldr	r2, [pc, #72]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800481e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004822:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d015      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004830:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004836:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	490a      	ldr	r1, [pc, #40]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800484e:	d105      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a04      	ldr	r2, [pc, #16]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800485a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800485c:	7cbb      	ldrb	r3, [r7, #18]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40021000 	.word	0x40021000

0800486c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e09d      	b.n	80049ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	2b00      	cmp	r3, #0
 8004884:	d108      	bne.n	8004898 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800488e:	d009      	beq.n	80048a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	61da      	str	r2, [r3, #28]
 8004896:	e005      	b.n	80048a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fc ffd6 	bl	8001870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048e4:	d902      	bls.n	80048ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e002      	b.n	80048f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048fa:	d007      	beq.n	800490c <HAL_SPI_Init+0xa0>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004904:	d002      	beq.n	800490c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	ea42 0103 	orr.w	r1, r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004956:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	0c1b      	lsrs	r3, r3, #16
 8004968:	f003 0204 	and.w	r2, r3, #4
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004988:	ea42 0103 	orr.w	r1, r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69da      	ldr	r2, [r3, #28]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b088      	sub	sp, #32
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	603b      	str	r3, [r7, #0]
 80049ce:	4613      	mov	r3, r2
 80049d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_SPI_Transmit+0x22>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e158      	b.n	8004c96 <HAL_SPI_Transmit+0x2d4>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ec:	f7fd fd76 	bl	80024dc <HAL_GetTick>
 80049f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d002      	beq.n	8004a08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
 8004a04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a06:	e13d      	b.n	8004c84 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_SPI_Transmit+0x52>
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a18:	e134      	b.n	8004c84 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	88fa      	ldrh	r2, [r7, #6]
 8004a32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	88fa      	ldrh	r2, [r7, #6]
 8004a38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a64:	d10f      	bne.n	8004a86 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d007      	beq.n	8004aa4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aac:	d94b      	bls.n	8004b46 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_SPI_Transmit+0xfa>
 8004ab6:	8afb      	ldrh	r3, [r7, #22]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d13e      	bne.n	8004b3a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	881a      	ldrh	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	1c9a      	adds	r2, r3, #2
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ae0:	e02b      	b.n	8004b3a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d112      	bne.n	8004b16 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	881a      	ldrh	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	1c9a      	adds	r2, r3, #2
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b14:	e011      	b.n	8004b3a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b16:	f7fd fce1 	bl	80024dc <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d803      	bhi.n	8004b2e <HAL_SPI_Transmit+0x16c>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2c:	d102      	bne.n	8004b34 <HAL_SPI_Transmit+0x172>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d102      	bne.n	8004b3a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b38:	e0a4      	b.n	8004c84 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1ce      	bne.n	8004ae2 <HAL_SPI_Transmit+0x120>
 8004b44:	e07c      	b.n	8004c40 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_SPI_Transmit+0x192>
 8004b4e:	8afb      	ldrh	r3, [r7, #22]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d170      	bne.n	8004c36 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d912      	bls.n	8004b84 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	881a      	ldrh	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6e:	1c9a      	adds	r2, r3, #2
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b02      	subs	r3, #2
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b82:	e058      	b.n	8004c36 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	330c      	adds	r3, #12
 8004b8e:	7812      	ldrb	r2, [r2, #0]
 8004b90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004baa:	e044      	b.n	8004c36 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d12b      	bne.n	8004c12 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d912      	bls.n	8004bea <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	881a      	ldrh	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	1c9a      	adds	r2, r3, #2
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b02      	subs	r3, #2
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004be8:	e025      	b.n	8004c36 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	7812      	ldrb	r2, [r2, #0]
 8004bf6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c10:	e011      	b.n	8004c36 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c12:	f7fd fc63 	bl	80024dc <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d803      	bhi.n	8004c2a <HAL_SPI_Transmit+0x268>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d102      	bne.n	8004c30 <HAL_SPI_Transmit+0x26e>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d102      	bne.n	8004c36 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c34:	e026      	b.n	8004c84 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1b5      	bne.n	8004bac <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	6839      	ldr	r1, [r7, #0]
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fce3 	bl	8005610 <SPI_EndRxTxTransaction>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10a      	bne.n	8004c74 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	77fb      	strb	r3, [r7, #31]
 8004c80:	e000      	b.n	8004c84 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004c82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c94:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b088      	sub	sp, #32
 8004ca2:	af02      	add	r7, sp, #8
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cba:	d112      	bne.n	8004ce2 <HAL_SPI_Receive+0x44>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10e      	bne.n	8004ce2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ccc:	88fa      	ldrh	r2, [r7, #6]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f910 	bl	8004efe <HAL_SPI_TransmitReceive>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	e109      	b.n	8004ef6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_SPI_Receive+0x52>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e102      	b.n	8004ef6 <HAL_SPI_Receive+0x258>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cf8:	f7fd fbf0 	bl	80024dc <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d002      	beq.n	8004d10 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d0e:	e0e9      	b.n	8004ee4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_SPI_Receive+0x7e>
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d20:	e0e0      	b.n	8004ee4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2204      	movs	r2, #4
 8004d26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	88fa      	ldrh	r2, [r7, #6]
 8004d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	88fa      	ldrh	r2, [r7, #6]
 8004d42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d6c:	d908      	bls.n	8004d80 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	e007      	b.n	8004d90 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d8e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d98:	d10f      	bne.n	8004dba <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004db8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	2b40      	cmp	r3, #64	; 0x40
 8004dc6:	d007      	beq.n	8004dd8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dd6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004de0:	d867      	bhi.n	8004eb2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004de2:	e030      	b.n	8004e46 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d117      	bne.n	8004e22 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f103 020c 	add.w	r2, r3, #12
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	7812      	ldrb	r2, [r2, #0]
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004e20:	e011      	b.n	8004e46 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e22:	f7fd fb5b 	bl	80024dc <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d803      	bhi.n	8004e3a <HAL_SPI_Receive+0x19c>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e38:	d102      	bne.n	8004e40 <HAL_SPI_Receive+0x1a2>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e44:	e04e      	b.n	8004ee4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1c8      	bne.n	8004de4 <HAL_SPI_Receive+0x146>
 8004e52:	e034      	b.n	8004ebe <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d115      	bne.n	8004e8e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	b292      	uxth	r2, r2
 8004e6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	1c9a      	adds	r2, r3, #2
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004e8c:	e011      	b.n	8004eb2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e8e:	f7fd fb25 	bl	80024dc <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d803      	bhi.n	8004ea6 <HAL_SPI_Receive+0x208>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea4:	d102      	bne.n	8004eac <HAL_SPI_Receive+0x20e>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d102      	bne.n	8004eb2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004eb0:	e018      	b.n	8004ee4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1ca      	bne.n	8004e54 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fb4c 	bl	8005560 <SPI_EndRxTransaction>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	75fb      	strb	r3, [r7, #23]
 8004ee0:	e000      	b.n	8004ee4 <HAL_SPI_Receive+0x246>
  }

error :
 8004ee2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b08a      	sub	sp, #40	; 0x28
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
 8004f0a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_SPI_TransmitReceive+0x26>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e1fb      	b.n	800531c <HAL_SPI_TransmitReceive+0x41e>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f2c:	f7fd fad6 	bl	80024dc <HAL_GetTick>
 8004f30:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f38:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004f40:	887b      	ldrh	r3, [r7, #2]
 8004f42:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004f44:	887b      	ldrh	r3, [r7, #2]
 8004f46:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f48:	7efb      	ldrb	r3, [r7, #27]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d00e      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x6e>
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f54:	d106      	bne.n	8004f64 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d102      	bne.n	8004f64 <HAL_SPI_TransmitReceive+0x66>
 8004f5e:	7efb      	ldrb	r3, [r7, #27]
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d003      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004f64:	2302      	movs	r3, #2
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f6a:	e1cd      	b.n	8005308 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d005      	beq.n	8004f7e <HAL_SPI_TransmitReceive+0x80>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_SPI_TransmitReceive+0x80>
 8004f78:	887b      	ldrh	r3, [r7, #2]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d103      	bne.n	8004f86 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f84:	e1c0      	b.n	8005308 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d003      	beq.n	8004f9a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2205      	movs	r2, #5
 8004f96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	887a      	ldrh	r2, [r7, #2]
 8004faa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	887a      	ldrh	r2, [r7, #2]
 8004fb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	887a      	ldrh	r2, [r7, #2]
 8004fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	887a      	ldrh	r2, [r7, #2]
 8004fc6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fdc:	d802      	bhi.n	8004fe4 <HAL_SPI_TransmitReceive+0xe6>
 8004fde:	8a3b      	ldrh	r3, [r7, #16]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d908      	bls.n	8004ff6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ff2:	605a      	str	r2, [r3, #4]
 8004ff4:	e007      	b.n	8005006 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005004:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005010:	2b40      	cmp	r3, #64	; 0x40
 8005012:	d007      	beq.n	8005024 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005022:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800502c:	d97c      	bls.n	8005128 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <HAL_SPI_TransmitReceive+0x13e>
 8005036:	8a7b      	ldrh	r3, [r7, #18]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d169      	bne.n	8005110 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	881a      	ldrh	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	1c9a      	adds	r2, r3, #2
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005060:	e056      	b.n	8005110 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b02      	cmp	r3, #2
 800506e:	d11b      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x1aa>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d016      	beq.n	80050a8 <HAL_SPI_TransmitReceive+0x1aa>
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	2b01      	cmp	r3, #1
 800507e:	d113      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	881a      	ldrh	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	1c9a      	adds	r2, r3, #2
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d11c      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x1f2>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d016      	beq.n	80050f0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	b292      	uxth	r2, r2
 80050ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	1c9a      	adds	r2, r3, #2
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050ec:	2301      	movs	r3, #1
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050f0:	f7fd f9f4 	bl	80024dc <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d807      	bhi.n	8005110 <HAL_SPI_TransmitReceive+0x212>
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d003      	beq.n	8005110 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800510e:	e0fb      	b.n	8005308 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1a3      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x164>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d19d      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x164>
 8005126:	e0df      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x23a>
 8005130:	8a7b      	ldrh	r3, [r7, #18]
 8005132:	2b01      	cmp	r3, #1
 8005134:	f040 80cb 	bne.w	80052ce <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b01      	cmp	r3, #1
 8005140:	d912      	bls.n	8005168 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	881a      	ldrh	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	1c9a      	adds	r2, r3, #2
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b02      	subs	r3, #2
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005166:	e0b2      	b.n	80052ce <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	330c      	adds	r3, #12
 8005172:	7812      	ldrb	r2, [r2, #0]
 8005174:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800518e:	e09e      	b.n	80052ce <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b02      	cmp	r3, #2
 800519c:	d134      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x30a>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d02f      	beq.n	8005208 <HAL_SPI_TransmitReceive+0x30a>
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d12c      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d912      	bls.n	80051de <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	881a      	ldrh	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	1c9a      	adds	r2, r3, #2
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b02      	subs	r3, #2
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051dc:	e012      	b.n	8005204 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	330c      	adds	r3, #12
 80051e8:	7812      	ldrb	r2, [r2, #0]
 80051ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b01      	cmp	r3, #1
 8005214:	d148      	bne.n	80052a8 <HAL_SPI_TransmitReceive+0x3aa>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d042      	beq.n	80052a8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b01      	cmp	r3, #1
 800522c:	d923      	bls.n	8005276 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005238:	b292      	uxth	r2, r2
 800523a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	1c9a      	adds	r2, r3, #2
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b02      	subs	r3, #2
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	d81f      	bhi.n	80052a4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005272:	605a      	str	r2, [r3, #4]
 8005274:	e016      	b.n	80052a4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f103 020c 	add.w	r2, r3, #12
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	7812      	ldrb	r2, [r2, #0]
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052a4:	2301      	movs	r3, #1
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052a8:	f7fd f918 	bl	80024dc <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d803      	bhi.n	80052c0 <HAL_SPI_TransmitReceive+0x3c2>
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052be:	d102      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x3c8>
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d103      	bne.n	80052ce <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80052cc:	e01c      	b.n	8005308 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f47f af5b 	bne.w	8005190 <HAL_SPI_TransmitReceive+0x292>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f47f af54 	bne.w	8005190 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052e8:	69fa      	ldr	r2, [r7, #28]
 80052ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f98f 	bl	8005610 <SPI_EndRxTxTransaction>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d006      	beq.n	8005306 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	661a      	str	r2, [r3, #96]	; 0x60
 8005304:	e000      	b.n	8005308 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005306:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800531c:	4618      	mov	r0, r3
 800531e:	3728      	adds	r7, #40	; 0x28
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	4613      	mov	r3, r2
 8005332:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005334:	f7fd f8d2 	bl	80024dc <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	1a9b      	subs	r3, r3, r2
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	4413      	add	r3, r2
 8005342:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005344:	f7fd f8ca 	bl	80024dc <HAL_GetTick>
 8005348:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800534a:	4b39      	ldr	r3, [pc, #228]	; (8005430 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	015b      	lsls	r3, r3, #5
 8005350:	0d1b      	lsrs	r3, r3, #20
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	fb02 f303 	mul.w	r3, r2, r3
 8005358:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800535a:	e054      	b.n	8005406 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005362:	d050      	beq.n	8005406 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005364:	f7fd f8ba 	bl	80024dc <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	429a      	cmp	r2, r3
 8005372:	d902      	bls.n	800537a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d13d      	bne.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005388:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005392:	d111      	bne.n	80053b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800539c:	d004      	beq.n	80053a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a6:	d107      	bne.n	80053b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c0:	d10f      	bne.n	80053e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e017      	b.n	8005426 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	3b01      	subs	r3, #1
 8005404:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4013      	ands	r3, r2
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	429a      	cmp	r2, r3
 8005414:	bf0c      	ite	eq
 8005416:	2301      	moveq	r3, #1
 8005418:	2300      	movne	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	429a      	cmp	r2, r3
 8005422:	d19b      	bne.n	800535c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000018 	.word	0x20000018

08005434 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	; 0x28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005446:	f7fd f849 	bl	80024dc <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	4413      	add	r3, r2
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005456:	f7fd f841 	bl	80024dc <HAL_GetTick>
 800545a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	330c      	adds	r3, #12
 8005462:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005464:	4b3d      	ldr	r3, [pc, #244]	; (800555c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	4613      	mov	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	00da      	lsls	r2, r3, #3
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	0d1b      	lsrs	r3, r3, #20
 8005474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005476:	fb02 f303 	mul.w	r3, r2, r3
 800547a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800547c:	e060      	b.n	8005540 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005484:	d107      	bne.n	8005496 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005494:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d050      	beq.n	8005540 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800549e:	f7fd f81d 	bl	80024dc <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d902      	bls.n	80054b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d13d      	bne.n	8005530 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054cc:	d111      	bne.n	80054f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d6:	d004      	beq.n	80054e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e0:	d107      	bne.n	80054f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054fa:	d10f      	bne.n	800551c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800551a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e010      	b.n	8005552 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	3b01      	subs	r3, #1
 800553e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4013      	ands	r3, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	429a      	cmp	r2, r3
 800554e:	d196      	bne.n	800547e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3728      	adds	r7, #40	; 0x28
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000018 	.word	0x20000018

08005560 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005574:	d111      	bne.n	800559a <SPI_EndRxTransaction+0x3a>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800557e:	d004      	beq.n	800558a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005588:	d107      	bne.n	800559a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005598:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2200      	movs	r2, #0
 80055a2:	2180      	movs	r1, #128	; 0x80
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff febd 	bl	8005324 <SPI_WaitFlagStateUntilTimeout>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d007      	beq.n	80055c0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b4:	f043 0220 	orr.w	r2, r3, #32
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e023      	b.n	8005608 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055c8:	d11d      	bne.n	8005606 <SPI_EndRxTransaction+0xa6>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d2:	d004      	beq.n	80055de <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055dc:	d113      	bne.n	8005606 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f7ff ff22 	bl	8005434 <SPI_WaitFifoStateUntilTimeout>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fa:	f043 0220 	orr.w	r2, r3, #32
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e000      	b.n	8005608 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2200      	movs	r2, #0
 8005624:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f7ff ff03 	bl	8005434 <SPI_WaitFifoStateUntilTimeout>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d007      	beq.n	8005644 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005638:	f043 0220 	orr.w	r2, r3, #32
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e027      	b.n	8005694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2200      	movs	r2, #0
 800564c:	2180      	movs	r1, #128	; 0x80
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f7ff fe68 	bl	8005324 <SPI_WaitFlagStateUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d007      	beq.n	800566a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565e:	f043 0220 	orr.w	r2, r3, #32
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e014      	b.n	8005694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2200      	movs	r2, #0
 8005672:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff fedc 	bl	8005434 <SPI_WaitFifoStateUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e000      	b.n	8005694 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e049      	b.n	8005742 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fc fe22 	bl	800230c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3304      	adds	r3, #4
 80056d8:	4619      	mov	r1, r3
 80056da:	4610      	mov	r0, r2
 80056dc:	f000 f9f4 	bl	8005ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	d001      	beq.n	8005764 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e04a      	b.n	80057fa <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a21      	ldr	r2, [pc, #132]	; (8005808 <HAL_TIM_Base_Start_IT+0xbc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d018      	beq.n	80057b8 <HAL_TIM_Base_Start_IT+0x6c>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578e:	d013      	beq.n	80057b8 <HAL_TIM_Base_Start_IT+0x6c>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a1d      	ldr	r2, [pc, #116]	; (800580c <HAL_TIM_Base_Start_IT+0xc0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d00e      	beq.n	80057b8 <HAL_TIM_Base_Start_IT+0x6c>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a1c      	ldr	r2, [pc, #112]	; (8005810 <HAL_TIM_Base_Start_IT+0xc4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d009      	beq.n	80057b8 <HAL_TIM_Base_Start_IT+0x6c>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a1a      	ldr	r2, [pc, #104]	; (8005814 <HAL_TIM_Base_Start_IT+0xc8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d004      	beq.n	80057b8 <HAL_TIM_Base_Start_IT+0x6c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a19      	ldr	r2, [pc, #100]	; (8005818 <HAL_TIM_Base_Start_IT+0xcc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d115      	bne.n	80057e4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	4b17      	ldr	r3, [pc, #92]	; (800581c <HAL_TIM_Base_Start_IT+0xd0>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b06      	cmp	r3, #6
 80057c8:	d015      	beq.n	80057f6 <HAL_TIM_Base_Start_IT+0xaa>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d0:	d011      	beq.n	80057f6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0201 	orr.w	r2, r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e2:	e008      	b.n	80057f6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0201 	orr.w	r2, r2, #1
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	e000      	b.n	80057f8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40012c00 	.word	0x40012c00
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40013400 	.word	0x40013400
 8005818:	40014000 	.word	0x40014000
 800581c:	00010007 	.word	0x00010007

08005820 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e041      	b.n	80058b8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d106      	bne.n	800584e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f839 	bl	80058c0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2202      	movs	r2, #2
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3304      	adds	r3, #4
 800585e:	4619      	mov	r1, r3
 8005860:	4610      	mov	r0, r2
 8005862:	f000 f931 	bl	8005ac8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0208 	bic.w	r2, r2, #8
 8005874:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6819      	ldr	r1, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_TIM_ConfigClockSource+0x1c>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e0de      	b.n	8005aae <HAL_TIM_ConfigClockSource+0x1da>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800590e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800591a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a63      	ldr	r2, [pc, #396]	; (8005ab8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	f000 80a9 	beq.w	8005a82 <HAL_TIM_ConfigClockSource+0x1ae>
 8005930:	4a61      	ldr	r2, [pc, #388]	; (8005ab8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	f200 80ae 	bhi.w	8005a94 <HAL_TIM_ConfigClockSource+0x1c0>
 8005938:	4a60      	ldr	r2, [pc, #384]	; (8005abc <HAL_TIM_ConfigClockSource+0x1e8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	f000 80a1 	beq.w	8005a82 <HAL_TIM_ConfigClockSource+0x1ae>
 8005940:	4a5e      	ldr	r2, [pc, #376]	; (8005abc <HAL_TIM_ConfigClockSource+0x1e8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	f200 80a6 	bhi.w	8005a94 <HAL_TIM_ConfigClockSource+0x1c0>
 8005948:	4a5d      	ldr	r2, [pc, #372]	; (8005ac0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800594a:	4293      	cmp	r3, r2
 800594c:	f000 8099 	beq.w	8005a82 <HAL_TIM_ConfigClockSource+0x1ae>
 8005950:	4a5b      	ldr	r2, [pc, #364]	; (8005ac0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005952:	4293      	cmp	r3, r2
 8005954:	f200 809e 	bhi.w	8005a94 <HAL_TIM_ConfigClockSource+0x1c0>
 8005958:	4a5a      	ldr	r2, [pc, #360]	; (8005ac4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	f000 8091 	beq.w	8005a82 <HAL_TIM_ConfigClockSource+0x1ae>
 8005960:	4a58      	ldr	r2, [pc, #352]	; (8005ac4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	f200 8096 	bhi.w	8005a94 <HAL_TIM_ConfigClockSource+0x1c0>
 8005968:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800596c:	f000 8089 	beq.w	8005a82 <HAL_TIM_ConfigClockSource+0x1ae>
 8005970:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005974:	f200 808e 	bhi.w	8005a94 <HAL_TIM_ConfigClockSource+0x1c0>
 8005978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597c:	d03e      	beq.n	80059fc <HAL_TIM_ConfigClockSource+0x128>
 800597e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005982:	f200 8087 	bhi.w	8005a94 <HAL_TIM_ConfigClockSource+0x1c0>
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598a:	f000 8086 	beq.w	8005a9a <HAL_TIM_ConfigClockSource+0x1c6>
 800598e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005992:	d87f      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x1c0>
 8005994:	2b70      	cmp	r3, #112	; 0x70
 8005996:	d01a      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0xfa>
 8005998:	2b70      	cmp	r3, #112	; 0x70
 800599a:	d87b      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x1c0>
 800599c:	2b60      	cmp	r3, #96	; 0x60
 800599e:	d050      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0x16e>
 80059a0:	2b60      	cmp	r3, #96	; 0x60
 80059a2:	d877      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x1c0>
 80059a4:	2b50      	cmp	r3, #80	; 0x50
 80059a6:	d03c      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0x14e>
 80059a8:	2b50      	cmp	r3, #80	; 0x50
 80059aa:	d873      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x1c0>
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	d058      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x18e>
 80059b0:	2b40      	cmp	r3, #64	; 0x40
 80059b2:	d86f      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x1c0>
 80059b4:	2b30      	cmp	r3, #48	; 0x30
 80059b6:	d064      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x1ae>
 80059b8:	2b30      	cmp	r3, #48	; 0x30
 80059ba:	d86b      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x1c0>
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d060      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x1ae>
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d867      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x1c0>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d05c      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x1ae>
 80059c8:	2b10      	cmp	r3, #16
 80059ca:	d05a      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x1ae>
 80059cc:	e062      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6899      	ldr	r1, [r3, #8]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f000 f97f 	bl	8005ce0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	609a      	str	r2, [r3, #8]
      break;
 80059fa:	e04f      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	6899      	ldr	r1, [r3, #8]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f000 f968 	bl	8005ce0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a1e:	609a      	str	r2, [r3, #8]
      break;
 8005a20:	e03c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6818      	ldr	r0, [r3, #0]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6859      	ldr	r1, [r3, #4]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f000 f8da 	bl	8005be8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2150      	movs	r1, #80	; 0x50
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 f933 	bl	8005ca6 <TIM_ITRx_SetConfig>
      break;
 8005a40:	e02c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6818      	ldr	r0, [r3, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6859      	ldr	r1, [r3, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f000 f8f9 	bl	8005c46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2160      	movs	r1, #96	; 0x60
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 f923 	bl	8005ca6 <TIM_ITRx_SetConfig>
      break;
 8005a60:	e01c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6818      	ldr	r0, [r3, #0]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6859      	ldr	r1, [r3, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f000 f8ba 	bl	8005be8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2140      	movs	r1, #64	; 0x40
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f913 	bl	8005ca6 <TIM_ITRx_SetConfig>
      break;
 8005a80:	e00c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	f000 f90a 	bl	8005ca6 <TIM_ITRx_SetConfig>
      break;
 8005a92:	e003      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	73fb      	strb	r3, [r7, #15]
      break;
 8005a98:	e000      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005a9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	00100070 	.word	0x00100070
 8005abc:	00100040 	.word	0x00100040
 8005ac0:	00100030 	.word	0x00100030
 8005ac4:	00100020 	.word	0x00100020

08005ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a3c      	ldr	r2, [pc, #240]	; (8005bcc <TIM_Base_SetConfig+0x104>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00f      	beq.n	8005b00 <TIM_Base_SetConfig+0x38>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae6:	d00b      	beq.n	8005b00 <TIM_Base_SetConfig+0x38>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a39      	ldr	r2, [pc, #228]	; (8005bd0 <TIM_Base_SetConfig+0x108>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d007      	beq.n	8005b00 <TIM_Base_SetConfig+0x38>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a38      	ldr	r2, [pc, #224]	; (8005bd4 <TIM_Base_SetConfig+0x10c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <TIM_Base_SetConfig+0x38>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a37      	ldr	r2, [pc, #220]	; (8005bd8 <TIM_Base_SetConfig+0x110>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d108      	bne.n	8005b12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a2d      	ldr	r2, [pc, #180]	; (8005bcc <TIM_Base_SetConfig+0x104>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d01b      	beq.n	8005b52 <TIM_Base_SetConfig+0x8a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b20:	d017      	beq.n	8005b52 <TIM_Base_SetConfig+0x8a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2a      	ldr	r2, [pc, #168]	; (8005bd0 <TIM_Base_SetConfig+0x108>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <TIM_Base_SetConfig+0x8a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a29      	ldr	r2, [pc, #164]	; (8005bd4 <TIM_Base_SetConfig+0x10c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00f      	beq.n	8005b52 <TIM_Base_SetConfig+0x8a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a28      	ldr	r2, [pc, #160]	; (8005bd8 <TIM_Base_SetConfig+0x110>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00b      	beq.n	8005b52 <TIM_Base_SetConfig+0x8a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a27      	ldr	r2, [pc, #156]	; (8005bdc <TIM_Base_SetConfig+0x114>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d007      	beq.n	8005b52 <TIM_Base_SetConfig+0x8a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a26      	ldr	r2, [pc, #152]	; (8005be0 <TIM_Base_SetConfig+0x118>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d003      	beq.n	8005b52 <TIM_Base_SetConfig+0x8a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a25      	ldr	r2, [pc, #148]	; (8005be4 <TIM_Base_SetConfig+0x11c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d108      	bne.n	8005b64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a10      	ldr	r2, [pc, #64]	; (8005bcc <TIM_Base_SetConfig+0x104>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00f      	beq.n	8005bb0 <TIM_Base_SetConfig+0xe8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a11      	ldr	r2, [pc, #68]	; (8005bd8 <TIM_Base_SetConfig+0x110>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00b      	beq.n	8005bb0 <TIM_Base_SetConfig+0xe8>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a10      	ldr	r2, [pc, #64]	; (8005bdc <TIM_Base_SetConfig+0x114>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d007      	beq.n	8005bb0 <TIM_Base_SetConfig+0xe8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a0f      	ldr	r2, [pc, #60]	; (8005be0 <TIM_Base_SetConfig+0x118>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_Base_SetConfig+0xe8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a0e      	ldr	r2, [pc, #56]	; (8005be4 <TIM_Base_SetConfig+0x11c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d103      	bne.n	8005bb8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	615a      	str	r2, [r3, #20]
}
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40012c00 	.word	0x40012c00
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	40000800 	.word	0x40000800
 8005bd8:	40013400 	.word	0x40013400
 8005bdc:	40014000 	.word	0x40014000
 8005be0:	40014400 	.word	0x40014400
 8005be4:	40014800 	.word	0x40014800

08005be8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f023 0201 	bic.w	r2, r3, #1
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f023 030a 	bic.w	r3, r3, #10
 8005c24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b087      	sub	sp, #28
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f023 0210 	bic.w	r2, r3, #16
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	031b      	lsls	r3, r3, #12
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f043 0307 	orr.w	r3, r3, #7
 8005ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	609a      	str	r2, [r3, #8]
}
 8005cd4:	bf00      	nop
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	021a      	lsls	r2, r3, #8
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	609a      	str	r2, [r3, #8]
}
 8005d14:	bf00      	nop
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e065      	b.n	8005e04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a2c      	ldr	r2, [pc, #176]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d004      	beq.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a2b      	ldr	r2, [pc, #172]	; (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d108      	bne.n	8005d7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1b      	ldr	r2, [pc, #108]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d018      	beq.n	8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dae:	d013      	beq.n	8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a18      	ldr	r2, [pc, #96]	; (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00e      	beq.n	8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d009      	beq.n	8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a12      	ldr	r2, [pc, #72]	; (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d004      	beq.n	8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a13      	ldr	r2, [pc, #76]	; (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d10c      	bne.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	40012c00 	.word	0x40012c00
 8005e14:	40013400 	.word	0x40013400
 8005e18:	40000400 	.word	0x40000400
 8005e1c:	40000800 	.word	0x40000800
 8005e20:	40014000 	.word	0x40014000

08005e24 <__errno>:
 8005e24:	4b01      	ldr	r3, [pc, #4]	; (8005e2c <__errno+0x8>)
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000024 	.word	0x20000024

08005e30 <__libc_init_array>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	4d0d      	ldr	r5, [pc, #52]	; (8005e68 <__libc_init_array+0x38>)
 8005e34:	4c0d      	ldr	r4, [pc, #52]	; (8005e6c <__libc_init_array+0x3c>)
 8005e36:	1b64      	subs	r4, r4, r5
 8005e38:	10a4      	asrs	r4, r4, #2
 8005e3a:	2600      	movs	r6, #0
 8005e3c:	42a6      	cmp	r6, r4
 8005e3e:	d109      	bne.n	8005e54 <__libc_init_array+0x24>
 8005e40:	4d0b      	ldr	r5, [pc, #44]	; (8005e70 <__libc_init_array+0x40>)
 8005e42:	4c0c      	ldr	r4, [pc, #48]	; (8005e74 <__libc_init_array+0x44>)
 8005e44:	f004 fc90 	bl	800a768 <_init>
 8005e48:	1b64      	subs	r4, r4, r5
 8005e4a:	10a4      	asrs	r4, r4, #2
 8005e4c:	2600      	movs	r6, #0
 8005e4e:	42a6      	cmp	r6, r4
 8005e50:	d105      	bne.n	8005e5e <__libc_init_array+0x2e>
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
 8005e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e58:	4798      	blx	r3
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	e7ee      	b.n	8005e3c <__libc_init_array+0xc>
 8005e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e62:	4798      	blx	r3
 8005e64:	3601      	adds	r6, #1
 8005e66:	e7f2      	b.n	8005e4e <__libc_init_array+0x1e>
 8005e68:	0800c13c 	.word	0x0800c13c
 8005e6c:	0800c13c 	.word	0x0800c13c
 8005e70:	0800c13c 	.word	0x0800c13c
 8005e74:	0800c140 	.word	0x0800c140

08005e78 <memset>:
 8005e78:	4402      	add	r2, r0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d100      	bne.n	8005e82 <memset+0xa>
 8005e80:	4770      	bx	lr
 8005e82:	f803 1b01 	strb.w	r1, [r3], #1
 8005e86:	e7f9      	b.n	8005e7c <memset+0x4>

08005e88 <__cvt>:
 8005e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8c:	ec55 4b10 	vmov	r4, r5, d0
 8005e90:	2d00      	cmp	r5, #0
 8005e92:	460e      	mov	r6, r1
 8005e94:	4619      	mov	r1, r3
 8005e96:	462b      	mov	r3, r5
 8005e98:	bfbb      	ittet	lt
 8005e9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e9e:	461d      	movlt	r5, r3
 8005ea0:	2300      	movge	r3, #0
 8005ea2:	232d      	movlt	r3, #45	; 0x2d
 8005ea4:	700b      	strb	r3, [r1, #0]
 8005ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ea8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005eac:	4691      	mov	r9, r2
 8005eae:	f023 0820 	bic.w	r8, r3, #32
 8005eb2:	bfbc      	itt	lt
 8005eb4:	4622      	movlt	r2, r4
 8005eb6:	4614      	movlt	r4, r2
 8005eb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ebc:	d005      	beq.n	8005eca <__cvt+0x42>
 8005ebe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ec2:	d100      	bne.n	8005ec6 <__cvt+0x3e>
 8005ec4:	3601      	adds	r6, #1
 8005ec6:	2102      	movs	r1, #2
 8005ec8:	e000      	b.n	8005ecc <__cvt+0x44>
 8005eca:	2103      	movs	r1, #3
 8005ecc:	ab03      	add	r3, sp, #12
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	ab02      	add	r3, sp, #8
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	ec45 4b10 	vmov	d0, r4, r5
 8005ed8:	4653      	mov	r3, sl
 8005eda:	4632      	mov	r2, r6
 8005edc:	f001 fdac 	bl	8007a38 <_dtoa_r>
 8005ee0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ee4:	4607      	mov	r7, r0
 8005ee6:	d102      	bne.n	8005eee <__cvt+0x66>
 8005ee8:	f019 0f01 	tst.w	r9, #1
 8005eec:	d022      	beq.n	8005f34 <__cvt+0xac>
 8005eee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ef2:	eb07 0906 	add.w	r9, r7, r6
 8005ef6:	d110      	bne.n	8005f1a <__cvt+0x92>
 8005ef8:	783b      	ldrb	r3, [r7, #0]
 8005efa:	2b30      	cmp	r3, #48	; 0x30
 8005efc:	d10a      	bne.n	8005f14 <__cvt+0x8c>
 8005efe:	2200      	movs	r2, #0
 8005f00:	2300      	movs	r3, #0
 8005f02:	4620      	mov	r0, r4
 8005f04:	4629      	mov	r1, r5
 8005f06:	f7fa fe07 	bl	8000b18 <__aeabi_dcmpeq>
 8005f0a:	b918      	cbnz	r0, 8005f14 <__cvt+0x8c>
 8005f0c:	f1c6 0601 	rsb	r6, r6, #1
 8005f10:	f8ca 6000 	str.w	r6, [sl]
 8005f14:	f8da 3000 	ldr.w	r3, [sl]
 8005f18:	4499      	add	r9, r3
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4620      	mov	r0, r4
 8005f20:	4629      	mov	r1, r5
 8005f22:	f7fa fdf9 	bl	8000b18 <__aeabi_dcmpeq>
 8005f26:	b108      	cbz	r0, 8005f2c <__cvt+0xa4>
 8005f28:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f2c:	2230      	movs	r2, #48	; 0x30
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	454b      	cmp	r3, r9
 8005f32:	d307      	bcc.n	8005f44 <__cvt+0xbc>
 8005f34:	9b03      	ldr	r3, [sp, #12]
 8005f36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f38:	1bdb      	subs	r3, r3, r7
 8005f3a:	4638      	mov	r0, r7
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	b004      	add	sp, #16
 8005f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f44:	1c59      	adds	r1, r3, #1
 8005f46:	9103      	str	r1, [sp, #12]
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	e7f0      	b.n	8005f2e <__cvt+0xa6>

08005f4c <__exponent>:
 8005f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2900      	cmp	r1, #0
 8005f52:	bfb8      	it	lt
 8005f54:	4249      	neglt	r1, r1
 8005f56:	f803 2b02 	strb.w	r2, [r3], #2
 8005f5a:	bfb4      	ite	lt
 8005f5c:	222d      	movlt	r2, #45	; 0x2d
 8005f5e:	222b      	movge	r2, #43	; 0x2b
 8005f60:	2909      	cmp	r1, #9
 8005f62:	7042      	strb	r2, [r0, #1]
 8005f64:	dd2a      	ble.n	8005fbc <__exponent+0x70>
 8005f66:	f10d 0407 	add.w	r4, sp, #7
 8005f6a:	46a4      	mov	ip, r4
 8005f6c:	270a      	movs	r7, #10
 8005f6e:	46a6      	mov	lr, r4
 8005f70:	460a      	mov	r2, r1
 8005f72:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f76:	fb07 1516 	mls	r5, r7, r6, r1
 8005f7a:	3530      	adds	r5, #48	; 0x30
 8005f7c:	2a63      	cmp	r2, #99	; 0x63
 8005f7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f86:	4631      	mov	r1, r6
 8005f88:	dcf1      	bgt.n	8005f6e <__exponent+0x22>
 8005f8a:	3130      	adds	r1, #48	; 0x30
 8005f8c:	f1ae 0502 	sub.w	r5, lr, #2
 8005f90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f94:	1c44      	adds	r4, r0, #1
 8005f96:	4629      	mov	r1, r5
 8005f98:	4561      	cmp	r1, ip
 8005f9a:	d30a      	bcc.n	8005fb2 <__exponent+0x66>
 8005f9c:	f10d 0209 	add.w	r2, sp, #9
 8005fa0:	eba2 020e 	sub.w	r2, r2, lr
 8005fa4:	4565      	cmp	r5, ip
 8005fa6:	bf88      	it	hi
 8005fa8:	2200      	movhi	r2, #0
 8005faa:	4413      	add	r3, r2
 8005fac:	1a18      	subs	r0, r3, r0
 8005fae:	b003      	add	sp, #12
 8005fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005fba:	e7ed      	b.n	8005f98 <__exponent+0x4c>
 8005fbc:	2330      	movs	r3, #48	; 0x30
 8005fbe:	3130      	adds	r1, #48	; 0x30
 8005fc0:	7083      	strb	r3, [r0, #2]
 8005fc2:	70c1      	strb	r1, [r0, #3]
 8005fc4:	1d03      	adds	r3, r0, #4
 8005fc6:	e7f1      	b.n	8005fac <__exponent+0x60>

08005fc8 <_printf_float>:
 8005fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fcc:	ed2d 8b02 	vpush	{d8}
 8005fd0:	b08d      	sub	sp, #52	; 0x34
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005fd8:	4616      	mov	r6, r2
 8005fda:	461f      	mov	r7, r3
 8005fdc:	4605      	mov	r5, r0
 8005fde:	f002 fe89 	bl	8008cf4 <_localeconv_r>
 8005fe2:	f8d0 a000 	ldr.w	sl, [r0]
 8005fe6:	4650      	mov	r0, sl
 8005fe8:	f7fa f91a 	bl	8000220 <strlen>
 8005fec:	2300      	movs	r3, #0
 8005fee:	930a      	str	r3, [sp, #40]	; 0x28
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	9305      	str	r3, [sp, #20]
 8005ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ff8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ffc:	3307      	adds	r3, #7
 8005ffe:	f023 0307 	bic.w	r3, r3, #7
 8006002:	f103 0208 	add.w	r2, r3, #8
 8006006:	f8c8 2000 	str.w	r2, [r8]
 800600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006012:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006016:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800601a:	9307      	str	r3, [sp, #28]
 800601c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006020:	ee08 0a10 	vmov	s16, r0
 8006024:	4b9f      	ldr	r3, [pc, #636]	; (80062a4 <_printf_float+0x2dc>)
 8006026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800602a:	f04f 32ff 	mov.w	r2, #4294967295
 800602e:	f7fa fda5 	bl	8000b7c <__aeabi_dcmpun>
 8006032:	bb88      	cbnz	r0, 8006098 <_printf_float+0xd0>
 8006034:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006038:	4b9a      	ldr	r3, [pc, #616]	; (80062a4 <_printf_float+0x2dc>)
 800603a:	f04f 32ff 	mov.w	r2, #4294967295
 800603e:	f7fa fd7f 	bl	8000b40 <__aeabi_dcmple>
 8006042:	bb48      	cbnz	r0, 8006098 <_printf_float+0xd0>
 8006044:	2200      	movs	r2, #0
 8006046:	2300      	movs	r3, #0
 8006048:	4640      	mov	r0, r8
 800604a:	4649      	mov	r1, r9
 800604c:	f7fa fd6e 	bl	8000b2c <__aeabi_dcmplt>
 8006050:	b110      	cbz	r0, 8006058 <_printf_float+0x90>
 8006052:	232d      	movs	r3, #45	; 0x2d
 8006054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006058:	4b93      	ldr	r3, [pc, #588]	; (80062a8 <_printf_float+0x2e0>)
 800605a:	4894      	ldr	r0, [pc, #592]	; (80062ac <_printf_float+0x2e4>)
 800605c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006060:	bf94      	ite	ls
 8006062:	4698      	movls	r8, r3
 8006064:	4680      	movhi	r8, r0
 8006066:	2303      	movs	r3, #3
 8006068:	6123      	str	r3, [r4, #16]
 800606a:	9b05      	ldr	r3, [sp, #20]
 800606c:	f023 0204 	bic.w	r2, r3, #4
 8006070:	6022      	str	r2, [r4, #0]
 8006072:	f04f 0900 	mov.w	r9, #0
 8006076:	9700      	str	r7, [sp, #0]
 8006078:	4633      	mov	r3, r6
 800607a:	aa0b      	add	r2, sp, #44	; 0x2c
 800607c:	4621      	mov	r1, r4
 800607e:	4628      	mov	r0, r5
 8006080:	f000 f9d8 	bl	8006434 <_printf_common>
 8006084:	3001      	adds	r0, #1
 8006086:	f040 8090 	bne.w	80061aa <_printf_float+0x1e2>
 800608a:	f04f 30ff 	mov.w	r0, #4294967295
 800608e:	b00d      	add	sp, #52	; 0x34
 8006090:	ecbd 8b02 	vpop	{d8}
 8006094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006098:	4642      	mov	r2, r8
 800609a:	464b      	mov	r3, r9
 800609c:	4640      	mov	r0, r8
 800609e:	4649      	mov	r1, r9
 80060a0:	f7fa fd6c 	bl	8000b7c <__aeabi_dcmpun>
 80060a4:	b140      	cbz	r0, 80060b8 <_printf_float+0xf0>
 80060a6:	464b      	mov	r3, r9
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	bfbc      	itt	lt
 80060ac:	232d      	movlt	r3, #45	; 0x2d
 80060ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80060b2:	487f      	ldr	r0, [pc, #508]	; (80062b0 <_printf_float+0x2e8>)
 80060b4:	4b7f      	ldr	r3, [pc, #508]	; (80062b4 <_printf_float+0x2ec>)
 80060b6:	e7d1      	b.n	800605c <_printf_float+0x94>
 80060b8:	6863      	ldr	r3, [r4, #4]
 80060ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80060be:	9206      	str	r2, [sp, #24]
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	d13f      	bne.n	8006144 <_printf_float+0x17c>
 80060c4:	2306      	movs	r3, #6
 80060c6:	6063      	str	r3, [r4, #4]
 80060c8:	9b05      	ldr	r3, [sp, #20]
 80060ca:	6861      	ldr	r1, [r4, #4]
 80060cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80060d0:	2300      	movs	r3, #0
 80060d2:	9303      	str	r3, [sp, #12]
 80060d4:	ab0a      	add	r3, sp, #40	; 0x28
 80060d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80060da:	ab09      	add	r3, sp, #36	; 0x24
 80060dc:	ec49 8b10 	vmov	d0, r8, r9
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	6022      	str	r2, [r4, #0]
 80060e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80060e8:	4628      	mov	r0, r5
 80060ea:	f7ff fecd 	bl	8005e88 <__cvt>
 80060ee:	9b06      	ldr	r3, [sp, #24]
 80060f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060f2:	2b47      	cmp	r3, #71	; 0x47
 80060f4:	4680      	mov	r8, r0
 80060f6:	d108      	bne.n	800610a <_printf_float+0x142>
 80060f8:	1cc8      	adds	r0, r1, #3
 80060fa:	db02      	blt.n	8006102 <_printf_float+0x13a>
 80060fc:	6863      	ldr	r3, [r4, #4]
 80060fe:	4299      	cmp	r1, r3
 8006100:	dd41      	ble.n	8006186 <_printf_float+0x1be>
 8006102:	f1ab 0b02 	sub.w	fp, fp, #2
 8006106:	fa5f fb8b 	uxtb.w	fp, fp
 800610a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800610e:	d820      	bhi.n	8006152 <_printf_float+0x18a>
 8006110:	3901      	subs	r1, #1
 8006112:	465a      	mov	r2, fp
 8006114:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006118:	9109      	str	r1, [sp, #36]	; 0x24
 800611a:	f7ff ff17 	bl	8005f4c <__exponent>
 800611e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006120:	1813      	adds	r3, r2, r0
 8006122:	2a01      	cmp	r2, #1
 8006124:	4681      	mov	r9, r0
 8006126:	6123      	str	r3, [r4, #16]
 8006128:	dc02      	bgt.n	8006130 <_printf_float+0x168>
 800612a:	6822      	ldr	r2, [r4, #0]
 800612c:	07d2      	lsls	r2, r2, #31
 800612e:	d501      	bpl.n	8006134 <_printf_float+0x16c>
 8006130:	3301      	adds	r3, #1
 8006132:	6123      	str	r3, [r4, #16]
 8006134:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006138:	2b00      	cmp	r3, #0
 800613a:	d09c      	beq.n	8006076 <_printf_float+0xae>
 800613c:	232d      	movs	r3, #45	; 0x2d
 800613e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006142:	e798      	b.n	8006076 <_printf_float+0xae>
 8006144:	9a06      	ldr	r2, [sp, #24]
 8006146:	2a47      	cmp	r2, #71	; 0x47
 8006148:	d1be      	bne.n	80060c8 <_printf_float+0x100>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1bc      	bne.n	80060c8 <_printf_float+0x100>
 800614e:	2301      	movs	r3, #1
 8006150:	e7b9      	b.n	80060c6 <_printf_float+0xfe>
 8006152:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006156:	d118      	bne.n	800618a <_printf_float+0x1c2>
 8006158:	2900      	cmp	r1, #0
 800615a:	6863      	ldr	r3, [r4, #4]
 800615c:	dd0b      	ble.n	8006176 <_printf_float+0x1ae>
 800615e:	6121      	str	r1, [r4, #16]
 8006160:	b913      	cbnz	r3, 8006168 <_printf_float+0x1a0>
 8006162:	6822      	ldr	r2, [r4, #0]
 8006164:	07d0      	lsls	r0, r2, #31
 8006166:	d502      	bpl.n	800616e <_printf_float+0x1a6>
 8006168:	3301      	adds	r3, #1
 800616a:	440b      	add	r3, r1
 800616c:	6123      	str	r3, [r4, #16]
 800616e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006170:	f04f 0900 	mov.w	r9, #0
 8006174:	e7de      	b.n	8006134 <_printf_float+0x16c>
 8006176:	b913      	cbnz	r3, 800617e <_printf_float+0x1b6>
 8006178:	6822      	ldr	r2, [r4, #0]
 800617a:	07d2      	lsls	r2, r2, #31
 800617c:	d501      	bpl.n	8006182 <_printf_float+0x1ba>
 800617e:	3302      	adds	r3, #2
 8006180:	e7f4      	b.n	800616c <_printf_float+0x1a4>
 8006182:	2301      	movs	r3, #1
 8006184:	e7f2      	b.n	800616c <_printf_float+0x1a4>
 8006186:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800618a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800618c:	4299      	cmp	r1, r3
 800618e:	db05      	blt.n	800619c <_printf_float+0x1d4>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	6121      	str	r1, [r4, #16]
 8006194:	07d8      	lsls	r0, r3, #31
 8006196:	d5ea      	bpl.n	800616e <_printf_float+0x1a6>
 8006198:	1c4b      	adds	r3, r1, #1
 800619a:	e7e7      	b.n	800616c <_printf_float+0x1a4>
 800619c:	2900      	cmp	r1, #0
 800619e:	bfd4      	ite	le
 80061a0:	f1c1 0202 	rsble	r2, r1, #2
 80061a4:	2201      	movgt	r2, #1
 80061a6:	4413      	add	r3, r2
 80061a8:	e7e0      	b.n	800616c <_printf_float+0x1a4>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	055a      	lsls	r2, r3, #21
 80061ae:	d407      	bmi.n	80061c0 <_printf_float+0x1f8>
 80061b0:	6923      	ldr	r3, [r4, #16]
 80061b2:	4642      	mov	r2, r8
 80061b4:	4631      	mov	r1, r6
 80061b6:	4628      	mov	r0, r5
 80061b8:	47b8      	blx	r7
 80061ba:	3001      	adds	r0, #1
 80061bc:	d12c      	bne.n	8006218 <_printf_float+0x250>
 80061be:	e764      	b.n	800608a <_printf_float+0xc2>
 80061c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061c4:	f240 80e0 	bls.w	8006388 <_printf_float+0x3c0>
 80061c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061cc:	2200      	movs	r2, #0
 80061ce:	2300      	movs	r3, #0
 80061d0:	f7fa fca2 	bl	8000b18 <__aeabi_dcmpeq>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d034      	beq.n	8006242 <_printf_float+0x27a>
 80061d8:	4a37      	ldr	r2, [pc, #220]	; (80062b8 <_printf_float+0x2f0>)
 80061da:	2301      	movs	r3, #1
 80061dc:	4631      	mov	r1, r6
 80061de:	4628      	mov	r0, r5
 80061e0:	47b8      	blx	r7
 80061e2:	3001      	adds	r0, #1
 80061e4:	f43f af51 	beq.w	800608a <_printf_float+0xc2>
 80061e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061ec:	429a      	cmp	r2, r3
 80061ee:	db02      	blt.n	80061f6 <_printf_float+0x22e>
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	07d8      	lsls	r0, r3, #31
 80061f4:	d510      	bpl.n	8006218 <_printf_float+0x250>
 80061f6:	ee18 3a10 	vmov	r3, s16
 80061fa:	4652      	mov	r2, sl
 80061fc:	4631      	mov	r1, r6
 80061fe:	4628      	mov	r0, r5
 8006200:	47b8      	blx	r7
 8006202:	3001      	adds	r0, #1
 8006204:	f43f af41 	beq.w	800608a <_printf_float+0xc2>
 8006208:	f04f 0800 	mov.w	r8, #0
 800620c:	f104 091a 	add.w	r9, r4, #26
 8006210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006212:	3b01      	subs	r3, #1
 8006214:	4543      	cmp	r3, r8
 8006216:	dc09      	bgt.n	800622c <_printf_float+0x264>
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	079b      	lsls	r3, r3, #30
 800621c:	f100 8105 	bmi.w	800642a <_printf_float+0x462>
 8006220:	68e0      	ldr	r0, [r4, #12]
 8006222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006224:	4298      	cmp	r0, r3
 8006226:	bfb8      	it	lt
 8006228:	4618      	movlt	r0, r3
 800622a:	e730      	b.n	800608e <_printf_float+0xc6>
 800622c:	2301      	movs	r3, #1
 800622e:	464a      	mov	r2, r9
 8006230:	4631      	mov	r1, r6
 8006232:	4628      	mov	r0, r5
 8006234:	47b8      	blx	r7
 8006236:	3001      	adds	r0, #1
 8006238:	f43f af27 	beq.w	800608a <_printf_float+0xc2>
 800623c:	f108 0801 	add.w	r8, r8, #1
 8006240:	e7e6      	b.n	8006210 <_printf_float+0x248>
 8006242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006244:	2b00      	cmp	r3, #0
 8006246:	dc39      	bgt.n	80062bc <_printf_float+0x2f4>
 8006248:	4a1b      	ldr	r2, [pc, #108]	; (80062b8 <_printf_float+0x2f0>)
 800624a:	2301      	movs	r3, #1
 800624c:	4631      	mov	r1, r6
 800624e:	4628      	mov	r0, r5
 8006250:	47b8      	blx	r7
 8006252:	3001      	adds	r0, #1
 8006254:	f43f af19 	beq.w	800608a <_printf_float+0xc2>
 8006258:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800625c:	4313      	orrs	r3, r2
 800625e:	d102      	bne.n	8006266 <_printf_float+0x29e>
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	07d9      	lsls	r1, r3, #31
 8006264:	d5d8      	bpl.n	8006218 <_printf_float+0x250>
 8006266:	ee18 3a10 	vmov	r3, s16
 800626a:	4652      	mov	r2, sl
 800626c:	4631      	mov	r1, r6
 800626e:	4628      	mov	r0, r5
 8006270:	47b8      	blx	r7
 8006272:	3001      	adds	r0, #1
 8006274:	f43f af09 	beq.w	800608a <_printf_float+0xc2>
 8006278:	f04f 0900 	mov.w	r9, #0
 800627c:	f104 0a1a 	add.w	sl, r4, #26
 8006280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006282:	425b      	negs	r3, r3
 8006284:	454b      	cmp	r3, r9
 8006286:	dc01      	bgt.n	800628c <_printf_float+0x2c4>
 8006288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800628a:	e792      	b.n	80061b2 <_printf_float+0x1ea>
 800628c:	2301      	movs	r3, #1
 800628e:	4652      	mov	r2, sl
 8006290:	4631      	mov	r1, r6
 8006292:	4628      	mov	r0, r5
 8006294:	47b8      	blx	r7
 8006296:	3001      	adds	r0, #1
 8006298:	f43f aef7 	beq.w	800608a <_printf_float+0xc2>
 800629c:	f109 0901 	add.w	r9, r9, #1
 80062a0:	e7ee      	b.n	8006280 <_printf_float+0x2b8>
 80062a2:	bf00      	nop
 80062a4:	7fefffff 	.word	0x7fefffff
 80062a8:	0800bc9c 	.word	0x0800bc9c
 80062ac:	0800bca0 	.word	0x0800bca0
 80062b0:	0800bca8 	.word	0x0800bca8
 80062b4:	0800bca4 	.word	0x0800bca4
 80062b8:	0800bcac 	.word	0x0800bcac
 80062bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062c0:	429a      	cmp	r2, r3
 80062c2:	bfa8      	it	ge
 80062c4:	461a      	movge	r2, r3
 80062c6:	2a00      	cmp	r2, #0
 80062c8:	4691      	mov	r9, r2
 80062ca:	dc37      	bgt.n	800633c <_printf_float+0x374>
 80062cc:	f04f 0b00 	mov.w	fp, #0
 80062d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062d4:	f104 021a 	add.w	r2, r4, #26
 80062d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062da:	9305      	str	r3, [sp, #20]
 80062dc:	eba3 0309 	sub.w	r3, r3, r9
 80062e0:	455b      	cmp	r3, fp
 80062e2:	dc33      	bgt.n	800634c <_printf_float+0x384>
 80062e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062e8:	429a      	cmp	r2, r3
 80062ea:	db3b      	blt.n	8006364 <_printf_float+0x39c>
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	07da      	lsls	r2, r3, #31
 80062f0:	d438      	bmi.n	8006364 <_printf_float+0x39c>
 80062f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f4:	9a05      	ldr	r2, [sp, #20]
 80062f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062f8:	1a9a      	subs	r2, r3, r2
 80062fa:	eba3 0901 	sub.w	r9, r3, r1
 80062fe:	4591      	cmp	r9, r2
 8006300:	bfa8      	it	ge
 8006302:	4691      	movge	r9, r2
 8006304:	f1b9 0f00 	cmp.w	r9, #0
 8006308:	dc35      	bgt.n	8006376 <_printf_float+0x3ae>
 800630a:	f04f 0800 	mov.w	r8, #0
 800630e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006312:	f104 0a1a 	add.w	sl, r4, #26
 8006316:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800631a:	1a9b      	subs	r3, r3, r2
 800631c:	eba3 0309 	sub.w	r3, r3, r9
 8006320:	4543      	cmp	r3, r8
 8006322:	f77f af79 	ble.w	8006218 <_printf_float+0x250>
 8006326:	2301      	movs	r3, #1
 8006328:	4652      	mov	r2, sl
 800632a:	4631      	mov	r1, r6
 800632c:	4628      	mov	r0, r5
 800632e:	47b8      	blx	r7
 8006330:	3001      	adds	r0, #1
 8006332:	f43f aeaa 	beq.w	800608a <_printf_float+0xc2>
 8006336:	f108 0801 	add.w	r8, r8, #1
 800633a:	e7ec      	b.n	8006316 <_printf_float+0x34e>
 800633c:	4613      	mov	r3, r2
 800633e:	4631      	mov	r1, r6
 8006340:	4642      	mov	r2, r8
 8006342:	4628      	mov	r0, r5
 8006344:	47b8      	blx	r7
 8006346:	3001      	adds	r0, #1
 8006348:	d1c0      	bne.n	80062cc <_printf_float+0x304>
 800634a:	e69e      	b.n	800608a <_printf_float+0xc2>
 800634c:	2301      	movs	r3, #1
 800634e:	4631      	mov	r1, r6
 8006350:	4628      	mov	r0, r5
 8006352:	9205      	str	r2, [sp, #20]
 8006354:	47b8      	blx	r7
 8006356:	3001      	adds	r0, #1
 8006358:	f43f ae97 	beq.w	800608a <_printf_float+0xc2>
 800635c:	9a05      	ldr	r2, [sp, #20]
 800635e:	f10b 0b01 	add.w	fp, fp, #1
 8006362:	e7b9      	b.n	80062d8 <_printf_float+0x310>
 8006364:	ee18 3a10 	vmov	r3, s16
 8006368:	4652      	mov	r2, sl
 800636a:	4631      	mov	r1, r6
 800636c:	4628      	mov	r0, r5
 800636e:	47b8      	blx	r7
 8006370:	3001      	adds	r0, #1
 8006372:	d1be      	bne.n	80062f2 <_printf_float+0x32a>
 8006374:	e689      	b.n	800608a <_printf_float+0xc2>
 8006376:	9a05      	ldr	r2, [sp, #20]
 8006378:	464b      	mov	r3, r9
 800637a:	4442      	add	r2, r8
 800637c:	4631      	mov	r1, r6
 800637e:	4628      	mov	r0, r5
 8006380:	47b8      	blx	r7
 8006382:	3001      	adds	r0, #1
 8006384:	d1c1      	bne.n	800630a <_printf_float+0x342>
 8006386:	e680      	b.n	800608a <_printf_float+0xc2>
 8006388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800638a:	2a01      	cmp	r2, #1
 800638c:	dc01      	bgt.n	8006392 <_printf_float+0x3ca>
 800638e:	07db      	lsls	r3, r3, #31
 8006390:	d538      	bpl.n	8006404 <_printf_float+0x43c>
 8006392:	2301      	movs	r3, #1
 8006394:	4642      	mov	r2, r8
 8006396:	4631      	mov	r1, r6
 8006398:	4628      	mov	r0, r5
 800639a:	47b8      	blx	r7
 800639c:	3001      	adds	r0, #1
 800639e:	f43f ae74 	beq.w	800608a <_printf_float+0xc2>
 80063a2:	ee18 3a10 	vmov	r3, s16
 80063a6:	4652      	mov	r2, sl
 80063a8:	4631      	mov	r1, r6
 80063aa:	4628      	mov	r0, r5
 80063ac:	47b8      	blx	r7
 80063ae:	3001      	adds	r0, #1
 80063b0:	f43f ae6b 	beq.w	800608a <_printf_float+0xc2>
 80063b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063b8:	2200      	movs	r2, #0
 80063ba:	2300      	movs	r3, #0
 80063bc:	f7fa fbac 	bl	8000b18 <__aeabi_dcmpeq>
 80063c0:	b9d8      	cbnz	r0, 80063fa <_printf_float+0x432>
 80063c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063c4:	f108 0201 	add.w	r2, r8, #1
 80063c8:	3b01      	subs	r3, #1
 80063ca:	4631      	mov	r1, r6
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b8      	blx	r7
 80063d0:	3001      	adds	r0, #1
 80063d2:	d10e      	bne.n	80063f2 <_printf_float+0x42a>
 80063d4:	e659      	b.n	800608a <_printf_float+0xc2>
 80063d6:	2301      	movs	r3, #1
 80063d8:	4652      	mov	r2, sl
 80063da:	4631      	mov	r1, r6
 80063dc:	4628      	mov	r0, r5
 80063de:	47b8      	blx	r7
 80063e0:	3001      	adds	r0, #1
 80063e2:	f43f ae52 	beq.w	800608a <_printf_float+0xc2>
 80063e6:	f108 0801 	add.w	r8, r8, #1
 80063ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ec:	3b01      	subs	r3, #1
 80063ee:	4543      	cmp	r3, r8
 80063f0:	dcf1      	bgt.n	80063d6 <_printf_float+0x40e>
 80063f2:	464b      	mov	r3, r9
 80063f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063f8:	e6dc      	b.n	80061b4 <_printf_float+0x1ec>
 80063fa:	f04f 0800 	mov.w	r8, #0
 80063fe:	f104 0a1a 	add.w	sl, r4, #26
 8006402:	e7f2      	b.n	80063ea <_printf_float+0x422>
 8006404:	2301      	movs	r3, #1
 8006406:	4642      	mov	r2, r8
 8006408:	e7df      	b.n	80063ca <_printf_float+0x402>
 800640a:	2301      	movs	r3, #1
 800640c:	464a      	mov	r2, r9
 800640e:	4631      	mov	r1, r6
 8006410:	4628      	mov	r0, r5
 8006412:	47b8      	blx	r7
 8006414:	3001      	adds	r0, #1
 8006416:	f43f ae38 	beq.w	800608a <_printf_float+0xc2>
 800641a:	f108 0801 	add.w	r8, r8, #1
 800641e:	68e3      	ldr	r3, [r4, #12]
 8006420:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006422:	1a5b      	subs	r3, r3, r1
 8006424:	4543      	cmp	r3, r8
 8006426:	dcf0      	bgt.n	800640a <_printf_float+0x442>
 8006428:	e6fa      	b.n	8006220 <_printf_float+0x258>
 800642a:	f04f 0800 	mov.w	r8, #0
 800642e:	f104 0919 	add.w	r9, r4, #25
 8006432:	e7f4      	b.n	800641e <_printf_float+0x456>

08006434 <_printf_common>:
 8006434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006438:	4616      	mov	r6, r2
 800643a:	4699      	mov	r9, r3
 800643c:	688a      	ldr	r2, [r1, #8]
 800643e:	690b      	ldr	r3, [r1, #16]
 8006440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006444:	4293      	cmp	r3, r2
 8006446:	bfb8      	it	lt
 8006448:	4613      	movlt	r3, r2
 800644a:	6033      	str	r3, [r6, #0]
 800644c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006450:	4607      	mov	r7, r0
 8006452:	460c      	mov	r4, r1
 8006454:	b10a      	cbz	r2, 800645a <_printf_common+0x26>
 8006456:	3301      	adds	r3, #1
 8006458:	6033      	str	r3, [r6, #0]
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	0699      	lsls	r1, r3, #26
 800645e:	bf42      	ittt	mi
 8006460:	6833      	ldrmi	r3, [r6, #0]
 8006462:	3302      	addmi	r3, #2
 8006464:	6033      	strmi	r3, [r6, #0]
 8006466:	6825      	ldr	r5, [r4, #0]
 8006468:	f015 0506 	ands.w	r5, r5, #6
 800646c:	d106      	bne.n	800647c <_printf_common+0x48>
 800646e:	f104 0a19 	add.w	sl, r4, #25
 8006472:	68e3      	ldr	r3, [r4, #12]
 8006474:	6832      	ldr	r2, [r6, #0]
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	42ab      	cmp	r3, r5
 800647a:	dc26      	bgt.n	80064ca <_printf_common+0x96>
 800647c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006480:	1e13      	subs	r3, r2, #0
 8006482:	6822      	ldr	r2, [r4, #0]
 8006484:	bf18      	it	ne
 8006486:	2301      	movne	r3, #1
 8006488:	0692      	lsls	r2, r2, #26
 800648a:	d42b      	bmi.n	80064e4 <_printf_common+0xb0>
 800648c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006490:	4649      	mov	r1, r9
 8006492:	4638      	mov	r0, r7
 8006494:	47c0      	blx	r8
 8006496:	3001      	adds	r0, #1
 8006498:	d01e      	beq.n	80064d8 <_printf_common+0xa4>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	68e5      	ldr	r5, [r4, #12]
 800649e:	6832      	ldr	r2, [r6, #0]
 80064a0:	f003 0306 	and.w	r3, r3, #6
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	bf08      	it	eq
 80064a8:	1aad      	subeq	r5, r5, r2
 80064aa:	68a3      	ldr	r3, [r4, #8]
 80064ac:	6922      	ldr	r2, [r4, #16]
 80064ae:	bf0c      	ite	eq
 80064b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064b4:	2500      	movne	r5, #0
 80064b6:	4293      	cmp	r3, r2
 80064b8:	bfc4      	itt	gt
 80064ba:	1a9b      	subgt	r3, r3, r2
 80064bc:	18ed      	addgt	r5, r5, r3
 80064be:	2600      	movs	r6, #0
 80064c0:	341a      	adds	r4, #26
 80064c2:	42b5      	cmp	r5, r6
 80064c4:	d11a      	bne.n	80064fc <_printf_common+0xc8>
 80064c6:	2000      	movs	r0, #0
 80064c8:	e008      	b.n	80064dc <_printf_common+0xa8>
 80064ca:	2301      	movs	r3, #1
 80064cc:	4652      	mov	r2, sl
 80064ce:	4649      	mov	r1, r9
 80064d0:	4638      	mov	r0, r7
 80064d2:	47c0      	blx	r8
 80064d4:	3001      	adds	r0, #1
 80064d6:	d103      	bne.n	80064e0 <_printf_common+0xac>
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295
 80064dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e0:	3501      	adds	r5, #1
 80064e2:	e7c6      	b.n	8006472 <_printf_common+0x3e>
 80064e4:	18e1      	adds	r1, r4, r3
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	2030      	movs	r0, #48	; 0x30
 80064ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064ee:	4422      	add	r2, r4
 80064f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064f8:	3302      	adds	r3, #2
 80064fa:	e7c7      	b.n	800648c <_printf_common+0x58>
 80064fc:	2301      	movs	r3, #1
 80064fe:	4622      	mov	r2, r4
 8006500:	4649      	mov	r1, r9
 8006502:	4638      	mov	r0, r7
 8006504:	47c0      	blx	r8
 8006506:	3001      	adds	r0, #1
 8006508:	d0e6      	beq.n	80064d8 <_printf_common+0xa4>
 800650a:	3601      	adds	r6, #1
 800650c:	e7d9      	b.n	80064c2 <_printf_common+0x8e>
	...

08006510 <_printf_i>:
 8006510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	7e0f      	ldrb	r7, [r1, #24]
 8006516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006518:	2f78      	cmp	r7, #120	; 0x78
 800651a:	4691      	mov	r9, r2
 800651c:	4680      	mov	r8, r0
 800651e:	460c      	mov	r4, r1
 8006520:	469a      	mov	sl, r3
 8006522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006526:	d807      	bhi.n	8006538 <_printf_i+0x28>
 8006528:	2f62      	cmp	r7, #98	; 0x62
 800652a:	d80a      	bhi.n	8006542 <_printf_i+0x32>
 800652c:	2f00      	cmp	r7, #0
 800652e:	f000 80d8 	beq.w	80066e2 <_printf_i+0x1d2>
 8006532:	2f58      	cmp	r7, #88	; 0x58
 8006534:	f000 80a3 	beq.w	800667e <_printf_i+0x16e>
 8006538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800653c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006540:	e03a      	b.n	80065b8 <_printf_i+0xa8>
 8006542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006546:	2b15      	cmp	r3, #21
 8006548:	d8f6      	bhi.n	8006538 <_printf_i+0x28>
 800654a:	a101      	add	r1, pc, #4	; (adr r1, 8006550 <_printf_i+0x40>)
 800654c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006550:	080065a9 	.word	0x080065a9
 8006554:	080065bd 	.word	0x080065bd
 8006558:	08006539 	.word	0x08006539
 800655c:	08006539 	.word	0x08006539
 8006560:	08006539 	.word	0x08006539
 8006564:	08006539 	.word	0x08006539
 8006568:	080065bd 	.word	0x080065bd
 800656c:	08006539 	.word	0x08006539
 8006570:	08006539 	.word	0x08006539
 8006574:	08006539 	.word	0x08006539
 8006578:	08006539 	.word	0x08006539
 800657c:	080066c9 	.word	0x080066c9
 8006580:	080065ed 	.word	0x080065ed
 8006584:	080066ab 	.word	0x080066ab
 8006588:	08006539 	.word	0x08006539
 800658c:	08006539 	.word	0x08006539
 8006590:	080066eb 	.word	0x080066eb
 8006594:	08006539 	.word	0x08006539
 8006598:	080065ed 	.word	0x080065ed
 800659c:	08006539 	.word	0x08006539
 80065a0:	08006539 	.word	0x08006539
 80065a4:	080066b3 	.word	0x080066b3
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	1d1a      	adds	r2, r3, #4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	602a      	str	r2, [r5, #0]
 80065b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0a3      	b.n	8006704 <_printf_i+0x1f4>
 80065bc:	6820      	ldr	r0, [r4, #0]
 80065be:	6829      	ldr	r1, [r5, #0]
 80065c0:	0606      	lsls	r6, r0, #24
 80065c2:	f101 0304 	add.w	r3, r1, #4
 80065c6:	d50a      	bpl.n	80065de <_printf_i+0xce>
 80065c8:	680e      	ldr	r6, [r1, #0]
 80065ca:	602b      	str	r3, [r5, #0]
 80065cc:	2e00      	cmp	r6, #0
 80065ce:	da03      	bge.n	80065d8 <_printf_i+0xc8>
 80065d0:	232d      	movs	r3, #45	; 0x2d
 80065d2:	4276      	negs	r6, r6
 80065d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065d8:	485e      	ldr	r0, [pc, #376]	; (8006754 <_printf_i+0x244>)
 80065da:	230a      	movs	r3, #10
 80065dc:	e019      	b.n	8006612 <_printf_i+0x102>
 80065de:	680e      	ldr	r6, [r1, #0]
 80065e0:	602b      	str	r3, [r5, #0]
 80065e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065e6:	bf18      	it	ne
 80065e8:	b236      	sxthne	r6, r6
 80065ea:	e7ef      	b.n	80065cc <_printf_i+0xbc>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	6820      	ldr	r0, [r4, #0]
 80065f0:	1d19      	adds	r1, r3, #4
 80065f2:	6029      	str	r1, [r5, #0]
 80065f4:	0601      	lsls	r1, r0, #24
 80065f6:	d501      	bpl.n	80065fc <_printf_i+0xec>
 80065f8:	681e      	ldr	r6, [r3, #0]
 80065fa:	e002      	b.n	8006602 <_printf_i+0xf2>
 80065fc:	0646      	lsls	r6, r0, #25
 80065fe:	d5fb      	bpl.n	80065f8 <_printf_i+0xe8>
 8006600:	881e      	ldrh	r6, [r3, #0]
 8006602:	4854      	ldr	r0, [pc, #336]	; (8006754 <_printf_i+0x244>)
 8006604:	2f6f      	cmp	r7, #111	; 0x6f
 8006606:	bf0c      	ite	eq
 8006608:	2308      	moveq	r3, #8
 800660a:	230a      	movne	r3, #10
 800660c:	2100      	movs	r1, #0
 800660e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006612:	6865      	ldr	r5, [r4, #4]
 8006614:	60a5      	str	r5, [r4, #8]
 8006616:	2d00      	cmp	r5, #0
 8006618:	bfa2      	ittt	ge
 800661a:	6821      	ldrge	r1, [r4, #0]
 800661c:	f021 0104 	bicge.w	r1, r1, #4
 8006620:	6021      	strge	r1, [r4, #0]
 8006622:	b90e      	cbnz	r6, 8006628 <_printf_i+0x118>
 8006624:	2d00      	cmp	r5, #0
 8006626:	d04d      	beq.n	80066c4 <_printf_i+0x1b4>
 8006628:	4615      	mov	r5, r2
 800662a:	fbb6 f1f3 	udiv	r1, r6, r3
 800662e:	fb03 6711 	mls	r7, r3, r1, r6
 8006632:	5dc7      	ldrb	r7, [r0, r7]
 8006634:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006638:	4637      	mov	r7, r6
 800663a:	42bb      	cmp	r3, r7
 800663c:	460e      	mov	r6, r1
 800663e:	d9f4      	bls.n	800662a <_printf_i+0x11a>
 8006640:	2b08      	cmp	r3, #8
 8006642:	d10b      	bne.n	800665c <_printf_i+0x14c>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	07de      	lsls	r6, r3, #31
 8006648:	d508      	bpl.n	800665c <_printf_i+0x14c>
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	6861      	ldr	r1, [r4, #4]
 800664e:	4299      	cmp	r1, r3
 8006650:	bfde      	ittt	le
 8006652:	2330      	movle	r3, #48	; 0x30
 8006654:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006658:	f105 35ff 	addle.w	r5, r5, #4294967295
 800665c:	1b52      	subs	r2, r2, r5
 800665e:	6122      	str	r2, [r4, #16]
 8006660:	f8cd a000 	str.w	sl, [sp]
 8006664:	464b      	mov	r3, r9
 8006666:	aa03      	add	r2, sp, #12
 8006668:	4621      	mov	r1, r4
 800666a:	4640      	mov	r0, r8
 800666c:	f7ff fee2 	bl	8006434 <_printf_common>
 8006670:	3001      	adds	r0, #1
 8006672:	d14c      	bne.n	800670e <_printf_i+0x1fe>
 8006674:	f04f 30ff 	mov.w	r0, #4294967295
 8006678:	b004      	add	sp, #16
 800667a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667e:	4835      	ldr	r0, [pc, #212]	; (8006754 <_printf_i+0x244>)
 8006680:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006684:	6829      	ldr	r1, [r5, #0]
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	f851 6b04 	ldr.w	r6, [r1], #4
 800668c:	6029      	str	r1, [r5, #0]
 800668e:	061d      	lsls	r5, r3, #24
 8006690:	d514      	bpl.n	80066bc <_printf_i+0x1ac>
 8006692:	07df      	lsls	r7, r3, #31
 8006694:	bf44      	itt	mi
 8006696:	f043 0320 	orrmi.w	r3, r3, #32
 800669a:	6023      	strmi	r3, [r4, #0]
 800669c:	b91e      	cbnz	r6, 80066a6 <_printf_i+0x196>
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	f023 0320 	bic.w	r3, r3, #32
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	2310      	movs	r3, #16
 80066a8:	e7b0      	b.n	800660c <_printf_i+0xfc>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	f043 0320 	orr.w	r3, r3, #32
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	2378      	movs	r3, #120	; 0x78
 80066b4:	4828      	ldr	r0, [pc, #160]	; (8006758 <_printf_i+0x248>)
 80066b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066ba:	e7e3      	b.n	8006684 <_printf_i+0x174>
 80066bc:	0659      	lsls	r1, r3, #25
 80066be:	bf48      	it	mi
 80066c0:	b2b6      	uxthmi	r6, r6
 80066c2:	e7e6      	b.n	8006692 <_printf_i+0x182>
 80066c4:	4615      	mov	r5, r2
 80066c6:	e7bb      	b.n	8006640 <_printf_i+0x130>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	6826      	ldr	r6, [r4, #0]
 80066cc:	6961      	ldr	r1, [r4, #20]
 80066ce:	1d18      	adds	r0, r3, #4
 80066d0:	6028      	str	r0, [r5, #0]
 80066d2:	0635      	lsls	r5, r6, #24
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	d501      	bpl.n	80066dc <_printf_i+0x1cc>
 80066d8:	6019      	str	r1, [r3, #0]
 80066da:	e002      	b.n	80066e2 <_printf_i+0x1d2>
 80066dc:	0670      	lsls	r0, r6, #25
 80066de:	d5fb      	bpl.n	80066d8 <_printf_i+0x1c8>
 80066e0:	8019      	strh	r1, [r3, #0]
 80066e2:	2300      	movs	r3, #0
 80066e4:	6123      	str	r3, [r4, #16]
 80066e6:	4615      	mov	r5, r2
 80066e8:	e7ba      	b.n	8006660 <_printf_i+0x150>
 80066ea:	682b      	ldr	r3, [r5, #0]
 80066ec:	1d1a      	adds	r2, r3, #4
 80066ee:	602a      	str	r2, [r5, #0]
 80066f0:	681d      	ldr	r5, [r3, #0]
 80066f2:	6862      	ldr	r2, [r4, #4]
 80066f4:	2100      	movs	r1, #0
 80066f6:	4628      	mov	r0, r5
 80066f8:	f7f9 fd9a 	bl	8000230 <memchr>
 80066fc:	b108      	cbz	r0, 8006702 <_printf_i+0x1f2>
 80066fe:	1b40      	subs	r0, r0, r5
 8006700:	6060      	str	r0, [r4, #4]
 8006702:	6863      	ldr	r3, [r4, #4]
 8006704:	6123      	str	r3, [r4, #16]
 8006706:	2300      	movs	r3, #0
 8006708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800670c:	e7a8      	b.n	8006660 <_printf_i+0x150>
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	462a      	mov	r2, r5
 8006712:	4649      	mov	r1, r9
 8006714:	4640      	mov	r0, r8
 8006716:	47d0      	blx	sl
 8006718:	3001      	adds	r0, #1
 800671a:	d0ab      	beq.n	8006674 <_printf_i+0x164>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	079b      	lsls	r3, r3, #30
 8006720:	d413      	bmi.n	800674a <_printf_i+0x23a>
 8006722:	68e0      	ldr	r0, [r4, #12]
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	4298      	cmp	r0, r3
 8006728:	bfb8      	it	lt
 800672a:	4618      	movlt	r0, r3
 800672c:	e7a4      	b.n	8006678 <_printf_i+0x168>
 800672e:	2301      	movs	r3, #1
 8006730:	4632      	mov	r2, r6
 8006732:	4649      	mov	r1, r9
 8006734:	4640      	mov	r0, r8
 8006736:	47d0      	blx	sl
 8006738:	3001      	adds	r0, #1
 800673a:	d09b      	beq.n	8006674 <_printf_i+0x164>
 800673c:	3501      	adds	r5, #1
 800673e:	68e3      	ldr	r3, [r4, #12]
 8006740:	9903      	ldr	r1, [sp, #12]
 8006742:	1a5b      	subs	r3, r3, r1
 8006744:	42ab      	cmp	r3, r5
 8006746:	dcf2      	bgt.n	800672e <_printf_i+0x21e>
 8006748:	e7eb      	b.n	8006722 <_printf_i+0x212>
 800674a:	2500      	movs	r5, #0
 800674c:	f104 0619 	add.w	r6, r4, #25
 8006750:	e7f5      	b.n	800673e <_printf_i+0x22e>
 8006752:	bf00      	nop
 8006754:	0800bcae 	.word	0x0800bcae
 8006758:	0800bcbf 	.word	0x0800bcbf

0800675c <_scanf_float>:
 800675c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006760:	b087      	sub	sp, #28
 8006762:	4617      	mov	r7, r2
 8006764:	9303      	str	r3, [sp, #12]
 8006766:	688b      	ldr	r3, [r1, #8]
 8006768:	1e5a      	subs	r2, r3, #1
 800676a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800676e:	bf83      	ittte	hi
 8006770:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006774:	195b      	addhi	r3, r3, r5
 8006776:	9302      	strhi	r3, [sp, #8]
 8006778:	2300      	movls	r3, #0
 800677a:	bf86      	itte	hi
 800677c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006780:	608b      	strhi	r3, [r1, #8]
 8006782:	9302      	strls	r3, [sp, #8]
 8006784:	680b      	ldr	r3, [r1, #0]
 8006786:	468b      	mov	fp, r1
 8006788:	2500      	movs	r5, #0
 800678a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800678e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006792:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006796:	4680      	mov	r8, r0
 8006798:	460c      	mov	r4, r1
 800679a:	465e      	mov	r6, fp
 800679c:	46aa      	mov	sl, r5
 800679e:	46a9      	mov	r9, r5
 80067a0:	9501      	str	r5, [sp, #4]
 80067a2:	68a2      	ldr	r2, [r4, #8]
 80067a4:	b152      	cbz	r2, 80067bc <_scanf_float+0x60>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b4e      	cmp	r3, #78	; 0x4e
 80067ac:	d864      	bhi.n	8006878 <_scanf_float+0x11c>
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	d83c      	bhi.n	800682c <_scanf_float+0xd0>
 80067b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80067b6:	b2c8      	uxtb	r0, r1
 80067b8:	280e      	cmp	r0, #14
 80067ba:	d93a      	bls.n	8006832 <_scanf_float+0xd6>
 80067bc:	f1b9 0f00 	cmp.w	r9, #0
 80067c0:	d003      	beq.n	80067ca <_scanf_float+0x6e>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067ce:	f1ba 0f01 	cmp.w	sl, #1
 80067d2:	f200 8113 	bhi.w	80069fc <_scanf_float+0x2a0>
 80067d6:	455e      	cmp	r6, fp
 80067d8:	f200 8105 	bhi.w	80069e6 <_scanf_float+0x28a>
 80067dc:	2501      	movs	r5, #1
 80067de:	4628      	mov	r0, r5
 80067e0:	b007      	add	sp, #28
 80067e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80067ea:	2a0d      	cmp	r2, #13
 80067ec:	d8e6      	bhi.n	80067bc <_scanf_float+0x60>
 80067ee:	a101      	add	r1, pc, #4	; (adr r1, 80067f4 <_scanf_float+0x98>)
 80067f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80067f4:	08006933 	.word	0x08006933
 80067f8:	080067bd 	.word	0x080067bd
 80067fc:	080067bd 	.word	0x080067bd
 8006800:	080067bd 	.word	0x080067bd
 8006804:	08006993 	.word	0x08006993
 8006808:	0800696b 	.word	0x0800696b
 800680c:	080067bd 	.word	0x080067bd
 8006810:	080067bd 	.word	0x080067bd
 8006814:	08006941 	.word	0x08006941
 8006818:	080067bd 	.word	0x080067bd
 800681c:	080067bd 	.word	0x080067bd
 8006820:	080067bd 	.word	0x080067bd
 8006824:	080067bd 	.word	0x080067bd
 8006828:	080068f9 	.word	0x080068f9
 800682c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006830:	e7db      	b.n	80067ea <_scanf_float+0x8e>
 8006832:	290e      	cmp	r1, #14
 8006834:	d8c2      	bhi.n	80067bc <_scanf_float+0x60>
 8006836:	a001      	add	r0, pc, #4	; (adr r0, 800683c <_scanf_float+0xe0>)
 8006838:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800683c:	080068eb 	.word	0x080068eb
 8006840:	080067bd 	.word	0x080067bd
 8006844:	080068eb 	.word	0x080068eb
 8006848:	0800697f 	.word	0x0800697f
 800684c:	080067bd 	.word	0x080067bd
 8006850:	08006899 	.word	0x08006899
 8006854:	080068d5 	.word	0x080068d5
 8006858:	080068d5 	.word	0x080068d5
 800685c:	080068d5 	.word	0x080068d5
 8006860:	080068d5 	.word	0x080068d5
 8006864:	080068d5 	.word	0x080068d5
 8006868:	080068d5 	.word	0x080068d5
 800686c:	080068d5 	.word	0x080068d5
 8006870:	080068d5 	.word	0x080068d5
 8006874:	080068d5 	.word	0x080068d5
 8006878:	2b6e      	cmp	r3, #110	; 0x6e
 800687a:	d809      	bhi.n	8006890 <_scanf_float+0x134>
 800687c:	2b60      	cmp	r3, #96	; 0x60
 800687e:	d8b2      	bhi.n	80067e6 <_scanf_float+0x8a>
 8006880:	2b54      	cmp	r3, #84	; 0x54
 8006882:	d077      	beq.n	8006974 <_scanf_float+0x218>
 8006884:	2b59      	cmp	r3, #89	; 0x59
 8006886:	d199      	bne.n	80067bc <_scanf_float+0x60>
 8006888:	2d07      	cmp	r5, #7
 800688a:	d197      	bne.n	80067bc <_scanf_float+0x60>
 800688c:	2508      	movs	r5, #8
 800688e:	e029      	b.n	80068e4 <_scanf_float+0x188>
 8006890:	2b74      	cmp	r3, #116	; 0x74
 8006892:	d06f      	beq.n	8006974 <_scanf_float+0x218>
 8006894:	2b79      	cmp	r3, #121	; 0x79
 8006896:	e7f6      	b.n	8006886 <_scanf_float+0x12a>
 8006898:	6821      	ldr	r1, [r4, #0]
 800689a:	05c8      	lsls	r0, r1, #23
 800689c:	d51a      	bpl.n	80068d4 <_scanf_float+0x178>
 800689e:	9b02      	ldr	r3, [sp, #8]
 80068a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80068a4:	6021      	str	r1, [r4, #0]
 80068a6:	f109 0901 	add.w	r9, r9, #1
 80068aa:	b11b      	cbz	r3, 80068b4 <_scanf_float+0x158>
 80068ac:	3b01      	subs	r3, #1
 80068ae:	3201      	adds	r2, #1
 80068b0:	9302      	str	r3, [sp, #8]
 80068b2:	60a2      	str	r2, [r4, #8]
 80068b4:	68a3      	ldr	r3, [r4, #8]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	60a3      	str	r3, [r4, #8]
 80068ba:	6923      	ldr	r3, [r4, #16]
 80068bc:	3301      	adds	r3, #1
 80068be:	6123      	str	r3, [r4, #16]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	607b      	str	r3, [r7, #4]
 80068c8:	f340 8084 	ble.w	80069d4 <_scanf_float+0x278>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	3301      	adds	r3, #1
 80068d0:	603b      	str	r3, [r7, #0]
 80068d2:	e766      	b.n	80067a2 <_scanf_float+0x46>
 80068d4:	eb1a 0f05 	cmn.w	sl, r5
 80068d8:	f47f af70 	bne.w	80067bc <_scanf_float+0x60>
 80068dc:	6822      	ldr	r2, [r4, #0]
 80068de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80068e2:	6022      	str	r2, [r4, #0]
 80068e4:	f806 3b01 	strb.w	r3, [r6], #1
 80068e8:	e7e4      	b.n	80068b4 <_scanf_float+0x158>
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	0610      	lsls	r0, r2, #24
 80068ee:	f57f af65 	bpl.w	80067bc <_scanf_float+0x60>
 80068f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068f6:	e7f4      	b.n	80068e2 <_scanf_float+0x186>
 80068f8:	f1ba 0f00 	cmp.w	sl, #0
 80068fc:	d10e      	bne.n	800691c <_scanf_float+0x1c0>
 80068fe:	f1b9 0f00 	cmp.w	r9, #0
 8006902:	d10e      	bne.n	8006922 <_scanf_float+0x1c6>
 8006904:	6822      	ldr	r2, [r4, #0]
 8006906:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800690a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800690e:	d108      	bne.n	8006922 <_scanf_float+0x1c6>
 8006910:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006914:	6022      	str	r2, [r4, #0]
 8006916:	f04f 0a01 	mov.w	sl, #1
 800691a:	e7e3      	b.n	80068e4 <_scanf_float+0x188>
 800691c:	f1ba 0f02 	cmp.w	sl, #2
 8006920:	d055      	beq.n	80069ce <_scanf_float+0x272>
 8006922:	2d01      	cmp	r5, #1
 8006924:	d002      	beq.n	800692c <_scanf_float+0x1d0>
 8006926:	2d04      	cmp	r5, #4
 8006928:	f47f af48 	bne.w	80067bc <_scanf_float+0x60>
 800692c:	3501      	adds	r5, #1
 800692e:	b2ed      	uxtb	r5, r5
 8006930:	e7d8      	b.n	80068e4 <_scanf_float+0x188>
 8006932:	f1ba 0f01 	cmp.w	sl, #1
 8006936:	f47f af41 	bne.w	80067bc <_scanf_float+0x60>
 800693a:	f04f 0a02 	mov.w	sl, #2
 800693e:	e7d1      	b.n	80068e4 <_scanf_float+0x188>
 8006940:	b97d      	cbnz	r5, 8006962 <_scanf_float+0x206>
 8006942:	f1b9 0f00 	cmp.w	r9, #0
 8006946:	f47f af3c 	bne.w	80067c2 <_scanf_float+0x66>
 800694a:	6822      	ldr	r2, [r4, #0]
 800694c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006950:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006954:	f47f af39 	bne.w	80067ca <_scanf_float+0x6e>
 8006958:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800695c:	6022      	str	r2, [r4, #0]
 800695e:	2501      	movs	r5, #1
 8006960:	e7c0      	b.n	80068e4 <_scanf_float+0x188>
 8006962:	2d03      	cmp	r5, #3
 8006964:	d0e2      	beq.n	800692c <_scanf_float+0x1d0>
 8006966:	2d05      	cmp	r5, #5
 8006968:	e7de      	b.n	8006928 <_scanf_float+0x1cc>
 800696a:	2d02      	cmp	r5, #2
 800696c:	f47f af26 	bne.w	80067bc <_scanf_float+0x60>
 8006970:	2503      	movs	r5, #3
 8006972:	e7b7      	b.n	80068e4 <_scanf_float+0x188>
 8006974:	2d06      	cmp	r5, #6
 8006976:	f47f af21 	bne.w	80067bc <_scanf_float+0x60>
 800697a:	2507      	movs	r5, #7
 800697c:	e7b2      	b.n	80068e4 <_scanf_float+0x188>
 800697e:	6822      	ldr	r2, [r4, #0]
 8006980:	0591      	lsls	r1, r2, #22
 8006982:	f57f af1b 	bpl.w	80067bc <_scanf_float+0x60>
 8006986:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800698a:	6022      	str	r2, [r4, #0]
 800698c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006990:	e7a8      	b.n	80068e4 <_scanf_float+0x188>
 8006992:	6822      	ldr	r2, [r4, #0]
 8006994:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006998:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800699c:	d006      	beq.n	80069ac <_scanf_float+0x250>
 800699e:	0550      	lsls	r0, r2, #21
 80069a0:	f57f af0c 	bpl.w	80067bc <_scanf_float+0x60>
 80069a4:	f1b9 0f00 	cmp.w	r9, #0
 80069a8:	f43f af0f 	beq.w	80067ca <_scanf_float+0x6e>
 80069ac:	0591      	lsls	r1, r2, #22
 80069ae:	bf58      	it	pl
 80069b0:	9901      	ldrpl	r1, [sp, #4]
 80069b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80069b6:	bf58      	it	pl
 80069b8:	eba9 0101 	subpl.w	r1, r9, r1
 80069bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80069c0:	bf58      	it	pl
 80069c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80069c6:	6022      	str	r2, [r4, #0]
 80069c8:	f04f 0900 	mov.w	r9, #0
 80069cc:	e78a      	b.n	80068e4 <_scanf_float+0x188>
 80069ce:	f04f 0a03 	mov.w	sl, #3
 80069d2:	e787      	b.n	80068e4 <_scanf_float+0x188>
 80069d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80069d8:	4639      	mov	r1, r7
 80069da:	4640      	mov	r0, r8
 80069dc:	4798      	blx	r3
 80069de:	2800      	cmp	r0, #0
 80069e0:	f43f aedf 	beq.w	80067a2 <_scanf_float+0x46>
 80069e4:	e6ea      	b.n	80067bc <_scanf_float+0x60>
 80069e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069ee:	463a      	mov	r2, r7
 80069f0:	4640      	mov	r0, r8
 80069f2:	4798      	blx	r3
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	6123      	str	r3, [r4, #16]
 80069fa:	e6ec      	b.n	80067d6 <_scanf_float+0x7a>
 80069fc:	1e6b      	subs	r3, r5, #1
 80069fe:	2b06      	cmp	r3, #6
 8006a00:	d825      	bhi.n	8006a4e <_scanf_float+0x2f2>
 8006a02:	2d02      	cmp	r5, #2
 8006a04:	d836      	bhi.n	8006a74 <_scanf_float+0x318>
 8006a06:	455e      	cmp	r6, fp
 8006a08:	f67f aee8 	bls.w	80067dc <_scanf_float+0x80>
 8006a0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a14:	463a      	mov	r2, r7
 8006a16:	4640      	mov	r0, r8
 8006a18:	4798      	blx	r3
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	6123      	str	r3, [r4, #16]
 8006a20:	e7f1      	b.n	8006a06 <_scanf_float+0x2aa>
 8006a22:	9802      	ldr	r0, [sp, #8]
 8006a24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a28:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006a2c:	9002      	str	r0, [sp, #8]
 8006a2e:	463a      	mov	r2, r7
 8006a30:	4640      	mov	r0, r8
 8006a32:	4798      	blx	r3
 8006a34:	6923      	ldr	r3, [r4, #16]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	6123      	str	r3, [r4, #16]
 8006a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a3e:	fa5f fa8a 	uxtb.w	sl, sl
 8006a42:	f1ba 0f02 	cmp.w	sl, #2
 8006a46:	d1ec      	bne.n	8006a22 <_scanf_float+0x2c6>
 8006a48:	3d03      	subs	r5, #3
 8006a4a:	b2ed      	uxtb	r5, r5
 8006a4c:	1b76      	subs	r6, r6, r5
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	05da      	lsls	r2, r3, #23
 8006a52:	d52f      	bpl.n	8006ab4 <_scanf_float+0x358>
 8006a54:	055b      	lsls	r3, r3, #21
 8006a56:	d510      	bpl.n	8006a7a <_scanf_float+0x31e>
 8006a58:	455e      	cmp	r6, fp
 8006a5a:	f67f aebf 	bls.w	80067dc <_scanf_float+0x80>
 8006a5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a66:	463a      	mov	r2, r7
 8006a68:	4640      	mov	r0, r8
 8006a6a:	4798      	blx	r3
 8006a6c:	6923      	ldr	r3, [r4, #16]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	6123      	str	r3, [r4, #16]
 8006a72:	e7f1      	b.n	8006a58 <_scanf_float+0x2fc>
 8006a74:	46aa      	mov	sl, r5
 8006a76:	9602      	str	r6, [sp, #8]
 8006a78:	e7df      	b.n	8006a3a <_scanf_float+0x2de>
 8006a7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006a7e:	6923      	ldr	r3, [r4, #16]
 8006a80:	2965      	cmp	r1, #101	; 0x65
 8006a82:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a86:	f106 35ff 	add.w	r5, r6, #4294967295
 8006a8a:	6123      	str	r3, [r4, #16]
 8006a8c:	d00c      	beq.n	8006aa8 <_scanf_float+0x34c>
 8006a8e:	2945      	cmp	r1, #69	; 0x45
 8006a90:	d00a      	beq.n	8006aa8 <_scanf_float+0x34c>
 8006a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a96:	463a      	mov	r2, r7
 8006a98:	4640      	mov	r0, r8
 8006a9a:	4798      	blx	r3
 8006a9c:	6923      	ldr	r3, [r4, #16]
 8006a9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	1eb5      	subs	r5, r6, #2
 8006aa6:	6123      	str	r3, [r4, #16]
 8006aa8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006aac:	463a      	mov	r2, r7
 8006aae:	4640      	mov	r0, r8
 8006ab0:	4798      	blx	r3
 8006ab2:	462e      	mov	r6, r5
 8006ab4:	6825      	ldr	r5, [r4, #0]
 8006ab6:	f015 0510 	ands.w	r5, r5, #16
 8006aba:	d159      	bne.n	8006b70 <_scanf_float+0x414>
 8006abc:	7035      	strb	r5, [r6, #0]
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac8:	d11b      	bne.n	8006b02 <_scanf_float+0x3a6>
 8006aca:	9b01      	ldr	r3, [sp, #4]
 8006acc:	454b      	cmp	r3, r9
 8006ace:	eba3 0209 	sub.w	r2, r3, r9
 8006ad2:	d123      	bne.n	8006b1c <_scanf_float+0x3c0>
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4659      	mov	r1, fp
 8006ad8:	4640      	mov	r0, r8
 8006ada:	f000 fe97 	bl	800780c <_strtod_r>
 8006ade:	6822      	ldr	r2, [r4, #0]
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	f012 0f02 	tst.w	r2, #2
 8006ae6:	ec57 6b10 	vmov	r6, r7, d0
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	d021      	beq.n	8006b32 <_scanf_float+0x3d6>
 8006aee:	9903      	ldr	r1, [sp, #12]
 8006af0:	1d1a      	adds	r2, r3, #4
 8006af2:	600a      	str	r2, [r1, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	e9c3 6700 	strd	r6, r7, [r3]
 8006afa:	68e3      	ldr	r3, [r4, #12]
 8006afc:	3301      	adds	r3, #1
 8006afe:	60e3      	str	r3, [r4, #12]
 8006b00:	e66d      	b.n	80067de <_scanf_float+0x82>
 8006b02:	9b04      	ldr	r3, [sp, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0e5      	beq.n	8006ad4 <_scanf_float+0x378>
 8006b08:	9905      	ldr	r1, [sp, #20]
 8006b0a:	230a      	movs	r3, #10
 8006b0c:	462a      	mov	r2, r5
 8006b0e:	3101      	adds	r1, #1
 8006b10:	4640      	mov	r0, r8
 8006b12:	f000 ff03 	bl	800791c <_strtol_r>
 8006b16:	9b04      	ldr	r3, [sp, #16]
 8006b18:	9e05      	ldr	r6, [sp, #20]
 8006b1a:	1ac2      	subs	r2, r0, r3
 8006b1c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006b20:	429e      	cmp	r6, r3
 8006b22:	bf28      	it	cs
 8006b24:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006b28:	4912      	ldr	r1, [pc, #72]	; (8006b74 <_scanf_float+0x418>)
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	f000 f82c 	bl	8006b88 <siprintf>
 8006b30:	e7d0      	b.n	8006ad4 <_scanf_float+0x378>
 8006b32:	9903      	ldr	r1, [sp, #12]
 8006b34:	f012 0f04 	tst.w	r2, #4
 8006b38:	f103 0204 	add.w	r2, r3, #4
 8006b3c:	600a      	str	r2, [r1, #0]
 8006b3e:	d1d9      	bne.n	8006af4 <_scanf_float+0x398>
 8006b40:	f8d3 8000 	ldr.w	r8, [r3]
 8006b44:	ee10 2a10 	vmov	r2, s0
 8006b48:	ee10 0a10 	vmov	r0, s0
 8006b4c:	463b      	mov	r3, r7
 8006b4e:	4639      	mov	r1, r7
 8006b50:	f7fa f814 	bl	8000b7c <__aeabi_dcmpun>
 8006b54:	b128      	cbz	r0, 8006b62 <_scanf_float+0x406>
 8006b56:	4808      	ldr	r0, [pc, #32]	; (8006b78 <_scanf_float+0x41c>)
 8006b58:	f000 f810 	bl	8006b7c <nanf>
 8006b5c:	ed88 0a00 	vstr	s0, [r8]
 8006b60:	e7cb      	b.n	8006afa <_scanf_float+0x39e>
 8006b62:	4630      	mov	r0, r6
 8006b64:	4639      	mov	r1, r7
 8006b66:	f7fa f867 	bl	8000c38 <__aeabi_d2f>
 8006b6a:	f8c8 0000 	str.w	r0, [r8]
 8006b6e:	e7c4      	b.n	8006afa <_scanf_float+0x39e>
 8006b70:	2500      	movs	r5, #0
 8006b72:	e634      	b.n	80067de <_scanf_float+0x82>
 8006b74:	0800bcd0 	.word	0x0800bcd0
 8006b78:	0800c0d8 	.word	0x0800c0d8

08006b7c <nanf>:
 8006b7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006b84 <nanf+0x8>
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	7fc00000 	.word	0x7fc00000

08006b88 <siprintf>:
 8006b88:	b40e      	push	{r1, r2, r3}
 8006b8a:	b500      	push	{lr}
 8006b8c:	b09c      	sub	sp, #112	; 0x70
 8006b8e:	ab1d      	add	r3, sp, #116	; 0x74
 8006b90:	9002      	str	r0, [sp, #8]
 8006b92:	9006      	str	r0, [sp, #24]
 8006b94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b98:	4809      	ldr	r0, [pc, #36]	; (8006bc0 <siprintf+0x38>)
 8006b9a:	9107      	str	r1, [sp, #28]
 8006b9c:	9104      	str	r1, [sp, #16]
 8006b9e:	4909      	ldr	r1, [pc, #36]	; (8006bc4 <siprintf+0x3c>)
 8006ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba4:	9105      	str	r1, [sp, #20]
 8006ba6:	6800      	ldr	r0, [r0, #0]
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	a902      	add	r1, sp, #8
 8006bac:	f002 fee2 	bl	8009974 <_svfiprintf_r>
 8006bb0:	9b02      	ldr	r3, [sp, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	b01c      	add	sp, #112	; 0x70
 8006bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bbc:	b003      	add	sp, #12
 8006bbe:	4770      	bx	lr
 8006bc0:	20000024 	.word	0x20000024
 8006bc4:	ffff0208 	.word	0xffff0208

08006bc8 <sulp>:
 8006bc8:	b570      	push	{r4, r5, r6, lr}
 8006bca:	4604      	mov	r4, r0
 8006bcc:	460d      	mov	r5, r1
 8006bce:	ec45 4b10 	vmov	d0, r4, r5
 8006bd2:	4616      	mov	r6, r2
 8006bd4:	f002 fc2c 	bl	8009430 <__ulp>
 8006bd8:	ec51 0b10 	vmov	r0, r1, d0
 8006bdc:	b17e      	cbz	r6, 8006bfe <sulp+0x36>
 8006bde:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006be2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	dd09      	ble.n	8006bfe <sulp+0x36>
 8006bea:	051b      	lsls	r3, r3, #20
 8006bec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006bf0:	2400      	movs	r4, #0
 8006bf2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006bf6:	4622      	mov	r2, r4
 8006bf8:	462b      	mov	r3, r5
 8006bfa:	f7f9 fd25 	bl	8000648 <__aeabi_dmul>
 8006bfe:	bd70      	pop	{r4, r5, r6, pc}

08006c00 <_strtod_l>:
 8006c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c04:	ed2d 8b02 	vpush	{d8}
 8006c08:	b09d      	sub	sp, #116	; 0x74
 8006c0a:	461f      	mov	r7, r3
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9318      	str	r3, [sp, #96]	; 0x60
 8006c10:	4ba2      	ldr	r3, [pc, #648]	; (8006e9c <_strtod_l+0x29c>)
 8006c12:	9213      	str	r2, [sp, #76]	; 0x4c
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	9305      	str	r3, [sp, #20]
 8006c18:	4604      	mov	r4, r0
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	4688      	mov	r8, r1
 8006c1e:	f7f9 faff 	bl	8000220 <strlen>
 8006c22:	f04f 0a00 	mov.w	sl, #0
 8006c26:	4605      	mov	r5, r0
 8006c28:	f04f 0b00 	mov.w	fp, #0
 8006c2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006c30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c32:	781a      	ldrb	r2, [r3, #0]
 8006c34:	2a2b      	cmp	r2, #43	; 0x2b
 8006c36:	d04e      	beq.n	8006cd6 <_strtod_l+0xd6>
 8006c38:	d83b      	bhi.n	8006cb2 <_strtod_l+0xb2>
 8006c3a:	2a0d      	cmp	r2, #13
 8006c3c:	d834      	bhi.n	8006ca8 <_strtod_l+0xa8>
 8006c3e:	2a08      	cmp	r2, #8
 8006c40:	d834      	bhi.n	8006cac <_strtod_l+0xac>
 8006c42:	2a00      	cmp	r2, #0
 8006c44:	d03e      	beq.n	8006cc4 <_strtod_l+0xc4>
 8006c46:	2300      	movs	r3, #0
 8006c48:	930a      	str	r3, [sp, #40]	; 0x28
 8006c4a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006c4c:	7833      	ldrb	r3, [r6, #0]
 8006c4e:	2b30      	cmp	r3, #48	; 0x30
 8006c50:	f040 80b0 	bne.w	8006db4 <_strtod_l+0x1b4>
 8006c54:	7873      	ldrb	r3, [r6, #1]
 8006c56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006c5a:	2b58      	cmp	r3, #88	; 0x58
 8006c5c:	d168      	bne.n	8006d30 <_strtod_l+0x130>
 8006c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c60:	9301      	str	r3, [sp, #4]
 8006c62:	ab18      	add	r3, sp, #96	; 0x60
 8006c64:	9702      	str	r7, [sp, #8]
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	4a8d      	ldr	r2, [pc, #564]	; (8006ea0 <_strtod_l+0x2a0>)
 8006c6a:	ab19      	add	r3, sp, #100	; 0x64
 8006c6c:	a917      	add	r1, sp, #92	; 0x5c
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f001 fd38 	bl	80086e4 <__gethex>
 8006c74:	f010 0707 	ands.w	r7, r0, #7
 8006c78:	4605      	mov	r5, r0
 8006c7a:	d005      	beq.n	8006c88 <_strtod_l+0x88>
 8006c7c:	2f06      	cmp	r7, #6
 8006c7e:	d12c      	bne.n	8006cda <_strtod_l+0xda>
 8006c80:	3601      	adds	r6, #1
 8006c82:	2300      	movs	r3, #0
 8006c84:	9617      	str	r6, [sp, #92]	; 0x5c
 8006c86:	930a      	str	r3, [sp, #40]	; 0x28
 8006c88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f040 8590 	bne.w	80077b0 <_strtod_l+0xbb0>
 8006c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c92:	b1eb      	cbz	r3, 8006cd0 <_strtod_l+0xd0>
 8006c94:	4652      	mov	r2, sl
 8006c96:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006c9a:	ec43 2b10 	vmov	d0, r2, r3
 8006c9e:	b01d      	add	sp, #116	; 0x74
 8006ca0:	ecbd 8b02 	vpop	{d8}
 8006ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca8:	2a20      	cmp	r2, #32
 8006caa:	d1cc      	bne.n	8006c46 <_strtod_l+0x46>
 8006cac:	3301      	adds	r3, #1
 8006cae:	9317      	str	r3, [sp, #92]	; 0x5c
 8006cb0:	e7be      	b.n	8006c30 <_strtod_l+0x30>
 8006cb2:	2a2d      	cmp	r2, #45	; 0x2d
 8006cb4:	d1c7      	bne.n	8006c46 <_strtod_l+0x46>
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	920a      	str	r2, [sp, #40]	; 0x28
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006cbe:	785b      	ldrb	r3, [r3, #1]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1c2      	bne.n	8006c4a <_strtod_l+0x4a>
 8006cc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006cc6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f040 856e 	bne.w	80077ac <_strtod_l+0xbac>
 8006cd0:	4652      	mov	r2, sl
 8006cd2:	465b      	mov	r3, fp
 8006cd4:	e7e1      	b.n	8006c9a <_strtod_l+0x9a>
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	e7ee      	b.n	8006cb8 <_strtod_l+0xb8>
 8006cda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006cdc:	b13a      	cbz	r2, 8006cee <_strtod_l+0xee>
 8006cde:	2135      	movs	r1, #53	; 0x35
 8006ce0:	a81a      	add	r0, sp, #104	; 0x68
 8006ce2:	f002 fcb0 	bl	8009646 <__copybits>
 8006ce6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f002 f86f 	bl	8008dcc <_Bfree>
 8006cee:	3f01      	subs	r7, #1
 8006cf0:	2f04      	cmp	r7, #4
 8006cf2:	d806      	bhi.n	8006d02 <_strtod_l+0x102>
 8006cf4:	e8df f007 	tbb	[pc, r7]
 8006cf8:	1714030a 	.word	0x1714030a
 8006cfc:	0a          	.byte	0x0a
 8006cfd:	00          	.byte	0x00
 8006cfe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006d02:	0728      	lsls	r0, r5, #28
 8006d04:	d5c0      	bpl.n	8006c88 <_strtod_l+0x88>
 8006d06:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006d0a:	e7bd      	b.n	8006c88 <_strtod_l+0x88>
 8006d0c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006d10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006d12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006d16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006d1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006d1e:	e7f0      	b.n	8006d02 <_strtod_l+0x102>
 8006d20:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006ea4 <_strtod_l+0x2a4>
 8006d24:	e7ed      	b.n	8006d02 <_strtod_l+0x102>
 8006d26:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006d2a:	f04f 3aff 	mov.w	sl, #4294967295
 8006d2e:	e7e8      	b.n	8006d02 <_strtod_l+0x102>
 8006d30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d36:	785b      	ldrb	r3, [r3, #1]
 8006d38:	2b30      	cmp	r3, #48	; 0x30
 8006d3a:	d0f9      	beq.n	8006d30 <_strtod_l+0x130>
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0a3      	beq.n	8006c88 <_strtod_l+0x88>
 8006d40:	2301      	movs	r3, #1
 8006d42:	f04f 0900 	mov.w	r9, #0
 8006d46:	9304      	str	r3, [sp, #16]
 8006d48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d4a:	9308      	str	r3, [sp, #32]
 8006d4c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006d50:	464f      	mov	r7, r9
 8006d52:	220a      	movs	r2, #10
 8006d54:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006d56:	7806      	ldrb	r6, [r0, #0]
 8006d58:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006d5c:	b2d9      	uxtb	r1, r3
 8006d5e:	2909      	cmp	r1, #9
 8006d60:	d92a      	bls.n	8006db8 <_strtod_l+0x1b8>
 8006d62:	9905      	ldr	r1, [sp, #20]
 8006d64:	462a      	mov	r2, r5
 8006d66:	f002 ff1f 	bl	8009ba8 <strncmp>
 8006d6a:	b398      	cbz	r0, 8006dd4 <_strtod_l+0x1d4>
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	4632      	mov	r2, r6
 8006d70:	463d      	mov	r5, r7
 8006d72:	9005      	str	r0, [sp, #20]
 8006d74:	4603      	mov	r3, r0
 8006d76:	2a65      	cmp	r2, #101	; 0x65
 8006d78:	d001      	beq.n	8006d7e <_strtod_l+0x17e>
 8006d7a:	2a45      	cmp	r2, #69	; 0x45
 8006d7c:	d118      	bne.n	8006db0 <_strtod_l+0x1b0>
 8006d7e:	b91d      	cbnz	r5, 8006d88 <_strtod_l+0x188>
 8006d80:	9a04      	ldr	r2, [sp, #16]
 8006d82:	4302      	orrs	r2, r0
 8006d84:	d09e      	beq.n	8006cc4 <_strtod_l+0xc4>
 8006d86:	2500      	movs	r5, #0
 8006d88:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006d8c:	f108 0201 	add.w	r2, r8, #1
 8006d90:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d92:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006d96:	2a2b      	cmp	r2, #43	; 0x2b
 8006d98:	d075      	beq.n	8006e86 <_strtod_l+0x286>
 8006d9a:	2a2d      	cmp	r2, #45	; 0x2d
 8006d9c:	d07b      	beq.n	8006e96 <_strtod_l+0x296>
 8006d9e:	f04f 0c00 	mov.w	ip, #0
 8006da2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006da6:	2909      	cmp	r1, #9
 8006da8:	f240 8082 	bls.w	8006eb0 <_strtod_l+0x2b0>
 8006dac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006db0:	2600      	movs	r6, #0
 8006db2:	e09d      	b.n	8006ef0 <_strtod_l+0x2f0>
 8006db4:	2300      	movs	r3, #0
 8006db6:	e7c4      	b.n	8006d42 <_strtod_l+0x142>
 8006db8:	2f08      	cmp	r7, #8
 8006dba:	bfd8      	it	le
 8006dbc:	9907      	ldrle	r1, [sp, #28]
 8006dbe:	f100 0001 	add.w	r0, r0, #1
 8006dc2:	bfda      	itte	le
 8006dc4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006dc8:	9307      	strle	r3, [sp, #28]
 8006dca:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006dce:	3701      	adds	r7, #1
 8006dd0:	9017      	str	r0, [sp, #92]	; 0x5c
 8006dd2:	e7bf      	b.n	8006d54 <_strtod_l+0x154>
 8006dd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dd6:	195a      	adds	r2, r3, r5
 8006dd8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006dda:	5d5a      	ldrb	r2, [r3, r5]
 8006ddc:	2f00      	cmp	r7, #0
 8006dde:	d037      	beq.n	8006e50 <_strtod_l+0x250>
 8006de0:	9005      	str	r0, [sp, #20]
 8006de2:	463d      	mov	r5, r7
 8006de4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006de8:	2b09      	cmp	r3, #9
 8006dea:	d912      	bls.n	8006e12 <_strtod_l+0x212>
 8006dec:	2301      	movs	r3, #1
 8006dee:	e7c2      	b.n	8006d76 <_strtod_l+0x176>
 8006df0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006df6:	785a      	ldrb	r2, [r3, #1]
 8006df8:	3001      	adds	r0, #1
 8006dfa:	2a30      	cmp	r2, #48	; 0x30
 8006dfc:	d0f8      	beq.n	8006df0 <_strtod_l+0x1f0>
 8006dfe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	f200 84d9 	bhi.w	80077ba <_strtod_l+0xbba>
 8006e08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e0a:	9005      	str	r0, [sp, #20]
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	9308      	str	r3, [sp, #32]
 8006e10:	4605      	mov	r5, r0
 8006e12:	3a30      	subs	r2, #48	; 0x30
 8006e14:	f100 0301 	add.w	r3, r0, #1
 8006e18:	d014      	beq.n	8006e44 <_strtod_l+0x244>
 8006e1a:	9905      	ldr	r1, [sp, #20]
 8006e1c:	4419      	add	r1, r3
 8006e1e:	9105      	str	r1, [sp, #20]
 8006e20:	462b      	mov	r3, r5
 8006e22:	eb00 0e05 	add.w	lr, r0, r5
 8006e26:	210a      	movs	r1, #10
 8006e28:	4573      	cmp	r3, lr
 8006e2a:	d113      	bne.n	8006e54 <_strtod_l+0x254>
 8006e2c:	182b      	adds	r3, r5, r0
 8006e2e:	2b08      	cmp	r3, #8
 8006e30:	f105 0501 	add.w	r5, r5, #1
 8006e34:	4405      	add	r5, r0
 8006e36:	dc1c      	bgt.n	8006e72 <_strtod_l+0x272>
 8006e38:	9907      	ldr	r1, [sp, #28]
 8006e3a:	230a      	movs	r3, #10
 8006e3c:	fb03 2301 	mla	r3, r3, r1, r2
 8006e40:	9307      	str	r3, [sp, #28]
 8006e42:	2300      	movs	r3, #0
 8006e44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e46:	1c51      	adds	r1, r2, #1
 8006e48:	9117      	str	r1, [sp, #92]	; 0x5c
 8006e4a:	7852      	ldrb	r2, [r2, #1]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	e7c9      	b.n	8006de4 <_strtod_l+0x1e4>
 8006e50:	4638      	mov	r0, r7
 8006e52:	e7d2      	b.n	8006dfa <_strtod_l+0x1fa>
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	dc04      	bgt.n	8006e62 <_strtod_l+0x262>
 8006e58:	9e07      	ldr	r6, [sp, #28]
 8006e5a:	434e      	muls	r6, r1
 8006e5c:	9607      	str	r6, [sp, #28]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	e7e2      	b.n	8006e28 <_strtod_l+0x228>
 8006e62:	f103 0c01 	add.w	ip, r3, #1
 8006e66:	f1bc 0f10 	cmp.w	ip, #16
 8006e6a:	bfd8      	it	le
 8006e6c:	fb01 f909 	mulle.w	r9, r1, r9
 8006e70:	e7f5      	b.n	8006e5e <_strtod_l+0x25e>
 8006e72:	2d10      	cmp	r5, #16
 8006e74:	bfdc      	itt	le
 8006e76:	230a      	movle	r3, #10
 8006e78:	fb03 2909 	mlale	r9, r3, r9, r2
 8006e7c:	e7e1      	b.n	8006e42 <_strtod_l+0x242>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	9305      	str	r3, [sp, #20]
 8006e82:	2301      	movs	r3, #1
 8006e84:	e77c      	b.n	8006d80 <_strtod_l+0x180>
 8006e86:	f04f 0c00 	mov.w	ip, #0
 8006e8a:	f108 0202 	add.w	r2, r8, #2
 8006e8e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e90:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006e94:	e785      	b.n	8006da2 <_strtod_l+0x1a2>
 8006e96:	f04f 0c01 	mov.w	ip, #1
 8006e9a:	e7f6      	b.n	8006e8a <_strtod_l+0x28a>
 8006e9c:	0800bf20 	.word	0x0800bf20
 8006ea0:	0800bcd8 	.word	0x0800bcd8
 8006ea4:	7ff00000 	.word	0x7ff00000
 8006ea8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006eaa:	1c51      	adds	r1, r2, #1
 8006eac:	9117      	str	r1, [sp, #92]	; 0x5c
 8006eae:	7852      	ldrb	r2, [r2, #1]
 8006eb0:	2a30      	cmp	r2, #48	; 0x30
 8006eb2:	d0f9      	beq.n	8006ea8 <_strtod_l+0x2a8>
 8006eb4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006eb8:	2908      	cmp	r1, #8
 8006eba:	f63f af79 	bhi.w	8006db0 <_strtod_l+0x1b0>
 8006ebe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006ec2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ec4:	9206      	str	r2, [sp, #24]
 8006ec6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ec8:	1c51      	adds	r1, r2, #1
 8006eca:	9117      	str	r1, [sp, #92]	; 0x5c
 8006ecc:	7852      	ldrb	r2, [r2, #1]
 8006ece:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006ed2:	2e09      	cmp	r6, #9
 8006ed4:	d937      	bls.n	8006f46 <_strtod_l+0x346>
 8006ed6:	9e06      	ldr	r6, [sp, #24]
 8006ed8:	1b89      	subs	r1, r1, r6
 8006eda:	2908      	cmp	r1, #8
 8006edc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006ee0:	dc02      	bgt.n	8006ee8 <_strtod_l+0x2e8>
 8006ee2:	4576      	cmp	r6, lr
 8006ee4:	bfa8      	it	ge
 8006ee6:	4676      	movge	r6, lr
 8006ee8:	f1bc 0f00 	cmp.w	ip, #0
 8006eec:	d000      	beq.n	8006ef0 <_strtod_l+0x2f0>
 8006eee:	4276      	negs	r6, r6
 8006ef0:	2d00      	cmp	r5, #0
 8006ef2:	d14d      	bne.n	8006f90 <_strtod_l+0x390>
 8006ef4:	9904      	ldr	r1, [sp, #16]
 8006ef6:	4301      	orrs	r1, r0
 8006ef8:	f47f aec6 	bne.w	8006c88 <_strtod_l+0x88>
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f47f aee1 	bne.w	8006cc4 <_strtod_l+0xc4>
 8006f02:	2a69      	cmp	r2, #105	; 0x69
 8006f04:	d027      	beq.n	8006f56 <_strtod_l+0x356>
 8006f06:	dc24      	bgt.n	8006f52 <_strtod_l+0x352>
 8006f08:	2a49      	cmp	r2, #73	; 0x49
 8006f0a:	d024      	beq.n	8006f56 <_strtod_l+0x356>
 8006f0c:	2a4e      	cmp	r2, #78	; 0x4e
 8006f0e:	f47f aed9 	bne.w	8006cc4 <_strtod_l+0xc4>
 8006f12:	499f      	ldr	r1, [pc, #636]	; (8007190 <_strtod_l+0x590>)
 8006f14:	a817      	add	r0, sp, #92	; 0x5c
 8006f16:	f001 fe3d 	bl	8008b94 <__match>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	f43f aed2 	beq.w	8006cc4 <_strtod_l+0xc4>
 8006f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	2b28      	cmp	r3, #40	; 0x28
 8006f26:	d12d      	bne.n	8006f84 <_strtod_l+0x384>
 8006f28:	499a      	ldr	r1, [pc, #616]	; (8007194 <_strtod_l+0x594>)
 8006f2a:	aa1a      	add	r2, sp, #104	; 0x68
 8006f2c:	a817      	add	r0, sp, #92	; 0x5c
 8006f2e:	f001 fe45 	bl	8008bbc <__hexnan>
 8006f32:	2805      	cmp	r0, #5
 8006f34:	d126      	bne.n	8006f84 <_strtod_l+0x384>
 8006f36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f38:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006f3c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006f40:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006f44:	e6a0      	b.n	8006c88 <_strtod_l+0x88>
 8006f46:	210a      	movs	r1, #10
 8006f48:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006f4c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006f50:	e7b9      	b.n	8006ec6 <_strtod_l+0x2c6>
 8006f52:	2a6e      	cmp	r2, #110	; 0x6e
 8006f54:	e7db      	b.n	8006f0e <_strtod_l+0x30e>
 8006f56:	4990      	ldr	r1, [pc, #576]	; (8007198 <_strtod_l+0x598>)
 8006f58:	a817      	add	r0, sp, #92	; 0x5c
 8006f5a:	f001 fe1b 	bl	8008b94 <__match>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	f43f aeb0 	beq.w	8006cc4 <_strtod_l+0xc4>
 8006f64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f66:	498d      	ldr	r1, [pc, #564]	; (800719c <_strtod_l+0x59c>)
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	a817      	add	r0, sp, #92	; 0x5c
 8006f6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f6e:	f001 fe11 	bl	8008b94 <__match>
 8006f72:	b910      	cbnz	r0, 8006f7a <_strtod_l+0x37a>
 8006f74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f76:	3301      	adds	r3, #1
 8006f78:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f7a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80071ac <_strtod_l+0x5ac>
 8006f7e:	f04f 0a00 	mov.w	sl, #0
 8006f82:	e681      	b.n	8006c88 <_strtod_l+0x88>
 8006f84:	4886      	ldr	r0, [pc, #536]	; (80071a0 <_strtod_l+0x5a0>)
 8006f86:	f002 fdf7 	bl	8009b78 <nan>
 8006f8a:	ec5b ab10 	vmov	sl, fp, d0
 8006f8e:	e67b      	b.n	8006c88 <_strtod_l+0x88>
 8006f90:	9b05      	ldr	r3, [sp, #20]
 8006f92:	9807      	ldr	r0, [sp, #28]
 8006f94:	1af3      	subs	r3, r6, r3
 8006f96:	2f00      	cmp	r7, #0
 8006f98:	bf08      	it	eq
 8006f9a:	462f      	moveq	r7, r5
 8006f9c:	2d10      	cmp	r5, #16
 8006f9e:	9306      	str	r3, [sp, #24]
 8006fa0:	46a8      	mov	r8, r5
 8006fa2:	bfa8      	it	ge
 8006fa4:	f04f 0810 	movge.w	r8, #16
 8006fa8:	f7f9 fad4 	bl	8000554 <__aeabi_ui2d>
 8006fac:	2d09      	cmp	r5, #9
 8006fae:	4682      	mov	sl, r0
 8006fb0:	468b      	mov	fp, r1
 8006fb2:	dd13      	ble.n	8006fdc <_strtod_l+0x3dc>
 8006fb4:	4b7b      	ldr	r3, [pc, #492]	; (80071a4 <_strtod_l+0x5a4>)
 8006fb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006fba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006fbe:	f7f9 fb43 	bl	8000648 <__aeabi_dmul>
 8006fc2:	4682      	mov	sl, r0
 8006fc4:	4648      	mov	r0, r9
 8006fc6:	468b      	mov	fp, r1
 8006fc8:	f7f9 fac4 	bl	8000554 <__aeabi_ui2d>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4650      	mov	r0, sl
 8006fd2:	4659      	mov	r1, fp
 8006fd4:	f7f9 f982 	bl	80002dc <__adddf3>
 8006fd8:	4682      	mov	sl, r0
 8006fda:	468b      	mov	fp, r1
 8006fdc:	2d0f      	cmp	r5, #15
 8006fde:	dc38      	bgt.n	8007052 <_strtod_l+0x452>
 8006fe0:	9b06      	ldr	r3, [sp, #24]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f43f ae50 	beq.w	8006c88 <_strtod_l+0x88>
 8006fe8:	dd24      	ble.n	8007034 <_strtod_l+0x434>
 8006fea:	2b16      	cmp	r3, #22
 8006fec:	dc0b      	bgt.n	8007006 <_strtod_l+0x406>
 8006fee:	496d      	ldr	r1, [pc, #436]	; (80071a4 <_strtod_l+0x5a4>)
 8006ff0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ff8:	4652      	mov	r2, sl
 8006ffa:	465b      	mov	r3, fp
 8006ffc:	f7f9 fb24 	bl	8000648 <__aeabi_dmul>
 8007000:	4682      	mov	sl, r0
 8007002:	468b      	mov	fp, r1
 8007004:	e640      	b.n	8006c88 <_strtod_l+0x88>
 8007006:	9a06      	ldr	r2, [sp, #24]
 8007008:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800700c:	4293      	cmp	r3, r2
 800700e:	db20      	blt.n	8007052 <_strtod_l+0x452>
 8007010:	4c64      	ldr	r4, [pc, #400]	; (80071a4 <_strtod_l+0x5a4>)
 8007012:	f1c5 050f 	rsb	r5, r5, #15
 8007016:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800701a:	4652      	mov	r2, sl
 800701c:	465b      	mov	r3, fp
 800701e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007022:	f7f9 fb11 	bl	8000648 <__aeabi_dmul>
 8007026:	9b06      	ldr	r3, [sp, #24]
 8007028:	1b5d      	subs	r5, r3, r5
 800702a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800702e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007032:	e7e3      	b.n	8006ffc <_strtod_l+0x3fc>
 8007034:	9b06      	ldr	r3, [sp, #24]
 8007036:	3316      	adds	r3, #22
 8007038:	db0b      	blt.n	8007052 <_strtod_l+0x452>
 800703a:	9b05      	ldr	r3, [sp, #20]
 800703c:	1b9e      	subs	r6, r3, r6
 800703e:	4b59      	ldr	r3, [pc, #356]	; (80071a4 <_strtod_l+0x5a4>)
 8007040:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007044:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007048:	4650      	mov	r0, sl
 800704a:	4659      	mov	r1, fp
 800704c:	f7f9 fc26 	bl	800089c <__aeabi_ddiv>
 8007050:	e7d6      	b.n	8007000 <_strtod_l+0x400>
 8007052:	9b06      	ldr	r3, [sp, #24]
 8007054:	eba5 0808 	sub.w	r8, r5, r8
 8007058:	4498      	add	r8, r3
 800705a:	f1b8 0f00 	cmp.w	r8, #0
 800705e:	dd74      	ble.n	800714a <_strtod_l+0x54a>
 8007060:	f018 030f 	ands.w	r3, r8, #15
 8007064:	d00a      	beq.n	800707c <_strtod_l+0x47c>
 8007066:	494f      	ldr	r1, [pc, #316]	; (80071a4 <_strtod_l+0x5a4>)
 8007068:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800706c:	4652      	mov	r2, sl
 800706e:	465b      	mov	r3, fp
 8007070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007074:	f7f9 fae8 	bl	8000648 <__aeabi_dmul>
 8007078:	4682      	mov	sl, r0
 800707a:	468b      	mov	fp, r1
 800707c:	f038 080f 	bics.w	r8, r8, #15
 8007080:	d04f      	beq.n	8007122 <_strtod_l+0x522>
 8007082:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007086:	dd22      	ble.n	80070ce <_strtod_l+0x4ce>
 8007088:	2500      	movs	r5, #0
 800708a:	462e      	mov	r6, r5
 800708c:	9507      	str	r5, [sp, #28]
 800708e:	9505      	str	r5, [sp, #20]
 8007090:	2322      	movs	r3, #34	; 0x22
 8007092:	f8df b118 	ldr.w	fp, [pc, #280]	; 80071ac <_strtod_l+0x5ac>
 8007096:	6023      	str	r3, [r4, #0]
 8007098:	f04f 0a00 	mov.w	sl, #0
 800709c:	9b07      	ldr	r3, [sp, #28]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f43f adf2 	beq.w	8006c88 <_strtod_l+0x88>
 80070a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80070a6:	4620      	mov	r0, r4
 80070a8:	f001 fe90 	bl	8008dcc <_Bfree>
 80070ac:	9905      	ldr	r1, [sp, #20]
 80070ae:	4620      	mov	r0, r4
 80070b0:	f001 fe8c 	bl	8008dcc <_Bfree>
 80070b4:	4631      	mov	r1, r6
 80070b6:	4620      	mov	r0, r4
 80070b8:	f001 fe88 	bl	8008dcc <_Bfree>
 80070bc:	9907      	ldr	r1, [sp, #28]
 80070be:	4620      	mov	r0, r4
 80070c0:	f001 fe84 	bl	8008dcc <_Bfree>
 80070c4:	4629      	mov	r1, r5
 80070c6:	4620      	mov	r0, r4
 80070c8:	f001 fe80 	bl	8008dcc <_Bfree>
 80070cc:	e5dc      	b.n	8006c88 <_strtod_l+0x88>
 80070ce:	4b36      	ldr	r3, [pc, #216]	; (80071a8 <_strtod_l+0x5a8>)
 80070d0:	9304      	str	r3, [sp, #16]
 80070d2:	2300      	movs	r3, #0
 80070d4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80070d8:	4650      	mov	r0, sl
 80070da:	4659      	mov	r1, fp
 80070dc:	4699      	mov	r9, r3
 80070de:	f1b8 0f01 	cmp.w	r8, #1
 80070e2:	dc21      	bgt.n	8007128 <_strtod_l+0x528>
 80070e4:	b10b      	cbz	r3, 80070ea <_strtod_l+0x4ea>
 80070e6:	4682      	mov	sl, r0
 80070e8:	468b      	mov	fp, r1
 80070ea:	4b2f      	ldr	r3, [pc, #188]	; (80071a8 <_strtod_l+0x5a8>)
 80070ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80070f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80070f4:	4652      	mov	r2, sl
 80070f6:	465b      	mov	r3, fp
 80070f8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80070fc:	f7f9 faa4 	bl	8000648 <__aeabi_dmul>
 8007100:	4b2a      	ldr	r3, [pc, #168]	; (80071ac <_strtod_l+0x5ac>)
 8007102:	460a      	mov	r2, r1
 8007104:	400b      	ands	r3, r1
 8007106:	492a      	ldr	r1, [pc, #168]	; (80071b0 <_strtod_l+0x5b0>)
 8007108:	428b      	cmp	r3, r1
 800710a:	4682      	mov	sl, r0
 800710c:	d8bc      	bhi.n	8007088 <_strtod_l+0x488>
 800710e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007112:	428b      	cmp	r3, r1
 8007114:	bf86      	itte	hi
 8007116:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80071b4 <_strtod_l+0x5b4>
 800711a:	f04f 3aff 	movhi.w	sl, #4294967295
 800711e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007122:	2300      	movs	r3, #0
 8007124:	9304      	str	r3, [sp, #16]
 8007126:	e084      	b.n	8007232 <_strtod_l+0x632>
 8007128:	f018 0f01 	tst.w	r8, #1
 800712c:	d005      	beq.n	800713a <_strtod_l+0x53a>
 800712e:	9b04      	ldr	r3, [sp, #16]
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	f7f9 fa88 	bl	8000648 <__aeabi_dmul>
 8007138:	2301      	movs	r3, #1
 800713a:	9a04      	ldr	r2, [sp, #16]
 800713c:	3208      	adds	r2, #8
 800713e:	f109 0901 	add.w	r9, r9, #1
 8007142:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007146:	9204      	str	r2, [sp, #16]
 8007148:	e7c9      	b.n	80070de <_strtod_l+0x4de>
 800714a:	d0ea      	beq.n	8007122 <_strtod_l+0x522>
 800714c:	f1c8 0800 	rsb	r8, r8, #0
 8007150:	f018 020f 	ands.w	r2, r8, #15
 8007154:	d00a      	beq.n	800716c <_strtod_l+0x56c>
 8007156:	4b13      	ldr	r3, [pc, #76]	; (80071a4 <_strtod_l+0x5a4>)
 8007158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800715c:	4650      	mov	r0, sl
 800715e:	4659      	mov	r1, fp
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f7f9 fb9a 	bl	800089c <__aeabi_ddiv>
 8007168:	4682      	mov	sl, r0
 800716a:	468b      	mov	fp, r1
 800716c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007170:	d0d7      	beq.n	8007122 <_strtod_l+0x522>
 8007172:	f1b8 0f1f 	cmp.w	r8, #31
 8007176:	dd1f      	ble.n	80071b8 <_strtod_l+0x5b8>
 8007178:	2500      	movs	r5, #0
 800717a:	462e      	mov	r6, r5
 800717c:	9507      	str	r5, [sp, #28]
 800717e:	9505      	str	r5, [sp, #20]
 8007180:	2322      	movs	r3, #34	; 0x22
 8007182:	f04f 0a00 	mov.w	sl, #0
 8007186:	f04f 0b00 	mov.w	fp, #0
 800718a:	6023      	str	r3, [r4, #0]
 800718c:	e786      	b.n	800709c <_strtod_l+0x49c>
 800718e:	bf00      	nop
 8007190:	0800bca9 	.word	0x0800bca9
 8007194:	0800bcec 	.word	0x0800bcec
 8007198:	0800bca1 	.word	0x0800bca1
 800719c:	0800be2c 	.word	0x0800be2c
 80071a0:	0800c0d8 	.word	0x0800c0d8
 80071a4:	0800bfb8 	.word	0x0800bfb8
 80071a8:	0800bf90 	.word	0x0800bf90
 80071ac:	7ff00000 	.word	0x7ff00000
 80071b0:	7ca00000 	.word	0x7ca00000
 80071b4:	7fefffff 	.word	0x7fefffff
 80071b8:	f018 0310 	ands.w	r3, r8, #16
 80071bc:	bf18      	it	ne
 80071be:	236a      	movne	r3, #106	; 0x6a
 80071c0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007570 <_strtod_l+0x970>
 80071c4:	9304      	str	r3, [sp, #16]
 80071c6:	4650      	mov	r0, sl
 80071c8:	4659      	mov	r1, fp
 80071ca:	2300      	movs	r3, #0
 80071cc:	f018 0f01 	tst.w	r8, #1
 80071d0:	d004      	beq.n	80071dc <_strtod_l+0x5dc>
 80071d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80071d6:	f7f9 fa37 	bl	8000648 <__aeabi_dmul>
 80071da:	2301      	movs	r3, #1
 80071dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80071e0:	f109 0908 	add.w	r9, r9, #8
 80071e4:	d1f2      	bne.n	80071cc <_strtod_l+0x5cc>
 80071e6:	b10b      	cbz	r3, 80071ec <_strtod_l+0x5ec>
 80071e8:	4682      	mov	sl, r0
 80071ea:	468b      	mov	fp, r1
 80071ec:	9b04      	ldr	r3, [sp, #16]
 80071ee:	b1c3      	cbz	r3, 8007222 <_strtod_l+0x622>
 80071f0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80071f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	4659      	mov	r1, fp
 80071fc:	dd11      	ble.n	8007222 <_strtod_l+0x622>
 80071fe:	2b1f      	cmp	r3, #31
 8007200:	f340 8124 	ble.w	800744c <_strtod_l+0x84c>
 8007204:	2b34      	cmp	r3, #52	; 0x34
 8007206:	bfde      	ittt	le
 8007208:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800720c:	f04f 33ff 	movle.w	r3, #4294967295
 8007210:	fa03 f202 	lslle.w	r2, r3, r2
 8007214:	f04f 0a00 	mov.w	sl, #0
 8007218:	bfcc      	ite	gt
 800721a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800721e:	ea02 0b01 	andle.w	fp, r2, r1
 8007222:	2200      	movs	r2, #0
 8007224:	2300      	movs	r3, #0
 8007226:	4650      	mov	r0, sl
 8007228:	4659      	mov	r1, fp
 800722a:	f7f9 fc75 	bl	8000b18 <__aeabi_dcmpeq>
 800722e:	2800      	cmp	r0, #0
 8007230:	d1a2      	bne.n	8007178 <_strtod_l+0x578>
 8007232:	9b07      	ldr	r3, [sp, #28]
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	9908      	ldr	r1, [sp, #32]
 8007238:	462b      	mov	r3, r5
 800723a:	463a      	mov	r2, r7
 800723c:	4620      	mov	r0, r4
 800723e:	f001 fe2d 	bl	8008e9c <__s2b>
 8007242:	9007      	str	r0, [sp, #28]
 8007244:	2800      	cmp	r0, #0
 8007246:	f43f af1f 	beq.w	8007088 <_strtod_l+0x488>
 800724a:	9b05      	ldr	r3, [sp, #20]
 800724c:	1b9e      	subs	r6, r3, r6
 800724e:	9b06      	ldr	r3, [sp, #24]
 8007250:	2b00      	cmp	r3, #0
 8007252:	bfb4      	ite	lt
 8007254:	4633      	movlt	r3, r6
 8007256:	2300      	movge	r3, #0
 8007258:	930c      	str	r3, [sp, #48]	; 0x30
 800725a:	9b06      	ldr	r3, [sp, #24]
 800725c:	2500      	movs	r5, #0
 800725e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007262:	9312      	str	r3, [sp, #72]	; 0x48
 8007264:	462e      	mov	r6, r5
 8007266:	9b07      	ldr	r3, [sp, #28]
 8007268:	4620      	mov	r0, r4
 800726a:	6859      	ldr	r1, [r3, #4]
 800726c:	f001 fd6e 	bl	8008d4c <_Balloc>
 8007270:	9005      	str	r0, [sp, #20]
 8007272:	2800      	cmp	r0, #0
 8007274:	f43f af0c 	beq.w	8007090 <_strtod_l+0x490>
 8007278:	9b07      	ldr	r3, [sp, #28]
 800727a:	691a      	ldr	r2, [r3, #16]
 800727c:	3202      	adds	r2, #2
 800727e:	f103 010c 	add.w	r1, r3, #12
 8007282:	0092      	lsls	r2, r2, #2
 8007284:	300c      	adds	r0, #12
 8007286:	f001 fd53 	bl	8008d30 <memcpy>
 800728a:	ec4b ab10 	vmov	d0, sl, fp
 800728e:	aa1a      	add	r2, sp, #104	; 0x68
 8007290:	a919      	add	r1, sp, #100	; 0x64
 8007292:	4620      	mov	r0, r4
 8007294:	f002 f948 	bl	8009528 <__d2b>
 8007298:	ec4b ab18 	vmov	d8, sl, fp
 800729c:	9018      	str	r0, [sp, #96]	; 0x60
 800729e:	2800      	cmp	r0, #0
 80072a0:	f43f aef6 	beq.w	8007090 <_strtod_l+0x490>
 80072a4:	2101      	movs	r1, #1
 80072a6:	4620      	mov	r0, r4
 80072a8:	f001 fe92 	bl	8008fd0 <__i2b>
 80072ac:	4606      	mov	r6, r0
 80072ae:	2800      	cmp	r0, #0
 80072b0:	f43f aeee 	beq.w	8007090 <_strtod_l+0x490>
 80072b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072b6:	9904      	ldr	r1, [sp, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	bfab      	itete	ge
 80072bc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80072be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80072c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80072c2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80072c6:	bfac      	ite	ge
 80072c8:	eb03 0902 	addge.w	r9, r3, r2
 80072cc:	1ad7      	sublt	r7, r2, r3
 80072ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80072d0:	eba3 0801 	sub.w	r8, r3, r1
 80072d4:	4490      	add	r8, r2
 80072d6:	4ba1      	ldr	r3, [pc, #644]	; (800755c <_strtod_l+0x95c>)
 80072d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80072dc:	4598      	cmp	r8, r3
 80072de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80072e2:	f280 80c7 	bge.w	8007474 <_strtod_l+0x874>
 80072e6:	eba3 0308 	sub.w	r3, r3, r8
 80072ea:	2b1f      	cmp	r3, #31
 80072ec:	eba2 0203 	sub.w	r2, r2, r3
 80072f0:	f04f 0101 	mov.w	r1, #1
 80072f4:	f300 80b1 	bgt.w	800745a <_strtod_l+0x85a>
 80072f8:	fa01 f303 	lsl.w	r3, r1, r3
 80072fc:	930d      	str	r3, [sp, #52]	; 0x34
 80072fe:	2300      	movs	r3, #0
 8007300:	9308      	str	r3, [sp, #32]
 8007302:	eb09 0802 	add.w	r8, r9, r2
 8007306:	9b04      	ldr	r3, [sp, #16]
 8007308:	45c1      	cmp	r9, r8
 800730a:	4417      	add	r7, r2
 800730c:	441f      	add	r7, r3
 800730e:	464b      	mov	r3, r9
 8007310:	bfa8      	it	ge
 8007312:	4643      	movge	r3, r8
 8007314:	42bb      	cmp	r3, r7
 8007316:	bfa8      	it	ge
 8007318:	463b      	movge	r3, r7
 800731a:	2b00      	cmp	r3, #0
 800731c:	bfc2      	ittt	gt
 800731e:	eba8 0803 	subgt.w	r8, r8, r3
 8007322:	1aff      	subgt	r7, r7, r3
 8007324:	eba9 0903 	subgt.w	r9, r9, r3
 8007328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800732a:	2b00      	cmp	r3, #0
 800732c:	dd17      	ble.n	800735e <_strtod_l+0x75e>
 800732e:	4631      	mov	r1, r6
 8007330:	461a      	mov	r2, r3
 8007332:	4620      	mov	r0, r4
 8007334:	f001 ff0c 	bl	8009150 <__pow5mult>
 8007338:	4606      	mov	r6, r0
 800733a:	2800      	cmp	r0, #0
 800733c:	f43f aea8 	beq.w	8007090 <_strtod_l+0x490>
 8007340:	4601      	mov	r1, r0
 8007342:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007344:	4620      	mov	r0, r4
 8007346:	f001 fe59 	bl	8008ffc <__multiply>
 800734a:	900b      	str	r0, [sp, #44]	; 0x2c
 800734c:	2800      	cmp	r0, #0
 800734e:	f43f ae9f 	beq.w	8007090 <_strtod_l+0x490>
 8007352:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007354:	4620      	mov	r0, r4
 8007356:	f001 fd39 	bl	8008dcc <_Bfree>
 800735a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800735c:	9318      	str	r3, [sp, #96]	; 0x60
 800735e:	f1b8 0f00 	cmp.w	r8, #0
 8007362:	f300 808c 	bgt.w	800747e <_strtod_l+0x87e>
 8007366:	9b06      	ldr	r3, [sp, #24]
 8007368:	2b00      	cmp	r3, #0
 800736a:	dd08      	ble.n	800737e <_strtod_l+0x77e>
 800736c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800736e:	9905      	ldr	r1, [sp, #20]
 8007370:	4620      	mov	r0, r4
 8007372:	f001 feed 	bl	8009150 <__pow5mult>
 8007376:	9005      	str	r0, [sp, #20]
 8007378:	2800      	cmp	r0, #0
 800737a:	f43f ae89 	beq.w	8007090 <_strtod_l+0x490>
 800737e:	2f00      	cmp	r7, #0
 8007380:	dd08      	ble.n	8007394 <_strtod_l+0x794>
 8007382:	9905      	ldr	r1, [sp, #20]
 8007384:	463a      	mov	r2, r7
 8007386:	4620      	mov	r0, r4
 8007388:	f001 ff3c 	bl	8009204 <__lshift>
 800738c:	9005      	str	r0, [sp, #20]
 800738e:	2800      	cmp	r0, #0
 8007390:	f43f ae7e 	beq.w	8007090 <_strtod_l+0x490>
 8007394:	f1b9 0f00 	cmp.w	r9, #0
 8007398:	dd08      	ble.n	80073ac <_strtod_l+0x7ac>
 800739a:	4631      	mov	r1, r6
 800739c:	464a      	mov	r2, r9
 800739e:	4620      	mov	r0, r4
 80073a0:	f001 ff30 	bl	8009204 <__lshift>
 80073a4:	4606      	mov	r6, r0
 80073a6:	2800      	cmp	r0, #0
 80073a8:	f43f ae72 	beq.w	8007090 <_strtod_l+0x490>
 80073ac:	9a05      	ldr	r2, [sp, #20]
 80073ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80073b0:	4620      	mov	r0, r4
 80073b2:	f001 ffb3 	bl	800931c <__mdiff>
 80073b6:	4605      	mov	r5, r0
 80073b8:	2800      	cmp	r0, #0
 80073ba:	f43f ae69 	beq.w	8007090 <_strtod_l+0x490>
 80073be:	68c3      	ldr	r3, [r0, #12]
 80073c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80073c2:	2300      	movs	r3, #0
 80073c4:	60c3      	str	r3, [r0, #12]
 80073c6:	4631      	mov	r1, r6
 80073c8:	f001 ff8c 	bl	80092e4 <__mcmp>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	da60      	bge.n	8007492 <_strtod_l+0x892>
 80073d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073d2:	ea53 030a 	orrs.w	r3, r3, sl
 80073d6:	f040 8082 	bne.w	80074de <_strtod_l+0x8de>
 80073da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d17d      	bne.n	80074de <_strtod_l+0x8de>
 80073e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073e6:	0d1b      	lsrs	r3, r3, #20
 80073e8:	051b      	lsls	r3, r3, #20
 80073ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80073ee:	d976      	bls.n	80074de <_strtod_l+0x8de>
 80073f0:	696b      	ldr	r3, [r5, #20]
 80073f2:	b913      	cbnz	r3, 80073fa <_strtod_l+0x7fa>
 80073f4:	692b      	ldr	r3, [r5, #16]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	dd71      	ble.n	80074de <_strtod_l+0x8de>
 80073fa:	4629      	mov	r1, r5
 80073fc:	2201      	movs	r2, #1
 80073fe:	4620      	mov	r0, r4
 8007400:	f001 ff00 	bl	8009204 <__lshift>
 8007404:	4631      	mov	r1, r6
 8007406:	4605      	mov	r5, r0
 8007408:	f001 ff6c 	bl	80092e4 <__mcmp>
 800740c:	2800      	cmp	r0, #0
 800740e:	dd66      	ble.n	80074de <_strtod_l+0x8de>
 8007410:	9904      	ldr	r1, [sp, #16]
 8007412:	4a53      	ldr	r2, [pc, #332]	; (8007560 <_strtod_l+0x960>)
 8007414:	465b      	mov	r3, fp
 8007416:	2900      	cmp	r1, #0
 8007418:	f000 8081 	beq.w	800751e <_strtod_l+0x91e>
 800741c:	ea02 010b 	and.w	r1, r2, fp
 8007420:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007424:	dc7b      	bgt.n	800751e <_strtod_l+0x91e>
 8007426:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800742a:	f77f aea9 	ble.w	8007180 <_strtod_l+0x580>
 800742e:	4b4d      	ldr	r3, [pc, #308]	; (8007564 <_strtod_l+0x964>)
 8007430:	4650      	mov	r0, sl
 8007432:	4659      	mov	r1, fp
 8007434:	2200      	movs	r2, #0
 8007436:	f7f9 f907 	bl	8000648 <__aeabi_dmul>
 800743a:	460b      	mov	r3, r1
 800743c:	4303      	orrs	r3, r0
 800743e:	bf08      	it	eq
 8007440:	2322      	moveq	r3, #34	; 0x22
 8007442:	4682      	mov	sl, r0
 8007444:	468b      	mov	fp, r1
 8007446:	bf08      	it	eq
 8007448:	6023      	streq	r3, [r4, #0]
 800744a:	e62b      	b.n	80070a4 <_strtod_l+0x4a4>
 800744c:	f04f 32ff 	mov.w	r2, #4294967295
 8007450:	fa02 f303 	lsl.w	r3, r2, r3
 8007454:	ea03 0a0a 	and.w	sl, r3, sl
 8007458:	e6e3      	b.n	8007222 <_strtod_l+0x622>
 800745a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800745e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007462:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007466:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800746a:	fa01 f308 	lsl.w	r3, r1, r8
 800746e:	9308      	str	r3, [sp, #32]
 8007470:	910d      	str	r1, [sp, #52]	; 0x34
 8007472:	e746      	b.n	8007302 <_strtod_l+0x702>
 8007474:	2300      	movs	r3, #0
 8007476:	9308      	str	r3, [sp, #32]
 8007478:	2301      	movs	r3, #1
 800747a:	930d      	str	r3, [sp, #52]	; 0x34
 800747c:	e741      	b.n	8007302 <_strtod_l+0x702>
 800747e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007480:	4642      	mov	r2, r8
 8007482:	4620      	mov	r0, r4
 8007484:	f001 febe 	bl	8009204 <__lshift>
 8007488:	9018      	str	r0, [sp, #96]	; 0x60
 800748a:	2800      	cmp	r0, #0
 800748c:	f47f af6b 	bne.w	8007366 <_strtod_l+0x766>
 8007490:	e5fe      	b.n	8007090 <_strtod_l+0x490>
 8007492:	465f      	mov	r7, fp
 8007494:	d16e      	bne.n	8007574 <_strtod_l+0x974>
 8007496:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007498:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800749c:	b342      	cbz	r2, 80074f0 <_strtod_l+0x8f0>
 800749e:	4a32      	ldr	r2, [pc, #200]	; (8007568 <_strtod_l+0x968>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d128      	bne.n	80074f6 <_strtod_l+0x8f6>
 80074a4:	9b04      	ldr	r3, [sp, #16]
 80074a6:	4651      	mov	r1, sl
 80074a8:	b1eb      	cbz	r3, 80074e6 <_strtod_l+0x8e6>
 80074aa:	4b2d      	ldr	r3, [pc, #180]	; (8007560 <_strtod_l+0x960>)
 80074ac:	403b      	ands	r3, r7
 80074ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80074b2:	f04f 32ff 	mov.w	r2, #4294967295
 80074b6:	d819      	bhi.n	80074ec <_strtod_l+0x8ec>
 80074b8:	0d1b      	lsrs	r3, r3, #20
 80074ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80074be:	fa02 f303 	lsl.w	r3, r2, r3
 80074c2:	4299      	cmp	r1, r3
 80074c4:	d117      	bne.n	80074f6 <_strtod_l+0x8f6>
 80074c6:	4b29      	ldr	r3, [pc, #164]	; (800756c <_strtod_l+0x96c>)
 80074c8:	429f      	cmp	r7, r3
 80074ca:	d102      	bne.n	80074d2 <_strtod_l+0x8d2>
 80074cc:	3101      	adds	r1, #1
 80074ce:	f43f addf 	beq.w	8007090 <_strtod_l+0x490>
 80074d2:	4b23      	ldr	r3, [pc, #140]	; (8007560 <_strtod_l+0x960>)
 80074d4:	403b      	ands	r3, r7
 80074d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80074da:	f04f 0a00 	mov.w	sl, #0
 80074de:	9b04      	ldr	r3, [sp, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1a4      	bne.n	800742e <_strtod_l+0x82e>
 80074e4:	e5de      	b.n	80070a4 <_strtod_l+0x4a4>
 80074e6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ea:	e7ea      	b.n	80074c2 <_strtod_l+0x8c2>
 80074ec:	4613      	mov	r3, r2
 80074ee:	e7e8      	b.n	80074c2 <_strtod_l+0x8c2>
 80074f0:	ea53 030a 	orrs.w	r3, r3, sl
 80074f4:	d08c      	beq.n	8007410 <_strtod_l+0x810>
 80074f6:	9b08      	ldr	r3, [sp, #32]
 80074f8:	b1db      	cbz	r3, 8007532 <_strtod_l+0x932>
 80074fa:	423b      	tst	r3, r7
 80074fc:	d0ef      	beq.n	80074de <_strtod_l+0x8de>
 80074fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007500:	9a04      	ldr	r2, [sp, #16]
 8007502:	4650      	mov	r0, sl
 8007504:	4659      	mov	r1, fp
 8007506:	b1c3      	cbz	r3, 800753a <_strtod_l+0x93a>
 8007508:	f7ff fb5e 	bl	8006bc8 <sulp>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	ec51 0b18 	vmov	r0, r1, d8
 8007514:	f7f8 fee2 	bl	80002dc <__adddf3>
 8007518:	4682      	mov	sl, r0
 800751a:	468b      	mov	fp, r1
 800751c:	e7df      	b.n	80074de <_strtod_l+0x8de>
 800751e:	4013      	ands	r3, r2
 8007520:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007524:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007528:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800752c:	f04f 3aff 	mov.w	sl, #4294967295
 8007530:	e7d5      	b.n	80074de <_strtod_l+0x8de>
 8007532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007534:	ea13 0f0a 	tst.w	r3, sl
 8007538:	e7e0      	b.n	80074fc <_strtod_l+0x8fc>
 800753a:	f7ff fb45 	bl	8006bc8 <sulp>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	ec51 0b18 	vmov	r0, r1, d8
 8007546:	f7f8 fec7 	bl	80002d8 <__aeabi_dsub>
 800754a:	2200      	movs	r2, #0
 800754c:	2300      	movs	r3, #0
 800754e:	4682      	mov	sl, r0
 8007550:	468b      	mov	fp, r1
 8007552:	f7f9 fae1 	bl	8000b18 <__aeabi_dcmpeq>
 8007556:	2800      	cmp	r0, #0
 8007558:	d0c1      	beq.n	80074de <_strtod_l+0x8de>
 800755a:	e611      	b.n	8007180 <_strtod_l+0x580>
 800755c:	fffffc02 	.word	0xfffffc02
 8007560:	7ff00000 	.word	0x7ff00000
 8007564:	39500000 	.word	0x39500000
 8007568:	000fffff 	.word	0x000fffff
 800756c:	7fefffff 	.word	0x7fefffff
 8007570:	0800bd00 	.word	0x0800bd00
 8007574:	4631      	mov	r1, r6
 8007576:	4628      	mov	r0, r5
 8007578:	f002 f832 	bl	80095e0 <__ratio>
 800757c:	ec59 8b10 	vmov	r8, r9, d0
 8007580:	ee10 0a10 	vmov	r0, s0
 8007584:	2200      	movs	r2, #0
 8007586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800758a:	4649      	mov	r1, r9
 800758c:	f7f9 fad8 	bl	8000b40 <__aeabi_dcmple>
 8007590:	2800      	cmp	r0, #0
 8007592:	d07a      	beq.n	800768a <_strtod_l+0xa8a>
 8007594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007596:	2b00      	cmp	r3, #0
 8007598:	d04a      	beq.n	8007630 <_strtod_l+0xa30>
 800759a:	4b95      	ldr	r3, [pc, #596]	; (80077f0 <_strtod_l+0xbf0>)
 800759c:	2200      	movs	r2, #0
 800759e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80075a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80077f0 <_strtod_l+0xbf0>
 80075a6:	f04f 0800 	mov.w	r8, #0
 80075aa:	4b92      	ldr	r3, [pc, #584]	; (80077f4 <_strtod_l+0xbf4>)
 80075ac:	403b      	ands	r3, r7
 80075ae:	930d      	str	r3, [sp, #52]	; 0x34
 80075b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075b2:	4b91      	ldr	r3, [pc, #580]	; (80077f8 <_strtod_l+0xbf8>)
 80075b4:	429a      	cmp	r2, r3
 80075b6:	f040 80b0 	bne.w	800771a <_strtod_l+0xb1a>
 80075ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075be:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80075c2:	ec4b ab10 	vmov	d0, sl, fp
 80075c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80075ca:	f001 ff31 	bl	8009430 <__ulp>
 80075ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075d2:	ec53 2b10 	vmov	r2, r3, d0
 80075d6:	f7f9 f837 	bl	8000648 <__aeabi_dmul>
 80075da:	4652      	mov	r2, sl
 80075dc:	465b      	mov	r3, fp
 80075de:	f7f8 fe7d 	bl	80002dc <__adddf3>
 80075e2:	460b      	mov	r3, r1
 80075e4:	4983      	ldr	r1, [pc, #524]	; (80077f4 <_strtod_l+0xbf4>)
 80075e6:	4a85      	ldr	r2, [pc, #532]	; (80077fc <_strtod_l+0xbfc>)
 80075e8:	4019      	ands	r1, r3
 80075ea:	4291      	cmp	r1, r2
 80075ec:	4682      	mov	sl, r0
 80075ee:	d960      	bls.n	80076b2 <_strtod_l+0xab2>
 80075f0:	ee18 3a90 	vmov	r3, s17
 80075f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d104      	bne.n	8007606 <_strtod_l+0xa06>
 80075fc:	ee18 3a10 	vmov	r3, s16
 8007600:	3301      	adds	r3, #1
 8007602:	f43f ad45 	beq.w	8007090 <_strtod_l+0x490>
 8007606:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007808 <_strtod_l+0xc08>
 800760a:	f04f 3aff 	mov.w	sl, #4294967295
 800760e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007610:	4620      	mov	r0, r4
 8007612:	f001 fbdb 	bl	8008dcc <_Bfree>
 8007616:	9905      	ldr	r1, [sp, #20]
 8007618:	4620      	mov	r0, r4
 800761a:	f001 fbd7 	bl	8008dcc <_Bfree>
 800761e:	4631      	mov	r1, r6
 8007620:	4620      	mov	r0, r4
 8007622:	f001 fbd3 	bl	8008dcc <_Bfree>
 8007626:	4629      	mov	r1, r5
 8007628:	4620      	mov	r0, r4
 800762a:	f001 fbcf 	bl	8008dcc <_Bfree>
 800762e:	e61a      	b.n	8007266 <_strtod_l+0x666>
 8007630:	f1ba 0f00 	cmp.w	sl, #0
 8007634:	d11b      	bne.n	800766e <_strtod_l+0xa6e>
 8007636:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800763a:	b9f3      	cbnz	r3, 800767a <_strtod_l+0xa7a>
 800763c:	4b6c      	ldr	r3, [pc, #432]	; (80077f0 <_strtod_l+0xbf0>)
 800763e:	2200      	movs	r2, #0
 8007640:	4640      	mov	r0, r8
 8007642:	4649      	mov	r1, r9
 8007644:	f7f9 fa72 	bl	8000b2c <__aeabi_dcmplt>
 8007648:	b9d0      	cbnz	r0, 8007680 <_strtod_l+0xa80>
 800764a:	4640      	mov	r0, r8
 800764c:	4649      	mov	r1, r9
 800764e:	4b6c      	ldr	r3, [pc, #432]	; (8007800 <_strtod_l+0xc00>)
 8007650:	2200      	movs	r2, #0
 8007652:	f7f8 fff9 	bl	8000648 <__aeabi_dmul>
 8007656:	4680      	mov	r8, r0
 8007658:	4689      	mov	r9, r1
 800765a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800765e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007662:	9315      	str	r3, [sp, #84]	; 0x54
 8007664:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007668:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800766c:	e79d      	b.n	80075aa <_strtod_l+0x9aa>
 800766e:	f1ba 0f01 	cmp.w	sl, #1
 8007672:	d102      	bne.n	800767a <_strtod_l+0xa7a>
 8007674:	2f00      	cmp	r7, #0
 8007676:	f43f ad83 	beq.w	8007180 <_strtod_l+0x580>
 800767a:	4b62      	ldr	r3, [pc, #392]	; (8007804 <_strtod_l+0xc04>)
 800767c:	2200      	movs	r2, #0
 800767e:	e78e      	b.n	800759e <_strtod_l+0x99e>
 8007680:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007800 <_strtod_l+0xc00>
 8007684:	f04f 0800 	mov.w	r8, #0
 8007688:	e7e7      	b.n	800765a <_strtod_l+0xa5a>
 800768a:	4b5d      	ldr	r3, [pc, #372]	; (8007800 <_strtod_l+0xc00>)
 800768c:	4640      	mov	r0, r8
 800768e:	4649      	mov	r1, r9
 8007690:	2200      	movs	r2, #0
 8007692:	f7f8 ffd9 	bl	8000648 <__aeabi_dmul>
 8007696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007698:	4680      	mov	r8, r0
 800769a:	4689      	mov	r9, r1
 800769c:	b933      	cbnz	r3, 80076ac <_strtod_l+0xaac>
 800769e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076a2:	900e      	str	r0, [sp, #56]	; 0x38
 80076a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80076a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80076aa:	e7dd      	b.n	8007668 <_strtod_l+0xa68>
 80076ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80076b0:	e7f9      	b.n	80076a6 <_strtod_l+0xaa6>
 80076b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80076b6:	9b04      	ldr	r3, [sp, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1a8      	bne.n	800760e <_strtod_l+0xa0e>
 80076bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80076c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076c2:	0d1b      	lsrs	r3, r3, #20
 80076c4:	051b      	lsls	r3, r3, #20
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d1a1      	bne.n	800760e <_strtod_l+0xa0e>
 80076ca:	4640      	mov	r0, r8
 80076cc:	4649      	mov	r1, r9
 80076ce:	f7f9 fb03 	bl	8000cd8 <__aeabi_d2lz>
 80076d2:	f7f8 ff8b 	bl	80005ec <__aeabi_l2d>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	4640      	mov	r0, r8
 80076dc:	4649      	mov	r1, r9
 80076de:	f7f8 fdfb 	bl	80002d8 <__aeabi_dsub>
 80076e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076e8:	ea43 030a 	orr.w	r3, r3, sl
 80076ec:	4313      	orrs	r3, r2
 80076ee:	4680      	mov	r8, r0
 80076f0:	4689      	mov	r9, r1
 80076f2:	d055      	beq.n	80077a0 <_strtod_l+0xba0>
 80076f4:	a336      	add	r3, pc, #216	; (adr r3, 80077d0 <_strtod_l+0xbd0>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	f7f9 fa17 	bl	8000b2c <__aeabi_dcmplt>
 80076fe:	2800      	cmp	r0, #0
 8007700:	f47f acd0 	bne.w	80070a4 <_strtod_l+0x4a4>
 8007704:	a334      	add	r3, pc, #208	; (adr r3, 80077d8 <_strtod_l+0xbd8>)
 8007706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770a:	4640      	mov	r0, r8
 800770c:	4649      	mov	r1, r9
 800770e:	f7f9 fa2b 	bl	8000b68 <__aeabi_dcmpgt>
 8007712:	2800      	cmp	r0, #0
 8007714:	f43f af7b 	beq.w	800760e <_strtod_l+0xa0e>
 8007718:	e4c4      	b.n	80070a4 <_strtod_l+0x4a4>
 800771a:	9b04      	ldr	r3, [sp, #16]
 800771c:	b333      	cbz	r3, 800776c <_strtod_l+0xb6c>
 800771e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007720:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007724:	d822      	bhi.n	800776c <_strtod_l+0xb6c>
 8007726:	a32e      	add	r3, pc, #184	; (adr r3, 80077e0 <_strtod_l+0xbe0>)
 8007728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772c:	4640      	mov	r0, r8
 800772e:	4649      	mov	r1, r9
 8007730:	f7f9 fa06 	bl	8000b40 <__aeabi_dcmple>
 8007734:	b1a0      	cbz	r0, 8007760 <_strtod_l+0xb60>
 8007736:	4649      	mov	r1, r9
 8007738:	4640      	mov	r0, r8
 800773a:	f7f9 fa5d 	bl	8000bf8 <__aeabi_d2uiz>
 800773e:	2801      	cmp	r0, #1
 8007740:	bf38      	it	cc
 8007742:	2001      	movcc	r0, #1
 8007744:	f7f8 ff06 	bl	8000554 <__aeabi_ui2d>
 8007748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800774a:	4680      	mov	r8, r0
 800774c:	4689      	mov	r9, r1
 800774e:	bb23      	cbnz	r3, 800779a <_strtod_l+0xb9a>
 8007750:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007754:	9010      	str	r0, [sp, #64]	; 0x40
 8007756:	9311      	str	r3, [sp, #68]	; 0x44
 8007758:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800775c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007762:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007764:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007768:	1a9b      	subs	r3, r3, r2
 800776a:	9309      	str	r3, [sp, #36]	; 0x24
 800776c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007770:	eeb0 0a48 	vmov.f32	s0, s16
 8007774:	eef0 0a68 	vmov.f32	s1, s17
 8007778:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800777c:	f001 fe58 	bl	8009430 <__ulp>
 8007780:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007784:	ec53 2b10 	vmov	r2, r3, d0
 8007788:	f7f8 ff5e 	bl	8000648 <__aeabi_dmul>
 800778c:	ec53 2b18 	vmov	r2, r3, d8
 8007790:	f7f8 fda4 	bl	80002dc <__adddf3>
 8007794:	4682      	mov	sl, r0
 8007796:	468b      	mov	fp, r1
 8007798:	e78d      	b.n	80076b6 <_strtod_l+0xab6>
 800779a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800779e:	e7db      	b.n	8007758 <_strtod_l+0xb58>
 80077a0:	a311      	add	r3, pc, #68	; (adr r3, 80077e8 <_strtod_l+0xbe8>)
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	f7f9 f9c1 	bl	8000b2c <__aeabi_dcmplt>
 80077aa:	e7b2      	b.n	8007712 <_strtod_l+0xb12>
 80077ac:	2300      	movs	r3, #0
 80077ae:	930a      	str	r3, [sp, #40]	; 0x28
 80077b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	f7ff ba6b 	b.w	8006c90 <_strtod_l+0x90>
 80077ba:	2a65      	cmp	r2, #101	; 0x65
 80077bc:	f43f ab5f 	beq.w	8006e7e <_strtod_l+0x27e>
 80077c0:	2a45      	cmp	r2, #69	; 0x45
 80077c2:	f43f ab5c 	beq.w	8006e7e <_strtod_l+0x27e>
 80077c6:	2301      	movs	r3, #1
 80077c8:	f7ff bb94 	b.w	8006ef4 <_strtod_l+0x2f4>
 80077cc:	f3af 8000 	nop.w
 80077d0:	94a03595 	.word	0x94a03595
 80077d4:	3fdfffff 	.word	0x3fdfffff
 80077d8:	35afe535 	.word	0x35afe535
 80077dc:	3fe00000 	.word	0x3fe00000
 80077e0:	ffc00000 	.word	0xffc00000
 80077e4:	41dfffff 	.word	0x41dfffff
 80077e8:	94a03595 	.word	0x94a03595
 80077ec:	3fcfffff 	.word	0x3fcfffff
 80077f0:	3ff00000 	.word	0x3ff00000
 80077f4:	7ff00000 	.word	0x7ff00000
 80077f8:	7fe00000 	.word	0x7fe00000
 80077fc:	7c9fffff 	.word	0x7c9fffff
 8007800:	3fe00000 	.word	0x3fe00000
 8007804:	bff00000 	.word	0xbff00000
 8007808:	7fefffff 	.word	0x7fefffff

0800780c <_strtod_r>:
 800780c:	4b01      	ldr	r3, [pc, #4]	; (8007814 <_strtod_r+0x8>)
 800780e:	f7ff b9f7 	b.w	8006c00 <_strtod_l>
 8007812:	bf00      	nop
 8007814:	2000008c 	.word	0x2000008c

08007818 <_strtol_l.constprop.0>:
 8007818:	2b01      	cmp	r3, #1
 800781a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800781e:	d001      	beq.n	8007824 <_strtol_l.constprop.0+0xc>
 8007820:	2b24      	cmp	r3, #36	; 0x24
 8007822:	d906      	bls.n	8007832 <_strtol_l.constprop.0+0x1a>
 8007824:	f7fe fafe 	bl	8005e24 <__errno>
 8007828:	2316      	movs	r3, #22
 800782a:	6003      	str	r3, [r0, #0]
 800782c:	2000      	movs	r0, #0
 800782e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007832:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007918 <_strtol_l.constprop.0+0x100>
 8007836:	460d      	mov	r5, r1
 8007838:	462e      	mov	r6, r5
 800783a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800783e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007842:	f017 0708 	ands.w	r7, r7, #8
 8007846:	d1f7      	bne.n	8007838 <_strtol_l.constprop.0+0x20>
 8007848:	2c2d      	cmp	r4, #45	; 0x2d
 800784a:	d132      	bne.n	80078b2 <_strtol_l.constprop.0+0x9a>
 800784c:	782c      	ldrb	r4, [r5, #0]
 800784e:	2701      	movs	r7, #1
 8007850:	1cb5      	adds	r5, r6, #2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d05b      	beq.n	800790e <_strtol_l.constprop.0+0xf6>
 8007856:	2b10      	cmp	r3, #16
 8007858:	d109      	bne.n	800786e <_strtol_l.constprop.0+0x56>
 800785a:	2c30      	cmp	r4, #48	; 0x30
 800785c:	d107      	bne.n	800786e <_strtol_l.constprop.0+0x56>
 800785e:	782c      	ldrb	r4, [r5, #0]
 8007860:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007864:	2c58      	cmp	r4, #88	; 0x58
 8007866:	d14d      	bne.n	8007904 <_strtol_l.constprop.0+0xec>
 8007868:	786c      	ldrb	r4, [r5, #1]
 800786a:	2310      	movs	r3, #16
 800786c:	3502      	adds	r5, #2
 800786e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007872:	f108 38ff 	add.w	r8, r8, #4294967295
 8007876:	f04f 0c00 	mov.w	ip, #0
 800787a:	fbb8 f9f3 	udiv	r9, r8, r3
 800787e:	4666      	mov	r6, ip
 8007880:	fb03 8a19 	mls	sl, r3, r9, r8
 8007884:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007888:	f1be 0f09 	cmp.w	lr, #9
 800788c:	d816      	bhi.n	80078bc <_strtol_l.constprop.0+0xa4>
 800788e:	4674      	mov	r4, lr
 8007890:	42a3      	cmp	r3, r4
 8007892:	dd24      	ble.n	80078de <_strtol_l.constprop.0+0xc6>
 8007894:	f1bc 0f00 	cmp.w	ip, #0
 8007898:	db1e      	blt.n	80078d8 <_strtol_l.constprop.0+0xc0>
 800789a:	45b1      	cmp	r9, r6
 800789c:	d31c      	bcc.n	80078d8 <_strtol_l.constprop.0+0xc0>
 800789e:	d101      	bne.n	80078a4 <_strtol_l.constprop.0+0x8c>
 80078a0:	45a2      	cmp	sl, r4
 80078a2:	db19      	blt.n	80078d8 <_strtol_l.constprop.0+0xc0>
 80078a4:	fb06 4603 	mla	r6, r6, r3, r4
 80078a8:	f04f 0c01 	mov.w	ip, #1
 80078ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078b0:	e7e8      	b.n	8007884 <_strtol_l.constprop.0+0x6c>
 80078b2:	2c2b      	cmp	r4, #43	; 0x2b
 80078b4:	bf04      	itt	eq
 80078b6:	782c      	ldrbeq	r4, [r5, #0]
 80078b8:	1cb5      	addeq	r5, r6, #2
 80078ba:	e7ca      	b.n	8007852 <_strtol_l.constprop.0+0x3a>
 80078bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80078c0:	f1be 0f19 	cmp.w	lr, #25
 80078c4:	d801      	bhi.n	80078ca <_strtol_l.constprop.0+0xb2>
 80078c6:	3c37      	subs	r4, #55	; 0x37
 80078c8:	e7e2      	b.n	8007890 <_strtol_l.constprop.0+0x78>
 80078ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80078ce:	f1be 0f19 	cmp.w	lr, #25
 80078d2:	d804      	bhi.n	80078de <_strtol_l.constprop.0+0xc6>
 80078d4:	3c57      	subs	r4, #87	; 0x57
 80078d6:	e7db      	b.n	8007890 <_strtol_l.constprop.0+0x78>
 80078d8:	f04f 3cff 	mov.w	ip, #4294967295
 80078dc:	e7e6      	b.n	80078ac <_strtol_l.constprop.0+0x94>
 80078de:	f1bc 0f00 	cmp.w	ip, #0
 80078e2:	da05      	bge.n	80078f0 <_strtol_l.constprop.0+0xd8>
 80078e4:	2322      	movs	r3, #34	; 0x22
 80078e6:	6003      	str	r3, [r0, #0]
 80078e8:	4646      	mov	r6, r8
 80078ea:	b942      	cbnz	r2, 80078fe <_strtol_l.constprop.0+0xe6>
 80078ec:	4630      	mov	r0, r6
 80078ee:	e79e      	b.n	800782e <_strtol_l.constprop.0+0x16>
 80078f0:	b107      	cbz	r7, 80078f4 <_strtol_l.constprop.0+0xdc>
 80078f2:	4276      	negs	r6, r6
 80078f4:	2a00      	cmp	r2, #0
 80078f6:	d0f9      	beq.n	80078ec <_strtol_l.constprop.0+0xd4>
 80078f8:	f1bc 0f00 	cmp.w	ip, #0
 80078fc:	d000      	beq.n	8007900 <_strtol_l.constprop.0+0xe8>
 80078fe:	1e69      	subs	r1, r5, #1
 8007900:	6011      	str	r1, [r2, #0]
 8007902:	e7f3      	b.n	80078ec <_strtol_l.constprop.0+0xd4>
 8007904:	2430      	movs	r4, #48	; 0x30
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1b1      	bne.n	800786e <_strtol_l.constprop.0+0x56>
 800790a:	2308      	movs	r3, #8
 800790c:	e7af      	b.n	800786e <_strtol_l.constprop.0+0x56>
 800790e:	2c30      	cmp	r4, #48	; 0x30
 8007910:	d0a5      	beq.n	800785e <_strtol_l.constprop.0+0x46>
 8007912:	230a      	movs	r3, #10
 8007914:	e7ab      	b.n	800786e <_strtol_l.constprop.0+0x56>
 8007916:	bf00      	nop
 8007918:	0800bd29 	.word	0x0800bd29

0800791c <_strtol_r>:
 800791c:	f7ff bf7c 	b.w	8007818 <_strtol_l.constprop.0>

08007920 <quorem>:
 8007920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007924:	6903      	ldr	r3, [r0, #16]
 8007926:	690c      	ldr	r4, [r1, #16]
 8007928:	42a3      	cmp	r3, r4
 800792a:	4607      	mov	r7, r0
 800792c:	f2c0 8081 	blt.w	8007a32 <quorem+0x112>
 8007930:	3c01      	subs	r4, #1
 8007932:	f101 0814 	add.w	r8, r1, #20
 8007936:	f100 0514 	add.w	r5, r0, #20
 800793a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800793e:	9301      	str	r3, [sp, #4]
 8007940:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007944:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007948:	3301      	adds	r3, #1
 800794a:	429a      	cmp	r2, r3
 800794c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007950:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007954:	fbb2 f6f3 	udiv	r6, r2, r3
 8007958:	d331      	bcc.n	80079be <quorem+0x9e>
 800795a:	f04f 0e00 	mov.w	lr, #0
 800795e:	4640      	mov	r0, r8
 8007960:	46ac      	mov	ip, r5
 8007962:	46f2      	mov	sl, lr
 8007964:	f850 2b04 	ldr.w	r2, [r0], #4
 8007968:	b293      	uxth	r3, r2
 800796a:	fb06 e303 	mla	r3, r6, r3, lr
 800796e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007972:	b29b      	uxth	r3, r3
 8007974:	ebaa 0303 	sub.w	r3, sl, r3
 8007978:	f8dc a000 	ldr.w	sl, [ip]
 800797c:	0c12      	lsrs	r2, r2, #16
 800797e:	fa13 f38a 	uxtah	r3, r3, sl
 8007982:	fb06 e202 	mla	r2, r6, r2, lr
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	9b00      	ldr	r3, [sp, #0]
 800798a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800798e:	b292      	uxth	r2, r2
 8007990:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007994:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007998:	f8bd 3000 	ldrh.w	r3, [sp]
 800799c:	4581      	cmp	r9, r0
 800799e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079a2:	f84c 3b04 	str.w	r3, [ip], #4
 80079a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079aa:	d2db      	bcs.n	8007964 <quorem+0x44>
 80079ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80079b0:	b92b      	cbnz	r3, 80079be <quorem+0x9e>
 80079b2:	9b01      	ldr	r3, [sp, #4]
 80079b4:	3b04      	subs	r3, #4
 80079b6:	429d      	cmp	r5, r3
 80079b8:	461a      	mov	r2, r3
 80079ba:	d32e      	bcc.n	8007a1a <quorem+0xfa>
 80079bc:	613c      	str	r4, [r7, #16]
 80079be:	4638      	mov	r0, r7
 80079c0:	f001 fc90 	bl	80092e4 <__mcmp>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	db24      	blt.n	8007a12 <quorem+0xf2>
 80079c8:	3601      	adds	r6, #1
 80079ca:	4628      	mov	r0, r5
 80079cc:	f04f 0c00 	mov.w	ip, #0
 80079d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80079d4:	f8d0 e000 	ldr.w	lr, [r0]
 80079d8:	b293      	uxth	r3, r2
 80079da:	ebac 0303 	sub.w	r3, ip, r3
 80079de:	0c12      	lsrs	r2, r2, #16
 80079e0:	fa13 f38e 	uxtah	r3, r3, lr
 80079e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80079e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079f2:	45c1      	cmp	r9, r8
 80079f4:	f840 3b04 	str.w	r3, [r0], #4
 80079f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80079fc:	d2e8      	bcs.n	80079d0 <quorem+0xb0>
 80079fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a06:	b922      	cbnz	r2, 8007a12 <quorem+0xf2>
 8007a08:	3b04      	subs	r3, #4
 8007a0a:	429d      	cmp	r5, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	d30a      	bcc.n	8007a26 <quorem+0x106>
 8007a10:	613c      	str	r4, [r7, #16]
 8007a12:	4630      	mov	r0, r6
 8007a14:	b003      	add	sp, #12
 8007a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1a:	6812      	ldr	r2, [r2, #0]
 8007a1c:	3b04      	subs	r3, #4
 8007a1e:	2a00      	cmp	r2, #0
 8007a20:	d1cc      	bne.n	80079bc <quorem+0x9c>
 8007a22:	3c01      	subs	r4, #1
 8007a24:	e7c7      	b.n	80079b6 <quorem+0x96>
 8007a26:	6812      	ldr	r2, [r2, #0]
 8007a28:	3b04      	subs	r3, #4
 8007a2a:	2a00      	cmp	r2, #0
 8007a2c:	d1f0      	bne.n	8007a10 <quorem+0xf0>
 8007a2e:	3c01      	subs	r4, #1
 8007a30:	e7eb      	b.n	8007a0a <quorem+0xea>
 8007a32:	2000      	movs	r0, #0
 8007a34:	e7ee      	b.n	8007a14 <quorem+0xf4>
	...

08007a38 <_dtoa_r>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	ed2d 8b04 	vpush	{d8-d9}
 8007a40:	ec57 6b10 	vmov	r6, r7, d0
 8007a44:	b093      	sub	sp, #76	; 0x4c
 8007a46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a4c:	9106      	str	r1, [sp, #24]
 8007a4e:	ee10 aa10 	vmov	sl, s0
 8007a52:	4604      	mov	r4, r0
 8007a54:	9209      	str	r2, [sp, #36]	; 0x24
 8007a56:	930c      	str	r3, [sp, #48]	; 0x30
 8007a58:	46bb      	mov	fp, r7
 8007a5a:	b975      	cbnz	r5, 8007a7a <_dtoa_r+0x42>
 8007a5c:	2010      	movs	r0, #16
 8007a5e:	f001 f94d 	bl	8008cfc <malloc>
 8007a62:	4602      	mov	r2, r0
 8007a64:	6260      	str	r0, [r4, #36]	; 0x24
 8007a66:	b920      	cbnz	r0, 8007a72 <_dtoa_r+0x3a>
 8007a68:	4ba7      	ldr	r3, [pc, #668]	; (8007d08 <_dtoa_r+0x2d0>)
 8007a6a:	21ea      	movs	r1, #234	; 0xea
 8007a6c:	48a7      	ldr	r0, [pc, #668]	; (8007d0c <_dtoa_r+0x2d4>)
 8007a6e:	f002 f8bd 	bl	8009bec <__assert_func>
 8007a72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a76:	6005      	str	r5, [r0, #0]
 8007a78:	60c5      	str	r5, [r0, #12]
 8007a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a7c:	6819      	ldr	r1, [r3, #0]
 8007a7e:	b151      	cbz	r1, 8007a96 <_dtoa_r+0x5e>
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	604a      	str	r2, [r1, #4]
 8007a84:	2301      	movs	r3, #1
 8007a86:	4093      	lsls	r3, r2
 8007a88:	608b      	str	r3, [r1, #8]
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f001 f99e 	bl	8008dcc <_Bfree>
 8007a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	1e3b      	subs	r3, r7, #0
 8007a98:	bfaa      	itet	ge
 8007a9a:	2300      	movge	r3, #0
 8007a9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007aa0:	f8c8 3000 	strge.w	r3, [r8]
 8007aa4:	4b9a      	ldr	r3, [pc, #616]	; (8007d10 <_dtoa_r+0x2d8>)
 8007aa6:	bfbc      	itt	lt
 8007aa8:	2201      	movlt	r2, #1
 8007aaa:	f8c8 2000 	strlt.w	r2, [r8]
 8007aae:	ea33 030b 	bics.w	r3, r3, fp
 8007ab2:	d11b      	bne.n	8007aec <_dtoa_r+0xb4>
 8007ab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ab6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ac0:	4333      	orrs	r3, r6
 8007ac2:	f000 8592 	beq.w	80085ea <_dtoa_r+0xbb2>
 8007ac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ac8:	b963      	cbnz	r3, 8007ae4 <_dtoa_r+0xac>
 8007aca:	4b92      	ldr	r3, [pc, #584]	; (8007d14 <_dtoa_r+0x2dc>)
 8007acc:	e022      	b.n	8007b14 <_dtoa_r+0xdc>
 8007ace:	4b92      	ldr	r3, [pc, #584]	; (8007d18 <_dtoa_r+0x2e0>)
 8007ad0:	9301      	str	r3, [sp, #4]
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	9801      	ldr	r0, [sp, #4]
 8007ada:	b013      	add	sp, #76	; 0x4c
 8007adc:	ecbd 8b04 	vpop	{d8-d9}
 8007ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae4:	4b8b      	ldr	r3, [pc, #556]	; (8007d14 <_dtoa_r+0x2dc>)
 8007ae6:	9301      	str	r3, [sp, #4]
 8007ae8:	3303      	adds	r3, #3
 8007aea:	e7f3      	b.n	8007ad4 <_dtoa_r+0x9c>
 8007aec:	2200      	movs	r2, #0
 8007aee:	2300      	movs	r3, #0
 8007af0:	4650      	mov	r0, sl
 8007af2:	4659      	mov	r1, fp
 8007af4:	f7f9 f810 	bl	8000b18 <__aeabi_dcmpeq>
 8007af8:	ec4b ab19 	vmov	d9, sl, fp
 8007afc:	4680      	mov	r8, r0
 8007afe:	b158      	cbz	r0, 8007b18 <_dtoa_r+0xe0>
 8007b00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b02:	2301      	movs	r3, #1
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 856b 	beq.w	80085e4 <_dtoa_r+0xbac>
 8007b0e:	4883      	ldr	r0, [pc, #524]	; (8007d1c <_dtoa_r+0x2e4>)
 8007b10:	6018      	str	r0, [r3, #0]
 8007b12:	1e43      	subs	r3, r0, #1
 8007b14:	9301      	str	r3, [sp, #4]
 8007b16:	e7df      	b.n	8007ad8 <_dtoa_r+0xa0>
 8007b18:	ec4b ab10 	vmov	d0, sl, fp
 8007b1c:	aa10      	add	r2, sp, #64	; 0x40
 8007b1e:	a911      	add	r1, sp, #68	; 0x44
 8007b20:	4620      	mov	r0, r4
 8007b22:	f001 fd01 	bl	8009528 <__d2b>
 8007b26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007b2a:	ee08 0a10 	vmov	s16, r0
 8007b2e:	2d00      	cmp	r5, #0
 8007b30:	f000 8084 	beq.w	8007c3c <_dtoa_r+0x204>
 8007b34:	ee19 3a90 	vmov	r3, s19
 8007b38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b40:	4656      	mov	r6, sl
 8007b42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007b4e:	4b74      	ldr	r3, [pc, #464]	; (8007d20 <_dtoa_r+0x2e8>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	4630      	mov	r0, r6
 8007b54:	4639      	mov	r1, r7
 8007b56:	f7f8 fbbf 	bl	80002d8 <__aeabi_dsub>
 8007b5a:	a365      	add	r3, pc, #404	; (adr r3, 8007cf0 <_dtoa_r+0x2b8>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 fd72 	bl	8000648 <__aeabi_dmul>
 8007b64:	a364      	add	r3, pc, #400	; (adr r3, 8007cf8 <_dtoa_r+0x2c0>)
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	f7f8 fbb7 	bl	80002dc <__adddf3>
 8007b6e:	4606      	mov	r6, r0
 8007b70:	4628      	mov	r0, r5
 8007b72:	460f      	mov	r7, r1
 8007b74:	f7f8 fcfe 	bl	8000574 <__aeabi_i2d>
 8007b78:	a361      	add	r3, pc, #388	; (adr r3, 8007d00 <_dtoa_r+0x2c8>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	f7f8 fd63 	bl	8000648 <__aeabi_dmul>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	4630      	mov	r0, r6
 8007b88:	4639      	mov	r1, r7
 8007b8a:	f7f8 fba7 	bl	80002dc <__adddf3>
 8007b8e:	4606      	mov	r6, r0
 8007b90:	460f      	mov	r7, r1
 8007b92:	f7f9 f809 	bl	8000ba8 <__aeabi_d2iz>
 8007b96:	2200      	movs	r2, #0
 8007b98:	9000      	str	r0, [sp, #0]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	4639      	mov	r1, r7
 8007ba0:	f7f8 ffc4 	bl	8000b2c <__aeabi_dcmplt>
 8007ba4:	b150      	cbz	r0, 8007bbc <_dtoa_r+0x184>
 8007ba6:	9800      	ldr	r0, [sp, #0]
 8007ba8:	f7f8 fce4 	bl	8000574 <__aeabi_i2d>
 8007bac:	4632      	mov	r2, r6
 8007bae:	463b      	mov	r3, r7
 8007bb0:	f7f8 ffb2 	bl	8000b18 <__aeabi_dcmpeq>
 8007bb4:	b910      	cbnz	r0, 8007bbc <_dtoa_r+0x184>
 8007bb6:	9b00      	ldr	r3, [sp, #0]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	9b00      	ldr	r3, [sp, #0]
 8007bbe:	2b16      	cmp	r3, #22
 8007bc0:	d85a      	bhi.n	8007c78 <_dtoa_r+0x240>
 8007bc2:	9a00      	ldr	r2, [sp, #0]
 8007bc4:	4b57      	ldr	r3, [pc, #348]	; (8007d24 <_dtoa_r+0x2ec>)
 8007bc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	ec51 0b19 	vmov	r0, r1, d9
 8007bd2:	f7f8 ffab 	bl	8000b2c <__aeabi_dcmplt>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d050      	beq.n	8007c7c <_dtoa_r+0x244>
 8007bda:	9b00      	ldr	r3, [sp, #0]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	2300      	movs	r3, #0
 8007be2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007be4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007be6:	1b5d      	subs	r5, r3, r5
 8007be8:	1e6b      	subs	r3, r5, #1
 8007bea:	9305      	str	r3, [sp, #20]
 8007bec:	bf45      	ittet	mi
 8007bee:	f1c5 0301 	rsbmi	r3, r5, #1
 8007bf2:	9304      	strmi	r3, [sp, #16]
 8007bf4:	2300      	movpl	r3, #0
 8007bf6:	2300      	movmi	r3, #0
 8007bf8:	bf4c      	ite	mi
 8007bfa:	9305      	strmi	r3, [sp, #20]
 8007bfc:	9304      	strpl	r3, [sp, #16]
 8007bfe:	9b00      	ldr	r3, [sp, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	db3d      	blt.n	8007c80 <_dtoa_r+0x248>
 8007c04:	9b05      	ldr	r3, [sp, #20]
 8007c06:	9a00      	ldr	r2, [sp, #0]
 8007c08:	920a      	str	r2, [sp, #40]	; 0x28
 8007c0a:	4413      	add	r3, r2
 8007c0c:	9305      	str	r3, [sp, #20]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	9307      	str	r3, [sp, #28]
 8007c12:	9b06      	ldr	r3, [sp, #24]
 8007c14:	2b09      	cmp	r3, #9
 8007c16:	f200 8089 	bhi.w	8007d2c <_dtoa_r+0x2f4>
 8007c1a:	2b05      	cmp	r3, #5
 8007c1c:	bfc4      	itt	gt
 8007c1e:	3b04      	subgt	r3, #4
 8007c20:	9306      	strgt	r3, [sp, #24]
 8007c22:	9b06      	ldr	r3, [sp, #24]
 8007c24:	f1a3 0302 	sub.w	r3, r3, #2
 8007c28:	bfcc      	ite	gt
 8007c2a:	2500      	movgt	r5, #0
 8007c2c:	2501      	movle	r5, #1
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	f200 8087 	bhi.w	8007d42 <_dtoa_r+0x30a>
 8007c34:	e8df f003 	tbb	[pc, r3]
 8007c38:	59383a2d 	.word	0x59383a2d
 8007c3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c40:	441d      	add	r5, r3
 8007c42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	bfc1      	itttt	gt
 8007c4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c52:	fa0b f303 	lslgt.w	r3, fp, r3
 8007c56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c5a:	bfda      	itte	le
 8007c5c:	f1c3 0320 	rsble	r3, r3, #32
 8007c60:	fa06 f003 	lslle.w	r0, r6, r3
 8007c64:	4318      	orrgt	r0, r3
 8007c66:	f7f8 fc75 	bl	8000554 <__aeabi_ui2d>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007c72:	3d01      	subs	r5, #1
 8007c74:	930e      	str	r3, [sp, #56]	; 0x38
 8007c76:	e76a      	b.n	8007b4e <_dtoa_r+0x116>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e7b2      	b.n	8007be2 <_dtoa_r+0x1aa>
 8007c7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c7e:	e7b1      	b.n	8007be4 <_dtoa_r+0x1ac>
 8007c80:	9b04      	ldr	r3, [sp, #16]
 8007c82:	9a00      	ldr	r2, [sp, #0]
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	9304      	str	r3, [sp, #16]
 8007c88:	4253      	negs	r3, r2
 8007c8a:	9307      	str	r3, [sp, #28]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c90:	e7bf      	b.n	8007c12 <_dtoa_r+0x1da>
 8007c92:	2300      	movs	r3, #0
 8007c94:	9308      	str	r3, [sp, #32]
 8007c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	dc55      	bgt.n	8007d48 <_dtoa_r+0x310>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ca6:	e00c      	b.n	8007cc2 <_dtoa_r+0x28a>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e7f3      	b.n	8007c94 <_dtoa_r+0x25c>
 8007cac:	2300      	movs	r3, #0
 8007cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb0:	9308      	str	r3, [sp, #32]
 8007cb2:	9b00      	ldr	r3, [sp, #0]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	9302      	str	r3, [sp, #8]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	9303      	str	r3, [sp, #12]
 8007cbe:	bfb8      	it	lt
 8007cc0:	2301      	movlt	r3, #1
 8007cc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	6042      	str	r2, [r0, #4]
 8007cc8:	2204      	movs	r2, #4
 8007cca:	f102 0614 	add.w	r6, r2, #20
 8007cce:	429e      	cmp	r6, r3
 8007cd0:	6841      	ldr	r1, [r0, #4]
 8007cd2:	d93d      	bls.n	8007d50 <_dtoa_r+0x318>
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f001 f839 	bl	8008d4c <_Balloc>
 8007cda:	9001      	str	r0, [sp, #4]
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d13b      	bne.n	8007d58 <_dtoa_r+0x320>
 8007ce0:	4b11      	ldr	r3, [pc, #68]	; (8007d28 <_dtoa_r+0x2f0>)
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ce8:	e6c0      	b.n	8007a6c <_dtoa_r+0x34>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e7df      	b.n	8007cae <_dtoa_r+0x276>
 8007cee:	bf00      	nop
 8007cf0:	636f4361 	.word	0x636f4361
 8007cf4:	3fd287a7 	.word	0x3fd287a7
 8007cf8:	8b60c8b3 	.word	0x8b60c8b3
 8007cfc:	3fc68a28 	.word	0x3fc68a28
 8007d00:	509f79fb 	.word	0x509f79fb
 8007d04:	3fd34413 	.word	0x3fd34413
 8007d08:	0800be36 	.word	0x0800be36
 8007d0c:	0800be4d 	.word	0x0800be4d
 8007d10:	7ff00000 	.word	0x7ff00000
 8007d14:	0800be32 	.word	0x0800be32
 8007d18:	0800be29 	.word	0x0800be29
 8007d1c:	0800bcad 	.word	0x0800bcad
 8007d20:	3ff80000 	.word	0x3ff80000
 8007d24:	0800bfb8 	.word	0x0800bfb8
 8007d28:	0800bea8 	.word	0x0800bea8
 8007d2c:	2501      	movs	r5, #1
 8007d2e:	2300      	movs	r3, #0
 8007d30:	9306      	str	r3, [sp, #24]
 8007d32:	9508      	str	r5, [sp, #32]
 8007d34:	f04f 33ff 	mov.w	r3, #4294967295
 8007d38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	2312      	movs	r3, #18
 8007d40:	e7b0      	b.n	8007ca4 <_dtoa_r+0x26c>
 8007d42:	2301      	movs	r3, #1
 8007d44:	9308      	str	r3, [sp, #32]
 8007d46:	e7f5      	b.n	8007d34 <_dtoa_r+0x2fc>
 8007d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d4e:	e7b8      	b.n	8007cc2 <_dtoa_r+0x28a>
 8007d50:	3101      	adds	r1, #1
 8007d52:	6041      	str	r1, [r0, #4]
 8007d54:	0052      	lsls	r2, r2, #1
 8007d56:	e7b8      	b.n	8007cca <_dtoa_r+0x292>
 8007d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d5a:	9a01      	ldr	r2, [sp, #4]
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	9b03      	ldr	r3, [sp, #12]
 8007d60:	2b0e      	cmp	r3, #14
 8007d62:	f200 809d 	bhi.w	8007ea0 <_dtoa_r+0x468>
 8007d66:	2d00      	cmp	r5, #0
 8007d68:	f000 809a 	beq.w	8007ea0 <_dtoa_r+0x468>
 8007d6c:	9b00      	ldr	r3, [sp, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	dd32      	ble.n	8007dd8 <_dtoa_r+0x3a0>
 8007d72:	4ab7      	ldr	r2, [pc, #732]	; (8008050 <_dtoa_r+0x618>)
 8007d74:	f003 030f 	and.w	r3, r3, #15
 8007d78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d80:	9b00      	ldr	r3, [sp, #0]
 8007d82:	05d8      	lsls	r0, r3, #23
 8007d84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007d88:	d516      	bpl.n	8007db8 <_dtoa_r+0x380>
 8007d8a:	4bb2      	ldr	r3, [pc, #712]	; (8008054 <_dtoa_r+0x61c>)
 8007d8c:	ec51 0b19 	vmov	r0, r1, d9
 8007d90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d94:	f7f8 fd82 	bl	800089c <__aeabi_ddiv>
 8007d98:	f007 070f 	and.w	r7, r7, #15
 8007d9c:	4682      	mov	sl, r0
 8007d9e:	468b      	mov	fp, r1
 8007da0:	2503      	movs	r5, #3
 8007da2:	4eac      	ldr	r6, [pc, #688]	; (8008054 <_dtoa_r+0x61c>)
 8007da4:	b957      	cbnz	r7, 8007dbc <_dtoa_r+0x384>
 8007da6:	4642      	mov	r2, r8
 8007da8:	464b      	mov	r3, r9
 8007daa:	4650      	mov	r0, sl
 8007dac:	4659      	mov	r1, fp
 8007dae:	f7f8 fd75 	bl	800089c <__aeabi_ddiv>
 8007db2:	4682      	mov	sl, r0
 8007db4:	468b      	mov	fp, r1
 8007db6:	e028      	b.n	8007e0a <_dtoa_r+0x3d2>
 8007db8:	2502      	movs	r5, #2
 8007dba:	e7f2      	b.n	8007da2 <_dtoa_r+0x36a>
 8007dbc:	07f9      	lsls	r1, r7, #31
 8007dbe:	d508      	bpl.n	8007dd2 <_dtoa_r+0x39a>
 8007dc0:	4640      	mov	r0, r8
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007dc8:	f7f8 fc3e 	bl	8000648 <__aeabi_dmul>
 8007dcc:	3501      	adds	r5, #1
 8007dce:	4680      	mov	r8, r0
 8007dd0:	4689      	mov	r9, r1
 8007dd2:	107f      	asrs	r7, r7, #1
 8007dd4:	3608      	adds	r6, #8
 8007dd6:	e7e5      	b.n	8007da4 <_dtoa_r+0x36c>
 8007dd8:	f000 809b 	beq.w	8007f12 <_dtoa_r+0x4da>
 8007ddc:	9b00      	ldr	r3, [sp, #0]
 8007dde:	4f9d      	ldr	r7, [pc, #628]	; (8008054 <_dtoa_r+0x61c>)
 8007de0:	425e      	negs	r6, r3
 8007de2:	4b9b      	ldr	r3, [pc, #620]	; (8008050 <_dtoa_r+0x618>)
 8007de4:	f006 020f 	and.w	r2, r6, #15
 8007de8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	ec51 0b19 	vmov	r0, r1, d9
 8007df4:	f7f8 fc28 	bl	8000648 <__aeabi_dmul>
 8007df8:	1136      	asrs	r6, r6, #4
 8007dfa:	4682      	mov	sl, r0
 8007dfc:	468b      	mov	fp, r1
 8007dfe:	2300      	movs	r3, #0
 8007e00:	2502      	movs	r5, #2
 8007e02:	2e00      	cmp	r6, #0
 8007e04:	d17a      	bne.n	8007efc <_dtoa_r+0x4c4>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1d3      	bne.n	8007db2 <_dtoa_r+0x37a>
 8007e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 8082 	beq.w	8007f16 <_dtoa_r+0x4de>
 8007e12:	4b91      	ldr	r3, [pc, #580]	; (8008058 <_dtoa_r+0x620>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	4650      	mov	r0, sl
 8007e18:	4659      	mov	r1, fp
 8007e1a:	f7f8 fe87 	bl	8000b2c <__aeabi_dcmplt>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d079      	beq.n	8007f16 <_dtoa_r+0x4de>
 8007e22:	9b03      	ldr	r3, [sp, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d076      	beq.n	8007f16 <_dtoa_r+0x4de>
 8007e28:	9b02      	ldr	r3, [sp, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	dd36      	ble.n	8007e9c <_dtoa_r+0x464>
 8007e2e:	9b00      	ldr	r3, [sp, #0]
 8007e30:	4650      	mov	r0, sl
 8007e32:	4659      	mov	r1, fp
 8007e34:	1e5f      	subs	r7, r3, #1
 8007e36:	2200      	movs	r2, #0
 8007e38:	4b88      	ldr	r3, [pc, #544]	; (800805c <_dtoa_r+0x624>)
 8007e3a:	f7f8 fc05 	bl	8000648 <__aeabi_dmul>
 8007e3e:	9e02      	ldr	r6, [sp, #8]
 8007e40:	4682      	mov	sl, r0
 8007e42:	468b      	mov	fp, r1
 8007e44:	3501      	adds	r5, #1
 8007e46:	4628      	mov	r0, r5
 8007e48:	f7f8 fb94 	bl	8000574 <__aeabi_i2d>
 8007e4c:	4652      	mov	r2, sl
 8007e4e:	465b      	mov	r3, fp
 8007e50:	f7f8 fbfa 	bl	8000648 <__aeabi_dmul>
 8007e54:	4b82      	ldr	r3, [pc, #520]	; (8008060 <_dtoa_r+0x628>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	f7f8 fa40 	bl	80002dc <__adddf3>
 8007e5c:	46d0      	mov	r8, sl
 8007e5e:	46d9      	mov	r9, fp
 8007e60:	4682      	mov	sl, r0
 8007e62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007e66:	2e00      	cmp	r6, #0
 8007e68:	d158      	bne.n	8007f1c <_dtoa_r+0x4e4>
 8007e6a:	4b7e      	ldr	r3, [pc, #504]	; (8008064 <_dtoa_r+0x62c>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	4640      	mov	r0, r8
 8007e70:	4649      	mov	r1, r9
 8007e72:	f7f8 fa31 	bl	80002d8 <__aeabi_dsub>
 8007e76:	4652      	mov	r2, sl
 8007e78:	465b      	mov	r3, fp
 8007e7a:	4680      	mov	r8, r0
 8007e7c:	4689      	mov	r9, r1
 8007e7e:	f7f8 fe73 	bl	8000b68 <__aeabi_dcmpgt>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	f040 8295 	bne.w	80083b2 <_dtoa_r+0x97a>
 8007e88:	4652      	mov	r2, sl
 8007e8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007e8e:	4640      	mov	r0, r8
 8007e90:	4649      	mov	r1, r9
 8007e92:	f7f8 fe4b 	bl	8000b2c <__aeabi_dcmplt>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	f040 8289 	bne.w	80083ae <_dtoa_r+0x976>
 8007e9c:	ec5b ab19 	vmov	sl, fp, d9
 8007ea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f2c0 8148 	blt.w	8008138 <_dtoa_r+0x700>
 8007ea8:	9a00      	ldr	r2, [sp, #0]
 8007eaa:	2a0e      	cmp	r2, #14
 8007eac:	f300 8144 	bgt.w	8008138 <_dtoa_r+0x700>
 8007eb0:	4b67      	ldr	r3, [pc, #412]	; (8008050 <_dtoa_r+0x618>)
 8007eb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f280 80d5 	bge.w	800806c <_dtoa_r+0x634>
 8007ec2:	9b03      	ldr	r3, [sp, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f300 80d1 	bgt.w	800806c <_dtoa_r+0x634>
 8007eca:	f040 826f 	bne.w	80083ac <_dtoa_r+0x974>
 8007ece:	4b65      	ldr	r3, [pc, #404]	; (8008064 <_dtoa_r+0x62c>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	4649      	mov	r1, r9
 8007ed6:	f7f8 fbb7 	bl	8000648 <__aeabi_dmul>
 8007eda:	4652      	mov	r2, sl
 8007edc:	465b      	mov	r3, fp
 8007ede:	f7f8 fe39 	bl	8000b54 <__aeabi_dcmpge>
 8007ee2:	9e03      	ldr	r6, [sp, #12]
 8007ee4:	4637      	mov	r7, r6
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	f040 8245 	bne.w	8008376 <_dtoa_r+0x93e>
 8007eec:	9d01      	ldr	r5, [sp, #4]
 8007eee:	2331      	movs	r3, #49	; 0x31
 8007ef0:	f805 3b01 	strb.w	r3, [r5], #1
 8007ef4:	9b00      	ldr	r3, [sp, #0]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	e240      	b.n	800837e <_dtoa_r+0x946>
 8007efc:	07f2      	lsls	r2, r6, #31
 8007efe:	d505      	bpl.n	8007f0c <_dtoa_r+0x4d4>
 8007f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f04:	f7f8 fba0 	bl	8000648 <__aeabi_dmul>
 8007f08:	3501      	adds	r5, #1
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	1076      	asrs	r6, r6, #1
 8007f0e:	3708      	adds	r7, #8
 8007f10:	e777      	b.n	8007e02 <_dtoa_r+0x3ca>
 8007f12:	2502      	movs	r5, #2
 8007f14:	e779      	b.n	8007e0a <_dtoa_r+0x3d2>
 8007f16:	9f00      	ldr	r7, [sp, #0]
 8007f18:	9e03      	ldr	r6, [sp, #12]
 8007f1a:	e794      	b.n	8007e46 <_dtoa_r+0x40e>
 8007f1c:	9901      	ldr	r1, [sp, #4]
 8007f1e:	4b4c      	ldr	r3, [pc, #304]	; (8008050 <_dtoa_r+0x618>)
 8007f20:	4431      	add	r1, r6
 8007f22:	910d      	str	r1, [sp, #52]	; 0x34
 8007f24:	9908      	ldr	r1, [sp, #32]
 8007f26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f2e:	2900      	cmp	r1, #0
 8007f30:	d043      	beq.n	8007fba <_dtoa_r+0x582>
 8007f32:	494d      	ldr	r1, [pc, #308]	; (8008068 <_dtoa_r+0x630>)
 8007f34:	2000      	movs	r0, #0
 8007f36:	f7f8 fcb1 	bl	800089c <__aeabi_ddiv>
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	465b      	mov	r3, fp
 8007f3e:	f7f8 f9cb 	bl	80002d8 <__aeabi_dsub>
 8007f42:	9d01      	ldr	r5, [sp, #4]
 8007f44:	4682      	mov	sl, r0
 8007f46:	468b      	mov	fp, r1
 8007f48:	4649      	mov	r1, r9
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	f7f8 fe2c 	bl	8000ba8 <__aeabi_d2iz>
 8007f50:	4606      	mov	r6, r0
 8007f52:	f7f8 fb0f 	bl	8000574 <__aeabi_i2d>
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4640      	mov	r0, r8
 8007f5c:	4649      	mov	r1, r9
 8007f5e:	f7f8 f9bb 	bl	80002d8 <__aeabi_dsub>
 8007f62:	3630      	adds	r6, #48	; 0x30
 8007f64:	f805 6b01 	strb.w	r6, [r5], #1
 8007f68:	4652      	mov	r2, sl
 8007f6a:	465b      	mov	r3, fp
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	4689      	mov	r9, r1
 8007f70:	f7f8 fddc 	bl	8000b2c <__aeabi_dcmplt>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d163      	bne.n	8008040 <_dtoa_r+0x608>
 8007f78:	4642      	mov	r2, r8
 8007f7a:	464b      	mov	r3, r9
 8007f7c:	4936      	ldr	r1, [pc, #216]	; (8008058 <_dtoa_r+0x620>)
 8007f7e:	2000      	movs	r0, #0
 8007f80:	f7f8 f9aa 	bl	80002d8 <__aeabi_dsub>
 8007f84:	4652      	mov	r2, sl
 8007f86:	465b      	mov	r3, fp
 8007f88:	f7f8 fdd0 	bl	8000b2c <__aeabi_dcmplt>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	f040 80b5 	bne.w	80080fc <_dtoa_r+0x6c4>
 8007f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f94:	429d      	cmp	r5, r3
 8007f96:	d081      	beq.n	8007e9c <_dtoa_r+0x464>
 8007f98:	4b30      	ldr	r3, [pc, #192]	; (800805c <_dtoa_r+0x624>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4650      	mov	r0, sl
 8007f9e:	4659      	mov	r1, fp
 8007fa0:	f7f8 fb52 	bl	8000648 <__aeabi_dmul>
 8007fa4:	4b2d      	ldr	r3, [pc, #180]	; (800805c <_dtoa_r+0x624>)
 8007fa6:	4682      	mov	sl, r0
 8007fa8:	468b      	mov	fp, r1
 8007faa:	4640      	mov	r0, r8
 8007fac:	4649      	mov	r1, r9
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f7f8 fb4a 	bl	8000648 <__aeabi_dmul>
 8007fb4:	4680      	mov	r8, r0
 8007fb6:	4689      	mov	r9, r1
 8007fb8:	e7c6      	b.n	8007f48 <_dtoa_r+0x510>
 8007fba:	4650      	mov	r0, sl
 8007fbc:	4659      	mov	r1, fp
 8007fbe:	f7f8 fb43 	bl	8000648 <__aeabi_dmul>
 8007fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fc4:	9d01      	ldr	r5, [sp, #4]
 8007fc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fc8:	4682      	mov	sl, r0
 8007fca:	468b      	mov	fp, r1
 8007fcc:	4649      	mov	r1, r9
 8007fce:	4640      	mov	r0, r8
 8007fd0:	f7f8 fdea 	bl	8000ba8 <__aeabi_d2iz>
 8007fd4:	4606      	mov	r6, r0
 8007fd6:	f7f8 facd 	bl	8000574 <__aeabi_i2d>
 8007fda:	3630      	adds	r6, #48	; 0x30
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	4640      	mov	r0, r8
 8007fe2:	4649      	mov	r1, r9
 8007fe4:	f7f8 f978 	bl	80002d8 <__aeabi_dsub>
 8007fe8:	f805 6b01 	strb.w	r6, [r5], #1
 8007fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fee:	429d      	cmp	r5, r3
 8007ff0:	4680      	mov	r8, r0
 8007ff2:	4689      	mov	r9, r1
 8007ff4:	f04f 0200 	mov.w	r2, #0
 8007ff8:	d124      	bne.n	8008044 <_dtoa_r+0x60c>
 8007ffa:	4b1b      	ldr	r3, [pc, #108]	; (8008068 <_dtoa_r+0x630>)
 8007ffc:	4650      	mov	r0, sl
 8007ffe:	4659      	mov	r1, fp
 8008000:	f7f8 f96c 	bl	80002dc <__adddf3>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	4640      	mov	r0, r8
 800800a:	4649      	mov	r1, r9
 800800c:	f7f8 fdac 	bl	8000b68 <__aeabi_dcmpgt>
 8008010:	2800      	cmp	r0, #0
 8008012:	d173      	bne.n	80080fc <_dtoa_r+0x6c4>
 8008014:	4652      	mov	r2, sl
 8008016:	465b      	mov	r3, fp
 8008018:	4913      	ldr	r1, [pc, #76]	; (8008068 <_dtoa_r+0x630>)
 800801a:	2000      	movs	r0, #0
 800801c:	f7f8 f95c 	bl	80002d8 <__aeabi_dsub>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4640      	mov	r0, r8
 8008026:	4649      	mov	r1, r9
 8008028:	f7f8 fd80 	bl	8000b2c <__aeabi_dcmplt>
 800802c:	2800      	cmp	r0, #0
 800802e:	f43f af35 	beq.w	8007e9c <_dtoa_r+0x464>
 8008032:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008034:	1e6b      	subs	r3, r5, #1
 8008036:	930f      	str	r3, [sp, #60]	; 0x3c
 8008038:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800803c:	2b30      	cmp	r3, #48	; 0x30
 800803e:	d0f8      	beq.n	8008032 <_dtoa_r+0x5fa>
 8008040:	9700      	str	r7, [sp, #0]
 8008042:	e049      	b.n	80080d8 <_dtoa_r+0x6a0>
 8008044:	4b05      	ldr	r3, [pc, #20]	; (800805c <_dtoa_r+0x624>)
 8008046:	f7f8 faff 	bl	8000648 <__aeabi_dmul>
 800804a:	4680      	mov	r8, r0
 800804c:	4689      	mov	r9, r1
 800804e:	e7bd      	b.n	8007fcc <_dtoa_r+0x594>
 8008050:	0800bfb8 	.word	0x0800bfb8
 8008054:	0800bf90 	.word	0x0800bf90
 8008058:	3ff00000 	.word	0x3ff00000
 800805c:	40240000 	.word	0x40240000
 8008060:	401c0000 	.word	0x401c0000
 8008064:	40140000 	.word	0x40140000
 8008068:	3fe00000 	.word	0x3fe00000
 800806c:	9d01      	ldr	r5, [sp, #4]
 800806e:	4656      	mov	r6, sl
 8008070:	465f      	mov	r7, fp
 8008072:	4642      	mov	r2, r8
 8008074:	464b      	mov	r3, r9
 8008076:	4630      	mov	r0, r6
 8008078:	4639      	mov	r1, r7
 800807a:	f7f8 fc0f 	bl	800089c <__aeabi_ddiv>
 800807e:	f7f8 fd93 	bl	8000ba8 <__aeabi_d2iz>
 8008082:	4682      	mov	sl, r0
 8008084:	f7f8 fa76 	bl	8000574 <__aeabi_i2d>
 8008088:	4642      	mov	r2, r8
 800808a:	464b      	mov	r3, r9
 800808c:	f7f8 fadc 	bl	8000648 <__aeabi_dmul>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4630      	mov	r0, r6
 8008096:	4639      	mov	r1, r7
 8008098:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800809c:	f7f8 f91c 	bl	80002d8 <__aeabi_dsub>
 80080a0:	f805 6b01 	strb.w	r6, [r5], #1
 80080a4:	9e01      	ldr	r6, [sp, #4]
 80080a6:	9f03      	ldr	r7, [sp, #12]
 80080a8:	1bae      	subs	r6, r5, r6
 80080aa:	42b7      	cmp	r7, r6
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	d135      	bne.n	800811e <_dtoa_r+0x6e6>
 80080b2:	f7f8 f913 	bl	80002dc <__adddf3>
 80080b6:	4642      	mov	r2, r8
 80080b8:	464b      	mov	r3, r9
 80080ba:	4606      	mov	r6, r0
 80080bc:	460f      	mov	r7, r1
 80080be:	f7f8 fd53 	bl	8000b68 <__aeabi_dcmpgt>
 80080c2:	b9d0      	cbnz	r0, 80080fa <_dtoa_r+0x6c2>
 80080c4:	4642      	mov	r2, r8
 80080c6:	464b      	mov	r3, r9
 80080c8:	4630      	mov	r0, r6
 80080ca:	4639      	mov	r1, r7
 80080cc:	f7f8 fd24 	bl	8000b18 <__aeabi_dcmpeq>
 80080d0:	b110      	cbz	r0, 80080d8 <_dtoa_r+0x6a0>
 80080d2:	f01a 0f01 	tst.w	sl, #1
 80080d6:	d110      	bne.n	80080fa <_dtoa_r+0x6c2>
 80080d8:	4620      	mov	r0, r4
 80080da:	ee18 1a10 	vmov	r1, s16
 80080de:	f000 fe75 	bl	8008dcc <_Bfree>
 80080e2:	2300      	movs	r3, #0
 80080e4:	9800      	ldr	r0, [sp, #0]
 80080e6:	702b      	strb	r3, [r5, #0]
 80080e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080ea:	3001      	adds	r0, #1
 80080ec:	6018      	str	r0, [r3, #0]
 80080ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f43f acf1 	beq.w	8007ad8 <_dtoa_r+0xa0>
 80080f6:	601d      	str	r5, [r3, #0]
 80080f8:	e4ee      	b.n	8007ad8 <_dtoa_r+0xa0>
 80080fa:	9f00      	ldr	r7, [sp, #0]
 80080fc:	462b      	mov	r3, r5
 80080fe:	461d      	mov	r5, r3
 8008100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008104:	2a39      	cmp	r2, #57	; 0x39
 8008106:	d106      	bne.n	8008116 <_dtoa_r+0x6de>
 8008108:	9a01      	ldr	r2, [sp, #4]
 800810a:	429a      	cmp	r2, r3
 800810c:	d1f7      	bne.n	80080fe <_dtoa_r+0x6c6>
 800810e:	9901      	ldr	r1, [sp, #4]
 8008110:	2230      	movs	r2, #48	; 0x30
 8008112:	3701      	adds	r7, #1
 8008114:	700a      	strb	r2, [r1, #0]
 8008116:	781a      	ldrb	r2, [r3, #0]
 8008118:	3201      	adds	r2, #1
 800811a:	701a      	strb	r2, [r3, #0]
 800811c:	e790      	b.n	8008040 <_dtoa_r+0x608>
 800811e:	4ba6      	ldr	r3, [pc, #664]	; (80083b8 <_dtoa_r+0x980>)
 8008120:	2200      	movs	r2, #0
 8008122:	f7f8 fa91 	bl	8000648 <__aeabi_dmul>
 8008126:	2200      	movs	r2, #0
 8008128:	2300      	movs	r3, #0
 800812a:	4606      	mov	r6, r0
 800812c:	460f      	mov	r7, r1
 800812e:	f7f8 fcf3 	bl	8000b18 <__aeabi_dcmpeq>
 8008132:	2800      	cmp	r0, #0
 8008134:	d09d      	beq.n	8008072 <_dtoa_r+0x63a>
 8008136:	e7cf      	b.n	80080d8 <_dtoa_r+0x6a0>
 8008138:	9a08      	ldr	r2, [sp, #32]
 800813a:	2a00      	cmp	r2, #0
 800813c:	f000 80d7 	beq.w	80082ee <_dtoa_r+0x8b6>
 8008140:	9a06      	ldr	r2, [sp, #24]
 8008142:	2a01      	cmp	r2, #1
 8008144:	f300 80ba 	bgt.w	80082bc <_dtoa_r+0x884>
 8008148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800814a:	2a00      	cmp	r2, #0
 800814c:	f000 80b2 	beq.w	80082b4 <_dtoa_r+0x87c>
 8008150:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008154:	9e07      	ldr	r6, [sp, #28]
 8008156:	9d04      	ldr	r5, [sp, #16]
 8008158:	9a04      	ldr	r2, [sp, #16]
 800815a:	441a      	add	r2, r3
 800815c:	9204      	str	r2, [sp, #16]
 800815e:	9a05      	ldr	r2, [sp, #20]
 8008160:	2101      	movs	r1, #1
 8008162:	441a      	add	r2, r3
 8008164:	4620      	mov	r0, r4
 8008166:	9205      	str	r2, [sp, #20]
 8008168:	f000 ff32 	bl	8008fd0 <__i2b>
 800816c:	4607      	mov	r7, r0
 800816e:	2d00      	cmp	r5, #0
 8008170:	dd0c      	ble.n	800818c <_dtoa_r+0x754>
 8008172:	9b05      	ldr	r3, [sp, #20]
 8008174:	2b00      	cmp	r3, #0
 8008176:	dd09      	ble.n	800818c <_dtoa_r+0x754>
 8008178:	42ab      	cmp	r3, r5
 800817a:	9a04      	ldr	r2, [sp, #16]
 800817c:	bfa8      	it	ge
 800817e:	462b      	movge	r3, r5
 8008180:	1ad2      	subs	r2, r2, r3
 8008182:	9204      	str	r2, [sp, #16]
 8008184:	9a05      	ldr	r2, [sp, #20]
 8008186:	1aed      	subs	r5, r5, r3
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	9305      	str	r3, [sp, #20]
 800818c:	9b07      	ldr	r3, [sp, #28]
 800818e:	b31b      	cbz	r3, 80081d8 <_dtoa_r+0x7a0>
 8008190:	9b08      	ldr	r3, [sp, #32]
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 80af 	beq.w	80082f6 <_dtoa_r+0x8be>
 8008198:	2e00      	cmp	r6, #0
 800819a:	dd13      	ble.n	80081c4 <_dtoa_r+0x78c>
 800819c:	4639      	mov	r1, r7
 800819e:	4632      	mov	r2, r6
 80081a0:	4620      	mov	r0, r4
 80081a2:	f000 ffd5 	bl	8009150 <__pow5mult>
 80081a6:	ee18 2a10 	vmov	r2, s16
 80081aa:	4601      	mov	r1, r0
 80081ac:	4607      	mov	r7, r0
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 ff24 	bl	8008ffc <__multiply>
 80081b4:	ee18 1a10 	vmov	r1, s16
 80081b8:	4680      	mov	r8, r0
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 fe06 	bl	8008dcc <_Bfree>
 80081c0:	ee08 8a10 	vmov	s16, r8
 80081c4:	9b07      	ldr	r3, [sp, #28]
 80081c6:	1b9a      	subs	r2, r3, r6
 80081c8:	d006      	beq.n	80081d8 <_dtoa_r+0x7a0>
 80081ca:	ee18 1a10 	vmov	r1, s16
 80081ce:	4620      	mov	r0, r4
 80081d0:	f000 ffbe 	bl	8009150 <__pow5mult>
 80081d4:	ee08 0a10 	vmov	s16, r0
 80081d8:	2101      	movs	r1, #1
 80081da:	4620      	mov	r0, r4
 80081dc:	f000 fef8 	bl	8008fd0 <__i2b>
 80081e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	4606      	mov	r6, r0
 80081e6:	f340 8088 	ble.w	80082fa <_dtoa_r+0x8c2>
 80081ea:	461a      	mov	r2, r3
 80081ec:	4601      	mov	r1, r0
 80081ee:	4620      	mov	r0, r4
 80081f0:	f000 ffae 	bl	8009150 <__pow5mult>
 80081f4:	9b06      	ldr	r3, [sp, #24]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	4606      	mov	r6, r0
 80081fa:	f340 8081 	ble.w	8008300 <_dtoa_r+0x8c8>
 80081fe:	f04f 0800 	mov.w	r8, #0
 8008202:	6933      	ldr	r3, [r6, #16]
 8008204:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008208:	6918      	ldr	r0, [r3, #16]
 800820a:	f000 fe91 	bl	8008f30 <__hi0bits>
 800820e:	f1c0 0020 	rsb	r0, r0, #32
 8008212:	9b05      	ldr	r3, [sp, #20]
 8008214:	4418      	add	r0, r3
 8008216:	f010 001f 	ands.w	r0, r0, #31
 800821a:	f000 8092 	beq.w	8008342 <_dtoa_r+0x90a>
 800821e:	f1c0 0320 	rsb	r3, r0, #32
 8008222:	2b04      	cmp	r3, #4
 8008224:	f340 808a 	ble.w	800833c <_dtoa_r+0x904>
 8008228:	f1c0 001c 	rsb	r0, r0, #28
 800822c:	9b04      	ldr	r3, [sp, #16]
 800822e:	4403      	add	r3, r0
 8008230:	9304      	str	r3, [sp, #16]
 8008232:	9b05      	ldr	r3, [sp, #20]
 8008234:	4403      	add	r3, r0
 8008236:	4405      	add	r5, r0
 8008238:	9305      	str	r3, [sp, #20]
 800823a:	9b04      	ldr	r3, [sp, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	dd07      	ble.n	8008250 <_dtoa_r+0x818>
 8008240:	ee18 1a10 	vmov	r1, s16
 8008244:	461a      	mov	r2, r3
 8008246:	4620      	mov	r0, r4
 8008248:	f000 ffdc 	bl	8009204 <__lshift>
 800824c:	ee08 0a10 	vmov	s16, r0
 8008250:	9b05      	ldr	r3, [sp, #20]
 8008252:	2b00      	cmp	r3, #0
 8008254:	dd05      	ble.n	8008262 <_dtoa_r+0x82a>
 8008256:	4631      	mov	r1, r6
 8008258:	461a      	mov	r2, r3
 800825a:	4620      	mov	r0, r4
 800825c:	f000 ffd2 	bl	8009204 <__lshift>
 8008260:	4606      	mov	r6, r0
 8008262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008264:	2b00      	cmp	r3, #0
 8008266:	d06e      	beq.n	8008346 <_dtoa_r+0x90e>
 8008268:	ee18 0a10 	vmov	r0, s16
 800826c:	4631      	mov	r1, r6
 800826e:	f001 f839 	bl	80092e4 <__mcmp>
 8008272:	2800      	cmp	r0, #0
 8008274:	da67      	bge.n	8008346 <_dtoa_r+0x90e>
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	3b01      	subs	r3, #1
 800827a:	ee18 1a10 	vmov	r1, s16
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	220a      	movs	r2, #10
 8008282:	2300      	movs	r3, #0
 8008284:	4620      	mov	r0, r4
 8008286:	f000 fdc3 	bl	8008e10 <__multadd>
 800828a:	9b08      	ldr	r3, [sp, #32]
 800828c:	ee08 0a10 	vmov	s16, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 81b1 	beq.w	80085f8 <_dtoa_r+0xbc0>
 8008296:	2300      	movs	r3, #0
 8008298:	4639      	mov	r1, r7
 800829a:	220a      	movs	r2, #10
 800829c:	4620      	mov	r0, r4
 800829e:	f000 fdb7 	bl	8008e10 <__multadd>
 80082a2:	9b02      	ldr	r3, [sp, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	4607      	mov	r7, r0
 80082a8:	f300 808e 	bgt.w	80083c8 <_dtoa_r+0x990>
 80082ac:	9b06      	ldr	r3, [sp, #24]
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	dc51      	bgt.n	8008356 <_dtoa_r+0x91e>
 80082b2:	e089      	b.n	80083c8 <_dtoa_r+0x990>
 80082b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082ba:	e74b      	b.n	8008154 <_dtoa_r+0x71c>
 80082bc:	9b03      	ldr	r3, [sp, #12]
 80082be:	1e5e      	subs	r6, r3, #1
 80082c0:	9b07      	ldr	r3, [sp, #28]
 80082c2:	42b3      	cmp	r3, r6
 80082c4:	bfbf      	itttt	lt
 80082c6:	9b07      	ldrlt	r3, [sp, #28]
 80082c8:	9607      	strlt	r6, [sp, #28]
 80082ca:	1af2      	sublt	r2, r6, r3
 80082cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80082ce:	bfb6      	itet	lt
 80082d0:	189b      	addlt	r3, r3, r2
 80082d2:	1b9e      	subge	r6, r3, r6
 80082d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80082d6:	9b03      	ldr	r3, [sp, #12]
 80082d8:	bfb8      	it	lt
 80082da:	2600      	movlt	r6, #0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	bfb7      	itett	lt
 80082e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80082e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80082e8:	1a9d      	sublt	r5, r3, r2
 80082ea:	2300      	movlt	r3, #0
 80082ec:	e734      	b.n	8008158 <_dtoa_r+0x720>
 80082ee:	9e07      	ldr	r6, [sp, #28]
 80082f0:	9d04      	ldr	r5, [sp, #16]
 80082f2:	9f08      	ldr	r7, [sp, #32]
 80082f4:	e73b      	b.n	800816e <_dtoa_r+0x736>
 80082f6:	9a07      	ldr	r2, [sp, #28]
 80082f8:	e767      	b.n	80081ca <_dtoa_r+0x792>
 80082fa:	9b06      	ldr	r3, [sp, #24]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	dc18      	bgt.n	8008332 <_dtoa_r+0x8fa>
 8008300:	f1ba 0f00 	cmp.w	sl, #0
 8008304:	d115      	bne.n	8008332 <_dtoa_r+0x8fa>
 8008306:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800830a:	b993      	cbnz	r3, 8008332 <_dtoa_r+0x8fa>
 800830c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008310:	0d1b      	lsrs	r3, r3, #20
 8008312:	051b      	lsls	r3, r3, #20
 8008314:	b183      	cbz	r3, 8008338 <_dtoa_r+0x900>
 8008316:	9b04      	ldr	r3, [sp, #16]
 8008318:	3301      	adds	r3, #1
 800831a:	9304      	str	r3, [sp, #16]
 800831c:	9b05      	ldr	r3, [sp, #20]
 800831e:	3301      	adds	r3, #1
 8008320:	9305      	str	r3, [sp, #20]
 8008322:	f04f 0801 	mov.w	r8, #1
 8008326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008328:	2b00      	cmp	r3, #0
 800832a:	f47f af6a 	bne.w	8008202 <_dtoa_r+0x7ca>
 800832e:	2001      	movs	r0, #1
 8008330:	e76f      	b.n	8008212 <_dtoa_r+0x7da>
 8008332:	f04f 0800 	mov.w	r8, #0
 8008336:	e7f6      	b.n	8008326 <_dtoa_r+0x8ee>
 8008338:	4698      	mov	r8, r3
 800833a:	e7f4      	b.n	8008326 <_dtoa_r+0x8ee>
 800833c:	f43f af7d 	beq.w	800823a <_dtoa_r+0x802>
 8008340:	4618      	mov	r0, r3
 8008342:	301c      	adds	r0, #28
 8008344:	e772      	b.n	800822c <_dtoa_r+0x7f4>
 8008346:	9b03      	ldr	r3, [sp, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	dc37      	bgt.n	80083bc <_dtoa_r+0x984>
 800834c:	9b06      	ldr	r3, [sp, #24]
 800834e:	2b02      	cmp	r3, #2
 8008350:	dd34      	ble.n	80083bc <_dtoa_r+0x984>
 8008352:	9b03      	ldr	r3, [sp, #12]
 8008354:	9302      	str	r3, [sp, #8]
 8008356:	9b02      	ldr	r3, [sp, #8]
 8008358:	b96b      	cbnz	r3, 8008376 <_dtoa_r+0x93e>
 800835a:	4631      	mov	r1, r6
 800835c:	2205      	movs	r2, #5
 800835e:	4620      	mov	r0, r4
 8008360:	f000 fd56 	bl	8008e10 <__multadd>
 8008364:	4601      	mov	r1, r0
 8008366:	4606      	mov	r6, r0
 8008368:	ee18 0a10 	vmov	r0, s16
 800836c:	f000 ffba 	bl	80092e4 <__mcmp>
 8008370:	2800      	cmp	r0, #0
 8008372:	f73f adbb 	bgt.w	8007eec <_dtoa_r+0x4b4>
 8008376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008378:	9d01      	ldr	r5, [sp, #4]
 800837a:	43db      	mvns	r3, r3
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	f04f 0800 	mov.w	r8, #0
 8008382:	4631      	mov	r1, r6
 8008384:	4620      	mov	r0, r4
 8008386:	f000 fd21 	bl	8008dcc <_Bfree>
 800838a:	2f00      	cmp	r7, #0
 800838c:	f43f aea4 	beq.w	80080d8 <_dtoa_r+0x6a0>
 8008390:	f1b8 0f00 	cmp.w	r8, #0
 8008394:	d005      	beq.n	80083a2 <_dtoa_r+0x96a>
 8008396:	45b8      	cmp	r8, r7
 8008398:	d003      	beq.n	80083a2 <_dtoa_r+0x96a>
 800839a:	4641      	mov	r1, r8
 800839c:	4620      	mov	r0, r4
 800839e:	f000 fd15 	bl	8008dcc <_Bfree>
 80083a2:	4639      	mov	r1, r7
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 fd11 	bl	8008dcc <_Bfree>
 80083aa:	e695      	b.n	80080d8 <_dtoa_r+0x6a0>
 80083ac:	2600      	movs	r6, #0
 80083ae:	4637      	mov	r7, r6
 80083b0:	e7e1      	b.n	8008376 <_dtoa_r+0x93e>
 80083b2:	9700      	str	r7, [sp, #0]
 80083b4:	4637      	mov	r7, r6
 80083b6:	e599      	b.n	8007eec <_dtoa_r+0x4b4>
 80083b8:	40240000 	.word	0x40240000
 80083bc:	9b08      	ldr	r3, [sp, #32]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f000 80ca 	beq.w	8008558 <_dtoa_r+0xb20>
 80083c4:	9b03      	ldr	r3, [sp, #12]
 80083c6:	9302      	str	r3, [sp, #8]
 80083c8:	2d00      	cmp	r5, #0
 80083ca:	dd05      	ble.n	80083d8 <_dtoa_r+0x9a0>
 80083cc:	4639      	mov	r1, r7
 80083ce:	462a      	mov	r2, r5
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 ff17 	bl	8009204 <__lshift>
 80083d6:	4607      	mov	r7, r0
 80083d8:	f1b8 0f00 	cmp.w	r8, #0
 80083dc:	d05b      	beq.n	8008496 <_dtoa_r+0xa5e>
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	4620      	mov	r0, r4
 80083e2:	f000 fcb3 	bl	8008d4c <_Balloc>
 80083e6:	4605      	mov	r5, r0
 80083e8:	b928      	cbnz	r0, 80083f6 <_dtoa_r+0x9be>
 80083ea:	4b87      	ldr	r3, [pc, #540]	; (8008608 <_dtoa_r+0xbd0>)
 80083ec:	4602      	mov	r2, r0
 80083ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80083f2:	f7ff bb3b 	b.w	8007a6c <_dtoa_r+0x34>
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	3202      	adds	r2, #2
 80083fa:	0092      	lsls	r2, r2, #2
 80083fc:	f107 010c 	add.w	r1, r7, #12
 8008400:	300c      	adds	r0, #12
 8008402:	f000 fc95 	bl	8008d30 <memcpy>
 8008406:	2201      	movs	r2, #1
 8008408:	4629      	mov	r1, r5
 800840a:	4620      	mov	r0, r4
 800840c:	f000 fefa 	bl	8009204 <__lshift>
 8008410:	9b01      	ldr	r3, [sp, #4]
 8008412:	f103 0901 	add.w	r9, r3, #1
 8008416:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800841a:	4413      	add	r3, r2
 800841c:	9305      	str	r3, [sp, #20]
 800841e:	f00a 0301 	and.w	r3, sl, #1
 8008422:	46b8      	mov	r8, r7
 8008424:	9304      	str	r3, [sp, #16]
 8008426:	4607      	mov	r7, r0
 8008428:	4631      	mov	r1, r6
 800842a:	ee18 0a10 	vmov	r0, s16
 800842e:	f7ff fa77 	bl	8007920 <quorem>
 8008432:	4641      	mov	r1, r8
 8008434:	9002      	str	r0, [sp, #8]
 8008436:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800843a:	ee18 0a10 	vmov	r0, s16
 800843e:	f000 ff51 	bl	80092e4 <__mcmp>
 8008442:	463a      	mov	r2, r7
 8008444:	9003      	str	r0, [sp, #12]
 8008446:	4631      	mov	r1, r6
 8008448:	4620      	mov	r0, r4
 800844a:	f000 ff67 	bl	800931c <__mdiff>
 800844e:	68c2      	ldr	r2, [r0, #12]
 8008450:	f109 3bff 	add.w	fp, r9, #4294967295
 8008454:	4605      	mov	r5, r0
 8008456:	bb02      	cbnz	r2, 800849a <_dtoa_r+0xa62>
 8008458:	4601      	mov	r1, r0
 800845a:	ee18 0a10 	vmov	r0, s16
 800845e:	f000 ff41 	bl	80092e4 <__mcmp>
 8008462:	4602      	mov	r2, r0
 8008464:	4629      	mov	r1, r5
 8008466:	4620      	mov	r0, r4
 8008468:	9207      	str	r2, [sp, #28]
 800846a:	f000 fcaf 	bl	8008dcc <_Bfree>
 800846e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008472:	ea43 0102 	orr.w	r1, r3, r2
 8008476:	9b04      	ldr	r3, [sp, #16]
 8008478:	430b      	orrs	r3, r1
 800847a:	464d      	mov	r5, r9
 800847c:	d10f      	bne.n	800849e <_dtoa_r+0xa66>
 800847e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008482:	d02a      	beq.n	80084da <_dtoa_r+0xaa2>
 8008484:	9b03      	ldr	r3, [sp, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	dd02      	ble.n	8008490 <_dtoa_r+0xa58>
 800848a:	9b02      	ldr	r3, [sp, #8]
 800848c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008490:	f88b a000 	strb.w	sl, [fp]
 8008494:	e775      	b.n	8008382 <_dtoa_r+0x94a>
 8008496:	4638      	mov	r0, r7
 8008498:	e7ba      	b.n	8008410 <_dtoa_r+0x9d8>
 800849a:	2201      	movs	r2, #1
 800849c:	e7e2      	b.n	8008464 <_dtoa_r+0xa2c>
 800849e:	9b03      	ldr	r3, [sp, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	db04      	blt.n	80084ae <_dtoa_r+0xa76>
 80084a4:	9906      	ldr	r1, [sp, #24]
 80084a6:	430b      	orrs	r3, r1
 80084a8:	9904      	ldr	r1, [sp, #16]
 80084aa:	430b      	orrs	r3, r1
 80084ac:	d122      	bne.n	80084f4 <_dtoa_r+0xabc>
 80084ae:	2a00      	cmp	r2, #0
 80084b0:	ddee      	ble.n	8008490 <_dtoa_r+0xa58>
 80084b2:	ee18 1a10 	vmov	r1, s16
 80084b6:	2201      	movs	r2, #1
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 fea3 	bl	8009204 <__lshift>
 80084be:	4631      	mov	r1, r6
 80084c0:	ee08 0a10 	vmov	s16, r0
 80084c4:	f000 ff0e 	bl	80092e4 <__mcmp>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	dc03      	bgt.n	80084d4 <_dtoa_r+0xa9c>
 80084cc:	d1e0      	bne.n	8008490 <_dtoa_r+0xa58>
 80084ce:	f01a 0f01 	tst.w	sl, #1
 80084d2:	d0dd      	beq.n	8008490 <_dtoa_r+0xa58>
 80084d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084d8:	d1d7      	bne.n	800848a <_dtoa_r+0xa52>
 80084da:	2339      	movs	r3, #57	; 0x39
 80084dc:	f88b 3000 	strb.w	r3, [fp]
 80084e0:	462b      	mov	r3, r5
 80084e2:	461d      	mov	r5, r3
 80084e4:	3b01      	subs	r3, #1
 80084e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80084ea:	2a39      	cmp	r2, #57	; 0x39
 80084ec:	d071      	beq.n	80085d2 <_dtoa_r+0xb9a>
 80084ee:	3201      	adds	r2, #1
 80084f0:	701a      	strb	r2, [r3, #0]
 80084f2:	e746      	b.n	8008382 <_dtoa_r+0x94a>
 80084f4:	2a00      	cmp	r2, #0
 80084f6:	dd07      	ble.n	8008508 <_dtoa_r+0xad0>
 80084f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084fc:	d0ed      	beq.n	80084da <_dtoa_r+0xaa2>
 80084fe:	f10a 0301 	add.w	r3, sl, #1
 8008502:	f88b 3000 	strb.w	r3, [fp]
 8008506:	e73c      	b.n	8008382 <_dtoa_r+0x94a>
 8008508:	9b05      	ldr	r3, [sp, #20]
 800850a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800850e:	4599      	cmp	r9, r3
 8008510:	d047      	beq.n	80085a2 <_dtoa_r+0xb6a>
 8008512:	ee18 1a10 	vmov	r1, s16
 8008516:	2300      	movs	r3, #0
 8008518:	220a      	movs	r2, #10
 800851a:	4620      	mov	r0, r4
 800851c:	f000 fc78 	bl	8008e10 <__multadd>
 8008520:	45b8      	cmp	r8, r7
 8008522:	ee08 0a10 	vmov	s16, r0
 8008526:	f04f 0300 	mov.w	r3, #0
 800852a:	f04f 020a 	mov.w	r2, #10
 800852e:	4641      	mov	r1, r8
 8008530:	4620      	mov	r0, r4
 8008532:	d106      	bne.n	8008542 <_dtoa_r+0xb0a>
 8008534:	f000 fc6c 	bl	8008e10 <__multadd>
 8008538:	4680      	mov	r8, r0
 800853a:	4607      	mov	r7, r0
 800853c:	f109 0901 	add.w	r9, r9, #1
 8008540:	e772      	b.n	8008428 <_dtoa_r+0x9f0>
 8008542:	f000 fc65 	bl	8008e10 <__multadd>
 8008546:	4639      	mov	r1, r7
 8008548:	4680      	mov	r8, r0
 800854a:	2300      	movs	r3, #0
 800854c:	220a      	movs	r2, #10
 800854e:	4620      	mov	r0, r4
 8008550:	f000 fc5e 	bl	8008e10 <__multadd>
 8008554:	4607      	mov	r7, r0
 8008556:	e7f1      	b.n	800853c <_dtoa_r+0xb04>
 8008558:	9b03      	ldr	r3, [sp, #12]
 800855a:	9302      	str	r3, [sp, #8]
 800855c:	9d01      	ldr	r5, [sp, #4]
 800855e:	ee18 0a10 	vmov	r0, s16
 8008562:	4631      	mov	r1, r6
 8008564:	f7ff f9dc 	bl	8007920 <quorem>
 8008568:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800856c:	9b01      	ldr	r3, [sp, #4]
 800856e:	f805 ab01 	strb.w	sl, [r5], #1
 8008572:	1aea      	subs	r2, r5, r3
 8008574:	9b02      	ldr	r3, [sp, #8]
 8008576:	4293      	cmp	r3, r2
 8008578:	dd09      	ble.n	800858e <_dtoa_r+0xb56>
 800857a:	ee18 1a10 	vmov	r1, s16
 800857e:	2300      	movs	r3, #0
 8008580:	220a      	movs	r2, #10
 8008582:	4620      	mov	r0, r4
 8008584:	f000 fc44 	bl	8008e10 <__multadd>
 8008588:	ee08 0a10 	vmov	s16, r0
 800858c:	e7e7      	b.n	800855e <_dtoa_r+0xb26>
 800858e:	9b02      	ldr	r3, [sp, #8]
 8008590:	2b00      	cmp	r3, #0
 8008592:	bfc8      	it	gt
 8008594:	461d      	movgt	r5, r3
 8008596:	9b01      	ldr	r3, [sp, #4]
 8008598:	bfd8      	it	le
 800859a:	2501      	movle	r5, #1
 800859c:	441d      	add	r5, r3
 800859e:	f04f 0800 	mov.w	r8, #0
 80085a2:	ee18 1a10 	vmov	r1, s16
 80085a6:	2201      	movs	r2, #1
 80085a8:	4620      	mov	r0, r4
 80085aa:	f000 fe2b 	bl	8009204 <__lshift>
 80085ae:	4631      	mov	r1, r6
 80085b0:	ee08 0a10 	vmov	s16, r0
 80085b4:	f000 fe96 	bl	80092e4 <__mcmp>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	dc91      	bgt.n	80084e0 <_dtoa_r+0xaa8>
 80085bc:	d102      	bne.n	80085c4 <_dtoa_r+0xb8c>
 80085be:	f01a 0f01 	tst.w	sl, #1
 80085c2:	d18d      	bne.n	80084e0 <_dtoa_r+0xaa8>
 80085c4:	462b      	mov	r3, r5
 80085c6:	461d      	mov	r5, r3
 80085c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085cc:	2a30      	cmp	r2, #48	; 0x30
 80085ce:	d0fa      	beq.n	80085c6 <_dtoa_r+0xb8e>
 80085d0:	e6d7      	b.n	8008382 <_dtoa_r+0x94a>
 80085d2:	9a01      	ldr	r2, [sp, #4]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d184      	bne.n	80084e2 <_dtoa_r+0xaaa>
 80085d8:	9b00      	ldr	r3, [sp, #0]
 80085da:	3301      	adds	r3, #1
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	2331      	movs	r3, #49	; 0x31
 80085e0:	7013      	strb	r3, [r2, #0]
 80085e2:	e6ce      	b.n	8008382 <_dtoa_r+0x94a>
 80085e4:	4b09      	ldr	r3, [pc, #36]	; (800860c <_dtoa_r+0xbd4>)
 80085e6:	f7ff ba95 	b.w	8007b14 <_dtoa_r+0xdc>
 80085ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f47f aa6e 	bne.w	8007ace <_dtoa_r+0x96>
 80085f2:	4b07      	ldr	r3, [pc, #28]	; (8008610 <_dtoa_r+0xbd8>)
 80085f4:	f7ff ba8e 	b.w	8007b14 <_dtoa_r+0xdc>
 80085f8:	9b02      	ldr	r3, [sp, #8]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	dcae      	bgt.n	800855c <_dtoa_r+0xb24>
 80085fe:	9b06      	ldr	r3, [sp, #24]
 8008600:	2b02      	cmp	r3, #2
 8008602:	f73f aea8 	bgt.w	8008356 <_dtoa_r+0x91e>
 8008606:	e7a9      	b.n	800855c <_dtoa_r+0xb24>
 8008608:	0800bea8 	.word	0x0800bea8
 800860c:	0800bcac 	.word	0x0800bcac
 8008610:	0800be29 	.word	0x0800be29

08008614 <rshift>:
 8008614:	6903      	ldr	r3, [r0, #16]
 8008616:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800861a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800861e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008622:	f100 0414 	add.w	r4, r0, #20
 8008626:	dd45      	ble.n	80086b4 <rshift+0xa0>
 8008628:	f011 011f 	ands.w	r1, r1, #31
 800862c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008630:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008634:	d10c      	bne.n	8008650 <rshift+0x3c>
 8008636:	f100 0710 	add.w	r7, r0, #16
 800863a:	4629      	mov	r1, r5
 800863c:	42b1      	cmp	r1, r6
 800863e:	d334      	bcc.n	80086aa <rshift+0x96>
 8008640:	1a9b      	subs	r3, r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	1eea      	subs	r2, r5, #3
 8008646:	4296      	cmp	r6, r2
 8008648:	bf38      	it	cc
 800864a:	2300      	movcc	r3, #0
 800864c:	4423      	add	r3, r4
 800864e:	e015      	b.n	800867c <rshift+0x68>
 8008650:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008654:	f1c1 0820 	rsb	r8, r1, #32
 8008658:	40cf      	lsrs	r7, r1
 800865a:	f105 0e04 	add.w	lr, r5, #4
 800865e:	46a1      	mov	r9, r4
 8008660:	4576      	cmp	r6, lr
 8008662:	46f4      	mov	ip, lr
 8008664:	d815      	bhi.n	8008692 <rshift+0x7e>
 8008666:	1a9a      	subs	r2, r3, r2
 8008668:	0092      	lsls	r2, r2, #2
 800866a:	3a04      	subs	r2, #4
 800866c:	3501      	adds	r5, #1
 800866e:	42ae      	cmp	r6, r5
 8008670:	bf38      	it	cc
 8008672:	2200      	movcc	r2, #0
 8008674:	18a3      	adds	r3, r4, r2
 8008676:	50a7      	str	r7, [r4, r2]
 8008678:	b107      	cbz	r7, 800867c <rshift+0x68>
 800867a:	3304      	adds	r3, #4
 800867c:	1b1a      	subs	r2, r3, r4
 800867e:	42a3      	cmp	r3, r4
 8008680:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008684:	bf08      	it	eq
 8008686:	2300      	moveq	r3, #0
 8008688:	6102      	str	r2, [r0, #16]
 800868a:	bf08      	it	eq
 800868c:	6143      	streq	r3, [r0, #20]
 800868e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008692:	f8dc c000 	ldr.w	ip, [ip]
 8008696:	fa0c fc08 	lsl.w	ip, ip, r8
 800869a:	ea4c 0707 	orr.w	r7, ip, r7
 800869e:	f849 7b04 	str.w	r7, [r9], #4
 80086a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086a6:	40cf      	lsrs	r7, r1
 80086a8:	e7da      	b.n	8008660 <rshift+0x4c>
 80086aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80086ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80086b2:	e7c3      	b.n	800863c <rshift+0x28>
 80086b4:	4623      	mov	r3, r4
 80086b6:	e7e1      	b.n	800867c <rshift+0x68>

080086b8 <__hexdig_fun>:
 80086b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80086bc:	2b09      	cmp	r3, #9
 80086be:	d802      	bhi.n	80086c6 <__hexdig_fun+0xe>
 80086c0:	3820      	subs	r0, #32
 80086c2:	b2c0      	uxtb	r0, r0
 80086c4:	4770      	bx	lr
 80086c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80086ca:	2b05      	cmp	r3, #5
 80086cc:	d801      	bhi.n	80086d2 <__hexdig_fun+0x1a>
 80086ce:	3847      	subs	r0, #71	; 0x47
 80086d0:	e7f7      	b.n	80086c2 <__hexdig_fun+0xa>
 80086d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80086d6:	2b05      	cmp	r3, #5
 80086d8:	d801      	bhi.n	80086de <__hexdig_fun+0x26>
 80086da:	3827      	subs	r0, #39	; 0x27
 80086dc:	e7f1      	b.n	80086c2 <__hexdig_fun+0xa>
 80086de:	2000      	movs	r0, #0
 80086e0:	4770      	bx	lr
	...

080086e4 <__gethex>:
 80086e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e8:	ed2d 8b02 	vpush	{d8}
 80086ec:	b089      	sub	sp, #36	; 0x24
 80086ee:	ee08 0a10 	vmov	s16, r0
 80086f2:	9304      	str	r3, [sp, #16]
 80086f4:	4bb4      	ldr	r3, [pc, #720]	; (80089c8 <__gethex+0x2e4>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	9301      	str	r3, [sp, #4]
 80086fa:	4618      	mov	r0, r3
 80086fc:	468b      	mov	fp, r1
 80086fe:	4690      	mov	r8, r2
 8008700:	f7f7 fd8e 	bl	8000220 <strlen>
 8008704:	9b01      	ldr	r3, [sp, #4]
 8008706:	f8db 2000 	ldr.w	r2, [fp]
 800870a:	4403      	add	r3, r0
 800870c:	4682      	mov	sl, r0
 800870e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008712:	9305      	str	r3, [sp, #20]
 8008714:	1c93      	adds	r3, r2, #2
 8008716:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800871a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800871e:	32fe      	adds	r2, #254	; 0xfe
 8008720:	18d1      	adds	r1, r2, r3
 8008722:	461f      	mov	r7, r3
 8008724:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008728:	9100      	str	r1, [sp, #0]
 800872a:	2830      	cmp	r0, #48	; 0x30
 800872c:	d0f8      	beq.n	8008720 <__gethex+0x3c>
 800872e:	f7ff ffc3 	bl	80086b8 <__hexdig_fun>
 8008732:	4604      	mov	r4, r0
 8008734:	2800      	cmp	r0, #0
 8008736:	d13a      	bne.n	80087ae <__gethex+0xca>
 8008738:	9901      	ldr	r1, [sp, #4]
 800873a:	4652      	mov	r2, sl
 800873c:	4638      	mov	r0, r7
 800873e:	f001 fa33 	bl	8009ba8 <strncmp>
 8008742:	4605      	mov	r5, r0
 8008744:	2800      	cmp	r0, #0
 8008746:	d168      	bne.n	800881a <__gethex+0x136>
 8008748:	f817 000a 	ldrb.w	r0, [r7, sl]
 800874c:	eb07 060a 	add.w	r6, r7, sl
 8008750:	f7ff ffb2 	bl	80086b8 <__hexdig_fun>
 8008754:	2800      	cmp	r0, #0
 8008756:	d062      	beq.n	800881e <__gethex+0x13a>
 8008758:	4633      	mov	r3, r6
 800875a:	7818      	ldrb	r0, [r3, #0]
 800875c:	2830      	cmp	r0, #48	; 0x30
 800875e:	461f      	mov	r7, r3
 8008760:	f103 0301 	add.w	r3, r3, #1
 8008764:	d0f9      	beq.n	800875a <__gethex+0x76>
 8008766:	f7ff ffa7 	bl	80086b8 <__hexdig_fun>
 800876a:	2301      	movs	r3, #1
 800876c:	fab0 f480 	clz	r4, r0
 8008770:	0964      	lsrs	r4, r4, #5
 8008772:	4635      	mov	r5, r6
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	463a      	mov	r2, r7
 8008778:	4616      	mov	r6, r2
 800877a:	3201      	adds	r2, #1
 800877c:	7830      	ldrb	r0, [r6, #0]
 800877e:	f7ff ff9b 	bl	80086b8 <__hexdig_fun>
 8008782:	2800      	cmp	r0, #0
 8008784:	d1f8      	bne.n	8008778 <__gethex+0x94>
 8008786:	9901      	ldr	r1, [sp, #4]
 8008788:	4652      	mov	r2, sl
 800878a:	4630      	mov	r0, r6
 800878c:	f001 fa0c 	bl	8009ba8 <strncmp>
 8008790:	b980      	cbnz	r0, 80087b4 <__gethex+0xd0>
 8008792:	b94d      	cbnz	r5, 80087a8 <__gethex+0xc4>
 8008794:	eb06 050a 	add.w	r5, r6, sl
 8008798:	462a      	mov	r2, r5
 800879a:	4616      	mov	r6, r2
 800879c:	3201      	adds	r2, #1
 800879e:	7830      	ldrb	r0, [r6, #0]
 80087a0:	f7ff ff8a 	bl	80086b8 <__hexdig_fun>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d1f8      	bne.n	800879a <__gethex+0xb6>
 80087a8:	1bad      	subs	r5, r5, r6
 80087aa:	00ad      	lsls	r5, r5, #2
 80087ac:	e004      	b.n	80087b8 <__gethex+0xd4>
 80087ae:	2400      	movs	r4, #0
 80087b0:	4625      	mov	r5, r4
 80087b2:	e7e0      	b.n	8008776 <__gethex+0x92>
 80087b4:	2d00      	cmp	r5, #0
 80087b6:	d1f7      	bne.n	80087a8 <__gethex+0xc4>
 80087b8:	7833      	ldrb	r3, [r6, #0]
 80087ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80087be:	2b50      	cmp	r3, #80	; 0x50
 80087c0:	d13b      	bne.n	800883a <__gethex+0x156>
 80087c2:	7873      	ldrb	r3, [r6, #1]
 80087c4:	2b2b      	cmp	r3, #43	; 0x2b
 80087c6:	d02c      	beq.n	8008822 <__gethex+0x13e>
 80087c8:	2b2d      	cmp	r3, #45	; 0x2d
 80087ca:	d02e      	beq.n	800882a <__gethex+0x146>
 80087cc:	1c71      	adds	r1, r6, #1
 80087ce:	f04f 0900 	mov.w	r9, #0
 80087d2:	7808      	ldrb	r0, [r1, #0]
 80087d4:	f7ff ff70 	bl	80086b8 <__hexdig_fun>
 80087d8:	1e43      	subs	r3, r0, #1
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b18      	cmp	r3, #24
 80087de:	d82c      	bhi.n	800883a <__gethex+0x156>
 80087e0:	f1a0 0210 	sub.w	r2, r0, #16
 80087e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80087e8:	f7ff ff66 	bl	80086b8 <__hexdig_fun>
 80087ec:	1e43      	subs	r3, r0, #1
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b18      	cmp	r3, #24
 80087f2:	d91d      	bls.n	8008830 <__gethex+0x14c>
 80087f4:	f1b9 0f00 	cmp.w	r9, #0
 80087f8:	d000      	beq.n	80087fc <__gethex+0x118>
 80087fa:	4252      	negs	r2, r2
 80087fc:	4415      	add	r5, r2
 80087fe:	f8cb 1000 	str.w	r1, [fp]
 8008802:	b1e4      	cbz	r4, 800883e <__gethex+0x15a>
 8008804:	9b00      	ldr	r3, [sp, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	bf14      	ite	ne
 800880a:	2700      	movne	r7, #0
 800880c:	2706      	moveq	r7, #6
 800880e:	4638      	mov	r0, r7
 8008810:	b009      	add	sp, #36	; 0x24
 8008812:	ecbd 8b02 	vpop	{d8}
 8008816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881a:	463e      	mov	r6, r7
 800881c:	4625      	mov	r5, r4
 800881e:	2401      	movs	r4, #1
 8008820:	e7ca      	b.n	80087b8 <__gethex+0xd4>
 8008822:	f04f 0900 	mov.w	r9, #0
 8008826:	1cb1      	adds	r1, r6, #2
 8008828:	e7d3      	b.n	80087d2 <__gethex+0xee>
 800882a:	f04f 0901 	mov.w	r9, #1
 800882e:	e7fa      	b.n	8008826 <__gethex+0x142>
 8008830:	230a      	movs	r3, #10
 8008832:	fb03 0202 	mla	r2, r3, r2, r0
 8008836:	3a10      	subs	r2, #16
 8008838:	e7d4      	b.n	80087e4 <__gethex+0x100>
 800883a:	4631      	mov	r1, r6
 800883c:	e7df      	b.n	80087fe <__gethex+0x11a>
 800883e:	1bf3      	subs	r3, r6, r7
 8008840:	3b01      	subs	r3, #1
 8008842:	4621      	mov	r1, r4
 8008844:	2b07      	cmp	r3, #7
 8008846:	dc0b      	bgt.n	8008860 <__gethex+0x17c>
 8008848:	ee18 0a10 	vmov	r0, s16
 800884c:	f000 fa7e 	bl	8008d4c <_Balloc>
 8008850:	4604      	mov	r4, r0
 8008852:	b940      	cbnz	r0, 8008866 <__gethex+0x182>
 8008854:	4b5d      	ldr	r3, [pc, #372]	; (80089cc <__gethex+0x2e8>)
 8008856:	4602      	mov	r2, r0
 8008858:	21de      	movs	r1, #222	; 0xde
 800885a:	485d      	ldr	r0, [pc, #372]	; (80089d0 <__gethex+0x2ec>)
 800885c:	f001 f9c6 	bl	8009bec <__assert_func>
 8008860:	3101      	adds	r1, #1
 8008862:	105b      	asrs	r3, r3, #1
 8008864:	e7ee      	b.n	8008844 <__gethex+0x160>
 8008866:	f100 0914 	add.w	r9, r0, #20
 800886a:	f04f 0b00 	mov.w	fp, #0
 800886e:	f1ca 0301 	rsb	r3, sl, #1
 8008872:	f8cd 9008 	str.w	r9, [sp, #8]
 8008876:	f8cd b000 	str.w	fp, [sp]
 800887a:	9306      	str	r3, [sp, #24]
 800887c:	42b7      	cmp	r7, r6
 800887e:	d340      	bcc.n	8008902 <__gethex+0x21e>
 8008880:	9802      	ldr	r0, [sp, #8]
 8008882:	9b00      	ldr	r3, [sp, #0]
 8008884:	f840 3b04 	str.w	r3, [r0], #4
 8008888:	eba0 0009 	sub.w	r0, r0, r9
 800888c:	1080      	asrs	r0, r0, #2
 800888e:	0146      	lsls	r6, r0, #5
 8008890:	6120      	str	r0, [r4, #16]
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fb4c 	bl	8008f30 <__hi0bits>
 8008898:	1a30      	subs	r0, r6, r0
 800889a:	f8d8 6000 	ldr.w	r6, [r8]
 800889e:	42b0      	cmp	r0, r6
 80088a0:	dd63      	ble.n	800896a <__gethex+0x286>
 80088a2:	1b87      	subs	r7, r0, r6
 80088a4:	4639      	mov	r1, r7
 80088a6:	4620      	mov	r0, r4
 80088a8:	f000 fef0 	bl	800968c <__any_on>
 80088ac:	4682      	mov	sl, r0
 80088ae:	b1a8      	cbz	r0, 80088dc <__gethex+0x1f8>
 80088b0:	1e7b      	subs	r3, r7, #1
 80088b2:	1159      	asrs	r1, r3, #5
 80088b4:	f003 021f 	and.w	r2, r3, #31
 80088b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80088bc:	f04f 0a01 	mov.w	sl, #1
 80088c0:	fa0a f202 	lsl.w	r2, sl, r2
 80088c4:	420a      	tst	r2, r1
 80088c6:	d009      	beq.n	80088dc <__gethex+0x1f8>
 80088c8:	4553      	cmp	r3, sl
 80088ca:	dd05      	ble.n	80088d8 <__gethex+0x1f4>
 80088cc:	1eb9      	subs	r1, r7, #2
 80088ce:	4620      	mov	r0, r4
 80088d0:	f000 fedc 	bl	800968c <__any_on>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d145      	bne.n	8008964 <__gethex+0x280>
 80088d8:	f04f 0a02 	mov.w	sl, #2
 80088dc:	4639      	mov	r1, r7
 80088de:	4620      	mov	r0, r4
 80088e0:	f7ff fe98 	bl	8008614 <rshift>
 80088e4:	443d      	add	r5, r7
 80088e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088ea:	42ab      	cmp	r3, r5
 80088ec:	da4c      	bge.n	8008988 <__gethex+0x2a4>
 80088ee:	ee18 0a10 	vmov	r0, s16
 80088f2:	4621      	mov	r1, r4
 80088f4:	f000 fa6a 	bl	8008dcc <_Bfree>
 80088f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088fa:	2300      	movs	r3, #0
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	27a3      	movs	r7, #163	; 0xa3
 8008900:	e785      	b.n	800880e <__gethex+0x12a>
 8008902:	1e73      	subs	r3, r6, #1
 8008904:	9a05      	ldr	r2, [sp, #20]
 8008906:	9303      	str	r3, [sp, #12]
 8008908:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800890c:	4293      	cmp	r3, r2
 800890e:	d019      	beq.n	8008944 <__gethex+0x260>
 8008910:	f1bb 0f20 	cmp.w	fp, #32
 8008914:	d107      	bne.n	8008926 <__gethex+0x242>
 8008916:	9b02      	ldr	r3, [sp, #8]
 8008918:	9a00      	ldr	r2, [sp, #0]
 800891a:	f843 2b04 	str.w	r2, [r3], #4
 800891e:	9302      	str	r3, [sp, #8]
 8008920:	2300      	movs	r3, #0
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	469b      	mov	fp, r3
 8008926:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800892a:	f7ff fec5 	bl	80086b8 <__hexdig_fun>
 800892e:	9b00      	ldr	r3, [sp, #0]
 8008930:	f000 000f 	and.w	r0, r0, #15
 8008934:	fa00 f00b 	lsl.w	r0, r0, fp
 8008938:	4303      	orrs	r3, r0
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	f10b 0b04 	add.w	fp, fp, #4
 8008940:	9b03      	ldr	r3, [sp, #12]
 8008942:	e00d      	b.n	8008960 <__gethex+0x27c>
 8008944:	9b03      	ldr	r3, [sp, #12]
 8008946:	9a06      	ldr	r2, [sp, #24]
 8008948:	4413      	add	r3, r2
 800894a:	42bb      	cmp	r3, r7
 800894c:	d3e0      	bcc.n	8008910 <__gethex+0x22c>
 800894e:	4618      	mov	r0, r3
 8008950:	9901      	ldr	r1, [sp, #4]
 8008952:	9307      	str	r3, [sp, #28]
 8008954:	4652      	mov	r2, sl
 8008956:	f001 f927 	bl	8009ba8 <strncmp>
 800895a:	9b07      	ldr	r3, [sp, #28]
 800895c:	2800      	cmp	r0, #0
 800895e:	d1d7      	bne.n	8008910 <__gethex+0x22c>
 8008960:	461e      	mov	r6, r3
 8008962:	e78b      	b.n	800887c <__gethex+0x198>
 8008964:	f04f 0a03 	mov.w	sl, #3
 8008968:	e7b8      	b.n	80088dc <__gethex+0x1f8>
 800896a:	da0a      	bge.n	8008982 <__gethex+0x29e>
 800896c:	1a37      	subs	r7, r6, r0
 800896e:	4621      	mov	r1, r4
 8008970:	ee18 0a10 	vmov	r0, s16
 8008974:	463a      	mov	r2, r7
 8008976:	f000 fc45 	bl	8009204 <__lshift>
 800897a:	1bed      	subs	r5, r5, r7
 800897c:	4604      	mov	r4, r0
 800897e:	f100 0914 	add.w	r9, r0, #20
 8008982:	f04f 0a00 	mov.w	sl, #0
 8008986:	e7ae      	b.n	80088e6 <__gethex+0x202>
 8008988:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800898c:	42a8      	cmp	r0, r5
 800898e:	dd72      	ble.n	8008a76 <__gethex+0x392>
 8008990:	1b45      	subs	r5, r0, r5
 8008992:	42ae      	cmp	r6, r5
 8008994:	dc36      	bgt.n	8008a04 <__gethex+0x320>
 8008996:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800899a:	2b02      	cmp	r3, #2
 800899c:	d02a      	beq.n	80089f4 <__gethex+0x310>
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d02c      	beq.n	80089fc <__gethex+0x318>
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d11c      	bne.n	80089e0 <__gethex+0x2fc>
 80089a6:	42ae      	cmp	r6, r5
 80089a8:	d11a      	bne.n	80089e0 <__gethex+0x2fc>
 80089aa:	2e01      	cmp	r6, #1
 80089ac:	d112      	bne.n	80089d4 <__gethex+0x2f0>
 80089ae:	9a04      	ldr	r2, [sp, #16]
 80089b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80089b4:	6013      	str	r3, [r2, #0]
 80089b6:	2301      	movs	r3, #1
 80089b8:	6123      	str	r3, [r4, #16]
 80089ba:	f8c9 3000 	str.w	r3, [r9]
 80089be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089c0:	2762      	movs	r7, #98	; 0x62
 80089c2:	601c      	str	r4, [r3, #0]
 80089c4:	e723      	b.n	800880e <__gethex+0x12a>
 80089c6:	bf00      	nop
 80089c8:	0800bf20 	.word	0x0800bf20
 80089cc:	0800bea8 	.word	0x0800bea8
 80089d0:	0800beb9 	.word	0x0800beb9
 80089d4:	1e71      	subs	r1, r6, #1
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 fe58 	bl	800968c <__any_on>
 80089dc:	2800      	cmp	r0, #0
 80089de:	d1e6      	bne.n	80089ae <__gethex+0x2ca>
 80089e0:	ee18 0a10 	vmov	r0, s16
 80089e4:	4621      	mov	r1, r4
 80089e6:	f000 f9f1 	bl	8008dcc <_Bfree>
 80089ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80089ec:	2300      	movs	r3, #0
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	2750      	movs	r7, #80	; 0x50
 80089f2:	e70c      	b.n	800880e <__gethex+0x12a>
 80089f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1f2      	bne.n	80089e0 <__gethex+0x2fc>
 80089fa:	e7d8      	b.n	80089ae <__gethex+0x2ca>
 80089fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1d5      	bne.n	80089ae <__gethex+0x2ca>
 8008a02:	e7ed      	b.n	80089e0 <__gethex+0x2fc>
 8008a04:	1e6f      	subs	r7, r5, #1
 8008a06:	f1ba 0f00 	cmp.w	sl, #0
 8008a0a:	d131      	bne.n	8008a70 <__gethex+0x38c>
 8008a0c:	b127      	cbz	r7, 8008a18 <__gethex+0x334>
 8008a0e:	4639      	mov	r1, r7
 8008a10:	4620      	mov	r0, r4
 8008a12:	f000 fe3b 	bl	800968c <__any_on>
 8008a16:	4682      	mov	sl, r0
 8008a18:	117b      	asrs	r3, r7, #5
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008a20:	f007 071f 	and.w	r7, r7, #31
 8008a24:	fa01 f707 	lsl.w	r7, r1, r7
 8008a28:	421f      	tst	r7, r3
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	bf18      	it	ne
 8008a30:	f04a 0a02 	orrne.w	sl, sl, #2
 8008a34:	1b76      	subs	r6, r6, r5
 8008a36:	f7ff fded 	bl	8008614 <rshift>
 8008a3a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008a3e:	2702      	movs	r7, #2
 8008a40:	f1ba 0f00 	cmp.w	sl, #0
 8008a44:	d048      	beq.n	8008ad8 <__gethex+0x3f4>
 8008a46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d015      	beq.n	8008a7a <__gethex+0x396>
 8008a4e:	2b03      	cmp	r3, #3
 8008a50:	d017      	beq.n	8008a82 <__gethex+0x39e>
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d109      	bne.n	8008a6a <__gethex+0x386>
 8008a56:	f01a 0f02 	tst.w	sl, #2
 8008a5a:	d006      	beq.n	8008a6a <__gethex+0x386>
 8008a5c:	f8d9 0000 	ldr.w	r0, [r9]
 8008a60:	ea4a 0a00 	orr.w	sl, sl, r0
 8008a64:	f01a 0f01 	tst.w	sl, #1
 8008a68:	d10e      	bne.n	8008a88 <__gethex+0x3a4>
 8008a6a:	f047 0710 	orr.w	r7, r7, #16
 8008a6e:	e033      	b.n	8008ad8 <__gethex+0x3f4>
 8008a70:	f04f 0a01 	mov.w	sl, #1
 8008a74:	e7d0      	b.n	8008a18 <__gethex+0x334>
 8008a76:	2701      	movs	r7, #1
 8008a78:	e7e2      	b.n	8008a40 <__gethex+0x35c>
 8008a7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a7c:	f1c3 0301 	rsb	r3, r3, #1
 8008a80:	9315      	str	r3, [sp, #84]	; 0x54
 8008a82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d0f0      	beq.n	8008a6a <__gethex+0x386>
 8008a88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a8c:	f104 0314 	add.w	r3, r4, #20
 8008a90:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008a94:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008a98:	f04f 0c00 	mov.w	ip, #0
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aa2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008aa6:	d01c      	beq.n	8008ae2 <__gethex+0x3fe>
 8008aa8:	3201      	adds	r2, #1
 8008aaa:	6002      	str	r2, [r0, #0]
 8008aac:	2f02      	cmp	r7, #2
 8008aae:	f104 0314 	add.w	r3, r4, #20
 8008ab2:	d13f      	bne.n	8008b34 <__gethex+0x450>
 8008ab4:	f8d8 2000 	ldr.w	r2, [r8]
 8008ab8:	3a01      	subs	r2, #1
 8008aba:	42b2      	cmp	r2, r6
 8008abc:	d10a      	bne.n	8008ad4 <__gethex+0x3f0>
 8008abe:	1171      	asrs	r1, r6, #5
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ac6:	f006 061f 	and.w	r6, r6, #31
 8008aca:	fa02 f606 	lsl.w	r6, r2, r6
 8008ace:	421e      	tst	r6, r3
 8008ad0:	bf18      	it	ne
 8008ad2:	4617      	movne	r7, r2
 8008ad4:	f047 0720 	orr.w	r7, r7, #32
 8008ad8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ada:	601c      	str	r4, [r3, #0]
 8008adc:	9b04      	ldr	r3, [sp, #16]
 8008ade:	601d      	str	r5, [r3, #0]
 8008ae0:	e695      	b.n	800880e <__gethex+0x12a>
 8008ae2:	4299      	cmp	r1, r3
 8008ae4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ae8:	d8d8      	bhi.n	8008a9c <__gethex+0x3b8>
 8008aea:	68a3      	ldr	r3, [r4, #8]
 8008aec:	459b      	cmp	fp, r3
 8008aee:	db19      	blt.n	8008b24 <__gethex+0x440>
 8008af0:	6861      	ldr	r1, [r4, #4]
 8008af2:	ee18 0a10 	vmov	r0, s16
 8008af6:	3101      	adds	r1, #1
 8008af8:	f000 f928 	bl	8008d4c <_Balloc>
 8008afc:	4681      	mov	r9, r0
 8008afe:	b918      	cbnz	r0, 8008b08 <__gethex+0x424>
 8008b00:	4b1a      	ldr	r3, [pc, #104]	; (8008b6c <__gethex+0x488>)
 8008b02:	4602      	mov	r2, r0
 8008b04:	2184      	movs	r1, #132	; 0x84
 8008b06:	e6a8      	b.n	800885a <__gethex+0x176>
 8008b08:	6922      	ldr	r2, [r4, #16]
 8008b0a:	3202      	adds	r2, #2
 8008b0c:	f104 010c 	add.w	r1, r4, #12
 8008b10:	0092      	lsls	r2, r2, #2
 8008b12:	300c      	adds	r0, #12
 8008b14:	f000 f90c 	bl	8008d30 <memcpy>
 8008b18:	4621      	mov	r1, r4
 8008b1a:	ee18 0a10 	vmov	r0, s16
 8008b1e:	f000 f955 	bl	8008dcc <_Bfree>
 8008b22:	464c      	mov	r4, r9
 8008b24:	6923      	ldr	r3, [r4, #16]
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b2c:	6122      	str	r2, [r4, #16]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	615a      	str	r2, [r3, #20]
 8008b32:	e7bb      	b.n	8008aac <__gethex+0x3c8>
 8008b34:	6922      	ldr	r2, [r4, #16]
 8008b36:	455a      	cmp	r2, fp
 8008b38:	dd0b      	ble.n	8008b52 <__gethex+0x46e>
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f7ff fd69 	bl	8008614 <rshift>
 8008b42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b46:	3501      	adds	r5, #1
 8008b48:	42ab      	cmp	r3, r5
 8008b4a:	f6ff aed0 	blt.w	80088ee <__gethex+0x20a>
 8008b4e:	2701      	movs	r7, #1
 8008b50:	e7c0      	b.n	8008ad4 <__gethex+0x3f0>
 8008b52:	f016 061f 	ands.w	r6, r6, #31
 8008b56:	d0fa      	beq.n	8008b4e <__gethex+0x46a>
 8008b58:	4453      	add	r3, sl
 8008b5a:	f1c6 0620 	rsb	r6, r6, #32
 8008b5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008b62:	f000 f9e5 	bl	8008f30 <__hi0bits>
 8008b66:	42b0      	cmp	r0, r6
 8008b68:	dbe7      	blt.n	8008b3a <__gethex+0x456>
 8008b6a:	e7f0      	b.n	8008b4e <__gethex+0x46a>
 8008b6c:	0800bea8 	.word	0x0800bea8

08008b70 <L_shift>:
 8008b70:	f1c2 0208 	rsb	r2, r2, #8
 8008b74:	0092      	lsls	r2, r2, #2
 8008b76:	b570      	push	{r4, r5, r6, lr}
 8008b78:	f1c2 0620 	rsb	r6, r2, #32
 8008b7c:	6843      	ldr	r3, [r0, #4]
 8008b7e:	6804      	ldr	r4, [r0, #0]
 8008b80:	fa03 f506 	lsl.w	r5, r3, r6
 8008b84:	432c      	orrs	r4, r5
 8008b86:	40d3      	lsrs	r3, r2
 8008b88:	6004      	str	r4, [r0, #0]
 8008b8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b8e:	4288      	cmp	r0, r1
 8008b90:	d3f4      	bcc.n	8008b7c <L_shift+0xc>
 8008b92:	bd70      	pop	{r4, r5, r6, pc}

08008b94 <__match>:
 8008b94:	b530      	push	{r4, r5, lr}
 8008b96:	6803      	ldr	r3, [r0, #0]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b9e:	b914      	cbnz	r4, 8008ba6 <__match+0x12>
 8008ba0:	6003      	str	r3, [r0, #0]
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	bd30      	pop	{r4, r5, pc}
 8008ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008baa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008bae:	2d19      	cmp	r5, #25
 8008bb0:	bf98      	it	ls
 8008bb2:	3220      	addls	r2, #32
 8008bb4:	42a2      	cmp	r2, r4
 8008bb6:	d0f0      	beq.n	8008b9a <__match+0x6>
 8008bb8:	2000      	movs	r0, #0
 8008bba:	e7f3      	b.n	8008ba4 <__match+0x10>

08008bbc <__hexnan>:
 8008bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	680b      	ldr	r3, [r1, #0]
 8008bc2:	115e      	asrs	r6, r3, #5
 8008bc4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008bc8:	f013 031f 	ands.w	r3, r3, #31
 8008bcc:	b087      	sub	sp, #28
 8008bce:	bf18      	it	ne
 8008bd0:	3604      	addne	r6, #4
 8008bd2:	2500      	movs	r5, #0
 8008bd4:	1f37      	subs	r7, r6, #4
 8008bd6:	4690      	mov	r8, r2
 8008bd8:	6802      	ldr	r2, [r0, #0]
 8008bda:	9301      	str	r3, [sp, #4]
 8008bdc:	4682      	mov	sl, r0
 8008bde:	f846 5c04 	str.w	r5, [r6, #-4]
 8008be2:	46b9      	mov	r9, r7
 8008be4:	463c      	mov	r4, r7
 8008be6:	9502      	str	r5, [sp, #8]
 8008be8:	46ab      	mov	fp, r5
 8008bea:	7851      	ldrb	r1, [r2, #1]
 8008bec:	1c53      	adds	r3, r2, #1
 8008bee:	9303      	str	r3, [sp, #12]
 8008bf0:	b341      	cbz	r1, 8008c44 <__hexnan+0x88>
 8008bf2:	4608      	mov	r0, r1
 8008bf4:	9205      	str	r2, [sp, #20]
 8008bf6:	9104      	str	r1, [sp, #16]
 8008bf8:	f7ff fd5e 	bl	80086b8 <__hexdig_fun>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d14f      	bne.n	8008ca0 <__hexnan+0xe4>
 8008c00:	9904      	ldr	r1, [sp, #16]
 8008c02:	9a05      	ldr	r2, [sp, #20]
 8008c04:	2920      	cmp	r1, #32
 8008c06:	d818      	bhi.n	8008c3a <__hexnan+0x7e>
 8008c08:	9b02      	ldr	r3, [sp, #8]
 8008c0a:	459b      	cmp	fp, r3
 8008c0c:	dd13      	ble.n	8008c36 <__hexnan+0x7a>
 8008c0e:	454c      	cmp	r4, r9
 8008c10:	d206      	bcs.n	8008c20 <__hexnan+0x64>
 8008c12:	2d07      	cmp	r5, #7
 8008c14:	dc04      	bgt.n	8008c20 <__hexnan+0x64>
 8008c16:	462a      	mov	r2, r5
 8008c18:	4649      	mov	r1, r9
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f7ff ffa8 	bl	8008b70 <L_shift>
 8008c20:	4544      	cmp	r4, r8
 8008c22:	d950      	bls.n	8008cc6 <__hexnan+0x10a>
 8008c24:	2300      	movs	r3, #0
 8008c26:	f1a4 0904 	sub.w	r9, r4, #4
 8008c2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c2e:	f8cd b008 	str.w	fp, [sp, #8]
 8008c32:	464c      	mov	r4, r9
 8008c34:	461d      	mov	r5, r3
 8008c36:	9a03      	ldr	r2, [sp, #12]
 8008c38:	e7d7      	b.n	8008bea <__hexnan+0x2e>
 8008c3a:	2929      	cmp	r1, #41	; 0x29
 8008c3c:	d156      	bne.n	8008cec <__hexnan+0x130>
 8008c3e:	3202      	adds	r2, #2
 8008c40:	f8ca 2000 	str.w	r2, [sl]
 8008c44:	f1bb 0f00 	cmp.w	fp, #0
 8008c48:	d050      	beq.n	8008cec <__hexnan+0x130>
 8008c4a:	454c      	cmp	r4, r9
 8008c4c:	d206      	bcs.n	8008c5c <__hexnan+0xa0>
 8008c4e:	2d07      	cmp	r5, #7
 8008c50:	dc04      	bgt.n	8008c5c <__hexnan+0xa0>
 8008c52:	462a      	mov	r2, r5
 8008c54:	4649      	mov	r1, r9
 8008c56:	4620      	mov	r0, r4
 8008c58:	f7ff ff8a 	bl	8008b70 <L_shift>
 8008c5c:	4544      	cmp	r4, r8
 8008c5e:	d934      	bls.n	8008cca <__hexnan+0x10e>
 8008c60:	f1a8 0204 	sub.w	r2, r8, #4
 8008c64:	4623      	mov	r3, r4
 8008c66:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c6a:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c6e:	429f      	cmp	r7, r3
 8008c70:	d2f9      	bcs.n	8008c66 <__hexnan+0xaa>
 8008c72:	1b3b      	subs	r3, r7, r4
 8008c74:	f023 0303 	bic.w	r3, r3, #3
 8008c78:	3304      	adds	r3, #4
 8008c7a:	3401      	adds	r4, #1
 8008c7c:	3e03      	subs	r6, #3
 8008c7e:	42b4      	cmp	r4, r6
 8008c80:	bf88      	it	hi
 8008c82:	2304      	movhi	r3, #4
 8008c84:	4443      	add	r3, r8
 8008c86:	2200      	movs	r2, #0
 8008c88:	f843 2b04 	str.w	r2, [r3], #4
 8008c8c:	429f      	cmp	r7, r3
 8008c8e:	d2fb      	bcs.n	8008c88 <__hexnan+0xcc>
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	b91b      	cbnz	r3, 8008c9c <__hexnan+0xe0>
 8008c94:	4547      	cmp	r7, r8
 8008c96:	d127      	bne.n	8008ce8 <__hexnan+0x12c>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	2005      	movs	r0, #5
 8008c9e:	e026      	b.n	8008cee <__hexnan+0x132>
 8008ca0:	3501      	adds	r5, #1
 8008ca2:	2d08      	cmp	r5, #8
 8008ca4:	f10b 0b01 	add.w	fp, fp, #1
 8008ca8:	dd06      	ble.n	8008cb8 <__hexnan+0xfc>
 8008caa:	4544      	cmp	r4, r8
 8008cac:	d9c3      	bls.n	8008c36 <__hexnan+0x7a>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008cb4:	2501      	movs	r5, #1
 8008cb6:	3c04      	subs	r4, #4
 8008cb8:	6822      	ldr	r2, [r4, #0]
 8008cba:	f000 000f 	and.w	r0, r0, #15
 8008cbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008cc2:	6022      	str	r2, [r4, #0]
 8008cc4:	e7b7      	b.n	8008c36 <__hexnan+0x7a>
 8008cc6:	2508      	movs	r5, #8
 8008cc8:	e7b5      	b.n	8008c36 <__hexnan+0x7a>
 8008cca:	9b01      	ldr	r3, [sp, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d0df      	beq.n	8008c90 <__hexnan+0xd4>
 8008cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd4:	f1c3 0320 	rsb	r3, r3, #32
 8008cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cdc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ce0:	401a      	ands	r2, r3
 8008ce2:	f846 2c04 	str.w	r2, [r6, #-4]
 8008ce6:	e7d3      	b.n	8008c90 <__hexnan+0xd4>
 8008ce8:	3f04      	subs	r7, #4
 8008cea:	e7d1      	b.n	8008c90 <__hexnan+0xd4>
 8008cec:	2004      	movs	r0, #4
 8008cee:	b007      	add	sp, #28
 8008cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008cf4 <_localeconv_r>:
 8008cf4:	4800      	ldr	r0, [pc, #0]	; (8008cf8 <_localeconv_r+0x4>)
 8008cf6:	4770      	bx	lr
 8008cf8:	2000017c 	.word	0x2000017c

08008cfc <malloc>:
 8008cfc:	4b02      	ldr	r3, [pc, #8]	; (8008d08 <malloc+0xc>)
 8008cfe:	4601      	mov	r1, r0
 8008d00:	6818      	ldr	r0, [r3, #0]
 8008d02:	f000 bd67 	b.w	80097d4 <_malloc_r>
 8008d06:	bf00      	nop
 8008d08:	20000024 	.word	0x20000024

08008d0c <__ascii_mbtowc>:
 8008d0c:	b082      	sub	sp, #8
 8008d0e:	b901      	cbnz	r1, 8008d12 <__ascii_mbtowc+0x6>
 8008d10:	a901      	add	r1, sp, #4
 8008d12:	b142      	cbz	r2, 8008d26 <__ascii_mbtowc+0x1a>
 8008d14:	b14b      	cbz	r3, 8008d2a <__ascii_mbtowc+0x1e>
 8008d16:	7813      	ldrb	r3, [r2, #0]
 8008d18:	600b      	str	r3, [r1, #0]
 8008d1a:	7812      	ldrb	r2, [r2, #0]
 8008d1c:	1e10      	subs	r0, r2, #0
 8008d1e:	bf18      	it	ne
 8008d20:	2001      	movne	r0, #1
 8008d22:	b002      	add	sp, #8
 8008d24:	4770      	bx	lr
 8008d26:	4610      	mov	r0, r2
 8008d28:	e7fb      	b.n	8008d22 <__ascii_mbtowc+0x16>
 8008d2a:	f06f 0001 	mvn.w	r0, #1
 8008d2e:	e7f8      	b.n	8008d22 <__ascii_mbtowc+0x16>

08008d30 <memcpy>:
 8008d30:	440a      	add	r2, r1
 8008d32:	4291      	cmp	r1, r2
 8008d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d38:	d100      	bne.n	8008d3c <memcpy+0xc>
 8008d3a:	4770      	bx	lr
 8008d3c:	b510      	push	{r4, lr}
 8008d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d46:	4291      	cmp	r1, r2
 8008d48:	d1f9      	bne.n	8008d3e <memcpy+0xe>
 8008d4a:	bd10      	pop	{r4, pc}

08008d4c <_Balloc>:
 8008d4c:	b570      	push	{r4, r5, r6, lr}
 8008d4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d50:	4604      	mov	r4, r0
 8008d52:	460d      	mov	r5, r1
 8008d54:	b976      	cbnz	r6, 8008d74 <_Balloc+0x28>
 8008d56:	2010      	movs	r0, #16
 8008d58:	f7ff ffd0 	bl	8008cfc <malloc>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	6260      	str	r0, [r4, #36]	; 0x24
 8008d60:	b920      	cbnz	r0, 8008d6c <_Balloc+0x20>
 8008d62:	4b18      	ldr	r3, [pc, #96]	; (8008dc4 <_Balloc+0x78>)
 8008d64:	4818      	ldr	r0, [pc, #96]	; (8008dc8 <_Balloc+0x7c>)
 8008d66:	2166      	movs	r1, #102	; 0x66
 8008d68:	f000 ff40 	bl	8009bec <__assert_func>
 8008d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d70:	6006      	str	r6, [r0, #0]
 8008d72:	60c6      	str	r6, [r0, #12]
 8008d74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d76:	68f3      	ldr	r3, [r6, #12]
 8008d78:	b183      	cbz	r3, 8008d9c <_Balloc+0x50>
 8008d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d82:	b9b8      	cbnz	r0, 8008db4 <_Balloc+0x68>
 8008d84:	2101      	movs	r1, #1
 8008d86:	fa01 f605 	lsl.w	r6, r1, r5
 8008d8a:	1d72      	adds	r2, r6, #5
 8008d8c:	0092      	lsls	r2, r2, #2
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 fc9d 	bl	80096ce <_calloc_r>
 8008d94:	b160      	cbz	r0, 8008db0 <_Balloc+0x64>
 8008d96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d9a:	e00e      	b.n	8008dba <_Balloc+0x6e>
 8008d9c:	2221      	movs	r2, #33	; 0x21
 8008d9e:	2104      	movs	r1, #4
 8008da0:	4620      	mov	r0, r4
 8008da2:	f000 fc94 	bl	80096ce <_calloc_r>
 8008da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008da8:	60f0      	str	r0, [r6, #12]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e4      	bne.n	8008d7a <_Balloc+0x2e>
 8008db0:	2000      	movs	r0, #0
 8008db2:	bd70      	pop	{r4, r5, r6, pc}
 8008db4:	6802      	ldr	r2, [r0, #0]
 8008db6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dba:	2300      	movs	r3, #0
 8008dbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008dc0:	e7f7      	b.n	8008db2 <_Balloc+0x66>
 8008dc2:	bf00      	nop
 8008dc4:	0800be36 	.word	0x0800be36
 8008dc8:	0800bf34 	.word	0x0800bf34

08008dcc <_Bfree>:
 8008dcc:	b570      	push	{r4, r5, r6, lr}
 8008dce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	b976      	cbnz	r6, 8008df4 <_Bfree+0x28>
 8008dd6:	2010      	movs	r0, #16
 8008dd8:	f7ff ff90 	bl	8008cfc <malloc>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	6268      	str	r0, [r5, #36]	; 0x24
 8008de0:	b920      	cbnz	r0, 8008dec <_Bfree+0x20>
 8008de2:	4b09      	ldr	r3, [pc, #36]	; (8008e08 <_Bfree+0x3c>)
 8008de4:	4809      	ldr	r0, [pc, #36]	; (8008e0c <_Bfree+0x40>)
 8008de6:	218a      	movs	r1, #138	; 0x8a
 8008de8:	f000 ff00 	bl	8009bec <__assert_func>
 8008dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008df0:	6006      	str	r6, [r0, #0]
 8008df2:	60c6      	str	r6, [r0, #12]
 8008df4:	b13c      	cbz	r4, 8008e06 <_Bfree+0x3a>
 8008df6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008df8:	6862      	ldr	r2, [r4, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e00:	6021      	str	r1, [r4, #0]
 8008e02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	0800be36 	.word	0x0800be36
 8008e0c:	0800bf34 	.word	0x0800bf34

08008e10 <__multadd>:
 8008e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e14:	690d      	ldr	r5, [r1, #16]
 8008e16:	4607      	mov	r7, r0
 8008e18:	460c      	mov	r4, r1
 8008e1a:	461e      	mov	r6, r3
 8008e1c:	f101 0c14 	add.w	ip, r1, #20
 8008e20:	2000      	movs	r0, #0
 8008e22:	f8dc 3000 	ldr.w	r3, [ip]
 8008e26:	b299      	uxth	r1, r3
 8008e28:	fb02 6101 	mla	r1, r2, r1, r6
 8008e2c:	0c1e      	lsrs	r6, r3, #16
 8008e2e:	0c0b      	lsrs	r3, r1, #16
 8008e30:	fb02 3306 	mla	r3, r2, r6, r3
 8008e34:	b289      	uxth	r1, r1
 8008e36:	3001      	adds	r0, #1
 8008e38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e3c:	4285      	cmp	r5, r0
 8008e3e:	f84c 1b04 	str.w	r1, [ip], #4
 8008e42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e46:	dcec      	bgt.n	8008e22 <__multadd+0x12>
 8008e48:	b30e      	cbz	r6, 8008e8e <__multadd+0x7e>
 8008e4a:	68a3      	ldr	r3, [r4, #8]
 8008e4c:	42ab      	cmp	r3, r5
 8008e4e:	dc19      	bgt.n	8008e84 <__multadd+0x74>
 8008e50:	6861      	ldr	r1, [r4, #4]
 8008e52:	4638      	mov	r0, r7
 8008e54:	3101      	adds	r1, #1
 8008e56:	f7ff ff79 	bl	8008d4c <_Balloc>
 8008e5a:	4680      	mov	r8, r0
 8008e5c:	b928      	cbnz	r0, 8008e6a <__multadd+0x5a>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	4b0c      	ldr	r3, [pc, #48]	; (8008e94 <__multadd+0x84>)
 8008e62:	480d      	ldr	r0, [pc, #52]	; (8008e98 <__multadd+0x88>)
 8008e64:	21b5      	movs	r1, #181	; 0xb5
 8008e66:	f000 fec1 	bl	8009bec <__assert_func>
 8008e6a:	6922      	ldr	r2, [r4, #16]
 8008e6c:	3202      	adds	r2, #2
 8008e6e:	f104 010c 	add.w	r1, r4, #12
 8008e72:	0092      	lsls	r2, r2, #2
 8008e74:	300c      	adds	r0, #12
 8008e76:	f7ff ff5b 	bl	8008d30 <memcpy>
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	4638      	mov	r0, r7
 8008e7e:	f7ff ffa5 	bl	8008dcc <_Bfree>
 8008e82:	4644      	mov	r4, r8
 8008e84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e88:	3501      	adds	r5, #1
 8008e8a:	615e      	str	r6, [r3, #20]
 8008e8c:	6125      	str	r5, [r4, #16]
 8008e8e:	4620      	mov	r0, r4
 8008e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e94:	0800bea8 	.word	0x0800bea8
 8008e98:	0800bf34 	.word	0x0800bf34

08008e9c <__s2b>:
 8008e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	4615      	mov	r5, r2
 8008ea4:	461f      	mov	r7, r3
 8008ea6:	2209      	movs	r2, #9
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	4606      	mov	r6, r0
 8008eac:	fb93 f3f2 	sdiv	r3, r3, r2
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	db09      	blt.n	8008ecc <__s2b+0x30>
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f7ff ff47 	bl	8008d4c <_Balloc>
 8008ebe:	b940      	cbnz	r0, 8008ed2 <__s2b+0x36>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	4b19      	ldr	r3, [pc, #100]	; (8008f28 <__s2b+0x8c>)
 8008ec4:	4819      	ldr	r0, [pc, #100]	; (8008f2c <__s2b+0x90>)
 8008ec6:	21ce      	movs	r1, #206	; 0xce
 8008ec8:	f000 fe90 	bl	8009bec <__assert_func>
 8008ecc:	0052      	lsls	r2, r2, #1
 8008ece:	3101      	adds	r1, #1
 8008ed0:	e7f0      	b.n	8008eb4 <__s2b+0x18>
 8008ed2:	9b08      	ldr	r3, [sp, #32]
 8008ed4:	6143      	str	r3, [r0, #20]
 8008ed6:	2d09      	cmp	r5, #9
 8008ed8:	f04f 0301 	mov.w	r3, #1
 8008edc:	6103      	str	r3, [r0, #16]
 8008ede:	dd16      	ble.n	8008f0e <__s2b+0x72>
 8008ee0:	f104 0909 	add.w	r9, r4, #9
 8008ee4:	46c8      	mov	r8, r9
 8008ee6:	442c      	add	r4, r5
 8008ee8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008eec:	4601      	mov	r1, r0
 8008eee:	3b30      	subs	r3, #48	; 0x30
 8008ef0:	220a      	movs	r2, #10
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f7ff ff8c 	bl	8008e10 <__multadd>
 8008ef8:	45a0      	cmp	r8, r4
 8008efa:	d1f5      	bne.n	8008ee8 <__s2b+0x4c>
 8008efc:	f1a5 0408 	sub.w	r4, r5, #8
 8008f00:	444c      	add	r4, r9
 8008f02:	1b2d      	subs	r5, r5, r4
 8008f04:	1963      	adds	r3, r4, r5
 8008f06:	42bb      	cmp	r3, r7
 8008f08:	db04      	blt.n	8008f14 <__s2b+0x78>
 8008f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f0e:	340a      	adds	r4, #10
 8008f10:	2509      	movs	r5, #9
 8008f12:	e7f6      	b.n	8008f02 <__s2b+0x66>
 8008f14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f18:	4601      	mov	r1, r0
 8008f1a:	3b30      	subs	r3, #48	; 0x30
 8008f1c:	220a      	movs	r2, #10
 8008f1e:	4630      	mov	r0, r6
 8008f20:	f7ff ff76 	bl	8008e10 <__multadd>
 8008f24:	e7ee      	b.n	8008f04 <__s2b+0x68>
 8008f26:	bf00      	nop
 8008f28:	0800bea8 	.word	0x0800bea8
 8008f2c:	0800bf34 	.word	0x0800bf34

08008f30 <__hi0bits>:
 8008f30:	0c03      	lsrs	r3, r0, #16
 8008f32:	041b      	lsls	r3, r3, #16
 8008f34:	b9d3      	cbnz	r3, 8008f6c <__hi0bits+0x3c>
 8008f36:	0400      	lsls	r0, r0, #16
 8008f38:	2310      	movs	r3, #16
 8008f3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008f3e:	bf04      	itt	eq
 8008f40:	0200      	lsleq	r0, r0, #8
 8008f42:	3308      	addeq	r3, #8
 8008f44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f48:	bf04      	itt	eq
 8008f4a:	0100      	lsleq	r0, r0, #4
 8008f4c:	3304      	addeq	r3, #4
 8008f4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f52:	bf04      	itt	eq
 8008f54:	0080      	lsleq	r0, r0, #2
 8008f56:	3302      	addeq	r3, #2
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	db05      	blt.n	8008f68 <__hi0bits+0x38>
 8008f5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f60:	f103 0301 	add.w	r3, r3, #1
 8008f64:	bf08      	it	eq
 8008f66:	2320      	moveq	r3, #32
 8008f68:	4618      	mov	r0, r3
 8008f6a:	4770      	bx	lr
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	e7e4      	b.n	8008f3a <__hi0bits+0xa>

08008f70 <__lo0bits>:
 8008f70:	6803      	ldr	r3, [r0, #0]
 8008f72:	f013 0207 	ands.w	r2, r3, #7
 8008f76:	4601      	mov	r1, r0
 8008f78:	d00b      	beq.n	8008f92 <__lo0bits+0x22>
 8008f7a:	07da      	lsls	r2, r3, #31
 8008f7c:	d423      	bmi.n	8008fc6 <__lo0bits+0x56>
 8008f7e:	0798      	lsls	r0, r3, #30
 8008f80:	bf49      	itett	mi
 8008f82:	085b      	lsrmi	r3, r3, #1
 8008f84:	089b      	lsrpl	r3, r3, #2
 8008f86:	2001      	movmi	r0, #1
 8008f88:	600b      	strmi	r3, [r1, #0]
 8008f8a:	bf5c      	itt	pl
 8008f8c:	600b      	strpl	r3, [r1, #0]
 8008f8e:	2002      	movpl	r0, #2
 8008f90:	4770      	bx	lr
 8008f92:	b298      	uxth	r0, r3
 8008f94:	b9a8      	cbnz	r0, 8008fc2 <__lo0bits+0x52>
 8008f96:	0c1b      	lsrs	r3, r3, #16
 8008f98:	2010      	movs	r0, #16
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	b90a      	cbnz	r2, 8008fa2 <__lo0bits+0x32>
 8008f9e:	3008      	adds	r0, #8
 8008fa0:	0a1b      	lsrs	r3, r3, #8
 8008fa2:	071a      	lsls	r2, r3, #28
 8008fa4:	bf04      	itt	eq
 8008fa6:	091b      	lsreq	r3, r3, #4
 8008fa8:	3004      	addeq	r0, #4
 8008faa:	079a      	lsls	r2, r3, #30
 8008fac:	bf04      	itt	eq
 8008fae:	089b      	lsreq	r3, r3, #2
 8008fb0:	3002      	addeq	r0, #2
 8008fb2:	07da      	lsls	r2, r3, #31
 8008fb4:	d403      	bmi.n	8008fbe <__lo0bits+0x4e>
 8008fb6:	085b      	lsrs	r3, r3, #1
 8008fb8:	f100 0001 	add.w	r0, r0, #1
 8008fbc:	d005      	beq.n	8008fca <__lo0bits+0x5a>
 8008fbe:	600b      	str	r3, [r1, #0]
 8008fc0:	4770      	bx	lr
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	e7e9      	b.n	8008f9a <__lo0bits+0x2a>
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	4770      	bx	lr
 8008fca:	2020      	movs	r0, #32
 8008fcc:	4770      	bx	lr
	...

08008fd0 <__i2b>:
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	f7ff feb9 	bl	8008d4c <_Balloc>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	b928      	cbnz	r0, 8008fea <__i2b+0x1a>
 8008fde:	4b05      	ldr	r3, [pc, #20]	; (8008ff4 <__i2b+0x24>)
 8008fe0:	4805      	ldr	r0, [pc, #20]	; (8008ff8 <__i2b+0x28>)
 8008fe2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008fe6:	f000 fe01 	bl	8009bec <__assert_func>
 8008fea:	2301      	movs	r3, #1
 8008fec:	6144      	str	r4, [r0, #20]
 8008fee:	6103      	str	r3, [r0, #16]
 8008ff0:	bd10      	pop	{r4, pc}
 8008ff2:	bf00      	nop
 8008ff4:	0800bea8 	.word	0x0800bea8
 8008ff8:	0800bf34 	.word	0x0800bf34

08008ffc <__multiply>:
 8008ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	4691      	mov	r9, r2
 8009002:	690a      	ldr	r2, [r1, #16]
 8009004:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009008:	429a      	cmp	r2, r3
 800900a:	bfb8      	it	lt
 800900c:	460b      	movlt	r3, r1
 800900e:	460c      	mov	r4, r1
 8009010:	bfbc      	itt	lt
 8009012:	464c      	movlt	r4, r9
 8009014:	4699      	movlt	r9, r3
 8009016:	6927      	ldr	r7, [r4, #16]
 8009018:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800901c:	68a3      	ldr	r3, [r4, #8]
 800901e:	6861      	ldr	r1, [r4, #4]
 8009020:	eb07 060a 	add.w	r6, r7, sl
 8009024:	42b3      	cmp	r3, r6
 8009026:	b085      	sub	sp, #20
 8009028:	bfb8      	it	lt
 800902a:	3101      	addlt	r1, #1
 800902c:	f7ff fe8e 	bl	8008d4c <_Balloc>
 8009030:	b930      	cbnz	r0, 8009040 <__multiply+0x44>
 8009032:	4602      	mov	r2, r0
 8009034:	4b44      	ldr	r3, [pc, #272]	; (8009148 <__multiply+0x14c>)
 8009036:	4845      	ldr	r0, [pc, #276]	; (800914c <__multiply+0x150>)
 8009038:	f240 115d 	movw	r1, #349	; 0x15d
 800903c:	f000 fdd6 	bl	8009bec <__assert_func>
 8009040:	f100 0514 	add.w	r5, r0, #20
 8009044:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009048:	462b      	mov	r3, r5
 800904a:	2200      	movs	r2, #0
 800904c:	4543      	cmp	r3, r8
 800904e:	d321      	bcc.n	8009094 <__multiply+0x98>
 8009050:	f104 0314 	add.w	r3, r4, #20
 8009054:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009058:	f109 0314 	add.w	r3, r9, #20
 800905c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009060:	9202      	str	r2, [sp, #8]
 8009062:	1b3a      	subs	r2, r7, r4
 8009064:	3a15      	subs	r2, #21
 8009066:	f022 0203 	bic.w	r2, r2, #3
 800906a:	3204      	adds	r2, #4
 800906c:	f104 0115 	add.w	r1, r4, #21
 8009070:	428f      	cmp	r7, r1
 8009072:	bf38      	it	cc
 8009074:	2204      	movcc	r2, #4
 8009076:	9201      	str	r2, [sp, #4]
 8009078:	9a02      	ldr	r2, [sp, #8]
 800907a:	9303      	str	r3, [sp, #12]
 800907c:	429a      	cmp	r2, r3
 800907e:	d80c      	bhi.n	800909a <__multiply+0x9e>
 8009080:	2e00      	cmp	r6, #0
 8009082:	dd03      	ble.n	800908c <__multiply+0x90>
 8009084:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009088:	2b00      	cmp	r3, #0
 800908a:	d05a      	beq.n	8009142 <__multiply+0x146>
 800908c:	6106      	str	r6, [r0, #16]
 800908e:	b005      	add	sp, #20
 8009090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009094:	f843 2b04 	str.w	r2, [r3], #4
 8009098:	e7d8      	b.n	800904c <__multiply+0x50>
 800909a:	f8b3 a000 	ldrh.w	sl, [r3]
 800909e:	f1ba 0f00 	cmp.w	sl, #0
 80090a2:	d024      	beq.n	80090ee <__multiply+0xf2>
 80090a4:	f104 0e14 	add.w	lr, r4, #20
 80090a8:	46a9      	mov	r9, r5
 80090aa:	f04f 0c00 	mov.w	ip, #0
 80090ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80090b2:	f8d9 1000 	ldr.w	r1, [r9]
 80090b6:	fa1f fb82 	uxth.w	fp, r2
 80090ba:	b289      	uxth	r1, r1
 80090bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80090c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80090c4:	f8d9 2000 	ldr.w	r2, [r9]
 80090c8:	4461      	add	r1, ip
 80090ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80090d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80090d6:	b289      	uxth	r1, r1
 80090d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090dc:	4577      	cmp	r7, lr
 80090de:	f849 1b04 	str.w	r1, [r9], #4
 80090e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090e6:	d8e2      	bhi.n	80090ae <__multiply+0xb2>
 80090e8:	9a01      	ldr	r2, [sp, #4]
 80090ea:	f845 c002 	str.w	ip, [r5, r2]
 80090ee:	9a03      	ldr	r2, [sp, #12]
 80090f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80090f4:	3304      	adds	r3, #4
 80090f6:	f1b9 0f00 	cmp.w	r9, #0
 80090fa:	d020      	beq.n	800913e <__multiply+0x142>
 80090fc:	6829      	ldr	r1, [r5, #0]
 80090fe:	f104 0c14 	add.w	ip, r4, #20
 8009102:	46ae      	mov	lr, r5
 8009104:	f04f 0a00 	mov.w	sl, #0
 8009108:	f8bc b000 	ldrh.w	fp, [ip]
 800910c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009110:	fb09 220b 	mla	r2, r9, fp, r2
 8009114:	4492      	add	sl, r2
 8009116:	b289      	uxth	r1, r1
 8009118:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800911c:	f84e 1b04 	str.w	r1, [lr], #4
 8009120:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009124:	f8be 1000 	ldrh.w	r1, [lr]
 8009128:	0c12      	lsrs	r2, r2, #16
 800912a:	fb09 1102 	mla	r1, r9, r2, r1
 800912e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009132:	4567      	cmp	r7, ip
 8009134:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009138:	d8e6      	bhi.n	8009108 <__multiply+0x10c>
 800913a:	9a01      	ldr	r2, [sp, #4]
 800913c:	50a9      	str	r1, [r5, r2]
 800913e:	3504      	adds	r5, #4
 8009140:	e79a      	b.n	8009078 <__multiply+0x7c>
 8009142:	3e01      	subs	r6, #1
 8009144:	e79c      	b.n	8009080 <__multiply+0x84>
 8009146:	bf00      	nop
 8009148:	0800bea8 	.word	0x0800bea8
 800914c:	0800bf34 	.word	0x0800bf34

08009150 <__pow5mult>:
 8009150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009154:	4615      	mov	r5, r2
 8009156:	f012 0203 	ands.w	r2, r2, #3
 800915a:	4606      	mov	r6, r0
 800915c:	460f      	mov	r7, r1
 800915e:	d007      	beq.n	8009170 <__pow5mult+0x20>
 8009160:	4c25      	ldr	r4, [pc, #148]	; (80091f8 <__pow5mult+0xa8>)
 8009162:	3a01      	subs	r2, #1
 8009164:	2300      	movs	r3, #0
 8009166:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800916a:	f7ff fe51 	bl	8008e10 <__multadd>
 800916e:	4607      	mov	r7, r0
 8009170:	10ad      	asrs	r5, r5, #2
 8009172:	d03d      	beq.n	80091f0 <__pow5mult+0xa0>
 8009174:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009176:	b97c      	cbnz	r4, 8009198 <__pow5mult+0x48>
 8009178:	2010      	movs	r0, #16
 800917a:	f7ff fdbf 	bl	8008cfc <malloc>
 800917e:	4602      	mov	r2, r0
 8009180:	6270      	str	r0, [r6, #36]	; 0x24
 8009182:	b928      	cbnz	r0, 8009190 <__pow5mult+0x40>
 8009184:	4b1d      	ldr	r3, [pc, #116]	; (80091fc <__pow5mult+0xac>)
 8009186:	481e      	ldr	r0, [pc, #120]	; (8009200 <__pow5mult+0xb0>)
 8009188:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800918c:	f000 fd2e 	bl	8009bec <__assert_func>
 8009190:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009194:	6004      	str	r4, [r0, #0]
 8009196:	60c4      	str	r4, [r0, #12]
 8009198:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800919c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091a0:	b94c      	cbnz	r4, 80091b6 <__pow5mult+0x66>
 80091a2:	f240 2171 	movw	r1, #625	; 0x271
 80091a6:	4630      	mov	r0, r6
 80091a8:	f7ff ff12 	bl	8008fd0 <__i2b>
 80091ac:	2300      	movs	r3, #0
 80091ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80091b2:	4604      	mov	r4, r0
 80091b4:	6003      	str	r3, [r0, #0]
 80091b6:	f04f 0900 	mov.w	r9, #0
 80091ba:	07eb      	lsls	r3, r5, #31
 80091bc:	d50a      	bpl.n	80091d4 <__pow5mult+0x84>
 80091be:	4639      	mov	r1, r7
 80091c0:	4622      	mov	r2, r4
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7ff ff1a 	bl	8008ffc <__multiply>
 80091c8:	4639      	mov	r1, r7
 80091ca:	4680      	mov	r8, r0
 80091cc:	4630      	mov	r0, r6
 80091ce:	f7ff fdfd 	bl	8008dcc <_Bfree>
 80091d2:	4647      	mov	r7, r8
 80091d4:	106d      	asrs	r5, r5, #1
 80091d6:	d00b      	beq.n	80091f0 <__pow5mult+0xa0>
 80091d8:	6820      	ldr	r0, [r4, #0]
 80091da:	b938      	cbnz	r0, 80091ec <__pow5mult+0x9c>
 80091dc:	4622      	mov	r2, r4
 80091de:	4621      	mov	r1, r4
 80091e0:	4630      	mov	r0, r6
 80091e2:	f7ff ff0b 	bl	8008ffc <__multiply>
 80091e6:	6020      	str	r0, [r4, #0]
 80091e8:	f8c0 9000 	str.w	r9, [r0]
 80091ec:	4604      	mov	r4, r0
 80091ee:	e7e4      	b.n	80091ba <__pow5mult+0x6a>
 80091f0:	4638      	mov	r0, r7
 80091f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091f6:	bf00      	nop
 80091f8:	0800c080 	.word	0x0800c080
 80091fc:	0800be36 	.word	0x0800be36
 8009200:	0800bf34 	.word	0x0800bf34

08009204 <__lshift>:
 8009204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009208:	460c      	mov	r4, r1
 800920a:	6849      	ldr	r1, [r1, #4]
 800920c:	6923      	ldr	r3, [r4, #16]
 800920e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009212:	68a3      	ldr	r3, [r4, #8]
 8009214:	4607      	mov	r7, r0
 8009216:	4691      	mov	r9, r2
 8009218:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800921c:	f108 0601 	add.w	r6, r8, #1
 8009220:	42b3      	cmp	r3, r6
 8009222:	db0b      	blt.n	800923c <__lshift+0x38>
 8009224:	4638      	mov	r0, r7
 8009226:	f7ff fd91 	bl	8008d4c <_Balloc>
 800922a:	4605      	mov	r5, r0
 800922c:	b948      	cbnz	r0, 8009242 <__lshift+0x3e>
 800922e:	4602      	mov	r2, r0
 8009230:	4b2a      	ldr	r3, [pc, #168]	; (80092dc <__lshift+0xd8>)
 8009232:	482b      	ldr	r0, [pc, #172]	; (80092e0 <__lshift+0xdc>)
 8009234:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009238:	f000 fcd8 	bl	8009bec <__assert_func>
 800923c:	3101      	adds	r1, #1
 800923e:	005b      	lsls	r3, r3, #1
 8009240:	e7ee      	b.n	8009220 <__lshift+0x1c>
 8009242:	2300      	movs	r3, #0
 8009244:	f100 0114 	add.w	r1, r0, #20
 8009248:	f100 0210 	add.w	r2, r0, #16
 800924c:	4618      	mov	r0, r3
 800924e:	4553      	cmp	r3, sl
 8009250:	db37      	blt.n	80092c2 <__lshift+0xbe>
 8009252:	6920      	ldr	r0, [r4, #16]
 8009254:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009258:	f104 0314 	add.w	r3, r4, #20
 800925c:	f019 091f 	ands.w	r9, r9, #31
 8009260:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009264:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009268:	d02f      	beq.n	80092ca <__lshift+0xc6>
 800926a:	f1c9 0e20 	rsb	lr, r9, #32
 800926e:	468a      	mov	sl, r1
 8009270:	f04f 0c00 	mov.w	ip, #0
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	fa02 f209 	lsl.w	r2, r2, r9
 800927a:	ea42 020c 	orr.w	r2, r2, ip
 800927e:	f84a 2b04 	str.w	r2, [sl], #4
 8009282:	f853 2b04 	ldr.w	r2, [r3], #4
 8009286:	4298      	cmp	r0, r3
 8009288:	fa22 fc0e 	lsr.w	ip, r2, lr
 800928c:	d8f2      	bhi.n	8009274 <__lshift+0x70>
 800928e:	1b03      	subs	r3, r0, r4
 8009290:	3b15      	subs	r3, #21
 8009292:	f023 0303 	bic.w	r3, r3, #3
 8009296:	3304      	adds	r3, #4
 8009298:	f104 0215 	add.w	r2, r4, #21
 800929c:	4290      	cmp	r0, r2
 800929e:	bf38      	it	cc
 80092a0:	2304      	movcc	r3, #4
 80092a2:	f841 c003 	str.w	ip, [r1, r3]
 80092a6:	f1bc 0f00 	cmp.w	ip, #0
 80092aa:	d001      	beq.n	80092b0 <__lshift+0xac>
 80092ac:	f108 0602 	add.w	r6, r8, #2
 80092b0:	3e01      	subs	r6, #1
 80092b2:	4638      	mov	r0, r7
 80092b4:	612e      	str	r6, [r5, #16]
 80092b6:	4621      	mov	r1, r4
 80092b8:	f7ff fd88 	bl	8008dcc <_Bfree>
 80092bc:	4628      	mov	r0, r5
 80092be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80092c6:	3301      	adds	r3, #1
 80092c8:	e7c1      	b.n	800924e <__lshift+0x4a>
 80092ca:	3904      	subs	r1, #4
 80092cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80092d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80092d4:	4298      	cmp	r0, r3
 80092d6:	d8f9      	bhi.n	80092cc <__lshift+0xc8>
 80092d8:	e7ea      	b.n	80092b0 <__lshift+0xac>
 80092da:	bf00      	nop
 80092dc:	0800bea8 	.word	0x0800bea8
 80092e0:	0800bf34 	.word	0x0800bf34

080092e4 <__mcmp>:
 80092e4:	b530      	push	{r4, r5, lr}
 80092e6:	6902      	ldr	r2, [r0, #16]
 80092e8:	690c      	ldr	r4, [r1, #16]
 80092ea:	1b12      	subs	r2, r2, r4
 80092ec:	d10e      	bne.n	800930c <__mcmp+0x28>
 80092ee:	f100 0314 	add.w	r3, r0, #20
 80092f2:	3114      	adds	r1, #20
 80092f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80092f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80092fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009300:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009304:	42a5      	cmp	r5, r4
 8009306:	d003      	beq.n	8009310 <__mcmp+0x2c>
 8009308:	d305      	bcc.n	8009316 <__mcmp+0x32>
 800930a:	2201      	movs	r2, #1
 800930c:	4610      	mov	r0, r2
 800930e:	bd30      	pop	{r4, r5, pc}
 8009310:	4283      	cmp	r3, r0
 8009312:	d3f3      	bcc.n	80092fc <__mcmp+0x18>
 8009314:	e7fa      	b.n	800930c <__mcmp+0x28>
 8009316:	f04f 32ff 	mov.w	r2, #4294967295
 800931a:	e7f7      	b.n	800930c <__mcmp+0x28>

0800931c <__mdiff>:
 800931c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009320:	460c      	mov	r4, r1
 8009322:	4606      	mov	r6, r0
 8009324:	4611      	mov	r1, r2
 8009326:	4620      	mov	r0, r4
 8009328:	4690      	mov	r8, r2
 800932a:	f7ff ffdb 	bl	80092e4 <__mcmp>
 800932e:	1e05      	subs	r5, r0, #0
 8009330:	d110      	bne.n	8009354 <__mdiff+0x38>
 8009332:	4629      	mov	r1, r5
 8009334:	4630      	mov	r0, r6
 8009336:	f7ff fd09 	bl	8008d4c <_Balloc>
 800933a:	b930      	cbnz	r0, 800934a <__mdiff+0x2e>
 800933c:	4b3a      	ldr	r3, [pc, #232]	; (8009428 <__mdiff+0x10c>)
 800933e:	4602      	mov	r2, r0
 8009340:	f240 2132 	movw	r1, #562	; 0x232
 8009344:	4839      	ldr	r0, [pc, #228]	; (800942c <__mdiff+0x110>)
 8009346:	f000 fc51 	bl	8009bec <__assert_func>
 800934a:	2301      	movs	r3, #1
 800934c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009350:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009354:	bfa4      	itt	ge
 8009356:	4643      	movge	r3, r8
 8009358:	46a0      	movge	r8, r4
 800935a:	4630      	mov	r0, r6
 800935c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009360:	bfa6      	itte	ge
 8009362:	461c      	movge	r4, r3
 8009364:	2500      	movge	r5, #0
 8009366:	2501      	movlt	r5, #1
 8009368:	f7ff fcf0 	bl	8008d4c <_Balloc>
 800936c:	b920      	cbnz	r0, 8009378 <__mdiff+0x5c>
 800936e:	4b2e      	ldr	r3, [pc, #184]	; (8009428 <__mdiff+0x10c>)
 8009370:	4602      	mov	r2, r0
 8009372:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009376:	e7e5      	b.n	8009344 <__mdiff+0x28>
 8009378:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800937c:	6926      	ldr	r6, [r4, #16]
 800937e:	60c5      	str	r5, [r0, #12]
 8009380:	f104 0914 	add.w	r9, r4, #20
 8009384:	f108 0514 	add.w	r5, r8, #20
 8009388:	f100 0e14 	add.w	lr, r0, #20
 800938c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009390:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009394:	f108 0210 	add.w	r2, r8, #16
 8009398:	46f2      	mov	sl, lr
 800939a:	2100      	movs	r1, #0
 800939c:	f859 3b04 	ldr.w	r3, [r9], #4
 80093a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80093a4:	fa1f f883 	uxth.w	r8, r3
 80093a8:	fa11 f18b 	uxtah	r1, r1, fp
 80093ac:	0c1b      	lsrs	r3, r3, #16
 80093ae:	eba1 0808 	sub.w	r8, r1, r8
 80093b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80093ba:	fa1f f888 	uxth.w	r8, r8
 80093be:	1419      	asrs	r1, r3, #16
 80093c0:	454e      	cmp	r6, r9
 80093c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80093c6:	f84a 3b04 	str.w	r3, [sl], #4
 80093ca:	d8e7      	bhi.n	800939c <__mdiff+0x80>
 80093cc:	1b33      	subs	r3, r6, r4
 80093ce:	3b15      	subs	r3, #21
 80093d0:	f023 0303 	bic.w	r3, r3, #3
 80093d4:	3304      	adds	r3, #4
 80093d6:	3415      	adds	r4, #21
 80093d8:	42a6      	cmp	r6, r4
 80093da:	bf38      	it	cc
 80093dc:	2304      	movcc	r3, #4
 80093de:	441d      	add	r5, r3
 80093e0:	4473      	add	r3, lr
 80093e2:	469e      	mov	lr, r3
 80093e4:	462e      	mov	r6, r5
 80093e6:	4566      	cmp	r6, ip
 80093e8:	d30e      	bcc.n	8009408 <__mdiff+0xec>
 80093ea:	f10c 0203 	add.w	r2, ip, #3
 80093ee:	1b52      	subs	r2, r2, r5
 80093f0:	f022 0203 	bic.w	r2, r2, #3
 80093f4:	3d03      	subs	r5, #3
 80093f6:	45ac      	cmp	ip, r5
 80093f8:	bf38      	it	cc
 80093fa:	2200      	movcc	r2, #0
 80093fc:	441a      	add	r2, r3
 80093fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009402:	b17b      	cbz	r3, 8009424 <__mdiff+0x108>
 8009404:	6107      	str	r7, [r0, #16]
 8009406:	e7a3      	b.n	8009350 <__mdiff+0x34>
 8009408:	f856 8b04 	ldr.w	r8, [r6], #4
 800940c:	fa11 f288 	uxtah	r2, r1, r8
 8009410:	1414      	asrs	r4, r2, #16
 8009412:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009416:	b292      	uxth	r2, r2
 8009418:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800941c:	f84e 2b04 	str.w	r2, [lr], #4
 8009420:	1421      	asrs	r1, r4, #16
 8009422:	e7e0      	b.n	80093e6 <__mdiff+0xca>
 8009424:	3f01      	subs	r7, #1
 8009426:	e7ea      	b.n	80093fe <__mdiff+0xe2>
 8009428:	0800bea8 	.word	0x0800bea8
 800942c:	0800bf34 	.word	0x0800bf34

08009430 <__ulp>:
 8009430:	b082      	sub	sp, #8
 8009432:	ed8d 0b00 	vstr	d0, [sp]
 8009436:	9b01      	ldr	r3, [sp, #4]
 8009438:	4912      	ldr	r1, [pc, #72]	; (8009484 <__ulp+0x54>)
 800943a:	4019      	ands	r1, r3
 800943c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009440:	2900      	cmp	r1, #0
 8009442:	dd05      	ble.n	8009450 <__ulp+0x20>
 8009444:	2200      	movs	r2, #0
 8009446:	460b      	mov	r3, r1
 8009448:	ec43 2b10 	vmov	d0, r2, r3
 800944c:	b002      	add	sp, #8
 800944e:	4770      	bx	lr
 8009450:	4249      	negs	r1, r1
 8009452:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009456:	ea4f 5021 	mov.w	r0, r1, asr #20
 800945a:	f04f 0200 	mov.w	r2, #0
 800945e:	f04f 0300 	mov.w	r3, #0
 8009462:	da04      	bge.n	800946e <__ulp+0x3e>
 8009464:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009468:	fa41 f300 	asr.w	r3, r1, r0
 800946c:	e7ec      	b.n	8009448 <__ulp+0x18>
 800946e:	f1a0 0114 	sub.w	r1, r0, #20
 8009472:	291e      	cmp	r1, #30
 8009474:	bfda      	itte	le
 8009476:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800947a:	fa20 f101 	lsrle.w	r1, r0, r1
 800947e:	2101      	movgt	r1, #1
 8009480:	460a      	mov	r2, r1
 8009482:	e7e1      	b.n	8009448 <__ulp+0x18>
 8009484:	7ff00000 	.word	0x7ff00000

08009488 <__b2d>:
 8009488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948a:	6905      	ldr	r5, [r0, #16]
 800948c:	f100 0714 	add.w	r7, r0, #20
 8009490:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009494:	1f2e      	subs	r6, r5, #4
 8009496:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800949a:	4620      	mov	r0, r4
 800949c:	f7ff fd48 	bl	8008f30 <__hi0bits>
 80094a0:	f1c0 0320 	rsb	r3, r0, #32
 80094a4:	280a      	cmp	r0, #10
 80094a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009524 <__b2d+0x9c>
 80094aa:	600b      	str	r3, [r1, #0]
 80094ac:	dc14      	bgt.n	80094d8 <__b2d+0x50>
 80094ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80094b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80094b6:	42b7      	cmp	r7, r6
 80094b8:	ea41 030c 	orr.w	r3, r1, ip
 80094bc:	bf34      	ite	cc
 80094be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80094c2:	2100      	movcs	r1, #0
 80094c4:	3015      	adds	r0, #21
 80094c6:	fa04 f000 	lsl.w	r0, r4, r0
 80094ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80094ce:	ea40 0201 	orr.w	r2, r0, r1
 80094d2:	ec43 2b10 	vmov	d0, r2, r3
 80094d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094d8:	42b7      	cmp	r7, r6
 80094da:	bf3a      	itte	cc
 80094dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80094e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80094e4:	2100      	movcs	r1, #0
 80094e6:	380b      	subs	r0, #11
 80094e8:	d017      	beq.n	800951a <__b2d+0x92>
 80094ea:	f1c0 0c20 	rsb	ip, r0, #32
 80094ee:	fa04 f500 	lsl.w	r5, r4, r0
 80094f2:	42be      	cmp	r6, r7
 80094f4:	fa21 f40c 	lsr.w	r4, r1, ip
 80094f8:	ea45 0504 	orr.w	r5, r5, r4
 80094fc:	bf8c      	ite	hi
 80094fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009502:	2400      	movls	r4, #0
 8009504:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009508:	fa01 f000 	lsl.w	r0, r1, r0
 800950c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009510:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009514:	ea40 0204 	orr.w	r2, r0, r4
 8009518:	e7db      	b.n	80094d2 <__b2d+0x4a>
 800951a:	ea44 030c 	orr.w	r3, r4, ip
 800951e:	460a      	mov	r2, r1
 8009520:	e7d7      	b.n	80094d2 <__b2d+0x4a>
 8009522:	bf00      	nop
 8009524:	3ff00000 	.word	0x3ff00000

08009528 <__d2b>:
 8009528:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800952c:	4689      	mov	r9, r1
 800952e:	2101      	movs	r1, #1
 8009530:	ec57 6b10 	vmov	r6, r7, d0
 8009534:	4690      	mov	r8, r2
 8009536:	f7ff fc09 	bl	8008d4c <_Balloc>
 800953a:	4604      	mov	r4, r0
 800953c:	b930      	cbnz	r0, 800954c <__d2b+0x24>
 800953e:	4602      	mov	r2, r0
 8009540:	4b25      	ldr	r3, [pc, #148]	; (80095d8 <__d2b+0xb0>)
 8009542:	4826      	ldr	r0, [pc, #152]	; (80095dc <__d2b+0xb4>)
 8009544:	f240 310a 	movw	r1, #778	; 0x30a
 8009548:	f000 fb50 	bl	8009bec <__assert_func>
 800954c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009550:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009554:	bb35      	cbnz	r5, 80095a4 <__d2b+0x7c>
 8009556:	2e00      	cmp	r6, #0
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	d028      	beq.n	80095ae <__d2b+0x86>
 800955c:	4668      	mov	r0, sp
 800955e:	9600      	str	r6, [sp, #0]
 8009560:	f7ff fd06 	bl	8008f70 <__lo0bits>
 8009564:	9900      	ldr	r1, [sp, #0]
 8009566:	b300      	cbz	r0, 80095aa <__d2b+0x82>
 8009568:	9a01      	ldr	r2, [sp, #4]
 800956a:	f1c0 0320 	rsb	r3, r0, #32
 800956e:	fa02 f303 	lsl.w	r3, r2, r3
 8009572:	430b      	orrs	r3, r1
 8009574:	40c2      	lsrs	r2, r0
 8009576:	6163      	str	r3, [r4, #20]
 8009578:	9201      	str	r2, [sp, #4]
 800957a:	9b01      	ldr	r3, [sp, #4]
 800957c:	61a3      	str	r3, [r4, #24]
 800957e:	2b00      	cmp	r3, #0
 8009580:	bf14      	ite	ne
 8009582:	2202      	movne	r2, #2
 8009584:	2201      	moveq	r2, #1
 8009586:	6122      	str	r2, [r4, #16]
 8009588:	b1d5      	cbz	r5, 80095c0 <__d2b+0x98>
 800958a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800958e:	4405      	add	r5, r0
 8009590:	f8c9 5000 	str.w	r5, [r9]
 8009594:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009598:	f8c8 0000 	str.w	r0, [r8]
 800959c:	4620      	mov	r0, r4
 800959e:	b003      	add	sp, #12
 80095a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095a8:	e7d5      	b.n	8009556 <__d2b+0x2e>
 80095aa:	6161      	str	r1, [r4, #20]
 80095ac:	e7e5      	b.n	800957a <__d2b+0x52>
 80095ae:	a801      	add	r0, sp, #4
 80095b0:	f7ff fcde 	bl	8008f70 <__lo0bits>
 80095b4:	9b01      	ldr	r3, [sp, #4]
 80095b6:	6163      	str	r3, [r4, #20]
 80095b8:	2201      	movs	r2, #1
 80095ba:	6122      	str	r2, [r4, #16]
 80095bc:	3020      	adds	r0, #32
 80095be:	e7e3      	b.n	8009588 <__d2b+0x60>
 80095c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095c8:	f8c9 0000 	str.w	r0, [r9]
 80095cc:	6918      	ldr	r0, [r3, #16]
 80095ce:	f7ff fcaf 	bl	8008f30 <__hi0bits>
 80095d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095d6:	e7df      	b.n	8009598 <__d2b+0x70>
 80095d8:	0800bea8 	.word	0x0800bea8
 80095dc:	0800bf34 	.word	0x0800bf34

080095e0 <__ratio>:
 80095e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	4688      	mov	r8, r1
 80095e6:	4669      	mov	r1, sp
 80095e8:	4681      	mov	r9, r0
 80095ea:	f7ff ff4d 	bl	8009488 <__b2d>
 80095ee:	a901      	add	r1, sp, #4
 80095f0:	4640      	mov	r0, r8
 80095f2:	ec55 4b10 	vmov	r4, r5, d0
 80095f6:	f7ff ff47 	bl	8009488 <__b2d>
 80095fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009602:	eba3 0c02 	sub.w	ip, r3, r2
 8009606:	e9dd 3200 	ldrd	r3, r2, [sp]
 800960a:	1a9b      	subs	r3, r3, r2
 800960c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009610:	ec51 0b10 	vmov	r0, r1, d0
 8009614:	2b00      	cmp	r3, #0
 8009616:	bfd6      	itet	le
 8009618:	460a      	movle	r2, r1
 800961a:	462a      	movgt	r2, r5
 800961c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009620:	468b      	mov	fp, r1
 8009622:	462f      	mov	r7, r5
 8009624:	bfd4      	ite	le
 8009626:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800962a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800962e:	4620      	mov	r0, r4
 8009630:	ee10 2a10 	vmov	r2, s0
 8009634:	465b      	mov	r3, fp
 8009636:	4639      	mov	r1, r7
 8009638:	f7f7 f930 	bl	800089c <__aeabi_ddiv>
 800963c:	ec41 0b10 	vmov	d0, r0, r1
 8009640:	b003      	add	sp, #12
 8009642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009646 <__copybits>:
 8009646:	3901      	subs	r1, #1
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	1149      	asrs	r1, r1, #5
 800964c:	6914      	ldr	r4, [r2, #16]
 800964e:	3101      	adds	r1, #1
 8009650:	f102 0314 	add.w	r3, r2, #20
 8009654:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009658:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800965c:	1f05      	subs	r5, r0, #4
 800965e:	42a3      	cmp	r3, r4
 8009660:	d30c      	bcc.n	800967c <__copybits+0x36>
 8009662:	1aa3      	subs	r3, r4, r2
 8009664:	3b11      	subs	r3, #17
 8009666:	f023 0303 	bic.w	r3, r3, #3
 800966a:	3211      	adds	r2, #17
 800966c:	42a2      	cmp	r2, r4
 800966e:	bf88      	it	hi
 8009670:	2300      	movhi	r3, #0
 8009672:	4418      	add	r0, r3
 8009674:	2300      	movs	r3, #0
 8009676:	4288      	cmp	r0, r1
 8009678:	d305      	bcc.n	8009686 <__copybits+0x40>
 800967a:	bd70      	pop	{r4, r5, r6, pc}
 800967c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009680:	f845 6f04 	str.w	r6, [r5, #4]!
 8009684:	e7eb      	b.n	800965e <__copybits+0x18>
 8009686:	f840 3b04 	str.w	r3, [r0], #4
 800968a:	e7f4      	b.n	8009676 <__copybits+0x30>

0800968c <__any_on>:
 800968c:	f100 0214 	add.w	r2, r0, #20
 8009690:	6900      	ldr	r0, [r0, #16]
 8009692:	114b      	asrs	r3, r1, #5
 8009694:	4298      	cmp	r0, r3
 8009696:	b510      	push	{r4, lr}
 8009698:	db11      	blt.n	80096be <__any_on+0x32>
 800969a:	dd0a      	ble.n	80096b2 <__any_on+0x26>
 800969c:	f011 011f 	ands.w	r1, r1, #31
 80096a0:	d007      	beq.n	80096b2 <__any_on+0x26>
 80096a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80096a6:	fa24 f001 	lsr.w	r0, r4, r1
 80096aa:	fa00 f101 	lsl.w	r1, r0, r1
 80096ae:	428c      	cmp	r4, r1
 80096b0:	d10b      	bne.n	80096ca <__any_on+0x3e>
 80096b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d803      	bhi.n	80096c2 <__any_on+0x36>
 80096ba:	2000      	movs	r0, #0
 80096bc:	bd10      	pop	{r4, pc}
 80096be:	4603      	mov	r3, r0
 80096c0:	e7f7      	b.n	80096b2 <__any_on+0x26>
 80096c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096c6:	2900      	cmp	r1, #0
 80096c8:	d0f5      	beq.n	80096b6 <__any_on+0x2a>
 80096ca:	2001      	movs	r0, #1
 80096cc:	e7f6      	b.n	80096bc <__any_on+0x30>

080096ce <_calloc_r>:
 80096ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096d0:	fba1 2402 	umull	r2, r4, r1, r2
 80096d4:	b94c      	cbnz	r4, 80096ea <_calloc_r+0x1c>
 80096d6:	4611      	mov	r1, r2
 80096d8:	9201      	str	r2, [sp, #4]
 80096da:	f000 f87b 	bl	80097d4 <_malloc_r>
 80096de:	9a01      	ldr	r2, [sp, #4]
 80096e0:	4605      	mov	r5, r0
 80096e2:	b930      	cbnz	r0, 80096f2 <_calloc_r+0x24>
 80096e4:	4628      	mov	r0, r5
 80096e6:	b003      	add	sp, #12
 80096e8:	bd30      	pop	{r4, r5, pc}
 80096ea:	220c      	movs	r2, #12
 80096ec:	6002      	str	r2, [r0, #0]
 80096ee:	2500      	movs	r5, #0
 80096f0:	e7f8      	b.n	80096e4 <_calloc_r+0x16>
 80096f2:	4621      	mov	r1, r4
 80096f4:	f7fc fbc0 	bl	8005e78 <memset>
 80096f8:	e7f4      	b.n	80096e4 <_calloc_r+0x16>
	...

080096fc <_free_r>:
 80096fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096fe:	2900      	cmp	r1, #0
 8009700:	d044      	beq.n	800978c <_free_r+0x90>
 8009702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009706:	9001      	str	r0, [sp, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	f1a1 0404 	sub.w	r4, r1, #4
 800970e:	bfb8      	it	lt
 8009710:	18e4      	addlt	r4, r4, r3
 8009712:	f000 fab5 	bl	8009c80 <__malloc_lock>
 8009716:	4a1e      	ldr	r2, [pc, #120]	; (8009790 <_free_r+0x94>)
 8009718:	9801      	ldr	r0, [sp, #4]
 800971a:	6813      	ldr	r3, [r2, #0]
 800971c:	b933      	cbnz	r3, 800972c <_free_r+0x30>
 800971e:	6063      	str	r3, [r4, #4]
 8009720:	6014      	str	r4, [r2, #0]
 8009722:	b003      	add	sp, #12
 8009724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009728:	f000 bab0 	b.w	8009c8c <__malloc_unlock>
 800972c:	42a3      	cmp	r3, r4
 800972e:	d908      	bls.n	8009742 <_free_r+0x46>
 8009730:	6825      	ldr	r5, [r4, #0]
 8009732:	1961      	adds	r1, r4, r5
 8009734:	428b      	cmp	r3, r1
 8009736:	bf01      	itttt	eq
 8009738:	6819      	ldreq	r1, [r3, #0]
 800973a:	685b      	ldreq	r3, [r3, #4]
 800973c:	1949      	addeq	r1, r1, r5
 800973e:	6021      	streq	r1, [r4, #0]
 8009740:	e7ed      	b.n	800971e <_free_r+0x22>
 8009742:	461a      	mov	r2, r3
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	b10b      	cbz	r3, 800974c <_free_r+0x50>
 8009748:	42a3      	cmp	r3, r4
 800974a:	d9fa      	bls.n	8009742 <_free_r+0x46>
 800974c:	6811      	ldr	r1, [r2, #0]
 800974e:	1855      	adds	r5, r2, r1
 8009750:	42a5      	cmp	r5, r4
 8009752:	d10b      	bne.n	800976c <_free_r+0x70>
 8009754:	6824      	ldr	r4, [r4, #0]
 8009756:	4421      	add	r1, r4
 8009758:	1854      	adds	r4, r2, r1
 800975a:	42a3      	cmp	r3, r4
 800975c:	6011      	str	r1, [r2, #0]
 800975e:	d1e0      	bne.n	8009722 <_free_r+0x26>
 8009760:	681c      	ldr	r4, [r3, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	6053      	str	r3, [r2, #4]
 8009766:	4421      	add	r1, r4
 8009768:	6011      	str	r1, [r2, #0]
 800976a:	e7da      	b.n	8009722 <_free_r+0x26>
 800976c:	d902      	bls.n	8009774 <_free_r+0x78>
 800976e:	230c      	movs	r3, #12
 8009770:	6003      	str	r3, [r0, #0]
 8009772:	e7d6      	b.n	8009722 <_free_r+0x26>
 8009774:	6825      	ldr	r5, [r4, #0]
 8009776:	1961      	adds	r1, r4, r5
 8009778:	428b      	cmp	r3, r1
 800977a:	bf04      	itt	eq
 800977c:	6819      	ldreq	r1, [r3, #0]
 800977e:	685b      	ldreq	r3, [r3, #4]
 8009780:	6063      	str	r3, [r4, #4]
 8009782:	bf04      	itt	eq
 8009784:	1949      	addeq	r1, r1, r5
 8009786:	6021      	streq	r1, [r4, #0]
 8009788:	6054      	str	r4, [r2, #4]
 800978a:	e7ca      	b.n	8009722 <_free_r+0x26>
 800978c:	b003      	add	sp, #12
 800978e:	bd30      	pop	{r4, r5, pc}
 8009790:	20000834 	.word	0x20000834

08009794 <sbrk_aligned>:
 8009794:	b570      	push	{r4, r5, r6, lr}
 8009796:	4e0e      	ldr	r6, [pc, #56]	; (80097d0 <sbrk_aligned+0x3c>)
 8009798:	460c      	mov	r4, r1
 800979a:	6831      	ldr	r1, [r6, #0]
 800979c:	4605      	mov	r5, r0
 800979e:	b911      	cbnz	r1, 80097a6 <sbrk_aligned+0x12>
 80097a0:	f000 f9f2 	bl	8009b88 <_sbrk_r>
 80097a4:	6030      	str	r0, [r6, #0]
 80097a6:	4621      	mov	r1, r4
 80097a8:	4628      	mov	r0, r5
 80097aa:	f000 f9ed 	bl	8009b88 <_sbrk_r>
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	d00a      	beq.n	80097c8 <sbrk_aligned+0x34>
 80097b2:	1cc4      	adds	r4, r0, #3
 80097b4:	f024 0403 	bic.w	r4, r4, #3
 80097b8:	42a0      	cmp	r0, r4
 80097ba:	d007      	beq.n	80097cc <sbrk_aligned+0x38>
 80097bc:	1a21      	subs	r1, r4, r0
 80097be:	4628      	mov	r0, r5
 80097c0:	f000 f9e2 	bl	8009b88 <_sbrk_r>
 80097c4:	3001      	adds	r0, #1
 80097c6:	d101      	bne.n	80097cc <sbrk_aligned+0x38>
 80097c8:	f04f 34ff 	mov.w	r4, #4294967295
 80097cc:	4620      	mov	r0, r4
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	20000838 	.word	0x20000838

080097d4 <_malloc_r>:
 80097d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d8:	1ccd      	adds	r5, r1, #3
 80097da:	f025 0503 	bic.w	r5, r5, #3
 80097de:	3508      	adds	r5, #8
 80097e0:	2d0c      	cmp	r5, #12
 80097e2:	bf38      	it	cc
 80097e4:	250c      	movcc	r5, #12
 80097e6:	2d00      	cmp	r5, #0
 80097e8:	4607      	mov	r7, r0
 80097ea:	db01      	blt.n	80097f0 <_malloc_r+0x1c>
 80097ec:	42a9      	cmp	r1, r5
 80097ee:	d905      	bls.n	80097fc <_malloc_r+0x28>
 80097f0:	230c      	movs	r3, #12
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	2600      	movs	r6, #0
 80097f6:	4630      	mov	r0, r6
 80097f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097fc:	4e2e      	ldr	r6, [pc, #184]	; (80098b8 <_malloc_r+0xe4>)
 80097fe:	f000 fa3f 	bl	8009c80 <__malloc_lock>
 8009802:	6833      	ldr	r3, [r6, #0]
 8009804:	461c      	mov	r4, r3
 8009806:	bb34      	cbnz	r4, 8009856 <_malloc_r+0x82>
 8009808:	4629      	mov	r1, r5
 800980a:	4638      	mov	r0, r7
 800980c:	f7ff ffc2 	bl	8009794 <sbrk_aligned>
 8009810:	1c43      	adds	r3, r0, #1
 8009812:	4604      	mov	r4, r0
 8009814:	d14d      	bne.n	80098b2 <_malloc_r+0xde>
 8009816:	6834      	ldr	r4, [r6, #0]
 8009818:	4626      	mov	r6, r4
 800981a:	2e00      	cmp	r6, #0
 800981c:	d140      	bne.n	80098a0 <_malloc_r+0xcc>
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	4631      	mov	r1, r6
 8009822:	4638      	mov	r0, r7
 8009824:	eb04 0803 	add.w	r8, r4, r3
 8009828:	f000 f9ae 	bl	8009b88 <_sbrk_r>
 800982c:	4580      	cmp	r8, r0
 800982e:	d13a      	bne.n	80098a6 <_malloc_r+0xd2>
 8009830:	6821      	ldr	r1, [r4, #0]
 8009832:	3503      	adds	r5, #3
 8009834:	1a6d      	subs	r5, r5, r1
 8009836:	f025 0503 	bic.w	r5, r5, #3
 800983a:	3508      	adds	r5, #8
 800983c:	2d0c      	cmp	r5, #12
 800983e:	bf38      	it	cc
 8009840:	250c      	movcc	r5, #12
 8009842:	4629      	mov	r1, r5
 8009844:	4638      	mov	r0, r7
 8009846:	f7ff ffa5 	bl	8009794 <sbrk_aligned>
 800984a:	3001      	adds	r0, #1
 800984c:	d02b      	beq.n	80098a6 <_malloc_r+0xd2>
 800984e:	6823      	ldr	r3, [r4, #0]
 8009850:	442b      	add	r3, r5
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	e00e      	b.n	8009874 <_malloc_r+0xa0>
 8009856:	6822      	ldr	r2, [r4, #0]
 8009858:	1b52      	subs	r2, r2, r5
 800985a:	d41e      	bmi.n	800989a <_malloc_r+0xc6>
 800985c:	2a0b      	cmp	r2, #11
 800985e:	d916      	bls.n	800988e <_malloc_r+0xba>
 8009860:	1961      	adds	r1, r4, r5
 8009862:	42a3      	cmp	r3, r4
 8009864:	6025      	str	r5, [r4, #0]
 8009866:	bf18      	it	ne
 8009868:	6059      	strne	r1, [r3, #4]
 800986a:	6863      	ldr	r3, [r4, #4]
 800986c:	bf08      	it	eq
 800986e:	6031      	streq	r1, [r6, #0]
 8009870:	5162      	str	r2, [r4, r5]
 8009872:	604b      	str	r3, [r1, #4]
 8009874:	4638      	mov	r0, r7
 8009876:	f104 060b 	add.w	r6, r4, #11
 800987a:	f000 fa07 	bl	8009c8c <__malloc_unlock>
 800987e:	f026 0607 	bic.w	r6, r6, #7
 8009882:	1d23      	adds	r3, r4, #4
 8009884:	1af2      	subs	r2, r6, r3
 8009886:	d0b6      	beq.n	80097f6 <_malloc_r+0x22>
 8009888:	1b9b      	subs	r3, r3, r6
 800988a:	50a3      	str	r3, [r4, r2]
 800988c:	e7b3      	b.n	80097f6 <_malloc_r+0x22>
 800988e:	6862      	ldr	r2, [r4, #4]
 8009890:	42a3      	cmp	r3, r4
 8009892:	bf0c      	ite	eq
 8009894:	6032      	streq	r2, [r6, #0]
 8009896:	605a      	strne	r2, [r3, #4]
 8009898:	e7ec      	b.n	8009874 <_malloc_r+0xa0>
 800989a:	4623      	mov	r3, r4
 800989c:	6864      	ldr	r4, [r4, #4]
 800989e:	e7b2      	b.n	8009806 <_malloc_r+0x32>
 80098a0:	4634      	mov	r4, r6
 80098a2:	6876      	ldr	r6, [r6, #4]
 80098a4:	e7b9      	b.n	800981a <_malloc_r+0x46>
 80098a6:	230c      	movs	r3, #12
 80098a8:	603b      	str	r3, [r7, #0]
 80098aa:	4638      	mov	r0, r7
 80098ac:	f000 f9ee 	bl	8009c8c <__malloc_unlock>
 80098b0:	e7a1      	b.n	80097f6 <_malloc_r+0x22>
 80098b2:	6025      	str	r5, [r4, #0]
 80098b4:	e7de      	b.n	8009874 <_malloc_r+0xa0>
 80098b6:	bf00      	nop
 80098b8:	20000834 	.word	0x20000834

080098bc <__ssputs_r>:
 80098bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c0:	688e      	ldr	r6, [r1, #8]
 80098c2:	429e      	cmp	r6, r3
 80098c4:	4682      	mov	sl, r0
 80098c6:	460c      	mov	r4, r1
 80098c8:	4690      	mov	r8, r2
 80098ca:	461f      	mov	r7, r3
 80098cc:	d838      	bhi.n	8009940 <__ssputs_r+0x84>
 80098ce:	898a      	ldrh	r2, [r1, #12]
 80098d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098d4:	d032      	beq.n	800993c <__ssputs_r+0x80>
 80098d6:	6825      	ldr	r5, [r4, #0]
 80098d8:	6909      	ldr	r1, [r1, #16]
 80098da:	eba5 0901 	sub.w	r9, r5, r1
 80098de:	6965      	ldr	r5, [r4, #20]
 80098e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098e8:	3301      	adds	r3, #1
 80098ea:	444b      	add	r3, r9
 80098ec:	106d      	asrs	r5, r5, #1
 80098ee:	429d      	cmp	r5, r3
 80098f0:	bf38      	it	cc
 80098f2:	461d      	movcc	r5, r3
 80098f4:	0553      	lsls	r3, r2, #21
 80098f6:	d531      	bpl.n	800995c <__ssputs_r+0xa0>
 80098f8:	4629      	mov	r1, r5
 80098fa:	f7ff ff6b 	bl	80097d4 <_malloc_r>
 80098fe:	4606      	mov	r6, r0
 8009900:	b950      	cbnz	r0, 8009918 <__ssputs_r+0x5c>
 8009902:	230c      	movs	r3, #12
 8009904:	f8ca 3000 	str.w	r3, [sl]
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800990e:	81a3      	strh	r3, [r4, #12]
 8009910:	f04f 30ff 	mov.w	r0, #4294967295
 8009914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009918:	6921      	ldr	r1, [r4, #16]
 800991a:	464a      	mov	r2, r9
 800991c:	f7ff fa08 	bl	8008d30 <memcpy>
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800992a:	81a3      	strh	r3, [r4, #12]
 800992c:	6126      	str	r6, [r4, #16]
 800992e:	6165      	str	r5, [r4, #20]
 8009930:	444e      	add	r6, r9
 8009932:	eba5 0509 	sub.w	r5, r5, r9
 8009936:	6026      	str	r6, [r4, #0]
 8009938:	60a5      	str	r5, [r4, #8]
 800993a:	463e      	mov	r6, r7
 800993c:	42be      	cmp	r6, r7
 800993e:	d900      	bls.n	8009942 <__ssputs_r+0x86>
 8009940:	463e      	mov	r6, r7
 8009942:	6820      	ldr	r0, [r4, #0]
 8009944:	4632      	mov	r2, r6
 8009946:	4641      	mov	r1, r8
 8009948:	f000 f980 	bl	8009c4c <memmove>
 800994c:	68a3      	ldr	r3, [r4, #8]
 800994e:	1b9b      	subs	r3, r3, r6
 8009950:	60a3      	str	r3, [r4, #8]
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	4433      	add	r3, r6
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	2000      	movs	r0, #0
 800995a:	e7db      	b.n	8009914 <__ssputs_r+0x58>
 800995c:	462a      	mov	r2, r5
 800995e:	f000 f99b 	bl	8009c98 <_realloc_r>
 8009962:	4606      	mov	r6, r0
 8009964:	2800      	cmp	r0, #0
 8009966:	d1e1      	bne.n	800992c <__ssputs_r+0x70>
 8009968:	6921      	ldr	r1, [r4, #16]
 800996a:	4650      	mov	r0, sl
 800996c:	f7ff fec6 	bl	80096fc <_free_r>
 8009970:	e7c7      	b.n	8009902 <__ssputs_r+0x46>
	...

08009974 <_svfiprintf_r>:
 8009974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009978:	4698      	mov	r8, r3
 800997a:	898b      	ldrh	r3, [r1, #12]
 800997c:	061b      	lsls	r3, r3, #24
 800997e:	b09d      	sub	sp, #116	; 0x74
 8009980:	4607      	mov	r7, r0
 8009982:	460d      	mov	r5, r1
 8009984:	4614      	mov	r4, r2
 8009986:	d50e      	bpl.n	80099a6 <_svfiprintf_r+0x32>
 8009988:	690b      	ldr	r3, [r1, #16]
 800998a:	b963      	cbnz	r3, 80099a6 <_svfiprintf_r+0x32>
 800998c:	2140      	movs	r1, #64	; 0x40
 800998e:	f7ff ff21 	bl	80097d4 <_malloc_r>
 8009992:	6028      	str	r0, [r5, #0]
 8009994:	6128      	str	r0, [r5, #16]
 8009996:	b920      	cbnz	r0, 80099a2 <_svfiprintf_r+0x2e>
 8009998:	230c      	movs	r3, #12
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	f04f 30ff 	mov.w	r0, #4294967295
 80099a0:	e0d1      	b.n	8009b46 <_svfiprintf_r+0x1d2>
 80099a2:	2340      	movs	r3, #64	; 0x40
 80099a4:	616b      	str	r3, [r5, #20]
 80099a6:	2300      	movs	r3, #0
 80099a8:	9309      	str	r3, [sp, #36]	; 0x24
 80099aa:	2320      	movs	r3, #32
 80099ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80099b4:	2330      	movs	r3, #48	; 0x30
 80099b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b60 <_svfiprintf_r+0x1ec>
 80099ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099be:	f04f 0901 	mov.w	r9, #1
 80099c2:	4623      	mov	r3, r4
 80099c4:	469a      	mov	sl, r3
 80099c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ca:	b10a      	cbz	r2, 80099d0 <_svfiprintf_r+0x5c>
 80099cc:	2a25      	cmp	r2, #37	; 0x25
 80099ce:	d1f9      	bne.n	80099c4 <_svfiprintf_r+0x50>
 80099d0:	ebba 0b04 	subs.w	fp, sl, r4
 80099d4:	d00b      	beq.n	80099ee <_svfiprintf_r+0x7a>
 80099d6:	465b      	mov	r3, fp
 80099d8:	4622      	mov	r2, r4
 80099da:	4629      	mov	r1, r5
 80099dc:	4638      	mov	r0, r7
 80099de:	f7ff ff6d 	bl	80098bc <__ssputs_r>
 80099e2:	3001      	adds	r0, #1
 80099e4:	f000 80aa 	beq.w	8009b3c <_svfiprintf_r+0x1c8>
 80099e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099ea:	445a      	add	r2, fp
 80099ec:	9209      	str	r2, [sp, #36]	; 0x24
 80099ee:	f89a 3000 	ldrb.w	r3, [sl]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 80a2 	beq.w	8009b3c <_svfiprintf_r+0x1c8>
 80099f8:	2300      	movs	r3, #0
 80099fa:	f04f 32ff 	mov.w	r2, #4294967295
 80099fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a02:	f10a 0a01 	add.w	sl, sl, #1
 8009a06:	9304      	str	r3, [sp, #16]
 8009a08:	9307      	str	r3, [sp, #28]
 8009a0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a0e:	931a      	str	r3, [sp, #104]	; 0x68
 8009a10:	4654      	mov	r4, sl
 8009a12:	2205      	movs	r2, #5
 8009a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a18:	4851      	ldr	r0, [pc, #324]	; (8009b60 <_svfiprintf_r+0x1ec>)
 8009a1a:	f7f6 fc09 	bl	8000230 <memchr>
 8009a1e:	9a04      	ldr	r2, [sp, #16]
 8009a20:	b9d8      	cbnz	r0, 8009a5a <_svfiprintf_r+0xe6>
 8009a22:	06d0      	lsls	r0, r2, #27
 8009a24:	bf44      	itt	mi
 8009a26:	2320      	movmi	r3, #32
 8009a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a2c:	0711      	lsls	r1, r2, #28
 8009a2e:	bf44      	itt	mi
 8009a30:	232b      	movmi	r3, #43	; 0x2b
 8009a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a36:	f89a 3000 	ldrb.w	r3, [sl]
 8009a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a3c:	d015      	beq.n	8009a6a <_svfiprintf_r+0xf6>
 8009a3e:	9a07      	ldr	r2, [sp, #28]
 8009a40:	4654      	mov	r4, sl
 8009a42:	2000      	movs	r0, #0
 8009a44:	f04f 0c0a 	mov.w	ip, #10
 8009a48:	4621      	mov	r1, r4
 8009a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a4e:	3b30      	subs	r3, #48	; 0x30
 8009a50:	2b09      	cmp	r3, #9
 8009a52:	d94e      	bls.n	8009af2 <_svfiprintf_r+0x17e>
 8009a54:	b1b0      	cbz	r0, 8009a84 <_svfiprintf_r+0x110>
 8009a56:	9207      	str	r2, [sp, #28]
 8009a58:	e014      	b.n	8009a84 <_svfiprintf_r+0x110>
 8009a5a:	eba0 0308 	sub.w	r3, r0, r8
 8009a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8009a62:	4313      	orrs	r3, r2
 8009a64:	9304      	str	r3, [sp, #16]
 8009a66:	46a2      	mov	sl, r4
 8009a68:	e7d2      	b.n	8009a10 <_svfiprintf_r+0x9c>
 8009a6a:	9b03      	ldr	r3, [sp, #12]
 8009a6c:	1d19      	adds	r1, r3, #4
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	9103      	str	r1, [sp, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	bfbb      	ittet	lt
 8009a76:	425b      	neglt	r3, r3
 8009a78:	f042 0202 	orrlt.w	r2, r2, #2
 8009a7c:	9307      	strge	r3, [sp, #28]
 8009a7e:	9307      	strlt	r3, [sp, #28]
 8009a80:	bfb8      	it	lt
 8009a82:	9204      	strlt	r2, [sp, #16]
 8009a84:	7823      	ldrb	r3, [r4, #0]
 8009a86:	2b2e      	cmp	r3, #46	; 0x2e
 8009a88:	d10c      	bne.n	8009aa4 <_svfiprintf_r+0x130>
 8009a8a:	7863      	ldrb	r3, [r4, #1]
 8009a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a8e:	d135      	bne.n	8009afc <_svfiprintf_r+0x188>
 8009a90:	9b03      	ldr	r3, [sp, #12]
 8009a92:	1d1a      	adds	r2, r3, #4
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	9203      	str	r2, [sp, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	bfb8      	it	lt
 8009a9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009aa0:	3402      	adds	r4, #2
 8009aa2:	9305      	str	r3, [sp, #20]
 8009aa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b70 <_svfiprintf_r+0x1fc>
 8009aa8:	7821      	ldrb	r1, [r4, #0]
 8009aaa:	2203      	movs	r2, #3
 8009aac:	4650      	mov	r0, sl
 8009aae:	f7f6 fbbf 	bl	8000230 <memchr>
 8009ab2:	b140      	cbz	r0, 8009ac6 <_svfiprintf_r+0x152>
 8009ab4:	2340      	movs	r3, #64	; 0x40
 8009ab6:	eba0 000a 	sub.w	r0, r0, sl
 8009aba:	fa03 f000 	lsl.w	r0, r3, r0
 8009abe:	9b04      	ldr	r3, [sp, #16]
 8009ac0:	4303      	orrs	r3, r0
 8009ac2:	3401      	adds	r4, #1
 8009ac4:	9304      	str	r3, [sp, #16]
 8009ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aca:	4826      	ldr	r0, [pc, #152]	; (8009b64 <_svfiprintf_r+0x1f0>)
 8009acc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ad0:	2206      	movs	r2, #6
 8009ad2:	f7f6 fbad 	bl	8000230 <memchr>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d038      	beq.n	8009b4c <_svfiprintf_r+0x1d8>
 8009ada:	4b23      	ldr	r3, [pc, #140]	; (8009b68 <_svfiprintf_r+0x1f4>)
 8009adc:	bb1b      	cbnz	r3, 8009b26 <_svfiprintf_r+0x1b2>
 8009ade:	9b03      	ldr	r3, [sp, #12]
 8009ae0:	3307      	adds	r3, #7
 8009ae2:	f023 0307 	bic.w	r3, r3, #7
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	9303      	str	r3, [sp, #12]
 8009aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aec:	4433      	add	r3, r6
 8009aee:	9309      	str	r3, [sp, #36]	; 0x24
 8009af0:	e767      	b.n	80099c2 <_svfiprintf_r+0x4e>
 8009af2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009af6:	460c      	mov	r4, r1
 8009af8:	2001      	movs	r0, #1
 8009afa:	e7a5      	b.n	8009a48 <_svfiprintf_r+0xd4>
 8009afc:	2300      	movs	r3, #0
 8009afe:	3401      	adds	r4, #1
 8009b00:	9305      	str	r3, [sp, #20]
 8009b02:	4619      	mov	r1, r3
 8009b04:	f04f 0c0a 	mov.w	ip, #10
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b0e:	3a30      	subs	r2, #48	; 0x30
 8009b10:	2a09      	cmp	r2, #9
 8009b12:	d903      	bls.n	8009b1c <_svfiprintf_r+0x1a8>
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d0c5      	beq.n	8009aa4 <_svfiprintf_r+0x130>
 8009b18:	9105      	str	r1, [sp, #20]
 8009b1a:	e7c3      	b.n	8009aa4 <_svfiprintf_r+0x130>
 8009b1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b20:	4604      	mov	r4, r0
 8009b22:	2301      	movs	r3, #1
 8009b24:	e7f0      	b.n	8009b08 <_svfiprintf_r+0x194>
 8009b26:	ab03      	add	r3, sp, #12
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	462a      	mov	r2, r5
 8009b2c:	4b0f      	ldr	r3, [pc, #60]	; (8009b6c <_svfiprintf_r+0x1f8>)
 8009b2e:	a904      	add	r1, sp, #16
 8009b30:	4638      	mov	r0, r7
 8009b32:	f7fc fa49 	bl	8005fc8 <_printf_float>
 8009b36:	1c42      	adds	r2, r0, #1
 8009b38:	4606      	mov	r6, r0
 8009b3a:	d1d6      	bne.n	8009aea <_svfiprintf_r+0x176>
 8009b3c:	89ab      	ldrh	r3, [r5, #12]
 8009b3e:	065b      	lsls	r3, r3, #25
 8009b40:	f53f af2c 	bmi.w	800999c <_svfiprintf_r+0x28>
 8009b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b46:	b01d      	add	sp, #116	; 0x74
 8009b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4c:	ab03      	add	r3, sp, #12
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	462a      	mov	r2, r5
 8009b52:	4b06      	ldr	r3, [pc, #24]	; (8009b6c <_svfiprintf_r+0x1f8>)
 8009b54:	a904      	add	r1, sp, #16
 8009b56:	4638      	mov	r0, r7
 8009b58:	f7fc fcda 	bl	8006510 <_printf_i>
 8009b5c:	e7eb      	b.n	8009b36 <_svfiprintf_r+0x1c2>
 8009b5e:	bf00      	nop
 8009b60:	0800c08c 	.word	0x0800c08c
 8009b64:	0800c096 	.word	0x0800c096
 8009b68:	08005fc9 	.word	0x08005fc9
 8009b6c:	080098bd 	.word	0x080098bd
 8009b70:	0800c092 	.word	0x0800c092
 8009b74:	00000000 	.word	0x00000000

08009b78 <nan>:
 8009b78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009b80 <nan+0x8>
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	00000000 	.word	0x00000000
 8009b84:	7ff80000 	.word	0x7ff80000

08009b88 <_sbrk_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	4d06      	ldr	r5, [pc, #24]	; (8009ba4 <_sbrk_r+0x1c>)
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	4604      	mov	r4, r0
 8009b90:	4608      	mov	r0, r1
 8009b92:	602b      	str	r3, [r5, #0]
 8009b94:	f7f8 fa60 	bl	8002058 <_sbrk>
 8009b98:	1c43      	adds	r3, r0, #1
 8009b9a:	d102      	bne.n	8009ba2 <_sbrk_r+0x1a>
 8009b9c:	682b      	ldr	r3, [r5, #0]
 8009b9e:	b103      	cbz	r3, 8009ba2 <_sbrk_r+0x1a>
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	bd38      	pop	{r3, r4, r5, pc}
 8009ba4:	2000083c 	.word	0x2000083c

08009ba8 <strncmp>:
 8009ba8:	b510      	push	{r4, lr}
 8009baa:	b17a      	cbz	r2, 8009bcc <strncmp+0x24>
 8009bac:	4603      	mov	r3, r0
 8009bae:	3901      	subs	r1, #1
 8009bb0:	1884      	adds	r4, r0, r2
 8009bb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009bb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009bba:	4290      	cmp	r0, r2
 8009bbc:	d101      	bne.n	8009bc2 <strncmp+0x1a>
 8009bbe:	42a3      	cmp	r3, r4
 8009bc0:	d101      	bne.n	8009bc6 <strncmp+0x1e>
 8009bc2:	1a80      	subs	r0, r0, r2
 8009bc4:	bd10      	pop	{r4, pc}
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d1f3      	bne.n	8009bb2 <strncmp+0xa>
 8009bca:	e7fa      	b.n	8009bc2 <strncmp+0x1a>
 8009bcc:	4610      	mov	r0, r2
 8009bce:	e7f9      	b.n	8009bc4 <strncmp+0x1c>

08009bd0 <__ascii_wctomb>:
 8009bd0:	b149      	cbz	r1, 8009be6 <__ascii_wctomb+0x16>
 8009bd2:	2aff      	cmp	r2, #255	; 0xff
 8009bd4:	bf85      	ittet	hi
 8009bd6:	238a      	movhi	r3, #138	; 0x8a
 8009bd8:	6003      	strhi	r3, [r0, #0]
 8009bda:	700a      	strbls	r2, [r1, #0]
 8009bdc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009be0:	bf98      	it	ls
 8009be2:	2001      	movls	r0, #1
 8009be4:	4770      	bx	lr
 8009be6:	4608      	mov	r0, r1
 8009be8:	4770      	bx	lr
	...

08009bec <__assert_func>:
 8009bec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bee:	4614      	mov	r4, r2
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	4b09      	ldr	r3, [pc, #36]	; (8009c18 <__assert_func+0x2c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4605      	mov	r5, r0
 8009bf8:	68d8      	ldr	r0, [r3, #12]
 8009bfa:	b14c      	cbz	r4, 8009c10 <__assert_func+0x24>
 8009bfc:	4b07      	ldr	r3, [pc, #28]	; (8009c1c <__assert_func+0x30>)
 8009bfe:	9100      	str	r1, [sp, #0]
 8009c00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c04:	4906      	ldr	r1, [pc, #24]	; (8009c20 <__assert_func+0x34>)
 8009c06:	462b      	mov	r3, r5
 8009c08:	f000 f80e 	bl	8009c28 <fiprintf>
 8009c0c:	f000 fa8c 	bl	800a128 <abort>
 8009c10:	4b04      	ldr	r3, [pc, #16]	; (8009c24 <__assert_func+0x38>)
 8009c12:	461c      	mov	r4, r3
 8009c14:	e7f3      	b.n	8009bfe <__assert_func+0x12>
 8009c16:	bf00      	nop
 8009c18:	20000024 	.word	0x20000024
 8009c1c:	0800c09d 	.word	0x0800c09d
 8009c20:	0800c0aa 	.word	0x0800c0aa
 8009c24:	0800c0d8 	.word	0x0800c0d8

08009c28 <fiprintf>:
 8009c28:	b40e      	push	{r1, r2, r3}
 8009c2a:	b503      	push	{r0, r1, lr}
 8009c2c:	4601      	mov	r1, r0
 8009c2e:	ab03      	add	r3, sp, #12
 8009c30:	4805      	ldr	r0, [pc, #20]	; (8009c48 <fiprintf+0x20>)
 8009c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c36:	6800      	ldr	r0, [r0, #0]
 8009c38:	9301      	str	r3, [sp, #4]
 8009c3a:	f000 f885 	bl	8009d48 <_vfiprintf_r>
 8009c3e:	b002      	add	sp, #8
 8009c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c44:	b003      	add	sp, #12
 8009c46:	4770      	bx	lr
 8009c48:	20000024 	.word	0x20000024

08009c4c <memmove>:
 8009c4c:	4288      	cmp	r0, r1
 8009c4e:	b510      	push	{r4, lr}
 8009c50:	eb01 0402 	add.w	r4, r1, r2
 8009c54:	d902      	bls.n	8009c5c <memmove+0x10>
 8009c56:	4284      	cmp	r4, r0
 8009c58:	4623      	mov	r3, r4
 8009c5a:	d807      	bhi.n	8009c6c <memmove+0x20>
 8009c5c:	1e43      	subs	r3, r0, #1
 8009c5e:	42a1      	cmp	r1, r4
 8009c60:	d008      	beq.n	8009c74 <memmove+0x28>
 8009c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c6a:	e7f8      	b.n	8009c5e <memmove+0x12>
 8009c6c:	4402      	add	r2, r0
 8009c6e:	4601      	mov	r1, r0
 8009c70:	428a      	cmp	r2, r1
 8009c72:	d100      	bne.n	8009c76 <memmove+0x2a>
 8009c74:	bd10      	pop	{r4, pc}
 8009c76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c7e:	e7f7      	b.n	8009c70 <memmove+0x24>

08009c80 <__malloc_lock>:
 8009c80:	4801      	ldr	r0, [pc, #4]	; (8009c88 <__malloc_lock+0x8>)
 8009c82:	f000 bc11 	b.w	800a4a8 <__retarget_lock_acquire_recursive>
 8009c86:	bf00      	nop
 8009c88:	20000840 	.word	0x20000840

08009c8c <__malloc_unlock>:
 8009c8c:	4801      	ldr	r0, [pc, #4]	; (8009c94 <__malloc_unlock+0x8>)
 8009c8e:	f000 bc0c 	b.w	800a4aa <__retarget_lock_release_recursive>
 8009c92:	bf00      	nop
 8009c94:	20000840 	.word	0x20000840

08009c98 <_realloc_r>:
 8009c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9c:	4680      	mov	r8, r0
 8009c9e:	4614      	mov	r4, r2
 8009ca0:	460e      	mov	r6, r1
 8009ca2:	b921      	cbnz	r1, 8009cae <_realloc_r+0x16>
 8009ca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca8:	4611      	mov	r1, r2
 8009caa:	f7ff bd93 	b.w	80097d4 <_malloc_r>
 8009cae:	b92a      	cbnz	r2, 8009cbc <_realloc_r+0x24>
 8009cb0:	f7ff fd24 	bl	80096fc <_free_r>
 8009cb4:	4625      	mov	r5, r4
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cbc:	f000 fc5c 	bl	800a578 <_malloc_usable_size_r>
 8009cc0:	4284      	cmp	r4, r0
 8009cc2:	4607      	mov	r7, r0
 8009cc4:	d802      	bhi.n	8009ccc <_realloc_r+0x34>
 8009cc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cca:	d812      	bhi.n	8009cf2 <_realloc_r+0x5a>
 8009ccc:	4621      	mov	r1, r4
 8009cce:	4640      	mov	r0, r8
 8009cd0:	f7ff fd80 	bl	80097d4 <_malloc_r>
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	d0ed      	beq.n	8009cb6 <_realloc_r+0x1e>
 8009cda:	42bc      	cmp	r4, r7
 8009cdc:	4622      	mov	r2, r4
 8009cde:	4631      	mov	r1, r6
 8009ce0:	bf28      	it	cs
 8009ce2:	463a      	movcs	r2, r7
 8009ce4:	f7ff f824 	bl	8008d30 <memcpy>
 8009ce8:	4631      	mov	r1, r6
 8009cea:	4640      	mov	r0, r8
 8009cec:	f7ff fd06 	bl	80096fc <_free_r>
 8009cf0:	e7e1      	b.n	8009cb6 <_realloc_r+0x1e>
 8009cf2:	4635      	mov	r5, r6
 8009cf4:	e7df      	b.n	8009cb6 <_realloc_r+0x1e>

08009cf6 <__sfputc_r>:
 8009cf6:	6893      	ldr	r3, [r2, #8]
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	b410      	push	{r4}
 8009cfe:	6093      	str	r3, [r2, #8]
 8009d00:	da08      	bge.n	8009d14 <__sfputc_r+0x1e>
 8009d02:	6994      	ldr	r4, [r2, #24]
 8009d04:	42a3      	cmp	r3, r4
 8009d06:	db01      	blt.n	8009d0c <__sfputc_r+0x16>
 8009d08:	290a      	cmp	r1, #10
 8009d0a:	d103      	bne.n	8009d14 <__sfputc_r+0x1e>
 8009d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d10:	f000 b94a 	b.w	8009fa8 <__swbuf_r>
 8009d14:	6813      	ldr	r3, [r2, #0]
 8009d16:	1c58      	adds	r0, r3, #1
 8009d18:	6010      	str	r0, [r2, #0]
 8009d1a:	7019      	strb	r1, [r3, #0]
 8009d1c:	4608      	mov	r0, r1
 8009d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <__sfputs_r>:
 8009d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d26:	4606      	mov	r6, r0
 8009d28:	460f      	mov	r7, r1
 8009d2a:	4614      	mov	r4, r2
 8009d2c:	18d5      	adds	r5, r2, r3
 8009d2e:	42ac      	cmp	r4, r5
 8009d30:	d101      	bne.n	8009d36 <__sfputs_r+0x12>
 8009d32:	2000      	movs	r0, #0
 8009d34:	e007      	b.n	8009d46 <__sfputs_r+0x22>
 8009d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d3a:	463a      	mov	r2, r7
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	f7ff ffda 	bl	8009cf6 <__sfputc_r>
 8009d42:	1c43      	adds	r3, r0, #1
 8009d44:	d1f3      	bne.n	8009d2e <__sfputs_r+0xa>
 8009d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d48 <_vfiprintf_r>:
 8009d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	460d      	mov	r5, r1
 8009d4e:	b09d      	sub	sp, #116	; 0x74
 8009d50:	4614      	mov	r4, r2
 8009d52:	4698      	mov	r8, r3
 8009d54:	4606      	mov	r6, r0
 8009d56:	b118      	cbz	r0, 8009d60 <_vfiprintf_r+0x18>
 8009d58:	6983      	ldr	r3, [r0, #24]
 8009d5a:	b90b      	cbnz	r3, 8009d60 <_vfiprintf_r+0x18>
 8009d5c:	f000 fb06 	bl	800a36c <__sinit>
 8009d60:	4b89      	ldr	r3, [pc, #548]	; (8009f88 <_vfiprintf_r+0x240>)
 8009d62:	429d      	cmp	r5, r3
 8009d64:	d11b      	bne.n	8009d9e <_vfiprintf_r+0x56>
 8009d66:	6875      	ldr	r5, [r6, #4]
 8009d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d6a:	07d9      	lsls	r1, r3, #31
 8009d6c:	d405      	bmi.n	8009d7a <_vfiprintf_r+0x32>
 8009d6e:	89ab      	ldrh	r3, [r5, #12]
 8009d70:	059a      	lsls	r2, r3, #22
 8009d72:	d402      	bmi.n	8009d7a <_vfiprintf_r+0x32>
 8009d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d76:	f000 fb97 	bl	800a4a8 <__retarget_lock_acquire_recursive>
 8009d7a:	89ab      	ldrh	r3, [r5, #12]
 8009d7c:	071b      	lsls	r3, r3, #28
 8009d7e:	d501      	bpl.n	8009d84 <_vfiprintf_r+0x3c>
 8009d80:	692b      	ldr	r3, [r5, #16]
 8009d82:	b9eb      	cbnz	r3, 8009dc0 <_vfiprintf_r+0x78>
 8009d84:	4629      	mov	r1, r5
 8009d86:	4630      	mov	r0, r6
 8009d88:	f000 f960 	bl	800a04c <__swsetup_r>
 8009d8c:	b1c0      	cbz	r0, 8009dc0 <_vfiprintf_r+0x78>
 8009d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d90:	07dc      	lsls	r4, r3, #31
 8009d92:	d50e      	bpl.n	8009db2 <_vfiprintf_r+0x6a>
 8009d94:	f04f 30ff 	mov.w	r0, #4294967295
 8009d98:	b01d      	add	sp, #116	; 0x74
 8009d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9e:	4b7b      	ldr	r3, [pc, #492]	; (8009f8c <_vfiprintf_r+0x244>)
 8009da0:	429d      	cmp	r5, r3
 8009da2:	d101      	bne.n	8009da8 <_vfiprintf_r+0x60>
 8009da4:	68b5      	ldr	r5, [r6, #8]
 8009da6:	e7df      	b.n	8009d68 <_vfiprintf_r+0x20>
 8009da8:	4b79      	ldr	r3, [pc, #484]	; (8009f90 <_vfiprintf_r+0x248>)
 8009daa:	429d      	cmp	r5, r3
 8009dac:	bf08      	it	eq
 8009dae:	68f5      	ldreq	r5, [r6, #12]
 8009db0:	e7da      	b.n	8009d68 <_vfiprintf_r+0x20>
 8009db2:	89ab      	ldrh	r3, [r5, #12]
 8009db4:	0598      	lsls	r0, r3, #22
 8009db6:	d4ed      	bmi.n	8009d94 <_vfiprintf_r+0x4c>
 8009db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dba:	f000 fb76 	bl	800a4aa <__retarget_lock_release_recursive>
 8009dbe:	e7e9      	b.n	8009d94 <_vfiprintf_r+0x4c>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc4:	2320      	movs	r3, #32
 8009dc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dca:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dce:	2330      	movs	r3, #48	; 0x30
 8009dd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f94 <_vfiprintf_r+0x24c>
 8009dd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dd8:	f04f 0901 	mov.w	r9, #1
 8009ddc:	4623      	mov	r3, r4
 8009dde:	469a      	mov	sl, r3
 8009de0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009de4:	b10a      	cbz	r2, 8009dea <_vfiprintf_r+0xa2>
 8009de6:	2a25      	cmp	r2, #37	; 0x25
 8009de8:	d1f9      	bne.n	8009dde <_vfiprintf_r+0x96>
 8009dea:	ebba 0b04 	subs.w	fp, sl, r4
 8009dee:	d00b      	beq.n	8009e08 <_vfiprintf_r+0xc0>
 8009df0:	465b      	mov	r3, fp
 8009df2:	4622      	mov	r2, r4
 8009df4:	4629      	mov	r1, r5
 8009df6:	4630      	mov	r0, r6
 8009df8:	f7ff ff94 	bl	8009d24 <__sfputs_r>
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	f000 80aa 	beq.w	8009f56 <_vfiprintf_r+0x20e>
 8009e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e04:	445a      	add	r2, fp
 8009e06:	9209      	str	r2, [sp, #36]	; 0x24
 8009e08:	f89a 3000 	ldrb.w	r3, [sl]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 80a2 	beq.w	8009f56 <_vfiprintf_r+0x20e>
 8009e12:	2300      	movs	r3, #0
 8009e14:	f04f 32ff 	mov.w	r2, #4294967295
 8009e18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e1c:	f10a 0a01 	add.w	sl, sl, #1
 8009e20:	9304      	str	r3, [sp, #16]
 8009e22:	9307      	str	r3, [sp, #28]
 8009e24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e28:	931a      	str	r3, [sp, #104]	; 0x68
 8009e2a:	4654      	mov	r4, sl
 8009e2c:	2205      	movs	r2, #5
 8009e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e32:	4858      	ldr	r0, [pc, #352]	; (8009f94 <_vfiprintf_r+0x24c>)
 8009e34:	f7f6 f9fc 	bl	8000230 <memchr>
 8009e38:	9a04      	ldr	r2, [sp, #16]
 8009e3a:	b9d8      	cbnz	r0, 8009e74 <_vfiprintf_r+0x12c>
 8009e3c:	06d1      	lsls	r1, r2, #27
 8009e3e:	bf44      	itt	mi
 8009e40:	2320      	movmi	r3, #32
 8009e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e46:	0713      	lsls	r3, r2, #28
 8009e48:	bf44      	itt	mi
 8009e4a:	232b      	movmi	r3, #43	; 0x2b
 8009e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e50:	f89a 3000 	ldrb.w	r3, [sl]
 8009e54:	2b2a      	cmp	r3, #42	; 0x2a
 8009e56:	d015      	beq.n	8009e84 <_vfiprintf_r+0x13c>
 8009e58:	9a07      	ldr	r2, [sp, #28]
 8009e5a:	4654      	mov	r4, sl
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	f04f 0c0a 	mov.w	ip, #10
 8009e62:	4621      	mov	r1, r4
 8009e64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e68:	3b30      	subs	r3, #48	; 0x30
 8009e6a:	2b09      	cmp	r3, #9
 8009e6c:	d94e      	bls.n	8009f0c <_vfiprintf_r+0x1c4>
 8009e6e:	b1b0      	cbz	r0, 8009e9e <_vfiprintf_r+0x156>
 8009e70:	9207      	str	r2, [sp, #28]
 8009e72:	e014      	b.n	8009e9e <_vfiprintf_r+0x156>
 8009e74:	eba0 0308 	sub.w	r3, r0, r8
 8009e78:	fa09 f303 	lsl.w	r3, r9, r3
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	9304      	str	r3, [sp, #16]
 8009e80:	46a2      	mov	sl, r4
 8009e82:	e7d2      	b.n	8009e2a <_vfiprintf_r+0xe2>
 8009e84:	9b03      	ldr	r3, [sp, #12]
 8009e86:	1d19      	adds	r1, r3, #4
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	9103      	str	r1, [sp, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	bfbb      	ittet	lt
 8009e90:	425b      	neglt	r3, r3
 8009e92:	f042 0202 	orrlt.w	r2, r2, #2
 8009e96:	9307      	strge	r3, [sp, #28]
 8009e98:	9307      	strlt	r3, [sp, #28]
 8009e9a:	bfb8      	it	lt
 8009e9c:	9204      	strlt	r2, [sp, #16]
 8009e9e:	7823      	ldrb	r3, [r4, #0]
 8009ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ea2:	d10c      	bne.n	8009ebe <_vfiprintf_r+0x176>
 8009ea4:	7863      	ldrb	r3, [r4, #1]
 8009ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea8:	d135      	bne.n	8009f16 <_vfiprintf_r+0x1ce>
 8009eaa:	9b03      	ldr	r3, [sp, #12]
 8009eac:	1d1a      	adds	r2, r3, #4
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	9203      	str	r2, [sp, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	bfb8      	it	lt
 8009eb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009eba:	3402      	adds	r4, #2
 8009ebc:	9305      	str	r3, [sp, #20]
 8009ebe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009fa4 <_vfiprintf_r+0x25c>
 8009ec2:	7821      	ldrb	r1, [r4, #0]
 8009ec4:	2203      	movs	r2, #3
 8009ec6:	4650      	mov	r0, sl
 8009ec8:	f7f6 f9b2 	bl	8000230 <memchr>
 8009ecc:	b140      	cbz	r0, 8009ee0 <_vfiprintf_r+0x198>
 8009ece:	2340      	movs	r3, #64	; 0x40
 8009ed0:	eba0 000a 	sub.w	r0, r0, sl
 8009ed4:	fa03 f000 	lsl.w	r0, r3, r0
 8009ed8:	9b04      	ldr	r3, [sp, #16]
 8009eda:	4303      	orrs	r3, r0
 8009edc:	3401      	adds	r4, #1
 8009ede:	9304      	str	r3, [sp, #16]
 8009ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee4:	482c      	ldr	r0, [pc, #176]	; (8009f98 <_vfiprintf_r+0x250>)
 8009ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009eea:	2206      	movs	r2, #6
 8009eec:	f7f6 f9a0 	bl	8000230 <memchr>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d03f      	beq.n	8009f74 <_vfiprintf_r+0x22c>
 8009ef4:	4b29      	ldr	r3, [pc, #164]	; (8009f9c <_vfiprintf_r+0x254>)
 8009ef6:	bb1b      	cbnz	r3, 8009f40 <_vfiprintf_r+0x1f8>
 8009ef8:	9b03      	ldr	r3, [sp, #12]
 8009efa:	3307      	adds	r3, #7
 8009efc:	f023 0307 	bic.w	r3, r3, #7
 8009f00:	3308      	adds	r3, #8
 8009f02:	9303      	str	r3, [sp, #12]
 8009f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f06:	443b      	add	r3, r7
 8009f08:	9309      	str	r3, [sp, #36]	; 0x24
 8009f0a:	e767      	b.n	8009ddc <_vfiprintf_r+0x94>
 8009f0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f10:	460c      	mov	r4, r1
 8009f12:	2001      	movs	r0, #1
 8009f14:	e7a5      	b.n	8009e62 <_vfiprintf_r+0x11a>
 8009f16:	2300      	movs	r3, #0
 8009f18:	3401      	adds	r4, #1
 8009f1a:	9305      	str	r3, [sp, #20]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	f04f 0c0a 	mov.w	ip, #10
 8009f22:	4620      	mov	r0, r4
 8009f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f28:	3a30      	subs	r2, #48	; 0x30
 8009f2a:	2a09      	cmp	r2, #9
 8009f2c:	d903      	bls.n	8009f36 <_vfiprintf_r+0x1ee>
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d0c5      	beq.n	8009ebe <_vfiprintf_r+0x176>
 8009f32:	9105      	str	r1, [sp, #20]
 8009f34:	e7c3      	b.n	8009ebe <_vfiprintf_r+0x176>
 8009f36:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e7f0      	b.n	8009f22 <_vfiprintf_r+0x1da>
 8009f40:	ab03      	add	r3, sp, #12
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	462a      	mov	r2, r5
 8009f46:	4b16      	ldr	r3, [pc, #88]	; (8009fa0 <_vfiprintf_r+0x258>)
 8009f48:	a904      	add	r1, sp, #16
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f7fc f83c 	bl	8005fc8 <_printf_float>
 8009f50:	4607      	mov	r7, r0
 8009f52:	1c78      	adds	r0, r7, #1
 8009f54:	d1d6      	bne.n	8009f04 <_vfiprintf_r+0x1bc>
 8009f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f58:	07d9      	lsls	r1, r3, #31
 8009f5a:	d405      	bmi.n	8009f68 <_vfiprintf_r+0x220>
 8009f5c:	89ab      	ldrh	r3, [r5, #12]
 8009f5e:	059a      	lsls	r2, r3, #22
 8009f60:	d402      	bmi.n	8009f68 <_vfiprintf_r+0x220>
 8009f62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f64:	f000 faa1 	bl	800a4aa <__retarget_lock_release_recursive>
 8009f68:	89ab      	ldrh	r3, [r5, #12]
 8009f6a:	065b      	lsls	r3, r3, #25
 8009f6c:	f53f af12 	bmi.w	8009d94 <_vfiprintf_r+0x4c>
 8009f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f72:	e711      	b.n	8009d98 <_vfiprintf_r+0x50>
 8009f74:	ab03      	add	r3, sp, #12
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	462a      	mov	r2, r5
 8009f7a:	4b09      	ldr	r3, [pc, #36]	; (8009fa0 <_vfiprintf_r+0x258>)
 8009f7c:	a904      	add	r1, sp, #16
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f7fc fac6 	bl	8006510 <_printf_i>
 8009f84:	e7e4      	b.n	8009f50 <_vfiprintf_r+0x208>
 8009f86:	bf00      	nop
 8009f88:	0800c0fc 	.word	0x0800c0fc
 8009f8c:	0800c11c 	.word	0x0800c11c
 8009f90:	0800c0dc 	.word	0x0800c0dc
 8009f94:	0800c08c 	.word	0x0800c08c
 8009f98:	0800c096 	.word	0x0800c096
 8009f9c:	08005fc9 	.word	0x08005fc9
 8009fa0:	08009d25 	.word	0x08009d25
 8009fa4:	0800c092 	.word	0x0800c092

08009fa8 <__swbuf_r>:
 8009fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009faa:	460e      	mov	r6, r1
 8009fac:	4614      	mov	r4, r2
 8009fae:	4605      	mov	r5, r0
 8009fb0:	b118      	cbz	r0, 8009fba <__swbuf_r+0x12>
 8009fb2:	6983      	ldr	r3, [r0, #24]
 8009fb4:	b90b      	cbnz	r3, 8009fba <__swbuf_r+0x12>
 8009fb6:	f000 f9d9 	bl	800a36c <__sinit>
 8009fba:	4b21      	ldr	r3, [pc, #132]	; (800a040 <__swbuf_r+0x98>)
 8009fbc:	429c      	cmp	r4, r3
 8009fbe:	d12b      	bne.n	800a018 <__swbuf_r+0x70>
 8009fc0:	686c      	ldr	r4, [r5, #4]
 8009fc2:	69a3      	ldr	r3, [r4, #24]
 8009fc4:	60a3      	str	r3, [r4, #8]
 8009fc6:	89a3      	ldrh	r3, [r4, #12]
 8009fc8:	071a      	lsls	r2, r3, #28
 8009fca:	d52f      	bpl.n	800a02c <__swbuf_r+0x84>
 8009fcc:	6923      	ldr	r3, [r4, #16]
 8009fce:	b36b      	cbz	r3, 800a02c <__swbuf_r+0x84>
 8009fd0:	6923      	ldr	r3, [r4, #16]
 8009fd2:	6820      	ldr	r0, [r4, #0]
 8009fd4:	1ac0      	subs	r0, r0, r3
 8009fd6:	6963      	ldr	r3, [r4, #20]
 8009fd8:	b2f6      	uxtb	r6, r6
 8009fda:	4283      	cmp	r3, r0
 8009fdc:	4637      	mov	r7, r6
 8009fde:	dc04      	bgt.n	8009fea <__swbuf_r+0x42>
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f000 f92e 	bl	800a244 <_fflush_r>
 8009fe8:	bb30      	cbnz	r0, 800a038 <__swbuf_r+0x90>
 8009fea:	68a3      	ldr	r3, [r4, #8]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	60a3      	str	r3, [r4, #8]
 8009ff0:	6823      	ldr	r3, [r4, #0]
 8009ff2:	1c5a      	adds	r2, r3, #1
 8009ff4:	6022      	str	r2, [r4, #0]
 8009ff6:	701e      	strb	r6, [r3, #0]
 8009ff8:	6963      	ldr	r3, [r4, #20]
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	4283      	cmp	r3, r0
 8009ffe:	d004      	beq.n	800a00a <__swbuf_r+0x62>
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	07db      	lsls	r3, r3, #31
 800a004:	d506      	bpl.n	800a014 <__swbuf_r+0x6c>
 800a006:	2e0a      	cmp	r6, #10
 800a008:	d104      	bne.n	800a014 <__swbuf_r+0x6c>
 800a00a:	4621      	mov	r1, r4
 800a00c:	4628      	mov	r0, r5
 800a00e:	f000 f919 	bl	800a244 <_fflush_r>
 800a012:	b988      	cbnz	r0, 800a038 <__swbuf_r+0x90>
 800a014:	4638      	mov	r0, r7
 800a016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a018:	4b0a      	ldr	r3, [pc, #40]	; (800a044 <__swbuf_r+0x9c>)
 800a01a:	429c      	cmp	r4, r3
 800a01c:	d101      	bne.n	800a022 <__swbuf_r+0x7a>
 800a01e:	68ac      	ldr	r4, [r5, #8]
 800a020:	e7cf      	b.n	8009fc2 <__swbuf_r+0x1a>
 800a022:	4b09      	ldr	r3, [pc, #36]	; (800a048 <__swbuf_r+0xa0>)
 800a024:	429c      	cmp	r4, r3
 800a026:	bf08      	it	eq
 800a028:	68ec      	ldreq	r4, [r5, #12]
 800a02a:	e7ca      	b.n	8009fc2 <__swbuf_r+0x1a>
 800a02c:	4621      	mov	r1, r4
 800a02e:	4628      	mov	r0, r5
 800a030:	f000 f80c 	bl	800a04c <__swsetup_r>
 800a034:	2800      	cmp	r0, #0
 800a036:	d0cb      	beq.n	8009fd0 <__swbuf_r+0x28>
 800a038:	f04f 37ff 	mov.w	r7, #4294967295
 800a03c:	e7ea      	b.n	800a014 <__swbuf_r+0x6c>
 800a03e:	bf00      	nop
 800a040:	0800c0fc 	.word	0x0800c0fc
 800a044:	0800c11c 	.word	0x0800c11c
 800a048:	0800c0dc 	.word	0x0800c0dc

0800a04c <__swsetup_r>:
 800a04c:	4b32      	ldr	r3, [pc, #200]	; (800a118 <__swsetup_r+0xcc>)
 800a04e:	b570      	push	{r4, r5, r6, lr}
 800a050:	681d      	ldr	r5, [r3, #0]
 800a052:	4606      	mov	r6, r0
 800a054:	460c      	mov	r4, r1
 800a056:	b125      	cbz	r5, 800a062 <__swsetup_r+0x16>
 800a058:	69ab      	ldr	r3, [r5, #24]
 800a05a:	b913      	cbnz	r3, 800a062 <__swsetup_r+0x16>
 800a05c:	4628      	mov	r0, r5
 800a05e:	f000 f985 	bl	800a36c <__sinit>
 800a062:	4b2e      	ldr	r3, [pc, #184]	; (800a11c <__swsetup_r+0xd0>)
 800a064:	429c      	cmp	r4, r3
 800a066:	d10f      	bne.n	800a088 <__swsetup_r+0x3c>
 800a068:	686c      	ldr	r4, [r5, #4]
 800a06a:	89a3      	ldrh	r3, [r4, #12]
 800a06c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a070:	0719      	lsls	r1, r3, #28
 800a072:	d42c      	bmi.n	800a0ce <__swsetup_r+0x82>
 800a074:	06dd      	lsls	r5, r3, #27
 800a076:	d411      	bmi.n	800a09c <__swsetup_r+0x50>
 800a078:	2309      	movs	r3, #9
 800a07a:	6033      	str	r3, [r6, #0]
 800a07c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a080:	81a3      	strh	r3, [r4, #12]
 800a082:	f04f 30ff 	mov.w	r0, #4294967295
 800a086:	e03e      	b.n	800a106 <__swsetup_r+0xba>
 800a088:	4b25      	ldr	r3, [pc, #148]	; (800a120 <__swsetup_r+0xd4>)
 800a08a:	429c      	cmp	r4, r3
 800a08c:	d101      	bne.n	800a092 <__swsetup_r+0x46>
 800a08e:	68ac      	ldr	r4, [r5, #8]
 800a090:	e7eb      	b.n	800a06a <__swsetup_r+0x1e>
 800a092:	4b24      	ldr	r3, [pc, #144]	; (800a124 <__swsetup_r+0xd8>)
 800a094:	429c      	cmp	r4, r3
 800a096:	bf08      	it	eq
 800a098:	68ec      	ldreq	r4, [r5, #12]
 800a09a:	e7e6      	b.n	800a06a <__swsetup_r+0x1e>
 800a09c:	0758      	lsls	r0, r3, #29
 800a09e:	d512      	bpl.n	800a0c6 <__swsetup_r+0x7a>
 800a0a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0a2:	b141      	cbz	r1, 800a0b6 <__swsetup_r+0x6a>
 800a0a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0a8:	4299      	cmp	r1, r3
 800a0aa:	d002      	beq.n	800a0b2 <__swsetup_r+0x66>
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f7ff fb25 	bl	80096fc <_free_r>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	6363      	str	r3, [r4, #52]	; 0x34
 800a0b6:	89a3      	ldrh	r3, [r4, #12]
 800a0b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0bc:	81a3      	strh	r3, [r4, #12]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	6063      	str	r3, [r4, #4]
 800a0c2:	6923      	ldr	r3, [r4, #16]
 800a0c4:	6023      	str	r3, [r4, #0]
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	f043 0308 	orr.w	r3, r3, #8
 800a0cc:	81a3      	strh	r3, [r4, #12]
 800a0ce:	6923      	ldr	r3, [r4, #16]
 800a0d0:	b94b      	cbnz	r3, 800a0e6 <__swsetup_r+0x9a>
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0dc:	d003      	beq.n	800a0e6 <__swsetup_r+0x9a>
 800a0de:	4621      	mov	r1, r4
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f000 fa09 	bl	800a4f8 <__smakebuf_r>
 800a0e6:	89a0      	ldrh	r0, [r4, #12]
 800a0e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0ec:	f010 0301 	ands.w	r3, r0, #1
 800a0f0:	d00a      	beq.n	800a108 <__swsetup_r+0xbc>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	60a3      	str	r3, [r4, #8]
 800a0f6:	6963      	ldr	r3, [r4, #20]
 800a0f8:	425b      	negs	r3, r3
 800a0fa:	61a3      	str	r3, [r4, #24]
 800a0fc:	6923      	ldr	r3, [r4, #16]
 800a0fe:	b943      	cbnz	r3, 800a112 <__swsetup_r+0xc6>
 800a100:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a104:	d1ba      	bne.n	800a07c <__swsetup_r+0x30>
 800a106:	bd70      	pop	{r4, r5, r6, pc}
 800a108:	0781      	lsls	r1, r0, #30
 800a10a:	bf58      	it	pl
 800a10c:	6963      	ldrpl	r3, [r4, #20]
 800a10e:	60a3      	str	r3, [r4, #8]
 800a110:	e7f4      	b.n	800a0fc <__swsetup_r+0xb0>
 800a112:	2000      	movs	r0, #0
 800a114:	e7f7      	b.n	800a106 <__swsetup_r+0xba>
 800a116:	bf00      	nop
 800a118:	20000024 	.word	0x20000024
 800a11c:	0800c0fc 	.word	0x0800c0fc
 800a120:	0800c11c 	.word	0x0800c11c
 800a124:	0800c0dc 	.word	0x0800c0dc

0800a128 <abort>:
 800a128:	b508      	push	{r3, lr}
 800a12a:	2006      	movs	r0, #6
 800a12c:	f000 fa54 	bl	800a5d8 <raise>
 800a130:	2001      	movs	r0, #1
 800a132:	f7f7 ff1a 	bl	8001f6a <_exit>
	...

0800a138 <__sflush_r>:
 800a138:	898a      	ldrh	r2, [r1, #12]
 800a13a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a13e:	4605      	mov	r5, r0
 800a140:	0710      	lsls	r0, r2, #28
 800a142:	460c      	mov	r4, r1
 800a144:	d458      	bmi.n	800a1f8 <__sflush_r+0xc0>
 800a146:	684b      	ldr	r3, [r1, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	dc05      	bgt.n	800a158 <__sflush_r+0x20>
 800a14c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a14e:	2b00      	cmp	r3, #0
 800a150:	dc02      	bgt.n	800a158 <__sflush_r+0x20>
 800a152:	2000      	movs	r0, #0
 800a154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a15a:	2e00      	cmp	r6, #0
 800a15c:	d0f9      	beq.n	800a152 <__sflush_r+0x1a>
 800a15e:	2300      	movs	r3, #0
 800a160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a164:	682f      	ldr	r7, [r5, #0]
 800a166:	602b      	str	r3, [r5, #0]
 800a168:	d032      	beq.n	800a1d0 <__sflush_r+0x98>
 800a16a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	075a      	lsls	r2, r3, #29
 800a170:	d505      	bpl.n	800a17e <__sflush_r+0x46>
 800a172:	6863      	ldr	r3, [r4, #4]
 800a174:	1ac0      	subs	r0, r0, r3
 800a176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a178:	b10b      	cbz	r3, 800a17e <__sflush_r+0x46>
 800a17a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a17c:	1ac0      	subs	r0, r0, r3
 800a17e:	2300      	movs	r3, #0
 800a180:	4602      	mov	r2, r0
 800a182:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a184:	6a21      	ldr	r1, [r4, #32]
 800a186:	4628      	mov	r0, r5
 800a188:	47b0      	blx	r6
 800a18a:	1c43      	adds	r3, r0, #1
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	d106      	bne.n	800a19e <__sflush_r+0x66>
 800a190:	6829      	ldr	r1, [r5, #0]
 800a192:	291d      	cmp	r1, #29
 800a194:	d82c      	bhi.n	800a1f0 <__sflush_r+0xb8>
 800a196:	4a2a      	ldr	r2, [pc, #168]	; (800a240 <__sflush_r+0x108>)
 800a198:	40ca      	lsrs	r2, r1
 800a19a:	07d6      	lsls	r6, r2, #31
 800a19c:	d528      	bpl.n	800a1f0 <__sflush_r+0xb8>
 800a19e:	2200      	movs	r2, #0
 800a1a0:	6062      	str	r2, [r4, #4]
 800a1a2:	04d9      	lsls	r1, r3, #19
 800a1a4:	6922      	ldr	r2, [r4, #16]
 800a1a6:	6022      	str	r2, [r4, #0]
 800a1a8:	d504      	bpl.n	800a1b4 <__sflush_r+0x7c>
 800a1aa:	1c42      	adds	r2, r0, #1
 800a1ac:	d101      	bne.n	800a1b2 <__sflush_r+0x7a>
 800a1ae:	682b      	ldr	r3, [r5, #0]
 800a1b0:	b903      	cbnz	r3, 800a1b4 <__sflush_r+0x7c>
 800a1b2:	6560      	str	r0, [r4, #84]	; 0x54
 800a1b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1b6:	602f      	str	r7, [r5, #0]
 800a1b8:	2900      	cmp	r1, #0
 800a1ba:	d0ca      	beq.n	800a152 <__sflush_r+0x1a>
 800a1bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1c0:	4299      	cmp	r1, r3
 800a1c2:	d002      	beq.n	800a1ca <__sflush_r+0x92>
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f7ff fa99 	bl	80096fc <_free_r>
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	6360      	str	r0, [r4, #52]	; 0x34
 800a1ce:	e7c1      	b.n	800a154 <__sflush_r+0x1c>
 800a1d0:	6a21      	ldr	r1, [r4, #32]
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	47b0      	blx	r6
 800a1d8:	1c41      	adds	r1, r0, #1
 800a1da:	d1c7      	bne.n	800a16c <__sflush_r+0x34>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d0c4      	beq.n	800a16c <__sflush_r+0x34>
 800a1e2:	2b1d      	cmp	r3, #29
 800a1e4:	d001      	beq.n	800a1ea <__sflush_r+0xb2>
 800a1e6:	2b16      	cmp	r3, #22
 800a1e8:	d101      	bne.n	800a1ee <__sflush_r+0xb6>
 800a1ea:	602f      	str	r7, [r5, #0]
 800a1ec:	e7b1      	b.n	800a152 <__sflush_r+0x1a>
 800a1ee:	89a3      	ldrh	r3, [r4, #12]
 800a1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1f4:	81a3      	strh	r3, [r4, #12]
 800a1f6:	e7ad      	b.n	800a154 <__sflush_r+0x1c>
 800a1f8:	690f      	ldr	r7, [r1, #16]
 800a1fa:	2f00      	cmp	r7, #0
 800a1fc:	d0a9      	beq.n	800a152 <__sflush_r+0x1a>
 800a1fe:	0793      	lsls	r3, r2, #30
 800a200:	680e      	ldr	r6, [r1, #0]
 800a202:	bf08      	it	eq
 800a204:	694b      	ldreq	r3, [r1, #20]
 800a206:	600f      	str	r7, [r1, #0]
 800a208:	bf18      	it	ne
 800a20a:	2300      	movne	r3, #0
 800a20c:	eba6 0807 	sub.w	r8, r6, r7
 800a210:	608b      	str	r3, [r1, #8]
 800a212:	f1b8 0f00 	cmp.w	r8, #0
 800a216:	dd9c      	ble.n	800a152 <__sflush_r+0x1a>
 800a218:	6a21      	ldr	r1, [r4, #32]
 800a21a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a21c:	4643      	mov	r3, r8
 800a21e:	463a      	mov	r2, r7
 800a220:	4628      	mov	r0, r5
 800a222:	47b0      	blx	r6
 800a224:	2800      	cmp	r0, #0
 800a226:	dc06      	bgt.n	800a236 <__sflush_r+0xfe>
 800a228:	89a3      	ldrh	r3, [r4, #12]
 800a22a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a22e:	81a3      	strh	r3, [r4, #12]
 800a230:	f04f 30ff 	mov.w	r0, #4294967295
 800a234:	e78e      	b.n	800a154 <__sflush_r+0x1c>
 800a236:	4407      	add	r7, r0
 800a238:	eba8 0800 	sub.w	r8, r8, r0
 800a23c:	e7e9      	b.n	800a212 <__sflush_r+0xda>
 800a23e:	bf00      	nop
 800a240:	20400001 	.word	0x20400001

0800a244 <_fflush_r>:
 800a244:	b538      	push	{r3, r4, r5, lr}
 800a246:	690b      	ldr	r3, [r1, #16]
 800a248:	4605      	mov	r5, r0
 800a24a:	460c      	mov	r4, r1
 800a24c:	b913      	cbnz	r3, 800a254 <_fflush_r+0x10>
 800a24e:	2500      	movs	r5, #0
 800a250:	4628      	mov	r0, r5
 800a252:	bd38      	pop	{r3, r4, r5, pc}
 800a254:	b118      	cbz	r0, 800a25e <_fflush_r+0x1a>
 800a256:	6983      	ldr	r3, [r0, #24]
 800a258:	b90b      	cbnz	r3, 800a25e <_fflush_r+0x1a>
 800a25a:	f000 f887 	bl	800a36c <__sinit>
 800a25e:	4b14      	ldr	r3, [pc, #80]	; (800a2b0 <_fflush_r+0x6c>)
 800a260:	429c      	cmp	r4, r3
 800a262:	d11b      	bne.n	800a29c <_fflush_r+0x58>
 800a264:	686c      	ldr	r4, [r5, #4]
 800a266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0ef      	beq.n	800a24e <_fflush_r+0xa>
 800a26e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a270:	07d0      	lsls	r0, r2, #31
 800a272:	d404      	bmi.n	800a27e <_fflush_r+0x3a>
 800a274:	0599      	lsls	r1, r3, #22
 800a276:	d402      	bmi.n	800a27e <_fflush_r+0x3a>
 800a278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a27a:	f000 f915 	bl	800a4a8 <__retarget_lock_acquire_recursive>
 800a27e:	4628      	mov	r0, r5
 800a280:	4621      	mov	r1, r4
 800a282:	f7ff ff59 	bl	800a138 <__sflush_r>
 800a286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a288:	07da      	lsls	r2, r3, #31
 800a28a:	4605      	mov	r5, r0
 800a28c:	d4e0      	bmi.n	800a250 <_fflush_r+0xc>
 800a28e:	89a3      	ldrh	r3, [r4, #12]
 800a290:	059b      	lsls	r3, r3, #22
 800a292:	d4dd      	bmi.n	800a250 <_fflush_r+0xc>
 800a294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a296:	f000 f908 	bl	800a4aa <__retarget_lock_release_recursive>
 800a29a:	e7d9      	b.n	800a250 <_fflush_r+0xc>
 800a29c:	4b05      	ldr	r3, [pc, #20]	; (800a2b4 <_fflush_r+0x70>)
 800a29e:	429c      	cmp	r4, r3
 800a2a0:	d101      	bne.n	800a2a6 <_fflush_r+0x62>
 800a2a2:	68ac      	ldr	r4, [r5, #8]
 800a2a4:	e7df      	b.n	800a266 <_fflush_r+0x22>
 800a2a6:	4b04      	ldr	r3, [pc, #16]	; (800a2b8 <_fflush_r+0x74>)
 800a2a8:	429c      	cmp	r4, r3
 800a2aa:	bf08      	it	eq
 800a2ac:	68ec      	ldreq	r4, [r5, #12]
 800a2ae:	e7da      	b.n	800a266 <_fflush_r+0x22>
 800a2b0:	0800c0fc 	.word	0x0800c0fc
 800a2b4:	0800c11c 	.word	0x0800c11c
 800a2b8:	0800c0dc 	.word	0x0800c0dc

0800a2bc <std>:
 800a2bc:	2300      	movs	r3, #0
 800a2be:	b510      	push	{r4, lr}
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	e9c0 3300 	strd	r3, r3, [r0]
 800a2c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2ca:	6083      	str	r3, [r0, #8]
 800a2cc:	8181      	strh	r1, [r0, #12]
 800a2ce:	6643      	str	r3, [r0, #100]	; 0x64
 800a2d0:	81c2      	strh	r2, [r0, #14]
 800a2d2:	6183      	str	r3, [r0, #24]
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	2208      	movs	r2, #8
 800a2d8:	305c      	adds	r0, #92	; 0x5c
 800a2da:	f7fb fdcd 	bl	8005e78 <memset>
 800a2de:	4b05      	ldr	r3, [pc, #20]	; (800a2f4 <std+0x38>)
 800a2e0:	6263      	str	r3, [r4, #36]	; 0x24
 800a2e2:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <std+0x3c>)
 800a2e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2e6:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <std+0x40>)
 800a2e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2ea:	4b05      	ldr	r3, [pc, #20]	; (800a300 <std+0x44>)
 800a2ec:	6224      	str	r4, [r4, #32]
 800a2ee:	6323      	str	r3, [r4, #48]	; 0x30
 800a2f0:	bd10      	pop	{r4, pc}
 800a2f2:	bf00      	nop
 800a2f4:	0800a611 	.word	0x0800a611
 800a2f8:	0800a633 	.word	0x0800a633
 800a2fc:	0800a66b 	.word	0x0800a66b
 800a300:	0800a68f 	.word	0x0800a68f

0800a304 <_cleanup_r>:
 800a304:	4901      	ldr	r1, [pc, #4]	; (800a30c <_cleanup_r+0x8>)
 800a306:	f000 b8af 	b.w	800a468 <_fwalk_reent>
 800a30a:	bf00      	nop
 800a30c:	0800a245 	.word	0x0800a245

0800a310 <__sfmoreglue>:
 800a310:	b570      	push	{r4, r5, r6, lr}
 800a312:	2268      	movs	r2, #104	; 0x68
 800a314:	1e4d      	subs	r5, r1, #1
 800a316:	4355      	muls	r5, r2
 800a318:	460e      	mov	r6, r1
 800a31a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a31e:	f7ff fa59 	bl	80097d4 <_malloc_r>
 800a322:	4604      	mov	r4, r0
 800a324:	b140      	cbz	r0, 800a338 <__sfmoreglue+0x28>
 800a326:	2100      	movs	r1, #0
 800a328:	e9c0 1600 	strd	r1, r6, [r0]
 800a32c:	300c      	adds	r0, #12
 800a32e:	60a0      	str	r0, [r4, #8]
 800a330:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a334:	f7fb fda0 	bl	8005e78 <memset>
 800a338:	4620      	mov	r0, r4
 800a33a:	bd70      	pop	{r4, r5, r6, pc}

0800a33c <__sfp_lock_acquire>:
 800a33c:	4801      	ldr	r0, [pc, #4]	; (800a344 <__sfp_lock_acquire+0x8>)
 800a33e:	f000 b8b3 	b.w	800a4a8 <__retarget_lock_acquire_recursive>
 800a342:	bf00      	nop
 800a344:	20000841 	.word	0x20000841

0800a348 <__sfp_lock_release>:
 800a348:	4801      	ldr	r0, [pc, #4]	; (800a350 <__sfp_lock_release+0x8>)
 800a34a:	f000 b8ae 	b.w	800a4aa <__retarget_lock_release_recursive>
 800a34e:	bf00      	nop
 800a350:	20000841 	.word	0x20000841

0800a354 <__sinit_lock_acquire>:
 800a354:	4801      	ldr	r0, [pc, #4]	; (800a35c <__sinit_lock_acquire+0x8>)
 800a356:	f000 b8a7 	b.w	800a4a8 <__retarget_lock_acquire_recursive>
 800a35a:	bf00      	nop
 800a35c:	20000842 	.word	0x20000842

0800a360 <__sinit_lock_release>:
 800a360:	4801      	ldr	r0, [pc, #4]	; (800a368 <__sinit_lock_release+0x8>)
 800a362:	f000 b8a2 	b.w	800a4aa <__retarget_lock_release_recursive>
 800a366:	bf00      	nop
 800a368:	20000842 	.word	0x20000842

0800a36c <__sinit>:
 800a36c:	b510      	push	{r4, lr}
 800a36e:	4604      	mov	r4, r0
 800a370:	f7ff fff0 	bl	800a354 <__sinit_lock_acquire>
 800a374:	69a3      	ldr	r3, [r4, #24]
 800a376:	b11b      	cbz	r3, 800a380 <__sinit+0x14>
 800a378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a37c:	f7ff bff0 	b.w	800a360 <__sinit_lock_release>
 800a380:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a384:	6523      	str	r3, [r4, #80]	; 0x50
 800a386:	4b13      	ldr	r3, [pc, #76]	; (800a3d4 <__sinit+0x68>)
 800a388:	4a13      	ldr	r2, [pc, #76]	; (800a3d8 <__sinit+0x6c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a38e:	42a3      	cmp	r3, r4
 800a390:	bf04      	itt	eq
 800a392:	2301      	moveq	r3, #1
 800a394:	61a3      	streq	r3, [r4, #24]
 800a396:	4620      	mov	r0, r4
 800a398:	f000 f820 	bl	800a3dc <__sfp>
 800a39c:	6060      	str	r0, [r4, #4]
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f000 f81c 	bl	800a3dc <__sfp>
 800a3a4:	60a0      	str	r0, [r4, #8]
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f000 f818 	bl	800a3dc <__sfp>
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	60e0      	str	r0, [r4, #12]
 800a3b0:	2104      	movs	r1, #4
 800a3b2:	6860      	ldr	r0, [r4, #4]
 800a3b4:	f7ff ff82 	bl	800a2bc <std>
 800a3b8:	68a0      	ldr	r0, [r4, #8]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	2109      	movs	r1, #9
 800a3be:	f7ff ff7d 	bl	800a2bc <std>
 800a3c2:	68e0      	ldr	r0, [r4, #12]
 800a3c4:	2202      	movs	r2, #2
 800a3c6:	2112      	movs	r1, #18
 800a3c8:	f7ff ff78 	bl	800a2bc <std>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	61a3      	str	r3, [r4, #24]
 800a3d0:	e7d2      	b.n	800a378 <__sinit+0xc>
 800a3d2:	bf00      	nop
 800a3d4:	0800bc98 	.word	0x0800bc98
 800a3d8:	0800a305 	.word	0x0800a305

0800a3dc <__sfp>:
 800a3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3de:	4607      	mov	r7, r0
 800a3e0:	f7ff ffac 	bl	800a33c <__sfp_lock_acquire>
 800a3e4:	4b1e      	ldr	r3, [pc, #120]	; (800a460 <__sfp+0x84>)
 800a3e6:	681e      	ldr	r6, [r3, #0]
 800a3e8:	69b3      	ldr	r3, [r6, #24]
 800a3ea:	b913      	cbnz	r3, 800a3f2 <__sfp+0x16>
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	f7ff ffbd 	bl	800a36c <__sinit>
 800a3f2:	3648      	adds	r6, #72	; 0x48
 800a3f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	d503      	bpl.n	800a404 <__sfp+0x28>
 800a3fc:	6833      	ldr	r3, [r6, #0]
 800a3fe:	b30b      	cbz	r3, 800a444 <__sfp+0x68>
 800a400:	6836      	ldr	r6, [r6, #0]
 800a402:	e7f7      	b.n	800a3f4 <__sfp+0x18>
 800a404:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a408:	b9d5      	cbnz	r5, 800a440 <__sfp+0x64>
 800a40a:	4b16      	ldr	r3, [pc, #88]	; (800a464 <__sfp+0x88>)
 800a40c:	60e3      	str	r3, [r4, #12]
 800a40e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a412:	6665      	str	r5, [r4, #100]	; 0x64
 800a414:	f000 f847 	bl	800a4a6 <__retarget_lock_init_recursive>
 800a418:	f7ff ff96 	bl	800a348 <__sfp_lock_release>
 800a41c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a420:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a424:	6025      	str	r5, [r4, #0]
 800a426:	61a5      	str	r5, [r4, #24]
 800a428:	2208      	movs	r2, #8
 800a42a:	4629      	mov	r1, r5
 800a42c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a430:	f7fb fd22 	bl	8005e78 <memset>
 800a434:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a438:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a43c:	4620      	mov	r0, r4
 800a43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a440:	3468      	adds	r4, #104	; 0x68
 800a442:	e7d9      	b.n	800a3f8 <__sfp+0x1c>
 800a444:	2104      	movs	r1, #4
 800a446:	4638      	mov	r0, r7
 800a448:	f7ff ff62 	bl	800a310 <__sfmoreglue>
 800a44c:	4604      	mov	r4, r0
 800a44e:	6030      	str	r0, [r6, #0]
 800a450:	2800      	cmp	r0, #0
 800a452:	d1d5      	bne.n	800a400 <__sfp+0x24>
 800a454:	f7ff ff78 	bl	800a348 <__sfp_lock_release>
 800a458:	230c      	movs	r3, #12
 800a45a:	603b      	str	r3, [r7, #0]
 800a45c:	e7ee      	b.n	800a43c <__sfp+0x60>
 800a45e:	bf00      	nop
 800a460:	0800bc98 	.word	0x0800bc98
 800a464:	ffff0001 	.word	0xffff0001

0800a468 <_fwalk_reent>:
 800a468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a46c:	4606      	mov	r6, r0
 800a46e:	4688      	mov	r8, r1
 800a470:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a474:	2700      	movs	r7, #0
 800a476:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a47a:	f1b9 0901 	subs.w	r9, r9, #1
 800a47e:	d505      	bpl.n	800a48c <_fwalk_reent+0x24>
 800a480:	6824      	ldr	r4, [r4, #0]
 800a482:	2c00      	cmp	r4, #0
 800a484:	d1f7      	bne.n	800a476 <_fwalk_reent+0xe>
 800a486:	4638      	mov	r0, r7
 800a488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a48c:	89ab      	ldrh	r3, [r5, #12]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d907      	bls.n	800a4a2 <_fwalk_reent+0x3a>
 800a492:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a496:	3301      	adds	r3, #1
 800a498:	d003      	beq.n	800a4a2 <_fwalk_reent+0x3a>
 800a49a:	4629      	mov	r1, r5
 800a49c:	4630      	mov	r0, r6
 800a49e:	47c0      	blx	r8
 800a4a0:	4307      	orrs	r7, r0
 800a4a2:	3568      	adds	r5, #104	; 0x68
 800a4a4:	e7e9      	b.n	800a47a <_fwalk_reent+0x12>

0800a4a6 <__retarget_lock_init_recursive>:
 800a4a6:	4770      	bx	lr

0800a4a8 <__retarget_lock_acquire_recursive>:
 800a4a8:	4770      	bx	lr

0800a4aa <__retarget_lock_release_recursive>:
 800a4aa:	4770      	bx	lr

0800a4ac <__swhatbuf_r>:
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	460e      	mov	r6, r1
 800a4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4b4:	2900      	cmp	r1, #0
 800a4b6:	b096      	sub	sp, #88	; 0x58
 800a4b8:	4614      	mov	r4, r2
 800a4ba:	461d      	mov	r5, r3
 800a4bc:	da08      	bge.n	800a4d0 <__swhatbuf_r+0x24>
 800a4be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	602a      	str	r2, [r5, #0]
 800a4c6:	061a      	lsls	r2, r3, #24
 800a4c8:	d410      	bmi.n	800a4ec <__swhatbuf_r+0x40>
 800a4ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4ce:	e00e      	b.n	800a4ee <__swhatbuf_r+0x42>
 800a4d0:	466a      	mov	r2, sp
 800a4d2:	f000 f903 	bl	800a6dc <_fstat_r>
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	dbf1      	blt.n	800a4be <__swhatbuf_r+0x12>
 800a4da:	9a01      	ldr	r2, [sp, #4]
 800a4dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a4e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a4e4:	425a      	negs	r2, r3
 800a4e6:	415a      	adcs	r2, r3
 800a4e8:	602a      	str	r2, [r5, #0]
 800a4ea:	e7ee      	b.n	800a4ca <__swhatbuf_r+0x1e>
 800a4ec:	2340      	movs	r3, #64	; 0x40
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	b016      	add	sp, #88	; 0x58
 800a4f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a4f8 <__smakebuf_r>:
 800a4f8:	898b      	ldrh	r3, [r1, #12]
 800a4fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4fc:	079d      	lsls	r5, r3, #30
 800a4fe:	4606      	mov	r6, r0
 800a500:	460c      	mov	r4, r1
 800a502:	d507      	bpl.n	800a514 <__smakebuf_r+0x1c>
 800a504:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a508:	6023      	str	r3, [r4, #0]
 800a50a:	6123      	str	r3, [r4, #16]
 800a50c:	2301      	movs	r3, #1
 800a50e:	6163      	str	r3, [r4, #20]
 800a510:	b002      	add	sp, #8
 800a512:	bd70      	pop	{r4, r5, r6, pc}
 800a514:	ab01      	add	r3, sp, #4
 800a516:	466a      	mov	r2, sp
 800a518:	f7ff ffc8 	bl	800a4ac <__swhatbuf_r>
 800a51c:	9900      	ldr	r1, [sp, #0]
 800a51e:	4605      	mov	r5, r0
 800a520:	4630      	mov	r0, r6
 800a522:	f7ff f957 	bl	80097d4 <_malloc_r>
 800a526:	b948      	cbnz	r0, 800a53c <__smakebuf_r+0x44>
 800a528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a52c:	059a      	lsls	r2, r3, #22
 800a52e:	d4ef      	bmi.n	800a510 <__smakebuf_r+0x18>
 800a530:	f023 0303 	bic.w	r3, r3, #3
 800a534:	f043 0302 	orr.w	r3, r3, #2
 800a538:	81a3      	strh	r3, [r4, #12]
 800a53a:	e7e3      	b.n	800a504 <__smakebuf_r+0xc>
 800a53c:	4b0d      	ldr	r3, [pc, #52]	; (800a574 <__smakebuf_r+0x7c>)
 800a53e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	6020      	str	r0, [r4, #0]
 800a544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a548:	81a3      	strh	r3, [r4, #12]
 800a54a:	9b00      	ldr	r3, [sp, #0]
 800a54c:	6163      	str	r3, [r4, #20]
 800a54e:	9b01      	ldr	r3, [sp, #4]
 800a550:	6120      	str	r0, [r4, #16]
 800a552:	b15b      	cbz	r3, 800a56c <__smakebuf_r+0x74>
 800a554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a558:	4630      	mov	r0, r6
 800a55a:	f000 f8d1 	bl	800a700 <_isatty_r>
 800a55e:	b128      	cbz	r0, 800a56c <__smakebuf_r+0x74>
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	f023 0303 	bic.w	r3, r3, #3
 800a566:	f043 0301 	orr.w	r3, r3, #1
 800a56a:	81a3      	strh	r3, [r4, #12]
 800a56c:	89a0      	ldrh	r0, [r4, #12]
 800a56e:	4305      	orrs	r5, r0
 800a570:	81a5      	strh	r5, [r4, #12]
 800a572:	e7cd      	b.n	800a510 <__smakebuf_r+0x18>
 800a574:	0800a305 	.word	0x0800a305

0800a578 <_malloc_usable_size_r>:
 800a578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a57c:	1f18      	subs	r0, r3, #4
 800a57e:	2b00      	cmp	r3, #0
 800a580:	bfbc      	itt	lt
 800a582:	580b      	ldrlt	r3, [r1, r0]
 800a584:	18c0      	addlt	r0, r0, r3
 800a586:	4770      	bx	lr

0800a588 <_raise_r>:
 800a588:	291f      	cmp	r1, #31
 800a58a:	b538      	push	{r3, r4, r5, lr}
 800a58c:	4604      	mov	r4, r0
 800a58e:	460d      	mov	r5, r1
 800a590:	d904      	bls.n	800a59c <_raise_r+0x14>
 800a592:	2316      	movs	r3, #22
 800a594:	6003      	str	r3, [r0, #0]
 800a596:	f04f 30ff 	mov.w	r0, #4294967295
 800a59a:	bd38      	pop	{r3, r4, r5, pc}
 800a59c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a59e:	b112      	cbz	r2, 800a5a6 <_raise_r+0x1e>
 800a5a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5a4:	b94b      	cbnz	r3, 800a5ba <_raise_r+0x32>
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	f000 f830 	bl	800a60c <_getpid_r>
 800a5ac:	462a      	mov	r2, r5
 800a5ae:	4601      	mov	r1, r0
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5b6:	f000 b817 	b.w	800a5e8 <_kill_r>
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d00a      	beq.n	800a5d4 <_raise_r+0x4c>
 800a5be:	1c59      	adds	r1, r3, #1
 800a5c0:	d103      	bne.n	800a5ca <_raise_r+0x42>
 800a5c2:	2316      	movs	r3, #22
 800a5c4:	6003      	str	r3, [r0, #0]
 800a5c6:	2001      	movs	r0, #1
 800a5c8:	e7e7      	b.n	800a59a <_raise_r+0x12>
 800a5ca:	2400      	movs	r4, #0
 800a5cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	4798      	blx	r3
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	e7e0      	b.n	800a59a <_raise_r+0x12>

0800a5d8 <raise>:
 800a5d8:	4b02      	ldr	r3, [pc, #8]	; (800a5e4 <raise+0xc>)
 800a5da:	4601      	mov	r1, r0
 800a5dc:	6818      	ldr	r0, [r3, #0]
 800a5de:	f7ff bfd3 	b.w	800a588 <_raise_r>
 800a5e2:	bf00      	nop
 800a5e4:	20000024 	.word	0x20000024

0800a5e8 <_kill_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4d07      	ldr	r5, [pc, #28]	; (800a608 <_kill_r+0x20>)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	4608      	mov	r0, r1
 800a5f2:	4611      	mov	r1, r2
 800a5f4:	602b      	str	r3, [r5, #0]
 800a5f6:	f7f7 fca8 	bl	8001f4a <_kill>
 800a5fa:	1c43      	adds	r3, r0, #1
 800a5fc:	d102      	bne.n	800a604 <_kill_r+0x1c>
 800a5fe:	682b      	ldr	r3, [r5, #0]
 800a600:	b103      	cbz	r3, 800a604 <_kill_r+0x1c>
 800a602:	6023      	str	r3, [r4, #0]
 800a604:	bd38      	pop	{r3, r4, r5, pc}
 800a606:	bf00      	nop
 800a608:	2000083c 	.word	0x2000083c

0800a60c <_getpid_r>:
 800a60c:	f7f7 bc95 	b.w	8001f3a <_getpid>

0800a610 <__sread>:
 800a610:	b510      	push	{r4, lr}
 800a612:	460c      	mov	r4, r1
 800a614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a618:	f000 f894 	bl	800a744 <_read_r>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	bfab      	itete	ge
 800a620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a622:	89a3      	ldrhlt	r3, [r4, #12]
 800a624:	181b      	addge	r3, r3, r0
 800a626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a62a:	bfac      	ite	ge
 800a62c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a62e:	81a3      	strhlt	r3, [r4, #12]
 800a630:	bd10      	pop	{r4, pc}

0800a632 <__swrite>:
 800a632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a636:	461f      	mov	r7, r3
 800a638:	898b      	ldrh	r3, [r1, #12]
 800a63a:	05db      	lsls	r3, r3, #23
 800a63c:	4605      	mov	r5, r0
 800a63e:	460c      	mov	r4, r1
 800a640:	4616      	mov	r6, r2
 800a642:	d505      	bpl.n	800a650 <__swrite+0x1e>
 800a644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a648:	2302      	movs	r3, #2
 800a64a:	2200      	movs	r2, #0
 800a64c:	f000 f868 	bl	800a720 <_lseek_r>
 800a650:	89a3      	ldrh	r3, [r4, #12]
 800a652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a65a:	81a3      	strh	r3, [r4, #12]
 800a65c:	4632      	mov	r2, r6
 800a65e:	463b      	mov	r3, r7
 800a660:	4628      	mov	r0, r5
 800a662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a666:	f000 b817 	b.w	800a698 <_write_r>

0800a66a <__sseek>:
 800a66a:	b510      	push	{r4, lr}
 800a66c:	460c      	mov	r4, r1
 800a66e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a672:	f000 f855 	bl	800a720 <_lseek_r>
 800a676:	1c43      	adds	r3, r0, #1
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	bf15      	itete	ne
 800a67c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a67e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a686:	81a3      	strheq	r3, [r4, #12]
 800a688:	bf18      	it	ne
 800a68a:	81a3      	strhne	r3, [r4, #12]
 800a68c:	bd10      	pop	{r4, pc}

0800a68e <__sclose>:
 800a68e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a692:	f000 b813 	b.w	800a6bc <_close_r>
	...

0800a698 <_write_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4d07      	ldr	r5, [pc, #28]	; (800a6b8 <_write_r+0x20>)
 800a69c:	4604      	mov	r4, r0
 800a69e:	4608      	mov	r0, r1
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	602a      	str	r2, [r5, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f7f7 fc86 	bl	8001fb8 <_write>
 800a6ac:	1c43      	adds	r3, r0, #1
 800a6ae:	d102      	bne.n	800a6b6 <_write_r+0x1e>
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	b103      	cbz	r3, 800a6b6 <_write_r+0x1e>
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	bd38      	pop	{r3, r4, r5, pc}
 800a6b8:	2000083c 	.word	0x2000083c

0800a6bc <_close_r>:
 800a6bc:	b538      	push	{r3, r4, r5, lr}
 800a6be:	4d06      	ldr	r5, [pc, #24]	; (800a6d8 <_close_r+0x1c>)
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	4608      	mov	r0, r1
 800a6c6:	602b      	str	r3, [r5, #0]
 800a6c8:	f7f7 fc92 	bl	8001ff0 <_close>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d102      	bne.n	800a6d6 <_close_r+0x1a>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	b103      	cbz	r3, 800a6d6 <_close_r+0x1a>
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	2000083c 	.word	0x2000083c

0800a6dc <_fstat_r>:
 800a6dc:	b538      	push	{r3, r4, r5, lr}
 800a6de:	4d07      	ldr	r5, [pc, #28]	; (800a6fc <_fstat_r+0x20>)
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	4608      	mov	r0, r1
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	602b      	str	r3, [r5, #0]
 800a6ea:	f7f7 fc8d 	bl	8002008 <_fstat>
 800a6ee:	1c43      	adds	r3, r0, #1
 800a6f0:	d102      	bne.n	800a6f8 <_fstat_r+0x1c>
 800a6f2:	682b      	ldr	r3, [r5, #0]
 800a6f4:	b103      	cbz	r3, 800a6f8 <_fstat_r+0x1c>
 800a6f6:	6023      	str	r3, [r4, #0]
 800a6f8:	bd38      	pop	{r3, r4, r5, pc}
 800a6fa:	bf00      	nop
 800a6fc:	2000083c 	.word	0x2000083c

0800a700 <_isatty_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4d06      	ldr	r5, [pc, #24]	; (800a71c <_isatty_r+0x1c>)
 800a704:	2300      	movs	r3, #0
 800a706:	4604      	mov	r4, r0
 800a708:	4608      	mov	r0, r1
 800a70a:	602b      	str	r3, [r5, #0]
 800a70c:	f7f7 fc8c 	bl	8002028 <_isatty>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d102      	bne.n	800a71a <_isatty_r+0x1a>
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	b103      	cbz	r3, 800a71a <_isatty_r+0x1a>
 800a718:	6023      	str	r3, [r4, #0]
 800a71a:	bd38      	pop	{r3, r4, r5, pc}
 800a71c:	2000083c 	.word	0x2000083c

0800a720 <_lseek_r>:
 800a720:	b538      	push	{r3, r4, r5, lr}
 800a722:	4d07      	ldr	r5, [pc, #28]	; (800a740 <_lseek_r+0x20>)
 800a724:	4604      	mov	r4, r0
 800a726:	4608      	mov	r0, r1
 800a728:	4611      	mov	r1, r2
 800a72a:	2200      	movs	r2, #0
 800a72c:	602a      	str	r2, [r5, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	f7f7 fc85 	bl	800203e <_lseek>
 800a734:	1c43      	adds	r3, r0, #1
 800a736:	d102      	bne.n	800a73e <_lseek_r+0x1e>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	b103      	cbz	r3, 800a73e <_lseek_r+0x1e>
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	bd38      	pop	{r3, r4, r5, pc}
 800a740:	2000083c 	.word	0x2000083c

0800a744 <_read_r>:
 800a744:	b538      	push	{r3, r4, r5, lr}
 800a746:	4d07      	ldr	r5, [pc, #28]	; (800a764 <_read_r+0x20>)
 800a748:	4604      	mov	r4, r0
 800a74a:	4608      	mov	r0, r1
 800a74c:	4611      	mov	r1, r2
 800a74e:	2200      	movs	r2, #0
 800a750:	602a      	str	r2, [r5, #0]
 800a752:	461a      	mov	r2, r3
 800a754:	f7f7 fc13 	bl	8001f7e <_read>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_read_r+0x1e>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_read_r+0x1e>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	2000083c 	.word	0x2000083c

0800a768 <_init>:
 800a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76a:	bf00      	nop
 800a76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a76e:	bc08      	pop	{r3}
 800a770:	469e      	mov	lr, r3
 800a772:	4770      	bx	lr

0800a774 <_fini>:
 800a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a776:	bf00      	nop
 800a778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a77a:	bc08      	pop	{r3}
 800a77c:	469e      	mov	lr, r3
 800a77e:	4770      	bx	lr
