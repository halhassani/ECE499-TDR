
ECE499-TDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cde8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a04  0800cfc8  0800cfc8  0001cfc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9cc  0800e9cc  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9cc  0800e9cc  0001e9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9d4  0800e9d4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9d4  0800e9d4  0001e9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9d8  0800e9d8  0001e9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800e9dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b4  200001f0  0800ebcc  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009a4  0800ebcc  000209a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021cd0  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043d0  00000000  00000000  00041ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  000462c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019d8  00000000  00000000  00047e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024912  00000000  00000000  00049858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023556  00000000  00000000  0006e16a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2f44  00000000  00000000  000916c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00174604  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b20  00000000  00000000  00174654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cfb0 	.word	0x0800cfb0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800cfb0 	.word	0x0800cfb0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <ADXL345_Init>:

#include "ADXL345.h"

//Initialization fxn:
uint8_t ADXL345_Init(ADXL345* device, I2C_HandleTypeDef* i2cHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

	//setup ADXL struct parameters:
	device->i2cHandle 		= i2cHandle;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	601a      	str	r2, [r3, #0]

	device->acc_mps2[0] 	= 0.0f;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	605a      	str	r2, [r3, #4]
	device->acc_mps2[1] 	= 0.0f;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
	device->acc_mps2[2] 	= 0.0f;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	60da      	str	r2, [r3, #12]

//	device->temp_C 				= 0.0f; //no temperature sensor on this device (ADXL345)

	uint8_t errNum 				= 0; //store number of communication errors that occur (returned @endOfFxn)
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef 		status;

	//Check deviceAddr, mems and part IDs
	uint8_t regData;

	status = ADXL345_ReadRegister(device, ADXL_DEV_ID, &regData); //reads the reg and stores 1byte into regData var
 8001074:	f107 030d 	add.w	r3, r7, #13
 8001078:	461a      	mov	r2, r3
 800107a:	21e5      	movs	r1, #229	; 0xe5
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f89d 	bl	80011bc <ADXL345_ReadRegister>
 8001082:	4603      	mov	r3, r0
 8001084:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001086:	7bbb      	ldrb	r3, [r7, #14]
 8001088:	2b00      	cmp	r3, #0
 800108a:	bf14      	ite	ne
 800108c:	2301      	movne	r3, #1
 800108e:	2300      	moveq	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	461a      	mov	r2, r3
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	4413      	add	r3, r2
 8001098:	73fb      	strb	r3, [r7, #15]
	if( regData != ADXL_REG_DEV_ID)
 800109a:	7b7b      	ldrb	r3, [r7, #13]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <ADXL345_Init+0x5c>
	{
		return 255;
 80010a0:	23ff      	movs	r3, #255	; 0xff
 80010a2:	e03f      	b.n	8001124 <ADXL345_Init+0xdc>
	}

	//setup BW_RATE (bandwidth rate)
	regData = 0X0C; //upper nibble (0) = normal operation mode (a 1 would be low pwr mode)
 80010a4:	230c      	movs	r3, #12
 80010a6:	737b      	strb	r3, [r7, #13]
									//lower nibble (C) = 1100 -> 400Hz OutputDataRate (default [A] = 100Hz)

	status = ADXL345_WriteRegister(device, ADXL_BW_RATE, &regData);
 80010a8:	f107 030d 	add.w	r3, r7, #13
 80010ac:	461a      	mov	r2, r3
 80010ae:	212c      	movs	r1, #44	; 0x2c
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f8bd 	bl	8001230 <ADXL345_WriteRegister>
 80010b6:	4603      	mov	r3, r0
 80010b8:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	bf14      	ite	ne
 80010c0:	2301      	movne	r3, #1
 80010c2:	2300      	moveq	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	4413      	add	r3, r2
 80010cc:	73fb      	strb	r3, [r7, #15]

	//put sensor into measurement mode:
	regData = 0X28; //upper nibble (2) = Link bit = 1, default
 80010ce:	2328      	movs	r3, #40	; 0x28
 80010d0:	737b      	strb	r3, [r7, #13]
									//lower nibble (8) = set device to measure mode
	status = ADXL345_WriteRegister(device, ADXL_PWR_CTRL, &regData);
 80010d2:	f107 030d 	add.w	r3, r7, #13
 80010d6:	461a      	mov	r2, r3
 80010d8:	212d      	movs	r1, #45	; 0x2d
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f8a8 	bl	8001230 <ADXL345_WriteRegister>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bf14      	ite	ne
 80010ea:	2301      	movne	r3, #1
 80010ec:	2300      	moveq	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	4413      	add	r3, r2
 80010f6:	73fb      	strb	r3, [r7, #15]

	//DATA_FORMAT register config juicer:
	regData = 0x03; //set to 10bit res mode, range up to 16g
 80010f8:	2303      	movs	r3, #3
 80010fa:	737b      	strb	r3, [r7, #13]
	status = ADXL345_WriteRegister(device, ADXL_DATA_FORMAT, &regData);
 80010fc:	f107 030d 	add.w	r3, r7, #13
 8001100:	461a      	mov	r2, r3
 8001102:	2131      	movs	r1, #49	; 0x31
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f893 	bl	8001230 <ADXL345_WriteRegister>
 800110a:	4603      	mov	r3, r0
 800110c:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	2b00      	cmp	r3, #0
 8001112:	bf14      	ite	ne
 8001114:	2301      	movne	r3, #1
 8001116:	2300      	moveq	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	4413      	add	r3, r2
 8001120:	73fb      	strb	r3, [r7, #15]

	return errNum; //ie: if errNum != 0, we will know that the ADXL init sequence failed, ong fr fr
 8001122:	7bfb      	ldrb	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <ADXL345_ReadAccel>:



//Data Acquisition fxns:
HAL_StatusTypeDef ADXL345_ReadAccel(ADXL345* device) //passing the device struct handle ptr juicer
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	uint8_t regData[6]; //read all 6 registers (x0,x1 y0,y1 z0,z1) //24 bits each reg

	//combine the raw register vals to give the raw (unsigned) accel. readings
	int32_t accelRawSigned[3];

	HAL_StatusTypeDef status = ADXL345_ReadRegisters(device, ADXL_DATA_X0, regData, 6);
 8001134:	f107 0218 	add.w	r2, r7, #24
 8001138:	2306      	movs	r3, #6
 800113a:	2132      	movs	r1, #50	; 0x32
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f858 	bl	80011f2 <ADXL345_ReadRegisters>
 8001142:	4603      	mov	r3, r0
 8001144:	77fb      	strb	r3, [r7, #31]
	accelRawSigned[0] = ( (regData[0]<< 8) | (regData[1]<< 0) ); //X
 8001146:	7e3b      	ldrb	r3, [r7, #24]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	7e7a      	ldrb	r2, [r7, #25]
 800114c:	4313      	orrs	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
	accelRawSigned[1] = ( (regData[2]<< 8) | (regData[3]<< 0) ); //Y
 8001150:	7ebb      	ldrb	r3, [r7, #26]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	7efa      	ldrb	r2, [r7, #27]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
	accelRawSigned[2] = ( (regData[4]<< 8) | (regData[5]<< 0) ); //Z
 800115a:	7f3b      	ldrb	r3, [r7, #28]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	7f7a      	ldrb	r2, [r7, #29]
 8001160:	4313      	orrs	r3, r2
 8001162:	617b      	str	r3, [r7, #20]

  //now convert to m/s^2 (given range setting of +/-16g)
	device->acc_mps2[0] = 9.81f * 0.000488f * accelRawSigned[0];
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80011b8 <ADXL345_ReadAccel+0x8c>
 8001172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	edc3 7a01 	vstr	s15, [r3, #4]
  device->acc_mps2[1] = 9.81f * 0.000488f * accelRawSigned[1];
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001186:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80011b8 <ADXL345_ReadAccel+0x8c>
 800118a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	edc3 7a02 	vstr	s15, [r3, #8]
  device->acc_mps2[2] = 9.81f * 0.000488f * accelRawSigned[2];
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80011b8 <ADXL345_ReadAccel+0x8c>
 80011a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	edc3 7a03 	vstr	s15, [r3, #12]

	return status;
 80011ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3720      	adds	r7, #32
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	3b9cde9e 	.word	0x3b9cde9e

080011bc <ADXL345_ReadRegister>:

//Low-Level Register Fxns:

//reads 1 byte of data from reg
HAL_StatusTypeDef ADXL345_ReadRegister(ADXL345* device, uint8_t reg, uint8_t* pdata)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af04      	add	r7, sp, #16
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	460b      	mov	r3, r1
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(device->i2cHandle, ADXL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, pdata, 1, HAL_MAX_DELAY);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	7afb      	ldrb	r3, [r7, #11]
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2301      	movs	r3, #1
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	21a6      	movs	r1, #166	; 0xa6
 80011e4:	f003 ff84 	bl	80050f0 <HAL_I2C_Mem_Read>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <ADXL345_ReadRegisters>:

HAL_StatusTypeDef ADXL345_ReadRegisters(ADXL345* device, uint8_t reg, uint8_t* pdata, uint8_t len)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b088      	sub	sp, #32
 80011f6:	af04      	add	r7, sp, #16
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	461a      	mov	r2, r3
 80011fe:	460b      	mov	r3, r1
 8001200:	72fb      	strb	r3, [r7, #11]
 8001202:	4613      	mov	r3, r2
 8001204:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(device->i2cHandle, ADXL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, pdata, len, HAL_MAX_DELAY);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	7afb      	ldrb	r3, [r7, #11]
 800120c:	b29a      	uxth	r2, r3
 800120e:	7abb      	ldrb	r3, [r7, #10]
 8001210:	b29b      	uxth	r3, r3
 8001212:	f04f 31ff 	mov.w	r1, #4294967295
 8001216:	9102      	str	r1, [sp, #8]
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2301      	movs	r3, #1
 8001220:	21a6      	movs	r1, #166	; 0xa6
 8001222:	f003 ff65 	bl	80050f0 <HAL_I2C_Mem_Read>
 8001226:	4603      	mov	r3, r0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <ADXL345_WriteRegister>:


//writes 1byte of data to reg
HAL_StatusTypeDef ADXL345_WriteRegister(ADXL345* device, uint8_t reg, uint8_t* pdata)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	460b      	mov	r3, r1
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(device->i2cHandle, ADXL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, pdata, 1, HAL_MAX_DELAY);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	7afb      	ldrb	r3, [r7, #11]
 8001244:	b29a      	uxth	r2, r3
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	2301      	movs	r3, #1
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	21a6      	movs	r1, #166	; 0xa6
 8001258:	f003 fe36 	bl	8004ec8 <HAL_I2C_Mem_Write>
 800125c:	4603      	mov	r3, r0

}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2220      	movs	r2, #32
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f007 fa1b 	bl	80086bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001286:	4b33      	ldr	r3, [pc, #204]	; (8001354 <MX_ADC1_Init+0xec>)
 8001288:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800128c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800128e:	4b31      	ldr	r3, [pc, #196]	; (8001354 <MX_ADC1_Init+0xec>)
 8001290:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001294:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8001296:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <MX_ADC1_Init+0xec>)
 8001298:	2218      	movs	r2, #24
 800129a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800129c:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <MX_ADC1_Init+0xec>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <MX_ADC1_Init+0xec>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <MX_ADC1_Init+0xec>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <MX_ADC1_Init+0xec>)
 80012b0:	2204      	movs	r2, #4
 80012b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <MX_ADC1_Init+0xec>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_ADC1_Init+0xec>)
 80012bc:	2200      	movs	r2, #0
 80012be:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <MX_ADC1_Init+0xec>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c6:	4b23      	ldr	r3, [pc, #140]	; (8001354 <MX_ADC1_Init+0xec>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <MX_ADC1_Init+0xec>)
 80012d0:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_ADC1_Init+0xec>)
 80012d8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80012dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_ADC1_Init+0xec>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_ADC1_Init+0xec>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_ADC1_Init+0xec>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f4:	4817      	ldr	r0, [pc, #92]	; (8001354 <MX_ADC1_Init+0xec>)
 80012f6:	f001 fd59 	bl	8002dac <HAL_ADC_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001300:	f000 fbee 	bl	8001ae0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4811      	ldr	r0, [pc, #68]	; (8001354 <MX_ADC1_Init+0xec>)
 8001310:	f002 fd4c 	bl	8003dac <HAL_ADCEx_MultiModeConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800131a:	f000 fbe1 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_ADC1_Init+0xf0>)
 8001320:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001322:	2306      	movs	r3, #6
 8001324:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800132a:	237f      	movs	r3, #127	; 0x7f
 800132c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800132e:	2304      	movs	r3, #4
 8001330:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <MX_ADC1_Init+0xec>)
 800133c:	f002 f8ee 	bl	800351c <HAL_ADC_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001346:	f000 fbcb 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	3730      	adds	r7, #48	; 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000020c 	.word	0x2000020c
 8001358:	04300002 	.word	0x04300002

0800135c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b09a      	sub	sp, #104	; 0x68
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	2244      	movs	r2, #68	; 0x44
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f007 f99d 	bl	80086bc <memset>
  if(adcHandle->Instance==ADC1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800138a:	d167      	bne.n	800145c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800138c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001390:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001392:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001396:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4618      	mov	r0, r3
 800139e:	f005 f9df 	bl	8006760 <HAL_RCCEx_PeriphCLKConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80013a8:	f000 fb9a 	bl	8001ae0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_ADC_MspInit+0x108>)
 80013ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b0:	4a2c      	ldr	r2, [pc, #176]	; (8001464 <HAL_ADC_MspInit+0x108>)
 80013b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b8:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <HAL_ADC_MspInit+0x108>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b27      	ldr	r3, [pc, #156]	; (8001464 <HAL_ADC_MspInit+0x108>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	4a26      	ldr	r2, [pc, #152]	; (8001464 <HAL_ADC_MspInit+0x108>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_ADC_MspInit+0x108>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013dc:	2301      	movs	r3, #1
 80013de:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e0:	2303      	movs	r3, #3
 80013e2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f2:	f003 fa4b 	bl	800488c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <HAL_ADC_MspInit+0x10c>)
 80013f8:	4a1c      	ldr	r2, [pc, #112]	; (800146c <HAL_ADC_MspInit+0x110>)
 80013fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_ADC_MspInit+0x10c>)
 80013fe:	2205      	movs	r2, #5
 8001400:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_ADC_MspInit+0x10c>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_ADC_MspInit+0x10c>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_ADC_MspInit+0x10c>)
 8001410:	2280      	movs	r2, #128	; 0x80
 8001412:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_ADC_MspInit+0x10c>)
 8001416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_ADC_MspInit+0x10c>)
 800141e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001422:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HAL_ADC_MspInit+0x10c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_ADC_MspInit+0x10c>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <HAL_ADC_MspInit+0x10c>)
 8001432:	f003 f871 	bl	8004518 <HAL_DMA_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800143c:	f000 fb50 	bl	8001ae0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a09      	ldr	r2, [pc, #36]	; (8001468 <HAL_ADC_MspInit+0x10c>)
 8001444:	655a      	str	r2, [r3, #84]	; 0x54
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_ADC_MspInit+0x10c>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	2012      	movs	r0, #18
 8001452:	f002 fe2a 	bl	80040aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001456:	2012      	movs	r0, #18
 8001458:	f002 fe41 	bl	80040de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800145c:	bf00      	nop
 800145e:	3768      	adds	r7, #104	; 0x68
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40021000 	.word	0x40021000
 8001468:	20000278 	.word	0x20000278
 800146c:	40020008 	.word	0x40020008

08001470 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2230      	movs	r2, #48	; 0x30
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f007 f91d 	bl	80086bc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <MX_DAC1_Init+0x80>)
 8001484:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <MX_DAC1_Init+0x84>)
 8001486:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001488:	4819      	ldr	r0, [pc, #100]	; (80014f0 <MX_DAC1_Init+0x80>)
 800148a:	f002 fe42 	bl	8004112 <HAL_DAC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001494:	f000 fb24 	bl	8001ae0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001498:	2302      	movs	r3, #2
 800149a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 80014a8:	230a      	movs	r3, #10
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	480b      	ldr	r0, [pc, #44]	; (80014f0 <MX_DAC1_Init+0x80>)
 80014c4:	f002 fe48 	bl	8004158 <HAL_DAC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80014ce:	f000 fb07 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_2047) != HAL_OK)
 80014d2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80014d6:	2100      	movs	r1, #0
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_DAC1_Init+0x80>)
 80014da:	f002 ffe5 	bl	80044a8 <HAL_DACEx_TriangleWaveGenerate>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80014e4:	f000 fafc 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3730      	adds	r7, #48	; 0x30
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200002d8 	.word	0x200002d8
 80014f4:	50000800 	.word	0x50000800

080014f8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a15      	ldr	r2, [pc, #84]	; (800156c <HAL_DAC_MspInit+0x74>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d124      	bne.n	8001564 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_DAC_MspInit+0x78>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a14      	ldr	r2, [pc, #80]	; (8001570 <HAL_DAC_MspInit+0x78>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_DAC_MspInit+0x78>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_DAC_MspInit+0x78>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_DAC_MspInit+0x78>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_DAC_MspInit+0x78>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800154a:	2310      	movs	r3, #16
 800154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154e:	2303      	movs	r3, #3
 8001550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f003 f994 	bl	800488c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	; 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	50000800 	.word	0x50000800
 8001570:	40021000 	.word	0x40021000

08001574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_DMA_Init+0x60>)
 800157c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157e:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <MX_DMA_Init+0x60>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6493      	str	r3, [r2, #72]	; 0x48
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <MX_DMA_Init+0x60>)
 8001588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_DMA_Init+0x60>)
 8001594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001596:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <MX_DMA_Init+0x60>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6493      	str	r3, [r2, #72]	; 0x48
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <MX_DMA_Init+0x60>)
 80015a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	200b      	movs	r0, #11
 80015b0:	f002 fd7b 	bl	80040aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015b4:	200b      	movs	r0, #11
 80015b6:	f002 fd92 	bl	80040de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	200c      	movs	r0, #12
 80015c0:	f002 fd73 	bl	80040aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015c4:	200c      	movs	r0, #12
 80015c6:	f002 fd8a 	bl	80040de <HAL_NVIC_EnableIRQ>

}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000

080015d8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ee:	4b45      	ldr	r3, [pc, #276]	; (8001704 <MX_GPIO_Init+0x12c>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a44      	ldr	r2, [pc, #272]	; (8001704 <MX_GPIO_Init+0x12c>)
 80015f4:	f043 0320 	orr.w	r3, r3, #32
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b42      	ldr	r3, [pc, #264]	; (8001704 <MX_GPIO_Init+0x12c>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001606:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <MX_GPIO_Init+0x12c>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a3e      	ldr	r2, [pc, #248]	; (8001704 <MX_GPIO_Init+0x12c>)
 800160c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <MX_GPIO_Init+0x12c>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4b39      	ldr	r3, [pc, #228]	; (8001704 <MX_GPIO_Init+0x12c>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a38      	ldr	r2, [pc, #224]	; (8001704 <MX_GPIO_Init+0x12c>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b36      	ldr	r3, [pc, #216]	; (8001704 <MX_GPIO_Init+0x12c>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	4b33      	ldr	r3, [pc, #204]	; (8001704 <MX_GPIO_Init+0x12c>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4a32      	ldr	r2, [pc, #200]	; (8001704 <MX_GPIO_Init+0x12c>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <MX_GPIO_Init+0x12c>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001654:	482c      	ldr	r0, [pc, #176]	; (8001708 <MX_GPIO_Init+0x130>)
 8001656:	f003 fa9b 	bl	8004b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800165a:	2303      	movs	r3, #3
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165e:	2303      	movs	r3, #3
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4827      	ldr	r0, [pc, #156]	; (800170c <MX_GPIO_Init+0x134>)
 800166e:	f003 f90d 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001678:	2303      	movs	r3, #3
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4822      	ldr	r0, [pc, #136]	; (8001710 <MX_GPIO_Init+0x138>)
 8001688:	f003 f900 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 PA6 PA8
                           PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
 800168c:	f641 7362 	movw	r3, #8034	; 0x1f62
 8001690:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001692:	2303      	movs	r3, #3
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a4:	f003 f8f2 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c0:	f003 f8e4 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 80016c4:	2369      	movs	r3, #105	; 0x69
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c8:	2303      	movs	r3, #3
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	480c      	ldr	r0, [pc, #48]	; (8001708 <MX_GPIO_Init+0x130>)
 80016d8:	f003 f8d8 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_GPIO_Init+0x130>)
 80016f6:	f003 f8c9 	bl	800488c <HAL_GPIO_Init>

}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	48000400 	.word	0x48000400
 800170c:	48001400 	.word	0x48001400
 8001710:	48001800 	.word	0x48001800

08001714 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <MX_I2C1_Init+0x74>)
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <MX_I2C1_Init+0x78>)
 800171c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MX_I2C1_Init+0x74>)
 8001720:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <MX_I2C1_Init+0x7c>)
 8001722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_I2C1_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <MX_I2C1_Init+0x74>)
 800172c:	2201      	movs	r2, #1
 800172e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <MX_I2C1_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <MX_I2C1_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <MX_I2C1_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <MX_I2C1_Init+0x74>)
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <MX_I2C1_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800174e:	480e      	ldr	r0, [pc, #56]	; (8001788 <MX_I2C1_Init+0x74>)
 8001750:	f003 fa36 	bl	8004bc0 <HAL_I2C_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800175a:	f000 f9c1 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800175e:	2100      	movs	r1, #0
 8001760:	4809      	ldr	r0, [pc, #36]	; (8001788 <MX_I2C1_Init+0x74>)
 8001762:	f004 f98d 	bl	8005a80 <HAL_I2CEx_ConfigAnalogFilter>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800176c:	f000 f9b8 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001770:	2100      	movs	r1, #0
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_I2C1_Init+0x74>)
 8001774:	f004 f9cf 	bl	8005b16 <HAL_I2CEx_ConfigDigitalFilter>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800177e:	f000 f9af 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200002ec 	.word	0x200002ec
 800178c:	40005400 	.word	0x40005400
 8001790:	10802d9b 	.word	0x10802d9b

08001794 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b09c      	sub	sp, #112	; 0x70
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ac:	f107 0318 	add.w	r3, r7, #24
 80017b0:	2244      	movs	r2, #68	; 0x44
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f006 ff81 	bl	80086bc <memset>
  if(i2cHandle->Instance==I2C1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a2d      	ldr	r2, [pc, #180]	; (8001874 <HAL_I2C_MspInit+0xe0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d153      	bne.n	800186c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017c4:	2340      	movs	r3, #64	; 0x40
 80017c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017cc:	f107 0318 	add.w	r3, r7, #24
 80017d0:	4618      	mov	r0, r3
 80017d2:	f004 ffc5 	bl	8006760 <HAL_RCCEx_PeriphCLKConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017dc:	f000 f980 	bl	8001ae0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <HAL_I2C_MspInit+0xe4>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	4a24      	ldr	r2, [pc, #144]	; (8001878 <HAL_I2C_MspInit+0xe4>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_I2C_MspInit+0xe4>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_I2C_MspInit+0xe4>)
 80017fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fc:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <HAL_I2C_MspInit+0xe4>)
 80017fe:	f043 0302 	orr.w	r3, r3, #2
 8001802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_I2C_MspInit+0xe4>)
 8001806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001814:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001816:	2312      	movs	r3, #18
 8001818:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001822:	2304      	movs	r3, #4
 8001824:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800182a:	4619      	mov	r1, r3
 800182c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001830:	f003 f82c 	bl	800488c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001838:	2312      	movs	r3, #18
 800183a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001844:	2304      	movs	r3, #4
 8001846:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001848:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800184c:	4619      	mov	r1, r3
 800184e:	480b      	ldr	r0, [pc, #44]	; (800187c <HAL_I2C_MspInit+0xe8>)
 8001850:	f003 f81c 	bl	800488c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_I2C_MspInit+0xe4>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_I2C_MspInit+0xe4>)
 800185a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800185e:	6593      	str	r3, [r2, #88]	; 0x58
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_I2C_MspInit+0xe4>)
 8001862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800186c:	bf00      	nop
 800186e:	3770      	adds	r7, #112	; 0x70
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40005400 	.word	0x40005400
 8001878:	40021000 	.word	0x40021000
 800187c:	48000400 	.word	0x48000400

08001880 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 1000);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	b29a      	uxth	r2, r3
 8001890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	4804      	ldr	r0, [pc, #16]	; (80018a8 <_write+0x28>)
 8001898:	f006 f8cc 	bl	8007a34 <HAL_UART_Transmit>
	return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000900 	.word	0x20000900

080018ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b0:	f000 ffcd 	bl	800284e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b4:	f000 f886 	bl	80019c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b8:	f7ff fe8e 	bl	80015d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80018bc:	f7ff fe5a 	bl	8001574 <MX_DMA_Init>
  MX_I2C1_Init();
 80018c0:	f7ff ff28 	bl	8001714 <MX_I2C1_Init>
  MX_ADC1_Init();
 80018c4:	f7ff fcd0 	bl	8001268 <MX_ADC1_Init>
  MX_DAC1_Init();
 80018c8:	f7ff fdd2 	bl	8001470 <MX_DAC1_Init>
  MX_USART2_UART_Init();
 80018cc:	f000 fef2 	bl	80026b4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80018d0:	f000 fdbe 	bl	8002450 <MX_TIM6_Init>
  MX_TIM7_Init();
 80018d4:	f000 fdfc 	bl	80024d0 <MX_TIM7_Init>
  MX_TIM3_Init();
 80018d8:	f000 fd44 	bl	8002364 <MX_TIM3_Init>
  MX_TIM2_Init();
 80018dc:	f000 fcf6 	bl	80022cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	SSD1306_Init();
 80018e0:	f000 f904 	bl	8001aec <SSD1306_Init>
	OLED_Startup();
 80018e4:	f000 f8c4 	bl	8001a70 <OLED_Startup>
	HAL_Delay(2000);
 80018e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018ec:	f001 f820 	bl	8002930 <HAL_Delay>
	SSD1306_Clear();
 80018f0:	f000 fb21 	bl	8001f36 <SSD1306_Clear>


	ADXL345_Init(&accelDevice, &hi2c1);
 80018f4:	492a      	ldr	r1, [pc, #168]	; (80019a0 <main+0xf4>)
 80018f6:	482b      	ldr	r0, [pc, #172]	; (80019a4 <main+0xf8>)
 80018f8:	f7ff fba6 	bl	8001048 <ADXL345_Init>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		ADXL345_ReadAccel(&accelDevice);
 80018fc:	4829      	ldr	r0, [pc, #164]	; (80019a4 <main+0xf8>)
 80018fe:	f7ff fc15 	bl	800112c <ADXL345_ReadAccel>


		SSD1306_Clear();
 8001902:	f000 fb18 	bl	8001f36 <SSD1306_Clear>


		SSD1306_GotoXY(38, 0);
 8001906:	2100      	movs	r1, #0
 8001908:	2026      	movs	r0, #38	; 0x26
 800190a:	f000 fa59 	bl	8001dc0 <SSD1306_GotoXY>
		SSD1306_Puts(" TDR ", &Font_11x18, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	4925      	ldr	r1, [pc, #148]	; (80019a8 <main+0xfc>)
 8001912:	4826      	ldr	r0, [pc, #152]	; (80019ac <main+0x100>)
 8001914:	f000 faea 	bl	8001eec <SSD1306_Puts>

		SSD1306_GotoXY(0, 24);
 8001918:	2118      	movs	r1, #24
 800191a:	2000      	movs	r0, #0
 800191c:	f000 fa50 	bl	8001dc0 <SSD1306_GotoXY>
		sprintf(buff, "X: %0.2f", accelDevice.acc_mps2[0]);
 8001920:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <main+0xf8>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe37 	bl	8000598 <__aeabi_f2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4920      	ldr	r1, [pc, #128]	; (80019b0 <main+0x104>)
 8001930:	4820      	ldr	r0, [pc, #128]	; (80019b4 <main+0x108>)
 8001932:	f007 fd4b 	bl	80093cc <siprintf>
		SSD1306_Puts(buff, &Font_7x10, 1);
 8001936:	2201      	movs	r2, #1
 8001938:	491f      	ldr	r1, [pc, #124]	; (80019b8 <main+0x10c>)
 800193a:	481e      	ldr	r0, [pc, #120]	; (80019b4 <main+0x108>)
 800193c:	f000 fad6 	bl	8001eec <SSD1306_Puts>

		SSD1306_GotoXY(0, 36);
 8001940:	2124      	movs	r1, #36	; 0x24
 8001942:	2000      	movs	r0, #0
 8001944:	f000 fa3c 	bl	8001dc0 <SSD1306_GotoXY>
		sprintf(buff, "Y: %0.2f", accelDevice.acc_mps2[1]);
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <main+0xf8>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fe23 	bl	8000598 <__aeabi_f2d>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4919      	ldr	r1, [pc, #100]	; (80019bc <main+0x110>)
 8001958:	4816      	ldr	r0, [pc, #88]	; (80019b4 <main+0x108>)
 800195a:	f007 fd37 	bl	80093cc <siprintf>
		SSD1306_Puts(buff, &Font_7x10, 1);
 800195e:	2201      	movs	r2, #1
 8001960:	4915      	ldr	r1, [pc, #84]	; (80019b8 <main+0x10c>)
 8001962:	4814      	ldr	r0, [pc, #80]	; (80019b4 <main+0x108>)
 8001964:	f000 fac2 	bl	8001eec <SSD1306_Puts>

		SSD1306_GotoXY(0, 48);
 8001968:	2130      	movs	r1, #48	; 0x30
 800196a:	2000      	movs	r0, #0
 800196c:	f000 fa28 	bl	8001dc0 <SSD1306_GotoXY>
		sprintf(buff, "Z: %0.2f", accelDevice.acc_mps2[2]);
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <main+0xf8>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fe0f 	bl	8000598 <__aeabi_f2d>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4910      	ldr	r1, [pc, #64]	; (80019c0 <main+0x114>)
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <main+0x108>)
 8001982:	f007 fd23 	bl	80093cc <siprintf>
		SSD1306_Puts(buff, &Font_7x10, 1);
 8001986:	2201      	movs	r2, #1
 8001988:	490b      	ldr	r1, [pc, #44]	; (80019b8 <main+0x10c>)
 800198a:	480a      	ldr	r0, [pc, #40]	; (80019b4 <main+0x108>)
 800198c:	f000 faae 	bl	8001eec <SSD1306_Puts>

		SSD1306_UpdateScreen();
 8001990:	f000 f970 	bl	8001c74 <SSD1306_UpdateScreen>

		HAL_Delay(1000);
 8001994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001998:	f000 ffca 	bl	8002930 <HAL_Delay>
		ADXL345_ReadAccel(&accelDevice);
 800199c:	e7ae      	b.n	80018fc <main+0x50>
 800199e:	bf00      	nop
 80019a0:	200002ec 	.word	0x200002ec
 80019a4:	20000354 	.word	0x20000354
 80019a8:	20000008 	.word	0x20000008
 80019ac:	0800cfc8 	.word	0x0800cfc8
 80019b0:	0800cfd0 	.word	0x0800cfd0
 80019b4:	20000338 	.word	0x20000338
 80019b8:	20000000 	.word	0x20000000
 80019bc:	0800cfdc 	.word	0x0800cfdc
 80019c0:	0800cfe8 	.word	0x0800cfe8

080019c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b094      	sub	sp, #80	; 0x50
 80019c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ca:	f107 0318 	add.w	r3, r7, #24
 80019ce:	2238      	movs	r2, #56	; 0x38
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f006 fe72 	bl	80086bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80019e6:	2000      	movs	r0, #0
 80019e8:	f004 f8e2 	bl	8005bb0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019ec:	2302      	movs	r3, #2
 80019ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019f6:	2340      	movs	r3, #64	; 0x40
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fa:	2302      	movs	r3, #2
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019fe:	2302      	movs	r3, #2
 8001a00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001a02:	2304      	movs	r3, #4
 8001a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001a06:	2355      	movs	r3, #85	; 0x55
 8001a08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a12:	2302      	movs	r3, #2
 8001a14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a16:	f107 0318 	add.w	r3, r7, #24
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f004 f96c 	bl	8005cf8 <HAL_RCC_OscConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a26:	f000 f85b 	bl	8001ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a2a:	230f      	movs	r3, #15
 8001a2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2104      	movs	r1, #4
 8001a42:	4618      	mov	r0, r3
 8001a44:	f004 fc70 	bl	8006328 <HAL_RCC_ClockConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001a4e:	f000 f847 	bl	8001ae0 <Error_Handler>
  }
}
 8001a52:	bf00      	nop
 8001a54:	3750      	adds	r7, #80	; 0x50
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]

}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <OLED_Startup>:

void OLED_Startup(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8001a74:	f000 fa5f 	bl	8001f36 <SSD1306_Clear>
	SSD1306_GotoXY(38, 0);
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2026      	movs	r0, #38	; 0x26
 8001a7c:	f000 f9a0 	bl	8001dc0 <SSD1306_GotoXY>
	SSD1306_Puts(" TDR ", &Font_11x18, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	4911      	ldr	r1, [pc, #68]	; (8001ac8 <OLED_Startup+0x58>)
 8001a84:	4811      	ldr	r0, [pc, #68]	; (8001acc <OLED_Startup+0x5c>)
 8001a86:	f000 fa31 	bl	8001eec <SSD1306_Puts>
	SSD1306_GotoXY(24, 22);
 8001a8a:	2116      	movs	r1, #22
 8001a8c:	2018      	movs	r0, #24
 8001a8e:	f000 f997 	bl	8001dc0 <SSD1306_GotoXY>
	SSD1306_Puts("Time-Domain", &Font_7x10, 1);
 8001a92:	2201      	movs	r2, #1
 8001a94:	490e      	ldr	r1, [pc, #56]	; (8001ad0 <OLED_Startup+0x60>)
 8001a96:	480f      	ldr	r0, [pc, #60]	; (8001ad4 <OLED_Startup+0x64>)
 8001a98:	f000 fa28 	bl	8001eec <SSD1306_Puts>
	SSD1306_GotoXY(20, 34);
 8001a9c:	2122      	movs	r1, #34	; 0x22
 8001a9e:	2014      	movs	r0, #20
 8001aa0:	f000 f98e 	bl	8001dc0 <SSD1306_GotoXY>
	SSD1306_Puts("Reflectometer", &Font_7x10, 1);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	490a      	ldr	r1, [pc, #40]	; (8001ad0 <OLED_Startup+0x60>)
 8001aa8:	480b      	ldr	r0, [pc, #44]	; (8001ad8 <OLED_Startup+0x68>)
 8001aaa:	f000 fa1f 	bl	8001eec <SSD1306_Puts>

	SSD1306_GotoXY(24, 52);
 8001aae:	2134      	movs	r1, #52	; 0x34
 8001ab0:	2018      	movs	r0, #24
 8001ab2:	f000 f985 	bl	8001dc0 <SSD1306_GotoXY>
	SSD1306_Puts("UVic ECE499", &Font_7x10, 1);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4905      	ldr	r1, [pc, #20]	; (8001ad0 <OLED_Startup+0x60>)
 8001aba:	4808      	ldr	r0, [pc, #32]	; (8001adc <OLED_Startup+0x6c>)
 8001abc:	f000 fa16 	bl	8001eec <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001ac0:	f000 f8d8 	bl	8001c74 <SSD1306_UpdateScreen>
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	0800cfc8 	.word	0x0800cfc8
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	0800cff4 	.word	0x0800cff4
 8001ad8:	0800d000 	.word	0x0800d000
 8001adc:	0800d010 	.word	0x0800d010

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1)
 8001ae8:	e7fe      	b.n	8001ae8 <Error_Handler+0x8>
	...

08001aec <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001af2:	f000 fa29 	bl	8001f48 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001af6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001afa:	2201      	movs	r2, #1
 8001afc:	2178      	movs	r1, #120	; 0x78
 8001afe:	485b      	ldr	r0, [pc, #364]	; (8001c6c <SSD1306_Init+0x180>)
 8001b00:	f003 fc10 	bl	8005324 <HAL_I2C_IsDeviceReady>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e0a9      	b.n	8001c62 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001b0e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001b12:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b14:	e002      	b.n	8001b1c <SSD1306_Init+0x30>
		p--;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f9      	bne.n	8001b16 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001b22:	22ae      	movs	r2, #174	; 0xae
 8001b24:	2100      	movs	r1, #0
 8001b26:	2078      	movs	r0, #120	; 0x78
 8001b28:	f000 fa8a 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2078      	movs	r0, #120	; 0x78
 8001b32:	f000 fa85 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001b36:	2210      	movs	r2, #16
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2078      	movs	r0, #120	; 0x78
 8001b3c:	f000 fa80 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001b40:	22b0      	movs	r2, #176	; 0xb0
 8001b42:	2100      	movs	r1, #0
 8001b44:	2078      	movs	r0, #120	; 0x78
 8001b46:	f000 fa7b 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001b4a:	22c8      	movs	r2, #200	; 0xc8
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2078      	movs	r0, #120	; 0x78
 8001b50:	f000 fa76 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2078      	movs	r0, #120	; 0x78
 8001b5a:	f000 fa71 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001b5e:	2210      	movs	r2, #16
 8001b60:	2100      	movs	r1, #0
 8001b62:	2078      	movs	r0, #120	; 0x78
 8001b64:	f000 fa6c 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001b68:	2240      	movs	r2, #64	; 0x40
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2078      	movs	r0, #120	; 0x78
 8001b6e:	f000 fa67 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001b72:	2281      	movs	r2, #129	; 0x81
 8001b74:	2100      	movs	r1, #0
 8001b76:	2078      	movs	r0, #120	; 0x78
 8001b78:	f000 fa62 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001b7c:	22ff      	movs	r2, #255	; 0xff
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2078      	movs	r0, #120	; 0x78
 8001b82:	f000 fa5d 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001b86:	22a1      	movs	r2, #161	; 0xa1
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2078      	movs	r0, #120	; 0x78
 8001b8c:	f000 fa58 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001b90:	22a6      	movs	r2, #166	; 0xa6
 8001b92:	2100      	movs	r1, #0
 8001b94:	2078      	movs	r0, #120	; 0x78
 8001b96:	f000 fa53 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001b9a:	22a8      	movs	r2, #168	; 0xa8
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2078      	movs	r0, #120	; 0x78
 8001ba0:	f000 fa4e 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001ba4:	223f      	movs	r2, #63	; 0x3f
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2078      	movs	r0, #120	; 0x78
 8001baa:	f000 fa49 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001bae:	22a4      	movs	r2, #164	; 0xa4
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2078      	movs	r0, #120	; 0x78
 8001bb4:	f000 fa44 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001bb8:	22d3      	movs	r2, #211	; 0xd3
 8001bba:	2100      	movs	r1, #0
 8001bbc:	2078      	movs	r0, #120	; 0x78
 8001bbe:	f000 fa3f 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2078      	movs	r0, #120	; 0x78
 8001bc8:	f000 fa3a 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001bcc:	22d5      	movs	r2, #213	; 0xd5
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2078      	movs	r0, #120	; 0x78
 8001bd2:	f000 fa35 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001bd6:	22f0      	movs	r2, #240	; 0xf0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2078      	movs	r0, #120	; 0x78
 8001bdc:	f000 fa30 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001be0:	22d9      	movs	r2, #217	; 0xd9
 8001be2:	2100      	movs	r1, #0
 8001be4:	2078      	movs	r0, #120	; 0x78
 8001be6:	f000 fa2b 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001bea:	2222      	movs	r2, #34	; 0x22
 8001bec:	2100      	movs	r1, #0
 8001bee:	2078      	movs	r0, #120	; 0x78
 8001bf0:	f000 fa26 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001bf4:	22da      	movs	r2, #218	; 0xda
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2078      	movs	r0, #120	; 0x78
 8001bfa:	f000 fa21 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001bfe:	2212      	movs	r2, #18
 8001c00:	2100      	movs	r1, #0
 8001c02:	2078      	movs	r0, #120	; 0x78
 8001c04:	f000 fa1c 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001c08:	22db      	movs	r2, #219	; 0xdb
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2078      	movs	r0, #120	; 0x78
 8001c0e:	f000 fa17 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001c12:	2220      	movs	r2, #32
 8001c14:	2100      	movs	r1, #0
 8001c16:	2078      	movs	r0, #120	; 0x78
 8001c18:	f000 fa12 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001c1c:	228d      	movs	r2, #141	; 0x8d
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2078      	movs	r0, #120	; 0x78
 8001c22:	f000 fa0d 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001c26:	2214      	movs	r2, #20
 8001c28:	2100      	movs	r1, #0
 8001c2a:	2078      	movs	r0, #120	; 0x78
 8001c2c:	f000 fa08 	bl	8002040 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001c30:	22af      	movs	r2, #175	; 0xaf
 8001c32:	2100      	movs	r1, #0
 8001c34:	2078      	movs	r0, #120	; 0x78
 8001c36:	f000 fa03 	bl	8002040 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001c3a:	222e      	movs	r2, #46	; 0x2e
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	2078      	movs	r0, #120	; 0x78
 8001c40:	f000 f9fe 	bl	8002040 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001c44:	2000      	movs	r0, #0
 8001c46:	f000 f843 	bl	8001cd0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001c4a:	f000 f813 	bl	8001c74 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <SSD1306_Init+0x184>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <SSD1306_Init+0x184>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <SSD1306_Init+0x184>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001c60:	2301      	movs	r3, #1
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200002ec 	.word	0x200002ec
 8001c70:	20000764 	.word	0x20000764

08001c74 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	71fb      	strb	r3, [r7, #7]
 8001c7e:	e01d      	b.n	8001cbc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	3b50      	subs	r3, #80	; 0x50
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2078      	movs	r0, #120	; 0x78
 8001c8c:	f000 f9d8 	bl	8002040 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2078      	movs	r0, #120	; 0x78
 8001c96:	f000 f9d3 	bl	8002040 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001c9a:	2210      	movs	r2, #16
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2078      	movs	r0, #120	; 0x78
 8001ca0:	f000 f9ce 	bl	8002040 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	01db      	lsls	r3, r3, #7
 8001ca8:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <SSD1306_UpdateScreen+0x58>)
 8001caa:	441a      	add	r2, r3
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	2140      	movs	r1, #64	; 0x40
 8001cb0:	2078      	movs	r0, #120	; 0x78
 8001cb2:	f000 f95f 	bl	8001f74 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	71fb      	strb	r3, [r7, #7]
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	2b07      	cmp	r3, #7
 8001cc0:	d9de      	bls.n	8001c80 <SSD1306_UpdateScreen+0xc>
	}
}
 8001cc2:	bf00      	nop
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000364 	.word	0x20000364

08001cd0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <SSD1306_Fill+0x14>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e000      	b.n	8001ce6 <SSD1306_Fill+0x16>
 8001ce4:	23ff      	movs	r3, #255	; 0xff
 8001ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cea:	4619      	mov	r1, r3
 8001cec:	4803      	ldr	r0, [pc, #12]	; (8001cfc <SSD1306_Fill+0x2c>)
 8001cee:	f006 fce5 	bl	80086bc <memset>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000364 	.word	0x20000364

08001d00 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	80fb      	strh	r3, [r7, #6]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	80bb      	strh	r3, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	70fb      	strb	r3, [r7, #3]
	if (
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	2b7f      	cmp	r3, #127	; 0x7f
 8001d16:	d848      	bhi.n	8001daa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001d18:	88bb      	ldrh	r3, [r7, #4]
 8001d1a:	2b3f      	cmp	r3, #63	; 0x3f
 8001d1c:	d845      	bhi.n	8001daa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001d1e:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <SSD1306_DrawPixel+0xb8>)
 8001d20:	791b      	ldrb	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf0c      	ite	eq
 8001d2c:	2301      	moveq	r3, #1
 8001d2e:	2300      	movne	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d11a      	bne.n	8001d70 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d3a:	88fa      	ldrh	r2, [r7, #6]
 8001d3c:	88bb      	ldrh	r3, [r7, #4]
 8001d3e:	08db      	lsrs	r3, r3, #3
 8001d40:	b298      	uxth	r0, r3
 8001d42:	4603      	mov	r3, r0
 8001d44:	01db      	lsls	r3, r3, #7
 8001d46:	4413      	add	r3, r2
 8001d48:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <SSD1306_DrawPixel+0xbc>)
 8001d4a:	5cd3      	ldrb	r3, [r2, r3]
 8001d4c:	b25a      	sxtb	r2, r3
 8001d4e:	88bb      	ldrh	r3, [r7, #4]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	b25b      	sxtb	r3, r3
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	b259      	sxtb	r1, r3
 8001d60:	88fa      	ldrh	r2, [r7, #6]
 8001d62:	4603      	mov	r3, r0
 8001d64:	01db      	lsls	r3, r3, #7
 8001d66:	4413      	add	r3, r2
 8001d68:	b2c9      	uxtb	r1, r1
 8001d6a:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <SSD1306_DrawPixel+0xbc>)
 8001d6c:	54d1      	strb	r1, [r2, r3]
 8001d6e:	e01d      	b.n	8001dac <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d70:	88fa      	ldrh	r2, [r7, #6]
 8001d72:	88bb      	ldrh	r3, [r7, #4]
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	b298      	uxth	r0, r3
 8001d78:	4603      	mov	r3, r0
 8001d7a:	01db      	lsls	r3, r3, #7
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a0f      	ldr	r2, [pc, #60]	; (8001dbc <SSD1306_DrawPixel+0xbc>)
 8001d80:	5cd3      	ldrb	r3, [r2, r3]
 8001d82:	b25a      	sxtb	r2, r3
 8001d84:	88bb      	ldrh	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d90:	b25b      	sxtb	r3, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	b25b      	sxtb	r3, r3
 8001d96:	4013      	ands	r3, r2
 8001d98:	b259      	sxtb	r1, r3
 8001d9a:	88fa      	ldrh	r2, [r7, #6]
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	01db      	lsls	r3, r3, #7
 8001da0:	4413      	add	r3, r2
 8001da2:	b2c9      	uxtb	r1, r1
 8001da4:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <SSD1306_DrawPixel+0xbc>)
 8001da6:	54d1      	strb	r1, [r2, r3]
 8001da8:	e000      	b.n	8001dac <SSD1306_DrawPixel+0xac>
		return;
 8001daa:	bf00      	nop
	}
}
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000764 	.word	0x20000764
 8001dbc:	20000364 	.word	0x20000364

08001dc0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	460a      	mov	r2, r1
 8001dca:	80fb      	strh	r3, [r7, #6]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001dd0:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <SSD1306_GotoXY+0x28>)
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001dd6:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <SSD1306_GotoXY+0x28>)
 8001dd8:	88bb      	ldrh	r3, [r7, #4]
 8001dda:	8053      	strh	r3, [r2, #2]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	20000764 	.word	0x20000764

08001dec <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001dfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <SSD1306_Putc+0xfc>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
	if (
 8001e08:	2b7f      	cmp	r3, #127	; 0x7f
 8001e0a:	dc07      	bgt.n	8001e1c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001e0c:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <SSD1306_Putc+0xfc>)
 8001e0e:	885b      	ldrh	r3, [r3, #2]
 8001e10:	461a      	mov	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	785b      	ldrb	r3, [r3, #1]
 8001e16:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001e18:	2b3f      	cmp	r3, #63	; 0x3f
 8001e1a:	dd01      	ble.n	8001e20 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e05e      	b.n	8001ede <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	e04b      	b.n	8001ebe <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	3b20      	subs	r3, #32
 8001e2e:	6839      	ldr	r1, [r7, #0]
 8001e30:	7849      	ldrb	r1, [r1, #1]
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	4619      	mov	r1, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	440b      	add	r3, r1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	e030      	b.n	8001eac <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d010      	beq.n	8001e7c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001e5a:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <SSD1306_Putc+0xfc>)
 8001e5c:	881a      	ldrh	r2, [r3, #0]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	b298      	uxth	r0, r3
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <SSD1306_Putc+0xfc>)
 8001e68:	885a      	ldrh	r2, [r3, #2]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	79ba      	ldrb	r2, [r7, #6]
 8001e74:	4619      	mov	r1, r3
 8001e76:	f7ff ff43 	bl	8001d00 <SSD1306_DrawPixel>
 8001e7a:	e014      	b.n	8001ea6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <SSD1306_Putc+0xfc>)
 8001e7e:	881a      	ldrh	r2, [r3, #0]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	b298      	uxth	r0, r3
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <SSD1306_Putc+0xfc>)
 8001e8a:	885a      	ldrh	r2, [r3, #2]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	b299      	uxth	r1, r3
 8001e94:	79bb      	ldrb	r3, [r7, #6]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf0c      	ite	eq
 8001e9a:	2301      	moveq	r3, #1
 8001e9c:	2300      	movne	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f7ff ff2d 	bl	8001d00 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d3c8      	bcc.n	8001e4a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	785b      	ldrb	r3, [r3, #1]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d3ad      	bcc.n	8001e26 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <SSD1306_Putc+0xfc>)
 8001ecc:	881a      	ldrh	r2, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <SSD1306_Putc+0xfc>)
 8001eda:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001edc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000764 	.word	0x20000764

08001eec <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001efa:	e012      	b.n	8001f22 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	79fa      	ldrb	r2, [r7, #7]
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff71 	bl	8001dec <SSD1306_Putc>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d002      	beq.n	8001f1c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	e008      	b.n	8001f2e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1e8      	bne.n	8001efc <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff fec8 	bl	8001cd0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001f40:	f7ff fe98 	bl	8001c74 <SSD1306_UpdateScreen>
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <ssd1306_I2C_Init+0x28>)
 8001f50:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f52:	e002      	b.n	8001f5a <ssd1306_I2C_Init+0x12>
		p--;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f9      	bne.n	8001f54 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	0003d090 	.word	0x0003d090

08001f74 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count)
{
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b0c7      	sub	sp, #284	; 0x11c
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	4608      	mov	r0, r1
 8001f7e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001f82:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001f86:	600a      	str	r2, [r1, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f8e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001f92:	4622      	mov	r2, r4
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f9a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	701a      	strb	r2, [r3, #0]
 8001fa2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001fa6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001faa:	460a      	mov	r2, r1
 8001fac:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8001fae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fb6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001fba:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001fbe:	7812      	ldrb	r2, [r2, #0]
 8001fc0:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001fc8:	e015      	b.n	8001ff6 <ssd1306_I2C_WriteMulti+0x82>
		dt[i + 1] = data[i];
 8001fca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001fce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001fd2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	441a      	add	r2, r3
 8001fda:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001fde:	3301      	adds	r3, #1
 8001fe0:	7811      	ldrb	r1, [r2, #0]
 8001fe2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001fe6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001fea:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001fec:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001ff6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002000:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002004:	8812      	ldrh	r2, [r2, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d8df      	bhi.n	8001fca <ssd1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count + 1, 10);
 800200a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800200e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b299      	uxth	r1, r3
 8002016:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800201a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	b29b      	uxth	r3, r3
 8002024:	f107 020c 	add.w	r2, r7, #12
 8002028:	200a      	movs	r0, #10
 800202a:	9000      	str	r0, [sp, #0]
 800202c:	4803      	ldr	r0, [pc, #12]	; (800203c <ssd1306_I2C_WriteMulti+0xc8>)
 800202e:	f002 fe57 	bl	8004ce0 <HAL_I2C_Master_Transmit>
}
 8002032:	bf00      	nop
 8002034:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002038:	46bd      	mov	sp, r7
 800203a:	bd90      	pop	{r4, r7, pc}
 800203c:	200002ec 	.word	0x200002ec

08002040 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af02      	add	r7, sp, #8
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
 800204a:	460b      	mov	r3, r1
 800204c:	71bb      	strb	r3, [r7, #6]
 800204e:	4613      	mov	r3, r2
 8002050:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002052:	79bb      	ldrb	r3, [r7, #6]
 8002054:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002056:	797b      	ldrb	r3, [r7, #5]
 8002058:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	b299      	uxth	r1, r3
 800205e:	f107 020c 	add.w	r2, r7, #12
 8002062:	230a      	movs	r3, #10
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2302      	movs	r3, #2
 8002068:	4803      	ldr	r0, [pc, #12]	; (8002078 <ssd1306_I2C_Write+0x38>)
 800206a:	f002 fe39 	bl	8004ce0 <HAL_I2C_Master_Transmit>
}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200002ec 	.word	0x200002ec

0800207c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_MspInit+0x44>)
 8002084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002086:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <HAL_MspInit+0x44>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6613      	str	r3, [r2, #96]	; 0x60
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <HAL_MspInit+0x44>)
 8002090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_MspInit+0x44>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <HAL_MspInit+0x44>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6593      	str	r3, [r2, #88]	; 0x58
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_MspInit+0x44>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000

080020c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <NMI_Handler+0x4>

080020ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ce:	e7fe      	b.n	80020ce <HardFault_Handler+0x4>

080020d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <MemManage_Handler+0x4>

080020d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020da:	e7fe      	b.n	80020da <BusFault_Handler+0x4>

080020dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <UsageFault_Handler+0x4>

080020e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002110:	f000 fbf0 	bl	80028f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}

08002118 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <DMA1_Channel1_IRQHandler+0x10>)
 800211e:	f002 faa3 	bl	8004668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000278 	.word	0x20000278

0800212c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <DMA1_Channel2_IRQHandler+0x10>)
 8002132:	f002 fa99 	bl	8004668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200008a0 	.word	0x200008a0

08002140 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <ADC1_2_IRQHandler+0x10>)
 8002146:	f000 ffbb 	bl	80030c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000020c 	.word	0x2000020c

08002154 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return 1;
 8002158:	2301      	movs	r3, #1
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_kill>:

int _kill(int pid, int sig)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800216e:	f006 fa7b 	bl	8008668 <__errno>
 8002172:	4603      	mov	r3, r0
 8002174:	2216      	movs	r2, #22
 8002176:	601a      	str	r2, [r3, #0]
  return -1;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <_exit>:

void _exit (int status)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ffe7 	bl	8002164 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002196:	e7fe      	b.n	8002196 <_exit+0x12>

08002198 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e00a      	b.n	80021c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021aa:	f3af 8000 	nop.w
 80021ae:	4601      	mov	r1, r0
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	60ba      	str	r2, [r7, #8]
 80021b6:	b2ca      	uxtb	r2, r1
 80021b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dbf0      	blt.n	80021aa <_read+0x12>
  }

  return len;
 80021c8:	687b      	ldr	r3, [r7, #4]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021fa:	605a      	str	r2, [r3, #4]
  return 0;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <_isatty>:

int _isatty(int file)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002212:	2301      	movs	r3, #1
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002244:	4a14      	ldr	r2, [pc, #80]	; (8002298 <_sbrk+0x5c>)
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <_sbrk+0x60>)
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <_sbrk+0x64>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d102      	bne.n	800225e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <_sbrk+0x64>)
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <_sbrk+0x68>)
 800225c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	429a      	cmp	r2, r3
 800226a:	d207      	bcs.n	800227c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800226c:	f006 f9fc 	bl	8008668 <__errno>
 8002270:	4603      	mov	r3, r0
 8002272:	220c      	movs	r2, #12
 8002274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	e009      	b.n	8002290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <_sbrk+0x64>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <_sbrk+0x64>)
 800228c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800228e:	68fb      	ldr	r3, [r7, #12]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20008000 	.word	0x20008000
 800229c:	00000400 	.word	0x00000400
 80022a0:	2000076c 	.word	0x2000076c
 80022a4:	200009a8 	.word	0x200009a8

080022a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <SystemInit+0x20>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b2:	4a05      	ldr	r2, [pc, #20]	; (80022c8 <SystemInit+0x20>)
 80022b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
DMA_HandleTypeDef hdma_tim2_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022d2:	f107 0310 	add.w	r3, r7, #16
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <MX_TIM2_Init+0x94>)
 80022ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <MX_TIM2_Init+0x94>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <MX_TIM2_Init+0x94>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <MX_TIM2_Init+0x94>)
 8002300:	2204      	movs	r2, #4
 8002302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002304:	4b16      	ldr	r3, [pc, #88]	; (8002360 <MX_TIM2_Init+0x94>)
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <MX_TIM2_Init+0x94>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002310:	4813      	ldr	r0, [pc, #76]	; (8002360 <MX_TIM2_Init+0x94>)
 8002312:	f004 fc15 	bl	8006b40 <HAL_TIM_Base_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800231c:	f7ff fbe0 	bl	8001ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002324:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002326:	f107 0310 	add.w	r3, r7, #16
 800232a:	4619      	mov	r1, r3
 800232c:	480c      	ldr	r0, [pc, #48]	; (8002360 <MX_TIM2_Init+0x94>)
 800232e:	f004 fd93 	bl	8006e58 <HAL_TIM_ConfigClockSource>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002338:	f7ff fbd2 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800233c:	2320      	movs	r3, #32
 800233e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	4619      	mov	r1, r3
 8002348:	4805      	ldr	r0, [pc, #20]	; (8002360 <MX_TIM2_Init+0x94>)
 800234a:	f005 faa1 	bl	8007890 <HAL_TIMEx_MasterConfigSynchronization>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002354:	f7ff fbc4 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002358:	bf00      	nop
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000770 	.word	0x20000770

08002364 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08e      	sub	sp, #56	; 0x38
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002378:	f107 031c 	add.w	r3, r7, #28
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002384:	463b      	mov	r3, r7
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	611a      	str	r2, [r3, #16]
 8002392:	615a      	str	r2, [r3, #20]
 8002394:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002396:	4b2c      	ldr	r3, [pc, #176]	; (8002448 <MX_TIM3_Init+0xe4>)
 8002398:	4a2c      	ldr	r2, [pc, #176]	; (800244c <MX_TIM3_Init+0xe8>)
 800239a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 800239c:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <MX_TIM3_Init+0xe4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a2:	4b29      	ldr	r3, [pc, #164]	; (8002448 <MX_TIM3_Init+0xe4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 84;
 80023a8:	4b27      	ldr	r3, [pc, #156]	; (8002448 <MX_TIM3_Init+0xe4>)
 80023aa:	2254      	movs	r2, #84	; 0x54
 80023ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ae:	4b26      	ldr	r3, [pc, #152]	; (8002448 <MX_TIM3_Init+0xe4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <MX_TIM3_Init+0xe4>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023ba:	4823      	ldr	r0, [pc, #140]	; (8002448 <MX_TIM3_Init+0xe4>)
 80023bc:	f004 fbc0 	bl	8006b40 <HAL_TIM_Base_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80023c6:	f7ff fb8b 	bl	8001ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d4:	4619      	mov	r1, r3
 80023d6:	481c      	ldr	r0, [pc, #112]	; (8002448 <MX_TIM3_Init+0xe4>)
 80023d8:	f004 fd3e 	bl	8006e58 <HAL_TIM_ConfigClockSource>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80023e2:	f7ff fb7d 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80023e6:	4818      	ldr	r0, [pc, #96]	; (8002448 <MX_TIM3_Init+0xe4>)
 80023e8:	f004 fc01 	bl	8006bee <HAL_TIM_OC_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80023f2:	f7ff fb75 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023f6:	2320      	movs	r3, #32
 80023f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023fe:	f107 031c 	add.w	r3, r7, #28
 8002402:	4619      	mov	r1, r3
 8002404:	4810      	ldr	r0, [pc, #64]	; (8002448 <MX_TIM3_Init+0xe4>)
 8002406:	f005 fa43 	bl	8007890 <HAL_TIMEx_MasterConfigSynchronization>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002410:	f7ff fb66 	bl	8001ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002414:	2330      	movs	r3, #48	; 0x30
 8002416:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002424:	463b      	mov	r3, r7
 8002426:	2200      	movs	r2, #0
 8002428:	4619      	mov	r1, r3
 800242a:	4807      	ldr	r0, [pc, #28]	; (8002448 <MX_TIM3_Init+0xe4>)
 800242c:	f004 fc9a 	bl	8006d64 <HAL_TIM_OC_ConfigChannel>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002436:	f7ff fb53 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800243a:	4803      	ldr	r0, [pc, #12]	; (8002448 <MX_TIM3_Init+0xe4>)
 800243c:	f000 f902 	bl	8002644 <HAL_TIM_MspPostInit>

}
 8002440:	bf00      	nop
 8002442:	3738      	adds	r7, #56	; 0x38
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200007bc 	.word	0x200007bc
 800244c:	40000400 	.word	0x40000400

08002450 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <MX_TIM6_Init+0x78>)
 8002462:	4a1a      	ldr	r2, [pc, #104]	; (80024cc <MX_TIM6_Init+0x7c>)
 8002464:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40000-1;
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <MX_TIM6_Init+0x78>)
 8002468:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800246c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246e:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <MX_TIM6_Init+0x78>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20999;
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <MX_TIM6_Init+0x78>)
 8002476:	f245 2207 	movw	r2, #20999	; 0x5207
 800247a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <MX_TIM6_Init+0x78>)
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002482:	4811      	ldr	r0, [pc, #68]	; (80024c8 <MX_TIM6_Init+0x78>)
 8002484:	f004 fb5c 	bl	8006b40 <HAL_TIM_Base_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800248e:	f7ff fb27 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8002492:	2108      	movs	r1, #8
 8002494:	480c      	ldr	r0, [pc, #48]	; (80024c8 <MX_TIM6_Init+0x78>)
 8002496:	f004 fc0b 	bl	8006cb0 <HAL_TIM_OnePulse_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM6_Init+0x54>
  {
    Error_Handler();
 80024a0:	f7ff fb1e 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a4:	2300      	movs	r3, #0
 80024a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	4619      	mov	r1, r3
 80024b0:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_TIM6_Init+0x78>)
 80024b2:	f005 f9ed 	bl	8007890 <HAL_TIMEx_MasterConfigSynchronization>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM6_Init+0x70>
  {
    Error_Handler();
 80024bc:	f7ff fb10 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000808 	.word	0x20000808
 80024cc:	40001000 	.word	0x40001000

080024d0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <MX_TIM7_Init+0x64>)
 80024e2:	4a15      	ldr	r2, [pc, #84]	; (8002538 <MX_TIM7_Init+0x68>)
 80024e4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1-1;
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <MX_TIM7_Init+0x64>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <MX_TIM7_Init+0x64>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 84;
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <MX_TIM7_Init+0x64>)
 80024f4:	2254      	movs	r2, #84	; 0x54
 80024f6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <MX_TIM7_Init+0x64>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80024fe:	480d      	ldr	r0, [pc, #52]	; (8002534 <MX_TIM7_Init+0x64>)
 8002500:	f004 fb1e 	bl	8006b40 <HAL_TIM_Base_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800250a:	f7ff fae9 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800250e:	2320      	movs	r3, #32
 8002510:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	4619      	mov	r1, r3
 800251a:	4806      	ldr	r0, [pc, #24]	; (8002534 <MX_TIM7_Init+0x64>)
 800251c:	f005 f9b8 	bl	8007890 <HAL_TIMEx_MasterConfigSynchronization>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002526:	f7ff fadb 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000854 	.word	0x20000854
 8002538:	40001400 	.word	0x40001400

0800253c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254c:	d135      	bne.n	80025ba <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800254e:	4b37      	ldr	r3, [pc, #220]	; (800262c <HAL_TIM_Base_MspInit+0xf0>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	4a36      	ldr	r2, [pc, #216]	; (800262c <HAL_TIM_Base_MspInit+0xf0>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6593      	str	r3, [r2, #88]	; 0x58
 800255a:	4b34      	ldr	r3, [pc, #208]	; (800262c <HAL_TIM_Base_MspInit+0xf0>)
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8002566:	4b32      	ldr	r3, [pc, #200]	; (8002630 <HAL_TIM_Base_MspInit+0xf4>)
 8002568:	4a32      	ldr	r2, [pc, #200]	; (8002634 <HAL_TIM_Base_MspInit+0xf8>)
 800256a:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 800256c:	4b30      	ldr	r3, [pc, #192]	; (8002630 <HAL_TIM_Base_MspInit+0xf4>)
 800256e:	223c      	movs	r2, #60	; 0x3c
 8002570:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002572:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_TIM_Base_MspInit+0xf4>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_TIM_Base_MspInit+0xf4>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 800257e:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <HAL_TIM_Base_MspInit+0xf4>)
 8002580:	2280      	movs	r2, #128	; 0x80
 8002582:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <HAL_TIM_Base_MspInit+0xf4>)
 8002586:	2200      	movs	r2, #0
 8002588:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800258a:	4b29      	ldr	r3, [pc, #164]	; (8002630 <HAL_TIM_Base_MspInit+0xf4>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <HAL_TIM_Base_MspInit+0xf4>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8002596:	4b26      	ldr	r3, [pc, #152]	; (8002630 <HAL_TIM_Base_MspInit+0xf4>)
 8002598:	2200      	movs	r2, #0
 800259a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 800259c:	4824      	ldr	r0, [pc, #144]	; (8002630 <HAL_TIM_Base_MspInit+0xf4>)
 800259e:	f001 ffbb 	bl	8004518 <HAL_DMA_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 80025a8:	f7ff fa9a 	bl	8001ae0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a20      	ldr	r2, [pc, #128]	; (8002630 <HAL_TIM_Base_MspInit+0xf4>)
 80025b0:	621a      	str	r2, [r3, #32]
 80025b2:	4a1f      	ldr	r2, [pc, #124]	; (8002630 <HAL_TIM_Base_MspInit+0xf4>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80025b8:	e034      	b.n	8002624 <HAL_TIM_Base_MspInit+0xe8>
  else if(tim_baseHandle->Instance==TIM3)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <HAL_TIM_Base_MspInit+0xfc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d10c      	bne.n	80025de <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_TIM_Base_MspInit+0xf0>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c8:	4a18      	ldr	r2, [pc, #96]	; (800262c <HAL_TIM_Base_MspInit+0xf0>)
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	6593      	str	r3, [r2, #88]	; 0x58
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <HAL_TIM_Base_MspInit+0xf0>)
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693b      	ldr	r3, [r7, #16]
}
 80025dc:	e022      	b.n	8002624 <HAL_TIM_Base_MspInit+0xe8>
  else if(tim_baseHandle->Instance==TIM6)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a16      	ldr	r2, [pc, #88]	; (800263c <HAL_TIM_Base_MspInit+0x100>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d10c      	bne.n	8002602 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025e8:	4b10      	ldr	r3, [pc, #64]	; (800262c <HAL_TIM_Base_MspInit+0xf0>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	4a0f      	ldr	r2, [pc, #60]	; (800262c <HAL_TIM_Base_MspInit+0xf0>)
 80025ee:	f043 0310 	orr.w	r3, r3, #16
 80025f2:	6593      	str	r3, [r2, #88]	; 0x58
 80025f4:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_TIM_Base_MspInit+0xf0>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	e010      	b.n	8002624 <HAL_TIM_Base_MspInit+0xe8>
  else if(tim_baseHandle->Instance==TIM7)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <HAL_TIM_Base_MspInit+0x104>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d10b      	bne.n	8002624 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800260c:	4b07      	ldr	r3, [pc, #28]	; (800262c <HAL_TIM_Base_MspInit+0xf0>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	4a06      	ldr	r2, [pc, #24]	; (800262c <HAL_TIM_Base_MspInit+0xf0>)
 8002612:	f043 0320 	orr.w	r3, r3, #32
 8002616:	6593      	str	r3, [r2, #88]	; 0x58
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <HAL_TIM_Base_MspInit+0xf0>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
}
 8002624:	bf00      	nop
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	200008a0 	.word	0x200008a0
 8002634:	4002001c 	.word	0x4002001c
 8002638:	40000400 	.word	0x40000400
 800263c:	40001000 	.word	0x40001000
 8002640:	40001400 	.word	0x40001400

08002644 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 030c 	add.w	r3, r7, #12
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_TIM_MspPostInit+0x64>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d11b      	bne.n	800269e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	4b11      	ldr	r3, [pc, #68]	; (80026ac <HAL_TIM_MspPostInit+0x68>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	4a10      	ldr	r2, [pc, #64]	; (80026ac <HAL_TIM_MspPostInit+0x68>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002672:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <HAL_TIM_MspPostInit+0x68>)
 8002674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800267e:	2310      	movs	r3, #16
 8002680:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800268e:	2302      	movs	r3, #2
 8002690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002692:	f107 030c 	add.w	r3, r7, #12
 8002696:	4619      	mov	r1, r3
 8002698:	4805      	ldr	r0, [pc, #20]	; (80026b0 <HAL_TIM_MspPostInit+0x6c>)
 800269a:	f002 f8f7 	bl	800488c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800269e:	bf00      	nop
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40000400 	.word	0x40000400
 80026ac:	40021000 	.word	0x40021000
 80026b0:	48000400 	.word	0x48000400

080026b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026b8:	4b22      	ldr	r3, [pc, #136]	; (8002744 <MX_USART2_UART_Init+0x90>)
 80026ba:	4a23      	ldr	r2, [pc, #140]	; (8002748 <MX_USART2_UART_Init+0x94>)
 80026bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026be:	4b21      	ldr	r3, [pc, #132]	; (8002744 <MX_USART2_UART_Init+0x90>)
 80026c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026c6:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <MX_USART2_UART_Init+0x90>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026cc:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <MX_USART2_UART_Init+0x90>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <MX_USART2_UART_Init+0x90>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026d8:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <MX_USART2_UART_Init+0x90>)
 80026da:	220c      	movs	r2, #12
 80026dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <MX_USART2_UART_Init+0x90>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <MX_USART2_UART_Init+0x90>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <MX_USART2_UART_Init+0x90>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <MX_USART2_UART_Init+0x90>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <MX_USART2_UART_Init+0x90>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026fc:	4811      	ldr	r0, [pc, #68]	; (8002744 <MX_USART2_UART_Init+0x90>)
 80026fe:	f005 f949 	bl	8007994 <HAL_UART_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002708:	f7ff f9ea 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800270c:	2100      	movs	r1, #0
 800270e:	480d      	ldr	r0, [pc, #52]	; (8002744 <MX_USART2_UART_Init+0x90>)
 8002710:	f005 fee0 	bl	80084d4 <HAL_UARTEx_SetTxFifoThreshold>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800271a:	f7ff f9e1 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800271e:	2100      	movs	r1, #0
 8002720:	4808      	ldr	r0, [pc, #32]	; (8002744 <MX_USART2_UART_Init+0x90>)
 8002722:	f005 ff15 	bl	8008550 <HAL_UARTEx_SetRxFifoThreshold>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800272c:	f7ff f9d8 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002730:	4804      	ldr	r0, [pc, #16]	; (8002744 <MX_USART2_UART_Init+0x90>)
 8002732:	f005 fe96 	bl	8008462 <HAL_UARTEx_DisableFifoMode>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800273c:	f7ff f9d0 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000900 	.word	0x20000900
 8002748:	40004400 	.word	0x40004400

0800274c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b09a      	sub	sp, #104	; 0x68
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002764:	f107 0310 	add.w	r3, r7, #16
 8002768:	2244      	movs	r2, #68	; 0x44
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f005 ffa5 	bl	80086bc <memset>
  if(uartHandle->Instance==USART2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1f      	ldr	r2, [pc, #124]	; (80027f4 <HAL_UART_MspInit+0xa8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d136      	bne.n	80027ea <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800277c:	2302      	movs	r3, #2
 800277e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002780:	2300      	movs	r3, #0
 8002782:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002784:	f107 0310 	add.w	r3, r7, #16
 8002788:	4618      	mov	r0, r3
 800278a:	f003 ffe9 	bl	8006760 <HAL_RCCEx_PeriphCLKConfig>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002794:	f7ff f9a4 	bl	8001ae0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002798:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <HAL_UART_MspInit+0xac>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	4a16      	ldr	r2, [pc, #88]	; (80027f8 <HAL_UART_MspInit+0xac>)
 800279e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a2:	6593      	str	r3, [r2, #88]	; 0x58
 80027a4:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <HAL_UART_MspInit+0xac>)
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_UART_MspInit+0xac>)
 80027b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b4:	4a10      	ldr	r2, [pc, #64]	; (80027f8 <HAL_UART_MspInit+0xac>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <HAL_UART_MspInit+0xac>)
 80027be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027c8:	230c      	movs	r3, #12
 80027ca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d4:	2300      	movs	r3, #0
 80027d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027d8:	2307      	movs	r3, #7
 80027da:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027e0:	4619      	mov	r1, r3
 80027e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e6:	f002 f851 	bl	800488c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80027ea:	bf00      	nop
 80027ec:	3768      	adds	r7, #104	; 0x68
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40004400 	.word	0x40004400
 80027f8:	40021000 	.word	0x40021000

080027fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027fc:	480d      	ldr	r0, [pc, #52]	; (8002834 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002800:	480d      	ldr	r0, [pc, #52]	; (8002838 <LoopForever+0x6>)
  ldr r1, =_edata
 8002802:	490e      	ldr	r1, [pc, #56]	; (800283c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002804:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <LoopForever+0xe>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002818:	4c0b      	ldr	r4, [pc, #44]	; (8002848 <LoopForever+0x16>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002826:	f7ff fd3f 	bl	80022a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800282a:	f005 ff23 	bl	8008674 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800282e:	f7ff f83d 	bl	80018ac <main>

08002832 <LoopForever>:

LoopForever:
    b LoopForever
 8002832:	e7fe      	b.n	8002832 <LoopForever>
  ldr   r0, =_estack
 8002834:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800283c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002840:	0800e9dc 	.word	0x0800e9dc
  ldr r2, =_sbss
 8002844:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002848:	200009a4 	.word	0x200009a4

0800284c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800284c:	e7fe      	b.n	800284c <COMP1_2_3_IRQHandler>

0800284e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002858:	2003      	movs	r0, #3
 800285a:	f001 fc1b 	bl	8004094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800285e:	2000      	movs	r0, #0
 8002860:	f000 f80e 	bl	8002880 <HAL_InitTick>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	71fb      	strb	r3, [r7, #7]
 800286e:	e001      	b.n	8002874 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002870:	f7ff fc04 	bl	800207c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002874:	79fb      	ldrb	r3, [r7, #7]

}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800288c:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <HAL_InitTick+0x68>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d022      	beq.n	80028da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002894:	4b15      	ldr	r3, [pc, #84]	; (80028ec <HAL_InitTick+0x6c>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <HAL_InitTick+0x68>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	4618      	mov	r0, r3
 80028aa:	f001 fc26 	bl	80040fa <HAL_SYSTICK_Config>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10f      	bne.n	80028d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	d809      	bhi.n	80028ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028ba:	2200      	movs	r2, #0
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	f04f 30ff 	mov.w	r0, #4294967295
 80028c2:	f001 fbf2 	bl	80040aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028c6:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <HAL_InitTick+0x70>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	e007      	b.n	80028de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]
 80028d2:	e004      	b.n	80028de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
 80028d8:	e001      	b.n	80028de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028de:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000018 	.word	0x20000018
 80028ec:	20000010 	.word	0x20000010
 80028f0:	20000014 	.word	0x20000014

080028f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_IncTick+0x1c>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_IncTick+0x20>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4413      	add	r3, r2
 8002902:	4a03      	ldr	r2, [pc, #12]	; (8002910 <HAL_IncTick+0x1c>)
 8002904:	6013      	str	r3, [r2, #0]
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	20000990 	.word	0x20000990
 8002914:	20000018 	.word	0x20000018

08002918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return uwTick;
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <HAL_GetTick+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000990 	.word	0x20000990

08002930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002938:	f7ff ffee 	bl	8002918 <HAL_GetTick>
 800293c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d004      	beq.n	8002954 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_Delay+0x40>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4413      	add	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002954:	bf00      	nop
 8002956:	f7ff ffdf 	bl	8002918 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	429a      	cmp	r2, r3
 8002964:	d8f7      	bhi.n	8002956 <HAL_Delay+0x26>
  {
  }
}
 8002966:	bf00      	nop
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000018 	.word	0x20000018

08002974 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	609a      	str	r2, [r3, #8]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	609a      	str	r2, [r3, #8]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3360      	adds	r3, #96	; 0x60
 80029ee:	461a      	mov	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <LL_ADC_SetOffset+0x44>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a14:	bf00      	nop
 8002a16:	371c      	adds	r7, #28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	03fff000 	.word	0x03fff000

08002a24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3360      	adds	r3, #96	; 0x60
 8002a32:	461a      	mov	r2, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3360      	adds	r3, #96	; 0x60
 8002a60:	461a      	mov	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a7a:	bf00      	nop
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b087      	sub	sp, #28
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3360      	adds	r3, #96	; 0x60
 8002a96:	461a      	mov	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002ab0:	bf00      	nop
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3360      	adds	r3, #96	; 0x60
 8002acc:	461a      	mov	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002ae6:	bf00      	nop
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	615a      	str	r2, [r3, #20]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b087      	sub	sp, #28
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3330      	adds	r3, #48	; 0x30
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	4413      	add	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	211f      	movs	r1, #31
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	401a      	ands	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	0e9b      	lsrs	r3, r3, #26
 8002b76:	f003 011f 	and.w	r1, r3, #31
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	431a      	orrs	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3314      	adds	r3, #20
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	0e5b      	lsrs	r3, r3, #25
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	4413      	add	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	0d1b      	lsrs	r3, r3, #20
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2107      	movs	r1, #7
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	0d1b      	lsrs	r3, r3, #20
 8002bf6:	f003 031f 	and.w	r3, r3, #31
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	431a      	orrs	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c06:	bf00      	nop
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a0f      	ldr	r2, [pc, #60]	; (8002c60 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d10a      	bne.n	8002c3e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c34:	431a      	orrs	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002c3c:	e00a      	b.n	8002c54 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	407f0000 	.word	0x407f0000

08002c64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 031f 	and.w	r3, r3, #31
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002cac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6093      	str	r3, [r2, #8]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd4:	d101      	bne.n	8002cda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002cf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cfc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d24:	d101      	bne.n	8002d2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <LL_ADC_IsEnabled+0x18>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <LL_ADC_IsEnabled+0x1a>
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d101      	bne.n	8002d76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b089      	sub	sp, #36	; 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e177      	b.n	80030b6 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fe fac1 	bl	800135c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff67 	bl	8002cc0 <LL_ADC_IsDeepPowerDownEnabled>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d004      	beq.n	8002e02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff4d 	bl	8002c9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ff82 	bl	8002d10 <LL_ADC_IsInternalRegulatorEnabled>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d115      	bne.n	8002e3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff66 	bl	8002ce8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e1c:	4b9c      	ldr	r3, [pc, #624]	; (8003090 <HAL_ADC_Init+0x2e4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	4a9c      	ldr	r2, [pc, #624]	; (8003094 <HAL_ADC_Init+0x2e8>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e30:	e002      	b.n	8002e38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f9      	bne.n	8002e32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff64 	bl	8002d10 <LL_ADC_IsInternalRegulatorEnabled>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	f043 0210 	orr.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff75 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8002e74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 8110 	bne.w	80030a4 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 810c 	bne.w	80030a4 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e94:	f043 0202 	orr.w	r2, r3, #2
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff49 	bl	8002d38 <LL_ADC_IsEnabled>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d111      	bne.n	8002ed0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002eb0:	f7ff ff42 	bl	8002d38 <LL_ADC_IsEnabled>
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	4878      	ldr	r0, [pc, #480]	; (8003098 <HAL_ADC_Init+0x2ec>)
 8002eb8:	f7ff ff3e 	bl	8002d38 <LL_ADC_IsEnabled>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	4323      	orrs	r3, r4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d105      	bne.n	8002ed0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4874      	ldr	r0, [pc, #464]	; (800309c <HAL_ADC_Init+0x2f0>)
 8002ecc:	f7ff fd52 	bl	8002974 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7f5b      	ldrb	r3, [r3, #29]
 8002ed4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eda:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ee0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002ee6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d106      	bne.n	8002f0c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	045b      	lsls	r3, r3, #17
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	4b5c      	ldr	r3, [pc, #368]	; (80030a0 <HAL_ADC_Init+0x2f4>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	69b9      	ldr	r1, [r7, #24]
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff ff01 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8002f5c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff ff0e 	bl	8002d84 <LL_ADC_INJ_IsConversionOngoing>
 8002f68:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d16d      	bne.n	800304c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d16a      	bne.n	800304c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f7a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f82:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f92:	f023 0302 	bic.w	r3, r3, #2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	69b9      	ldr	r1, [r7, #24]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d017      	beq.n	8002fd8 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fb6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fc0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002fc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6911      	ldr	r1, [r2, #16]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002fd6:	e013      	b.n	8003000 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fe6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ff8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ffc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003006:	2b01      	cmp	r3, #1
 8003008:	d118      	bne.n	800303c <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003020:	4311      	orrs	r1, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003026:	4311      	orrs	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800302c:	430a      	orrs	r2, r1
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	611a      	str	r2, [r3, #16]
 800303a:	e007      	b.n	800304c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d10c      	bne.n	800306e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f023 010f 	bic.w	r1, r3, #15
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	1e5a      	subs	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
 800306c:	e007      	b.n	800307e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 020f 	bic.w	r2, r2, #15
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	65da      	str	r2, [r3, #92]	; 0x5c
 800308e:	e011      	b.n	80030b4 <HAL_ADC_Init+0x308>
 8003090:	20000010 	.word	0x20000010
 8003094:	053e2d63 	.word	0x053e2d63
 8003098:	50000100 	.word	0x50000100
 800309c:	50000300 	.word	0x50000300
 80030a0:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	f043 0210 	orr.w	r2, r3, #16
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3724      	adds	r7, #36	; 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd90      	pop	{r4, r7, pc}
 80030be:	bf00      	nop

080030c0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08a      	sub	sp, #40	; 0x28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030dc:	4883      	ldr	r0, [pc, #524]	; (80032ec <HAL_ADC_IRQHandler+0x22c>)
 80030de:	f7ff fdc1 	bl	8002c64 <LL_ADC_GetMultimode>
 80030e2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d017      	beq.n	800311e <HAL_ADC_IRQHandler+0x5e>
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d012      	beq.n	800311e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b00      	cmp	r3, #0
 8003102:	d105      	bne.n	8003110 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fe41 	bl	8003d98 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2202      	movs	r2, #2
 800311c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <HAL_ADC_IRQHandler+0x72>
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 8085 	beq.w	8003248 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d07f      	beq.n	8003248 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003158:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fcd7 	bl	8002b18 <LL_ADC_REG_IsTriggerSourceSWStart>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d064      	beq.n	800323a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a5e      	ldr	r2, [pc, #376]	; (80032f0 <HAL_ADC_IRQHandler+0x230>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d002      	beq.n	8003180 <HAL_ADC_IRQHandler+0xc0>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	e001      	b.n	8003184 <HAL_ADC_IRQHandler+0xc4>
 8003180:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	4293      	cmp	r3, r2
 800318a:	d008      	beq.n	800319e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b05      	cmp	r3, #5
 8003196:	d002      	beq.n	800319e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2b09      	cmp	r3, #9
 800319c:	d104      	bne.n	80031a8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	e00d      	b.n	80031c4 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a50      	ldr	r2, [pc, #320]	; (80032f0 <HAL_ADC_IRQHandler+0x230>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d002      	beq.n	80031b8 <HAL_ADC_IRQHandler+0xf8>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	e001      	b.n	80031bc <HAL_ADC_IRQHandler+0xfc>
 80031b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031bc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d135      	bne.n	800323a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d12e      	bne.n	800323a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fdbc 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d11a      	bne.n	8003222 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 020c 	bic.w	r2, r2, #12
 80031fa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d112      	bne.n	800323a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003218:	f043 0201 	orr.w	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003220:	e00b      	b.n	800323a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	f043 0210 	orr.w	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fe fc0d 	bl	8001a5a <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	220c      	movs	r2, #12
 8003246:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d004      	beq.n	800325c <HAL_ADC_IRQHandler+0x19c>
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10b      	bne.n	8003274 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 809e 	beq.w	80033a4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8098 	beq.w	80033a4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fc80 	bl	8002b96 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003296:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fc3b 	bl	8002b18 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032a2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a11      	ldr	r2, [pc, #68]	; (80032f0 <HAL_ADC_IRQHandler+0x230>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d002      	beq.n	80032b4 <HAL_ADC_IRQHandler+0x1f4>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	e001      	b.n	80032b8 <HAL_ADC_IRQHandler+0x1f8>
 80032b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	4293      	cmp	r3, r2
 80032be:	d008      	beq.n	80032d2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d005      	beq.n	80032d2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b06      	cmp	r3, #6
 80032ca:	d002      	beq.n	80032d2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b07      	cmp	r3, #7
 80032d0:	d104      	bne.n	80032dc <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	623b      	str	r3, [r7, #32]
 80032da:	e011      	b.n	8003300 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a03      	ldr	r2, [pc, #12]	; (80032f0 <HAL_ADC_IRQHandler+0x230>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d006      	beq.n	80032f4 <HAL_ADC_IRQHandler+0x234>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	e005      	b.n	80032f8 <HAL_ADC_IRQHandler+0x238>
 80032ec:	50000300 	.word	0x50000300
 80032f0:	50000100 	.word	0x50000100
 80032f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032f8:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d047      	beq.n	8003396 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_ADC_IRQHandler+0x260>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d03f      	beq.n	8003396 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800331c:	2b00      	cmp	r3, #0
 800331e:	d13a      	bne.n	8003396 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b40      	cmp	r3, #64	; 0x40
 800332c:	d133      	bne.n	8003396 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d12e      	bne.n	8003396 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fd21 	bl	8002d84 <LL_ADC_INJ_IsConversionOngoing>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d11a      	bne.n	800337e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003356:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d112      	bne.n	8003396 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	f043 0201 	orr.w	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	65da      	str	r2, [r3, #92]	; 0x5c
 800337c:	e00b      	b.n	8003396 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	f043 0210 	orr.w	r2, r3, #16
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338e:	f043 0201 	orr.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fcd6 	bl	8003d48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2260      	movs	r2, #96	; 0x60
 80033a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d011      	beq.n	80033d2 <HAL_ADC_IRQHandler+0x312>
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00c      	beq.n	80033d2 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f895 	bl	80034f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2280      	movs	r2, #128	; 0x80
 80033d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d012      	beq.n	8003402 <HAL_ADC_IRQHandler+0x342>
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00d      	beq.n	8003402 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fcbc 	bl	8003d70 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003400:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003408:	2b00      	cmp	r3, #0
 800340a:	d012      	beq.n	8003432 <HAL_ADC_IRQHandler+0x372>
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fcae 	bl	8003d84 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003430:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b00      	cmp	r3, #0
 800343a:	d036      	beq.n	80034aa <HAL_ADC_IRQHandler+0x3ea>
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b00      	cmp	r3, #0
 8003444:	d031      	beq.n	80034aa <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800344e:	2301      	movs	r3, #1
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
 8003452:	e014      	b.n	800347e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800345a:	4825      	ldr	r0, [pc, #148]	; (80034f0 <HAL_ADC_IRQHandler+0x430>)
 800345c:	f7ff fc10 	bl	8002c80 <LL_ADC_GetMultiDMATransfer>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003466:	2301      	movs	r3, #1
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
 800346a:	e008      	b.n	800347e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800347a:	2301      	movs	r3, #1
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	2b01      	cmp	r3, #1
 8003482:	d10e      	bne.n	80034a2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003488:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003494:	f043 0202 	orr.w	r2, r3, #2
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f833 	bl	8003508 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2210      	movs	r2, #16
 80034a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d018      	beq.n	80034e6 <HAL_ADC_IRQHandler+0x426>
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d013      	beq.n	80034e6 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ce:	f043 0208 	orr.w	r2, r3, #8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034de:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fc3b 	bl	8003d5c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80034e6:	bf00      	nop
 80034e8:	3728      	adds	r7, #40	; 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	50000300 	.word	0x50000300

080034f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b0b6      	sub	sp, #216	; 0xd8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_ADC_ConfigChannel+0x22>
 800353a:	2302      	movs	r3, #2
 800353c:	e3c8      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x7b4>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fc07 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	f040 83ad 	bne.w	8003cb2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	f7ff faea 	bl	8002b3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fbf5 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8003574:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fc01 	bl	8002d84 <LL_ADC_INJ_IsConversionOngoing>
 8003582:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003586:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 81d9 	bne.w	8003942 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003590:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003594:	2b00      	cmp	r3, #0
 8003596:	f040 81d4 	bne.w	8003942 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035a2:	d10f      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2200      	movs	r2, #0
 80035ae:	4619      	mov	r1, r3
 80035b0:	f7ff fb04 	bl	8002bbc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fa98 	bl	8002af2 <LL_ADC_SetSamplingTimeCommonConfig>
 80035c2:	e00e      	b.n	80035e2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	6819      	ldr	r1, [r3, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	461a      	mov	r2, r3
 80035d2:	f7ff faf3 	bl	8002bbc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fa88 	bl	8002af2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	08db      	lsrs	r3, r3, #3
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	2b04      	cmp	r3, #4
 8003602:	d022      	beq.n	800364a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6919      	ldr	r1, [r3, #16]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003614:	f7ff f9e2 	bl	80029dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6919      	ldr	r1, [r3, #16]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	461a      	mov	r2, r3
 8003626:	f7ff fa2e 	bl	8002a86 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6919      	ldr	r1, [r3, #16]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	7f1b      	ldrb	r3, [r3, #28]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d102      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x124>
 800363a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800363e:	e000      	b.n	8003642 <HAL_ADC_ConfigChannel+0x126>
 8003640:	2300      	movs	r3, #0
 8003642:	461a      	mov	r2, r3
 8003644:	f7ff fa3a 	bl	8002abc <LL_ADC_SetOffsetSaturation>
 8003648:	e17b      	b.n	8003942 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff f9e7 	bl	8002a24 <LL_ADC_GetOffsetChannel>
 8003656:	4603      	mov	r3, r0
 8003658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x15a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff f9dc 	bl	8002a24 <LL_ADC_GetOffsetChannel>
 800366c:	4603      	mov	r3, r0
 800366e:	0e9b      	lsrs	r3, r3, #26
 8003670:	f003 021f 	and.w	r2, r3, #31
 8003674:	e01e      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x198>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2100      	movs	r1, #0
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff f9d1 	bl	8002a24 <LL_ADC_GetOffsetChannel>
 8003682:	4603      	mov	r3, r0
 8003684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003694:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003698:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800369c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80036a4:	2320      	movs	r3, #32
 80036a6:	e004      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80036a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036ac:	fab3 f383 	clz	r3, r3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x1b0>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0e9b      	lsrs	r3, r3, #26
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	e018      	b.n	80036fe <HAL_ADC_ConfigChannel+0x1e2>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80036e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80036e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80036f0:	2320      	movs	r3, #32
 80036f2:	e004      	b.n	80036fe <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80036f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036fe:	429a      	cmp	r2, r3
 8003700:	d106      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff f9a0 	bl	8002a50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2101      	movs	r1, #1
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff f984 	bl	8002a24 <LL_ADC_GetOffsetChannel>
 800371c:	4603      	mov	r3, r0
 800371e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10a      	bne.n	800373c <HAL_ADC_ConfigChannel+0x220>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2101      	movs	r1, #1
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff f979 	bl	8002a24 <LL_ADC_GetOffsetChannel>
 8003732:	4603      	mov	r3, r0
 8003734:	0e9b      	lsrs	r3, r3, #26
 8003736:	f003 021f 	and.w	r2, r3, #31
 800373a:	e01e      	b.n	800377a <HAL_ADC_ConfigChannel+0x25e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2101      	movs	r1, #1
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff f96e 	bl	8002a24 <LL_ADC_GetOffsetChannel>
 8003748:	4603      	mov	r3, r0
 800374a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800375a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800375e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003762:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800376a:	2320      	movs	r3, #32
 800376c:	e004      	b.n	8003778 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800376e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003782:	2b00      	cmp	r3, #0
 8003784:	d105      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x276>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	0e9b      	lsrs	r3, r3, #26
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	e018      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x2a8>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800379e:	fa93 f3a3 	rbit	r3, r3
 80037a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80037a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80037ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80037b6:	2320      	movs	r3, #32
 80037b8:	e004      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80037ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d106      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2200      	movs	r2, #0
 80037ce:	2101      	movs	r1, #1
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff f93d 	bl	8002a50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2102      	movs	r1, #2
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff f921 	bl	8002a24 <LL_ADC_GetOffsetChannel>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x2e6>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2102      	movs	r1, #2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff f916 	bl	8002a24 <LL_ADC_GetOffsetChannel>
 80037f8:	4603      	mov	r3, r0
 80037fa:	0e9b      	lsrs	r3, r3, #26
 80037fc:	f003 021f 	and.w	r2, r3, #31
 8003800:	e01e      	b.n	8003840 <HAL_ADC_ConfigChannel+0x324>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2102      	movs	r1, #2
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff f90b 	bl	8002a24 <LL_ADC_GetOffsetChannel>
 800380e:	4603      	mov	r3, r0
 8003810:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003820:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003824:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003828:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003830:	2320      	movs	r3, #32
 8003832:	e004      	b.n	800383e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003834:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003838:	fab3 f383 	clz	r3, r3
 800383c:	b2db      	uxtb	r3, r3
 800383e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003848:	2b00      	cmp	r3, #0
 800384a:	d105      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x33c>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	0e9b      	lsrs	r3, r3, #26
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	e016      	b.n	8003886 <HAL_ADC_ConfigChannel+0x36a>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003860:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003864:	fa93 f3a3 	rbit	r3, r3
 8003868:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800386a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800386c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003878:	2320      	movs	r3, #32
 800387a:	e004      	b.n	8003886 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800387c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003880:	fab3 f383 	clz	r3, r3
 8003884:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003886:	429a      	cmp	r2, r3
 8003888:	d106      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2200      	movs	r2, #0
 8003890:	2102      	movs	r1, #2
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff f8dc 	bl	8002a50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2103      	movs	r1, #3
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff f8c0 	bl	8002a24 <LL_ADC_GetOffsetChannel>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x3a8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2103      	movs	r1, #3
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff f8b5 	bl	8002a24 <LL_ADC_GetOffsetChannel>
 80038ba:	4603      	mov	r3, r0
 80038bc:	0e9b      	lsrs	r3, r3, #26
 80038be:	f003 021f 	and.w	r2, r3, #31
 80038c2:	e017      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x3d8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2103      	movs	r1, #3
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff f8aa 	bl	8002a24 <LL_ADC_GetOffsetChannel>
 80038d0:	4603      	mov	r3, r0
 80038d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80038dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038de:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80038e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80038e6:	2320      	movs	r3, #32
 80038e8:	e003      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80038ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ec:	fab3 f383 	clz	r3, r3
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d105      	bne.n	800390c <HAL_ADC_ConfigChannel+0x3f0>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0e9b      	lsrs	r3, r3, #26
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	e011      	b.n	8003930 <HAL_ADC_ConfigChannel+0x414>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800391a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800391c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800391e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003924:	2320      	movs	r3, #32
 8003926:	e003      	b.n	8003930 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003930:	429a      	cmp	r2, r3
 8003932:	d106      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2200      	movs	r2, #0
 800393a:	2103      	movs	r1, #3
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff f887 	bl	8002a50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff f9f6 	bl	8002d38 <LL_ADC_IsEnabled>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	f040 8140 	bne.w	8003bd4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	6819      	ldr	r1, [r3, #0]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	461a      	mov	r2, r3
 8003962:	f7ff f957 	bl	8002c14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	4a8f      	ldr	r2, [pc, #572]	; (8003ba8 <HAL_ADC_ConfigChannel+0x68c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	f040 8131 	bne.w	8003bd4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10b      	bne.n	800399a <HAL_ADC_ConfigChannel+0x47e>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	0e9b      	lsrs	r3, r3, #26
 8003988:	3301      	adds	r3, #1
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2b09      	cmp	r3, #9
 8003990:	bf94      	ite	ls
 8003992:	2301      	movls	r3, #1
 8003994:	2300      	movhi	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	e019      	b.n	80039ce <HAL_ADC_ConfigChannel+0x4b2>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a2:	fa93 f3a3 	rbit	r3, r3
 80039a6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80039a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039aa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80039ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80039b2:	2320      	movs	r3, #32
 80039b4:	e003      	b.n	80039be <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80039b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039b8:	fab3 f383 	clz	r3, r3
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	3301      	adds	r3, #1
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	2b09      	cmp	r3, #9
 80039c6:	bf94      	ite	ls
 80039c8:	2301      	movls	r3, #1
 80039ca:	2300      	movhi	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d079      	beq.n	8003ac6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d107      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x4d2>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	0e9b      	lsrs	r3, r3, #26
 80039e4:	3301      	adds	r3, #1
 80039e6:	069b      	lsls	r3, r3, #26
 80039e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039ec:	e015      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x4fe>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003a06:	2320      	movs	r3, #32
 8003a08:	e003      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a0c:	fab3 f383 	clz	r3, r3
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	3301      	adds	r3, #1
 8003a14:	069b      	lsls	r3, r3, #26
 8003a16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x51e>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	0e9b      	lsrs	r3, r3, #26
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2101      	movs	r1, #1
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	e017      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x54e>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003a52:	2320      	movs	r3, #32
 8003a54:	e003      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a58:	fab3 f383 	clz	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	2101      	movs	r1, #1
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	ea42 0103 	orr.w	r1, r2, r3
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x574>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	0e9b      	lsrs	r3, r3, #26
 8003a80:	3301      	adds	r3, #1
 8003a82:	f003 021f 	and.w	r2, r3, #31
 8003a86:	4613      	mov	r3, r2
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	4413      	add	r3, r2
 8003a8c:	051b      	lsls	r3, r3, #20
 8003a8e:	e018      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x5a6>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	fa93 f3a3 	rbit	r3, r3
 8003a9c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003aa8:	2320      	movs	r3, #32
 8003aaa:	e003      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aae:	fab3 f383 	clz	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	f003 021f 	and.w	r2, r3, #31
 8003aba:	4613      	mov	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	4413      	add	r3, r2
 8003ac0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ac2:	430b      	orrs	r3, r1
 8003ac4:	e081      	b.n	8003bca <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x5c6>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	0e9b      	lsrs	r3, r3, #26
 8003ad8:	3301      	adds	r3, #1
 8003ada:	069b      	lsls	r3, r3, #26
 8003adc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ae0:	e015      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x5f2>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003afa:	2320      	movs	r3, #32
 8003afc:	e003      	b.n	8003b06 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	fab3 f383 	clz	r3, r3
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	3301      	adds	r3, #1
 8003b08:	069b      	lsls	r3, r3, #26
 8003b0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x612>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	0e9b      	lsrs	r3, r3, #26
 8003b20:	3301      	adds	r3, #1
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	2101      	movs	r1, #1
 8003b28:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2c:	e017      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x642>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	61fb      	str	r3, [r7, #28]
  return result;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003b46:	2320      	movs	r3, #32
 8003b48:	e003      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	fab3 f383 	clz	r3, r3
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	3301      	adds	r3, #1
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	2101      	movs	r1, #1
 8003b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5e:	ea42 0103 	orr.w	r1, r2, r3
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10d      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x66e>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	0e9b      	lsrs	r3, r3, #26
 8003b74:	3301      	adds	r3, #1
 8003b76:	f003 021f 	and.w	r2, r3, #31
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	3b1e      	subs	r3, #30
 8003b82:	051b      	lsls	r3, r3, #20
 8003b84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b88:	e01e      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x6ac>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	fa93 f3a3 	rbit	r3, r3
 8003b96:	613b      	str	r3, [r7, #16]
  return result;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d104      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003ba2:	2320      	movs	r3, #32
 8003ba4:	e006      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x698>
 8003ba6:	bf00      	nop
 8003ba8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	fab3 f383 	clz	r3, r3
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	f003 021f 	and.w	r2, r3, #31
 8003bba:	4613      	mov	r3, r2
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3b1e      	subs	r3, #30
 8003bc2:	051b      	lsls	r3, r3, #20
 8003bc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	6892      	ldr	r2, [r2, #8]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f7fe fff4 	bl	8002bbc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b3f      	ldr	r3, [pc, #252]	; (8003cd8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d071      	beq.n	8003cc4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003be0:	483e      	ldr	r0, [pc, #248]	; (8003cdc <HAL_ADC_ConfigChannel+0x7c0>)
 8003be2:	f7fe feed 	bl	80029c0 <LL_ADC_GetCommonPathInternalCh>
 8003be6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a3c      	ldr	r2, [pc, #240]	; (8003ce0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d004      	beq.n	8003bfe <HAL_ADC_ConfigChannel+0x6e2>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a3a      	ldr	r2, [pc, #232]	; (8003ce4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d127      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d121      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c12:	d157      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	482f      	ldr	r0, [pc, #188]	; (8003cdc <HAL_ADC_ConfigChannel+0x7c0>)
 8003c20:	f7fe febb 	bl	800299a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c24:	4b30      	ldr	r3, [pc, #192]	; (8003ce8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	099b      	lsrs	r3, r3, #6
 8003c2a:	4a30      	ldr	r2, [pc, #192]	; (8003cec <HAL_ADC_ConfigChannel+0x7d0>)
 8003c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c30:	099b      	lsrs	r3, r3, #6
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	4613      	mov	r3, r2
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c3e:	e002      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f9      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c4c:	e03a      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a27      	ldr	r2, [pc, #156]	; (8003cf0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d113      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x764>
 8003c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10d      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a22      	ldr	r2, [pc, #136]	; (8003cf4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d02a      	beq.n	8003cc4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c76:	4619      	mov	r1, r3
 8003c78:	4818      	ldr	r0, [pc, #96]	; (8003cdc <HAL_ADC_ConfigChannel+0x7c0>)
 8003c7a:	f7fe fe8e 	bl	800299a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c7e:	e021      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d11c      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d116      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a16      	ldr	r2, [pc, #88]	; (8003cf4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d011      	beq.n	8003cc4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ca0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ca4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ca8:	4619      	mov	r1, r3
 8003caa:	480c      	ldr	r0, [pc, #48]	; (8003cdc <HAL_ADC_ConfigChannel+0x7c0>)
 8003cac:	f7fe fe75 	bl	800299a <LL_ADC_SetCommonPathInternalCh>
 8003cb0:	e008      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb6:	f043 0220 	orr.w	r2, r3, #32
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ccc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	37d8      	adds	r7, #216	; 0xd8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	80080000 	.word	0x80080000
 8003cdc:	50000300 	.word	0x50000300
 8003ce0:	c3210000 	.word	0xc3210000
 8003ce4:	90c00010 	.word	0x90c00010
 8003ce8:	20000010 	.word	0x20000010
 8003cec:	053e2d63 	.word	0x053e2d63
 8003cf0:	c7520000 	.word	0xc7520000
 8003cf4:	50000100 	.word	0x50000100
 8003cf8:	cb840000 	.word	0xcb840000

08003cfc <LL_ADC_IsEnabled>:
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <LL_ADC_IsEnabled+0x18>
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <LL_ADC_IsEnabled+0x1a>
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d101      	bne.n	8003d3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b0a1      	sub	sp, #132	; 0x84
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e08b      	b.n	8003ee2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003de2:	d102      	bne.n	8003dea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003de4:	4b41      	ldr	r3, [pc, #260]	; (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	e001      	b.n	8003dee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10b      	bne.n	8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df8:	f043 0220 	orr.w	r2, r3, #32
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e06a      	b.n	8003ee2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff ff87 	bl	8003d22 <LL_ADC_REG_IsConversionOngoing>
 8003e14:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff ff81 	bl	8003d22 <LL_ADC_REG_IsConversionOngoing>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d14c      	bne.n	8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d149      	bne.n	8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e2c:	4b30      	ldr	r3, [pc, #192]	; (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003e2e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d028      	beq.n	8003e8a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e4a:	035b      	lsls	r3, r3, #13
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e58:	f7ff ff50 	bl	8003cfc <LL_ADC_IsEnabled>
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	4823      	ldr	r0, [pc, #140]	; (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003e60:	f7ff ff4c 	bl	8003cfc <LL_ADC_IsEnabled>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4323      	orrs	r3, r4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d133      	bne.n	8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e74:	f023 030f 	bic.w	r3, r3, #15
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	6811      	ldr	r1, [r2, #0]
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	6892      	ldr	r2, [r2, #8]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	431a      	orrs	r2, r3
 8003e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e86:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e88:	e024      	b.n	8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e94:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e96:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e9a:	f7ff ff2f 	bl	8003cfc <LL_ADC_IsEnabled>
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	4812      	ldr	r0, [pc, #72]	; (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003ea2:	f7ff ff2b 	bl	8003cfc <LL_ADC_IsEnabled>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4323      	orrs	r3, r4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d112      	bne.n	8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003eb6:	f023 030f 	bic.w	r3, r3, #15
 8003eba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ebc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ebe:	e009      	b.n	8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003ed2:	e000      	b.n	8003ed6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ed4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ede:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3784      	adds	r7, #132	; 0x84
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd90      	pop	{r4, r7, pc}
 8003eea:	bf00      	nop
 8003eec:	50000100 	.word	0x50000100
 8003ef0:	50000300 	.word	0x50000300

08003ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <__NVIC_SetPriorityGrouping+0x44>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f10:	4013      	ands	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f26:	4a04      	ldr	r2, [pc, #16]	; (8003f38 <__NVIC_SetPriorityGrouping+0x44>)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	60d3      	str	r3, [r2, #12]
}
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <__NVIC_GetPriorityGrouping+0x18>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	0a1b      	lsrs	r3, r3, #8
 8003f46:	f003 0307 	and.w	r3, r3, #7
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	e000ed00 	.word	0xe000ed00

08003f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	db0b      	blt.n	8003f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	f003 021f 	and.w	r2, r3, #31
 8003f70:	4907      	ldr	r1, [pc, #28]	; (8003f90 <__NVIC_EnableIRQ+0x38>)
 8003f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	2001      	movs	r0, #1
 8003f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	e000e100 	.word	0xe000e100

08003f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	6039      	str	r1, [r7, #0]
 8003f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	db0a      	blt.n	8003fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	490c      	ldr	r1, [pc, #48]	; (8003fe0 <__NVIC_SetPriority+0x4c>)
 8003fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb2:	0112      	lsls	r2, r2, #4
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fbc:	e00a      	b.n	8003fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	4908      	ldr	r1, [pc, #32]	; (8003fe4 <__NVIC_SetPriority+0x50>)
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	3b04      	subs	r3, #4
 8003fcc:	0112      	lsls	r2, r2, #4
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	761a      	strb	r2, [r3, #24]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	e000e100 	.word	0xe000e100
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b089      	sub	sp, #36	; 0x24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f1c3 0307 	rsb	r3, r3, #7
 8004002:	2b04      	cmp	r3, #4
 8004004:	bf28      	it	cs
 8004006:	2304      	movcs	r3, #4
 8004008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3304      	adds	r3, #4
 800400e:	2b06      	cmp	r3, #6
 8004010:	d902      	bls.n	8004018 <NVIC_EncodePriority+0x30>
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	3b03      	subs	r3, #3
 8004016:	e000      	b.n	800401a <NVIC_EncodePriority+0x32>
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800401c:	f04f 32ff 	mov.w	r2, #4294967295
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43da      	mvns	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	401a      	ands	r2, r3
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004030:	f04f 31ff 	mov.w	r1, #4294967295
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	fa01 f303 	lsl.w	r3, r1, r3
 800403a:	43d9      	mvns	r1, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004040:	4313      	orrs	r3, r2
         );
}
 8004042:	4618      	mov	r0, r3
 8004044:	3724      	adds	r7, #36	; 0x24
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3b01      	subs	r3, #1
 800405c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004060:	d301      	bcc.n	8004066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004062:	2301      	movs	r3, #1
 8004064:	e00f      	b.n	8004086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004066:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <SysTick_Config+0x40>)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3b01      	subs	r3, #1
 800406c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800406e:	210f      	movs	r1, #15
 8004070:	f04f 30ff 	mov.w	r0, #4294967295
 8004074:	f7ff ff8e 	bl	8003f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <SysTick_Config+0x40>)
 800407a:	2200      	movs	r2, #0
 800407c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800407e:	4b04      	ldr	r3, [pc, #16]	; (8004090 <SysTick_Config+0x40>)
 8004080:	2207      	movs	r2, #7
 8004082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	e000e010 	.word	0xe000e010

08004094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff ff29 	bl	8003ef4 <__NVIC_SetPriorityGrouping>
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b086      	sub	sp, #24
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	4603      	mov	r3, r0
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
 80040b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040b8:	f7ff ff40 	bl	8003f3c <__NVIC_GetPriorityGrouping>
 80040bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	6978      	ldr	r0, [r7, #20]
 80040c4:	f7ff ff90 	bl	8003fe8 <NVIC_EncodePriority>
 80040c8:	4602      	mov	r2, r0
 80040ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ce:	4611      	mov	r1, r2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff ff5f 	bl	8003f94 <__NVIC_SetPriority>
}
 80040d6:	bf00      	nop
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	4603      	mov	r3, r0
 80040e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff33 	bl	8003f58 <__NVIC_EnableIRQ>
}
 80040f2:	bf00      	nop
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff ffa4 	bl	8004050 <SysTick_Config>
 8004108:	4603      	mov	r3, r0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e014      	b.n	800414e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	791b      	ldrb	r3, [r3, #4]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d105      	bne.n	800413a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7fd f9df 	bl	80014f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2202      	movs	r2, #2
 800413e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	; 0x28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	795b      	ldrb	r3, [r3, #5]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_DAC_ConfigChannel+0x18>
 800416c:	2302      	movs	r3, #2
 800416e:	e192      	b.n	8004496 <HAL_DAC_ConfigChannel+0x33e>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2202      	movs	r2, #2
 800417a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2b04      	cmp	r3, #4
 8004182:	d174      	bne.n	800426e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004184:	f7fe fbc8 	bl	8002918 <HAL_GetTick>
 8004188:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d134      	bne.n	80041fa <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004190:	e011      	b.n	80041b6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004192:	f7fe fbc1 	bl	8002918 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	d90a      	bls.n	80041b6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f043 0208 	orr.w	r2, r3, #8
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2203      	movs	r2, #3
 80041b0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e16f      	b.n	8004496 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e6      	bne.n	8004192 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80041c4:	2001      	movs	r0, #1
 80041c6:	f7fe fbb3 	bl	8002930 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40
 80041d4:	e01e      	b.n	8004214 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80041d6:	f7fe fb9f 	bl	8002918 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d90a      	bls.n	80041fa <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f043 0208 	orr.w	r2, r3, #8
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2203      	movs	r2, #3
 80041f4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e14d      	b.n	8004496 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004200:	2b00      	cmp	r3, #0
 8004202:	dbe8      	blt.n	80041d6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004204:	2001      	movs	r0, #1
 8004206:	f7fe fb93 	bl	8002930 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004212:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	ea02 0103 	and.w	r1, r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	409a      	lsls	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	21ff      	movs	r1, #255	; 0xff
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	ea02 0103 	and.w	r1, r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	409a      	lsls	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d11d      	bne.n	80042b2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	221f      	movs	r2, #31
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428e:	4013      	ands	r3, r2
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a6:	4313      	orrs	r3, r2
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2207      	movs	r2, #7
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ca:	4013      	ands	r3, r2
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d102      	bne.n	80042dc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80042d6:	2300      	movs	r3, #0
 80042d8:	623b      	str	r3, [r7, #32]
 80042da:	e00f      	b.n	80042fc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d102      	bne.n	80042ea <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80042e4:	2301      	movs	r3, #1
 80042e6:	623b      	str	r3, [r7, #32]
 80042e8:	e008      	b.n	80042fc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d102      	bne.n	80042f8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80042f2:	2301      	movs	r3, #1
 80042f4:	623b      	str	r3, [r7, #32]
 80042f6:	e001      	b.n	80042fc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	6a3a      	ldr	r2, [r7, #32]
 8004308:	4313      	orrs	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431e:	4013      	ands	r3, r2
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	791b      	ldrb	r3, [r3, #4]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d102      	bne.n	8004330 <HAL_DAC_ConfigChannel+0x1d8>
 800432a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800432e:	e000      	b.n	8004332 <HAL_DAC_ConfigChannel+0x1da>
 8004330:	2300      	movs	r3, #0
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4313      	orrs	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434a:	4013      	ands	r3, r2
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	795b      	ldrb	r3, [r3, #5]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d102      	bne.n	800435c <HAL_DAC_ConfigChannel+0x204>
 8004356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800435a:	e000      	b.n	800435e <HAL_DAC_ConfigChannel+0x206>
 800435c:	2300      	movs	r3, #0
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d114      	bne.n	800439e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004374:	f002 f976 	bl	8006664 <HAL_RCC_GetHCLKFreq>
 8004378:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	4a48      	ldr	r2, [pc, #288]	; (80044a0 <HAL_DAC_ConfigChannel+0x348>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d904      	bls.n	800438c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
 800438a:	e00f      	b.n	80043ac <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	4a45      	ldr	r2, [pc, #276]	; (80044a4 <HAL_DAC_ConfigChannel+0x34c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d90a      	bls.n	80043aa <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
 800439c:	e006      	b.n	80043ac <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a4:	4313      	orrs	r3, r2
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
 80043a8:	e000      	b.n	80043ac <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80043aa:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ba:	4313      	orrs	r3, r2
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6819      	ldr	r1, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	43da      	mvns	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	400a      	ands	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43db      	mvns	r3, r3
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	4013      	ands	r3, r2
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f003 0310 	and.w	r3, r3, #16
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004416:	4313      	orrs	r3, r2
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004420:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6819      	ldr	r1, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	22c0      	movs	r2, #192	; 0xc0
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43da      	mvns	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	400a      	ands	r2, r1
 800443c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	089b      	lsrs	r3, r3, #2
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	089b      	lsrs	r3, r3, #2
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4313      	orrs	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	f640 710f 	movw	r1, #3855	; 0xf0f
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	ea02 0103 	and.w	r1, r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	409a      	lsls	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3728      	adds	r7, #40	; 0x28
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	09896800 	.word	0x09896800
 80044a4:	04c4b400 	.word	0x04c4b400

080044a8 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	795b      	ldrb	r3, [r3, #5]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_DACEx_TriangleWaveGenerate+0x18>
 80044bc:	2302      	movs	r3, #2
 80044be:	e024      	b.n	800450a <HAL_DACEx_TriangleWaveGenerate+0x62>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2202      	movs	r2, #2
 80044ca:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80044dc:	fa01 f303 	lsl.w	r3, r1, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	ea02 0103 	and.w	r1, r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	409a      	lsls	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e08d      	b.n	8004646 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	4b47      	ldr	r3, [pc, #284]	; (8004650 <HAL_DMA_Init+0x138>)
 8004532:	429a      	cmp	r2, r3
 8004534:	d80f      	bhi.n	8004556 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	4b45      	ldr	r3, [pc, #276]	; (8004654 <HAL_DMA_Init+0x13c>)
 800453e:	4413      	add	r3, r2
 8004540:	4a45      	ldr	r2, [pc, #276]	; (8004658 <HAL_DMA_Init+0x140>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	009a      	lsls	r2, r3, #2
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a42      	ldr	r2, [pc, #264]	; (800465c <HAL_DMA_Init+0x144>)
 8004552:	641a      	str	r2, [r3, #64]	; 0x40
 8004554:	e00e      	b.n	8004574 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	4b40      	ldr	r3, [pc, #256]	; (8004660 <HAL_DMA_Init+0x148>)
 800455e:	4413      	add	r3, r2
 8004560:	4a3d      	ldr	r2, [pc, #244]	; (8004658 <HAL_DMA_Init+0x140>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	091b      	lsrs	r3, r3, #4
 8004568:	009a      	lsls	r2, r3, #2
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a3c      	ldr	r2, [pc, #240]	; (8004664 <HAL_DMA_Init+0x14c>)
 8004572:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800458a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f8fe 	bl	80047c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045d4:	d102      	bne.n	80045dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045f0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d010      	beq.n	800461c <HAL_DMA_Init+0x104>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d80c      	bhi.n	800461c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f91e 	bl	8004844 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004618:	605a      	str	r2, [r3, #4]
 800461a:	e008      	b.n	800462e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40020407 	.word	0x40020407
 8004654:	bffdfff8 	.word	0xbffdfff8
 8004658:	cccccccd 	.word	0xcccccccd
 800465c:	40020000 	.word	0x40020000
 8004660:	bffdfbf8 	.word	0xbffdfbf8
 8004664:	40020400 	.word	0x40020400

08004668 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004684:	f003 031f 	and.w	r3, r3, #31
 8004688:	2204      	movs	r2, #4
 800468a:	409a      	lsls	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d026      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x7a>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	d021      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d107      	bne.n	80046bc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0204 	bic.w	r2, r2, #4
 80046ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	f003 021f 	and.w	r2, r3, #31
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	2104      	movs	r1, #4
 80046ca:	fa01 f202 	lsl.w	r2, r1, r2
 80046ce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d071      	beq.n	80047bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80046e0:	e06c      	b.n	80047bc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	2202      	movs	r2, #2
 80046ec:	409a      	lsls	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d02e      	beq.n	8004754 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d029      	beq.n	8004754 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10b      	bne.n	8004726 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 020a 	bic.w	r2, r2, #10
 800471c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	f003 021f 	and.w	r2, r3, #31
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	2102      	movs	r1, #2
 8004734:	fa01 f202 	lsl.w	r2, r1, r2
 8004738:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	2b00      	cmp	r3, #0
 8004748:	d038      	beq.n	80047bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004752:	e033      	b.n	80047bc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	2208      	movs	r2, #8
 800475e:	409a      	lsls	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d02a      	beq.n	80047be <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d025      	beq.n	80047be <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 020e 	bic.w	r2, r2, #14
 8004780:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f003 021f 	and.w	r2, r3, #31
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	2101      	movs	r1, #1
 8004790:	fa01 f202 	lsl.w	r2, r1, r2
 8004794:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047bc:	bf00      	nop
 80047be:	bf00      	nop
}
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	4b16      	ldr	r3, [pc, #88]	; (8004830 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80047d8:	429a      	cmp	r2, r3
 80047da:	d802      	bhi.n	80047e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80047dc:	4b15      	ldr	r3, [pc, #84]	; (8004834 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	e001      	b.n	80047e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80047e4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	3b08      	subs	r3, #8
 80047f2:	4a12      	ldr	r2, [pc, #72]	; (800483c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80047f4:	fba2 2303 	umull	r2, r3, r2, r3
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	089b      	lsrs	r3, r3, #2
 8004802:	009a      	lsls	r2, r3, #2
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	4413      	add	r3, r2
 8004808:	461a      	mov	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a0b      	ldr	r2, [pc, #44]	; (8004840 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004812:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 031f 	and.w	r3, r3, #31
 800481a:	2201      	movs	r2, #1
 800481c:	409a      	lsls	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004822:	bf00      	nop
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40020407 	.word	0x40020407
 8004834:	40020800 	.word	0x40020800
 8004838:	40020820 	.word	0x40020820
 800483c:	cccccccd 	.word	0xcccccccd
 8004840:	40020880 	.word	0x40020880

08004844 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	461a      	mov	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a08      	ldr	r2, [pc, #32]	; (8004888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004866:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3b01      	subs	r3, #1
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	2201      	movs	r2, #1
 8004872:	409a      	lsls	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	1000823f 	.word	0x1000823f
 8004888:	40020940 	.word	0x40020940

0800488c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800489a:	e15a      	b.n	8004b52 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	2101      	movs	r1, #1
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	4013      	ands	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 814c 	beq.w	8004b4c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 0303 	and.w	r3, r3, #3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d005      	beq.n	80048cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d130      	bne.n	800492e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	2203      	movs	r2, #3
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	43db      	mvns	r3, r3
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4013      	ands	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004902:	2201      	movs	r2, #1
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43db      	mvns	r3, r3
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	4013      	ands	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	091b      	lsrs	r3, r3, #4
 8004918:	f003 0201 	and.w	r2, r3, #1
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b03      	cmp	r3, #3
 8004938:	d017      	beq.n	800496a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	2203      	movs	r2, #3
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43db      	mvns	r3, r3
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d123      	bne.n	80049be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	08da      	lsrs	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3208      	adds	r2, #8
 800497e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004982:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	220f      	movs	r2, #15
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4013      	ands	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	08da      	lsrs	r2, r3, #3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3208      	adds	r2, #8
 80049b8:	6939      	ldr	r1, [r7, #16]
 80049ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	2203      	movs	r2, #3
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4013      	ands	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f003 0203 	and.w	r2, r3, #3
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80a6 	beq.w	8004b4c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a00:	4b5b      	ldr	r3, [pc, #364]	; (8004b70 <HAL_GPIO_Init+0x2e4>)
 8004a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a04:	4a5a      	ldr	r2, [pc, #360]	; (8004b70 <HAL_GPIO_Init+0x2e4>)
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	6613      	str	r3, [r2, #96]	; 0x60
 8004a0c:	4b58      	ldr	r3, [pc, #352]	; (8004b70 <HAL_GPIO_Init+0x2e4>)
 8004a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a18:	4a56      	ldr	r2, [pc, #344]	; (8004b74 <HAL_GPIO_Init+0x2e8>)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	089b      	lsrs	r3, r3, #2
 8004a1e:	3302      	adds	r3, #2
 8004a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	220f      	movs	r2, #15
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	43db      	mvns	r3, r3
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a42:	d01f      	beq.n	8004a84 <HAL_GPIO_Init+0x1f8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a4c      	ldr	r2, [pc, #304]	; (8004b78 <HAL_GPIO_Init+0x2ec>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d019      	beq.n	8004a80 <HAL_GPIO_Init+0x1f4>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a4b      	ldr	r2, [pc, #300]	; (8004b7c <HAL_GPIO_Init+0x2f0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d013      	beq.n	8004a7c <HAL_GPIO_Init+0x1f0>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a4a      	ldr	r2, [pc, #296]	; (8004b80 <HAL_GPIO_Init+0x2f4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00d      	beq.n	8004a78 <HAL_GPIO_Init+0x1ec>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a49      	ldr	r2, [pc, #292]	; (8004b84 <HAL_GPIO_Init+0x2f8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d007      	beq.n	8004a74 <HAL_GPIO_Init+0x1e8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a48      	ldr	r2, [pc, #288]	; (8004b88 <HAL_GPIO_Init+0x2fc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <HAL_GPIO_Init+0x1e4>
 8004a6c:	2305      	movs	r3, #5
 8004a6e:	e00a      	b.n	8004a86 <HAL_GPIO_Init+0x1fa>
 8004a70:	2306      	movs	r3, #6
 8004a72:	e008      	b.n	8004a86 <HAL_GPIO_Init+0x1fa>
 8004a74:	2304      	movs	r3, #4
 8004a76:	e006      	b.n	8004a86 <HAL_GPIO_Init+0x1fa>
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e004      	b.n	8004a86 <HAL_GPIO_Init+0x1fa>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e002      	b.n	8004a86 <HAL_GPIO_Init+0x1fa>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <HAL_GPIO_Init+0x1fa>
 8004a84:	2300      	movs	r3, #0
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	f002 0203 	and.w	r2, r2, #3
 8004a8c:	0092      	lsls	r2, r2, #2
 8004a8e:	4093      	lsls	r3, r2
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a96:	4937      	ldr	r1, [pc, #220]	; (8004b74 <HAL_GPIO_Init+0x2e8>)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	089b      	lsrs	r3, r3, #2
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004aa4:	4b39      	ldr	r3, [pc, #228]	; (8004b8c <HAL_GPIO_Init+0x300>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ac8:	4a30      	ldr	r2, [pc, #192]	; (8004b8c <HAL_GPIO_Init+0x300>)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ace:	4b2f      	ldr	r3, [pc, #188]	; (8004b8c <HAL_GPIO_Init+0x300>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4013      	ands	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004af2:	4a26      	ldr	r2, [pc, #152]	; (8004b8c <HAL_GPIO_Init+0x300>)
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004af8:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <HAL_GPIO_Init+0x300>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	43db      	mvns	r3, r3
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4013      	ands	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b1c:	4a1b      	ldr	r2, [pc, #108]	; (8004b8c <HAL_GPIO_Init+0x300>)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b22:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <HAL_GPIO_Init+0x300>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b46:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <HAL_GPIO_Init+0x300>)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f47f ae9d 	bne.w	800489c <HAL_GPIO_Init+0x10>
  }
}
 8004b62:	bf00      	nop
 8004b64:	bf00      	nop
 8004b66:	371c      	adds	r7, #28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	40021000 	.word	0x40021000
 8004b74:	40010000 	.word	0x40010000
 8004b78:	48000400 	.word	0x48000400
 8004b7c:	48000800 	.word	0x48000800
 8004b80:	48000c00 	.word	0x48000c00
 8004b84:	48001000 	.word	0x48001000
 8004b88:	48001400 	.word	0x48001400
 8004b8c:	40010400 	.word	0x40010400

08004b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	807b      	strh	r3, [r7, #2]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ba0:	787b      	ldrb	r3, [r7, #1]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bac:	e002      	b.n	8004bb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bae:	887a      	ldrh	r2, [r7, #2]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e081      	b.n	8004cd6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fc fdd4 	bl	8001794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2224      	movs	r2, #36	; 0x24
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0201 	bic.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d107      	bne.n	8004c3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	e006      	b.n	8004c48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d104      	bne.n	8004c5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69d9      	ldr	r1, [r3, #28]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1a      	ldr	r2, [r3, #32]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	461a      	mov	r2, r3
 8004cec:	460b      	mov	r3, r1
 8004cee:	817b      	strh	r3, [r7, #10]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	f040 80da 	bne.w	8004eb6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_I2C_Master_Transmit+0x30>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e0d3      	b.n	8004eb8 <HAL_I2C_Master_Transmit+0x1d8>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d18:	f7fd fdfe 	bl	8002918 <HAL_GetTick>
 8004d1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	2319      	movs	r3, #25
 8004d24:	2201      	movs	r2, #1
 8004d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 fcce 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e0be      	b.n	8004eb8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2221      	movs	r2, #33	; 0x21
 8004d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2210      	movs	r2, #16
 8004d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	893a      	ldrh	r2, [r7, #8]
 8004d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2bff      	cmp	r3, #255	; 0xff
 8004d6a:	d90e      	bls.n	8004d8a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	22ff      	movs	r2, #255	; 0xff
 8004d70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	8979      	ldrh	r1, [r7, #10]
 8004d7a:	4b51      	ldr	r3, [pc, #324]	; (8004ec0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 fe4a 	bl	8005a1c <I2C_TransferConfig>
 8004d88:	e06c      	b.n	8004e64 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	8979      	ldrh	r1, [r7, #10]
 8004d9c:	4b48      	ldr	r3, [pc, #288]	; (8004ec0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 fe39 	bl	8005a1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004daa:	e05b      	b.n	8004e64 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	6a39      	ldr	r1, [r7, #32]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fccb 	bl	800574c <I2C_WaitOnTXISFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e07b      	b.n	8004eb8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	781a      	ldrb	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d034      	beq.n	8004e64 <HAL_I2C_Master_Transmit+0x184>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d130      	bne.n	8004e64 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2180      	movs	r1, #128	; 0x80
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 fc5d 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e04d      	b.n	8004eb8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2bff      	cmp	r3, #255	; 0xff
 8004e24:	d90e      	bls.n	8004e44 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	22ff      	movs	r2, #255	; 0xff
 8004e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	8979      	ldrh	r1, [r7, #10]
 8004e34:	2300      	movs	r3, #0
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fded 	bl	8005a1c <I2C_TransferConfig>
 8004e42:	e00f      	b.n	8004e64 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	8979      	ldrh	r1, [r7, #10]
 8004e56:	2300      	movs	r3, #0
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 fddc 	bl	8005a1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d19e      	bne.n	8004dac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	6a39      	ldr	r1, [r7, #32]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 fcaa 	bl	80057cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e01a      	b.n	8004eb8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2220      	movs	r2, #32
 8004e88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6859      	ldr	r1, [r3, #4]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_I2C_Master_Transmit+0x1e4>)
 8004e96:	400b      	ands	r3, r1
 8004e98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004eb6:	2302      	movs	r3, #2
  }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	80002000 	.word	0x80002000
 8004ec4:	fe00e800 	.word	0xfe00e800

08004ec8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	4608      	mov	r0, r1
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	817b      	strh	r3, [r7, #10]
 8004eda:	460b      	mov	r3, r1
 8004edc:	813b      	strh	r3, [r7, #8]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	f040 80f9 	bne.w	80050e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <HAL_I2C_Mem_Write+0x34>
 8004ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d105      	bne.n	8004f08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0ed      	b.n	80050e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_I2C_Mem_Write+0x4e>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e0e6      	b.n	80050e4 <HAL_I2C_Mem_Write+0x21c>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f1e:	f7fd fcfb 	bl	8002918 <HAL_GetTick>
 8004f22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	2319      	movs	r3, #25
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fbcb 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0d1      	b.n	80050e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2221      	movs	r2, #33	; 0x21
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2240      	movs	r2, #64	; 0x40
 8004f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a3a      	ldr	r2, [r7, #32]
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f68:	88f8      	ldrh	r0, [r7, #6]
 8004f6a:	893a      	ldrh	r2, [r7, #8]
 8004f6c:	8979      	ldrh	r1, [r7, #10]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	4603      	mov	r3, r0
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fadb 	bl	8005534 <I2C_RequestMemoryWrite>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0a9      	b.n	80050e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2bff      	cmp	r3, #255	; 0xff
 8004f98:	d90e      	bls.n	8004fb8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	22ff      	movs	r2, #255	; 0xff
 8004f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	8979      	ldrh	r1, [r7, #10]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 fd33 	bl	8005a1c <I2C_TransferConfig>
 8004fb6:	e00f      	b.n	8004fd8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	8979      	ldrh	r1, [r7, #10]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fd22 	bl	8005a1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fbb5 	bl	800574c <I2C_WaitOnTXISFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e07b      	b.n	80050e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	781a      	ldrb	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d034      	beq.n	8005090 <HAL_I2C_Mem_Write+0x1c8>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502a:	2b00      	cmp	r3, #0
 800502c:	d130      	bne.n	8005090 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	2200      	movs	r2, #0
 8005036:	2180      	movs	r1, #128	; 0x80
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 fb47 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e04d      	b.n	80050e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	2bff      	cmp	r3, #255	; 0xff
 8005050:	d90e      	bls.n	8005070 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	22ff      	movs	r2, #255	; 0xff
 8005056:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505c:	b2da      	uxtb	r2, r3
 800505e:	8979      	ldrh	r1, [r7, #10]
 8005060:	2300      	movs	r3, #0
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fcd7 	bl	8005a1c <I2C_TransferConfig>
 800506e:	e00f      	b.n	8005090 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507e:	b2da      	uxtb	r2, r3
 8005080:	8979      	ldrh	r1, [r7, #10]
 8005082:	2300      	movs	r3, #0
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fcc6 	bl	8005a1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d19e      	bne.n	8004fd8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 fb94 	bl	80057cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e01a      	b.n	80050e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2220      	movs	r2, #32
 80050b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6859      	ldr	r1, [r3, #4]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <HAL_I2C_Mem_Write+0x224>)
 80050c2:	400b      	ands	r3, r1
 80050c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	e000      	b.n	80050e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
  }
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	fe00e800 	.word	0xfe00e800

080050f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	4608      	mov	r0, r1
 80050fa:	4611      	mov	r1, r2
 80050fc:	461a      	mov	r2, r3
 80050fe:	4603      	mov	r3, r0
 8005100:	817b      	strh	r3, [r7, #10]
 8005102:	460b      	mov	r3, r1
 8005104:	813b      	strh	r3, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b20      	cmp	r3, #32
 8005114:	f040 80fd 	bne.w	8005312 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <HAL_I2C_Mem_Read+0x34>
 800511e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005120:	2b00      	cmp	r3, #0
 8005122:	d105      	bne.n	8005130 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800512a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0f1      	b.n	8005314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_I2C_Mem_Read+0x4e>
 800513a:	2302      	movs	r3, #2
 800513c:	e0ea      	b.n	8005314 <HAL_I2C_Mem_Read+0x224>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005146:	f7fd fbe7 	bl	8002918 <HAL_GetTick>
 800514a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	2319      	movs	r3, #25
 8005152:	2201      	movs	r2, #1
 8005154:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 fab7 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0d5      	b.n	8005314 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2222      	movs	r2, #34	; 0x22
 800516c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2240      	movs	r2, #64	; 0x40
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a3a      	ldr	r2, [r7, #32]
 8005182:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005188:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005190:	88f8      	ldrh	r0, [r7, #6]
 8005192:	893a      	ldrh	r2, [r7, #8]
 8005194:	8979      	ldrh	r1, [r7, #10]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	4603      	mov	r3, r0
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 fa1b 	bl	80055dc <I2C_RequestMemoryRead>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0ad      	b.n	8005314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2bff      	cmp	r3, #255	; 0xff
 80051c0:	d90e      	bls.n	80051e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	22ff      	movs	r2, #255	; 0xff
 80051c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	8979      	ldrh	r1, [r7, #10]
 80051d0:	4b52      	ldr	r3, [pc, #328]	; (800531c <HAL_I2C_Mem_Read+0x22c>)
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 fc1f 	bl	8005a1c <I2C_TransferConfig>
 80051de:	e00f      	b.n	8005200 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	8979      	ldrh	r1, [r7, #10]
 80051f2:	4b4a      	ldr	r3, [pc, #296]	; (800531c <HAL_I2C_Mem_Read+0x22c>)
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 fc0e 	bl	8005a1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	2200      	movs	r2, #0
 8005208:	2104      	movs	r1, #4
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fa5e 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e07c      	b.n	8005314 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d034      	beq.n	80052c0 <HAL_I2C_Mem_Read+0x1d0>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525a:	2b00      	cmp	r3, #0
 800525c:	d130      	bne.n	80052c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	2200      	movs	r2, #0
 8005266:	2180      	movs	r1, #128	; 0x80
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fa2f 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e04d      	b.n	8005314 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	2bff      	cmp	r3, #255	; 0xff
 8005280:	d90e      	bls.n	80052a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	22ff      	movs	r2, #255	; 0xff
 8005286:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528c:	b2da      	uxtb	r2, r3
 800528e:	8979      	ldrh	r1, [r7, #10]
 8005290:	2300      	movs	r3, #0
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 fbbf 	bl	8005a1c <I2C_TransferConfig>
 800529e:	e00f      	b.n	80052c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	8979      	ldrh	r1, [r7, #10]
 80052b2:	2300      	movs	r3, #0
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 fbae 	bl	8005a1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d19a      	bne.n	8005200 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 fa7c 	bl	80057cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e01a      	b.n	8005314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2220      	movs	r2, #32
 80052e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6859      	ldr	r1, [r3, #4]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_I2C_Mem_Read+0x230>)
 80052f2:	400b      	ands	r3, r1
 80052f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	e000      	b.n	8005314 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005312:	2302      	movs	r3, #2
  }
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	80002400 	.word	0x80002400
 8005320:	fe00e800 	.word	0xfe00e800

08005324 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	; 0x28
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	460b      	mov	r3, r1
 8005332:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b20      	cmp	r3, #32
 8005342:	f040 80f1 	bne.w	8005528 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005354:	d101      	bne.n	800535a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005356:	2302      	movs	r3, #2
 8005358:	e0e7      	b.n	800552a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_I2C_IsDeviceReady+0x44>
 8005364:	2302      	movs	r3, #2
 8005366:	e0e0      	b.n	800552a <HAL_I2C_IsDeviceReady+0x206>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2224      	movs	r2, #36	; 0x24
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d107      	bne.n	8005396 <HAL_I2C_IsDeviceReady+0x72>
 8005386:	897b      	ldrh	r3, [r7, #10]
 8005388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800538c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005390:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005394:	e004      	b.n	80053a0 <HAL_I2C_IsDeviceReady+0x7c>
 8005396:	897b      	ldrh	r3, [r7, #10]
 8005398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800539c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	6812      	ldr	r2, [r2, #0]
 80053a4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80053a6:	f7fd fab7 	bl	8002918 <HAL_GetTick>
 80053aa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	bf0c      	ite	eq
 80053ba:	2301      	moveq	r3, #1
 80053bc:	2300      	movne	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	bf0c      	ite	eq
 80053d0:	2301      	moveq	r3, #1
 80053d2:	2300      	movne	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80053d8:	e034      	b.n	8005444 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d01a      	beq.n	8005418 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053e2:	f7fd fa99 	bl	8002918 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d302      	bcc.n	80053f8 <HAL_I2C_IsDeviceReady+0xd4>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10f      	bne.n	8005418 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005404:	f043 0220 	orr.w	r2, r3, #32
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e088      	b.n	800552a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b20      	cmp	r3, #32
 8005424:	bf0c      	ite	eq
 8005426:	2301      	moveq	r3, #1
 8005428:	2300      	movne	r3, #0
 800542a:	b2db      	uxtb	r3, r3
 800542c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b10      	cmp	r3, #16
 800543a:	bf0c      	ite	eq
 800543c:	2301      	moveq	r3, #1
 800543e:	2300      	movne	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005444:	7ffb      	ldrb	r3, [r7, #31]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <HAL_I2C_IsDeviceReady+0x12c>
 800544a:	7fbb      	ldrb	r3, [r7, #30]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0c4      	beq.n	80053da <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	2b10      	cmp	r3, #16
 800545c:	d01a      	beq.n	8005494 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2200      	movs	r2, #0
 8005466:	2120      	movs	r1, #32
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f92f 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e058      	b.n	800552a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2220      	movs	r2, #32
 800547e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	e04a      	b.n	800552a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2200      	movs	r2, #0
 800549c:	2120      	movs	r1, #32
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 f914 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e03d      	b.n	800552a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2210      	movs	r2, #16
 80054b4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2220      	movs	r2, #32
 80054bc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d118      	bne.n	80054f8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054d4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2200      	movs	r2, #0
 80054de:	2120      	movs	r1, #32
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f8f3 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e01c      	b.n	800552a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2220      	movs	r2, #32
 80054f6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	3301      	adds	r3, #1
 80054fc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	f63f af3b 	bhi.w	800537e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005514:	f043 0220 	orr.w	r2, r3, #32
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005528:	2302      	movs	r3, #2
  }
}
 800552a:	4618      	mov	r0, r3
 800552c:	3720      	adds	r7, #32
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	4608      	mov	r0, r1
 800553e:	4611      	mov	r1, r2
 8005540:	461a      	mov	r2, r3
 8005542:	4603      	mov	r3, r0
 8005544:	817b      	strh	r3, [r7, #10]
 8005546:	460b      	mov	r3, r1
 8005548:	813b      	strh	r3, [r7, #8]
 800554a:	4613      	mov	r3, r2
 800554c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	b2da      	uxtb	r2, r3
 8005552:	8979      	ldrh	r1, [r7, #10]
 8005554:	4b20      	ldr	r3, [pc, #128]	; (80055d8 <I2C_RequestMemoryWrite+0xa4>)
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 fa5d 	bl	8005a1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	69b9      	ldr	r1, [r7, #24]
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 f8f0 	bl	800574c <I2C_WaitOnTXISFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e02c      	b.n	80055d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005576:	88fb      	ldrh	r3, [r7, #6]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d105      	bne.n	8005588 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800557c:	893b      	ldrh	r3, [r7, #8]
 800557e:	b2da      	uxtb	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	629a      	str	r2, [r3, #40]	; 0x28
 8005586:	e015      	b.n	80055b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005588:	893b      	ldrh	r3, [r7, #8]
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	b29b      	uxth	r3, r3
 800558e:	b2da      	uxtb	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	69b9      	ldr	r1, [r7, #24]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 f8d6 	bl	800574c <I2C_WaitOnTXISFlagUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e012      	b.n	80055d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055aa:	893b      	ldrh	r3, [r7, #8]
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2200      	movs	r2, #0
 80055bc:	2180      	movs	r1, #128	; 0x80
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f884 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	80002000 	.word	0x80002000

080055dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	4608      	mov	r0, r1
 80055e6:	4611      	mov	r1, r2
 80055e8:	461a      	mov	r2, r3
 80055ea:	4603      	mov	r3, r0
 80055ec:	817b      	strh	r3, [r7, #10]
 80055ee:	460b      	mov	r3, r1
 80055f0:	813b      	strh	r3, [r7, #8]
 80055f2:	4613      	mov	r3, r2
 80055f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80055f6:	88fb      	ldrh	r3, [r7, #6]
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	8979      	ldrh	r1, [r7, #10]
 80055fc:	4b20      	ldr	r3, [pc, #128]	; (8005680 <I2C_RequestMemoryRead+0xa4>)
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2300      	movs	r3, #0
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 fa0a 	bl	8005a1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005608:	69fa      	ldr	r2, [r7, #28]
 800560a:	69b9      	ldr	r1, [r7, #24]
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f89d 	bl	800574c <I2C_WaitOnTXISFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e02c      	b.n	8005676 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800561c:	88fb      	ldrh	r3, [r7, #6]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d105      	bne.n	800562e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005622:	893b      	ldrh	r3, [r7, #8]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	629a      	str	r2, [r3, #40]	; 0x28
 800562c:	e015      	b.n	800565a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800562e:	893b      	ldrh	r3, [r7, #8]
 8005630:	0a1b      	lsrs	r3, r3, #8
 8005632:	b29b      	uxth	r3, r3
 8005634:	b2da      	uxtb	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	69b9      	ldr	r1, [r7, #24]
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f883 	bl	800574c <I2C_WaitOnTXISFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e012      	b.n	8005676 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005650:	893b      	ldrh	r3, [r7, #8]
 8005652:	b2da      	uxtb	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2200      	movs	r2, #0
 8005662:	2140      	movs	r1, #64	; 0x40
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f831 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	80002000 	.word	0x80002000

08005684 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b02      	cmp	r3, #2
 8005698:	d103      	bne.n	80056a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2200      	movs	r2, #0
 80056a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d007      	beq.n	80056c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	619a      	str	r2, [r3, #24]
  }
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	4613      	mov	r3, r2
 80056da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056dc:	e022      	b.n	8005724 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d01e      	beq.n	8005724 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e6:	f7fd f917 	bl	8002918 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d302      	bcc.n	80056fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d113      	bne.n	8005724 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005700:	f043 0220 	orr.w	r2, r3, #32
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e00f      	b.n	8005744 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4013      	ands	r3, r2
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	429a      	cmp	r2, r3
 8005732:	bf0c      	ite	eq
 8005734:	2301      	moveq	r3, #1
 8005736:	2300      	movne	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	429a      	cmp	r2, r3
 8005740:	d0cd      	beq.n	80056de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005758:	e02c      	b.n	80057b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f870 	bl	8005844 <I2C_IsErrorOccurred>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e02a      	b.n	80057c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d01e      	beq.n	80057b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005776:	f7fd f8cf 	bl	8002918 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	429a      	cmp	r2, r3
 8005784:	d302      	bcc.n	800578c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d113      	bne.n	80057b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005790:	f043 0220 	orr.w	r2, r3, #32
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e007      	b.n	80057c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d1cb      	bne.n	800575a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057d8:	e028      	b.n	800582c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 f830 	bl	8005844 <I2C_IsErrorOccurred>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e026      	b.n	800583c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ee:	f7fd f893 	bl	8002918 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d302      	bcc.n	8005804 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d113      	bne.n	800582c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005808:	f043 0220 	orr.w	r2, r3, #32
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e007      	b.n	800583c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b20      	cmp	r3, #32
 8005838:	d1cf      	bne.n	80057da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08a      	sub	sp, #40	; 0x28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	2b00      	cmp	r3, #0
 800586e:	d075      	beq.n	800595c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2210      	movs	r2, #16
 8005876:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005878:	e056      	b.n	8005928 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005880:	d052      	beq.n	8005928 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005882:	f7fd f849 	bl	8002918 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	429a      	cmp	r2, r3
 8005890:	d302      	bcc.n	8005898 <I2C_IsErrorOccurred+0x54>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d147      	bne.n	8005928 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ba:	d12e      	bne.n	800591a <I2C_IsErrorOccurred+0xd6>
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058c2:	d02a      	beq.n	800591a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80058c4:	7cfb      	ldrb	r3, [r7, #19]
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	d027      	beq.n	800591a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058d8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80058da:	f7fd f81d 	bl	8002918 <HAL_GetTick>
 80058de:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058e0:	e01b      	b.n	800591a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80058e2:	f7fd f819 	bl	8002918 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b19      	cmp	r3, #25
 80058ee:	d914      	bls.n	800591a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f4:	f043 0220 	orr.w	r2, r3, #32
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b20      	cmp	r3, #32
 8005926:	d1dc      	bne.n	80058e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b20      	cmp	r3, #32
 8005934:	d003      	beq.n	800593e <I2C_IsErrorOccurred+0xfa>
 8005936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800593a:	2b00      	cmp	r3, #0
 800593c:	d09d      	beq.n	800587a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800593e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005942:	2b00      	cmp	r3, #0
 8005944:	d103      	bne.n	800594e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2220      	movs	r2, #32
 800594c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	f043 0304 	orr.w	r3, r3, #4
 8005954:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00b      	beq.n	8005986 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800597e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00b      	beq.n	80059a8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	f043 0308 	orr.w	r3, r3, #8
 8005996:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00b      	beq.n	80059ca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	f043 0302 	orr.w	r3, r3, #2
 80059b8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80059ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d01c      	beq.n	8005a0c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f7ff fe56 	bl	8005684 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6859      	ldr	r1, [r3, #4]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <I2C_IsErrorOccurred+0x1d4>)
 80059e4:	400b      	ands	r3, r1
 80059e6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3728      	adds	r7, #40	; 0x28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	fe00e800 	.word	0xfe00e800

08005a1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	607b      	str	r3, [r7, #4]
 8005a26:	460b      	mov	r3, r1
 8005a28:	817b      	strh	r3, [r7, #10]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a2e:	897b      	ldrh	r3, [r7, #10]
 8005a30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a34:	7a7b      	ldrb	r3, [r7, #9]
 8005a36:	041b      	lsls	r3, r3, #16
 8005a38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a3c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a4a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	0d5b      	lsrs	r3, r3, #21
 8005a56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005a5a:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <I2C_TransferConfig+0x60>)
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	43db      	mvns	r3, r3
 8005a60:	ea02 0103 	and.w	r1, r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a6e:	bf00      	nop
 8005a70:	371c      	adds	r7, #28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	03ff63ff 	.word	0x03ff63ff

08005a80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b20      	cmp	r3, #32
 8005a94:	d138      	bne.n	8005b08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e032      	b.n	8005b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2224      	movs	r2, #36	; 0x24
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0201 	bic.w	r2, r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ad2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6819      	ldr	r1, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0201 	orr.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	e000      	b.n	8005b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b08:	2302      	movs	r3, #2
  }
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b085      	sub	sp, #20
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	d139      	bne.n	8005ba0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d101      	bne.n	8005b3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b36:	2302      	movs	r3, #2
 8005b38:	e033      	b.n	8005ba2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2224      	movs	r2, #36	; 0x24
 8005b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0201 	bic.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	021b      	lsls	r3, r3, #8
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e000      	b.n	8005ba2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ba0:	2302      	movs	r3, #2
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
	...

08005bb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d141      	bne.n	8005c42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bbe:	4b4b      	ldr	r3, [pc, #300]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bca:	d131      	bne.n	8005c30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bcc:	4b47      	ldr	r3, [pc, #284]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bd2:	4a46      	ldr	r2, [pc, #280]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bdc:	4b43      	ldr	r3, [pc, #268]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005be4:	4a41      	ldr	r2, [pc, #260]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bec:	4b40      	ldr	r3, [pc, #256]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2232      	movs	r2, #50	; 0x32
 8005bf2:	fb02 f303 	mul.w	r3, r2, r3
 8005bf6:	4a3f      	ldr	r2, [pc, #252]	; (8005cf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	0c9b      	lsrs	r3, r3, #18
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c02:	e002      	b.n	8005c0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c0a:	4b38      	ldr	r3, [pc, #224]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c16:	d102      	bne.n	8005c1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f2      	bne.n	8005c04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c1e:	4b33      	ldr	r3, [pc, #204]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c2a:	d158      	bne.n	8005cde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e057      	b.n	8005ce0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c30:	4b2e      	ldr	r3, [pc, #184]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c36:	4a2d      	ldr	r2, [pc, #180]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005c40:	e04d      	b.n	8005cde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c48:	d141      	bne.n	8005cce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c4a:	4b28      	ldr	r3, [pc, #160]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c56:	d131      	bne.n	8005cbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c58:	4b24      	ldr	r3, [pc, #144]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c5e:	4a23      	ldr	r2, [pc, #140]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c68:	4b20      	ldr	r3, [pc, #128]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c70:	4a1e      	ldr	r2, [pc, #120]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c78:	4b1d      	ldr	r3, [pc, #116]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2232      	movs	r2, #50	; 0x32
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	4a1c      	ldr	r2, [pc, #112]	; (8005cf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	0c9b      	lsrs	r3, r3, #18
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c8e:	e002      	b.n	8005c96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c96:	4b15      	ldr	r3, [pc, #84]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca2:	d102      	bne.n	8005caa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f2      	bne.n	8005c90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005caa:	4b10      	ldr	r3, [pc, #64]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb6:	d112      	bne.n	8005cde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e011      	b.n	8005ce0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cc2:	4a0a      	ldr	r2, [pc, #40]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ccc:	e007      	b.n	8005cde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005cce:	4b07      	ldr	r3, [pc, #28]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005cd6:	4a05      	ldr	r2, [pc, #20]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cdc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	40007000 	.word	0x40007000
 8005cf0:	20000010 	.word	0x20000010
 8005cf4:	431bde83 	.word	0x431bde83

08005cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e306      	b.n	8006318 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d075      	beq.n	8005e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d16:	4b97      	ldr	r3, [pc, #604]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 030c 	and.w	r3, r3, #12
 8005d1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d20:	4b94      	ldr	r3, [pc, #592]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	2b0c      	cmp	r3, #12
 8005d2e:	d102      	bne.n	8005d36 <HAL_RCC_OscConfig+0x3e>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d002      	beq.n	8005d3c <HAL_RCC_OscConfig+0x44>
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d10b      	bne.n	8005d54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d3c:	4b8d      	ldr	r3, [pc, #564]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d05b      	beq.n	8005e00 <HAL_RCC_OscConfig+0x108>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d157      	bne.n	8005e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e2e1      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d5c:	d106      	bne.n	8005d6c <HAL_RCC_OscConfig+0x74>
 8005d5e:	4b85      	ldr	r3, [pc, #532]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a84      	ldr	r2, [pc, #528]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	e01d      	b.n	8005da8 <HAL_RCC_OscConfig+0xb0>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d74:	d10c      	bne.n	8005d90 <HAL_RCC_OscConfig+0x98>
 8005d76:	4b7f      	ldr	r3, [pc, #508]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a7e      	ldr	r2, [pc, #504]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	4b7c      	ldr	r3, [pc, #496]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a7b      	ldr	r2, [pc, #492]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	e00b      	b.n	8005da8 <HAL_RCC_OscConfig+0xb0>
 8005d90:	4b78      	ldr	r3, [pc, #480]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a77      	ldr	r2, [pc, #476]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	4b75      	ldr	r3, [pc, #468]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a74      	ldr	r2, [pc, #464]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d013      	beq.n	8005dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db0:	f7fc fdb2 	bl	8002918 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005db8:	f7fc fdae 	bl	8002918 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b64      	cmp	r3, #100	; 0x64
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e2a6      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dca:	4b6a      	ldr	r3, [pc, #424]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f0      	beq.n	8005db8 <HAL_RCC_OscConfig+0xc0>
 8005dd6:	e014      	b.n	8005e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fc fd9e 	bl	8002918 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de0:	f7fc fd9a 	bl	8002918 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b64      	cmp	r3, #100	; 0x64
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e292      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005df2:	4b60      	ldr	r3, [pc, #384]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0xe8>
 8005dfe:	e000      	b.n	8005e02 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d075      	beq.n	8005efa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e0e:	4b59      	ldr	r3, [pc, #356]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 030c 	and.w	r3, r3, #12
 8005e16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e18:	4b56      	ldr	r3, [pc, #344]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0303 	and.w	r3, r3, #3
 8005e20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b0c      	cmp	r3, #12
 8005e26:	d102      	bne.n	8005e2e <HAL_RCC_OscConfig+0x136>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d002      	beq.n	8005e34 <HAL_RCC_OscConfig+0x13c>
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d11f      	bne.n	8005e74 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e34:	4b4f      	ldr	r3, [pc, #316]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <HAL_RCC_OscConfig+0x154>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e265      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e4c:	4b49      	ldr	r3, [pc, #292]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	061b      	lsls	r3, r3, #24
 8005e5a:	4946      	ldr	r1, [pc, #280]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e60:	4b45      	ldr	r3, [pc, #276]	; (8005f78 <HAL_RCC_OscConfig+0x280>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fc fd0b 	bl	8002880 <HAL_InitTick>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d043      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e251      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d023      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e7c:	4b3d      	ldr	r3, [pc, #244]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a3c      	ldr	r2, [pc, #240]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fc fd46 	bl	8002918 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e90:	f7fc fd42 	bl	8002918 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e23a      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ea2:	4b34      	ldr	r3, [pc, #208]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eae:	4b31      	ldr	r3, [pc, #196]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	061b      	lsls	r3, r3, #24
 8005ebc:	492d      	ldr	r1, [pc, #180]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	604b      	str	r3, [r1, #4]
 8005ec2:	e01a      	b.n	8005efa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ec4:	4b2b      	ldr	r3, [pc, #172]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a2a      	ldr	r2, [pc, #168]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed0:	f7fc fd22 	bl	8002918 <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ed8:	f7fc fd1e 	bl	8002918 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e216      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005eea:	4b22      	ldr	r3, [pc, #136]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f0      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x1e0>
 8005ef6:	e000      	b.n	8005efa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ef8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d041      	beq.n	8005f8a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01c      	beq.n	8005f48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f0e:	4b19      	ldr	r3, [pc, #100]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f14:	4a17      	ldr	r2, [pc, #92]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005f16:	f043 0301 	orr.w	r3, r3, #1
 8005f1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1e:	f7fc fcfb 	bl	8002918 <HAL_GetTick>
 8005f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f24:	e008      	b.n	8005f38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f26:	f7fc fcf7 	bl	8002918 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e1ef      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f38:	4b0e      	ldr	r3, [pc, #56]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0ef      	beq.n	8005f26 <HAL_RCC_OscConfig+0x22e>
 8005f46:	e020      	b.n	8005f8a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f48:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f4e:	4a09      	ldr	r2, [pc, #36]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005f50:	f023 0301 	bic.w	r3, r3, #1
 8005f54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f58:	f7fc fcde 	bl	8002918 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f5e:	e00d      	b.n	8005f7c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f60:	f7fc fcda 	bl	8002918 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d906      	bls.n	8005f7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e1d2      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
 8005f72:	bf00      	nop
 8005f74:	40021000 	.word	0x40021000
 8005f78:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f7c:	4b8c      	ldr	r3, [pc, #560]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8005f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1ea      	bne.n	8005f60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 80a6 	beq.w	80060e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f9c:	4b84      	ldr	r3, [pc, #528]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8005f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_RCC_OscConfig+0x2b4>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e000      	b.n	8005fae <HAL_RCC_OscConfig+0x2b6>
 8005fac:	2300      	movs	r3, #0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00d      	beq.n	8005fce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fb2:	4b7f      	ldr	r3, [pc, #508]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8005fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb6:	4a7e      	ldr	r2, [pc, #504]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8005fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8005fbe:	4b7c      	ldr	r3, [pc, #496]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8005fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fce:	4b79      	ldr	r3, [pc, #484]	; (80061b4 <HAL_RCC_OscConfig+0x4bc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d118      	bne.n	800600c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fda:	4b76      	ldr	r3, [pc, #472]	; (80061b4 <HAL_RCC_OscConfig+0x4bc>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a75      	ldr	r2, [pc, #468]	; (80061b4 <HAL_RCC_OscConfig+0x4bc>)
 8005fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fe6:	f7fc fc97 	bl	8002918 <HAL_GetTick>
 8005fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fec:	e008      	b.n	8006000 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fee:	f7fc fc93 	bl	8002918 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e18b      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006000:	4b6c      	ldr	r3, [pc, #432]	; (80061b4 <HAL_RCC_OscConfig+0x4bc>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006008:	2b00      	cmp	r3, #0
 800600a:	d0f0      	beq.n	8005fee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d108      	bne.n	8006026 <HAL_RCC_OscConfig+0x32e>
 8006014:	4b66      	ldr	r3, [pc, #408]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601a:	4a65      	ldr	r2, [pc, #404]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 800601c:	f043 0301 	orr.w	r3, r3, #1
 8006020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006024:	e024      	b.n	8006070 <HAL_RCC_OscConfig+0x378>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b05      	cmp	r3, #5
 800602c:	d110      	bne.n	8006050 <HAL_RCC_OscConfig+0x358>
 800602e:	4b60      	ldr	r3, [pc, #384]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8006030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006034:	4a5e      	ldr	r2, [pc, #376]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8006036:	f043 0304 	orr.w	r3, r3, #4
 800603a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800603e:	4b5c      	ldr	r3, [pc, #368]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006044:	4a5a      	ldr	r2, [pc, #360]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8006046:	f043 0301 	orr.w	r3, r3, #1
 800604a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800604e:	e00f      	b.n	8006070 <HAL_RCC_OscConfig+0x378>
 8006050:	4b57      	ldr	r3, [pc, #348]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8006052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006056:	4a56      	ldr	r2, [pc, #344]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006060:	4b53      	ldr	r3, [pc, #332]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006066:	4a52      	ldr	r2, [pc, #328]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8006068:	f023 0304 	bic.w	r3, r3, #4
 800606c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d016      	beq.n	80060a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006078:	f7fc fc4e 	bl	8002918 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800607e:	e00a      	b.n	8006096 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006080:	f7fc fc4a 	bl	8002918 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	f241 3288 	movw	r2, #5000	; 0x1388
 800608e:	4293      	cmp	r3, r2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e140      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006096:	4b46      	ldr	r3, [pc, #280]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8006098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0ed      	beq.n	8006080 <HAL_RCC_OscConfig+0x388>
 80060a4:	e015      	b.n	80060d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a6:	f7fc fc37 	bl	8002918 <HAL_GetTick>
 80060aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060ac:	e00a      	b.n	80060c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ae:	f7fc fc33 	bl	8002918 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060bc:	4293      	cmp	r3, r2
 80060be:	d901      	bls.n	80060c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e129      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060c4:	4b3a      	ldr	r3, [pc, #232]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 80060c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1ed      	bne.n	80060ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060d2:	7ffb      	ldrb	r3, [r7, #31]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d105      	bne.n	80060e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060d8:	4b35      	ldr	r3, [pc, #212]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 80060da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060dc:	4a34      	ldr	r2, [pc, #208]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 80060de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d03c      	beq.n	800616a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d01c      	beq.n	8006132 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060f8:	4b2d      	ldr	r3, [pc, #180]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 80060fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060fe:	4a2c      	ldr	r2, [pc, #176]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8006100:	f043 0301 	orr.w	r3, r3, #1
 8006104:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006108:	f7fc fc06 	bl	8002918 <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006110:	f7fc fc02 	bl	8002918 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e0fa      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006122:	4b23      	ldr	r3, [pc, #140]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8006124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0ef      	beq.n	8006110 <HAL_RCC_OscConfig+0x418>
 8006130:	e01b      	b.n	800616a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006132:	4b1f      	ldr	r3, [pc, #124]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8006134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006138:	4a1d      	ldr	r2, [pc, #116]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006142:	f7fc fbe9 	bl	8002918 <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006148:	e008      	b.n	800615c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800614a:	f7fc fbe5 	bl	8002918 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e0dd      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800615c:	4b14      	ldr	r3, [pc, #80]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 800615e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1ef      	bne.n	800614a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 80d1 	beq.w	8006316 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006174:	4b0e      	ldr	r3, [pc, #56]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 030c 	and.w	r3, r3, #12
 800617c:	2b0c      	cmp	r3, #12
 800617e:	f000 808b 	beq.w	8006298 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	2b02      	cmp	r3, #2
 8006188:	d15e      	bne.n	8006248 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800618a:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a08      	ldr	r2, [pc, #32]	; (80061b0 <HAL_RCC_OscConfig+0x4b8>)
 8006190:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006196:	f7fc fbbf 	bl	8002918 <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800619c:	e00c      	b.n	80061b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800619e:	f7fc fbbb 	bl	8002918 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d905      	bls.n	80061b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e0b3      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
 80061b0:	40021000 	.word	0x40021000
 80061b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061b8:	4b59      	ldr	r3, [pc, #356]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1ec      	bne.n	800619e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061c4:	4b56      	ldr	r3, [pc, #344]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	4b56      	ldr	r3, [pc, #344]	; (8006324 <HAL_RCC_OscConfig+0x62c>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6a11      	ldr	r1, [r2, #32]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061d4:	3a01      	subs	r2, #1
 80061d6:	0112      	lsls	r2, r2, #4
 80061d8:	4311      	orrs	r1, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80061de:	0212      	lsls	r2, r2, #8
 80061e0:	4311      	orrs	r1, r2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061e6:	0852      	lsrs	r2, r2, #1
 80061e8:	3a01      	subs	r2, #1
 80061ea:	0552      	lsls	r2, r2, #21
 80061ec:	4311      	orrs	r1, r2
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061f2:	0852      	lsrs	r2, r2, #1
 80061f4:	3a01      	subs	r2, #1
 80061f6:	0652      	lsls	r2, r2, #25
 80061f8:	4311      	orrs	r1, r2
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80061fe:	06d2      	lsls	r2, r2, #27
 8006200:	430a      	orrs	r2, r1
 8006202:	4947      	ldr	r1, [pc, #284]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 8006204:	4313      	orrs	r3, r2
 8006206:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006208:	4b45      	ldr	r3, [pc, #276]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a44      	ldr	r2, [pc, #272]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 800620e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006212:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006214:	4b42      	ldr	r3, [pc, #264]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	4a41      	ldr	r2, [pc, #260]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 800621a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800621e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006220:	f7fc fb7a 	bl	8002918 <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006228:	f7fc fb76 	bl	8002918 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e06e      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800623a:	4b39      	ldr	r3, [pc, #228]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0f0      	beq.n	8006228 <HAL_RCC_OscConfig+0x530>
 8006246:	e066      	b.n	8006316 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006248:	4b35      	ldr	r3, [pc, #212]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a34      	ldr	r2, [pc, #208]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 800624e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006252:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006254:	4b32      	ldr	r3, [pc, #200]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	4a31      	ldr	r2, [pc, #196]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 800625a:	f023 0303 	bic.w	r3, r3, #3
 800625e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006260:	4b2f      	ldr	r3, [pc, #188]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	4a2e      	ldr	r2, [pc, #184]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 8006266:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800626a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800626e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006270:	f7fc fb52 	bl	8002918 <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006278:	f7fc fb4e 	bl	8002918 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e046      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800628a:	4b25      	ldr	r3, [pc, #148]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0x580>
 8006296:	e03e      	b.n	8006316 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e039      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80062a4:	4b1e      	ldr	r3, [pc, #120]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f003 0203 	and.w	r2, r3, #3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d12c      	bne.n	8006312 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	3b01      	subs	r3, #1
 80062c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d123      	bne.n	8006312 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d11b      	bne.n	8006312 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d113      	bne.n	8006312 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	085b      	lsrs	r3, r3, #1
 80062f6:	3b01      	subs	r3, #1
 80062f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d109      	bne.n	8006312 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006308:	085b      	lsrs	r3, r3, #1
 800630a:	3b01      	subs	r3, #1
 800630c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800630e:	429a      	cmp	r2, r3
 8006310:	d001      	beq.n	8006316 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e000      	b.n	8006318 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3720      	adds	r7, #32
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40021000 	.word	0x40021000
 8006324:	019f800c 	.word	0x019f800c

08006328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e11e      	b.n	800657e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006340:	4b91      	ldr	r3, [pc, #580]	; (8006588 <HAL_RCC_ClockConfig+0x260>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 030f 	and.w	r3, r3, #15
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d910      	bls.n	8006370 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800634e:	4b8e      	ldr	r3, [pc, #568]	; (8006588 <HAL_RCC_ClockConfig+0x260>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f023 020f 	bic.w	r2, r3, #15
 8006356:	498c      	ldr	r1, [pc, #560]	; (8006588 <HAL_RCC_ClockConfig+0x260>)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	4313      	orrs	r3, r2
 800635c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800635e:	4b8a      	ldr	r3, [pc, #552]	; (8006588 <HAL_RCC_ClockConfig+0x260>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	429a      	cmp	r2, r3
 800636a:	d001      	beq.n	8006370 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e106      	b.n	800657e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d073      	beq.n	8006464 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b03      	cmp	r3, #3
 8006382:	d129      	bne.n	80063d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006384:	4b81      	ldr	r3, [pc, #516]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e0f4      	b.n	800657e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006394:	f000 f99e 	bl	80066d4 <RCC_GetSysClockFreqFromPLLSource>
 8006398:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	4a7c      	ldr	r2, [pc, #496]	; (8006590 <HAL_RCC_ClockConfig+0x268>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d93f      	bls.n	8006422 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80063a2:	4b7a      	ldr	r3, [pc, #488]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d009      	beq.n	80063c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d033      	beq.n	8006422 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d12f      	bne.n	8006422 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063c2:	4b72      	ldr	r3, [pc, #456]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063ca:	4a70      	ldr	r2, [pc, #448]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 80063cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80063d2:	2380      	movs	r3, #128	; 0x80
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	e024      	b.n	8006422 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d107      	bne.n	80063f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063e0:	4b6a      	ldr	r3, [pc, #424]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d109      	bne.n	8006400 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e0c6      	b.n	800657e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063f0:	4b66      	ldr	r3, [pc, #408]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0be      	b.n	800657e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006400:	f000 f8ce 	bl	80065a0 <HAL_RCC_GetSysClockFreq>
 8006404:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	4a61      	ldr	r2, [pc, #388]	; (8006590 <HAL_RCC_ClockConfig+0x268>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d909      	bls.n	8006422 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800640e:	4b5f      	ldr	r3, [pc, #380]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006416:	4a5d      	ldr	r2, [pc, #372]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 8006418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800641e:	2380      	movs	r3, #128	; 0x80
 8006420:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006422:	4b5a      	ldr	r3, [pc, #360]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f023 0203 	bic.w	r2, r3, #3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	4957      	ldr	r1, [pc, #348]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 8006430:	4313      	orrs	r3, r2
 8006432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006434:	f7fc fa70 	bl	8002918 <HAL_GetTick>
 8006438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800643a:	e00a      	b.n	8006452 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800643c:	f7fc fa6c 	bl	8002918 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	f241 3288 	movw	r2, #5000	; 0x1388
 800644a:	4293      	cmp	r3, r2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e095      	b.n	800657e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006452:	4b4e      	ldr	r3, [pc, #312]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 020c 	and.w	r2, r3, #12
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	429a      	cmp	r2, r3
 8006462:	d1eb      	bne.n	800643c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d023      	beq.n	80064b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800647c:	4b43      	ldr	r3, [pc, #268]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	4a42      	ldr	r2, [pc, #264]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 8006482:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006486:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0308 	and.w	r3, r3, #8
 8006490:	2b00      	cmp	r3, #0
 8006492:	d007      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006494:	4b3d      	ldr	r3, [pc, #244]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800649c:	4a3b      	ldr	r2, [pc, #236]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 800649e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80064a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064a4:	4b39      	ldr	r3, [pc, #228]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	4936      	ldr	r1, [pc, #216]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	608b      	str	r3, [r1, #8]
 80064b6:	e008      	b.n	80064ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2b80      	cmp	r3, #128	; 0x80
 80064bc:	d105      	bne.n	80064ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80064be:	4b33      	ldr	r3, [pc, #204]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	4a32      	ldr	r2, [pc, #200]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 80064c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064ca:	4b2f      	ldr	r3, [pc, #188]	; (8006588 <HAL_RCC_ClockConfig+0x260>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 030f 	and.w	r3, r3, #15
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d21d      	bcs.n	8006514 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064d8:	4b2b      	ldr	r3, [pc, #172]	; (8006588 <HAL_RCC_ClockConfig+0x260>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f023 020f 	bic.w	r2, r3, #15
 80064e0:	4929      	ldr	r1, [pc, #164]	; (8006588 <HAL_RCC_ClockConfig+0x260>)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064e8:	f7fc fa16 	bl	8002918 <HAL_GetTick>
 80064ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ee:	e00a      	b.n	8006506 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064f0:	f7fc fa12 	bl	8002918 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80064fe:	4293      	cmp	r3, r2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e03b      	b.n	800657e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006506:	4b20      	ldr	r3, [pc, #128]	; (8006588 <HAL_RCC_ClockConfig+0x260>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	429a      	cmp	r2, r3
 8006512:	d1ed      	bne.n	80064f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006520:	4b1a      	ldr	r3, [pc, #104]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	4917      	ldr	r1, [pc, #92]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 800652e:	4313      	orrs	r3, r2
 8006530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800653e:	4b13      	ldr	r3, [pc, #76]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	490f      	ldr	r1, [pc, #60]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 800654e:	4313      	orrs	r3, r2
 8006550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006552:	f000 f825 	bl	80065a0 <HAL_RCC_GetSysClockFreq>
 8006556:	4602      	mov	r2, r0
 8006558:	4b0c      	ldr	r3, [pc, #48]	; (800658c <HAL_RCC_ClockConfig+0x264>)
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	091b      	lsrs	r3, r3, #4
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	490c      	ldr	r1, [pc, #48]	; (8006594 <HAL_RCC_ClockConfig+0x26c>)
 8006564:	5ccb      	ldrb	r3, [r1, r3]
 8006566:	f003 031f 	and.w	r3, r3, #31
 800656a:	fa22 f303 	lsr.w	r3, r2, r3
 800656e:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <HAL_RCC_ClockConfig+0x270>)
 8006570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006572:	4b0a      	ldr	r3, [pc, #40]	; (800659c <HAL_RCC_ClockConfig+0x274>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f7fc f982 	bl	8002880 <HAL_InitTick>
 800657c:	4603      	mov	r3, r0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	40022000 	.word	0x40022000
 800658c:	40021000 	.word	0x40021000
 8006590:	04c4b400 	.word	0x04c4b400
 8006594:	0800e4e4 	.word	0x0800e4e4
 8006598:	20000010 	.word	0x20000010
 800659c:	20000014 	.word	0x20000014

080065a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80065a6:	4b2c      	ldr	r3, [pc, #176]	; (8006658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 030c 	and.w	r3, r3, #12
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d102      	bne.n	80065b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065b2:	4b2a      	ldr	r3, [pc, #168]	; (800665c <HAL_RCC_GetSysClockFreq+0xbc>)
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	e047      	b.n	8006648 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80065b8:	4b27      	ldr	r3, [pc, #156]	; (8006658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f003 030c 	and.w	r3, r3, #12
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d102      	bne.n	80065ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80065c4:	4b26      	ldr	r3, [pc, #152]	; (8006660 <HAL_RCC_GetSysClockFreq+0xc0>)
 80065c6:	613b      	str	r3, [r7, #16]
 80065c8:	e03e      	b.n	8006648 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80065ca:	4b23      	ldr	r3, [pc, #140]	; (8006658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 030c 	and.w	r3, r3, #12
 80065d2:	2b0c      	cmp	r3, #12
 80065d4:	d136      	bne.n	8006644 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065d6:	4b20      	ldr	r3, [pc, #128]	; (8006658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065e0:	4b1d      	ldr	r3, [pc, #116]	; (8006658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	091b      	lsrs	r3, r3, #4
 80065e6:	f003 030f 	and.w	r3, r3, #15
 80065ea:	3301      	adds	r3, #1
 80065ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d10c      	bne.n	800660e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065f4:	4a1a      	ldr	r2, [pc, #104]	; (8006660 <HAL_RCC_GetSysClockFreq+0xc0>)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fc:	4a16      	ldr	r2, [pc, #88]	; (8006658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065fe:	68d2      	ldr	r2, [r2, #12]
 8006600:	0a12      	lsrs	r2, r2, #8
 8006602:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006606:	fb02 f303 	mul.w	r3, r2, r3
 800660a:	617b      	str	r3, [r7, #20]
      break;
 800660c:	e00c      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800660e:	4a13      	ldr	r2, [pc, #76]	; (800665c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	fbb2 f3f3 	udiv	r3, r2, r3
 8006616:	4a10      	ldr	r2, [pc, #64]	; (8006658 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006618:	68d2      	ldr	r2, [r2, #12]
 800661a:	0a12      	lsrs	r2, r2, #8
 800661c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006620:	fb02 f303 	mul.w	r3, r2, r3
 8006624:	617b      	str	r3, [r7, #20]
      break;
 8006626:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006628:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <HAL_RCC_GetSysClockFreq+0xb8>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	0e5b      	lsrs	r3, r3, #25
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	3301      	adds	r3, #1
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	e001      	b.n	8006648 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006648:	693b      	ldr	r3, [r7, #16]
}
 800664a:	4618      	mov	r0, r3
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	40021000 	.word	0x40021000
 800665c:	00f42400 	.word	0x00f42400
 8006660:	017d7840 	.word	0x017d7840

08006664 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006668:	4b03      	ldr	r3, [pc, #12]	; (8006678 <HAL_RCC_GetHCLKFreq+0x14>)
 800666a:	681b      	ldr	r3, [r3, #0]
}
 800666c:	4618      	mov	r0, r3
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	20000010 	.word	0x20000010

0800667c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006680:	f7ff fff0 	bl	8006664 <HAL_RCC_GetHCLKFreq>
 8006684:	4602      	mov	r2, r0
 8006686:	4b06      	ldr	r3, [pc, #24]	; (80066a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	0a1b      	lsrs	r3, r3, #8
 800668c:	f003 0307 	and.w	r3, r3, #7
 8006690:	4904      	ldr	r1, [pc, #16]	; (80066a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006692:	5ccb      	ldrb	r3, [r1, r3]
 8006694:	f003 031f 	and.w	r3, r3, #31
 8006698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800669c:	4618      	mov	r0, r3
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40021000 	.word	0x40021000
 80066a4:	0800e4f4 	.word	0x0800e4f4

080066a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80066ac:	f7ff ffda 	bl	8006664 <HAL_RCC_GetHCLKFreq>
 80066b0:	4602      	mov	r2, r0
 80066b2:	4b06      	ldr	r3, [pc, #24]	; (80066cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	0adb      	lsrs	r3, r3, #11
 80066b8:	f003 0307 	and.w	r3, r3, #7
 80066bc:	4904      	ldr	r1, [pc, #16]	; (80066d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066be:	5ccb      	ldrb	r3, [r1, r3]
 80066c0:	f003 031f 	and.w	r3, r3, #31
 80066c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	40021000 	.word	0x40021000
 80066d0:	0800e4f4 	.word	0x0800e4f4

080066d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066da:	4b1e      	ldr	r3, [pc, #120]	; (8006754 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f003 0303 	and.w	r3, r3, #3
 80066e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066e4:	4b1b      	ldr	r3, [pc, #108]	; (8006754 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	091b      	lsrs	r3, r3, #4
 80066ea:	f003 030f 	and.w	r3, r3, #15
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d10c      	bne.n	8006712 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066f8:	4a17      	ldr	r2, [pc, #92]	; (8006758 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006700:	4a14      	ldr	r2, [pc, #80]	; (8006754 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006702:	68d2      	ldr	r2, [r2, #12]
 8006704:	0a12      	lsrs	r2, r2, #8
 8006706:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800670a:	fb02 f303 	mul.w	r3, r2, r3
 800670e:	617b      	str	r3, [r7, #20]
    break;
 8006710:	e00c      	b.n	800672c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006712:	4a12      	ldr	r2, [pc, #72]	; (800675c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	fbb2 f3f3 	udiv	r3, r2, r3
 800671a:	4a0e      	ldr	r2, [pc, #56]	; (8006754 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800671c:	68d2      	ldr	r2, [r2, #12]
 800671e:	0a12      	lsrs	r2, r2, #8
 8006720:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006724:	fb02 f303 	mul.w	r3, r2, r3
 8006728:	617b      	str	r3, [r7, #20]
    break;
 800672a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800672c:	4b09      	ldr	r3, [pc, #36]	; (8006754 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	0e5b      	lsrs	r3, r3, #25
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	3301      	adds	r3, #1
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	fbb2 f3f3 	udiv	r3, r2, r3
 8006744:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006746:	687b      	ldr	r3, [r7, #4]
}
 8006748:	4618      	mov	r0, r3
 800674a:	371c      	adds	r7, #28
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	40021000 	.word	0x40021000
 8006758:	017d7840 	.word	0x017d7840
 800675c:	00f42400 	.word	0x00f42400

08006760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006768:	2300      	movs	r3, #0
 800676a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800676c:	2300      	movs	r3, #0
 800676e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 8098 	beq.w	80068ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800677e:	2300      	movs	r3, #0
 8006780:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006782:	4b43      	ldr	r3, [pc, #268]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10d      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800678e:	4b40      	ldr	r3, [pc, #256]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006792:	4a3f      	ldr	r2, [pc, #252]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006798:	6593      	str	r3, [r2, #88]	; 0x58
 800679a:	4b3d      	ldr	r3, [pc, #244]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800679c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800679e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067a2:	60bb      	str	r3, [r7, #8]
 80067a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067a6:	2301      	movs	r3, #1
 80067a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067aa:	4b3a      	ldr	r3, [pc, #232]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a39      	ldr	r2, [pc, #228]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067b6:	f7fc f8af 	bl	8002918 <HAL_GetTick>
 80067ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067bc:	e009      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067be:	f7fc f8ab 	bl	8002918 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d902      	bls.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	74fb      	strb	r3, [r7, #19]
        break;
 80067d0:	e005      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067d2:	4b30      	ldr	r3, [pc, #192]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0ef      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80067de:	7cfb      	ldrb	r3, [r7, #19]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d159      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80067e4:	4b2a      	ldr	r3, [pc, #168]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d01e      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d019      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006800:	4b23      	ldr	r3, [pc, #140]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800680a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800680c:	4b20      	ldr	r3, [pc, #128]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800680e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006812:	4a1f      	ldr	r2, [pc, #124]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800681c:	4b1c      	ldr	r3, [pc, #112]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800681e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006822:	4a1b      	ldr	r2, [pc, #108]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800682c:	4a18      	ldr	r2, [pc, #96]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d016      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683e:	f7fc f86b 	bl	8002918 <HAL_GetTick>
 8006842:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006844:	e00b      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006846:	f7fc f867 	bl	8002918 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	f241 3288 	movw	r2, #5000	; 0x1388
 8006854:	4293      	cmp	r3, r2
 8006856:	d902      	bls.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	74fb      	strb	r3, [r7, #19]
            break;
 800685c:	e006      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800685e:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0ec      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800686c:	7cfb      	ldrb	r3, [r7, #19]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10b      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006872:	4b07      	ldr	r3, [pc, #28]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	4903      	ldr	r1, [pc, #12]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006882:	4313      	orrs	r3, r2
 8006884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006888:	e008      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800688a:	7cfb      	ldrb	r3, [r7, #19]
 800688c:	74bb      	strb	r3, [r7, #18]
 800688e:	e005      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006890:	40021000 	.word	0x40021000
 8006894:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006898:	7cfb      	ldrb	r3, [r7, #19]
 800689a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800689c:	7c7b      	ldrb	r3, [r7, #17]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d105      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068a2:	4ba6      	ldr	r3, [pc, #664]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a6:	4aa5      	ldr	r2, [pc, #660]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068ba:	4ba0      	ldr	r3, [pc, #640]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c0:	f023 0203 	bic.w	r2, r3, #3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	499c      	ldr	r1, [pc, #624]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068dc:	4b97      	ldr	r3, [pc, #604]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e2:	f023 020c 	bic.w	r2, r3, #12
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	4994      	ldr	r1, [pc, #592]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068fe:	4b8f      	ldr	r3, [pc, #572]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006904:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	498b      	ldr	r1, [pc, #556]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800690e:	4313      	orrs	r3, r2
 8006910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006920:	4b86      	ldr	r3, [pc, #536]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006926:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	4983      	ldr	r1, [pc, #524]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006930:	4313      	orrs	r3, r2
 8006932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006942:	4b7e      	ldr	r3, [pc, #504]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006948:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	497a      	ldr	r1, [pc, #488]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006952:	4313      	orrs	r3, r2
 8006954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006964:	4b75      	ldr	r3, [pc, #468]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	4972      	ldr	r1, [pc, #456]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006974:	4313      	orrs	r3, r2
 8006976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006986:	4b6d      	ldr	r3, [pc, #436]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	4969      	ldr	r1, [pc, #420]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006996:	4313      	orrs	r3, r2
 8006998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00a      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069a8:	4b64      	ldr	r3, [pc, #400]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	4961      	ldr	r1, [pc, #388]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069ca:	4b5c      	ldr	r3, [pc, #368]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	4958      	ldr	r1, [pc, #352]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d015      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069ec:	4b53      	ldr	r3, [pc, #332]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fa:	4950      	ldr	r1, [pc, #320]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a0a:	d105      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a0c:	4b4b      	ldr	r3, [pc, #300]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	4a4a      	ldr	r2, [pc, #296]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d015      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a24:	4b45      	ldr	r3, [pc, #276]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a32:	4942      	ldr	r1, [pc, #264]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a42:	d105      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a44:	4b3d      	ldr	r3, [pc, #244]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	4a3c      	ldr	r2, [pc, #240]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a4e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d015      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a5c:	4b37      	ldr	r3, [pc, #220]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6a:	4934      	ldr	r1, [pc, #208]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a7a:	d105      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a7c:	4b2f      	ldr	r3, [pc, #188]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	4a2e      	ldr	r2, [pc, #184]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a86:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d015      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a94:	4b29      	ldr	r3, [pc, #164]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa2:	4926      	ldr	r1, [pc, #152]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ab2:	d105      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ab4:	4b21      	ldr	r3, [pc, #132]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	4a20      	ldr	r2, [pc, #128]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006abe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d015      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006acc:	4b1b      	ldr	r3, [pc, #108]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	4918      	ldr	r1, [pc, #96]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aea:	d105      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006aec:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	4a12      	ldr	r2, [pc, #72]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006af6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d015      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b04:	4b0d      	ldr	r3, [pc, #52]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b12:	490a      	ldr	r1, [pc, #40]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b22:	d105      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b24:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	4a04      	ldr	r2, [pc, #16]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b2e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006b30:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	40021000 	.word	0x40021000

08006b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e049      	b.n	8006be6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fb fce8 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4610      	mov	r0, r2
 8006b80:	f000 fa64 	bl	800704c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b082      	sub	sp, #8
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e049      	b.n	8006c94 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d106      	bne.n	8006c1a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f841 	bl	8006c9c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	f000 fa0d 	bl	800704c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e041      	b.n	8006d48 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d106      	bne.n	8006cde <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f839 	bl	8006d50 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f000 f9ab 	bl	800704c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0208 	bic.w	r2, r2, #8
 8006d04:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6819      	ldr	r1, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d101      	bne.n	8006d82 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	e066      	b.n	8006e50 <HAL_TIM_OC_ConfigChannel+0xec>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b14      	cmp	r3, #20
 8006d8e:	d857      	bhi.n	8006e40 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006d90:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d96:	bf00      	nop
 8006d98:	08006ded 	.word	0x08006ded
 8006d9c:	08006e41 	.word	0x08006e41
 8006da0:	08006e41 	.word	0x08006e41
 8006da4:	08006e41 	.word	0x08006e41
 8006da8:	08006dfb 	.word	0x08006dfb
 8006dac:	08006e41 	.word	0x08006e41
 8006db0:	08006e41 	.word	0x08006e41
 8006db4:	08006e41 	.word	0x08006e41
 8006db8:	08006e09 	.word	0x08006e09
 8006dbc:	08006e41 	.word	0x08006e41
 8006dc0:	08006e41 	.word	0x08006e41
 8006dc4:	08006e41 	.word	0x08006e41
 8006dc8:	08006e17 	.word	0x08006e17
 8006dcc:	08006e41 	.word	0x08006e41
 8006dd0:	08006e41 	.word	0x08006e41
 8006dd4:	08006e41 	.word	0x08006e41
 8006dd8:	08006e25 	.word	0x08006e25
 8006ddc:	08006e41 	.word	0x08006e41
 8006de0:	08006e41 	.word	0x08006e41
 8006de4:	08006e41 	.word	0x08006e41
 8006de8:	08006e33 	.word	0x08006e33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68b9      	ldr	r1, [r7, #8]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 f9ba 	bl	800716c <TIM_OC1_SetConfig>
      break;
 8006df8:	e025      	b.n	8006e46 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68b9      	ldr	r1, [r7, #8]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fa43 	bl	800728c <TIM_OC2_SetConfig>
      break;
 8006e06:	e01e      	b.n	8006e46 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fac6 	bl	80073a0 <TIM_OC3_SetConfig>
      break;
 8006e14:	e017      	b.n	8006e46 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fb47 	bl	80074b0 <TIM_OC4_SetConfig>
      break;
 8006e22:	e010      	b.n	8006e46 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68b9      	ldr	r1, [r7, #8]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 fbca 	bl	80075c4 <TIM_OC5_SetConfig>
      break;
 8006e30:	e009      	b.n	8006e46 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68b9      	ldr	r1, [r7, #8]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 fc27 	bl	800768c <TIM_OC6_SetConfig>
      break;
 8006e3e:	e002      	b.n	8006e46 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	75fb      	strb	r3, [r7, #23]
      break;
 8006e44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_TIM_ConfigClockSource+0x1c>
 8006e70:	2302      	movs	r3, #2
 8006e72:	e0de      	b.n	8007032 <HAL_TIM_ConfigClockSource+0x1da>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006e92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a63      	ldr	r2, [pc, #396]	; (800703c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	f000 80a9 	beq.w	8007006 <HAL_TIM_ConfigClockSource+0x1ae>
 8006eb4:	4a61      	ldr	r2, [pc, #388]	; (800703c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	f200 80ae 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ebc:	4a60      	ldr	r2, [pc, #384]	; (8007040 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	f000 80a1 	beq.w	8007006 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ec4:	4a5e      	ldr	r2, [pc, #376]	; (8007040 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	f200 80a6 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ecc:	4a5d      	ldr	r2, [pc, #372]	; (8007044 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	f000 8099 	beq.w	8007006 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ed4:	4a5b      	ldr	r2, [pc, #364]	; (8007044 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	f200 809e 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x1c0>
 8006edc:	4a5a      	ldr	r2, [pc, #360]	; (8007048 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	f000 8091 	beq.w	8007006 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ee4:	4a58      	ldr	r2, [pc, #352]	; (8007048 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	f200 8096 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x1c0>
 8006eec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ef0:	f000 8089 	beq.w	8007006 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ef4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ef8:	f200 808e 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x1c0>
 8006efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f00:	d03e      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0x128>
 8006f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f06:	f200 8087 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x1c0>
 8006f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0e:	f000 8086 	beq.w	800701e <HAL_TIM_ConfigClockSource+0x1c6>
 8006f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f16:	d87f      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x1c0>
 8006f18:	2b70      	cmp	r3, #112	; 0x70
 8006f1a:	d01a      	beq.n	8006f52 <HAL_TIM_ConfigClockSource+0xfa>
 8006f1c:	2b70      	cmp	r3, #112	; 0x70
 8006f1e:	d87b      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x1c0>
 8006f20:	2b60      	cmp	r3, #96	; 0x60
 8006f22:	d050      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x16e>
 8006f24:	2b60      	cmp	r3, #96	; 0x60
 8006f26:	d877      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x1c0>
 8006f28:	2b50      	cmp	r3, #80	; 0x50
 8006f2a:	d03c      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x14e>
 8006f2c:	2b50      	cmp	r3, #80	; 0x50
 8006f2e:	d873      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x1c0>
 8006f30:	2b40      	cmp	r3, #64	; 0x40
 8006f32:	d058      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x18e>
 8006f34:	2b40      	cmp	r3, #64	; 0x40
 8006f36:	d86f      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x1c0>
 8006f38:	2b30      	cmp	r3, #48	; 0x30
 8006f3a:	d064      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x1ae>
 8006f3c:	2b30      	cmp	r3, #48	; 0x30
 8006f3e:	d86b      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x1c0>
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d060      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x1ae>
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	d867      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x1c0>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d05c      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x1ae>
 8006f4c:	2b10      	cmp	r3, #16
 8006f4e:	d05a      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x1ae>
 8006f50:	e062      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	6899      	ldr	r1, [r3, #8]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f000 fc75 	bl	8007850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	609a      	str	r2, [r3, #8]
      break;
 8006f7e:	e04f      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	6899      	ldr	r1, [r3, #8]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f000 fc5e 	bl	8007850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fa2:	609a      	str	r2, [r3, #8]
      break;
 8006fa4:	e03c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6859      	ldr	r1, [r3, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f000 fbd0 	bl	8007758 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2150      	movs	r1, #80	; 0x50
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fc29 	bl	8007816 <TIM_ITRx_SetConfig>
      break;
 8006fc4:	e02c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6859      	ldr	r1, [r3, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f000 fbef 	bl	80077b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2160      	movs	r1, #96	; 0x60
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fc19 	bl	8007816 <TIM_ITRx_SetConfig>
      break;
 8006fe4:	e01c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6859      	ldr	r1, [r3, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f000 fbb0 	bl	8007758 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2140      	movs	r1, #64	; 0x40
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fc09 	bl	8007816 <TIM_ITRx_SetConfig>
      break;
 8007004:	e00c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4619      	mov	r1, r3
 8007010:	4610      	mov	r0, r2
 8007012:	f000 fc00 	bl	8007816 <TIM_ITRx_SetConfig>
      break;
 8007016:	e003      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
      break;
 800701c:	e000      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800701e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	00100070 	.word	0x00100070
 8007040:	00100040 	.word	0x00100040
 8007044:	00100030 	.word	0x00100030
 8007048:	00100020 	.word	0x00100020

0800704c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a3c      	ldr	r2, [pc, #240]	; (8007150 <TIM_Base_SetConfig+0x104>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d00f      	beq.n	8007084 <TIM_Base_SetConfig+0x38>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800706a:	d00b      	beq.n	8007084 <TIM_Base_SetConfig+0x38>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a39      	ldr	r2, [pc, #228]	; (8007154 <TIM_Base_SetConfig+0x108>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d007      	beq.n	8007084 <TIM_Base_SetConfig+0x38>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a38      	ldr	r2, [pc, #224]	; (8007158 <TIM_Base_SetConfig+0x10c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d003      	beq.n	8007084 <TIM_Base_SetConfig+0x38>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a37      	ldr	r2, [pc, #220]	; (800715c <TIM_Base_SetConfig+0x110>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d108      	bne.n	8007096 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a2d      	ldr	r2, [pc, #180]	; (8007150 <TIM_Base_SetConfig+0x104>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d01b      	beq.n	80070d6 <TIM_Base_SetConfig+0x8a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a4:	d017      	beq.n	80070d6 <TIM_Base_SetConfig+0x8a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a2a      	ldr	r2, [pc, #168]	; (8007154 <TIM_Base_SetConfig+0x108>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d013      	beq.n	80070d6 <TIM_Base_SetConfig+0x8a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a29      	ldr	r2, [pc, #164]	; (8007158 <TIM_Base_SetConfig+0x10c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d00f      	beq.n	80070d6 <TIM_Base_SetConfig+0x8a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a28      	ldr	r2, [pc, #160]	; (800715c <TIM_Base_SetConfig+0x110>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d00b      	beq.n	80070d6 <TIM_Base_SetConfig+0x8a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a27      	ldr	r2, [pc, #156]	; (8007160 <TIM_Base_SetConfig+0x114>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d007      	beq.n	80070d6 <TIM_Base_SetConfig+0x8a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a26      	ldr	r2, [pc, #152]	; (8007164 <TIM_Base_SetConfig+0x118>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d003      	beq.n	80070d6 <TIM_Base_SetConfig+0x8a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a25      	ldr	r2, [pc, #148]	; (8007168 <TIM_Base_SetConfig+0x11c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d108      	bne.n	80070e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a10      	ldr	r2, [pc, #64]	; (8007150 <TIM_Base_SetConfig+0x104>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00f      	beq.n	8007134 <TIM_Base_SetConfig+0xe8>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a11      	ldr	r2, [pc, #68]	; (800715c <TIM_Base_SetConfig+0x110>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00b      	beq.n	8007134 <TIM_Base_SetConfig+0xe8>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a10      	ldr	r2, [pc, #64]	; (8007160 <TIM_Base_SetConfig+0x114>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d007      	beq.n	8007134 <TIM_Base_SetConfig+0xe8>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a0f      	ldr	r2, [pc, #60]	; (8007164 <TIM_Base_SetConfig+0x118>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d003      	beq.n	8007134 <TIM_Base_SetConfig+0xe8>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a0e      	ldr	r2, [pc, #56]	; (8007168 <TIM_Base_SetConfig+0x11c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d103      	bne.n	800713c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	615a      	str	r2, [r3, #20]
}
 8007142:	bf00      	nop
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	40012c00 	.word	0x40012c00
 8007154:	40000400 	.word	0x40000400
 8007158:	40000800 	.word	0x40000800
 800715c:	40013400 	.word	0x40013400
 8007160:	40014000 	.word	0x40014000
 8007164:	40014400 	.word	0x40014400
 8007168:	40014800 	.word	0x40014800

0800716c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f023 0201 	bic.w	r2, r3, #1
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800719a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0303 	bic.w	r3, r3, #3
 80071a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f023 0302 	bic.w	r3, r3, #2
 80071b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a2c      	ldr	r2, [pc, #176]	; (8007278 <TIM_OC1_SetConfig+0x10c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00f      	beq.n	80071ec <TIM_OC1_SetConfig+0x80>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a2b      	ldr	r2, [pc, #172]	; (800727c <TIM_OC1_SetConfig+0x110>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d00b      	beq.n	80071ec <TIM_OC1_SetConfig+0x80>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a2a      	ldr	r2, [pc, #168]	; (8007280 <TIM_OC1_SetConfig+0x114>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d007      	beq.n	80071ec <TIM_OC1_SetConfig+0x80>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a29      	ldr	r2, [pc, #164]	; (8007284 <TIM_OC1_SetConfig+0x118>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d003      	beq.n	80071ec <TIM_OC1_SetConfig+0x80>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a28      	ldr	r2, [pc, #160]	; (8007288 <TIM_OC1_SetConfig+0x11c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d10c      	bne.n	8007206 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f023 0308 	bic.w	r3, r3, #8
 80071f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f023 0304 	bic.w	r3, r3, #4
 8007204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a1b      	ldr	r2, [pc, #108]	; (8007278 <TIM_OC1_SetConfig+0x10c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00f      	beq.n	800722e <TIM_OC1_SetConfig+0xc2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a1a      	ldr	r2, [pc, #104]	; (800727c <TIM_OC1_SetConfig+0x110>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00b      	beq.n	800722e <TIM_OC1_SetConfig+0xc2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a19      	ldr	r2, [pc, #100]	; (8007280 <TIM_OC1_SetConfig+0x114>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d007      	beq.n	800722e <TIM_OC1_SetConfig+0xc2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a18      	ldr	r2, [pc, #96]	; (8007284 <TIM_OC1_SetConfig+0x118>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d003      	beq.n	800722e <TIM_OC1_SetConfig+0xc2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a17      	ldr	r2, [pc, #92]	; (8007288 <TIM_OC1_SetConfig+0x11c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d111      	bne.n	8007252 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800723c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	4313      	orrs	r3, r2
 8007246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	621a      	str	r2, [r3, #32]
}
 800726c:	bf00      	nop
 800726e:	371c      	adds	r7, #28
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	40012c00 	.word	0x40012c00
 800727c:	40013400 	.word	0x40013400
 8007280:	40014000 	.word	0x40014000
 8007284:	40014400 	.word	0x40014400
 8007288:	40014800 	.word	0x40014800

0800728c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f023 0210 	bic.w	r2, r3, #16
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	021b      	lsls	r3, r3, #8
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f023 0320 	bic.w	r3, r3, #32
 80072da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	011b      	lsls	r3, r3, #4
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a28      	ldr	r2, [pc, #160]	; (800738c <TIM_OC2_SetConfig+0x100>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d003      	beq.n	80072f8 <TIM_OC2_SetConfig+0x6c>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a27      	ldr	r2, [pc, #156]	; (8007390 <TIM_OC2_SetConfig+0x104>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d10d      	bne.n	8007314 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	011b      	lsls	r3, r3, #4
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4313      	orrs	r3, r2
 800730a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007312:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a1d      	ldr	r2, [pc, #116]	; (800738c <TIM_OC2_SetConfig+0x100>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00f      	beq.n	800733c <TIM_OC2_SetConfig+0xb0>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a1c      	ldr	r2, [pc, #112]	; (8007390 <TIM_OC2_SetConfig+0x104>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00b      	beq.n	800733c <TIM_OC2_SetConfig+0xb0>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a1b      	ldr	r2, [pc, #108]	; (8007394 <TIM_OC2_SetConfig+0x108>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d007      	beq.n	800733c <TIM_OC2_SetConfig+0xb0>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a1a      	ldr	r2, [pc, #104]	; (8007398 <TIM_OC2_SetConfig+0x10c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d003      	beq.n	800733c <TIM_OC2_SetConfig+0xb0>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a19      	ldr	r2, [pc, #100]	; (800739c <TIM_OC2_SetConfig+0x110>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d113      	bne.n	8007364 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007342:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800734a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	4313      	orrs	r3, r2
 8007356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	4313      	orrs	r3, r2
 8007362:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	621a      	str	r2, [r3, #32]
}
 800737e:	bf00      	nop
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	40012c00 	.word	0x40012c00
 8007390:	40013400 	.word	0x40013400
 8007394:	40014000 	.word	0x40014000
 8007398:	40014400 	.word	0x40014400
 800739c:	40014800 	.word	0x40014800

080073a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0303 	bic.w	r3, r3, #3
 80073da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	021b      	lsls	r3, r3, #8
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a27      	ldr	r2, [pc, #156]	; (800749c <TIM_OC3_SetConfig+0xfc>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d003      	beq.n	800740a <TIM_OC3_SetConfig+0x6a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a26      	ldr	r2, [pc, #152]	; (80074a0 <TIM_OC3_SetConfig+0x100>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d10d      	bne.n	8007426 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007410:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	021b      	lsls	r3, r3, #8
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a1c      	ldr	r2, [pc, #112]	; (800749c <TIM_OC3_SetConfig+0xfc>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d00f      	beq.n	800744e <TIM_OC3_SetConfig+0xae>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a1b      	ldr	r2, [pc, #108]	; (80074a0 <TIM_OC3_SetConfig+0x100>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d00b      	beq.n	800744e <TIM_OC3_SetConfig+0xae>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a1a      	ldr	r2, [pc, #104]	; (80074a4 <TIM_OC3_SetConfig+0x104>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d007      	beq.n	800744e <TIM_OC3_SetConfig+0xae>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a19      	ldr	r2, [pc, #100]	; (80074a8 <TIM_OC3_SetConfig+0x108>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d003      	beq.n	800744e <TIM_OC3_SetConfig+0xae>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a18      	ldr	r2, [pc, #96]	; (80074ac <TIM_OC3_SetConfig+0x10c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d113      	bne.n	8007476 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800745c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	4313      	orrs	r3, r2
 8007474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	621a      	str	r2, [r3, #32]
}
 8007490:	bf00      	nop
 8007492:	371c      	adds	r7, #28
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	40012c00 	.word	0x40012c00
 80074a0:	40013400 	.word	0x40013400
 80074a4:	40014000 	.word	0x40014000
 80074a8:	40014400 	.word	0x40014400
 80074ac:	40014800 	.word	0x40014800

080074b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	021b      	lsls	r3, r3, #8
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	031b      	lsls	r3, r3, #12
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a28      	ldr	r2, [pc, #160]	; (80075b0 <TIM_OC4_SetConfig+0x100>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d003      	beq.n	800751c <TIM_OC4_SetConfig+0x6c>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a27      	ldr	r2, [pc, #156]	; (80075b4 <TIM_OC4_SetConfig+0x104>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d10d      	bne.n	8007538 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	031b      	lsls	r3, r3, #12
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007536:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a1d      	ldr	r2, [pc, #116]	; (80075b0 <TIM_OC4_SetConfig+0x100>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00f      	beq.n	8007560 <TIM_OC4_SetConfig+0xb0>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a1c      	ldr	r2, [pc, #112]	; (80075b4 <TIM_OC4_SetConfig+0x104>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00b      	beq.n	8007560 <TIM_OC4_SetConfig+0xb0>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a1b      	ldr	r2, [pc, #108]	; (80075b8 <TIM_OC4_SetConfig+0x108>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d007      	beq.n	8007560 <TIM_OC4_SetConfig+0xb0>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a1a      	ldr	r2, [pc, #104]	; (80075bc <TIM_OC4_SetConfig+0x10c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d003      	beq.n	8007560 <TIM_OC4_SetConfig+0xb0>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a19      	ldr	r2, [pc, #100]	; (80075c0 <TIM_OC4_SetConfig+0x110>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d113      	bne.n	8007588 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007566:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800756e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	019b      	lsls	r3, r3, #6
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	4313      	orrs	r3, r2
 800757a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	019b      	lsls	r3, r3, #6
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	4313      	orrs	r3, r2
 8007586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	621a      	str	r2, [r3, #32]
}
 80075a2:	bf00      	nop
 80075a4:	371c      	adds	r7, #28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40012c00 	.word	0x40012c00
 80075b4:	40013400 	.word	0x40013400
 80075b8:	40014000 	.word	0x40014000
 80075bc:	40014400 	.word	0x40014400
 80075c0:	40014800 	.word	0x40014800

080075c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	4313      	orrs	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007608:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	041b      	lsls	r3, r3, #16
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	4313      	orrs	r3, r2
 8007614:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a17      	ldr	r2, [pc, #92]	; (8007678 <TIM_OC5_SetConfig+0xb4>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d00f      	beq.n	800763e <TIM_OC5_SetConfig+0x7a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a16      	ldr	r2, [pc, #88]	; (800767c <TIM_OC5_SetConfig+0xb8>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d00b      	beq.n	800763e <TIM_OC5_SetConfig+0x7a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a15      	ldr	r2, [pc, #84]	; (8007680 <TIM_OC5_SetConfig+0xbc>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d007      	beq.n	800763e <TIM_OC5_SetConfig+0x7a>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a14      	ldr	r2, [pc, #80]	; (8007684 <TIM_OC5_SetConfig+0xc0>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d003      	beq.n	800763e <TIM_OC5_SetConfig+0x7a>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a13      	ldr	r2, [pc, #76]	; (8007688 <TIM_OC5_SetConfig+0xc4>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d109      	bne.n	8007652 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007644:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	021b      	lsls	r3, r3, #8
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	4313      	orrs	r3, r2
 8007650:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	621a      	str	r2, [r3, #32]
}
 800766c:	bf00      	nop
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	40012c00 	.word	0x40012c00
 800767c:	40013400 	.word	0x40013400
 8007680:	40014000 	.word	0x40014000
 8007684:	40014400 	.word	0x40014400
 8007688:	40014800 	.word	0x40014800

0800768c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	051b      	lsls	r3, r3, #20
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a18      	ldr	r2, [pc, #96]	; (8007744 <TIM_OC6_SetConfig+0xb8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00f      	beq.n	8007708 <TIM_OC6_SetConfig+0x7c>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a17      	ldr	r2, [pc, #92]	; (8007748 <TIM_OC6_SetConfig+0xbc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00b      	beq.n	8007708 <TIM_OC6_SetConfig+0x7c>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a16      	ldr	r2, [pc, #88]	; (800774c <TIM_OC6_SetConfig+0xc0>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d007      	beq.n	8007708 <TIM_OC6_SetConfig+0x7c>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a15      	ldr	r2, [pc, #84]	; (8007750 <TIM_OC6_SetConfig+0xc4>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d003      	beq.n	8007708 <TIM_OC6_SetConfig+0x7c>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a14      	ldr	r2, [pc, #80]	; (8007754 <TIM_OC6_SetConfig+0xc8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d109      	bne.n	800771c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800770e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	029b      	lsls	r3, r3, #10
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	4313      	orrs	r3, r2
 800771a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	621a      	str	r2, [r3, #32]
}
 8007736:	bf00      	nop
 8007738:	371c      	adds	r7, #28
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	40012c00 	.word	0x40012c00
 8007748:	40013400 	.word	0x40013400
 800774c:	40014000 	.word	0x40014000
 8007750:	40014400 	.word	0x40014400
 8007754:	40014800 	.word	0x40014800

08007758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	f023 0201 	bic.w	r2, r3, #1
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	011b      	lsls	r3, r3, #4
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	4313      	orrs	r3, r2
 800778c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f023 030a 	bic.w	r3, r3, #10
 8007794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	621a      	str	r2, [r3, #32]
}
 80077aa:	bf00      	nop
 80077ac:	371c      	adds	r7, #28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b087      	sub	sp, #28
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	f023 0210 	bic.w	r2, r3, #16
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	031b      	lsls	r3, r3, #12
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	621a      	str	r2, [r3, #32]
}
 800780a:	bf00      	nop
 800780c:	371c      	adds	r7, #28
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800782c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	f043 0307 	orr.w	r3, r3, #7
 800783c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	609a      	str	r2, [r3, #8]
}
 8007844:	bf00      	nop
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800786a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	021a      	lsls	r2, r3, #8
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	431a      	orrs	r2, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	4313      	orrs	r3, r2
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	4313      	orrs	r3, r2
 800787c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	609a      	str	r2, [r3, #8]
}
 8007884:	bf00      	nop
 8007886:	371c      	adds	r7, #28
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e065      	b.n	8007974 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a2c      	ldr	r2, [pc, #176]	; (8007980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d004      	beq.n	80078dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a2b      	ldr	r2, [pc, #172]	; (8007984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d108      	bne.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80078e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80078f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a1b      	ldr	r2, [pc, #108]	; (8007980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d018      	beq.n	8007948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791e:	d013      	beq.n	8007948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a18      	ldr	r2, [pc, #96]	; (8007988 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d00e      	beq.n	8007948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a17      	ldr	r2, [pc, #92]	; (800798c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d009      	beq.n	8007948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a12      	ldr	r2, [pc, #72]	; (8007984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d004      	beq.n	8007948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a13      	ldr	r2, [pc, #76]	; (8007990 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d10c      	bne.n	8007962 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800794e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	4313      	orrs	r3, r2
 8007958:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	40012c00 	.word	0x40012c00
 8007984:	40013400 	.word	0x40013400
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	40014000 	.word	0x40014000

08007994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e042      	b.n	8007a2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d106      	bne.n	80079be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7fa fec7 	bl	800274c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2224      	movs	r2, #36	; 0x24
 80079c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f022 0201 	bic.w	r2, r2, #1
 80079d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f8c2 	bl	8007b60 <UART_SetConfig>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d101      	bne.n	80079e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e022      	b.n	8007a2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fb82 	bl	80080f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689a      	ldr	r2, [r3, #8]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fc09 	bl	800823c <UART_CheckIdleState>
 8007a2a:	4603      	mov	r3, r0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08a      	sub	sp, #40	; 0x28
 8007a38:	af02      	add	r7, sp, #8
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	603b      	str	r3, [r7, #0]
 8007a40:	4613      	mov	r3, r2
 8007a42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	f040 8083 	bne.w	8007b56 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <HAL_UART_Transmit+0x28>
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e07b      	b.n	8007b58 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <HAL_UART_Transmit+0x3a>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	e074      	b.n	8007b58 <HAL_UART_Transmit+0x124>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2221      	movs	r2, #33	; 0x21
 8007a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a86:	f7fa ff47 	bl	8002918 <HAL_GetTick>
 8007a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	88fa      	ldrh	r2, [r7, #6]
 8007a90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	88fa      	ldrh	r2, [r7, #6]
 8007a98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa4:	d108      	bne.n	8007ab8 <HAL_UART_Transmit+0x84>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d104      	bne.n	8007ab8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	61bb      	str	r3, [r7, #24]
 8007ab6:	e003      	b.n	8007ac0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007abc:	2300      	movs	r3, #0
 8007abe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007ac8:	e02c      	b.n	8007b24 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2180      	movs	r1, #128	; 0x80
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 fbfc 	bl	80082d2 <UART_WaitOnFlagUntilTimeout>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e039      	b.n	8007b58 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10b      	bne.n	8007b02 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007af8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	3302      	adds	r3, #2
 8007afe:	61bb      	str	r3, [r7, #24]
 8007b00:	e007      	b.n	8007b12 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	781a      	ldrb	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1cc      	bne.n	8007aca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2200      	movs	r2, #0
 8007b38:	2140      	movs	r1, #64	; 0x40
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f000 fbc9 	bl	80082d2 <UART_WaitOnFlagUntilTimeout>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d001      	beq.n	8007b4a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e006      	b.n	8007b58 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	e000      	b.n	8007b58 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007b56:	2302      	movs	r3, #2
  }
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3720      	adds	r7, #32
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b64:	b08c      	sub	sp, #48	; 0x30
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	4bab      	ldr	r3, [pc, #684]	; (8007e3c <UART_SetConfig+0x2dc>)
 8007b90:	4013      	ands	r3, r2
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	6812      	ldr	r2, [r2, #0]
 8007b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4aa0      	ldr	r2, [pc, #640]	; (8007e40 <UART_SetConfig+0x2e0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d004      	beq.n	8007bcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007bd6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	6812      	ldr	r2, [r2, #0]
 8007bde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007be0:	430b      	orrs	r3, r1
 8007be2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bea:	f023 010f 	bic.w	r1, r3, #15
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a91      	ldr	r2, [pc, #580]	; (8007e44 <UART_SetConfig+0x2e4>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d125      	bne.n	8007c50 <UART_SetConfig+0xf0>
 8007c04:	4b90      	ldr	r3, [pc, #576]	; (8007e48 <UART_SetConfig+0x2e8>)
 8007c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0a:	f003 0303 	and.w	r3, r3, #3
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d81a      	bhi.n	8007c48 <UART_SetConfig+0xe8>
 8007c12:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <UART_SetConfig+0xb8>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c29 	.word	0x08007c29
 8007c1c:	08007c39 	.word	0x08007c39
 8007c20:	08007c31 	.word	0x08007c31
 8007c24:	08007c41 	.word	0x08007c41
 8007c28:	2301      	movs	r3, #1
 8007c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c2e:	e0d6      	b.n	8007dde <UART_SetConfig+0x27e>
 8007c30:	2302      	movs	r3, #2
 8007c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c36:	e0d2      	b.n	8007dde <UART_SetConfig+0x27e>
 8007c38:	2304      	movs	r3, #4
 8007c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c3e:	e0ce      	b.n	8007dde <UART_SetConfig+0x27e>
 8007c40:	2308      	movs	r3, #8
 8007c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c46:	e0ca      	b.n	8007dde <UART_SetConfig+0x27e>
 8007c48:	2310      	movs	r3, #16
 8007c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c4e:	e0c6      	b.n	8007dde <UART_SetConfig+0x27e>
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a7d      	ldr	r2, [pc, #500]	; (8007e4c <UART_SetConfig+0x2ec>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d138      	bne.n	8007ccc <UART_SetConfig+0x16c>
 8007c5a:	4b7b      	ldr	r3, [pc, #492]	; (8007e48 <UART_SetConfig+0x2e8>)
 8007c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c60:	f003 030c 	and.w	r3, r3, #12
 8007c64:	2b0c      	cmp	r3, #12
 8007c66:	d82d      	bhi.n	8007cc4 <UART_SetConfig+0x164>
 8007c68:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <UART_SetConfig+0x110>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007ca5 	.word	0x08007ca5
 8007c74:	08007cc5 	.word	0x08007cc5
 8007c78:	08007cc5 	.word	0x08007cc5
 8007c7c:	08007cc5 	.word	0x08007cc5
 8007c80:	08007cb5 	.word	0x08007cb5
 8007c84:	08007cc5 	.word	0x08007cc5
 8007c88:	08007cc5 	.word	0x08007cc5
 8007c8c:	08007cc5 	.word	0x08007cc5
 8007c90:	08007cad 	.word	0x08007cad
 8007c94:	08007cc5 	.word	0x08007cc5
 8007c98:	08007cc5 	.word	0x08007cc5
 8007c9c:	08007cc5 	.word	0x08007cc5
 8007ca0:	08007cbd 	.word	0x08007cbd
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007caa:	e098      	b.n	8007dde <UART_SetConfig+0x27e>
 8007cac:	2302      	movs	r3, #2
 8007cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cb2:	e094      	b.n	8007dde <UART_SetConfig+0x27e>
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cba:	e090      	b.n	8007dde <UART_SetConfig+0x27e>
 8007cbc:	2308      	movs	r3, #8
 8007cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cc2:	e08c      	b.n	8007dde <UART_SetConfig+0x27e>
 8007cc4:	2310      	movs	r3, #16
 8007cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cca:	e088      	b.n	8007dde <UART_SetConfig+0x27e>
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a5f      	ldr	r2, [pc, #380]	; (8007e50 <UART_SetConfig+0x2f0>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d125      	bne.n	8007d22 <UART_SetConfig+0x1c2>
 8007cd6:	4b5c      	ldr	r3, [pc, #368]	; (8007e48 <UART_SetConfig+0x2e8>)
 8007cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cdc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ce0:	2b30      	cmp	r3, #48	; 0x30
 8007ce2:	d016      	beq.n	8007d12 <UART_SetConfig+0x1b2>
 8007ce4:	2b30      	cmp	r3, #48	; 0x30
 8007ce6:	d818      	bhi.n	8007d1a <UART_SetConfig+0x1ba>
 8007ce8:	2b20      	cmp	r3, #32
 8007cea:	d00a      	beq.n	8007d02 <UART_SetConfig+0x1a2>
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	d814      	bhi.n	8007d1a <UART_SetConfig+0x1ba>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <UART_SetConfig+0x19a>
 8007cf4:	2b10      	cmp	r3, #16
 8007cf6:	d008      	beq.n	8007d0a <UART_SetConfig+0x1aa>
 8007cf8:	e00f      	b.n	8007d1a <UART_SetConfig+0x1ba>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d00:	e06d      	b.n	8007dde <UART_SetConfig+0x27e>
 8007d02:	2302      	movs	r3, #2
 8007d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d08:	e069      	b.n	8007dde <UART_SetConfig+0x27e>
 8007d0a:	2304      	movs	r3, #4
 8007d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d10:	e065      	b.n	8007dde <UART_SetConfig+0x27e>
 8007d12:	2308      	movs	r3, #8
 8007d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d18:	e061      	b.n	8007dde <UART_SetConfig+0x27e>
 8007d1a:	2310      	movs	r3, #16
 8007d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d20:	e05d      	b.n	8007dde <UART_SetConfig+0x27e>
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a4b      	ldr	r2, [pc, #300]	; (8007e54 <UART_SetConfig+0x2f4>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d125      	bne.n	8007d78 <UART_SetConfig+0x218>
 8007d2c:	4b46      	ldr	r3, [pc, #280]	; (8007e48 <UART_SetConfig+0x2e8>)
 8007d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d36:	2bc0      	cmp	r3, #192	; 0xc0
 8007d38:	d016      	beq.n	8007d68 <UART_SetConfig+0x208>
 8007d3a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d3c:	d818      	bhi.n	8007d70 <UART_SetConfig+0x210>
 8007d3e:	2b80      	cmp	r3, #128	; 0x80
 8007d40:	d00a      	beq.n	8007d58 <UART_SetConfig+0x1f8>
 8007d42:	2b80      	cmp	r3, #128	; 0x80
 8007d44:	d814      	bhi.n	8007d70 <UART_SetConfig+0x210>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d002      	beq.n	8007d50 <UART_SetConfig+0x1f0>
 8007d4a:	2b40      	cmp	r3, #64	; 0x40
 8007d4c:	d008      	beq.n	8007d60 <UART_SetConfig+0x200>
 8007d4e:	e00f      	b.n	8007d70 <UART_SetConfig+0x210>
 8007d50:	2300      	movs	r3, #0
 8007d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d56:	e042      	b.n	8007dde <UART_SetConfig+0x27e>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d5e:	e03e      	b.n	8007dde <UART_SetConfig+0x27e>
 8007d60:	2304      	movs	r3, #4
 8007d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d66:	e03a      	b.n	8007dde <UART_SetConfig+0x27e>
 8007d68:	2308      	movs	r3, #8
 8007d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d6e:	e036      	b.n	8007dde <UART_SetConfig+0x27e>
 8007d70:	2310      	movs	r3, #16
 8007d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d76:	e032      	b.n	8007dde <UART_SetConfig+0x27e>
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a30      	ldr	r2, [pc, #192]	; (8007e40 <UART_SetConfig+0x2e0>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d12a      	bne.n	8007dd8 <UART_SetConfig+0x278>
 8007d82:	4b31      	ldr	r3, [pc, #196]	; (8007e48 <UART_SetConfig+0x2e8>)
 8007d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d90:	d01a      	beq.n	8007dc8 <UART_SetConfig+0x268>
 8007d92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d96:	d81b      	bhi.n	8007dd0 <UART_SetConfig+0x270>
 8007d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d9c:	d00c      	beq.n	8007db8 <UART_SetConfig+0x258>
 8007d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da2:	d815      	bhi.n	8007dd0 <UART_SetConfig+0x270>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <UART_SetConfig+0x250>
 8007da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dac:	d008      	beq.n	8007dc0 <UART_SetConfig+0x260>
 8007dae:	e00f      	b.n	8007dd0 <UART_SetConfig+0x270>
 8007db0:	2300      	movs	r3, #0
 8007db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007db6:	e012      	b.n	8007dde <UART_SetConfig+0x27e>
 8007db8:	2302      	movs	r3, #2
 8007dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dbe:	e00e      	b.n	8007dde <UART_SetConfig+0x27e>
 8007dc0:	2304      	movs	r3, #4
 8007dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dc6:	e00a      	b.n	8007dde <UART_SetConfig+0x27e>
 8007dc8:	2308      	movs	r3, #8
 8007dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dce:	e006      	b.n	8007dde <UART_SetConfig+0x27e>
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dd6:	e002      	b.n	8007dde <UART_SetConfig+0x27e>
 8007dd8:	2310      	movs	r3, #16
 8007dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a17      	ldr	r2, [pc, #92]	; (8007e40 <UART_SetConfig+0x2e0>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	f040 80a8 	bne.w	8007f3a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dee:	2b08      	cmp	r3, #8
 8007df0:	d834      	bhi.n	8007e5c <UART_SetConfig+0x2fc>
 8007df2:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <UART_SetConfig+0x298>)
 8007df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df8:	08007e1d 	.word	0x08007e1d
 8007dfc:	08007e5d 	.word	0x08007e5d
 8007e00:	08007e25 	.word	0x08007e25
 8007e04:	08007e5d 	.word	0x08007e5d
 8007e08:	08007e2b 	.word	0x08007e2b
 8007e0c:	08007e5d 	.word	0x08007e5d
 8007e10:	08007e5d 	.word	0x08007e5d
 8007e14:	08007e5d 	.word	0x08007e5d
 8007e18:	08007e33 	.word	0x08007e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e1c:	f7fe fc2e 	bl	800667c <HAL_RCC_GetPCLK1Freq>
 8007e20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e22:	e021      	b.n	8007e68 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e24:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <UART_SetConfig+0x2f8>)
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e28:	e01e      	b.n	8007e68 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e2a:	f7fe fbb9 	bl	80065a0 <HAL_RCC_GetSysClockFreq>
 8007e2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e30:	e01a      	b.n	8007e68 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e38:	e016      	b.n	8007e68 <UART_SetConfig+0x308>
 8007e3a:	bf00      	nop
 8007e3c:	cfff69f3 	.word	0xcfff69f3
 8007e40:	40008000 	.word	0x40008000
 8007e44:	40013800 	.word	0x40013800
 8007e48:	40021000 	.word	0x40021000
 8007e4c:	40004400 	.word	0x40004400
 8007e50:	40004800 	.word	0x40004800
 8007e54:	40004c00 	.word	0x40004c00
 8007e58:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 812a 	beq.w	80080c4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e74:	4a9e      	ldr	r2, [pc, #632]	; (80080f0 <UART_SetConfig+0x590>)
 8007e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e82:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	4413      	add	r3, r2
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d305      	bcc.n	8007ea0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d903      	bls.n	8007ea8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ea6:	e10d      	b.n	80080c4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	2200      	movs	r2, #0
 8007eac:	60bb      	str	r3, [r7, #8]
 8007eae:	60fa      	str	r2, [r7, #12]
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	4a8e      	ldr	r2, [pc, #568]	; (80080f0 <UART_SetConfig+0x590>)
 8007eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	607a      	str	r2, [r7, #4]
 8007ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007eca:	f7f8 ff05 	bl	8000cd8 <__aeabi_uldivmod>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	f04f 0200 	mov.w	r2, #0
 8007eda:	f04f 0300 	mov.w	r3, #0
 8007ede:	020b      	lsls	r3, r1, #8
 8007ee0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ee4:	0202      	lsls	r2, r0, #8
 8007ee6:	6979      	ldr	r1, [r7, #20]
 8007ee8:	6849      	ldr	r1, [r1, #4]
 8007eea:	0849      	lsrs	r1, r1, #1
 8007eec:	2000      	movs	r0, #0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	eb12 0804 	adds.w	r8, r2, r4
 8007ef6:	eb43 0905 	adc.w	r9, r3, r5
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	469a      	mov	sl, r3
 8007f02:	4693      	mov	fp, r2
 8007f04:	4652      	mov	r2, sl
 8007f06:	465b      	mov	r3, fp
 8007f08:	4640      	mov	r0, r8
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	f7f8 fee4 	bl	8000cd8 <__aeabi_uldivmod>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	4613      	mov	r3, r2
 8007f16:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f1e:	d308      	bcc.n	8007f32 <UART_SetConfig+0x3d2>
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f26:	d204      	bcs.n	8007f32 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6a3a      	ldr	r2, [r7, #32]
 8007f2e:	60da      	str	r2, [r3, #12]
 8007f30:	e0c8      	b.n	80080c4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f38:	e0c4      	b.n	80080c4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f42:	d167      	bne.n	8008014 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007f44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f48:	2b08      	cmp	r3, #8
 8007f4a:	d828      	bhi.n	8007f9e <UART_SetConfig+0x43e>
 8007f4c:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <UART_SetConfig+0x3f4>)
 8007f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f52:	bf00      	nop
 8007f54:	08007f79 	.word	0x08007f79
 8007f58:	08007f81 	.word	0x08007f81
 8007f5c:	08007f89 	.word	0x08007f89
 8007f60:	08007f9f 	.word	0x08007f9f
 8007f64:	08007f8f 	.word	0x08007f8f
 8007f68:	08007f9f 	.word	0x08007f9f
 8007f6c:	08007f9f 	.word	0x08007f9f
 8007f70:	08007f9f 	.word	0x08007f9f
 8007f74:	08007f97 	.word	0x08007f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f78:	f7fe fb80 	bl	800667c <HAL_RCC_GetPCLK1Freq>
 8007f7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f7e:	e014      	b.n	8007faa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f80:	f7fe fb92 	bl	80066a8 <HAL_RCC_GetPCLK2Freq>
 8007f84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f86:	e010      	b.n	8007faa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f88:	4b5a      	ldr	r3, [pc, #360]	; (80080f4 <UART_SetConfig+0x594>)
 8007f8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f8c:	e00d      	b.n	8007faa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f8e:	f7fe fb07 	bl	80065a0 <HAL_RCC_GetSysClockFreq>
 8007f92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f94:	e009      	b.n	8007faa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f9c:	e005      	b.n	8007faa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007fa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 8089 	beq.w	80080c4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	4a4e      	ldr	r2, [pc, #312]	; (80080f0 <UART_SetConfig+0x590>)
 8007fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fc4:	005a      	lsls	r2, r3, #1
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	085b      	lsrs	r3, r3, #1
 8007fcc:	441a      	add	r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	2b0f      	cmp	r3, #15
 8007fdc:	d916      	bls.n	800800c <UART_SetConfig+0x4ac>
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fe4:	d212      	bcs.n	800800c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	f023 030f 	bic.w	r3, r3, #15
 8007fee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ff0:	6a3b      	ldr	r3, [r7, #32]
 8007ff2:	085b      	lsrs	r3, r3, #1
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	8bfb      	ldrh	r3, [r7, #30]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	8bfa      	ldrh	r2, [r7, #30]
 8008008:	60da      	str	r2, [r3, #12]
 800800a:	e05b      	b.n	80080c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008012:	e057      	b.n	80080c4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008014:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008018:	2b08      	cmp	r3, #8
 800801a:	d828      	bhi.n	800806e <UART_SetConfig+0x50e>
 800801c:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <UART_SetConfig+0x4c4>)
 800801e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008022:	bf00      	nop
 8008024:	08008049 	.word	0x08008049
 8008028:	08008051 	.word	0x08008051
 800802c:	08008059 	.word	0x08008059
 8008030:	0800806f 	.word	0x0800806f
 8008034:	0800805f 	.word	0x0800805f
 8008038:	0800806f 	.word	0x0800806f
 800803c:	0800806f 	.word	0x0800806f
 8008040:	0800806f 	.word	0x0800806f
 8008044:	08008067 	.word	0x08008067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008048:	f7fe fb18 	bl	800667c <HAL_RCC_GetPCLK1Freq>
 800804c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800804e:	e014      	b.n	800807a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008050:	f7fe fb2a 	bl	80066a8 <HAL_RCC_GetPCLK2Freq>
 8008054:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008056:	e010      	b.n	800807a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008058:	4b26      	ldr	r3, [pc, #152]	; (80080f4 <UART_SetConfig+0x594>)
 800805a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800805c:	e00d      	b.n	800807a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800805e:	f7fe fa9f 	bl	80065a0 <HAL_RCC_GetSysClockFreq>
 8008062:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008064:	e009      	b.n	800807a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800806c:	e005      	b.n	800807a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008078:	bf00      	nop
    }

    if (pclk != 0U)
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	2b00      	cmp	r3, #0
 800807e:	d021      	beq.n	80080c4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	4a1a      	ldr	r2, [pc, #104]	; (80080f0 <UART_SetConfig+0x590>)
 8008086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800808a:	461a      	mov	r2, r3
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	085b      	lsrs	r3, r3, #1
 8008098:	441a      	add	r2, r3
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	2b0f      	cmp	r3, #15
 80080a8:	d909      	bls.n	80080be <UART_SetConfig+0x55e>
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080b0:	d205      	bcs.n	80080be <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60da      	str	r2, [r3, #12]
 80080bc:	e002      	b.n	80080c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	2200      	movs	r2, #0
 80080d8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	2200      	movs	r2, #0
 80080de:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80080e0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3730      	adds	r7, #48	; 0x30
 80080e8:	46bd      	mov	sp, r7
 80080ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080ee:	bf00      	nop
 80080f0:	0800e4fc 	.word	0x0800e4fc
 80080f4:	00f42400 	.word	0x00f42400

080080f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008148:	f003 0304 	and.w	r3, r3, #4
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	f003 0310 	and.w	r3, r3, #16
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01a      	beq.n	800820e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081f6:	d10a      	bne.n	800820e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00a      	beq.n	8008230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	605a      	str	r2, [r3, #4]
  }
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af02      	add	r7, sp, #8
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800824c:	f7fa fb64 	bl	8002918 <HAL_GetTick>
 8008250:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0308 	and.w	r3, r3, #8
 800825c:	2b08      	cmp	r3, #8
 800825e:	d10e      	bne.n	800827e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f82f 	bl	80082d2 <UART_WaitOnFlagUntilTimeout>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e025      	b.n	80082ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b04      	cmp	r3, #4
 800828a:	d10e      	bne.n	80082aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800828c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f819 	bl	80082d2 <UART_WaitOnFlagUntilTimeout>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e00f      	b.n	80082ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2220      	movs	r2, #32
 80082ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b09c      	sub	sp, #112	; 0x70
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	603b      	str	r3, [r7, #0]
 80082de:	4613      	mov	r3, r2
 80082e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e2:	e0a9      	b.n	8008438 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ea:	f000 80a5 	beq.w	8008438 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ee:	f7fa fb13 	bl	8002918 <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d302      	bcc.n	8008304 <UART_WaitOnFlagUntilTimeout+0x32>
 80082fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008300:	2b00      	cmp	r3, #0
 8008302:	d140      	bne.n	8008386 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800830c:	e853 3f00 	ldrex	r3, [r3]
 8008310:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008314:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008318:	667b      	str	r3, [r7, #100]	; 0x64
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008322:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008324:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008326:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008328:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800832a:	e841 2300 	strex	r3, r2, [r1]
 800832e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1e6      	bne.n	8008304 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3308      	adds	r3, #8
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008340:	e853 3f00 	ldrex	r3, [r3]
 8008344:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	f023 0301 	bic.w	r3, r3, #1
 800834c:	663b      	str	r3, [r7, #96]	; 0x60
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3308      	adds	r3, #8
 8008354:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008356:	64ba      	str	r2, [r7, #72]	; 0x48
 8008358:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800835c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e5      	bne.n	8008336 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2220      	movs	r2, #32
 800836e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2220      	movs	r2, #32
 8008376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e069      	b.n	800845a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d051      	beq.n	8008438 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	69db      	ldr	r3, [r3, #28]
 800839a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800839e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083a2:	d149      	bne.n	8008438 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083cc:	637b      	str	r3, [r7, #52]	; 0x34
 80083ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e6      	bne.n	80083ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3308      	adds	r3, #8
 80083e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	e853 3f00 	ldrex	r3, [r3]
 80083ee:	613b      	str	r3, [r7, #16]
   return(result);
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	f023 0301 	bic.w	r3, r3, #1
 80083f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3308      	adds	r3, #8
 80083fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008400:	623a      	str	r2, [r7, #32]
 8008402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008404:	69f9      	ldr	r1, [r7, #28]
 8008406:	6a3a      	ldr	r2, [r7, #32]
 8008408:	e841 2300 	strex	r3, r2, [r1]
 800840c:	61bb      	str	r3, [r7, #24]
   return(result);
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e5      	bne.n	80083e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2220      	movs	r2, #32
 8008418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2220      	movs	r2, #32
 8008420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2220      	movs	r2, #32
 8008428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e010      	b.n	800845a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	69da      	ldr	r2, [r3, #28]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	4013      	ands	r3, r2
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	429a      	cmp	r2, r3
 8008446:	bf0c      	ite	eq
 8008448:	2301      	moveq	r3, #1
 800844a:	2300      	movne	r3, #0
 800844c:	b2db      	uxtb	r3, r3
 800844e:	461a      	mov	r2, r3
 8008450:	79fb      	ldrb	r3, [r7, #7]
 8008452:	429a      	cmp	r2, r3
 8008454:	f43f af46 	beq.w	80082e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3770      	adds	r7, #112	; 0x70
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008470:	2b01      	cmp	r3, #1
 8008472:	d101      	bne.n	8008478 <HAL_UARTEx_DisableFifoMode+0x16>
 8008474:	2302      	movs	r3, #2
 8008476:	e027      	b.n	80084c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2224      	movs	r2, #36	; 0x24
 8008484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0201 	bic.w	r2, r2, #1
 800849e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80084a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d101      	bne.n	80084ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084e8:	2302      	movs	r3, #2
 80084ea:	e02d      	b.n	8008548 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2224      	movs	r2, #36	; 0x24
 80084f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0201 	bic.w	r2, r2, #1
 8008512:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f84f 	bl	80085cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2220      	movs	r2, #32
 800853a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008564:	2302      	movs	r3, #2
 8008566:	e02d      	b.n	80085c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2224      	movs	r2, #36	; 0x24
 8008574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0201 	bic.w	r2, r2, #1
 800858e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f811 	bl	80085cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2220      	movs	r2, #32
 80085b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d108      	bne.n	80085ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085ec:	e031      	b.n	8008652 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085ee:	2308      	movs	r3, #8
 80085f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085f2:	2308      	movs	r3, #8
 80085f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	0e5b      	lsrs	r3, r3, #25
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	f003 0307 	and.w	r3, r3, #7
 8008604:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	0f5b      	lsrs	r3, r3, #29
 800860e:	b2db      	uxtb	r3, r3
 8008610:	f003 0307 	and.w	r3, r3, #7
 8008614:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	7b3a      	ldrb	r2, [r7, #12]
 800861a:	4911      	ldr	r1, [pc, #68]	; (8008660 <UARTEx_SetNbDataToProcess+0x94>)
 800861c:	5c8a      	ldrb	r2, [r1, r2]
 800861e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008622:	7b3a      	ldrb	r2, [r7, #12]
 8008624:	490f      	ldr	r1, [pc, #60]	; (8008664 <UARTEx_SetNbDataToProcess+0x98>)
 8008626:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008628:	fb93 f3f2 	sdiv	r3, r3, r2
 800862c:	b29a      	uxth	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	7b7a      	ldrb	r2, [r7, #13]
 8008638:	4909      	ldr	r1, [pc, #36]	; (8008660 <UARTEx_SetNbDataToProcess+0x94>)
 800863a:	5c8a      	ldrb	r2, [r1, r2]
 800863c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008640:	7b7a      	ldrb	r2, [r7, #13]
 8008642:	4908      	ldr	r1, [pc, #32]	; (8008664 <UARTEx_SetNbDataToProcess+0x98>)
 8008644:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008646:	fb93 f3f2 	sdiv	r3, r3, r2
 800864a:	b29a      	uxth	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008652:	bf00      	nop
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	0800e514 	.word	0x0800e514
 8008664:	0800e51c 	.word	0x0800e51c

08008668 <__errno>:
 8008668:	4b01      	ldr	r3, [pc, #4]	; (8008670 <__errno+0x8>)
 800866a:	6818      	ldr	r0, [r3, #0]
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	2000001c 	.word	0x2000001c

08008674 <__libc_init_array>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	4d0d      	ldr	r5, [pc, #52]	; (80086ac <__libc_init_array+0x38>)
 8008678:	4c0d      	ldr	r4, [pc, #52]	; (80086b0 <__libc_init_array+0x3c>)
 800867a:	1b64      	subs	r4, r4, r5
 800867c:	10a4      	asrs	r4, r4, #2
 800867e:	2600      	movs	r6, #0
 8008680:	42a6      	cmp	r6, r4
 8008682:	d109      	bne.n	8008698 <__libc_init_array+0x24>
 8008684:	4d0b      	ldr	r5, [pc, #44]	; (80086b4 <__libc_init_array+0x40>)
 8008686:	4c0c      	ldr	r4, [pc, #48]	; (80086b8 <__libc_init_array+0x44>)
 8008688:	f004 fc92 	bl	800cfb0 <_init>
 800868c:	1b64      	subs	r4, r4, r5
 800868e:	10a4      	asrs	r4, r4, #2
 8008690:	2600      	movs	r6, #0
 8008692:	42a6      	cmp	r6, r4
 8008694:	d105      	bne.n	80086a2 <__libc_init_array+0x2e>
 8008696:	bd70      	pop	{r4, r5, r6, pc}
 8008698:	f855 3b04 	ldr.w	r3, [r5], #4
 800869c:	4798      	blx	r3
 800869e:	3601      	adds	r6, #1
 80086a0:	e7ee      	b.n	8008680 <__libc_init_array+0xc>
 80086a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a6:	4798      	blx	r3
 80086a8:	3601      	adds	r6, #1
 80086aa:	e7f2      	b.n	8008692 <__libc_init_array+0x1e>
 80086ac:	0800e9d4 	.word	0x0800e9d4
 80086b0:	0800e9d4 	.word	0x0800e9d4
 80086b4:	0800e9d4 	.word	0x0800e9d4
 80086b8:	0800e9d8 	.word	0x0800e9d8

080086bc <memset>:
 80086bc:	4402      	add	r2, r0
 80086be:	4603      	mov	r3, r0
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d100      	bne.n	80086c6 <memset+0xa>
 80086c4:	4770      	bx	lr
 80086c6:	f803 1b01 	strb.w	r1, [r3], #1
 80086ca:	e7f9      	b.n	80086c0 <memset+0x4>

080086cc <__cvt>:
 80086cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	ec55 4b10 	vmov	r4, r5, d0
 80086d4:	2d00      	cmp	r5, #0
 80086d6:	460e      	mov	r6, r1
 80086d8:	4619      	mov	r1, r3
 80086da:	462b      	mov	r3, r5
 80086dc:	bfbb      	ittet	lt
 80086de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80086e2:	461d      	movlt	r5, r3
 80086e4:	2300      	movge	r3, #0
 80086e6:	232d      	movlt	r3, #45	; 0x2d
 80086e8:	700b      	strb	r3, [r1, #0]
 80086ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80086f0:	4691      	mov	r9, r2
 80086f2:	f023 0820 	bic.w	r8, r3, #32
 80086f6:	bfbc      	itt	lt
 80086f8:	4622      	movlt	r2, r4
 80086fa:	4614      	movlt	r4, r2
 80086fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008700:	d005      	beq.n	800870e <__cvt+0x42>
 8008702:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008706:	d100      	bne.n	800870a <__cvt+0x3e>
 8008708:	3601      	adds	r6, #1
 800870a:	2102      	movs	r1, #2
 800870c:	e000      	b.n	8008710 <__cvt+0x44>
 800870e:	2103      	movs	r1, #3
 8008710:	ab03      	add	r3, sp, #12
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	ab02      	add	r3, sp, #8
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	ec45 4b10 	vmov	d0, r4, r5
 800871c:	4653      	mov	r3, sl
 800871e:	4632      	mov	r2, r6
 8008720:	f001 fdae 	bl	800a280 <_dtoa_r>
 8008724:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008728:	4607      	mov	r7, r0
 800872a:	d102      	bne.n	8008732 <__cvt+0x66>
 800872c:	f019 0f01 	tst.w	r9, #1
 8008730:	d022      	beq.n	8008778 <__cvt+0xac>
 8008732:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008736:	eb07 0906 	add.w	r9, r7, r6
 800873a:	d110      	bne.n	800875e <__cvt+0x92>
 800873c:	783b      	ldrb	r3, [r7, #0]
 800873e:	2b30      	cmp	r3, #48	; 0x30
 8008740:	d10a      	bne.n	8008758 <__cvt+0x8c>
 8008742:	2200      	movs	r2, #0
 8008744:	2300      	movs	r3, #0
 8008746:	4620      	mov	r0, r4
 8008748:	4629      	mov	r1, r5
 800874a:	f7f8 f9e5 	bl	8000b18 <__aeabi_dcmpeq>
 800874e:	b918      	cbnz	r0, 8008758 <__cvt+0x8c>
 8008750:	f1c6 0601 	rsb	r6, r6, #1
 8008754:	f8ca 6000 	str.w	r6, [sl]
 8008758:	f8da 3000 	ldr.w	r3, [sl]
 800875c:	4499      	add	r9, r3
 800875e:	2200      	movs	r2, #0
 8008760:	2300      	movs	r3, #0
 8008762:	4620      	mov	r0, r4
 8008764:	4629      	mov	r1, r5
 8008766:	f7f8 f9d7 	bl	8000b18 <__aeabi_dcmpeq>
 800876a:	b108      	cbz	r0, 8008770 <__cvt+0xa4>
 800876c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008770:	2230      	movs	r2, #48	; 0x30
 8008772:	9b03      	ldr	r3, [sp, #12]
 8008774:	454b      	cmp	r3, r9
 8008776:	d307      	bcc.n	8008788 <__cvt+0xbc>
 8008778:	9b03      	ldr	r3, [sp, #12]
 800877a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800877c:	1bdb      	subs	r3, r3, r7
 800877e:	4638      	mov	r0, r7
 8008780:	6013      	str	r3, [r2, #0]
 8008782:	b004      	add	sp, #16
 8008784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008788:	1c59      	adds	r1, r3, #1
 800878a:	9103      	str	r1, [sp, #12]
 800878c:	701a      	strb	r2, [r3, #0]
 800878e:	e7f0      	b.n	8008772 <__cvt+0xa6>

08008790 <__exponent>:
 8008790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008792:	4603      	mov	r3, r0
 8008794:	2900      	cmp	r1, #0
 8008796:	bfb8      	it	lt
 8008798:	4249      	neglt	r1, r1
 800879a:	f803 2b02 	strb.w	r2, [r3], #2
 800879e:	bfb4      	ite	lt
 80087a0:	222d      	movlt	r2, #45	; 0x2d
 80087a2:	222b      	movge	r2, #43	; 0x2b
 80087a4:	2909      	cmp	r1, #9
 80087a6:	7042      	strb	r2, [r0, #1]
 80087a8:	dd2a      	ble.n	8008800 <__exponent+0x70>
 80087aa:	f10d 0407 	add.w	r4, sp, #7
 80087ae:	46a4      	mov	ip, r4
 80087b0:	270a      	movs	r7, #10
 80087b2:	46a6      	mov	lr, r4
 80087b4:	460a      	mov	r2, r1
 80087b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80087ba:	fb07 1516 	mls	r5, r7, r6, r1
 80087be:	3530      	adds	r5, #48	; 0x30
 80087c0:	2a63      	cmp	r2, #99	; 0x63
 80087c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80087c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80087ca:	4631      	mov	r1, r6
 80087cc:	dcf1      	bgt.n	80087b2 <__exponent+0x22>
 80087ce:	3130      	adds	r1, #48	; 0x30
 80087d0:	f1ae 0502 	sub.w	r5, lr, #2
 80087d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80087d8:	1c44      	adds	r4, r0, #1
 80087da:	4629      	mov	r1, r5
 80087dc:	4561      	cmp	r1, ip
 80087de:	d30a      	bcc.n	80087f6 <__exponent+0x66>
 80087e0:	f10d 0209 	add.w	r2, sp, #9
 80087e4:	eba2 020e 	sub.w	r2, r2, lr
 80087e8:	4565      	cmp	r5, ip
 80087ea:	bf88      	it	hi
 80087ec:	2200      	movhi	r2, #0
 80087ee:	4413      	add	r3, r2
 80087f0:	1a18      	subs	r0, r3, r0
 80087f2:	b003      	add	sp, #12
 80087f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80087fe:	e7ed      	b.n	80087dc <__exponent+0x4c>
 8008800:	2330      	movs	r3, #48	; 0x30
 8008802:	3130      	adds	r1, #48	; 0x30
 8008804:	7083      	strb	r3, [r0, #2]
 8008806:	70c1      	strb	r1, [r0, #3]
 8008808:	1d03      	adds	r3, r0, #4
 800880a:	e7f1      	b.n	80087f0 <__exponent+0x60>

0800880c <_printf_float>:
 800880c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	ed2d 8b02 	vpush	{d8}
 8008814:	b08d      	sub	sp, #52	; 0x34
 8008816:	460c      	mov	r4, r1
 8008818:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800881c:	4616      	mov	r6, r2
 800881e:	461f      	mov	r7, r3
 8008820:	4605      	mov	r5, r0
 8008822:	f002 fe8b 	bl	800b53c <_localeconv_r>
 8008826:	f8d0 a000 	ldr.w	sl, [r0]
 800882a:	4650      	mov	r0, sl
 800882c:	f7f7 fcf8 	bl	8000220 <strlen>
 8008830:	2300      	movs	r3, #0
 8008832:	930a      	str	r3, [sp, #40]	; 0x28
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	9305      	str	r3, [sp, #20]
 8008838:	f8d8 3000 	ldr.w	r3, [r8]
 800883c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008840:	3307      	adds	r3, #7
 8008842:	f023 0307 	bic.w	r3, r3, #7
 8008846:	f103 0208 	add.w	r2, r3, #8
 800884a:	f8c8 2000 	str.w	r2, [r8]
 800884e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008852:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008856:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800885a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800885e:	9307      	str	r3, [sp, #28]
 8008860:	f8cd 8018 	str.w	r8, [sp, #24]
 8008864:	ee08 0a10 	vmov	s16, r0
 8008868:	4b9f      	ldr	r3, [pc, #636]	; (8008ae8 <_printf_float+0x2dc>)
 800886a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800886e:	f04f 32ff 	mov.w	r2, #4294967295
 8008872:	f7f8 f983 	bl	8000b7c <__aeabi_dcmpun>
 8008876:	bb88      	cbnz	r0, 80088dc <_printf_float+0xd0>
 8008878:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800887c:	4b9a      	ldr	r3, [pc, #616]	; (8008ae8 <_printf_float+0x2dc>)
 800887e:	f04f 32ff 	mov.w	r2, #4294967295
 8008882:	f7f8 f95d 	bl	8000b40 <__aeabi_dcmple>
 8008886:	bb48      	cbnz	r0, 80088dc <_printf_float+0xd0>
 8008888:	2200      	movs	r2, #0
 800888a:	2300      	movs	r3, #0
 800888c:	4640      	mov	r0, r8
 800888e:	4649      	mov	r1, r9
 8008890:	f7f8 f94c 	bl	8000b2c <__aeabi_dcmplt>
 8008894:	b110      	cbz	r0, 800889c <_printf_float+0x90>
 8008896:	232d      	movs	r3, #45	; 0x2d
 8008898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800889c:	4b93      	ldr	r3, [pc, #588]	; (8008aec <_printf_float+0x2e0>)
 800889e:	4894      	ldr	r0, [pc, #592]	; (8008af0 <_printf_float+0x2e4>)
 80088a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80088a4:	bf94      	ite	ls
 80088a6:	4698      	movls	r8, r3
 80088a8:	4680      	movhi	r8, r0
 80088aa:	2303      	movs	r3, #3
 80088ac:	6123      	str	r3, [r4, #16]
 80088ae:	9b05      	ldr	r3, [sp, #20]
 80088b0:	f023 0204 	bic.w	r2, r3, #4
 80088b4:	6022      	str	r2, [r4, #0]
 80088b6:	f04f 0900 	mov.w	r9, #0
 80088ba:	9700      	str	r7, [sp, #0]
 80088bc:	4633      	mov	r3, r6
 80088be:	aa0b      	add	r2, sp, #44	; 0x2c
 80088c0:	4621      	mov	r1, r4
 80088c2:	4628      	mov	r0, r5
 80088c4:	f000 f9d8 	bl	8008c78 <_printf_common>
 80088c8:	3001      	adds	r0, #1
 80088ca:	f040 8090 	bne.w	80089ee <_printf_float+0x1e2>
 80088ce:	f04f 30ff 	mov.w	r0, #4294967295
 80088d2:	b00d      	add	sp, #52	; 0x34
 80088d4:	ecbd 8b02 	vpop	{d8}
 80088d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088dc:	4642      	mov	r2, r8
 80088de:	464b      	mov	r3, r9
 80088e0:	4640      	mov	r0, r8
 80088e2:	4649      	mov	r1, r9
 80088e4:	f7f8 f94a 	bl	8000b7c <__aeabi_dcmpun>
 80088e8:	b140      	cbz	r0, 80088fc <_printf_float+0xf0>
 80088ea:	464b      	mov	r3, r9
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	bfbc      	itt	lt
 80088f0:	232d      	movlt	r3, #45	; 0x2d
 80088f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80088f6:	487f      	ldr	r0, [pc, #508]	; (8008af4 <_printf_float+0x2e8>)
 80088f8:	4b7f      	ldr	r3, [pc, #508]	; (8008af8 <_printf_float+0x2ec>)
 80088fa:	e7d1      	b.n	80088a0 <_printf_float+0x94>
 80088fc:	6863      	ldr	r3, [r4, #4]
 80088fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008902:	9206      	str	r2, [sp, #24]
 8008904:	1c5a      	adds	r2, r3, #1
 8008906:	d13f      	bne.n	8008988 <_printf_float+0x17c>
 8008908:	2306      	movs	r3, #6
 800890a:	6063      	str	r3, [r4, #4]
 800890c:	9b05      	ldr	r3, [sp, #20]
 800890e:	6861      	ldr	r1, [r4, #4]
 8008910:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008914:	2300      	movs	r3, #0
 8008916:	9303      	str	r3, [sp, #12]
 8008918:	ab0a      	add	r3, sp, #40	; 0x28
 800891a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800891e:	ab09      	add	r3, sp, #36	; 0x24
 8008920:	ec49 8b10 	vmov	d0, r8, r9
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	6022      	str	r2, [r4, #0]
 8008928:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800892c:	4628      	mov	r0, r5
 800892e:	f7ff fecd 	bl	80086cc <__cvt>
 8008932:	9b06      	ldr	r3, [sp, #24]
 8008934:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008936:	2b47      	cmp	r3, #71	; 0x47
 8008938:	4680      	mov	r8, r0
 800893a:	d108      	bne.n	800894e <_printf_float+0x142>
 800893c:	1cc8      	adds	r0, r1, #3
 800893e:	db02      	blt.n	8008946 <_printf_float+0x13a>
 8008940:	6863      	ldr	r3, [r4, #4]
 8008942:	4299      	cmp	r1, r3
 8008944:	dd41      	ble.n	80089ca <_printf_float+0x1be>
 8008946:	f1ab 0b02 	sub.w	fp, fp, #2
 800894a:	fa5f fb8b 	uxtb.w	fp, fp
 800894e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008952:	d820      	bhi.n	8008996 <_printf_float+0x18a>
 8008954:	3901      	subs	r1, #1
 8008956:	465a      	mov	r2, fp
 8008958:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800895c:	9109      	str	r1, [sp, #36]	; 0x24
 800895e:	f7ff ff17 	bl	8008790 <__exponent>
 8008962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008964:	1813      	adds	r3, r2, r0
 8008966:	2a01      	cmp	r2, #1
 8008968:	4681      	mov	r9, r0
 800896a:	6123      	str	r3, [r4, #16]
 800896c:	dc02      	bgt.n	8008974 <_printf_float+0x168>
 800896e:	6822      	ldr	r2, [r4, #0]
 8008970:	07d2      	lsls	r2, r2, #31
 8008972:	d501      	bpl.n	8008978 <_printf_float+0x16c>
 8008974:	3301      	adds	r3, #1
 8008976:	6123      	str	r3, [r4, #16]
 8008978:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800897c:	2b00      	cmp	r3, #0
 800897e:	d09c      	beq.n	80088ba <_printf_float+0xae>
 8008980:	232d      	movs	r3, #45	; 0x2d
 8008982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008986:	e798      	b.n	80088ba <_printf_float+0xae>
 8008988:	9a06      	ldr	r2, [sp, #24]
 800898a:	2a47      	cmp	r2, #71	; 0x47
 800898c:	d1be      	bne.n	800890c <_printf_float+0x100>
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1bc      	bne.n	800890c <_printf_float+0x100>
 8008992:	2301      	movs	r3, #1
 8008994:	e7b9      	b.n	800890a <_printf_float+0xfe>
 8008996:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800899a:	d118      	bne.n	80089ce <_printf_float+0x1c2>
 800899c:	2900      	cmp	r1, #0
 800899e:	6863      	ldr	r3, [r4, #4]
 80089a0:	dd0b      	ble.n	80089ba <_printf_float+0x1ae>
 80089a2:	6121      	str	r1, [r4, #16]
 80089a4:	b913      	cbnz	r3, 80089ac <_printf_float+0x1a0>
 80089a6:	6822      	ldr	r2, [r4, #0]
 80089a8:	07d0      	lsls	r0, r2, #31
 80089aa:	d502      	bpl.n	80089b2 <_printf_float+0x1a6>
 80089ac:	3301      	adds	r3, #1
 80089ae:	440b      	add	r3, r1
 80089b0:	6123      	str	r3, [r4, #16]
 80089b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80089b4:	f04f 0900 	mov.w	r9, #0
 80089b8:	e7de      	b.n	8008978 <_printf_float+0x16c>
 80089ba:	b913      	cbnz	r3, 80089c2 <_printf_float+0x1b6>
 80089bc:	6822      	ldr	r2, [r4, #0]
 80089be:	07d2      	lsls	r2, r2, #31
 80089c0:	d501      	bpl.n	80089c6 <_printf_float+0x1ba>
 80089c2:	3302      	adds	r3, #2
 80089c4:	e7f4      	b.n	80089b0 <_printf_float+0x1a4>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e7f2      	b.n	80089b0 <_printf_float+0x1a4>
 80089ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80089ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d0:	4299      	cmp	r1, r3
 80089d2:	db05      	blt.n	80089e0 <_printf_float+0x1d4>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	6121      	str	r1, [r4, #16]
 80089d8:	07d8      	lsls	r0, r3, #31
 80089da:	d5ea      	bpl.n	80089b2 <_printf_float+0x1a6>
 80089dc:	1c4b      	adds	r3, r1, #1
 80089de:	e7e7      	b.n	80089b0 <_printf_float+0x1a4>
 80089e0:	2900      	cmp	r1, #0
 80089e2:	bfd4      	ite	le
 80089e4:	f1c1 0202 	rsble	r2, r1, #2
 80089e8:	2201      	movgt	r2, #1
 80089ea:	4413      	add	r3, r2
 80089ec:	e7e0      	b.n	80089b0 <_printf_float+0x1a4>
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	055a      	lsls	r2, r3, #21
 80089f2:	d407      	bmi.n	8008a04 <_printf_float+0x1f8>
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	4642      	mov	r2, r8
 80089f8:	4631      	mov	r1, r6
 80089fa:	4628      	mov	r0, r5
 80089fc:	47b8      	blx	r7
 80089fe:	3001      	adds	r0, #1
 8008a00:	d12c      	bne.n	8008a5c <_printf_float+0x250>
 8008a02:	e764      	b.n	80088ce <_printf_float+0xc2>
 8008a04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a08:	f240 80e0 	bls.w	8008bcc <_printf_float+0x3c0>
 8008a0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a10:	2200      	movs	r2, #0
 8008a12:	2300      	movs	r3, #0
 8008a14:	f7f8 f880 	bl	8000b18 <__aeabi_dcmpeq>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d034      	beq.n	8008a86 <_printf_float+0x27a>
 8008a1c:	4a37      	ldr	r2, [pc, #220]	; (8008afc <_printf_float+0x2f0>)
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	f43f af51 	beq.w	80088ce <_printf_float+0xc2>
 8008a2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a30:	429a      	cmp	r2, r3
 8008a32:	db02      	blt.n	8008a3a <_printf_float+0x22e>
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	07d8      	lsls	r0, r3, #31
 8008a38:	d510      	bpl.n	8008a5c <_printf_float+0x250>
 8008a3a:	ee18 3a10 	vmov	r3, s16
 8008a3e:	4652      	mov	r2, sl
 8008a40:	4631      	mov	r1, r6
 8008a42:	4628      	mov	r0, r5
 8008a44:	47b8      	blx	r7
 8008a46:	3001      	adds	r0, #1
 8008a48:	f43f af41 	beq.w	80088ce <_printf_float+0xc2>
 8008a4c:	f04f 0800 	mov.w	r8, #0
 8008a50:	f104 091a 	add.w	r9, r4, #26
 8008a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a56:	3b01      	subs	r3, #1
 8008a58:	4543      	cmp	r3, r8
 8008a5a:	dc09      	bgt.n	8008a70 <_printf_float+0x264>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	079b      	lsls	r3, r3, #30
 8008a60:	f100 8105 	bmi.w	8008c6e <_printf_float+0x462>
 8008a64:	68e0      	ldr	r0, [r4, #12]
 8008a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a68:	4298      	cmp	r0, r3
 8008a6a:	bfb8      	it	lt
 8008a6c:	4618      	movlt	r0, r3
 8008a6e:	e730      	b.n	80088d2 <_printf_float+0xc6>
 8008a70:	2301      	movs	r3, #1
 8008a72:	464a      	mov	r2, r9
 8008a74:	4631      	mov	r1, r6
 8008a76:	4628      	mov	r0, r5
 8008a78:	47b8      	blx	r7
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	f43f af27 	beq.w	80088ce <_printf_float+0xc2>
 8008a80:	f108 0801 	add.w	r8, r8, #1
 8008a84:	e7e6      	b.n	8008a54 <_printf_float+0x248>
 8008a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	dc39      	bgt.n	8008b00 <_printf_float+0x2f4>
 8008a8c:	4a1b      	ldr	r2, [pc, #108]	; (8008afc <_printf_float+0x2f0>)
 8008a8e:	2301      	movs	r3, #1
 8008a90:	4631      	mov	r1, r6
 8008a92:	4628      	mov	r0, r5
 8008a94:	47b8      	blx	r7
 8008a96:	3001      	adds	r0, #1
 8008a98:	f43f af19 	beq.w	80088ce <_printf_float+0xc2>
 8008a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	d102      	bne.n	8008aaa <_printf_float+0x29e>
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	07d9      	lsls	r1, r3, #31
 8008aa8:	d5d8      	bpl.n	8008a5c <_printf_float+0x250>
 8008aaa:	ee18 3a10 	vmov	r3, s16
 8008aae:	4652      	mov	r2, sl
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	47b8      	blx	r7
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	f43f af09 	beq.w	80088ce <_printf_float+0xc2>
 8008abc:	f04f 0900 	mov.w	r9, #0
 8008ac0:	f104 0a1a 	add.w	sl, r4, #26
 8008ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac6:	425b      	negs	r3, r3
 8008ac8:	454b      	cmp	r3, r9
 8008aca:	dc01      	bgt.n	8008ad0 <_printf_float+0x2c4>
 8008acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ace:	e792      	b.n	80089f6 <_printf_float+0x1ea>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	4652      	mov	r2, sl
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b8      	blx	r7
 8008ada:	3001      	adds	r0, #1
 8008adc:	f43f aef7 	beq.w	80088ce <_printf_float+0xc2>
 8008ae0:	f109 0901 	add.w	r9, r9, #1
 8008ae4:	e7ee      	b.n	8008ac4 <_printf_float+0x2b8>
 8008ae6:	bf00      	nop
 8008ae8:	7fefffff 	.word	0x7fefffff
 8008aec:	0800e528 	.word	0x0800e528
 8008af0:	0800e52c 	.word	0x0800e52c
 8008af4:	0800e534 	.word	0x0800e534
 8008af8:	0800e530 	.word	0x0800e530
 8008afc:	0800e538 	.word	0x0800e538
 8008b00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b04:	429a      	cmp	r2, r3
 8008b06:	bfa8      	it	ge
 8008b08:	461a      	movge	r2, r3
 8008b0a:	2a00      	cmp	r2, #0
 8008b0c:	4691      	mov	r9, r2
 8008b0e:	dc37      	bgt.n	8008b80 <_printf_float+0x374>
 8008b10:	f04f 0b00 	mov.w	fp, #0
 8008b14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b18:	f104 021a 	add.w	r2, r4, #26
 8008b1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b1e:	9305      	str	r3, [sp, #20]
 8008b20:	eba3 0309 	sub.w	r3, r3, r9
 8008b24:	455b      	cmp	r3, fp
 8008b26:	dc33      	bgt.n	8008b90 <_printf_float+0x384>
 8008b28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	db3b      	blt.n	8008ba8 <_printf_float+0x39c>
 8008b30:	6823      	ldr	r3, [r4, #0]
 8008b32:	07da      	lsls	r2, r3, #31
 8008b34:	d438      	bmi.n	8008ba8 <_printf_float+0x39c>
 8008b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b38:	9a05      	ldr	r2, [sp, #20]
 8008b3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b3c:	1a9a      	subs	r2, r3, r2
 8008b3e:	eba3 0901 	sub.w	r9, r3, r1
 8008b42:	4591      	cmp	r9, r2
 8008b44:	bfa8      	it	ge
 8008b46:	4691      	movge	r9, r2
 8008b48:	f1b9 0f00 	cmp.w	r9, #0
 8008b4c:	dc35      	bgt.n	8008bba <_printf_float+0x3ae>
 8008b4e:	f04f 0800 	mov.w	r8, #0
 8008b52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b56:	f104 0a1a 	add.w	sl, r4, #26
 8008b5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b5e:	1a9b      	subs	r3, r3, r2
 8008b60:	eba3 0309 	sub.w	r3, r3, r9
 8008b64:	4543      	cmp	r3, r8
 8008b66:	f77f af79 	ble.w	8008a5c <_printf_float+0x250>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	4652      	mov	r2, sl
 8008b6e:	4631      	mov	r1, r6
 8008b70:	4628      	mov	r0, r5
 8008b72:	47b8      	blx	r7
 8008b74:	3001      	adds	r0, #1
 8008b76:	f43f aeaa 	beq.w	80088ce <_printf_float+0xc2>
 8008b7a:	f108 0801 	add.w	r8, r8, #1
 8008b7e:	e7ec      	b.n	8008b5a <_printf_float+0x34e>
 8008b80:	4613      	mov	r3, r2
 8008b82:	4631      	mov	r1, r6
 8008b84:	4642      	mov	r2, r8
 8008b86:	4628      	mov	r0, r5
 8008b88:	47b8      	blx	r7
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	d1c0      	bne.n	8008b10 <_printf_float+0x304>
 8008b8e:	e69e      	b.n	80088ce <_printf_float+0xc2>
 8008b90:	2301      	movs	r3, #1
 8008b92:	4631      	mov	r1, r6
 8008b94:	4628      	mov	r0, r5
 8008b96:	9205      	str	r2, [sp, #20]
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f ae97 	beq.w	80088ce <_printf_float+0xc2>
 8008ba0:	9a05      	ldr	r2, [sp, #20]
 8008ba2:	f10b 0b01 	add.w	fp, fp, #1
 8008ba6:	e7b9      	b.n	8008b1c <_printf_float+0x310>
 8008ba8:	ee18 3a10 	vmov	r3, s16
 8008bac:	4652      	mov	r2, sl
 8008bae:	4631      	mov	r1, r6
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	47b8      	blx	r7
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d1be      	bne.n	8008b36 <_printf_float+0x32a>
 8008bb8:	e689      	b.n	80088ce <_printf_float+0xc2>
 8008bba:	9a05      	ldr	r2, [sp, #20]
 8008bbc:	464b      	mov	r3, r9
 8008bbe:	4442      	add	r2, r8
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	47b8      	blx	r7
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	d1c1      	bne.n	8008b4e <_printf_float+0x342>
 8008bca:	e680      	b.n	80088ce <_printf_float+0xc2>
 8008bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bce:	2a01      	cmp	r2, #1
 8008bd0:	dc01      	bgt.n	8008bd6 <_printf_float+0x3ca>
 8008bd2:	07db      	lsls	r3, r3, #31
 8008bd4:	d538      	bpl.n	8008c48 <_printf_float+0x43c>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4642      	mov	r2, r8
 8008bda:	4631      	mov	r1, r6
 8008bdc:	4628      	mov	r0, r5
 8008bde:	47b8      	blx	r7
 8008be0:	3001      	adds	r0, #1
 8008be2:	f43f ae74 	beq.w	80088ce <_printf_float+0xc2>
 8008be6:	ee18 3a10 	vmov	r3, s16
 8008bea:	4652      	mov	r2, sl
 8008bec:	4631      	mov	r1, r6
 8008bee:	4628      	mov	r0, r5
 8008bf0:	47b8      	blx	r7
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	f43f ae6b 	beq.w	80088ce <_printf_float+0xc2>
 8008bf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f7f7 ff8a 	bl	8000b18 <__aeabi_dcmpeq>
 8008c04:	b9d8      	cbnz	r0, 8008c3e <_printf_float+0x432>
 8008c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c08:	f108 0201 	add.w	r2, r8, #1
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	4631      	mov	r1, r6
 8008c10:	4628      	mov	r0, r5
 8008c12:	47b8      	blx	r7
 8008c14:	3001      	adds	r0, #1
 8008c16:	d10e      	bne.n	8008c36 <_printf_float+0x42a>
 8008c18:	e659      	b.n	80088ce <_printf_float+0xc2>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	4652      	mov	r2, sl
 8008c1e:	4631      	mov	r1, r6
 8008c20:	4628      	mov	r0, r5
 8008c22:	47b8      	blx	r7
 8008c24:	3001      	adds	r0, #1
 8008c26:	f43f ae52 	beq.w	80088ce <_printf_float+0xc2>
 8008c2a:	f108 0801 	add.w	r8, r8, #1
 8008c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c30:	3b01      	subs	r3, #1
 8008c32:	4543      	cmp	r3, r8
 8008c34:	dcf1      	bgt.n	8008c1a <_printf_float+0x40e>
 8008c36:	464b      	mov	r3, r9
 8008c38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c3c:	e6dc      	b.n	80089f8 <_printf_float+0x1ec>
 8008c3e:	f04f 0800 	mov.w	r8, #0
 8008c42:	f104 0a1a 	add.w	sl, r4, #26
 8008c46:	e7f2      	b.n	8008c2e <_printf_float+0x422>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	4642      	mov	r2, r8
 8008c4c:	e7df      	b.n	8008c0e <_printf_float+0x402>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	464a      	mov	r2, r9
 8008c52:	4631      	mov	r1, r6
 8008c54:	4628      	mov	r0, r5
 8008c56:	47b8      	blx	r7
 8008c58:	3001      	adds	r0, #1
 8008c5a:	f43f ae38 	beq.w	80088ce <_printf_float+0xc2>
 8008c5e:	f108 0801 	add.w	r8, r8, #1
 8008c62:	68e3      	ldr	r3, [r4, #12]
 8008c64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c66:	1a5b      	subs	r3, r3, r1
 8008c68:	4543      	cmp	r3, r8
 8008c6a:	dcf0      	bgt.n	8008c4e <_printf_float+0x442>
 8008c6c:	e6fa      	b.n	8008a64 <_printf_float+0x258>
 8008c6e:	f04f 0800 	mov.w	r8, #0
 8008c72:	f104 0919 	add.w	r9, r4, #25
 8008c76:	e7f4      	b.n	8008c62 <_printf_float+0x456>

08008c78 <_printf_common>:
 8008c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c7c:	4616      	mov	r6, r2
 8008c7e:	4699      	mov	r9, r3
 8008c80:	688a      	ldr	r2, [r1, #8]
 8008c82:	690b      	ldr	r3, [r1, #16]
 8008c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	bfb8      	it	lt
 8008c8c:	4613      	movlt	r3, r2
 8008c8e:	6033      	str	r3, [r6, #0]
 8008c90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c94:	4607      	mov	r7, r0
 8008c96:	460c      	mov	r4, r1
 8008c98:	b10a      	cbz	r2, 8008c9e <_printf_common+0x26>
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	6033      	str	r3, [r6, #0]
 8008c9e:	6823      	ldr	r3, [r4, #0]
 8008ca0:	0699      	lsls	r1, r3, #26
 8008ca2:	bf42      	ittt	mi
 8008ca4:	6833      	ldrmi	r3, [r6, #0]
 8008ca6:	3302      	addmi	r3, #2
 8008ca8:	6033      	strmi	r3, [r6, #0]
 8008caa:	6825      	ldr	r5, [r4, #0]
 8008cac:	f015 0506 	ands.w	r5, r5, #6
 8008cb0:	d106      	bne.n	8008cc0 <_printf_common+0x48>
 8008cb2:	f104 0a19 	add.w	sl, r4, #25
 8008cb6:	68e3      	ldr	r3, [r4, #12]
 8008cb8:	6832      	ldr	r2, [r6, #0]
 8008cba:	1a9b      	subs	r3, r3, r2
 8008cbc:	42ab      	cmp	r3, r5
 8008cbe:	dc26      	bgt.n	8008d0e <_printf_common+0x96>
 8008cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008cc4:	1e13      	subs	r3, r2, #0
 8008cc6:	6822      	ldr	r2, [r4, #0]
 8008cc8:	bf18      	it	ne
 8008cca:	2301      	movne	r3, #1
 8008ccc:	0692      	lsls	r2, r2, #26
 8008cce:	d42b      	bmi.n	8008d28 <_printf_common+0xb0>
 8008cd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	47c0      	blx	r8
 8008cda:	3001      	adds	r0, #1
 8008cdc:	d01e      	beq.n	8008d1c <_printf_common+0xa4>
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	68e5      	ldr	r5, [r4, #12]
 8008ce2:	6832      	ldr	r2, [r6, #0]
 8008ce4:	f003 0306 	and.w	r3, r3, #6
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	bf08      	it	eq
 8008cec:	1aad      	subeq	r5, r5, r2
 8008cee:	68a3      	ldr	r3, [r4, #8]
 8008cf0:	6922      	ldr	r2, [r4, #16]
 8008cf2:	bf0c      	ite	eq
 8008cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cf8:	2500      	movne	r5, #0
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	bfc4      	itt	gt
 8008cfe:	1a9b      	subgt	r3, r3, r2
 8008d00:	18ed      	addgt	r5, r5, r3
 8008d02:	2600      	movs	r6, #0
 8008d04:	341a      	adds	r4, #26
 8008d06:	42b5      	cmp	r5, r6
 8008d08:	d11a      	bne.n	8008d40 <_printf_common+0xc8>
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	e008      	b.n	8008d20 <_printf_common+0xa8>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	4652      	mov	r2, sl
 8008d12:	4649      	mov	r1, r9
 8008d14:	4638      	mov	r0, r7
 8008d16:	47c0      	blx	r8
 8008d18:	3001      	adds	r0, #1
 8008d1a:	d103      	bne.n	8008d24 <_printf_common+0xac>
 8008d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d24:	3501      	adds	r5, #1
 8008d26:	e7c6      	b.n	8008cb6 <_printf_common+0x3e>
 8008d28:	18e1      	adds	r1, r4, r3
 8008d2a:	1c5a      	adds	r2, r3, #1
 8008d2c:	2030      	movs	r0, #48	; 0x30
 8008d2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d32:	4422      	add	r2, r4
 8008d34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d3c:	3302      	adds	r3, #2
 8008d3e:	e7c7      	b.n	8008cd0 <_printf_common+0x58>
 8008d40:	2301      	movs	r3, #1
 8008d42:	4622      	mov	r2, r4
 8008d44:	4649      	mov	r1, r9
 8008d46:	4638      	mov	r0, r7
 8008d48:	47c0      	blx	r8
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	d0e6      	beq.n	8008d1c <_printf_common+0xa4>
 8008d4e:	3601      	adds	r6, #1
 8008d50:	e7d9      	b.n	8008d06 <_printf_common+0x8e>
	...

08008d54 <_printf_i>:
 8008d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d58:	7e0f      	ldrb	r7, [r1, #24]
 8008d5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d5c:	2f78      	cmp	r7, #120	; 0x78
 8008d5e:	4691      	mov	r9, r2
 8008d60:	4680      	mov	r8, r0
 8008d62:	460c      	mov	r4, r1
 8008d64:	469a      	mov	sl, r3
 8008d66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d6a:	d807      	bhi.n	8008d7c <_printf_i+0x28>
 8008d6c:	2f62      	cmp	r7, #98	; 0x62
 8008d6e:	d80a      	bhi.n	8008d86 <_printf_i+0x32>
 8008d70:	2f00      	cmp	r7, #0
 8008d72:	f000 80d8 	beq.w	8008f26 <_printf_i+0x1d2>
 8008d76:	2f58      	cmp	r7, #88	; 0x58
 8008d78:	f000 80a3 	beq.w	8008ec2 <_printf_i+0x16e>
 8008d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d84:	e03a      	b.n	8008dfc <_printf_i+0xa8>
 8008d86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d8a:	2b15      	cmp	r3, #21
 8008d8c:	d8f6      	bhi.n	8008d7c <_printf_i+0x28>
 8008d8e:	a101      	add	r1, pc, #4	; (adr r1, 8008d94 <_printf_i+0x40>)
 8008d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d94:	08008ded 	.word	0x08008ded
 8008d98:	08008e01 	.word	0x08008e01
 8008d9c:	08008d7d 	.word	0x08008d7d
 8008da0:	08008d7d 	.word	0x08008d7d
 8008da4:	08008d7d 	.word	0x08008d7d
 8008da8:	08008d7d 	.word	0x08008d7d
 8008dac:	08008e01 	.word	0x08008e01
 8008db0:	08008d7d 	.word	0x08008d7d
 8008db4:	08008d7d 	.word	0x08008d7d
 8008db8:	08008d7d 	.word	0x08008d7d
 8008dbc:	08008d7d 	.word	0x08008d7d
 8008dc0:	08008f0d 	.word	0x08008f0d
 8008dc4:	08008e31 	.word	0x08008e31
 8008dc8:	08008eef 	.word	0x08008eef
 8008dcc:	08008d7d 	.word	0x08008d7d
 8008dd0:	08008d7d 	.word	0x08008d7d
 8008dd4:	08008f2f 	.word	0x08008f2f
 8008dd8:	08008d7d 	.word	0x08008d7d
 8008ddc:	08008e31 	.word	0x08008e31
 8008de0:	08008d7d 	.word	0x08008d7d
 8008de4:	08008d7d 	.word	0x08008d7d
 8008de8:	08008ef7 	.word	0x08008ef7
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	1d1a      	adds	r2, r3, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	602a      	str	r2, [r5, #0]
 8008df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e0a3      	b.n	8008f48 <_printf_i+0x1f4>
 8008e00:	6820      	ldr	r0, [r4, #0]
 8008e02:	6829      	ldr	r1, [r5, #0]
 8008e04:	0606      	lsls	r6, r0, #24
 8008e06:	f101 0304 	add.w	r3, r1, #4
 8008e0a:	d50a      	bpl.n	8008e22 <_printf_i+0xce>
 8008e0c:	680e      	ldr	r6, [r1, #0]
 8008e0e:	602b      	str	r3, [r5, #0]
 8008e10:	2e00      	cmp	r6, #0
 8008e12:	da03      	bge.n	8008e1c <_printf_i+0xc8>
 8008e14:	232d      	movs	r3, #45	; 0x2d
 8008e16:	4276      	negs	r6, r6
 8008e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e1c:	485e      	ldr	r0, [pc, #376]	; (8008f98 <_printf_i+0x244>)
 8008e1e:	230a      	movs	r3, #10
 8008e20:	e019      	b.n	8008e56 <_printf_i+0x102>
 8008e22:	680e      	ldr	r6, [r1, #0]
 8008e24:	602b      	str	r3, [r5, #0]
 8008e26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e2a:	bf18      	it	ne
 8008e2c:	b236      	sxthne	r6, r6
 8008e2e:	e7ef      	b.n	8008e10 <_printf_i+0xbc>
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	6820      	ldr	r0, [r4, #0]
 8008e34:	1d19      	adds	r1, r3, #4
 8008e36:	6029      	str	r1, [r5, #0]
 8008e38:	0601      	lsls	r1, r0, #24
 8008e3a:	d501      	bpl.n	8008e40 <_printf_i+0xec>
 8008e3c:	681e      	ldr	r6, [r3, #0]
 8008e3e:	e002      	b.n	8008e46 <_printf_i+0xf2>
 8008e40:	0646      	lsls	r6, r0, #25
 8008e42:	d5fb      	bpl.n	8008e3c <_printf_i+0xe8>
 8008e44:	881e      	ldrh	r6, [r3, #0]
 8008e46:	4854      	ldr	r0, [pc, #336]	; (8008f98 <_printf_i+0x244>)
 8008e48:	2f6f      	cmp	r7, #111	; 0x6f
 8008e4a:	bf0c      	ite	eq
 8008e4c:	2308      	moveq	r3, #8
 8008e4e:	230a      	movne	r3, #10
 8008e50:	2100      	movs	r1, #0
 8008e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e56:	6865      	ldr	r5, [r4, #4]
 8008e58:	60a5      	str	r5, [r4, #8]
 8008e5a:	2d00      	cmp	r5, #0
 8008e5c:	bfa2      	ittt	ge
 8008e5e:	6821      	ldrge	r1, [r4, #0]
 8008e60:	f021 0104 	bicge.w	r1, r1, #4
 8008e64:	6021      	strge	r1, [r4, #0]
 8008e66:	b90e      	cbnz	r6, 8008e6c <_printf_i+0x118>
 8008e68:	2d00      	cmp	r5, #0
 8008e6a:	d04d      	beq.n	8008f08 <_printf_i+0x1b4>
 8008e6c:	4615      	mov	r5, r2
 8008e6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e72:	fb03 6711 	mls	r7, r3, r1, r6
 8008e76:	5dc7      	ldrb	r7, [r0, r7]
 8008e78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e7c:	4637      	mov	r7, r6
 8008e7e:	42bb      	cmp	r3, r7
 8008e80:	460e      	mov	r6, r1
 8008e82:	d9f4      	bls.n	8008e6e <_printf_i+0x11a>
 8008e84:	2b08      	cmp	r3, #8
 8008e86:	d10b      	bne.n	8008ea0 <_printf_i+0x14c>
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	07de      	lsls	r6, r3, #31
 8008e8c:	d508      	bpl.n	8008ea0 <_printf_i+0x14c>
 8008e8e:	6923      	ldr	r3, [r4, #16]
 8008e90:	6861      	ldr	r1, [r4, #4]
 8008e92:	4299      	cmp	r1, r3
 8008e94:	bfde      	ittt	le
 8008e96:	2330      	movle	r3, #48	; 0x30
 8008e98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ea0:	1b52      	subs	r2, r2, r5
 8008ea2:	6122      	str	r2, [r4, #16]
 8008ea4:	f8cd a000 	str.w	sl, [sp]
 8008ea8:	464b      	mov	r3, r9
 8008eaa:	aa03      	add	r2, sp, #12
 8008eac:	4621      	mov	r1, r4
 8008eae:	4640      	mov	r0, r8
 8008eb0:	f7ff fee2 	bl	8008c78 <_printf_common>
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	d14c      	bne.n	8008f52 <_printf_i+0x1fe>
 8008eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebc:	b004      	add	sp, #16
 8008ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec2:	4835      	ldr	r0, [pc, #212]	; (8008f98 <_printf_i+0x244>)
 8008ec4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ec8:	6829      	ldr	r1, [r5, #0]
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ed0:	6029      	str	r1, [r5, #0]
 8008ed2:	061d      	lsls	r5, r3, #24
 8008ed4:	d514      	bpl.n	8008f00 <_printf_i+0x1ac>
 8008ed6:	07df      	lsls	r7, r3, #31
 8008ed8:	bf44      	itt	mi
 8008eda:	f043 0320 	orrmi.w	r3, r3, #32
 8008ede:	6023      	strmi	r3, [r4, #0]
 8008ee0:	b91e      	cbnz	r6, 8008eea <_printf_i+0x196>
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	f023 0320 	bic.w	r3, r3, #32
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	2310      	movs	r3, #16
 8008eec:	e7b0      	b.n	8008e50 <_printf_i+0xfc>
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	f043 0320 	orr.w	r3, r3, #32
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	2378      	movs	r3, #120	; 0x78
 8008ef8:	4828      	ldr	r0, [pc, #160]	; (8008f9c <_printf_i+0x248>)
 8008efa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008efe:	e7e3      	b.n	8008ec8 <_printf_i+0x174>
 8008f00:	0659      	lsls	r1, r3, #25
 8008f02:	bf48      	it	mi
 8008f04:	b2b6      	uxthmi	r6, r6
 8008f06:	e7e6      	b.n	8008ed6 <_printf_i+0x182>
 8008f08:	4615      	mov	r5, r2
 8008f0a:	e7bb      	b.n	8008e84 <_printf_i+0x130>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	6826      	ldr	r6, [r4, #0]
 8008f10:	6961      	ldr	r1, [r4, #20]
 8008f12:	1d18      	adds	r0, r3, #4
 8008f14:	6028      	str	r0, [r5, #0]
 8008f16:	0635      	lsls	r5, r6, #24
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	d501      	bpl.n	8008f20 <_printf_i+0x1cc>
 8008f1c:	6019      	str	r1, [r3, #0]
 8008f1e:	e002      	b.n	8008f26 <_printf_i+0x1d2>
 8008f20:	0670      	lsls	r0, r6, #25
 8008f22:	d5fb      	bpl.n	8008f1c <_printf_i+0x1c8>
 8008f24:	8019      	strh	r1, [r3, #0]
 8008f26:	2300      	movs	r3, #0
 8008f28:	6123      	str	r3, [r4, #16]
 8008f2a:	4615      	mov	r5, r2
 8008f2c:	e7ba      	b.n	8008ea4 <_printf_i+0x150>
 8008f2e:	682b      	ldr	r3, [r5, #0]
 8008f30:	1d1a      	adds	r2, r3, #4
 8008f32:	602a      	str	r2, [r5, #0]
 8008f34:	681d      	ldr	r5, [r3, #0]
 8008f36:	6862      	ldr	r2, [r4, #4]
 8008f38:	2100      	movs	r1, #0
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	f7f7 f978 	bl	8000230 <memchr>
 8008f40:	b108      	cbz	r0, 8008f46 <_printf_i+0x1f2>
 8008f42:	1b40      	subs	r0, r0, r5
 8008f44:	6060      	str	r0, [r4, #4]
 8008f46:	6863      	ldr	r3, [r4, #4]
 8008f48:	6123      	str	r3, [r4, #16]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f50:	e7a8      	b.n	8008ea4 <_printf_i+0x150>
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	462a      	mov	r2, r5
 8008f56:	4649      	mov	r1, r9
 8008f58:	4640      	mov	r0, r8
 8008f5a:	47d0      	blx	sl
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	d0ab      	beq.n	8008eb8 <_printf_i+0x164>
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	079b      	lsls	r3, r3, #30
 8008f64:	d413      	bmi.n	8008f8e <_printf_i+0x23a>
 8008f66:	68e0      	ldr	r0, [r4, #12]
 8008f68:	9b03      	ldr	r3, [sp, #12]
 8008f6a:	4298      	cmp	r0, r3
 8008f6c:	bfb8      	it	lt
 8008f6e:	4618      	movlt	r0, r3
 8008f70:	e7a4      	b.n	8008ebc <_printf_i+0x168>
 8008f72:	2301      	movs	r3, #1
 8008f74:	4632      	mov	r2, r6
 8008f76:	4649      	mov	r1, r9
 8008f78:	4640      	mov	r0, r8
 8008f7a:	47d0      	blx	sl
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	d09b      	beq.n	8008eb8 <_printf_i+0x164>
 8008f80:	3501      	adds	r5, #1
 8008f82:	68e3      	ldr	r3, [r4, #12]
 8008f84:	9903      	ldr	r1, [sp, #12]
 8008f86:	1a5b      	subs	r3, r3, r1
 8008f88:	42ab      	cmp	r3, r5
 8008f8a:	dcf2      	bgt.n	8008f72 <_printf_i+0x21e>
 8008f8c:	e7eb      	b.n	8008f66 <_printf_i+0x212>
 8008f8e:	2500      	movs	r5, #0
 8008f90:	f104 0619 	add.w	r6, r4, #25
 8008f94:	e7f5      	b.n	8008f82 <_printf_i+0x22e>
 8008f96:	bf00      	nop
 8008f98:	0800e53a 	.word	0x0800e53a
 8008f9c:	0800e54b 	.word	0x0800e54b

08008fa0 <_scanf_float>:
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	b087      	sub	sp, #28
 8008fa6:	4617      	mov	r7, r2
 8008fa8:	9303      	str	r3, [sp, #12]
 8008faa:	688b      	ldr	r3, [r1, #8]
 8008fac:	1e5a      	subs	r2, r3, #1
 8008fae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008fb2:	bf83      	ittte	hi
 8008fb4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008fb8:	195b      	addhi	r3, r3, r5
 8008fba:	9302      	strhi	r3, [sp, #8]
 8008fbc:	2300      	movls	r3, #0
 8008fbe:	bf86      	itte	hi
 8008fc0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008fc4:	608b      	strhi	r3, [r1, #8]
 8008fc6:	9302      	strls	r3, [sp, #8]
 8008fc8:	680b      	ldr	r3, [r1, #0]
 8008fca:	468b      	mov	fp, r1
 8008fcc:	2500      	movs	r5, #0
 8008fce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008fd2:	f84b 3b1c 	str.w	r3, [fp], #28
 8008fd6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008fda:	4680      	mov	r8, r0
 8008fdc:	460c      	mov	r4, r1
 8008fde:	465e      	mov	r6, fp
 8008fe0:	46aa      	mov	sl, r5
 8008fe2:	46a9      	mov	r9, r5
 8008fe4:	9501      	str	r5, [sp, #4]
 8008fe6:	68a2      	ldr	r2, [r4, #8]
 8008fe8:	b152      	cbz	r2, 8009000 <_scanf_float+0x60>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	2b4e      	cmp	r3, #78	; 0x4e
 8008ff0:	d864      	bhi.n	80090bc <_scanf_float+0x11c>
 8008ff2:	2b40      	cmp	r3, #64	; 0x40
 8008ff4:	d83c      	bhi.n	8009070 <_scanf_float+0xd0>
 8008ff6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008ffa:	b2c8      	uxtb	r0, r1
 8008ffc:	280e      	cmp	r0, #14
 8008ffe:	d93a      	bls.n	8009076 <_scanf_float+0xd6>
 8009000:	f1b9 0f00 	cmp.w	r9, #0
 8009004:	d003      	beq.n	800900e <_scanf_float+0x6e>
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009012:	f1ba 0f01 	cmp.w	sl, #1
 8009016:	f200 8113 	bhi.w	8009240 <_scanf_float+0x2a0>
 800901a:	455e      	cmp	r6, fp
 800901c:	f200 8105 	bhi.w	800922a <_scanf_float+0x28a>
 8009020:	2501      	movs	r5, #1
 8009022:	4628      	mov	r0, r5
 8009024:	b007      	add	sp, #28
 8009026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800902e:	2a0d      	cmp	r2, #13
 8009030:	d8e6      	bhi.n	8009000 <_scanf_float+0x60>
 8009032:	a101      	add	r1, pc, #4	; (adr r1, 8009038 <_scanf_float+0x98>)
 8009034:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009038:	08009177 	.word	0x08009177
 800903c:	08009001 	.word	0x08009001
 8009040:	08009001 	.word	0x08009001
 8009044:	08009001 	.word	0x08009001
 8009048:	080091d7 	.word	0x080091d7
 800904c:	080091af 	.word	0x080091af
 8009050:	08009001 	.word	0x08009001
 8009054:	08009001 	.word	0x08009001
 8009058:	08009185 	.word	0x08009185
 800905c:	08009001 	.word	0x08009001
 8009060:	08009001 	.word	0x08009001
 8009064:	08009001 	.word	0x08009001
 8009068:	08009001 	.word	0x08009001
 800906c:	0800913d 	.word	0x0800913d
 8009070:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009074:	e7db      	b.n	800902e <_scanf_float+0x8e>
 8009076:	290e      	cmp	r1, #14
 8009078:	d8c2      	bhi.n	8009000 <_scanf_float+0x60>
 800907a:	a001      	add	r0, pc, #4	; (adr r0, 8009080 <_scanf_float+0xe0>)
 800907c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009080:	0800912f 	.word	0x0800912f
 8009084:	08009001 	.word	0x08009001
 8009088:	0800912f 	.word	0x0800912f
 800908c:	080091c3 	.word	0x080091c3
 8009090:	08009001 	.word	0x08009001
 8009094:	080090dd 	.word	0x080090dd
 8009098:	08009119 	.word	0x08009119
 800909c:	08009119 	.word	0x08009119
 80090a0:	08009119 	.word	0x08009119
 80090a4:	08009119 	.word	0x08009119
 80090a8:	08009119 	.word	0x08009119
 80090ac:	08009119 	.word	0x08009119
 80090b0:	08009119 	.word	0x08009119
 80090b4:	08009119 	.word	0x08009119
 80090b8:	08009119 	.word	0x08009119
 80090bc:	2b6e      	cmp	r3, #110	; 0x6e
 80090be:	d809      	bhi.n	80090d4 <_scanf_float+0x134>
 80090c0:	2b60      	cmp	r3, #96	; 0x60
 80090c2:	d8b2      	bhi.n	800902a <_scanf_float+0x8a>
 80090c4:	2b54      	cmp	r3, #84	; 0x54
 80090c6:	d077      	beq.n	80091b8 <_scanf_float+0x218>
 80090c8:	2b59      	cmp	r3, #89	; 0x59
 80090ca:	d199      	bne.n	8009000 <_scanf_float+0x60>
 80090cc:	2d07      	cmp	r5, #7
 80090ce:	d197      	bne.n	8009000 <_scanf_float+0x60>
 80090d0:	2508      	movs	r5, #8
 80090d2:	e029      	b.n	8009128 <_scanf_float+0x188>
 80090d4:	2b74      	cmp	r3, #116	; 0x74
 80090d6:	d06f      	beq.n	80091b8 <_scanf_float+0x218>
 80090d8:	2b79      	cmp	r3, #121	; 0x79
 80090da:	e7f6      	b.n	80090ca <_scanf_float+0x12a>
 80090dc:	6821      	ldr	r1, [r4, #0]
 80090de:	05c8      	lsls	r0, r1, #23
 80090e0:	d51a      	bpl.n	8009118 <_scanf_float+0x178>
 80090e2:	9b02      	ldr	r3, [sp, #8]
 80090e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80090e8:	6021      	str	r1, [r4, #0]
 80090ea:	f109 0901 	add.w	r9, r9, #1
 80090ee:	b11b      	cbz	r3, 80090f8 <_scanf_float+0x158>
 80090f0:	3b01      	subs	r3, #1
 80090f2:	3201      	adds	r2, #1
 80090f4:	9302      	str	r3, [sp, #8]
 80090f6:	60a2      	str	r2, [r4, #8]
 80090f8:	68a3      	ldr	r3, [r4, #8]
 80090fa:	3b01      	subs	r3, #1
 80090fc:	60a3      	str	r3, [r4, #8]
 80090fe:	6923      	ldr	r3, [r4, #16]
 8009100:	3301      	adds	r3, #1
 8009102:	6123      	str	r3, [r4, #16]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	3b01      	subs	r3, #1
 8009108:	2b00      	cmp	r3, #0
 800910a:	607b      	str	r3, [r7, #4]
 800910c:	f340 8084 	ble.w	8009218 <_scanf_float+0x278>
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	3301      	adds	r3, #1
 8009114:	603b      	str	r3, [r7, #0]
 8009116:	e766      	b.n	8008fe6 <_scanf_float+0x46>
 8009118:	eb1a 0f05 	cmn.w	sl, r5
 800911c:	f47f af70 	bne.w	8009000 <_scanf_float+0x60>
 8009120:	6822      	ldr	r2, [r4, #0]
 8009122:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009126:	6022      	str	r2, [r4, #0]
 8009128:	f806 3b01 	strb.w	r3, [r6], #1
 800912c:	e7e4      	b.n	80090f8 <_scanf_float+0x158>
 800912e:	6822      	ldr	r2, [r4, #0]
 8009130:	0610      	lsls	r0, r2, #24
 8009132:	f57f af65 	bpl.w	8009000 <_scanf_float+0x60>
 8009136:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800913a:	e7f4      	b.n	8009126 <_scanf_float+0x186>
 800913c:	f1ba 0f00 	cmp.w	sl, #0
 8009140:	d10e      	bne.n	8009160 <_scanf_float+0x1c0>
 8009142:	f1b9 0f00 	cmp.w	r9, #0
 8009146:	d10e      	bne.n	8009166 <_scanf_float+0x1c6>
 8009148:	6822      	ldr	r2, [r4, #0]
 800914a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800914e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009152:	d108      	bne.n	8009166 <_scanf_float+0x1c6>
 8009154:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009158:	6022      	str	r2, [r4, #0]
 800915a:	f04f 0a01 	mov.w	sl, #1
 800915e:	e7e3      	b.n	8009128 <_scanf_float+0x188>
 8009160:	f1ba 0f02 	cmp.w	sl, #2
 8009164:	d055      	beq.n	8009212 <_scanf_float+0x272>
 8009166:	2d01      	cmp	r5, #1
 8009168:	d002      	beq.n	8009170 <_scanf_float+0x1d0>
 800916a:	2d04      	cmp	r5, #4
 800916c:	f47f af48 	bne.w	8009000 <_scanf_float+0x60>
 8009170:	3501      	adds	r5, #1
 8009172:	b2ed      	uxtb	r5, r5
 8009174:	e7d8      	b.n	8009128 <_scanf_float+0x188>
 8009176:	f1ba 0f01 	cmp.w	sl, #1
 800917a:	f47f af41 	bne.w	8009000 <_scanf_float+0x60>
 800917e:	f04f 0a02 	mov.w	sl, #2
 8009182:	e7d1      	b.n	8009128 <_scanf_float+0x188>
 8009184:	b97d      	cbnz	r5, 80091a6 <_scanf_float+0x206>
 8009186:	f1b9 0f00 	cmp.w	r9, #0
 800918a:	f47f af3c 	bne.w	8009006 <_scanf_float+0x66>
 800918e:	6822      	ldr	r2, [r4, #0]
 8009190:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009194:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009198:	f47f af39 	bne.w	800900e <_scanf_float+0x6e>
 800919c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80091a0:	6022      	str	r2, [r4, #0]
 80091a2:	2501      	movs	r5, #1
 80091a4:	e7c0      	b.n	8009128 <_scanf_float+0x188>
 80091a6:	2d03      	cmp	r5, #3
 80091a8:	d0e2      	beq.n	8009170 <_scanf_float+0x1d0>
 80091aa:	2d05      	cmp	r5, #5
 80091ac:	e7de      	b.n	800916c <_scanf_float+0x1cc>
 80091ae:	2d02      	cmp	r5, #2
 80091b0:	f47f af26 	bne.w	8009000 <_scanf_float+0x60>
 80091b4:	2503      	movs	r5, #3
 80091b6:	e7b7      	b.n	8009128 <_scanf_float+0x188>
 80091b8:	2d06      	cmp	r5, #6
 80091ba:	f47f af21 	bne.w	8009000 <_scanf_float+0x60>
 80091be:	2507      	movs	r5, #7
 80091c0:	e7b2      	b.n	8009128 <_scanf_float+0x188>
 80091c2:	6822      	ldr	r2, [r4, #0]
 80091c4:	0591      	lsls	r1, r2, #22
 80091c6:	f57f af1b 	bpl.w	8009000 <_scanf_float+0x60>
 80091ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80091ce:	6022      	str	r2, [r4, #0]
 80091d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80091d4:	e7a8      	b.n	8009128 <_scanf_float+0x188>
 80091d6:	6822      	ldr	r2, [r4, #0]
 80091d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80091dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80091e0:	d006      	beq.n	80091f0 <_scanf_float+0x250>
 80091e2:	0550      	lsls	r0, r2, #21
 80091e4:	f57f af0c 	bpl.w	8009000 <_scanf_float+0x60>
 80091e8:	f1b9 0f00 	cmp.w	r9, #0
 80091ec:	f43f af0f 	beq.w	800900e <_scanf_float+0x6e>
 80091f0:	0591      	lsls	r1, r2, #22
 80091f2:	bf58      	it	pl
 80091f4:	9901      	ldrpl	r1, [sp, #4]
 80091f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80091fa:	bf58      	it	pl
 80091fc:	eba9 0101 	subpl.w	r1, r9, r1
 8009200:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009204:	bf58      	it	pl
 8009206:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800920a:	6022      	str	r2, [r4, #0]
 800920c:	f04f 0900 	mov.w	r9, #0
 8009210:	e78a      	b.n	8009128 <_scanf_float+0x188>
 8009212:	f04f 0a03 	mov.w	sl, #3
 8009216:	e787      	b.n	8009128 <_scanf_float+0x188>
 8009218:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800921c:	4639      	mov	r1, r7
 800921e:	4640      	mov	r0, r8
 8009220:	4798      	blx	r3
 8009222:	2800      	cmp	r0, #0
 8009224:	f43f aedf 	beq.w	8008fe6 <_scanf_float+0x46>
 8009228:	e6ea      	b.n	8009000 <_scanf_float+0x60>
 800922a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800922e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009232:	463a      	mov	r2, r7
 8009234:	4640      	mov	r0, r8
 8009236:	4798      	blx	r3
 8009238:	6923      	ldr	r3, [r4, #16]
 800923a:	3b01      	subs	r3, #1
 800923c:	6123      	str	r3, [r4, #16]
 800923e:	e6ec      	b.n	800901a <_scanf_float+0x7a>
 8009240:	1e6b      	subs	r3, r5, #1
 8009242:	2b06      	cmp	r3, #6
 8009244:	d825      	bhi.n	8009292 <_scanf_float+0x2f2>
 8009246:	2d02      	cmp	r5, #2
 8009248:	d836      	bhi.n	80092b8 <_scanf_float+0x318>
 800924a:	455e      	cmp	r6, fp
 800924c:	f67f aee8 	bls.w	8009020 <_scanf_float+0x80>
 8009250:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009254:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009258:	463a      	mov	r2, r7
 800925a:	4640      	mov	r0, r8
 800925c:	4798      	blx	r3
 800925e:	6923      	ldr	r3, [r4, #16]
 8009260:	3b01      	subs	r3, #1
 8009262:	6123      	str	r3, [r4, #16]
 8009264:	e7f1      	b.n	800924a <_scanf_float+0x2aa>
 8009266:	9802      	ldr	r0, [sp, #8]
 8009268:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800926c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009270:	9002      	str	r0, [sp, #8]
 8009272:	463a      	mov	r2, r7
 8009274:	4640      	mov	r0, r8
 8009276:	4798      	blx	r3
 8009278:	6923      	ldr	r3, [r4, #16]
 800927a:	3b01      	subs	r3, #1
 800927c:	6123      	str	r3, [r4, #16]
 800927e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009282:	fa5f fa8a 	uxtb.w	sl, sl
 8009286:	f1ba 0f02 	cmp.w	sl, #2
 800928a:	d1ec      	bne.n	8009266 <_scanf_float+0x2c6>
 800928c:	3d03      	subs	r5, #3
 800928e:	b2ed      	uxtb	r5, r5
 8009290:	1b76      	subs	r6, r6, r5
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	05da      	lsls	r2, r3, #23
 8009296:	d52f      	bpl.n	80092f8 <_scanf_float+0x358>
 8009298:	055b      	lsls	r3, r3, #21
 800929a:	d510      	bpl.n	80092be <_scanf_float+0x31e>
 800929c:	455e      	cmp	r6, fp
 800929e:	f67f aebf 	bls.w	8009020 <_scanf_float+0x80>
 80092a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092aa:	463a      	mov	r2, r7
 80092ac:	4640      	mov	r0, r8
 80092ae:	4798      	blx	r3
 80092b0:	6923      	ldr	r3, [r4, #16]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	6123      	str	r3, [r4, #16]
 80092b6:	e7f1      	b.n	800929c <_scanf_float+0x2fc>
 80092b8:	46aa      	mov	sl, r5
 80092ba:	9602      	str	r6, [sp, #8]
 80092bc:	e7df      	b.n	800927e <_scanf_float+0x2de>
 80092be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80092c2:	6923      	ldr	r3, [r4, #16]
 80092c4:	2965      	cmp	r1, #101	; 0x65
 80092c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80092ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80092ce:	6123      	str	r3, [r4, #16]
 80092d0:	d00c      	beq.n	80092ec <_scanf_float+0x34c>
 80092d2:	2945      	cmp	r1, #69	; 0x45
 80092d4:	d00a      	beq.n	80092ec <_scanf_float+0x34c>
 80092d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092da:	463a      	mov	r2, r7
 80092dc:	4640      	mov	r0, r8
 80092de:	4798      	blx	r3
 80092e0:	6923      	ldr	r3, [r4, #16]
 80092e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80092e6:	3b01      	subs	r3, #1
 80092e8:	1eb5      	subs	r5, r6, #2
 80092ea:	6123      	str	r3, [r4, #16]
 80092ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092f0:	463a      	mov	r2, r7
 80092f2:	4640      	mov	r0, r8
 80092f4:	4798      	blx	r3
 80092f6:	462e      	mov	r6, r5
 80092f8:	6825      	ldr	r5, [r4, #0]
 80092fa:	f015 0510 	ands.w	r5, r5, #16
 80092fe:	d159      	bne.n	80093b4 <_scanf_float+0x414>
 8009300:	7035      	strb	r5, [r6, #0]
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800930c:	d11b      	bne.n	8009346 <_scanf_float+0x3a6>
 800930e:	9b01      	ldr	r3, [sp, #4]
 8009310:	454b      	cmp	r3, r9
 8009312:	eba3 0209 	sub.w	r2, r3, r9
 8009316:	d123      	bne.n	8009360 <_scanf_float+0x3c0>
 8009318:	2200      	movs	r2, #0
 800931a:	4659      	mov	r1, fp
 800931c:	4640      	mov	r0, r8
 800931e:	f000 fe99 	bl	800a054 <_strtod_r>
 8009322:	6822      	ldr	r2, [r4, #0]
 8009324:	9b03      	ldr	r3, [sp, #12]
 8009326:	f012 0f02 	tst.w	r2, #2
 800932a:	ec57 6b10 	vmov	r6, r7, d0
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	d021      	beq.n	8009376 <_scanf_float+0x3d6>
 8009332:	9903      	ldr	r1, [sp, #12]
 8009334:	1d1a      	adds	r2, r3, #4
 8009336:	600a      	str	r2, [r1, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	e9c3 6700 	strd	r6, r7, [r3]
 800933e:	68e3      	ldr	r3, [r4, #12]
 8009340:	3301      	adds	r3, #1
 8009342:	60e3      	str	r3, [r4, #12]
 8009344:	e66d      	b.n	8009022 <_scanf_float+0x82>
 8009346:	9b04      	ldr	r3, [sp, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d0e5      	beq.n	8009318 <_scanf_float+0x378>
 800934c:	9905      	ldr	r1, [sp, #20]
 800934e:	230a      	movs	r3, #10
 8009350:	462a      	mov	r2, r5
 8009352:	3101      	adds	r1, #1
 8009354:	4640      	mov	r0, r8
 8009356:	f000 ff05 	bl	800a164 <_strtol_r>
 800935a:	9b04      	ldr	r3, [sp, #16]
 800935c:	9e05      	ldr	r6, [sp, #20]
 800935e:	1ac2      	subs	r2, r0, r3
 8009360:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009364:	429e      	cmp	r6, r3
 8009366:	bf28      	it	cs
 8009368:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800936c:	4912      	ldr	r1, [pc, #72]	; (80093b8 <_scanf_float+0x418>)
 800936e:	4630      	mov	r0, r6
 8009370:	f000 f82c 	bl	80093cc <siprintf>
 8009374:	e7d0      	b.n	8009318 <_scanf_float+0x378>
 8009376:	9903      	ldr	r1, [sp, #12]
 8009378:	f012 0f04 	tst.w	r2, #4
 800937c:	f103 0204 	add.w	r2, r3, #4
 8009380:	600a      	str	r2, [r1, #0]
 8009382:	d1d9      	bne.n	8009338 <_scanf_float+0x398>
 8009384:	f8d3 8000 	ldr.w	r8, [r3]
 8009388:	ee10 2a10 	vmov	r2, s0
 800938c:	ee10 0a10 	vmov	r0, s0
 8009390:	463b      	mov	r3, r7
 8009392:	4639      	mov	r1, r7
 8009394:	f7f7 fbf2 	bl	8000b7c <__aeabi_dcmpun>
 8009398:	b128      	cbz	r0, 80093a6 <_scanf_float+0x406>
 800939a:	4808      	ldr	r0, [pc, #32]	; (80093bc <_scanf_float+0x41c>)
 800939c:	f000 f810 	bl	80093c0 <nanf>
 80093a0:	ed88 0a00 	vstr	s0, [r8]
 80093a4:	e7cb      	b.n	800933e <_scanf_float+0x39e>
 80093a6:	4630      	mov	r0, r6
 80093a8:	4639      	mov	r1, r7
 80093aa:	f7f7 fc45 	bl	8000c38 <__aeabi_d2f>
 80093ae:	f8c8 0000 	str.w	r0, [r8]
 80093b2:	e7c4      	b.n	800933e <_scanf_float+0x39e>
 80093b4:	2500      	movs	r5, #0
 80093b6:	e634      	b.n	8009022 <_scanf_float+0x82>
 80093b8:	0800e55c 	.word	0x0800e55c
 80093bc:	0800e968 	.word	0x0800e968

080093c0 <nanf>:
 80093c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80093c8 <nanf+0x8>
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	7fc00000 	.word	0x7fc00000

080093cc <siprintf>:
 80093cc:	b40e      	push	{r1, r2, r3}
 80093ce:	b500      	push	{lr}
 80093d0:	b09c      	sub	sp, #112	; 0x70
 80093d2:	ab1d      	add	r3, sp, #116	; 0x74
 80093d4:	9002      	str	r0, [sp, #8]
 80093d6:	9006      	str	r0, [sp, #24]
 80093d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093dc:	4809      	ldr	r0, [pc, #36]	; (8009404 <siprintf+0x38>)
 80093de:	9107      	str	r1, [sp, #28]
 80093e0:	9104      	str	r1, [sp, #16]
 80093e2:	4909      	ldr	r1, [pc, #36]	; (8009408 <siprintf+0x3c>)
 80093e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80093e8:	9105      	str	r1, [sp, #20]
 80093ea:	6800      	ldr	r0, [r0, #0]
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	a902      	add	r1, sp, #8
 80093f0:	f002 fee4 	bl	800c1bc <_svfiprintf_r>
 80093f4:	9b02      	ldr	r3, [sp, #8]
 80093f6:	2200      	movs	r2, #0
 80093f8:	701a      	strb	r2, [r3, #0]
 80093fa:	b01c      	add	sp, #112	; 0x70
 80093fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009400:	b003      	add	sp, #12
 8009402:	4770      	bx	lr
 8009404:	2000001c 	.word	0x2000001c
 8009408:	ffff0208 	.word	0xffff0208

0800940c <sulp>:
 800940c:	b570      	push	{r4, r5, r6, lr}
 800940e:	4604      	mov	r4, r0
 8009410:	460d      	mov	r5, r1
 8009412:	ec45 4b10 	vmov	d0, r4, r5
 8009416:	4616      	mov	r6, r2
 8009418:	f002 fc2e 	bl	800bc78 <__ulp>
 800941c:	ec51 0b10 	vmov	r0, r1, d0
 8009420:	b17e      	cbz	r6, 8009442 <sulp+0x36>
 8009422:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009426:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800942a:	2b00      	cmp	r3, #0
 800942c:	dd09      	ble.n	8009442 <sulp+0x36>
 800942e:	051b      	lsls	r3, r3, #20
 8009430:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009434:	2400      	movs	r4, #0
 8009436:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800943a:	4622      	mov	r2, r4
 800943c:	462b      	mov	r3, r5
 800943e:	f7f7 f903 	bl	8000648 <__aeabi_dmul>
 8009442:	bd70      	pop	{r4, r5, r6, pc}
 8009444:	0000      	movs	r0, r0
	...

08009448 <_strtod_l>:
 8009448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	ed2d 8b02 	vpush	{d8}
 8009450:	b09d      	sub	sp, #116	; 0x74
 8009452:	461f      	mov	r7, r3
 8009454:	2300      	movs	r3, #0
 8009456:	9318      	str	r3, [sp, #96]	; 0x60
 8009458:	4ba2      	ldr	r3, [pc, #648]	; (80096e4 <_strtod_l+0x29c>)
 800945a:	9213      	str	r2, [sp, #76]	; 0x4c
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	9305      	str	r3, [sp, #20]
 8009460:	4604      	mov	r4, r0
 8009462:	4618      	mov	r0, r3
 8009464:	4688      	mov	r8, r1
 8009466:	f7f6 fedb 	bl	8000220 <strlen>
 800946a:	f04f 0a00 	mov.w	sl, #0
 800946e:	4605      	mov	r5, r0
 8009470:	f04f 0b00 	mov.w	fp, #0
 8009474:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800947a:	781a      	ldrb	r2, [r3, #0]
 800947c:	2a2b      	cmp	r2, #43	; 0x2b
 800947e:	d04e      	beq.n	800951e <_strtod_l+0xd6>
 8009480:	d83b      	bhi.n	80094fa <_strtod_l+0xb2>
 8009482:	2a0d      	cmp	r2, #13
 8009484:	d834      	bhi.n	80094f0 <_strtod_l+0xa8>
 8009486:	2a08      	cmp	r2, #8
 8009488:	d834      	bhi.n	80094f4 <_strtod_l+0xac>
 800948a:	2a00      	cmp	r2, #0
 800948c:	d03e      	beq.n	800950c <_strtod_l+0xc4>
 800948e:	2300      	movs	r3, #0
 8009490:	930a      	str	r3, [sp, #40]	; 0x28
 8009492:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009494:	7833      	ldrb	r3, [r6, #0]
 8009496:	2b30      	cmp	r3, #48	; 0x30
 8009498:	f040 80b0 	bne.w	80095fc <_strtod_l+0x1b4>
 800949c:	7873      	ldrb	r3, [r6, #1]
 800949e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094a2:	2b58      	cmp	r3, #88	; 0x58
 80094a4:	d168      	bne.n	8009578 <_strtod_l+0x130>
 80094a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a8:	9301      	str	r3, [sp, #4]
 80094aa:	ab18      	add	r3, sp, #96	; 0x60
 80094ac:	9702      	str	r7, [sp, #8]
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	4a8d      	ldr	r2, [pc, #564]	; (80096e8 <_strtod_l+0x2a0>)
 80094b2:	ab19      	add	r3, sp, #100	; 0x64
 80094b4:	a917      	add	r1, sp, #92	; 0x5c
 80094b6:	4620      	mov	r0, r4
 80094b8:	f001 fd38 	bl	800af2c <__gethex>
 80094bc:	f010 0707 	ands.w	r7, r0, #7
 80094c0:	4605      	mov	r5, r0
 80094c2:	d005      	beq.n	80094d0 <_strtod_l+0x88>
 80094c4:	2f06      	cmp	r7, #6
 80094c6:	d12c      	bne.n	8009522 <_strtod_l+0xda>
 80094c8:	3601      	adds	r6, #1
 80094ca:	2300      	movs	r3, #0
 80094cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80094ce:	930a      	str	r3, [sp, #40]	; 0x28
 80094d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f040 8590 	bne.w	8009ff8 <_strtod_l+0xbb0>
 80094d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094da:	b1eb      	cbz	r3, 8009518 <_strtod_l+0xd0>
 80094dc:	4652      	mov	r2, sl
 80094de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80094e2:	ec43 2b10 	vmov	d0, r2, r3
 80094e6:	b01d      	add	sp, #116	; 0x74
 80094e8:	ecbd 8b02 	vpop	{d8}
 80094ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f0:	2a20      	cmp	r2, #32
 80094f2:	d1cc      	bne.n	800948e <_strtod_l+0x46>
 80094f4:	3301      	adds	r3, #1
 80094f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80094f8:	e7be      	b.n	8009478 <_strtod_l+0x30>
 80094fa:	2a2d      	cmp	r2, #45	; 0x2d
 80094fc:	d1c7      	bne.n	800948e <_strtod_l+0x46>
 80094fe:	2201      	movs	r2, #1
 8009500:	920a      	str	r2, [sp, #40]	; 0x28
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	9217      	str	r2, [sp, #92]	; 0x5c
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1c2      	bne.n	8009492 <_strtod_l+0x4a>
 800950c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800950e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009512:	2b00      	cmp	r3, #0
 8009514:	f040 856e 	bne.w	8009ff4 <_strtod_l+0xbac>
 8009518:	4652      	mov	r2, sl
 800951a:	465b      	mov	r3, fp
 800951c:	e7e1      	b.n	80094e2 <_strtod_l+0x9a>
 800951e:	2200      	movs	r2, #0
 8009520:	e7ee      	b.n	8009500 <_strtod_l+0xb8>
 8009522:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009524:	b13a      	cbz	r2, 8009536 <_strtod_l+0xee>
 8009526:	2135      	movs	r1, #53	; 0x35
 8009528:	a81a      	add	r0, sp, #104	; 0x68
 800952a:	f002 fcb0 	bl	800be8e <__copybits>
 800952e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009530:	4620      	mov	r0, r4
 8009532:	f002 f86f 	bl	800b614 <_Bfree>
 8009536:	3f01      	subs	r7, #1
 8009538:	2f04      	cmp	r7, #4
 800953a:	d806      	bhi.n	800954a <_strtod_l+0x102>
 800953c:	e8df f007 	tbb	[pc, r7]
 8009540:	1714030a 	.word	0x1714030a
 8009544:	0a          	.byte	0x0a
 8009545:	00          	.byte	0x00
 8009546:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800954a:	0728      	lsls	r0, r5, #28
 800954c:	d5c0      	bpl.n	80094d0 <_strtod_l+0x88>
 800954e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009552:	e7bd      	b.n	80094d0 <_strtod_l+0x88>
 8009554:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009558:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800955a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800955e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009562:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009566:	e7f0      	b.n	800954a <_strtod_l+0x102>
 8009568:	f8df b180 	ldr.w	fp, [pc, #384]	; 80096ec <_strtod_l+0x2a4>
 800956c:	e7ed      	b.n	800954a <_strtod_l+0x102>
 800956e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009572:	f04f 3aff 	mov.w	sl, #4294967295
 8009576:	e7e8      	b.n	800954a <_strtod_l+0x102>
 8009578:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800957a:	1c5a      	adds	r2, r3, #1
 800957c:	9217      	str	r2, [sp, #92]	; 0x5c
 800957e:	785b      	ldrb	r3, [r3, #1]
 8009580:	2b30      	cmp	r3, #48	; 0x30
 8009582:	d0f9      	beq.n	8009578 <_strtod_l+0x130>
 8009584:	2b00      	cmp	r3, #0
 8009586:	d0a3      	beq.n	80094d0 <_strtod_l+0x88>
 8009588:	2301      	movs	r3, #1
 800958a:	f04f 0900 	mov.w	r9, #0
 800958e:	9304      	str	r3, [sp, #16]
 8009590:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009592:	9308      	str	r3, [sp, #32]
 8009594:	f8cd 901c 	str.w	r9, [sp, #28]
 8009598:	464f      	mov	r7, r9
 800959a:	220a      	movs	r2, #10
 800959c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800959e:	7806      	ldrb	r6, [r0, #0]
 80095a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80095a4:	b2d9      	uxtb	r1, r3
 80095a6:	2909      	cmp	r1, #9
 80095a8:	d92a      	bls.n	8009600 <_strtod_l+0x1b8>
 80095aa:	9905      	ldr	r1, [sp, #20]
 80095ac:	462a      	mov	r2, r5
 80095ae:	f002 ff1f 	bl	800c3f0 <strncmp>
 80095b2:	b398      	cbz	r0, 800961c <_strtod_l+0x1d4>
 80095b4:	2000      	movs	r0, #0
 80095b6:	4632      	mov	r2, r6
 80095b8:	463d      	mov	r5, r7
 80095ba:	9005      	str	r0, [sp, #20]
 80095bc:	4603      	mov	r3, r0
 80095be:	2a65      	cmp	r2, #101	; 0x65
 80095c0:	d001      	beq.n	80095c6 <_strtod_l+0x17e>
 80095c2:	2a45      	cmp	r2, #69	; 0x45
 80095c4:	d118      	bne.n	80095f8 <_strtod_l+0x1b0>
 80095c6:	b91d      	cbnz	r5, 80095d0 <_strtod_l+0x188>
 80095c8:	9a04      	ldr	r2, [sp, #16]
 80095ca:	4302      	orrs	r2, r0
 80095cc:	d09e      	beq.n	800950c <_strtod_l+0xc4>
 80095ce:	2500      	movs	r5, #0
 80095d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80095d4:	f108 0201 	add.w	r2, r8, #1
 80095d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80095da:	f898 2001 	ldrb.w	r2, [r8, #1]
 80095de:	2a2b      	cmp	r2, #43	; 0x2b
 80095e0:	d075      	beq.n	80096ce <_strtod_l+0x286>
 80095e2:	2a2d      	cmp	r2, #45	; 0x2d
 80095e4:	d07b      	beq.n	80096de <_strtod_l+0x296>
 80095e6:	f04f 0c00 	mov.w	ip, #0
 80095ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80095ee:	2909      	cmp	r1, #9
 80095f0:	f240 8082 	bls.w	80096f8 <_strtod_l+0x2b0>
 80095f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80095f8:	2600      	movs	r6, #0
 80095fa:	e09d      	b.n	8009738 <_strtod_l+0x2f0>
 80095fc:	2300      	movs	r3, #0
 80095fe:	e7c4      	b.n	800958a <_strtod_l+0x142>
 8009600:	2f08      	cmp	r7, #8
 8009602:	bfd8      	it	le
 8009604:	9907      	ldrle	r1, [sp, #28]
 8009606:	f100 0001 	add.w	r0, r0, #1
 800960a:	bfda      	itte	le
 800960c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009610:	9307      	strle	r3, [sp, #28]
 8009612:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009616:	3701      	adds	r7, #1
 8009618:	9017      	str	r0, [sp, #92]	; 0x5c
 800961a:	e7bf      	b.n	800959c <_strtod_l+0x154>
 800961c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800961e:	195a      	adds	r2, r3, r5
 8009620:	9217      	str	r2, [sp, #92]	; 0x5c
 8009622:	5d5a      	ldrb	r2, [r3, r5]
 8009624:	2f00      	cmp	r7, #0
 8009626:	d037      	beq.n	8009698 <_strtod_l+0x250>
 8009628:	9005      	str	r0, [sp, #20]
 800962a:	463d      	mov	r5, r7
 800962c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009630:	2b09      	cmp	r3, #9
 8009632:	d912      	bls.n	800965a <_strtod_l+0x212>
 8009634:	2301      	movs	r3, #1
 8009636:	e7c2      	b.n	80095be <_strtod_l+0x176>
 8009638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800963a:	1c5a      	adds	r2, r3, #1
 800963c:	9217      	str	r2, [sp, #92]	; 0x5c
 800963e:	785a      	ldrb	r2, [r3, #1]
 8009640:	3001      	adds	r0, #1
 8009642:	2a30      	cmp	r2, #48	; 0x30
 8009644:	d0f8      	beq.n	8009638 <_strtod_l+0x1f0>
 8009646:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800964a:	2b08      	cmp	r3, #8
 800964c:	f200 84d9 	bhi.w	800a002 <_strtod_l+0xbba>
 8009650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009652:	9005      	str	r0, [sp, #20]
 8009654:	2000      	movs	r0, #0
 8009656:	9308      	str	r3, [sp, #32]
 8009658:	4605      	mov	r5, r0
 800965a:	3a30      	subs	r2, #48	; 0x30
 800965c:	f100 0301 	add.w	r3, r0, #1
 8009660:	d014      	beq.n	800968c <_strtod_l+0x244>
 8009662:	9905      	ldr	r1, [sp, #20]
 8009664:	4419      	add	r1, r3
 8009666:	9105      	str	r1, [sp, #20]
 8009668:	462b      	mov	r3, r5
 800966a:	eb00 0e05 	add.w	lr, r0, r5
 800966e:	210a      	movs	r1, #10
 8009670:	4573      	cmp	r3, lr
 8009672:	d113      	bne.n	800969c <_strtod_l+0x254>
 8009674:	182b      	adds	r3, r5, r0
 8009676:	2b08      	cmp	r3, #8
 8009678:	f105 0501 	add.w	r5, r5, #1
 800967c:	4405      	add	r5, r0
 800967e:	dc1c      	bgt.n	80096ba <_strtod_l+0x272>
 8009680:	9907      	ldr	r1, [sp, #28]
 8009682:	230a      	movs	r3, #10
 8009684:	fb03 2301 	mla	r3, r3, r1, r2
 8009688:	9307      	str	r3, [sp, #28]
 800968a:	2300      	movs	r3, #0
 800968c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800968e:	1c51      	adds	r1, r2, #1
 8009690:	9117      	str	r1, [sp, #92]	; 0x5c
 8009692:	7852      	ldrb	r2, [r2, #1]
 8009694:	4618      	mov	r0, r3
 8009696:	e7c9      	b.n	800962c <_strtod_l+0x1e4>
 8009698:	4638      	mov	r0, r7
 800969a:	e7d2      	b.n	8009642 <_strtod_l+0x1fa>
 800969c:	2b08      	cmp	r3, #8
 800969e:	dc04      	bgt.n	80096aa <_strtod_l+0x262>
 80096a0:	9e07      	ldr	r6, [sp, #28]
 80096a2:	434e      	muls	r6, r1
 80096a4:	9607      	str	r6, [sp, #28]
 80096a6:	3301      	adds	r3, #1
 80096a8:	e7e2      	b.n	8009670 <_strtod_l+0x228>
 80096aa:	f103 0c01 	add.w	ip, r3, #1
 80096ae:	f1bc 0f10 	cmp.w	ip, #16
 80096b2:	bfd8      	it	le
 80096b4:	fb01 f909 	mulle.w	r9, r1, r9
 80096b8:	e7f5      	b.n	80096a6 <_strtod_l+0x25e>
 80096ba:	2d10      	cmp	r5, #16
 80096bc:	bfdc      	itt	le
 80096be:	230a      	movle	r3, #10
 80096c0:	fb03 2909 	mlale	r9, r3, r9, r2
 80096c4:	e7e1      	b.n	800968a <_strtod_l+0x242>
 80096c6:	2300      	movs	r3, #0
 80096c8:	9305      	str	r3, [sp, #20]
 80096ca:	2301      	movs	r3, #1
 80096cc:	e77c      	b.n	80095c8 <_strtod_l+0x180>
 80096ce:	f04f 0c00 	mov.w	ip, #0
 80096d2:	f108 0202 	add.w	r2, r8, #2
 80096d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80096d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80096dc:	e785      	b.n	80095ea <_strtod_l+0x1a2>
 80096de:	f04f 0c01 	mov.w	ip, #1
 80096e2:	e7f6      	b.n	80096d2 <_strtod_l+0x28a>
 80096e4:	0800e7b0 	.word	0x0800e7b0
 80096e8:	0800e564 	.word	0x0800e564
 80096ec:	7ff00000 	.word	0x7ff00000
 80096f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80096f2:	1c51      	adds	r1, r2, #1
 80096f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80096f6:	7852      	ldrb	r2, [r2, #1]
 80096f8:	2a30      	cmp	r2, #48	; 0x30
 80096fa:	d0f9      	beq.n	80096f0 <_strtod_l+0x2a8>
 80096fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009700:	2908      	cmp	r1, #8
 8009702:	f63f af79 	bhi.w	80095f8 <_strtod_l+0x1b0>
 8009706:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800970a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800970c:	9206      	str	r2, [sp, #24]
 800970e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009710:	1c51      	adds	r1, r2, #1
 8009712:	9117      	str	r1, [sp, #92]	; 0x5c
 8009714:	7852      	ldrb	r2, [r2, #1]
 8009716:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800971a:	2e09      	cmp	r6, #9
 800971c:	d937      	bls.n	800978e <_strtod_l+0x346>
 800971e:	9e06      	ldr	r6, [sp, #24]
 8009720:	1b89      	subs	r1, r1, r6
 8009722:	2908      	cmp	r1, #8
 8009724:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009728:	dc02      	bgt.n	8009730 <_strtod_l+0x2e8>
 800972a:	4576      	cmp	r6, lr
 800972c:	bfa8      	it	ge
 800972e:	4676      	movge	r6, lr
 8009730:	f1bc 0f00 	cmp.w	ip, #0
 8009734:	d000      	beq.n	8009738 <_strtod_l+0x2f0>
 8009736:	4276      	negs	r6, r6
 8009738:	2d00      	cmp	r5, #0
 800973a:	d14d      	bne.n	80097d8 <_strtod_l+0x390>
 800973c:	9904      	ldr	r1, [sp, #16]
 800973e:	4301      	orrs	r1, r0
 8009740:	f47f aec6 	bne.w	80094d0 <_strtod_l+0x88>
 8009744:	2b00      	cmp	r3, #0
 8009746:	f47f aee1 	bne.w	800950c <_strtod_l+0xc4>
 800974a:	2a69      	cmp	r2, #105	; 0x69
 800974c:	d027      	beq.n	800979e <_strtod_l+0x356>
 800974e:	dc24      	bgt.n	800979a <_strtod_l+0x352>
 8009750:	2a49      	cmp	r2, #73	; 0x49
 8009752:	d024      	beq.n	800979e <_strtod_l+0x356>
 8009754:	2a4e      	cmp	r2, #78	; 0x4e
 8009756:	f47f aed9 	bne.w	800950c <_strtod_l+0xc4>
 800975a:	499f      	ldr	r1, [pc, #636]	; (80099d8 <_strtod_l+0x590>)
 800975c:	a817      	add	r0, sp, #92	; 0x5c
 800975e:	f001 fe3d 	bl	800b3dc <__match>
 8009762:	2800      	cmp	r0, #0
 8009764:	f43f aed2 	beq.w	800950c <_strtod_l+0xc4>
 8009768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	2b28      	cmp	r3, #40	; 0x28
 800976e:	d12d      	bne.n	80097cc <_strtod_l+0x384>
 8009770:	499a      	ldr	r1, [pc, #616]	; (80099dc <_strtod_l+0x594>)
 8009772:	aa1a      	add	r2, sp, #104	; 0x68
 8009774:	a817      	add	r0, sp, #92	; 0x5c
 8009776:	f001 fe45 	bl	800b404 <__hexnan>
 800977a:	2805      	cmp	r0, #5
 800977c:	d126      	bne.n	80097cc <_strtod_l+0x384>
 800977e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009780:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009784:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009788:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800978c:	e6a0      	b.n	80094d0 <_strtod_l+0x88>
 800978e:	210a      	movs	r1, #10
 8009790:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009794:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009798:	e7b9      	b.n	800970e <_strtod_l+0x2c6>
 800979a:	2a6e      	cmp	r2, #110	; 0x6e
 800979c:	e7db      	b.n	8009756 <_strtod_l+0x30e>
 800979e:	4990      	ldr	r1, [pc, #576]	; (80099e0 <_strtod_l+0x598>)
 80097a0:	a817      	add	r0, sp, #92	; 0x5c
 80097a2:	f001 fe1b 	bl	800b3dc <__match>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f43f aeb0 	beq.w	800950c <_strtod_l+0xc4>
 80097ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097ae:	498d      	ldr	r1, [pc, #564]	; (80099e4 <_strtod_l+0x59c>)
 80097b0:	3b01      	subs	r3, #1
 80097b2:	a817      	add	r0, sp, #92	; 0x5c
 80097b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80097b6:	f001 fe11 	bl	800b3dc <__match>
 80097ba:	b910      	cbnz	r0, 80097c2 <_strtod_l+0x37a>
 80097bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097be:	3301      	adds	r3, #1
 80097c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80097c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80099f4 <_strtod_l+0x5ac>
 80097c6:	f04f 0a00 	mov.w	sl, #0
 80097ca:	e681      	b.n	80094d0 <_strtod_l+0x88>
 80097cc:	4886      	ldr	r0, [pc, #536]	; (80099e8 <_strtod_l+0x5a0>)
 80097ce:	f002 fdf7 	bl	800c3c0 <nan>
 80097d2:	ec5b ab10 	vmov	sl, fp, d0
 80097d6:	e67b      	b.n	80094d0 <_strtod_l+0x88>
 80097d8:	9b05      	ldr	r3, [sp, #20]
 80097da:	9807      	ldr	r0, [sp, #28]
 80097dc:	1af3      	subs	r3, r6, r3
 80097de:	2f00      	cmp	r7, #0
 80097e0:	bf08      	it	eq
 80097e2:	462f      	moveq	r7, r5
 80097e4:	2d10      	cmp	r5, #16
 80097e6:	9306      	str	r3, [sp, #24]
 80097e8:	46a8      	mov	r8, r5
 80097ea:	bfa8      	it	ge
 80097ec:	f04f 0810 	movge.w	r8, #16
 80097f0:	f7f6 feb0 	bl	8000554 <__aeabi_ui2d>
 80097f4:	2d09      	cmp	r5, #9
 80097f6:	4682      	mov	sl, r0
 80097f8:	468b      	mov	fp, r1
 80097fa:	dd13      	ble.n	8009824 <_strtod_l+0x3dc>
 80097fc:	4b7b      	ldr	r3, [pc, #492]	; (80099ec <_strtod_l+0x5a4>)
 80097fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009802:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009806:	f7f6 ff1f 	bl	8000648 <__aeabi_dmul>
 800980a:	4682      	mov	sl, r0
 800980c:	4648      	mov	r0, r9
 800980e:	468b      	mov	fp, r1
 8009810:	f7f6 fea0 	bl	8000554 <__aeabi_ui2d>
 8009814:	4602      	mov	r2, r0
 8009816:	460b      	mov	r3, r1
 8009818:	4650      	mov	r0, sl
 800981a:	4659      	mov	r1, fp
 800981c:	f7f6 fd5e 	bl	80002dc <__adddf3>
 8009820:	4682      	mov	sl, r0
 8009822:	468b      	mov	fp, r1
 8009824:	2d0f      	cmp	r5, #15
 8009826:	dc38      	bgt.n	800989a <_strtod_l+0x452>
 8009828:	9b06      	ldr	r3, [sp, #24]
 800982a:	2b00      	cmp	r3, #0
 800982c:	f43f ae50 	beq.w	80094d0 <_strtod_l+0x88>
 8009830:	dd24      	ble.n	800987c <_strtod_l+0x434>
 8009832:	2b16      	cmp	r3, #22
 8009834:	dc0b      	bgt.n	800984e <_strtod_l+0x406>
 8009836:	496d      	ldr	r1, [pc, #436]	; (80099ec <_strtod_l+0x5a4>)
 8009838:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800983c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009840:	4652      	mov	r2, sl
 8009842:	465b      	mov	r3, fp
 8009844:	f7f6 ff00 	bl	8000648 <__aeabi_dmul>
 8009848:	4682      	mov	sl, r0
 800984a:	468b      	mov	fp, r1
 800984c:	e640      	b.n	80094d0 <_strtod_l+0x88>
 800984e:	9a06      	ldr	r2, [sp, #24]
 8009850:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009854:	4293      	cmp	r3, r2
 8009856:	db20      	blt.n	800989a <_strtod_l+0x452>
 8009858:	4c64      	ldr	r4, [pc, #400]	; (80099ec <_strtod_l+0x5a4>)
 800985a:	f1c5 050f 	rsb	r5, r5, #15
 800985e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009862:	4652      	mov	r2, sl
 8009864:	465b      	mov	r3, fp
 8009866:	e9d1 0100 	ldrd	r0, r1, [r1]
 800986a:	f7f6 feed 	bl	8000648 <__aeabi_dmul>
 800986e:	9b06      	ldr	r3, [sp, #24]
 8009870:	1b5d      	subs	r5, r3, r5
 8009872:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009876:	e9d4 2300 	ldrd	r2, r3, [r4]
 800987a:	e7e3      	b.n	8009844 <_strtod_l+0x3fc>
 800987c:	9b06      	ldr	r3, [sp, #24]
 800987e:	3316      	adds	r3, #22
 8009880:	db0b      	blt.n	800989a <_strtod_l+0x452>
 8009882:	9b05      	ldr	r3, [sp, #20]
 8009884:	1b9e      	subs	r6, r3, r6
 8009886:	4b59      	ldr	r3, [pc, #356]	; (80099ec <_strtod_l+0x5a4>)
 8009888:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800988c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009890:	4650      	mov	r0, sl
 8009892:	4659      	mov	r1, fp
 8009894:	f7f7 f802 	bl	800089c <__aeabi_ddiv>
 8009898:	e7d6      	b.n	8009848 <_strtod_l+0x400>
 800989a:	9b06      	ldr	r3, [sp, #24]
 800989c:	eba5 0808 	sub.w	r8, r5, r8
 80098a0:	4498      	add	r8, r3
 80098a2:	f1b8 0f00 	cmp.w	r8, #0
 80098a6:	dd74      	ble.n	8009992 <_strtod_l+0x54a>
 80098a8:	f018 030f 	ands.w	r3, r8, #15
 80098ac:	d00a      	beq.n	80098c4 <_strtod_l+0x47c>
 80098ae:	494f      	ldr	r1, [pc, #316]	; (80099ec <_strtod_l+0x5a4>)
 80098b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80098b4:	4652      	mov	r2, sl
 80098b6:	465b      	mov	r3, fp
 80098b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098bc:	f7f6 fec4 	bl	8000648 <__aeabi_dmul>
 80098c0:	4682      	mov	sl, r0
 80098c2:	468b      	mov	fp, r1
 80098c4:	f038 080f 	bics.w	r8, r8, #15
 80098c8:	d04f      	beq.n	800996a <_strtod_l+0x522>
 80098ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80098ce:	dd22      	ble.n	8009916 <_strtod_l+0x4ce>
 80098d0:	2500      	movs	r5, #0
 80098d2:	462e      	mov	r6, r5
 80098d4:	9507      	str	r5, [sp, #28]
 80098d6:	9505      	str	r5, [sp, #20]
 80098d8:	2322      	movs	r3, #34	; 0x22
 80098da:	f8df b118 	ldr.w	fp, [pc, #280]	; 80099f4 <_strtod_l+0x5ac>
 80098de:	6023      	str	r3, [r4, #0]
 80098e0:	f04f 0a00 	mov.w	sl, #0
 80098e4:	9b07      	ldr	r3, [sp, #28]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f43f adf2 	beq.w	80094d0 <_strtod_l+0x88>
 80098ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80098ee:	4620      	mov	r0, r4
 80098f0:	f001 fe90 	bl	800b614 <_Bfree>
 80098f4:	9905      	ldr	r1, [sp, #20]
 80098f6:	4620      	mov	r0, r4
 80098f8:	f001 fe8c 	bl	800b614 <_Bfree>
 80098fc:	4631      	mov	r1, r6
 80098fe:	4620      	mov	r0, r4
 8009900:	f001 fe88 	bl	800b614 <_Bfree>
 8009904:	9907      	ldr	r1, [sp, #28]
 8009906:	4620      	mov	r0, r4
 8009908:	f001 fe84 	bl	800b614 <_Bfree>
 800990c:	4629      	mov	r1, r5
 800990e:	4620      	mov	r0, r4
 8009910:	f001 fe80 	bl	800b614 <_Bfree>
 8009914:	e5dc      	b.n	80094d0 <_strtod_l+0x88>
 8009916:	4b36      	ldr	r3, [pc, #216]	; (80099f0 <_strtod_l+0x5a8>)
 8009918:	9304      	str	r3, [sp, #16]
 800991a:	2300      	movs	r3, #0
 800991c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009920:	4650      	mov	r0, sl
 8009922:	4659      	mov	r1, fp
 8009924:	4699      	mov	r9, r3
 8009926:	f1b8 0f01 	cmp.w	r8, #1
 800992a:	dc21      	bgt.n	8009970 <_strtod_l+0x528>
 800992c:	b10b      	cbz	r3, 8009932 <_strtod_l+0x4ea>
 800992e:	4682      	mov	sl, r0
 8009930:	468b      	mov	fp, r1
 8009932:	4b2f      	ldr	r3, [pc, #188]	; (80099f0 <_strtod_l+0x5a8>)
 8009934:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009938:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800993c:	4652      	mov	r2, sl
 800993e:	465b      	mov	r3, fp
 8009940:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009944:	f7f6 fe80 	bl	8000648 <__aeabi_dmul>
 8009948:	4b2a      	ldr	r3, [pc, #168]	; (80099f4 <_strtod_l+0x5ac>)
 800994a:	460a      	mov	r2, r1
 800994c:	400b      	ands	r3, r1
 800994e:	492a      	ldr	r1, [pc, #168]	; (80099f8 <_strtod_l+0x5b0>)
 8009950:	428b      	cmp	r3, r1
 8009952:	4682      	mov	sl, r0
 8009954:	d8bc      	bhi.n	80098d0 <_strtod_l+0x488>
 8009956:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800995a:	428b      	cmp	r3, r1
 800995c:	bf86      	itte	hi
 800995e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80099fc <_strtod_l+0x5b4>
 8009962:	f04f 3aff 	movhi.w	sl, #4294967295
 8009966:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800996a:	2300      	movs	r3, #0
 800996c:	9304      	str	r3, [sp, #16]
 800996e:	e084      	b.n	8009a7a <_strtod_l+0x632>
 8009970:	f018 0f01 	tst.w	r8, #1
 8009974:	d005      	beq.n	8009982 <_strtod_l+0x53a>
 8009976:	9b04      	ldr	r3, [sp, #16]
 8009978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997c:	f7f6 fe64 	bl	8000648 <__aeabi_dmul>
 8009980:	2301      	movs	r3, #1
 8009982:	9a04      	ldr	r2, [sp, #16]
 8009984:	3208      	adds	r2, #8
 8009986:	f109 0901 	add.w	r9, r9, #1
 800998a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800998e:	9204      	str	r2, [sp, #16]
 8009990:	e7c9      	b.n	8009926 <_strtod_l+0x4de>
 8009992:	d0ea      	beq.n	800996a <_strtod_l+0x522>
 8009994:	f1c8 0800 	rsb	r8, r8, #0
 8009998:	f018 020f 	ands.w	r2, r8, #15
 800999c:	d00a      	beq.n	80099b4 <_strtod_l+0x56c>
 800999e:	4b13      	ldr	r3, [pc, #76]	; (80099ec <_strtod_l+0x5a4>)
 80099a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099a4:	4650      	mov	r0, sl
 80099a6:	4659      	mov	r1, fp
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	f7f6 ff76 	bl	800089c <__aeabi_ddiv>
 80099b0:	4682      	mov	sl, r0
 80099b2:	468b      	mov	fp, r1
 80099b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80099b8:	d0d7      	beq.n	800996a <_strtod_l+0x522>
 80099ba:	f1b8 0f1f 	cmp.w	r8, #31
 80099be:	dd1f      	ble.n	8009a00 <_strtod_l+0x5b8>
 80099c0:	2500      	movs	r5, #0
 80099c2:	462e      	mov	r6, r5
 80099c4:	9507      	str	r5, [sp, #28]
 80099c6:	9505      	str	r5, [sp, #20]
 80099c8:	2322      	movs	r3, #34	; 0x22
 80099ca:	f04f 0a00 	mov.w	sl, #0
 80099ce:	f04f 0b00 	mov.w	fp, #0
 80099d2:	6023      	str	r3, [r4, #0]
 80099d4:	e786      	b.n	80098e4 <_strtod_l+0x49c>
 80099d6:	bf00      	nop
 80099d8:	0800e535 	.word	0x0800e535
 80099dc:	0800e578 	.word	0x0800e578
 80099e0:	0800e52d 	.word	0x0800e52d
 80099e4:	0800e6bc 	.word	0x0800e6bc
 80099e8:	0800e968 	.word	0x0800e968
 80099ec:	0800e848 	.word	0x0800e848
 80099f0:	0800e820 	.word	0x0800e820
 80099f4:	7ff00000 	.word	0x7ff00000
 80099f8:	7ca00000 	.word	0x7ca00000
 80099fc:	7fefffff 	.word	0x7fefffff
 8009a00:	f018 0310 	ands.w	r3, r8, #16
 8009a04:	bf18      	it	ne
 8009a06:	236a      	movne	r3, #106	; 0x6a
 8009a08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009db8 <_strtod_l+0x970>
 8009a0c:	9304      	str	r3, [sp, #16]
 8009a0e:	4650      	mov	r0, sl
 8009a10:	4659      	mov	r1, fp
 8009a12:	2300      	movs	r3, #0
 8009a14:	f018 0f01 	tst.w	r8, #1
 8009a18:	d004      	beq.n	8009a24 <_strtod_l+0x5dc>
 8009a1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009a1e:	f7f6 fe13 	bl	8000648 <__aeabi_dmul>
 8009a22:	2301      	movs	r3, #1
 8009a24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009a28:	f109 0908 	add.w	r9, r9, #8
 8009a2c:	d1f2      	bne.n	8009a14 <_strtod_l+0x5cc>
 8009a2e:	b10b      	cbz	r3, 8009a34 <_strtod_l+0x5ec>
 8009a30:	4682      	mov	sl, r0
 8009a32:	468b      	mov	fp, r1
 8009a34:	9b04      	ldr	r3, [sp, #16]
 8009a36:	b1c3      	cbz	r3, 8009a6a <_strtod_l+0x622>
 8009a38:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009a3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	4659      	mov	r1, fp
 8009a44:	dd11      	ble.n	8009a6a <_strtod_l+0x622>
 8009a46:	2b1f      	cmp	r3, #31
 8009a48:	f340 8124 	ble.w	8009c94 <_strtod_l+0x84c>
 8009a4c:	2b34      	cmp	r3, #52	; 0x34
 8009a4e:	bfde      	ittt	le
 8009a50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009a54:	f04f 33ff 	movle.w	r3, #4294967295
 8009a58:	fa03 f202 	lslle.w	r2, r3, r2
 8009a5c:	f04f 0a00 	mov.w	sl, #0
 8009a60:	bfcc      	ite	gt
 8009a62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009a66:	ea02 0b01 	andle.w	fp, r2, r1
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	4650      	mov	r0, sl
 8009a70:	4659      	mov	r1, fp
 8009a72:	f7f7 f851 	bl	8000b18 <__aeabi_dcmpeq>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	d1a2      	bne.n	80099c0 <_strtod_l+0x578>
 8009a7a:	9b07      	ldr	r3, [sp, #28]
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	9908      	ldr	r1, [sp, #32]
 8009a80:	462b      	mov	r3, r5
 8009a82:	463a      	mov	r2, r7
 8009a84:	4620      	mov	r0, r4
 8009a86:	f001 fe2d 	bl	800b6e4 <__s2b>
 8009a8a:	9007      	str	r0, [sp, #28]
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	f43f af1f 	beq.w	80098d0 <_strtod_l+0x488>
 8009a92:	9b05      	ldr	r3, [sp, #20]
 8009a94:	1b9e      	subs	r6, r3, r6
 8009a96:	9b06      	ldr	r3, [sp, #24]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	bfb4      	ite	lt
 8009a9c:	4633      	movlt	r3, r6
 8009a9e:	2300      	movge	r3, #0
 8009aa0:	930c      	str	r3, [sp, #48]	; 0x30
 8009aa2:	9b06      	ldr	r3, [sp, #24]
 8009aa4:	2500      	movs	r5, #0
 8009aa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009aaa:	9312      	str	r3, [sp, #72]	; 0x48
 8009aac:	462e      	mov	r6, r5
 8009aae:	9b07      	ldr	r3, [sp, #28]
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	6859      	ldr	r1, [r3, #4]
 8009ab4:	f001 fd6e 	bl	800b594 <_Balloc>
 8009ab8:	9005      	str	r0, [sp, #20]
 8009aba:	2800      	cmp	r0, #0
 8009abc:	f43f af0c 	beq.w	80098d8 <_strtod_l+0x490>
 8009ac0:	9b07      	ldr	r3, [sp, #28]
 8009ac2:	691a      	ldr	r2, [r3, #16]
 8009ac4:	3202      	adds	r2, #2
 8009ac6:	f103 010c 	add.w	r1, r3, #12
 8009aca:	0092      	lsls	r2, r2, #2
 8009acc:	300c      	adds	r0, #12
 8009ace:	f001 fd53 	bl	800b578 <memcpy>
 8009ad2:	ec4b ab10 	vmov	d0, sl, fp
 8009ad6:	aa1a      	add	r2, sp, #104	; 0x68
 8009ad8:	a919      	add	r1, sp, #100	; 0x64
 8009ada:	4620      	mov	r0, r4
 8009adc:	f002 f948 	bl	800bd70 <__d2b>
 8009ae0:	ec4b ab18 	vmov	d8, sl, fp
 8009ae4:	9018      	str	r0, [sp, #96]	; 0x60
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	f43f aef6 	beq.w	80098d8 <_strtod_l+0x490>
 8009aec:	2101      	movs	r1, #1
 8009aee:	4620      	mov	r0, r4
 8009af0:	f001 fe92 	bl	800b818 <__i2b>
 8009af4:	4606      	mov	r6, r0
 8009af6:	2800      	cmp	r0, #0
 8009af8:	f43f aeee 	beq.w	80098d8 <_strtod_l+0x490>
 8009afc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009afe:	9904      	ldr	r1, [sp, #16]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	bfab      	itete	ge
 8009b04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009b06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009b08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009b0a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009b0e:	bfac      	ite	ge
 8009b10:	eb03 0902 	addge.w	r9, r3, r2
 8009b14:	1ad7      	sublt	r7, r2, r3
 8009b16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b18:	eba3 0801 	sub.w	r8, r3, r1
 8009b1c:	4490      	add	r8, r2
 8009b1e:	4ba1      	ldr	r3, [pc, #644]	; (8009da4 <_strtod_l+0x95c>)
 8009b20:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b24:	4598      	cmp	r8, r3
 8009b26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009b2a:	f280 80c7 	bge.w	8009cbc <_strtod_l+0x874>
 8009b2e:	eba3 0308 	sub.w	r3, r3, r8
 8009b32:	2b1f      	cmp	r3, #31
 8009b34:	eba2 0203 	sub.w	r2, r2, r3
 8009b38:	f04f 0101 	mov.w	r1, #1
 8009b3c:	f300 80b1 	bgt.w	8009ca2 <_strtod_l+0x85a>
 8009b40:	fa01 f303 	lsl.w	r3, r1, r3
 8009b44:	930d      	str	r3, [sp, #52]	; 0x34
 8009b46:	2300      	movs	r3, #0
 8009b48:	9308      	str	r3, [sp, #32]
 8009b4a:	eb09 0802 	add.w	r8, r9, r2
 8009b4e:	9b04      	ldr	r3, [sp, #16]
 8009b50:	45c1      	cmp	r9, r8
 8009b52:	4417      	add	r7, r2
 8009b54:	441f      	add	r7, r3
 8009b56:	464b      	mov	r3, r9
 8009b58:	bfa8      	it	ge
 8009b5a:	4643      	movge	r3, r8
 8009b5c:	42bb      	cmp	r3, r7
 8009b5e:	bfa8      	it	ge
 8009b60:	463b      	movge	r3, r7
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	bfc2      	ittt	gt
 8009b66:	eba8 0803 	subgt.w	r8, r8, r3
 8009b6a:	1aff      	subgt	r7, r7, r3
 8009b6c:	eba9 0903 	subgt.w	r9, r9, r3
 8009b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	dd17      	ble.n	8009ba6 <_strtod_l+0x75e>
 8009b76:	4631      	mov	r1, r6
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f001 ff0c 	bl	800b998 <__pow5mult>
 8009b80:	4606      	mov	r6, r0
 8009b82:	2800      	cmp	r0, #0
 8009b84:	f43f aea8 	beq.w	80098d8 <_strtod_l+0x490>
 8009b88:	4601      	mov	r1, r0
 8009b8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f001 fe59 	bl	800b844 <__multiply>
 8009b92:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b94:	2800      	cmp	r0, #0
 8009b96:	f43f ae9f 	beq.w	80098d8 <_strtod_l+0x490>
 8009b9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f001 fd39 	bl	800b614 <_Bfree>
 8009ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ba4:	9318      	str	r3, [sp, #96]	; 0x60
 8009ba6:	f1b8 0f00 	cmp.w	r8, #0
 8009baa:	f300 808c 	bgt.w	8009cc6 <_strtod_l+0x87e>
 8009bae:	9b06      	ldr	r3, [sp, #24]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	dd08      	ble.n	8009bc6 <_strtod_l+0x77e>
 8009bb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bb6:	9905      	ldr	r1, [sp, #20]
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f001 feed 	bl	800b998 <__pow5mult>
 8009bbe:	9005      	str	r0, [sp, #20]
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	f43f ae89 	beq.w	80098d8 <_strtod_l+0x490>
 8009bc6:	2f00      	cmp	r7, #0
 8009bc8:	dd08      	ble.n	8009bdc <_strtod_l+0x794>
 8009bca:	9905      	ldr	r1, [sp, #20]
 8009bcc:	463a      	mov	r2, r7
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f001 ff3c 	bl	800ba4c <__lshift>
 8009bd4:	9005      	str	r0, [sp, #20]
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	f43f ae7e 	beq.w	80098d8 <_strtod_l+0x490>
 8009bdc:	f1b9 0f00 	cmp.w	r9, #0
 8009be0:	dd08      	ble.n	8009bf4 <_strtod_l+0x7ac>
 8009be2:	4631      	mov	r1, r6
 8009be4:	464a      	mov	r2, r9
 8009be6:	4620      	mov	r0, r4
 8009be8:	f001 ff30 	bl	800ba4c <__lshift>
 8009bec:	4606      	mov	r6, r0
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	f43f ae72 	beq.w	80098d8 <_strtod_l+0x490>
 8009bf4:	9a05      	ldr	r2, [sp, #20]
 8009bf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f001 ffb3 	bl	800bb64 <__mdiff>
 8009bfe:	4605      	mov	r5, r0
 8009c00:	2800      	cmp	r0, #0
 8009c02:	f43f ae69 	beq.w	80098d8 <_strtod_l+0x490>
 8009c06:	68c3      	ldr	r3, [r0, #12]
 8009c08:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60c3      	str	r3, [r0, #12]
 8009c0e:	4631      	mov	r1, r6
 8009c10:	f001 ff8c 	bl	800bb2c <__mcmp>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	da60      	bge.n	8009cda <_strtod_l+0x892>
 8009c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c1a:	ea53 030a 	orrs.w	r3, r3, sl
 8009c1e:	f040 8082 	bne.w	8009d26 <_strtod_l+0x8de>
 8009c22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d17d      	bne.n	8009d26 <_strtod_l+0x8de>
 8009c2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c2e:	0d1b      	lsrs	r3, r3, #20
 8009c30:	051b      	lsls	r3, r3, #20
 8009c32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009c36:	d976      	bls.n	8009d26 <_strtod_l+0x8de>
 8009c38:	696b      	ldr	r3, [r5, #20]
 8009c3a:	b913      	cbnz	r3, 8009c42 <_strtod_l+0x7fa>
 8009c3c:	692b      	ldr	r3, [r5, #16]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	dd71      	ble.n	8009d26 <_strtod_l+0x8de>
 8009c42:	4629      	mov	r1, r5
 8009c44:	2201      	movs	r2, #1
 8009c46:	4620      	mov	r0, r4
 8009c48:	f001 ff00 	bl	800ba4c <__lshift>
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4605      	mov	r5, r0
 8009c50:	f001 ff6c 	bl	800bb2c <__mcmp>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	dd66      	ble.n	8009d26 <_strtod_l+0x8de>
 8009c58:	9904      	ldr	r1, [sp, #16]
 8009c5a:	4a53      	ldr	r2, [pc, #332]	; (8009da8 <_strtod_l+0x960>)
 8009c5c:	465b      	mov	r3, fp
 8009c5e:	2900      	cmp	r1, #0
 8009c60:	f000 8081 	beq.w	8009d66 <_strtod_l+0x91e>
 8009c64:	ea02 010b 	and.w	r1, r2, fp
 8009c68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009c6c:	dc7b      	bgt.n	8009d66 <_strtod_l+0x91e>
 8009c6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009c72:	f77f aea9 	ble.w	80099c8 <_strtod_l+0x580>
 8009c76:	4b4d      	ldr	r3, [pc, #308]	; (8009dac <_strtod_l+0x964>)
 8009c78:	4650      	mov	r0, sl
 8009c7a:	4659      	mov	r1, fp
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f7f6 fce3 	bl	8000648 <__aeabi_dmul>
 8009c82:	460b      	mov	r3, r1
 8009c84:	4303      	orrs	r3, r0
 8009c86:	bf08      	it	eq
 8009c88:	2322      	moveq	r3, #34	; 0x22
 8009c8a:	4682      	mov	sl, r0
 8009c8c:	468b      	mov	fp, r1
 8009c8e:	bf08      	it	eq
 8009c90:	6023      	streq	r3, [r4, #0]
 8009c92:	e62b      	b.n	80098ec <_strtod_l+0x4a4>
 8009c94:	f04f 32ff 	mov.w	r2, #4294967295
 8009c98:	fa02 f303 	lsl.w	r3, r2, r3
 8009c9c:	ea03 0a0a 	and.w	sl, r3, sl
 8009ca0:	e6e3      	b.n	8009a6a <_strtod_l+0x622>
 8009ca2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009ca6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009caa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009cae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009cb2:	fa01 f308 	lsl.w	r3, r1, r8
 8009cb6:	9308      	str	r3, [sp, #32]
 8009cb8:	910d      	str	r1, [sp, #52]	; 0x34
 8009cba:	e746      	b.n	8009b4a <_strtod_l+0x702>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	9308      	str	r3, [sp, #32]
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	930d      	str	r3, [sp, #52]	; 0x34
 8009cc4:	e741      	b.n	8009b4a <_strtod_l+0x702>
 8009cc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009cc8:	4642      	mov	r2, r8
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f001 febe 	bl	800ba4c <__lshift>
 8009cd0:	9018      	str	r0, [sp, #96]	; 0x60
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	f47f af6b 	bne.w	8009bae <_strtod_l+0x766>
 8009cd8:	e5fe      	b.n	80098d8 <_strtod_l+0x490>
 8009cda:	465f      	mov	r7, fp
 8009cdc:	d16e      	bne.n	8009dbc <_strtod_l+0x974>
 8009cde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ce0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ce4:	b342      	cbz	r2, 8009d38 <_strtod_l+0x8f0>
 8009ce6:	4a32      	ldr	r2, [pc, #200]	; (8009db0 <_strtod_l+0x968>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d128      	bne.n	8009d3e <_strtod_l+0x8f6>
 8009cec:	9b04      	ldr	r3, [sp, #16]
 8009cee:	4651      	mov	r1, sl
 8009cf0:	b1eb      	cbz	r3, 8009d2e <_strtod_l+0x8e6>
 8009cf2:	4b2d      	ldr	r3, [pc, #180]	; (8009da8 <_strtod_l+0x960>)
 8009cf4:	403b      	ands	r3, r7
 8009cf6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8009cfe:	d819      	bhi.n	8009d34 <_strtod_l+0x8ec>
 8009d00:	0d1b      	lsrs	r3, r3, #20
 8009d02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d06:	fa02 f303 	lsl.w	r3, r2, r3
 8009d0a:	4299      	cmp	r1, r3
 8009d0c:	d117      	bne.n	8009d3e <_strtod_l+0x8f6>
 8009d0e:	4b29      	ldr	r3, [pc, #164]	; (8009db4 <_strtod_l+0x96c>)
 8009d10:	429f      	cmp	r7, r3
 8009d12:	d102      	bne.n	8009d1a <_strtod_l+0x8d2>
 8009d14:	3101      	adds	r1, #1
 8009d16:	f43f addf 	beq.w	80098d8 <_strtod_l+0x490>
 8009d1a:	4b23      	ldr	r3, [pc, #140]	; (8009da8 <_strtod_l+0x960>)
 8009d1c:	403b      	ands	r3, r7
 8009d1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009d22:	f04f 0a00 	mov.w	sl, #0
 8009d26:	9b04      	ldr	r3, [sp, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1a4      	bne.n	8009c76 <_strtod_l+0x82e>
 8009d2c:	e5de      	b.n	80098ec <_strtod_l+0x4a4>
 8009d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d32:	e7ea      	b.n	8009d0a <_strtod_l+0x8c2>
 8009d34:	4613      	mov	r3, r2
 8009d36:	e7e8      	b.n	8009d0a <_strtod_l+0x8c2>
 8009d38:	ea53 030a 	orrs.w	r3, r3, sl
 8009d3c:	d08c      	beq.n	8009c58 <_strtod_l+0x810>
 8009d3e:	9b08      	ldr	r3, [sp, #32]
 8009d40:	b1db      	cbz	r3, 8009d7a <_strtod_l+0x932>
 8009d42:	423b      	tst	r3, r7
 8009d44:	d0ef      	beq.n	8009d26 <_strtod_l+0x8de>
 8009d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d48:	9a04      	ldr	r2, [sp, #16]
 8009d4a:	4650      	mov	r0, sl
 8009d4c:	4659      	mov	r1, fp
 8009d4e:	b1c3      	cbz	r3, 8009d82 <_strtod_l+0x93a>
 8009d50:	f7ff fb5c 	bl	800940c <sulp>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	ec51 0b18 	vmov	r0, r1, d8
 8009d5c:	f7f6 fabe 	bl	80002dc <__adddf3>
 8009d60:	4682      	mov	sl, r0
 8009d62:	468b      	mov	fp, r1
 8009d64:	e7df      	b.n	8009d26 <_strtod_l+0x8de>
 8009d66:	4013      	ands	r3, r2
 8009d68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009d6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009d70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009d74:	f04f 3aff 	mov.w	sl, #4294967295
 8009d78:	e7d5      	b.n	8009d26 <_strtod_l+0x8de>
 8009d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d7c:	ea13 0f0a 	tst.w	r3, sl
 8009d80:	e7e0      	b.n	8009d44 <_strtod_l+0x8fc>
 8009d82:	f7ff fb43 	bl	800940c <sulp>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	ec51 0b18 	vmov	r0, r1, d8
 8009d8e:	f7f6 faa3 	bl	80002d8 <__aeabi_dsub>
 8009d92:	2200      	movs	r2, #0
 8009d94:	2300      	movs	r3, #0
 8009d96:	4682      	mov	sl, r0
 8009d98:	468b      	mov	fp, r1
 8009d9a:	f7f6 febd 	bl	8000b18 <__aeabi_dcmpeq>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d0c1      	beq.n	8009d26 <_strtod_l+0x8de>
 8009da2:	e611      	b.n	80099c8 <_strtod_l+0x580>
 8009da4:	fffffc02 	.word	0xfffffc02
 8009da8:	7ff00000 	.word	0x7ff00000
 8009dac:	39500000 	.word	0x39500000
 8009db0:	000fffff 	.word	0x000fffff
 8009db4:	7fefffff 	.word	0x7fefffff
 8009db8:	0800e590 	.word	0x0800e590
 8009dbc:	4631      	mov	r1, r6
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	f002 f832 	bl	800be28 <__ratio>
 8009dc4:	ec59 8b10 	vmov	r8, r9, d0
 8009dc8:	ee10 0a10 	vmov	r0, s0
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009dd2:	4649      	mov	r1, r9
 8009dd4:	f7f6 feb4 	bl	8000b40 <__aeabi_dcmple>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d07a      	beq.n	8009ed2 <_strtod_l+0xa8a>
 8009ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d04a      	beq.n	8009e78 <_strtod_l+0xa30>
 8009de2:	4b95      	ldr	r3, [pc, #596]	; (800a038 <_strtod_l+0xbf0>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009dea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a038 <_strtod_l+0xbf0>
 8009dee:	f04f 0800 	mov.w	r8, #0
 8009df2:	4b92      	ldr	r3, [pc, #584]	; (800a03c <_strtod_l+0xbf4>)
 8009df4:	403b      	ands	r3, r7
 8009df6:	930d      	str	r3, [sp, #52]	; 0x34
 8009df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dfa:	4b91      	ldr	r3, [pc, #580]	; (800a040 <_strtod_l+0xbf8>)
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	f040 80b0 	bne.w	8009f62 <_strtod_l+0xb1a>
 8009e02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e06:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009e0a:	ec4b ab10 	vmov	d0, sl, fp
 8009e0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e12:	f001 ff31 	bl	800bc78 <__ulp>
 8009e16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e1a:	ec53 2b10 	vmov	r2, r3, d0
 8009e1e:	f7f6 fc13 	bl	8000648 <__aeabi_dmul>
 8009e22:	4652      	mov	r2, sl
 8009e24:	465b      	mov	r3, fp
 8009e26:	f7f6 fa59 	bl	80002dc <__adddf3>
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4983      	ldr	r1, [pc, #524]	; (800a03c <_strtod_l+0xbf4>)
 8009e2e:	4a85      	ldr	r2, [pc, #532]	; (800a044 <_strtod_l+0xbfc>)
 8009e30:	4019      	ands	r1, r3
 8009e32:	4291      	cmp	r1, r2
 8009e34:	4682      	mov	sl, r0
 8009e36:	d960      	bls.n	8009efa <_strtod_l+0xab2>
 8009e38:	ee18 3a90 	vmov	r3, s17
 8009e3c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d104      	bne.n	8009e4e <_strtod_l+0xa06>
 8009e44:	ee18 3a10 	vmov	r3, s16
 8009e48:	3301      	adds	r3, #1
 8009e4a:	f43f ad45 	beq.w	80098d8 <_strtod_l+0x490>
 8009e4e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a050 <_strtod_l+0xc08>
 8009e52:	f04f 3aff 	mov.w	sl, #4294967295
 8009e56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f001 fbdb 	bl	800b614 <_Bfree>
 8009e5e:	9905      	ldr	r1, [sp, #20]
 8009e60:	4620      	mov	r0, r4
 8009e62:	f001 fbd7 	bl	800b614 <_Bfree>
 8009e66:	4631      	mov	r1, r6
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f001 fbd3 	bl	800b614 <_Bfree>
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4620      	mov	r0, r4
 8009e72:	f001 fbcf 	bl	800b614 <_Bfree>
 8009e76:	e61a      	b.n	8009aae <_strtod_l+0x666>
 8009e78:	f1ba 0f00 	cmp.w	sl, #0
 8009e7c:	d11b      	bne.n	8009eb6 <_strtod_l+0xa6e>
 8009e7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e82:	b9f3      	cbnz	r3, 8009ec2 <_strtod_l+0xa7a>
 8009e84:	4b6c      	ldr	r3, [pc, #432]	; (800a038 <_strtod_l+0xbf0>)
 8009e86:	2200      	movs	r2, #0
 8009e88:	4640      	mov	r0, r8
 8009e8a:	4649      	mov	r1, r9
 8009e8c:	f7f6 fe4e 	bl	8000b2c <__aeabi_dcmplt>
 8009e90:	b9d0      	cbnz	r0, 8009ec8 <_strtod_l+0xa80>
 8009e92:	4640      	mov	r0, r8
 8009e94:	4649      	mov	r1, r9
 8009e96:	4b6c      	ldr	r3, [pc, #432]	; (800a048 <_strtod_l+0xc00>)
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f7f6 fbd5 	bl	8000648 <__aeabi_dmul>
 8009e9e:	4680      	mov	r8, r0
 8009ea0:	4689      	mov	r9, r1
 8009ea2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009ea6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009eaa:	9315      	str	r3, [sp, #84]	; 0x54
 8009eac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009eb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009eb4:	e79d      	b.n	8009df2 <_strtod_l+0x9aa>
 8009eb6:	f1ba 0f01 	cmp.w	sl, #1
 8009eba:	d102      	bne.n	8009ec2 <_strtod_l+0xa7a>
 8009ebc:	2f00      	cmp	r7, #0
 8009ebe:	f43f ad83 	beq.w	80099c8 <_strtod_l+0x580>
 8009ec2:	4b62      	ldr	r3, [pc, #392]	; (800a04c <_strtod_l+0xc04>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	e78e      	b.n	8009de6 <_strtod_l+0x99e>
 8009ec8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a048 <_strtod_l+0xc00>
 8009ecc:	f04f 0800 	mov.w	r8, #0
 8009ed0:	e7e7      	b.n	8009ea2 <_strtod_l+0xa5a>
 8009ed2:	4b5d      	ldr	r3, [pc, #372]	; (800a048 <_strtod_l+0xc00>)
 8009ed4:	4640      	mov	r0, r8
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f7f6 fbb5 	bl	8000648 <__aeabi_dmul>
 8009ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ee0:	4680      	mov	r8, r0
 8009ee2:	4689      	mov	r9, r1
 8009ee4:	b933      	cbnz	r3, 8009ef4 <_strtod_l+0xaac>
 8009ee6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009eea:	900e      	str	r0, [sp, #56]	; 0x38
 8009eec:	930f      	str	r3, [sp, #60]	; 0x3c
 8009eee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009ef2:	e7dd      	b.n	8009eb0 <_strtod_l+0xa68>
 8009ef4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009ef8:	e7f9      	b.n	8009eee <_strtod_l+0xaa6>
 8009efa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009efe:	9b04      	ldr	r3, [sp, #16]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1a8      	bne.n	8009e56 <_strtod_l+0xa0e>
 8009f04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f0a:	0d1b      	lsrs	r3, r3, #20
 8009f0c:	051b      	lsls	r3, r3, #20
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d1a1      	bne.n	8009e56 <_strtod_l+0xa0e>
 8009f12:	4640      	mov	r0, r8
 8009f14:	4649      	mov	r1, r9
 8009f16:	f7f6 fef7 	bl	8000d08 <__aeabi_d2lz>
 8009f1a:	f7f6 fb67 	bl	80005ec <__aeabi_l2d>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	460b      	mov	r3, r1
 8009f22:	4640      	mov	r0, r8
 8009f24:	4649      	mov	r1, r9
 8009f26:	f7f6 f9d7 	bl	80002d8 <__aeabi_dsub>
 8009f2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f30:	ea43 030a 	orr.w	r3, r3, sl
 8009f34:	4313      	orrs	r3, r2
 8009f36:	4680      	mov	r8, r0
 8009f38:	4689      	mov	r9, r1
 8009f3a:	d055      	beq.n	8009fe8 <_strtod_l+0xba0>
 8009f3c:	a336      	add	r3, pc, #216	; (adr r3, 800a018 <_strtod_l+0xbd0>)
 8009f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f42:	f7f6 fdf3 	bl	8000b2c <__aeabi_dcmplt>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	f47f acd0 	bne.w	80098ec <_strtod_l+0x4a4>
 8009f4c:	a334      	add	r3, pc, #208	; (adr r3, 800a020 <_strtod_l+0xbd8>)
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	4640      	mov	r0, r8
 8009f54:	4649      	mov	r1, r9
 8009f56:	f7f6 fe07 	bl	8000b68 <__aeabi_dcmpgt>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	f43f af7b 	beq.w	8009e56 <_strtod_l+0xa0e>
 8009f60:	e4c4      	b.n	80098ec <_strtod_l+0x4a4>
 8009f62:	9b04      	ldr	r3, [sp, #16]
 8009f64:	b333      	cbz	r3, 8009fb4 <_strtod_l+0xb6c>
 8009f66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009f6c:	d822      	bhi.n	8009fb4 <_strtod_l+0xb6c>
 8009f6e:	a32e      	add	r3, pc, #184	; (adr r3, 800a028 <_strtod_l+0xbe0>)
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	4640      	mov	r0, r8
 8009f76:	4649      	mov	r1, r9
 8009f78:	f7f6 fde2 	bl	8000b40 <__aeabi_dcmple>
 8009f7c:	b1a0      	cbz	r0, 8009fa8 <_strtod_l+0xb60>
 8009f7e:	4649      	mov	r1, r9
 8009f80:	4640      	mov	r0, r8
 8009f82:	f7f6 fe39 	bl	8000bf8 <__aeabi_d2uiz>
 8009f86:	2801      	cmp	r0, #1
 8009f88:	bf38      	it	cc
 8009f8a:	2001      	movcc	r0, #1
 8009f8c:	f7f6 fae2 	bl	8000554 <__aeabi_ui2d>
 8009f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f92:	4680      	mov	r8, r0
 8009f94:	4689      	mov	r9, r1
 8009f96:	bb23      	cbnz	r3, 8009fe2 <_strtod_l+0xb9a>
 8009f98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f9c:	9010      	str	r0, [sp, #64]	; 0x40
 8009f9e:	9311      	str	r3, [sp, #68]	; 0x44
 8009fa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009fa4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009faa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009fb0:	1a9b      	subs	r3, r3, r2
 8009fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009fb8:	eeb0 0a48 	vmov.f32	s0, s16
 8009fbc:	eef0 0a68 	vmov.f32	s1, s17
 8009fc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009fc4:	f001 fe58 	bl	800bc78 <__ulp>
 8009fc8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009fcc:	ec53 2b10 	vmov	r2, r3, d0
 8009fd0:	f7f6 fb3a 	bl	8000648 <__aeabi_dmul>
 8009fd4:	ec53 2b18 	vmov	r2, r3, d8
 8009fd8:	f7f6 f980 	bl	80002dc <__adddf3>
 8009fdc:	4682      	mov	sl, r0
 8009fde:	468b      	mov	fp, r1
 8009fe0:	e78d      	b.n	8009efe <_strtod_l+0xab6>
 8009fe2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009fe6:	e7db      	b.n	8009fa0 <_strtod_l+0xb58>
 8009fe8:	a311      	add	r3, pc, #68	; (adr r3, 800a030 <_strtod_l+0xbe8>)
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	f7f6 fd9d 	bl	8000b2c <__aeabi_dcmplt>
 8009ff2:	e7b2      	b.n	8009f5a <_strtod_l+0xb12>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ff8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ffa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	f7ff ba6b 	b.w	80094d8 <_strtod_l+0x90>
 800a002:	2a65      	cmp	r2, #101	; 0x65
 800a004:	f43f ab5f 	beq.w	80096c6 <_strtod_l+0x27e>
 800a008:	2a45      	cmp	r2, #69	; 0x45
 800a00a:	f43f ab5c 	beq.w	80096c6 <_strtod_l+0x27e>
 800a00e:	2301      	movs	r3, #1
 800a010:	f7ff bb94 	b.w	800973c <_strtod_l+0x2f4>
 800a014:	f3af 8000 	nop.w
 800a018:	94a03595 	.word	0x94a03595
 800a01c:	3fdfffff 	.word	0x3fdfffff
 800a020:	35afe535 	.word	0x35afe535
 800a024:	3fe00000 	.word	0x3fe00000
 800a028:	ffc00000 	.word	0xffc00000
 800a02c:	41dfffff 	.word	0x41dfffff
 800a030:	94a03595 	.word	0x94a03595
 800a034:	3fcfffff 	.word	0x3fcfffff
 800a038:	3ff00000 	.word	0x3ff00000
 800a03c:	7ff00000 	.word	0x7ff00000
 800a040:	7fe00000 	.word	0x7fe00000
 800a044:	7c9fffff 	.word	0x7c9fffff
 800a048:	3fe00000 	.word	0x3fe00000
 800a04c:	bff00000 	.word	0xbff00000
 800a050:	7fefffff 	.word	0x7fefffff

0800a054 <_strtod_r>:
 800a054:	4b01      	ldr	r3, [pc, #4]	; (800a05c <_strtod_r+0x8>)
 800a056:	f7ff b9f7 	b.w	8009448 <_strtod_l>
 800a05a:	bf00      	nop
 800a05c:	20000084 	.word	0x20000084

0800a060 <_strtol_l.constprop.0>:
 800a060:	2b01      	cmp	r3, #1
 800a062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a066:	d001      	beq.n	800a06c <_strtol_l.constprop.0+0xc>
 800a068:	2b24      	cmp	r3, #36	; 0x24
 800a06a:	d906      	bls.n	800a07a <_strtol_l.constprop.0+0x1a>
 800a06c:	f7fe fafc 	bl	8008668 <__errno>
 800a070:	2316      	movs	r3, #22
 800a072:	6003      	str	r3, [r0, #0]
 800a074:	2000      	movs	r0, #0
 800a076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a07a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a160 <_strtol_l.constprop.0+0x100>
 800a07e:	460d      	mov	r5, r1
 800a080:	462e      	mov	r6, r5
 800a082:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a086:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a08a:	f017 0708 	ands.w	r7, r7, #8
 800a08e:	d1f7      	bne.n	800a080 <_strtol_l.constprop.0+0x20>
 800a090:	2c2d      	cmp	r4, #45	; 0x2d
 800a092:	d132      	bne.n	800a0fa <_strtol_l.constprop.0+0x9a>
 800a094:	782c      	ldrb	r4, [r5, #0]
 800a096:	2701      	movs	r7, #1
 800a098:	1cb5      	adds	r5, r6, #2
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d05b      	beq.n	800a156 <_strtol_l.constprop.0+0xf6>
 800a09e:	2b10      	cmp	r3, #16
 800a0a0:	d109      	bne.n	800a0b6 <_strtol_l.constprop.0+0x56>
 800a0a2:	2c30      	cmp	r4, #48	; 0x30
 800a0a4:	d107      	bne.n	800a0b6 <_strtol_l.constprop.0+0x56>
 800a0a6:	782c      	ldrb	r4, [r5, #0]
 800a0a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a0ac:	2c58      	cmp	r4, #88	; 0x58
 800a0ae:	d14d      	bne.n	800a14c <_strtol_l.constprop.0+0xec>
 800a0b0:	786c      	ldrb	r4, [r5, #1]
 800a0b2:	2310      	movs	r3, #16
 800a0b4:	3502      	adds	r5, #2
 800a0b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a0ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800a0be:	f04f 0c00 	mov.w	ip, #0
 800a0c2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a0c6:	4666      	mov	r6, ip
 800a0c8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a0cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a0d0:	f1be 0f09 	cmp.w	lr, #9
 800a0d4:	d816      	bhi.n	800a104 <_strtol_l.constprop.0+0xa4>
 800a0d6:	4674      	mov	r4, lr
 800a0d8:	42a3      	cmp	r3, r4
 800a0da:	dd24      	ble.n	800a126 <_strtol_l.constprop.0+0xc6>
 800a0dc:	f1bc 0f00 	cmp.w	ip, #0
 800a0e0:	db1e      	blt.n	800a120 <_strtol_l.constprop.0+0xc0>
 800a0e2:	45b1      	cmp	r9, r6
 800a0e4:	d31c      	bcc.n	800a120 <_strtol_l.constprop.0+0xc0>
 800a0e6:	d101      	bne.n	800a0ec <_strtol_l.constprop.0+0x8c>
 800a0e8:	45a2      	cmp	sl, r4
 800a0ea:	db19      	blt.n	800a120 <_strtol_l.constprop.0+0xc0>
 800a0ec:	fb06 4603 	mla	r6, r6, r3, r4
 800a0f0:	f04f 0c01 	mov.w	ip, #1
 800a0f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0f8:	e7e8      	b.n	800a0cc <_strtol_l.constprop.0+0x6c>
 800a0fa:	2c2b      	cmp	r4, #43	; 0x2b
 800a0fc:	bf04      	itt	eq
 800a0fe:	782c      	ldrbeq	r4, [r5, #0]
 800a100:	1cb5      	addeq	r5, r6, #2
 800a102:	e7ca      	b.n	800a09a <_strtol_l.constprop.0+0x3a>
 800a104:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a108:	f1be 0f19 	cmp.w	lr, #25
 800a10c:	d801      	bhi.n	800a112 <_strtol_l.constprop.0+0xb2>
 800a10e:	3c37      	subs	r4, #55	; 0x37
 800a110:	e7e2      	b.n	800a0d8 <_strtol_l.constprop.0+0x78>
 800a112:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a116:	f1be 0f19 	cmp.w	lr, #25
 800a11a:	d804      	bhi.n	800a126 <_strtol_l.constprop.0+0xc6>
 800a11c:	3c57      	subs	r4, #87	; 0x57
 800a11e:	e7db      	b.n	800a0d8 <_strtol_l.constprop.0+0x78>
 800a120:	f04f 3cff 	mov.w	ip, #4294967295
 800a124:	e7e6      	b.n	800a0f4 <_strtol_l.constprop.0+0x94>
 800a126:	f1bc 0f00 	cmp.w	ip, #0
 800a12a:	da05      	bge.n	800a138 <_strtol_l.constprop.0+0xd8>
 800a12c:	2322      	movs	r3, #34	; 0x22
 800a12e:	6003      	str	r3, [r0, #0]
 800a130:	4646      	mov	r6, r8
 800a132:	b942      	cbnz	r2, 800a146 <_strtol_l.constprop.0+0xe6>
 800a134:	4630      	mov	r0, r6
 800a136:	e79e      	b.n	800a076 <_strtol_l.constprop.0+0x16>
 800a138:	b107      	cbz	r7, 800a13c <_strtol_l.constprop.0+0xdc>
 800a13a:	4276      	negs	r6, r6
 800a13c:	2a00      	cmp	r2, #0
 800a13e:	d0f9      	beq.n	800a134 <_strtol_l.constprop.0+0xd4>
 800a140:	f1bc 0f00 	cmp.w	ip, #0
 800a144:	d000      	beq.n	800a148 <_strtol_l.constprop.0+0xe8>
 800a146:	1e69      	subs	r1, r5, #1
 800a148:	6011      	str	r1, [r2, #0]
 800a14a:	e7f3      	b.n	800a134 <_strtol_l.constprop.0+0xd4>
 800a14c:	2430      	movs	r4, #48	; 0x30
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1b1      	bne.n	800a0b6 <_strtol_l.constprop.0+0x56>
 800a152:	2308      	movs	r3, #8
 800a154:	e7af      	b.n	800a0b6 <_strtol_l.constprop.0+0x56>
 800a156:	2c30      	cmp	r4, #48	; 0x30
 800a158:	d0a5      	beq.n	800a0a6 <_strtol_l.constprop.0+0x46>
 800a15a:	230a      	movs	r3, #10
 800a15c:	e7ab      	b.n	800a0b6 <_strtol_l.constprop.0+0x56>
 800a15e:	bf00      	nop
 800a160:	0800e5b9 	.word	0x0800e5b9

0800a164 <_strtol_r>:
 800a164:	f7ff bf7c 	b.w	800a060 <_strtol_l.constprop.0>

0800a168 <quorem>:
 800a168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16c:	6903      	ldr	r3, [r0, #16]
 800a16e:	690c      	ldr	r4, [r1, #16]
 800a170:	42a3      	cmp	r3, r4
 800a172:	4607      	mov	r7, r0
 800a174:	f2c0 8081 	blt.w	800a27a <quorem+0x112>
 800a178:	3c01      	subs	r4, #1
 800a17a:	f101 0814 	add.w	r8, r1, #20
 800a17e:	f100 0514 	add.w	r5, r0, #20
 800a182:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a186:	9301      	str	r3, [sp, #4]
 800a188:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a18c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a190:	3301      	adds	r3, #1
 800a192:	429a      	cmp	r2, r3
 800a194:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a198:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a19c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1a0:	d331      	bcc.n	800a206 <quorem+0x9e>
 800a1a2:	f04f 0e00 	mov.w	lr, #0
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	46ac      	mov	ip, r5
 800a1aa:	46f2      	mov	sl, lr
 800a1ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1b0:	b293      	uxth	r3, r2
 800a1b2:	fb06 e303 	mla	r3, r6, r3, lr
 800a1b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	ebaa 0303 	sub.w	r3, sl, r3
 800a1c0:	f8dc a000 	ldr.w	sl, [ip]
 800a1c4:	0c12      	lsrs	r2, r2, #16
 800a1c6:	fa13 f38a 	uxtah	r3, r3, sl
 800a1ca:	fb06 e202 	mla	r2, r6, r2, lr
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	9b00      	ldr	r3, [sp, #0]
 800a1d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1d6:	b292      	uxth	r2, r2
 800a1d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a1dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1e0:	f8bd 3000 	ldrh.w	r3, [sp]
 800a1e4:	4581      	cmp	r9, r0
 800a1e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1ea:	f84c 3b04 	str.w	r3, [ip], #4
 800a1ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1f2:	d2db      	bcs.n	800a1ac <quorem+0x44>
 800a1f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1f8:	b92b      	cbnz	r3, 800a206 <quorem+0x9e>
 800a1fa:	9b01      	ldr	r3, [sp, #4]
 800a1fc:	3b04      	subs	r3, #4
 800a1fe:	429d      	cmp	r5, r3
 800a200:	461a      	mov	r2, r3
 800a202:	d32e      	bcc.n	800a262 <quorem+0xfa>
 800a204:	613c      	str	r4, [r7, #16]
 800a206:	4638      	mov	r0, r7
 800a208:	f001 fc90 	bl	800bb2c <__mcmp>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	db24      	blt.n	800a25a <quorem+0xf2>
 800a210:	3601      	adds	r6, #1
 800a212:	4628      	mov	r0, r5
 800a214:	f04f 0c00 	mov.w	ip, #0
 800a218:	f858 2b04 	ldr.w	r2, [r8], #4
 800a21c:	f8d0 e000 	ldr.w	lr, [r0]
 800a220:	b293      	uxth	r3, r2
 800a222:	ebac 0303 	sub.w	r3, ip, r3
 800a226:	0c12      	lsrs	r2, r2, #16
 800a228:	fa13 f38e 	uxtah	r3, r3, lr
 800a22c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a234:	b29b      	uxth	r3, r3
 800a236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a23a:	45c1      	cmp	r9, r8
 800a23c:	f840 3b04 	str.w	r3, [r0], #4
 800a240:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a244:	d2e8      	bcs.n	800a218 <quorem+0xb0>
 800a246:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a24a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a24e:	b922      	cbnz	r2, 800a25a <quorem+0xf2>
 800a250:	3b04      	subs	r3, #4
 800a252:	429d      	cmp	r5, r3
 800a254:	461a      	mov	r2, r3
 800a256:	d30a      	bcc.n	800a26e <quorem+0x106>
 800a258:	613c      	str	r4, [r7, #16]
 800a25a:	4630      	mov	r0, r6
 800a25c:	b003      	add	sp, #12
 800a25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a262:	6812      	ldr	r2, [r2, #0]
 800a264:	3b04      	subs	r3, #4
 800a266:	2a00      	cmp	r2, #0
 800a268:	d1cc      	bne.n	800a204 <quorem+0x9c>
 800a26a:	3c01      	subs	r4, #1
 800a26c:	e7c7      	b.n	800a1fe <quorem+0x96>
 800a26e:	6812      	ldr	r2, [r2, #0]
 800a270:	3b04      	subs	r3, #4
 800a272:	2a00      	cmp	r2, #0
 800a274:	d1f0      	bne.n	800a258 <quorem+0xf0>
 800a276:	3c01      	subs	r4, #1
 800a278:	e7eb      	b.n	800a252 <quorem+0xea>
 800a27a:	2000      	movs	r0, #0
 800a27c:	e7ee      	b.n	800a25c <quorem+0xf4>
	...

0800a280 <_dtoa_r>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	ed2d 8b04 	vpush	{d8-d9}
 800a288:	ec57 6b10 	vmov	r6, r7, d0
 800a28c:	b093      	sub	sp, #76	; 0x4c
 800a28e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a290:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a294:	9106      	str	r1, [sp, #24]
 800a296:	ee10 aa10 	vmov	sl, s0
 800a29a:	4604      	mov	r4, r0
 800a29c:	9209      	str	r2, [sp, #36]	; 0x24
 800a29e:	930c      	str	r3, [sp, #48]	; 0x30
 800a2a0:	46bb      	mov	fp, r7
 800a2a2:	b975      	cbnz	r5, 800a2c2 <_dtoa_r+0x42>
 800a2a4:	2010      	movs	r0, #16
 800a2a6:	f001 f94d 	bl	800b544 <malloc>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	6260      	str	r0, [r4, #36]	; 0x24
 800a2ae:	b920      	cbnz	r0, 800a2ba <_dtoa_r+0x3a>
 800a2b0:	4ba7      	ldr	r3, [pc, #668]	; (800a550 <_dtoa_r+0x2d0>)
 800a2b2:	21ea      	movs	r1, #234	; 0xea
 800a2b4:	48a7      	ldr	r0, [pc, #668]	; (800a554 <_dtoa_r+0x2d4>)
 800a2b6:	f002 f8bd 	bl	800c434 <__assert_func>
 800a2ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2be:	6005      	str	r5, [r0, #0]
 800a2c0:	60c5      	str	r5, [r0, #12]
 800a2c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2c4:	6819      	ldr	r1, [r3, #0]
 800a2c6:	b151      	cbz	r1, 800a2de <_dtoa_r+0x5e>
 800a2c8:	685a      	ldr	r2, [r3, #4]
 800a2ca:	604a      	str	r2, [r1, #4]
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	4093      	lsls	r3, r2
 800a2d0:	608b      	str	r3, [r1, #8]
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f001 f99e 	bl	800b614 <_Bfree>
 800a2d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	1e3b      	subs	r3, r7, #0
 800a2e0:	bfaa      	itet	ge
 800a2e2:	2300      	movge	r3, #0
 800a2e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a2e8:	f8c8 3000 	strge.w	r3, [r8]
 800a2ec:	4b9a      	ldr	r3, [pc, #616]	; (800a558 <_dtoa_r+0x2d8>)
 800a2ee:	bfbc      	itt	lt
 800a2f0:	2201      	movlt	r2, #1
 800a2f2:	f8c8 2000 	strlt.w	r2, [r8]
 800a2f6:	ea33 030b 	bics.w	r3, r3, fp
 800a2fa:	d11b      	bne.n	800a334 <_dtoa_r+0xb4>
 800a2fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2fe:	f242 730f 	movw	r3, #9999	; 0x270f
 800a302:	6013      	str	r3, [r2, #0]
 800a304:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a308:	4333      	orrs	r3, r6
 800a30a:	f000 8592 	beq.w	800ae32 <_dtoa_r+0xbb2>
 800a30e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a310:	b963      	cbnz	r3, 800a32c <_dtoa_r+0xac>
 800a312:	4b92      	ldr	r3, [pc, #584]	; (800a55c <_dtoa_r+0x2dc>)
 800a314:	e022      	b.n	800a35c <_dtoa_r+0xdc>
 800a316:	4b92      	ldr	r3, [pc, #584]	; (800a560 <_dtoa_r+0x2e0>)
 800a318:	9301      	str	r3, [sp, #4]
 800a31a:	3308      	adds	r3, #8
 800a31c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a31e:	6013      	str	r3, [r2, #0]
 800a320:	9801      	ldr	r0, [sp, #4]
 800a322:	b013      	add	sp, #76	; 0x4c
 800a324:	ecbd 8b04 	vpop	{d8-d9}
 800a328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32c:	4b8b      	ldr	r3, [pc, #556]	; (800a55c <_dtoa_r+0x2dc>)
 800a32e:	9301      	str	r3, [sp, #4]
 800a330:	3303      	adds	r3, #3
 800a332:	e7f3      	b.n	800a31c <_dtoa_r+0x9c>
 800a334:	2200      	movs	r2, #0
 800a336:	2300      	movs	r3, #0
 800a338:	4650      	mov	r0, sl
 800a33a:	4659      	mov	r1, fp
 800a33c:	f7f6 fbec 	bl	8000b18 <__aeabi_dcmpeq>
 800a340:	ec4b ab19 	vmov	d9, sl, fp
 800a344:	4680      	mov	r8, r0
 800a346:	b158      	cbz	r0, 800a360 <_dtoa_r+0xe0>
 800a348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a34a:	2301      	movs	r3, #1
 800a34c:	6013      	str	r3, [r2, #0]
 800a34e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 856b 	beq.w	800ae2c <_dtoa_r+0xbac>
 800a356:	4883      	ldr	r0, [pc, #524]	; (800a564 <_dtoa_r+0x2e4>)
 800a358:	6018      	str	r0, [r3, #0]
 800a35a:	1e43      	subs	r3, r0, #1
 800a35c:	9301      	str	r3, [sp, #4]
 800a35e:	e7df      	b.n	800a320 <_dtoa_r+0xa0>
 800a360:	ec4b ab10 	vmov	d0, sl, fp
 800a364:	aa10      	add	r2, sp, #64	; 0x40
 800a366:	a911      	add	r1, sp, #68	; 0x44
 800a368:	4620      	mov	r0, r4
 800a36a:	f001 fd01 	bl	800bd70 <__d2b>
 800a36e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a372:	ee08 0a10 	vmov	s16, r0
 800a376:	2d00      	cmp	r5, #0
 800a378:	f000 8084 	beq.w	800a484 <_dtoa_r+0x204>
 800a37c:	ee19 3a90 	vmov	r3, s19
 800a380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a384:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a388:	4656      	mov	r6, sl
 800a38a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a38e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a392:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a396:	4b74      	ldr	r3, [pc, #464]	; (800a568 <_dtoa_r+0x2e8>)
 800a398:	2200      	movs	r2, #0
 800a39a:	4630      	mov	r0, r6
 800a39c:	4639      	mov	r1, r7
 800a39e:	f7f5 ff9b 	bl	80002d8 <__aeabi_dsub>
 800a3a2:	a365      	add	r3, pc, #404	; (adr r3, 800a538 <_dtoa_r+0x2b8>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	f7f6 f94e 	bl	8000648 <__aeabi_dmul>
 800a3ac:	a364      	add	r3, pc, #400	; (adr r3, 800a540 <_dtoa_r+0x2c0>)
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	f7f5 ff93 	bl	80002dc <__adddf3>
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	460f      	mov	r7, r1
 800a3bc:	f7f6 f8da 	bl	8000574 <__aeabi_i2d>
 800a3c0:	a361      	add	r3, pc, #388	; (adr r3, 800a548 <_dtoa_r+0x2c8>)
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	f7f6 f93f 	bl	8000648 <__aeabi_dmul>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	4639      	mov	r1, r7
 800a3d2:	f7f5 ff83 	bl	80002dc <__adddf3>
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	460f      	mov	r7, r1
 800a3da:	f7f6 fbe5 	bl	8000ba8 <__aeabi_d2iz>
 800a3de:	2200      	movs	r2, #0
 800a3e0:	9000      	str	r0, [sp, #0]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	4639      	mov	r1, r7
 800a3e8:	f7f6 fba0 	bl	8000b2c <__aeabi_dcmplt>
 800a3ec:	b150      	cbz	r0, 800a404 <_dtoa_r+0x184>
 800a3ee:	9800      	ldr	r0, [sp, #0]
 800a3f0:	f7f6 f8c0 	bl	8000574 <__aeabi_i2d>
 800a3f4:	4632      	mov	r2, r6
 800a3f6:	463b      	mov	r3, r7
 800a3f8:	f7f6 fb8e 	bl	8000b18 <__aeabi_dcmpeq>
 800a3fc:	b910      	cbnz	r0, 800a404 <_dtoa_r+0x184>
 800a3fe:	9b00      	ldr	r3, [sp, #0]
 800a400:	3b01      	subs	r3, #1
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	9b00      	ldr	r3, [sp, #0]
 800a406:	2b16      	cmp	r3, #22
 800a408:	d85a      	bhi.n	800a4c0 <_dtoa_r+0x240>
 800a40a:	9a00      	ldr	r2, [sp, #0]
 800a40c:	4b57      	ldr	r3, [pc, #348]	; (800a56c <_dtoa_r+0x2ec>)
 800a40e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a416:	ec51 0b19 	vmov	r0, r1, d9
 800a41a:	f7f6 fb87 	bl	8000b2c <__aeabi_dcmplt>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d050      	beq.n	800a4c4 <_dtoa_r+0x244>
 800a422:	9b00      	ldr	r3, [sp, #0]
 800a424:	3b01      	subs	r3, #1
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	2300      	movs	r3, #0
 800a42a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a42c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a42e:	1b5d      	subs	r5, r3, r5
 800a430:	1e6b      	subs	r3, r5, #1
 800a432:	9305      	str	r3, [sp, #20]
 800a434:	bf45      	ittet	mi
 800a436:	f1c5 0301 	rsbmi	r3, r5, #1
 800a43a:	9304      	strmi	r3, [sp, #16]
 800a43c:	2300      	movpl	r3, #0
 800a43e:	2300      	movmi	r3, #0
 800a440:	bf4c      	ite	mi
 800a442:	9305      	strmi	r3, [sp, #20]
 800a444:	9304      	strpl	r3, [sp, #16]
 800a446:	9b00      	ldr	r3, [sp, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	db3d      	blt.n	800a4c8 <_dtoa_r+0x248>
 800a44c:	9b05      	ldr	r3, [sp, #20]
 800a44e:	9a00      	ldr	r2, [sp, #0]
 800a450:	920a      	str	r2, [sp, #40]	; 0x28
 800a452:	4413      	add	r3, r2
 800a454:	9305      	str	r3, [sp, #20]
 800a456:	2300      	movs	r3, #0
 800a458:	9307      	str	r3, [sp, #28]
 800a45a:	9b06      	ldr	r3, [sp, #24]
 800a45c:	2b09      	cmp	r3, #9
 800a45e:	f200 8089 	bhi.w	800a574 <_dtoa_r+0x2f4>
 800a462:	2b05      	cmp	r3, #5
 800a464:	bfc4      	itt	gt
 800a466:	3b04      	subgt	r3, #4
 800a468:	9306      	strgt	r3, [sp, #24]
 800a46a:	9b06      	ldr	r3, [sp, #24]
 800a46c:	f1a3 0302 	sub.w	r3, r3, #2
 800a470:	bfcc      	ite	gt
 800a472:	2500      	movgt	r5, #0
 800a474:	2501      	movle	r5, #1
 800a476:	2b03      	cmp	r3, #3
 800a478:	f200 8087 	bhi.w	800a58a <_dtoa_r+0x30a>
 800a47c:	e8df f003 	tbb	[pc, r3]
 800a480:	59383a2d 	.word	0x59383a2d
 800a484:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a488:	441d      	add	r5, r3
 800a48a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a48e:	2b20      	cmp	r3, #32
 800a490:	bfc1      	itttt	gt
 800a492:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a496:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a49a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a49e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a4a2:	bfda      	itte	le
 800a4a4:	f1c3 0320 	rsble	r3, r3, #32
 800a4a8:	fa06 f003 	lslle.w	r0, r6, r3
 800a4ac:	4318      	orrgt	r0, r3
 800a4ae:	f7f6 f851 	bl	8000554 <__aeabi_ui2d>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	4606      	mov	r6, r0
 800a4b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a4ba:	3d01      	subs	r5, #1
 800a4bc:	930e      	str	r3, [sp, #56]	; 0x38
 800a4be:	e76a      	b.n	800a396 <_dtoa_r+0x116>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e7b2      	b.n	800a42a <_dtoa_r+0x1aa>
 800a4c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4c6:	e7b1      	b.n	800a42c <_dtoa_r+0x1ac>
 800a4c8:	9b04      	ldr	r3, [sp, #16]
 800a4ca:	9a00      	ldr	r2, [sp, #0]
 800a4cc:	1a9b      	subs	r3, r3, r2
 800a4ce:	9304      	str	r3, [sp, #16]
 800a4d0:	4253      	negs	r3, r2
 800a4d2:	9307      	str	r3, [sp, #28]
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a4d8:	e7bf      	b.n	800a45a <_dtoa_r+0x1da>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	9308      	str	r3, [sp, #32]
 800a4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	dc55      	bgt.n	800a590 <_dtoa_r+0x310>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a4ee:	e00c      	b.n	800a50a <_dtoa_r+0x28a>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e7f3      	b.n	800a4dc <_dtoa_r+0x25c>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4f8:	9308      	str	r3, [sp, #32]
 800a4fa:	9b00      	ldr	r3, [sp, #0]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	9302      	str	r3, [sp, #8]
 800a500:	3301      	adds	r3, #1
 800a502:	2b01      	cmp	r3, #1
 800a504:	9303      	str	r3, [sp, #12]
 800a506:	bfb8      	it	lt
 800a508:	2301      	movlt	r3, #1
 800a50a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a50c:	2200      	movs	r2, #0
 800a50e:	6042      	str	r2, [r0, #4]
 800a510:	2204      	movs	r2, #4
 800a512:	f102 0614 	add.w	r6, r2, #20
 800a516:	429e      	cmp	r6, r3
 800a518:	6841      	ldr	r1, [r0, #4]
 800a51a:	d93d      	bls.n	800a598 <_dtoa_r+0x318>
 800a51c:	4620      	mov	r0, r4
 800a51e:	f001 f839 	bl	800b594 <_Balloc>
 800a522:	9001      	str	r0, [sp, #4]
 800a524:	2800      	cmp	r0, #0
 800a526:	d13b      	bne.n	800a5a0 <_dtoa_r+0x320>
 800a528:	4b11      	ldr	r3, [pc, #68]	; (800a570 <_dtoa_r+0x2f0>)
 800a52a:	4602      	mov	r2, r0
 800a52c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a530:	e6c0      	b.n	800a2b4 <_dtoa_r+0x34>
 800a532:	2301      	movs	r3, #1
 800a534:	e7df      	b.n	800a4f6 <_dtoa_r+0x276>
 800a536:	bf00      	nop
 800a538:	636f4361 	.word	0x636f4361
 800a53c:	3fd287a7 	.word	0x3fd287a7
 800a540:	8b60c8b3 	.word	0x8b60c8b3
 800a544:	3fc68a28 	.word	0x3fc68a28
 800a548:	509f79fb 	.word	0x509f79fb
 800a54c:	3fd34413 	.word	0x3fd34413
 800a550:	0800e6c6 	.word	0x0800e6c6
 800a554:	0800e6dd 	.word	0x0800e6dd
 800a558:	7ff00000 	.word	0x7ff00000
 800a55c:	0800e6c2 	.word	0x0800e6c2
 800a560:	0800e6b9 	.word	0x0800e6b9
 800a564:	0800e539 	.word	0x0800e539
 800a568:	3ff80000 	.word	0x3ff80000
 800a56c:	0800e848 	.word	0x0800e848
 800a570:	0800e738 	.word	0x0800e738
 800a574:	2501      	movs	r5, #1
 800a576:	2300      	movs	r3, #0
 800a578:	9306      	str	r3, [sp, #24]
 800a57a:	9508      	str	r5, [sp, #32]
 800a57c:	f04f 33ff 	mov.w	r3, #4294967295
 800a580:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a584:	2200      	movs	r2, #0
 800a586:	2312      	movs	r3, #18
 800a588:	e7b0      	b.n	800a4ec <_dtoa_r+0x26c>
 800a58a:	2301      	movs	r3, #1
 800a58c:	9308      	str	r3, [sp, #32]
 800a58e:	e7f5      	b.n	800a57c <_dtoa_r+0x2fc>
 800a590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a592:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a596:	e7b8      	b.n	800a50a <_dtoa_r+0x28a>
 800a598:	3101      	adds	r1, #1
 800a59a:	6041      	str	r1, [r0, #4]
 800a59c:	0052      	lsls	r2, r2, #1
 800a59e:	e7b8      	b.n	800a512 <_dtoa_r+0x292>
 800a5a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5a2:	9a01      	ldr	r2, [sp, #4]
 800a5a4:	601a      	str	r2, [r3, #0]
 800a5a6:	9b03      	ldr	r3, [sp, #12]
 800a5a8:	2b0e      	cmp	r3, #14
 800a5aa:	f200 809d 	bhi.w	800a6e8 <_dtoa_r+0x468>
 800a5ae:	2d00      	cmp	r5, #0
 800a5b0:	f000 809a 	beq.w	800a6e8 <_dtoa_r+0x468>
 800a5b4:	9b00      	ldr	r3, [sp, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	dd32      	ble.n	800a620 <_dtoa_r+0x3a0>
 800a5ba:	4ab7      	ldr	r2, [pc, #732]	; (800a898 <_dtoa_r+0x618>)
 800a5bc:	f003 030f 	and.w	r3, r3, #15
 800a5c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5c8:	9b00      	ldr	r3, [sp, #0]
 800a5ca:	05d8      	lsls	r0, r3, #23
 800a5cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a5d0:	d516      	bpl.n	800a600 <_dtoa_r+0x380>
 800a5d2:	4bb2      	ldr	r3, [pc, #712]	; (800a89c <_dtoa_r+0x61c>)
 800a5d4:	ec51 0b19 	vmov	r0, r1, d9
 800a5d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5dc:	f7f6 f95e 	bl	800089c <__aeabi_ddiv>
 800a5e0:	f007 070f 	and.w	r7, r7, #15
 800a5e4:	4682      	mov	sl, r0
 800a5e6:	468b      	mov	fp, r1
 800a5e8:	2503      	movs	r5, #3
 800a5ea:	4eac      	ldr	r6, [pc, #688]	; (800a89c <_dtoa_r+0x61c>)
 800a5ec:	b957      	cbnz	r7, 800a604 <_dtoa_r+0x384>
 800a5ee:	4642      	mov	r2, r8
 800a5f0:	464b      	mov	r3, r9
 800a5f2:	4650      	mov	r0, sl
 800a5f4:	4659      	mov	r1, fp
 800a5f6:	f7f6 f951 	bl	800089c <__aeabi_ddiv>
 800a5fa:	4682      	mov	sl, r0
 800a5fc:	468b      	mov	fp, r1
 800a5fe:	e028      	b.n	800a652 <_dtoa_r+0x3d2>
 800a600:	2502      	movs	r5, #2
 800a602:	e7f2      	b.n	800a5ea <_dtoa_r+0x36a>
 800a604:	07f9      	lsls	r1, r7, #31
 800a606:	d508      	bpl.n	800a61a <_dtoa_r+0x39a>
 800a608:	4640      	mov	r0, r8
 800a60a:	4649      	mov	r1, r9
 800a60c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a610:	f7f6 f81a 	bl	8000648 <__aeabi_dmul>
 800a614:	3501      	adds	r5, #1
 800a616:	4680      	mov	r8, r0
 800a618:	4689      	mov	r9, r1
 800a61a:	107f      	asrs	r7, r7, #1
 800a61c:	3608      	adds	r6, #8
 800a61e:	e7e5      	b.n	800a5ec <_dtoa_r+0x36c>
 800a620:	f000 809b 	beq.w	800a75a <_dtoa_r+0x4da>
 800a624:	9b00      	ldr	r3, [sp, #0]
 800a626:	4f9d      	ldr	r7, [pc, #628]	; (800a89c <_dtoa_r+0x61c>)
 800a628:	425e      	negs	r6, r3
 800a62a:	4b9b      	ldr	r3, [pc, #620]	; (800a898 <_dtoa_r+0x618>)
 800a62c:	f006 020f 	and.w	r2, r6, #15
 800a630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a638:	ec51 0b19 	vmov	r0, r1, d9
 800a63c:	f7f6 f804 	bl	8000648 <__aeabi_dmul>
 800a640:	1136      	asrs	r6, r6, #4
 800a642:	4682      	mov	sl, r0
 800a644:	468b      	mov	fp, r1
 800a646:	2300      	movs	r3, #0
 800a648:	2502      	movs	r5, #2
 800a64a:	2e00      	cmp	r6, #0
 800a64c:	d17a      	bne.n	800a744 <_dtoa_r+0x4c4>
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1d3      	bne.n	800a5fa <_dtoa_r+0x37a>
 800a652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 8082 	beq.w	800a75e <_dtoa_r+0x4de>
 800a65a:	4b91      	ldr	r3, [pc, #580]	; (800a8a0 <_dtoa_r+0x620>)
 800a65c:	2200      	movs	r2, #0
 800a65e:	4650      	mov	r0, sl
 800a660:	4659      	mov	r1, fp
 800a662:	f7f6 fa63 	bl	8000b2c <__aeabi_dcmplt>
 800a666:	2800      	cmp	r0, #0
 800a668:	d079      	beq.n	800a75e <_dtoa_r+0x4de>
 800a66a:	9b03      	ldr	r3, [sp, #12]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d076      	beq.n	800a75e <_dtoa_r+0x4de>
 800a670:	9b02      	ldr	r3, [sp, #8]
 800a672:	2b00      	cmp	r3, #0
 800a674:	dd36      	ble.n	800a6e4 <_dtoa_r+0x464>
 800a676:	9b00      	ldr	r3, [sp, #0]
 800a678:	4650      	mov	r0, sl
 800a67a:	4659      	mov	r1, fp
 800a67c:	1e5f      	subs	r7, r3, #1
 800a67e:	2200      	movs	r2, #0
 800a680:	4b88      	ldr	r3, [pc, #544]	; (800a8a4 <_dtoa_r+0x624>)
 800a682:	f7f5 ffe1 	bl	8000648 <__aeabi_dmul>
 800a686:	9e02      	ldr	r6, [sp, #8]
 800a688:	4682      	mov	sl, r0
 800a68a:	468b      	mov	fp, r1
 800a68c:	3501      	adds	r5, #1
 800a68e:	4628      	mov	r0, r5
 800a690:	f7f5 ff70 	bl	8000574 <__aeabi_i2d>
 800a694:	4652      	mov	r2, sl
 800a696:	465b      	mov	r3, fp
 800a698:	f7f5 ffd6 	bl	8000648 <__aeabi_dmul>
 800a69c:	4b82      	ldr	r3, [pc, #520]	; (800a8a8 <_dtoa_r+0x628>)
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f7f5 fe1c 	bl	80002dc <__adddf3>
 800a6a4:	46d0      	mov	r8, sl
 800a6a6:	46d9      	mov	r9, fp
 800a6a8:	4682      	mov	sl, r0
 800a6aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a6ae:	2e00      	cmp	r6, #0
 800a6b0:	d158      	bne.n	800a764 <_dtoa_r+0x4e4>
 800a6b2:	4b7e      	ldr	r3, [pc, #504]	; (800a8ac <_dtoa_r+0x62c>)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	4640      	mov	r0, r8
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	f7f5 fe0d 	bl	80002d8 <__aeabi_dsub>
 800a6be:	4652      	mov	r2, sl
 800a6c0:	465b      	mov	r3, fp
 800a6c2:	4680      	mov	r8, r0
 800a6c4:	4689      	mov	r9, r1
 800a6c6:	f7f6 fa4f 	bl	8000b68 <__aeabi_dcmpgt>
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	f040 8295 	bne.w	800abfa <_dtoa_r+0x97a>
 800a6d0:	4652      	mov	r2, sl
 800a6d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	4649      	mov	r1, r9
 800a6da:	f7f6 fa27 	bl	8000b2c <__aeabi_dcmplt>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f040 8289 	bne.w	800abf6 <_dtoa_r+0x976>
 800a6e4:	ec5b ab19 	vmov	sl, fp, d9
 800a6e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f2c0 8148 	blt.w	800a980 <_dtoa_r+0x700>
 800a6f0:	9a00      	ldr	r2, [sp, #0]
 800a6f2:	2a0e      	cmp	r2, #14
 800a6f4:	f300 8144 	bgt.w	800a980 <_dtoa_r+0x700>
 800a6f8:	4b67      	ldr	r3, [pc, #412]	; (800a898 <_dtoa_r+0x618>)
 800a6fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a704:	2b00      	cmp	r3, #0
 800a706:	f280 80d5 	bge.w	800a8b4 <_dtoa_r+0x634>
 800a70a:	9b03      	ldr	r3, [sp, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f300 80d1 	bgt.w	800a8b4 <_dtoa_r+0x634>
 800a712:	f040 826f 	bne.w	800abf4 <_dtoa_r+0x974>
 800a716:	4b65      	ldr	r3, [pc, #404]	; (800a8ac <_dtoa_r+0x62c>)
 800a718:	2200      	movs	r2, #0
 800a71a:	4640      	mov	r0, r8
 800a71c:	4649      	mov	r1, r9
 800a71e:	f7f5 ff93 	bl	8000648 <__aeabi_dmul>
 800a722:	4652      	mov	r2, sl
 800a724:	465b      	mov	r3, fp
 800a726:	f7f6 fa15 	bl	8000b54 <__aeabi_dcmpge>
 800a72a:	9e03      	ldr	r6, [sp, #12]
 800a72c:	4637      	mov	r7, r6
 800a72e:	2800      	cmp	r0, #0
 800a730:	f040 8245 	bne.w	800abbe <_dtoa_r+0x93e>
 800a734:	9d01      	ldr	r5, [sp, #4]
 800a736:	2331      	movs	r3, #49	; 0x31
 800a738:	f805 3b01 	strb.w	r3, [r5], #1
 800a73c:	9b00      	ldr	r3, [sp, #0]
 800a73e:	3301      	adds	r3, #1
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	e240      	b.n	800abc6 <_dtoa_r+0x946>
 800a744:	07f2      	lsls	r2, r6, #31
 800a746:	d505      	bpl.n	800a754 <_dtoa_r+0x4d4>
 800a748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a74c:	f7f5 ff7c 	bl	8000648 <__aeabi_dmul>
 800a750:	3501      	adds	r5, #1
 800a752:	2301      	movs	r3, #1
 800a754:	1076      	asrs	r6, r6, #1
 800a756:	3708      	adds	r7, #8
 800a758:	e777      	b.n	800a64a <_dtoa_r+0x3ca>
 800a75a:	2502      	movs	r5, #2
 800a75c:	e779      	b.n	800a652 <_dtoa_r+0x3d2>
 800a75e:	9f00      	ldr	r7, [sp, #0]
 800a760:	9e03      	ldr	r6, [sp, #12]
 800a762:	e794      	b.n	800a68e <_dtoa_r+0x40e>
 800a764:	9901      	ldr	r1, [sp, #4]
 800a766:	4b4c      	ldr	r3, [pc, #304]	; (800a898 <_dtoa_r+0x618>)
 800a768:	4431      	add	r1, r6
 800a76a:	910d      	str	r1, [sp, #52]	; 0x34
 800a76c:	9908      	ldr	r1, [sp, #32]
 800a76e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a772:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a776:	2900      	cmp	r1, #0
 800a778:	d043      	beq.n	800a802 <_dtoa_r+0x582>
 800a77a:	494d      	ldr	r1, [pc, #308]	; (800a8b0 <_dtoa_r+0x630>)
 800a77c:	2000      	movs	r0, #0
 800a77e:	f7f6 f88d 	bl	800089c <__aeabi_ddiv>
 800a782:	4652      	mov	r2, sl
 800a784:	465b      	mov	r3, fp
 800a786:	f7f5 fda7 	bl	80002d8 <__aeabi_dsub>
 800a78a:	9d01      	ldr	r5, [sp, #4]
 800a78c:	4682      	mov	sl, r0
 800a78e:	468b      	mov	fp, r1
 800a790:	4649      	mov	r1, r9
 800a792:	4640      	mov	r0, r8
 800a794:	f7f6 fa08 	bl	8000ba8 <__aeabi_d2iz>
 800a798:	4606      	mov	r6, r0
 800a79a:	f7f5 feeb 	bl	8000574 <__aeabi_i2d>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	4640      	mov	r0, r8
 800a7a4:	4649      	mov	r1, r9
 800a7a6:	f7f5 fd97 	bl	80002d8 <__aeabi_dsub>
 800a7aa:	3630      	adds	r6, #48	; 0x30
 800a7ac:	f805 6b01 	strb.w	r6, [r5], #1
 800a7b0:	4652      	mov	r2, sl
 800a7b2:	465b      	mov	r3, fp
 800a7b4:	4680      	mov	r8, r0
 800a7b6:	4689      	mov	r9, r1
 800a7b8:	f7f6 f9b8 	bl	8000b2c <__aeabi_dcmplt>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d163      	bne.n	800a888 <_dtoa_r+0x608>
 800a7c0:	4642      	mov	r2, r8
 800a7c2:	464b      	mov	r3, r9
 800a7c4:	4936      	ldr	r1, [pc, #216]	; (800a8a0 <_dtoa_r+0x620>)
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	f7f5 fd86 	bl	80002d8 <__aeabi_dsub>
 800a7cc:	4652      	mov	r2, sl
 800a7ce:	465b      	mov	r3, fp
 800a7d0:	f7f6 f9ac 	bl	8000b2c <__aeabi_dcmplt>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	f040 80b5 	bne.w	800a944 <_dtoa_r+0x6c4>
 800a7da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7dc:	429d      	cmp	r5, r3
 800a7de:	d081      	beq.n	800a6e4 <_dtoa_r+0x464>
 800a7e0:	4b30      	ldr	r3, [pc, #192]	; (800a8a4 <_dtoa_r+0x624>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	4650      	mov	r0, sl
 800a7e6:	4659      	mov	r1, fp
 800a7e8:	f7f5 ff2e 	bl	8000648 <__aeabi_dmul>
 800a7ec:	4b2d      	ldr	r3, [pc, #180]	; (800a8a4 <_dtoa_r+0x624>)
 800a7ee:	4682      	mov	sl, r0
 800a7f0:	468b      	mov	fp, r1
 800a7f2:	4640      	mov	r0, r8
 800a7f4:	4649      	mov	r1, r9
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f7f5 ff26 	bl	8000648 <__aeabi_dmul>
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	4689      	mov	r9, r1
 800a800:	e7c6      	b.n	800a790 <_dtoa_r+0x510>
 800a802:	4650      	mov	r0, sl
 800a804:	4659      	mov	r1, fp
 800a806:	f7f5 ff1f 	bl	8000648 <__aeabi_dmul>
 800a80a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a80c:	9d01      	ldr	r5, [sp, #4]
 800a80e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a810:	4682      	mov	sl, r0
 800a812:	468b      	mov	fp, r1
 800a814:	4649      	mov	r1, r9
 800a816:	4640      	mov	r0, r8
 800a818:	f7f6 f9c6 	bl	8000ba8 <__aeabi_d2iz>
 800a81c:	4606      	mov	r6, r0
 800a81e:	f7f5 fea9 	bl	8000574 <__aeabi_i2d>
 800a822:	3630      	adds	r6, #48	; 0x30
 800a824:	4602      	mov	r2, r0
 800a826:	460b      	mov	r3, r1
 800a828:	4640      	mov	r0, r8
 800a82a:	4649      	mov	r1, r9
 800a82c:	f7f5 fd54 	bl	80002d8 <__aeabi_dsub>
 800a830:	f805 6b01 	strb.w	r6, [r5], #1
 800a834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a836:	429d      	cmp	r5, r3
 800a838:	4680      	mov	r8, r0
 800a83a:	4689      	mov	r9, r1
 800a83c:	f04f 0200 	mov.w	r2, #0
 800a840:	d124      	bne.n	800a88c <_dtoa_r+0x60c>
 800a842:	4b1b      	ldr	r3, [pc, #108]	; (800a8b0 <_dtoa_r+0x630>)
 800a844:	4650      	mov	r0, sl
 800a846:	4659      	mov	r1, fp
 800a848:	f7f5 fd48 	bl	80002dc <__adddf3>
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	4640      	mov	r0, r8
 800a852:	4649      	mov	r1, r9
 800a854:	f7f6 f988 	bl	8000b68 <__aeabi_dcmpgt>
 800a858:	2800      	cmp	r0, #0
 800a85a:	d173      	bne.n	800a944 <_dtoa_r+0x6c4>
 800a85c:	4652      	mov	r2, sl
 800a85e:	465b      	mov	r3, fp
 800a860:	4913      	ldr	r1, [pc, #76]	; (800a8b0 <_dtoa_r+0x630>)
 800a862:	2000      	movs	r0, #0
 800a864:	f7f5 fd38 	bl	80002d8 <__aeabi_dsub>
 800a868:	4602      	mov	r2, r0
 800a86a:	460b      	mov	r3, r1
 800a86c:	4640      	mov	r0, r8
 800a86e:	4649      	mov	r1, r9
 800a870:	f7f6 f95c 	bl	8000b2c <__aeabi_dcmplt>
 800a874:	2800      	cmp	r0, #0
 800a876:	f43f af35 	beq.w	800a6e4 <_dtoa_r+0x464>
 800a87a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a87c:	1e6b      	subs	r3, r5, #1
 800a87e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a880:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a884:	2b30      	cmp	r3, #48	; 0x30
 800a886:	d0f8      	beq.n	800a87a <_dtoa_r+0x5fa>
 800a888:	9700      	str	r7, [sp, #0]
 800a88a:	e049      	b.n	800a920 <_dtoa_r+0x6a0>
 800a88c:	4b05      	ldr	r3, [pc, #20]	; (800a8a4 <_dtoa_r+0x624>)
 800a88e:	f7f5 fedb 	bl	8000648 <__aeabi_dmul>
 800a892:	4680      	mov	r8, r0
 800a894:	4689      	mov	r9, r1
 800a896:	e7bd      	b.n	800a814 <_dtoa_r+0x594>
 800a898:	0800e848 	.word	0x0800e848
 800a89c:	0800e820 	.word	0x0800e820
 800a8a0:	3ff00000 	.word	0x3ff00000
 800a8a4:	40240000 	.word	0x40240000
 800a8a8:	401c0000 	.word	0x401c0000
 800a8ac:	40140000 	.word	0x40140000
 800a8b0:	3fe00000 	.word	0x3fe00000
 800a8b4:	9d01      	ldr	r5, [sp, #4]
 800a8b6:	4656      	mov	r6, sl
 800a8b8:	465f      	mov	r7, fp
 800a8ba:	4642      	mov	r2, r8
 800a8bc:	464b      	mov	r3, r9
 800a8be:	4630      	mov	r0, r6
 800a8c0:	4639      	mov	r1, r7
 800a8c2:	f7f5 ffeb 	bl	800089c <__aeabi_ddiv>
 800a8c6:	f7f6 f96f 	bl	8000ba8 <__aeabi_d2iz>
 800a8ca:	4682      	mov	sl, r0
 800a8cc:	f7f5 fe52 	bl	8000574 <__aeabi_i2d>
 800a8d0:	4642      	mov	r2, r8
 800a8d2:	464b      	mov	r3, r9
 800a8d4:	f7f5 feb8 	bl	8000648 <__aeabi_dmul>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	460b      	mov	r3, r1
 800a8dc:	4630      	mov	r0, r6
 800a8de:	4639      	mov	r1, r7
 800a8e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a8e4:	f7f5 fcf8 	bl	80002d8 <__aeabi_dsub>
 800a8e8:	f805 6b01 	strb.w	r6, [r5], #1
 800a8ec:	9e01      	ldr	r6, [sp, #4]
 800a8ee:	9f03      	ldr	r7, [sp, #12]
 800a8f0:	1bae      	subs	r6, r5, r6
 800a8f2:	42b7      	cmp	r7, r6
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	d135      	bne.n	800a966 <_dtoa_r+0x6e6>
 800a8fa:	f7f5 fcef 	bl	80002dc <__adddf3>
 800a8fe:	4642      	mov	r2, r8
 800a900:	464b      	mov	r3, r9
 800a902:	4606      	mov	r6, r0
 800a904:	460f      	mov	r7, r1
 800a906:	f7f6 f92f 	bl	8000b68 <__aeabi_dcmpgt>
 800a90a:	b9d0      	cbnz	r0, 800a942 <_dtoa_r+0x6c2>
 800a90c:	4642      	mov	r2, r8
 800a90e:	464b      	mov	r3, r9
 800a910:	4630      	mov	r0, r6
 800a912:	4639      	mov	r1, r7
 800a914:	f7f6 f900 	bl	8000b18 <__aeabi_dcmpeq>
 800a918:	b110      	cbz	r0, 800a920 <_dtoa_r+0x6a0>
 800a91a:	f01a 0f01 	tst.w	sl, #1
 800a91e:	d110      	bne.n	800a942 <_dtoa_r+0x6c2>
 800a920:	4620      	mov	r0, r4
 800a922:	ee18 1a10 	vmov	r1, s16
 800a926:	f000 fe75 	bl	800b614 <_Bfree>
 800a92a:	2300      	movs	r3, #0
 800a92c:	9800      	ldr	r0, [sp, #0]
 800a92e:	702b      	strb	r3, [r5, #0]
 800a930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a932:	3001      	adds	r0, #1
 800a934:	6018      	str	r0, [r3, #0]
 800a936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f43f acf1 	beq.w	800a320 <_dtoa_r+0xa0>
 800a93e:	601d      	str	r5, [r3, #0]
 800a940:	e4ee      	b.n	800a320 <_dtoa_r+0xa0>
 800a942:	9f00      	ldr	r7, [sp, #0]
 800a944:	462b      	mov	r3, r5
 800a946:	461d      	mov	r5, r3
 800a948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a94c:	2a39      	cmp	r2, #57	; 0x39
 800a94e:	d106      	bne.n	800a95e <_dtoa_r+0x6de>
 800a950:	9a01      	ldr	r2, [sp, #4]
 800a952:	429a      	cmp	r2, r3
 800a954:	d1f7      	bne.n	800a946 <_dtoa_r+0x6c6>
 800a956:	9901      	ldr	r1, [sp, #4]
 800a958:	2230      	movs	r2, #48	; 0x30
 800a95a:	3701      	adds	r7, #1
 800a95c:	700a      	strb	r2, [r1, #0]
 800a95e:	781a      	ldrb	r2, [r3, #0]
 800a960:	3201      	adds	r2, #1
 800a962:	701a      	strb	r2, [r3, #0]
 800a964:	e790      	b.n	800a888 <_dtoa_r+0x608>
 800a966:	4ba6      	ldr	r3, [pc, #664]	; (800ac00 <_dtoa_r+0x980>)
 800a968:	2200      	movs	r2, #0
 800a96a:	f7f5 fe6d 	bl	8000648 <__aeabi_dmul>
 800a96e:	2200      	movs	r2, #0
 800a970:	2300      	movs	r3, #0
 800a972:	4606      	mov	r6, r0
 800a974:	460f      	mov	r7, r1
 800a976:	f7f6 f8cf 	bl	8000b18 <__aeabi_dcmpeq>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	d09d      	beq.n	800a8ba <_dtoa_r+0x63a>
 800a97e:	e7cf      	b.n	800a920 <_dtoa_r+0x6a0>
 800a980:	9a08      	ldr	r2, [sp, #32]
 800a982:	2a00      	cmp	r2, #0
 800a984:	f000 80d7 	beq.w	800ab36 <_dtoa_r+0x8b6>
 800a988:	9a06      	ldr	r2, [sp, #24]
 800a98a:	2a01      	cmp	r2, #1
 800a98c:	f300 80ba 	bgt.w	800ab04 <_dtoa_r+0x884>
 800a990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a992:	2a00      	cmp	r2, #0
 800a994:	f000 80b2 	beq.w	800aafc <_dtoa_r+0x87c>
 800a998:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a99c:	9e07      	ldr	r6, [sp, #28]
 800a99e:	9d04      	ldr	r5, [sp, #16]
 800a9a0:	9a04      	ldr	r2, [sp, #16]
 800a9a2:	441a      	add	r2, r3
 800a9a4:	9204      	str	r2, [sp, #16]
 800a9a6:	9a05      	ldr	r2, [sp, #20]
 800a9a8:	2101      	movs	r1, #1
 800a9aa:	441a      	add	r2, r3
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	9205      	str	r2, [sp, #20]
 800a9b0:	f000 ff32 	bl	800b818 <__i2b>
 800a9b4:	4607      	mov	r7, r0
 800a9b6:	2d00      	cmp	r5, #0
 800a9b8:	dd0c      	ble.n	800a9d4 <_dtoa_r+0x754>
 800a9ba:	9b05      	ldr	r3, [sp, #20]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	dd09      	ble.n	800a9d4 <_dtoa_r+0x754>
 800a9c0:	42ab      	cmp	r3, r5
 800a9c2:	9a04      	ldr	r2, [sp, #16]
 800a9c4:	bfa8      	it	ge
 800a9c6:	462b      	movge	r3, r5
 800a9c8:	1ad2      	subs	r2, r2, r3
 800a9ca:	9204      	str	r2, [sp, #16]
 800a9cc:	9a05      	ldr	r2, [sp, #20]
 800a9ce:	1aed      	subs	r5, r5, r3
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	9305      	str	r3, [sp, #20]
 800a9d4:	9b07      	ldr	r3, [sp, #28]
 800a9d6:	b31b      	cbz	r3, 800aa20 <_dtoa_r+0x7a0>
 800a9d8:	9b08      	ldr	r3, [sp, #32]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 80af 	beq.w	800ab3e <_dtoa_r+0x8be>
 800a9e0:	2e00      	cmp	r6, #0
 800a9e2:	dd13      	ble.n	800aa0c <_dtoa_r+0x78c>
 800a9e4:	4639      	mov	r1, r7
 800a9e6:	4632      	mov	r2, r6
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 ffd5 	bl	800b998 <__pow5mult>
 800a9ee:	ee18 2a10 	vmov	r2, s16
 800a9f2:	4601      	mov	r1, r0
 800a9f4:	4607      	mov	r7, r0
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f000 ff24 	bl	800b844 <__multiply>
 800a9fc:	ee18 1a10 	vmov	r1, s16
 800aa00:	4680      	mov	r8, r0
 800aa02:	4620      	mov	r0, r4
 800aa04:	f000 fe06 	bl	800b614 <_Bfree>
 800aa08:	ee08 8a10 	vmov	s16, r8
 800aa0c:	9b07      	ldr	r3, [sp, #28]
 800aa0e:	1b9a      	subs	r2, r3, r6
 800aa10:	d006      	beq.n	800aa20 <_dtoa_r+0x7a0>
 800aa12:	ee18 1a10 	vmov	r1, s16
 800aa16:	4620      	mov	r0, r4
 800aa18:	f000 ffbe 	bl	800b998 <__pow5mult>
 800aa1c:	ee08 0a10 	vmov	s16, r0
 800aa20:	2101      	movs	r1, #1
 800aa22:	4620      	mov	r0, r4
 800aa24:	f000 fef8 	bl	800b818 <__i2b>
 800aa28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	4606      	mov	r6, r0
 800aa2e:	f340 8088 	ble.w	800ab42 <_dtoa_r+0x8c2>
 800aa32:	461a      	mov	r2, r3
 800aa34:	4601      	mov	r1, r0
 800aa36:	4620      	mov	r0, r4
 800aa38:	f000 ffae 	bl	800b998 <__pow5mult>
 800aa3c:	9b06      	ldr	r3, [sp, #24]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	4606      	mov	r6, r0
 800aa42:	f340 8081 	ble.w	800ab48 <_dtoa_r+0x8c8>
 800aa46:	f04f 0800 	mov.w	r8, #0
 800aa4a:	6933      	ldr	r3, [r6, #16]
 800aa4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa50:	6918      	ldr	r0, [r3, #16]
 800aa52:	f000 fe91 	bl	800b778 <__hi0bits>
 800aa56:	f1c0 0020 	rsb	r0, r0, #32
 800aa5a:	9b05      	ldr	r3, [sp, #20]
 800aa5c:	4418      	add	r0, r3
 800aa5e:	f010 001f 	ands.w	r0, r0, #31
 800aa62:	f000 8092 	beq.w	800ab8a <_dtoa_r+0x90a>
 800aa66:	f1c0 0320 	rsb	r3, r0, #32
 800aa6a:	2b04      	cmp	r3, #4
 800aa6c:	f340 808a 	ble.w	800ab84 <_dtoa_r+0x904>
 800aa70:	f1c0 001c 	rsb	r0, r0, #28
 800aa74:	9b04      	ldr	r3, [sp, #16]
 800aa76:	4403      	add	r3, r0
 800aa78:	9304      	str	r3, [sp, #16]
 800aa7a:	9b05      	ldr	r3, [sp, #20]
 800aa7c:	4403      	add	r3, r0
 800aa7e:	4405      	add	r5, r0
 800aa80:	9305      	str	r3, [sp, #20]
 800aa82:	9b04      	ldr	r3, [sp, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	dd07      	ble.n	800aa98 <_dtoa_r+0x818>
 800aa88:	ee18 1a10 	vmov	r1, s16
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f000 ffdc 	bl	800ba4c <__lshift>
 800aa94:	ee08 0a10 	vmov	s16, r0
 800aa98:	9b05      	ldr	r3, [sp, #20]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	dd05      	ble.n	800aaaa <_dtoa_r+0x82a>
 800aa9e:	4631      	mov	r1, r6
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f000 ffd2 	bl	800ba4c <__lshift>
 800aaa8:	4606      	mov	r6, r0
 800aaaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d06e      	beq.n	800ab8e <_dtoa_r+0x90e>
 800aab0:	ee18 0a10 	vmov	r0, s16
 800aab4:	4631      	mov	r1, r6
 800aab6:	f001 f839 	bl	800bb2c <__mcmp>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	da67      	bge.n	800ab8e <_dtoa_r+0x90e>
 800aabe:	9b00      	ldr	r3, [sp, #0]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	ee18 1a10 	vmov	r1, s16
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	220a      	movs	r2, #10
 800aaca:	2300      	movs	r3, #0
 800aacc:	4620      	mov	r0, r4
 800aace:	f000 fdc3 	bl	800b658 <__multadd>
 800aad2:	9b08      	ldr	r3, [sp, #32]
 800aad4:	ee08 0a10 	vmov	s16, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 81b1 	beq.w	800ae40 <_dtoa_r+0xbc0>
 800aade:	2300      	movs	r3, #0
 800aae0:	4639      	mov	r1, r7
 800aae2:	220a      	movs	r2, #10
 800aae4:	4620      	mov	r0, r4
 800aae6:	f000 fdb7 	bl	800b658 <__multadd>
 800aaea:	9b02      	ldr	r3, [sp, #8]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	4607      	mov	r7, r0
 800aaf0:	f300 808e 	bgt.w	800ac10 <_dtoa_r+0x990>
 800aaf4:	9b06      	ldr	r3, [sp, #24]
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	dc51      	bgt.n	800ab9e <_dtoa_r+0x91e>
 800aafa:	e089      	b.n	800ac10 <_dtoa_r+0x990>
 800aafc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aafe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab02:	e74b      	b.n	800a99c <_dtoa_r+0x71c>
 800ab04:	9b03      	ldr	r3, [sp, #12]
 800ab06:	1e5e      	subs	r6, r3, #1
 800ab08:	9b07      	ldr	r3, [sp, #28]
 800ab0a:	42b3      	cmp	r3, r6
 800ab0c:	bfbf      	itttt	lt
 800ab0e:	9b07      	ldrlt	r3, [sp, #28]
 800ab10:	9607      	strlt	r6, [sp, #28]
 800ab12:	1af2      	sublt	r2, r6, r3
 800ab14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ab16:	bfb6      	itet	lt
 800ab18:	189b      	addlt	r3, r3, r2
 800ab1a:	1b9e      	subge	r6, r3, r6
 800ab1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ab1e:	9b03      	ldr	r3, [sp, #12]
 800ab20:	bfb8      	it	lt
 800ab22:	2600      	movlt	r6, #0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	bfb7      	itett	lt
 800ab28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ab2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ab30:	1a9d      	sublt	r5, r3, r2
 800ab32:	2300      	movlt	r3, #0
 800ab34:	e734      	b.n	800a9a0 <_dtoa_r+0x720>
 800ab36:	9e07      	ldr	r6, [sp, #28]
 800ab38:	9d04      	ldr	r5, [sp, #16]
 800ab3a:	9f08      	ldr	r7, [sp, #32]
 800ab3c:	e73b      	b.n	800a9b6 <_dtoa_r+0x736>
 800ab3e:	9a07      	ldr	r2, [sp, #28]
 800ab40:	e767      	b.n	800aa12 <_dtoa_r+0x792>
 800ab42:	9b06      	ldr	r3, [sp, #24]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	dc18      	bgt.n	800ab7a <_dtoa_r+0x8fa>
 800ab48:	f1ba 0f00 	cmp.w	sl, #0
 800ab4c:	d115      	bne.n	800ab7a <_dtoa_r+0x8fa>
 800ab4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab52:	b993      	cbnz	r3, 800ab7a <_dtoa_r+0x8fa>
 800ab54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab58:	0d1b      	lsrs	r3, r3, #20
 800ab5a:	051b      	lsls	r3, r3, #20
 800ab5c:	b183      	cbz	r3, 800ab80 <_dtoa_r+0x900>
 800ab5e:	9b04      	ldr	r3, [sp, #16]
 800ab60:	3301      	adds	r3, #1
 800ab62:	9304      	str	r3, [sp, #16]
 800ab64:	9b05      	ldr	r3, [sp, #20]
 800ab66:	3301      	adds	r3, #1
 800ab68:	9305      	str	r3, [sp, #20]
 800ab6a:	f04f 0801 	mov.w	r8, #1
 800ab6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f47f af6a 	bne.w	800aa4a <_dtoa_r+0x7ca>
 800ab76:	2001      	movs	r0, #1
 800ab78:	e76f      	b.n	800aa5a <_dtoa_r+0x7da>
 800ab7a:	f04f 0800 	mov.w	r8, #0
 800ab7e:	e7f6      	b.n	800ab6e <_dtoa_r+0x8ee>
 800ab80:	4698      	mov	r8, r3
 800ab82:	e7f4      	b.n	800ab6e <_dtoa_r+0x8ee>
 800ab84:	f43f af7d 	beq.w	800aa82 <_dtoa_r+0x802>
 800ab88:	4618      	mov	r0, r3
 800ab8a:	301c      	adds	r0, #28
 800ab8c:	e772      	b.n	800aa74 <_dtoa_r+0x7f4>
 800ab8e:	9b03      	ldr	r3, [sp, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	dc37      	bgt.n	800ac04 <_dtoa_r+0x984>
 800ab94:	9b06      	ldr	r3, [sp, #24]
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	dd34      	ble.n	800ac04 <_dtoa_r+0x984>
 800ab9a:	9b03      	ldr	r3, [sp, #12]
 800ab9c:	9302      	str	r3, [sp, #8]
 800ab9e:	9b02      	ldr	r3, [sp, #8]
 800aba0:	b96b      	cbnz	r3, 800abbe <_dtoa_r+0x93e>
 800aba2:	4631      	mov	r1, r6
 800aba4:	2205      	movs	r2, #5
 800aba6:	4620      	mov	r0, r4
 800aba8:	f000 fd56 	bl	800b658 <__multadd>
 800abac:	4601      	mov	r1, r0
 800abae:	4606      	mov	r6, r0
 800abb0:	ee18 0a10 	vmov	r0, s16
 800abb4:	f000 ffba 	bl	800bb2c <__mcmp>
 800abb8:	2800      	cmp	r0, #0
 800abba:	f73f adbb 	bgt.w	800a734 <_dtoa_r+0x4b4>
 800abbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc0:	9d01      	ldr	r5, [sp, #4]
 800abc2:	43db      	mvns	r3, r3
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	f04f 0800 	mov.w	r8, #0
 800abca:	4631      	mov	r1, r6
 800abcc:	4620      	mov	r0, r4
 800abce:	f000 fd21 	bl	800b614 <_Bfree>
 800abd2:	2f00      	cmp	r7, #0
 800abd4:	f43f aea4 	beq.w	800a920 <_dtoa_r+0x6a0>
 800abd8:	f1b8 0f00 	cmp.w	r8, #0
 800abdc:	d005      	beq.n	800abea <_dtoa_r+0x96a>
 800abde:	45b8      	cmp	r8, r7
 800abe0:	d003      	beq.n	800abea <_dtoa_r+0x96a>
 800abe2:	4641      	mov	r1, r8
 800abe4:	4620      	mov	r0, r4
 800abe6:	f000 fd15 	bl	800b614 <_Bfree>
 800abea:	4639      	mov	r1, r7
 800abec:	4620      	mov	r0, r4
 800abee:	f000 fd11 	bl	800b614 <_Bfree>
 800abf2:	e695      	b.n	800a920 <_dtoa_r+0x6a0>
 800abf4:	2600      	movs	r6, #0
 800abf6:	4637      	mov	r7, r6
 800abf8:	e7e1      	b.n	800abbe <_dtoa_r+0x93e>
 800abfa:	9700      	str	r7, [sp, #0]
 800abfc:	4637      	mov	r7, r6
 800abfe:	e599      	b.n	800a734 <_dtoa_r+0x4b4>
 800ac00:	40240000 	.word	0x40240000
 800ac04:	9b08      	ldr	r3, [sp, #32]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f000 80ca 	beq.w	800ada0 <_dtoa_r+0xb20>
 800ac0c:	9b03      	ldr	r3, [sp, #12]
 800ac0e:	9302      	str	r3, [sp, #8]
 800ac10:	2d00      	cmp	r5, #0
 800ac12:	dd05      	ble.n	800ac20 <_dtoa_r+0x9a0>
 800ac14:	4639      	mov	r1, r7
 800ac16:	462a      	mov	r2, r5
 800ac18:	4620      	mov	r0, r4
 800ac1a:	f000 ff17 	bl	800ba4c <__lshift>
 800ac1e:	4607      	mov	r7, r0
 800ac20:	f1b8 0f00 	cmp.w	r8, #0
 800ac24:	d05b      	beq.n	800acde <_dtoa_r+0xa5e>
 800ac26:	6879      	ldr	r1, [r7, #4]
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f000 fcb3 	bl	800b594 <_Balloc>
 800ac2e:	4605      	mov	r5, r0
 800ac30:	b928      	cbnz	r0, 800ac3e <_dtoa_r+0x9be>
 800ac32:	4b87      	ldr	r3, [pc, #540]	; (800ae50 <_dtoa_r+0xbd0>)
 800ac34:	4602      	mov	r2, r0
 800ac36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac3a:	f7ff bb3b 	b.w	800a2b4 <_dtoa_r+0x34>
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	3202      	adds	r2, #2
 800ac42:	0092      	lsls	r2, r2, #2
 800ac44:	f107 010c 	add.w	r1, r7, #12
 800ac48:	300c      	adds	r0, #12
 800ac4a:	f000 fc95 	bl	800b578 <memcpy>
 800ac4e:	2201      	movs	r2, #1
 800ac50:	4629      	mov	r1, r5
 800ac52:	4620      	mov	r0, r4
 800ac54:	f000 fefa 	bl	800ba4c <__lshift>
 800ac58:	9b01      	ldr	r3, [sp, #4]
 800ac5a:	f103 0901 	add.w	r9, r3, #1
 800ac5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac62:	4413      	add	r3, r2
 800ac64:	9305      	str	r3, [sp, #20]
 800ac66:	f00a 0301 	and.w	r3, sl, #1
 800ac6a:	46b8      	mov	r8, r7
 800ac6c:	9304      	str	r3, [sp, #16]
 800ac6e:	4607      	mov	r7, r0
 800ac70:	4631      	mov	r1, r6
 800ac72:	ee18 0a10 	vmov	r0, s16
 800ac76:	f7ff fa77 	bl	800a168 <quorem>
 800ac7a:	4641      	mov	r1, r8
 800ac7c:	9002      	str	r0, [sp, #8]
 800ac7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac82:	ee18 0a10 	vmov	r0, s16
 800ac86:	f000 ff51 	bl	800bb2c <__mcmp>
 800ac8a:	463a      	mov	r2, r7
 800ac8c:	9003      	str	r0, [sp, #12]
 800ac8e:	4631      	mov	r1, r6
 800ac90:	4620      	mov	r0, r4
 800ac92:	f000 ff67 	bl	800bb64 <__mdiff>
 800ac96:	68c2      	ldr	r2, [r0, #12]
 800ac98:	f109 3bff 	add.w	fp, r9, #4294967295
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	bb02      	cbnz	r2, 800ace2 <_dtoa_r+0xa62>
 800aca0:	4601      	mov	r1, r0
 800aca2:	ee18 0a10 	vmov	r0, s16
 800aca6:	f000 ff41 	bl	800bb2c <__mcmp>
 800acaa:	4602      	mov	r2, r0
 800acac:	4629      	mov	r1, r5
 800acae:	4620      	mov	r0, r4
 800acb0:	9207      	str	r2, [sp, #28]
 800acb2:	f000 fcaf 	bl	800b614 <_Bfree>
 800acb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800acba:	ea43 0102 	orr.w	r1, r3, r2
 800acbe:	9b04      	ldr	r3, [sp, #16]
 800acc0:	430b      	orrs	r3, r1
 800acc2:	464d      	mov	r5, r9
 800acc4:	d10f      	bne.n	800ace6 <_dtoa_r+0xa66>
 800acc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acca:	d02a      	beq.n	800ad22 <_dtoa_r+0xaa2>
 800accc:	9b03      	ldr	r3, [sp, #12]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	dd02      	ble.n	800acd8 <_dtoa_r+0xa58>
 800acd2:	9b02      	ldr	r3, [sp, #8]
 800acd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800acd8:	f88b a000 	strb.w	sl, [fp]
 800acdc:	e775      	b.n	800abca <_dtoa_r+0x94a>
 800acde:	4638      	mov	r0, r7
 800ace0:	e7ba      	b.n	800ac58 <_dtoa_r+0x9d8>
 800ace2:	2201      	movs	r2, #1
 800ace4:	e7e2      	b.n	800acac <_dtoa_r+0xa2c>
 800ace6:	9b03      	ldr	r3, [sp, #12]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	db04      	blt.n	800acf6 <_dtoa_r+0xa76>
 800acec:	9906      	ldr	r1, [sp, #24]
 800acee:	430b      	orrs	r3, r1
 800acf0:	9904      	ldr	r1, [sp, #16]
 800acf2:	430b      	orrs	r3, r1
 800acf4:	d122      	bne.n	800ad3c <_dtoa_r+0xabc>
 800acf6:	2a00      	cmp	r2, #0
 800acf8:	ddee      	ble.n	800acd8 <_dtoa_r+0xa58>
 800acfa:	ee18 1a10 	vmov	r1, s16
 800acfe:	2201      	movs	r2, #1
 800ad00:	4620      	mov	r0, r4
 800ad02:	f000 fea3 	bl	800ba4c <__lshift>
 800ad06:	4631      	mov	r1, r6
 800ad08:	ee08 0a10 	vmov	s16, r0
 800ad0c:	f000 ff0e 	bl	800bb2c <__mcmp>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	dc03      	bgt.n	800ad1c <_dtoa_r+0xa9c>
 800ad14:	d1e0      	bne.n	800acd8 <_dtoa_r+0xa58>
 800ad16:	f01a 0f01 	tst.w	sl, #1
 800ad1a:	d0dd      	beq.n	800acd8 <_dtoa_r+0xa58>
 800ad1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad20:	d1d7      	bne.n	800acd2 <_dtoa_r+0xa52>
 800ad22:	2339      	movs	r3, #57	; 0x39
 800ad24:	f88b 3000 	strb.w	r3, [fp]
 800ad28:	462b      	mov	r3, r5
 800ad2a:	461d      	mov	r5, r3
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad32:	2a39      	cmp	r2, #57	; 0x39
 800ad34:	d071      	beq.n	800ae1a <_dtoa_r+0xb9a>
 800ad36:	3201      	adds	r2, #1
 800ad38:	701a      	strb	r2, [r3, #0]
 800ad3a:	e746      	b.n	800abca <_dtoa_r+0x94a>
 800ad3c:	2a00      	cmp	r2, #0
 800ad3e:	dd07      	ble.n	800ad50 <_dtoa_r+0xad0>
 800ad40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad44:	d0ed      	beq.n	800ad22 <_dtoa_r+0xaa2>
 800ad46:	f10a 0301 	add.w	r3, sl, #1
 800ad4a:	f88b 3000 	strb.w	r3, [fp]
 800ad4e:	e73c      	b.n	800abca <_dtoa_r+0x94a>
 800ad50:	9b05      	ldr	r3, [sp, #20]
 800ad52:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ad56:	4599      	cmp	r9, r3
 800ad58:	d047      	beq.n	800adea <_dtoa_r+0xb6a>
 800ad5a:	ee18 1a10 	vmov	r1, s16
 800ad5e:	2300      	movs	r3, #0
 800ad60:	220a      	movs	r2, #10
 800ad62:	4620      	mov	r0, r4
 800ad64:	f000 fc78 	bl	800b658 <__multadd>
 800ad68:	45b8      	cmp	r8, r7
 800ad6a:	ee08 0a10 	vmov	s16, r0
 800ad6e:	f04f 0300 	mov.w	r3, #0
 800ad72:	f04f 020a 	mov.w	r2, #10
 800ad76:	4641      	mov	r1, r8
 800ad78:	4620      	mov	r0, r4
 800ad7a:	d106      	bne.n	800ad8a <_dtoa_r+0xb0a>
 800ad7c:	f000 fc6c 	bl	800b658 <__multadd>
 800ad80:	4680      	mov	r8, r0
 800ad82:	4607      	mov	r7, r0
 800ad84:	f109 0901 	add.w	r9, r9, #1
 800ad88:	e772      	b.n	800ac70 <_dtoa_r+0x9f0>
 800ad8a:	f000 fc65 	bl	800b658 <__multadd>
 800ad8e:	4639      	mov	r1, r7
 800ad90:	4680      	mov	r8, r0
 800ad92:	2300      	movs	r3, #0
 800ad94:	220a      	movs	r2, #10
 800ad96:	4620      	mov	r0, r4
 800ad98:	f000 fc5e 	bl	800b658 <__multadd>
 800ad9c:	4607      	mov	r7, r0
 800ad9e:	e7f1      	b.n	800ad84 <_dtoa_r+0xb04>
 800ada0:	9b03      	ldr	r3, [sp, #12]
 800ada2:	9302      	str	r3, [sp, #8]
 800ada4:	9d01      	ldr	r5, [sp, #4]
 800ada6:	ee18 0a10 	vmov	r0, s16
 800adaa:	4631      	mov	r1, r6
 800adac:	f7ff f9dc 	bl	800a168 <quorem>
 800adb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800adb4:	9b01      	ldr	r3, [sp, #4]
 800adb6:	f805 ab01 	strb.w	sl, [r5], #1
 800adba:	1aea      	subs	r2, r5, r3
 800adbc:	9b02      	ldr	r3, [sp, #8]
 800adbe:	4293      	cmp	r3, r2
 800adc0:	dd09      	ble.n	800add6 <_dtoa_r+0xb56>
 800adc2:	ee18 1a10 	vmov	r1, s16
 800adc6:	2300      	movs	r3, #0
 800adc8:	220a      	movs	r2, #10
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 fc44 	bl	800b658 <__multadd>
 800add0:	ee08 0a10 	vmov	s16, r0
 800add4:	e7e7      	b.n	800ada6 <_dtoa_r+0xb26>
 800add6:	9b02      	ldr	r3, [sp, #8]
 800add8:	2b00      	cmp	r3, #0
 800adda:	bfc8      	it	gt
 800addc:	461d      	movgt	r5, r3
 800adde:	9b01      	ldr	r3, [sp, #4]
 800ade0:	bfd8      	it	le
 800ade2:	2501      	movle	r5, #1
 800ade4:	441d      	add	r5, r3
 800ade6:	f04f 0800 	mov.w	r8, #0
 800adea:	ee18 1a10 	vmov	r1, s16
 800adee:	2201      	movs	r2, #1
 800adf0:	4620      	mov	r0, r4
 800adf2:	f000 fe2b 	bl	800ba4c <__lshift>
 800adf6:	4631      	mov	r1, r6
 800adf8:	ee08 0a10 	vmov	s16, r0
 800adfc:	f000 fe96 	bl	800bb2c <__mcmp>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	dc91      	bgt.n	800ad28 <_dtoa_r+0xaa8>
 800ae04:	d102      	bne.n	800ae0c <_dtoa_r+0xb8c>
 800ae06:	f01a 0f01 	tst.w	sl, #1
 800ae0a:	d18d      	bne.n	800ad28 <_dtoa_r+0xaa8>
 800ae0c:	462b      	mov	r3, r5
 800ae0e:	461d      	mov	r5, r3
 800ae10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae14:	2a30      	cmp	r2, #48	; 0x30
 800ae16:	d0fa      	beq.n	800ae0e <_dtoa_r+0xb8e>
 800ae18:	e6d7      	b.n	800abca <_dtoa_r+0x94a>
 800ae1a:	9a01      	ldr	r2, [sp, #4]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d184      	bne.n	800ad2a <_dtoa_r+0xaaa>
 800ae20:	9b00      	ldr	r3, [sp, #0]
 800ae22:	3301      	adds	r3, #1
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	2331      	movs	r3, #49	; 0x31
 800ae28:	7013      	strb	r3, [r2, #0]
 800ae2a:	e6ce      	b.n	800abca <_dtoa_r+0x94a>
 800ae2c:	4b09      	ldr	r3, [pc, #36]	; (800ae54 <_dtoa_r+0xbd4>)
 800ae2e:	f7ff ba95 	b.w	800a35c <_dtoa_r+0xdc>
 800ae32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f47f aa6e 	bne.w	800a316 <_dtoa_r+0x96>
 800ae3a:	4b07      	ldr	r3, [pc, #28]	; (800ae58 <_dtoa_r+0xbd8>)
 800ae3c:	f7ff ba8e 	b.w	800a35c <_dtoa_r+0xdc>
 800ae40:	9b02      	ldr	r3, [sp, #8]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	dcae      	bgt.n	800ada4 <_dtoa_r+0xb24>
 800ae46:	9b06      	ldr	r3, [sp, #24]
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	f73f aea8 	bgt.w	800ab9e <_dtoa_r+0x91e>
 800ae4e:	e7a9      	b.n	800ada4 <_dtoa_r+0xb24>
 800ae50:	0800e738 	.word	0x0800e738
 800ae54:	0800e538 	.word	0x0800e538
 800ae58:	0800e6b9 	.word	0x0800e6b9

0800ae5c <rshift>:
 800ae5c:	6903      	ldr	r3, [r0, #16]
 800ae5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae66:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae6a:	f100 0414 	add.w	r4, r0, #20
 800ae6e:	dd45      	ble.n	800aefc <rshift+0xa0>
 800ae70:	f011 011f 	ands.w	r1, r1, #31
 800ae74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae7c:	d10c      	bne.n	800ae98 <rshift+0x3c>
 800ae7e:	f100 0710 	add.w	r7, r0, #16
 800ae82:	4629      	mov	r1, r5
 800ae84:	42b1      	cmp	r1, r6
 800ae86:	d334      	bcc.n	800aef2 <rshift+0x96>
 800ae88:	1a9b      	subs	r3, r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	1eea      	subs	r2, r5, #3
 800ae8e:	4296      	cmp	r6, r2
 800ae90:	bf38      	it	cc
 800ae92:	2300      	movcc	r3, #0
 800ae94:	4423      	add	r3, r4
 800ae96:	e015      	b.n	800aec4 <rshift+0x68>
 800ae98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae9c:	f1c1 0820 	rsb	r8, r1, #32
 800aea0:	40cf      	lsrs	r7, r1
 800aea2:	f105 0e04 	add.w	lr, r5, #4
 800aea6:	46a1      	mov	r9, r4
 800aea8:	4576      	cmp	r6, lr
 800aeaa:	46f4      	mov	ip, lr
 800aeac:	d815      	bhi.n	800aeda <rshift+0x7e>
 800aeae:	1a9a      	subs	r2, r3, r2
 800aeb0:	0092      	lsls	r2, r2, #2
 800aeb2:	3a04      	subs	r2, #4
 800aeb4:	3501      	adds	r5, #1
 800aeb6:	42ae      	cmp	r6, r5
 800aeb8:	bf38      	it	cc
 800aeba:	2200      	movcc	r2, #0
 800aebc:	18a3      	adds	r3, r4, r2
 800aebe:	50a7      	str	r7, [r4, r2]
 800aec0:	b107      	cbz	r7, 800aec4 <rshift+0x68>
 800aec2:	3304      	adds	r3, #4
 800aec4:	1b1a      	subs	r2, r3, r4
 800aec6:	42a3      	cmp	r3, r4
 800aec8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aecc:	bf08      	it	eq
 800aece:	2300      	moveq	r3, #0
 800aed0:	6102      	str	r2, [r0, #16]
 800aed2:	bf08      	it	eq
 800aed4:	6143      	streq	r3, [r0, #20]
 800aed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeda:	f8dc c000 	ldr.w	ip, [ip]
 800aede:	fa0c fc08 	lsl.w	ip, ip, r8
 800aee2:	ea4c 0707 	orr.w	r7, ip, r7
 800aee6:	f849 7b04 	str.w	r7, [r9], #4
 800aeea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aeee:	40cf      	lsrs	r7, r1
 800aef0:	e7da      	b.n	800aea8 <rshift+0x4c>
 800aef2:	f851 cb04 	ldr.w	ip, [r1], #4
 800aef6:	f847 cf04 	str.w	ip, [r7, #4]!
 800aefa:	e7c3      	b.n	800ae84 <rshift+0x28>
 800aefc:	4623      	mov	r3, r4
 800aefe:	e7e1      	b.n	800aec4 <rshift+0x68>

0800af00 <__hexdig_fun>:
 800af00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af04:	2b09      	cmp	r3, #9
 800af06:	d802      	bhi.n	800af0e <__hexdig_fun+0xe>
 800af08:	3820      	subs	r0, #32
 800af0a:	b2c0      	uxtb	r0, r0
 800af0c:	4770      	bx	lr
 800af0e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af12:	2b05      	cmp	r3, #5
 800af14:	d801      	bhi.n	800af1a <__hexdig_fun+0x1a>
 800af16:	3847      	subs	r0, #71	; 0x47
 800af18:	e7f7      	b.n	800af0a <__hexdig_fun+0xa>
 800af1a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af1e:	2b05      	cmp	r3, #5
 800af20:	d801      	bhi.n	800af26 <__hexdig_fun+0x26>
 800af22:	3827      	subs	r0, #39	; 0x27
 800af24:	e7f1      	b.n	800af0a <__hexdig_fun+0xa>
 800af26:	2000      	movs	r0, #0
 800af28:	4770      	bx	lr
	...

0800af2c <__gethex>:
 800af2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af30:	ed2d 8b02 	vpush	{d8}
 800af34:	b089      	sub	sp, #36	; 0x24
 800af36:	ee08 0a10 	vmov	s16, r0
 800af3a:	9304      	str	r3, [sp, #16]
 800af3c:	4bb4      	ldr	r3, [pc, #720]	; (800b210 <__gethex+0x2e4>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	9301      	str	r3, [sp, #4]
 800af42:	4618      	mov	r0, r3
 800af44:	468b      	mov	fp, r1
 800af46:	4690      	mov	r8, r2
 800af48:	f7f5 f96a 	bl	8000220 <strlen>
 800af4c:	9b01      	ldr	r3, [sp, #4]
 800af4e:	f8db 2000 	ldr.w	r2, [fp]
 800af52:	4403      	add	r3, r0
 800af54:	4682      	mov	sl, r0
 800af56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800af5a:	9305      	str	r3, [sp, #20]
 800af5c:	1c93      	adds	r3, r2, #2
 800af5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af66:	32fe      	adds	r2, #254	; 0xfe
 800af68:	18d1      	adds	r1, r2, r3
 800af6a:	461f      	mov	r7, r3
 800af6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af70:	9100      	str	r1, [sp, #0]
 800af72:	2830      	cmp	r0, #48	; 0x30
 800af74:	d0f8      	beq.n	800af68 <__gethex+0x3c>
 800af76:	f7ff ffc3 	bl	800af00 <__hexdig_fun>
 800af7a:	4604      	mov	r4, r0
 800af7c:	2800      	cmp	r0, #0
 800af7e:	d13a      	bne.n	800aff6 <__gethex+0xca>
 800af80:	9901      	ldr	r1, [sp, #4]
 800af82:	4652      	mov	r2, sl
 800af84:	4638      	mov	r0, r7
 800af86:	f001 fa33 	bl	800c3f0 <strncmp>
 800af8a:	4605      	mov	r5, r0
 800af8c:	2800      	cmp	r0, #0
 800af8e:	d168      	bne.n	800b062 <__gethex+0x136>
 800af90:	f817 000a 	ldrb.w	r0, [r7, sl]
 800af94:	eb07 060a 	add.w	r6, r7, sl
 800af98:	f7ff ffb2 	bl	800af00 <__hexdig_fun>
 800af9c:	2800      	cmp	r0, #0
 800af9e:	d062      	beq.n	800b066 <__gethex+0x13a>
 800afa0:	4633      	mov	r3, r6
 800afa2:	7818      	ldrb	r0, [r3, #0]
 800afa4:	2830      	cmp	r0, #48	; 0x30
 800afa6:	461f      	mov	r7, r3
 800afa8:	f103 0301 	add.w	r3, r3, #1
 800afac:	d0f9      	beq.n	800afa2 <__gethex+0x76>
 800afae:	f7ff ffa7 	bl	800af00 <__hexdig_fun>
 800afb2:	2301      	movs	r3, #1
 800afb4:	fab0 f480 	clz	r4, r0
 800afb8:	0964      	lsrs	r4, r4, #5
 800afba:	4635      	mov	r5, r6
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	463a      	mov	r2, r7
 800afc0:	4616      	mov	r6, r2
 800afc2:	3201      	adds	r2, #1
 800afc4:	7830      	ldrb	r0, [r6, #0]
 800afc6:	f7ff ff9b 	bl	800af00 <__hexdig_fun>
 800afca:	2800      	cmp	r0, #0
 800afcc:	d1f8      	bne.n	800afc0 <__gethex+0x94>
 800afce:	9901      	ldr	r1, [sp, #4]
 800afd0:	4652      	mov	r2, sl
 800afd2:	4630      	mov	r0, r6
 800afd4:	f001 fa0c 	bl	800c3f0 <strncmp>
 800afd8:	b980      	cbnz	r0, 800affc <__gethex+0xd0>
 800afda:	b94d      	cbnz	r5, 800aff0 <__gethex+0xc4>
 800afdc:	eb06 050a 	add.w	r5, r6, sl
 800afe0:	462a      	mov	r2, r5
 800afe2:	4616      	mov	r6, r2
 800afe4:	3201      	adds	r2, #1
 800afe6:	7830      	ldrb	r0, [r6, #0]
 800afe8:	f7ff ff8a 	bl	800af00 <__hexdig_fun>
 800afec:	2800      	cmp	r0, #0
 800afee:	d1f8      	bne.n	800afe2 <__gethex+0xb6>
 800aff0:	1bad      	subs	r5, r5, r6
 800aff2:	00ad      	lsls	r5, r5, #2
 800aff4:	e004      	b.n	800b000 <__gethex+0xd4>
 800aff6:	2400      	movs	r4, #0
 800aff8:	4625      	mov	r5, r4
 800affa:	e7e0      	b.n	800afbe <__gethex+0x92>
 800affc:	2d00      	cmp	r5, #0
 800affe:	d1f7      	bne.n	800aff0 <__gethex+0xc4>
 800b000:	7833      	ldrb	r3, [r6, #0]
 800b002:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b006:	2b50      	cmp	r3, #80	; 0x50
 800b008:	d13b      	bne.n	800b082 <__gethex+0x156>
 800b00a:	7873      	ldrb	r3, [r6, #1]
 800b00c:	2b2b      	cmp	r3, #43	; 0x2b
 800b00e:	d02c      	beq.n	800b06a <__gethex+0x13e>
 800b010:	2b2d      	cmp	r3, #45	; 0x2d
 800b012:	d02e      	beq.n	800b072 <__gethex+0x146>
 800b014:	1c71      	adds	r1, r6, #1
 800b016:	f04f 0900 	mov.w	r9, #0
 800b01a:	7808      	ldrb	r0, [r1, #0]
 800b01c:	f7ff ff70 	bl	800af00 <__hexdig_fun>
 800b020:	1e43      	subs	r3, r0, #1
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b18      	cmp	r3, #24
 800b026:	d82c      	bhi.n	800b082 <__gethex+0x156>
 800b028:	f1a0 0210 	sub.w	r2, r0, #16
 800b02c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b030:	f7ff ff66 	bl	800af00 <__hexdig_fun>
 800b034:	1e43      	subs	r3, r0, #1
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b18      	cmp	r3, #24
 800b03a:	d91d      	bls.n	800b078 <__gethex+0x14c>
 800b03c:	f1b9 0f00 	cmp.w	r9, #0
 800b040:	d000      	beq.n	800b044 <__gethex+0x118>
 800b042:	4252      	negs	r2, r2
 800b044:	4415      	add	r5, r2
 800b046:	f8cb 1000 	str.w	r1, [fp]
 800b04a:	b1e4      	cbz	r4, 800b086 <__gethex+0x15a>
 800b04c:	9b00      	ldr	r3, [sp, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	bf14      	ite	ne
 800b052:	2700      	movne	r7, #0
 800b054:	2706      	moveq	r7, #6
 800b056:	4638      	mov	r0, r7
 800b058:	b009      	add	sp, #36	; 0x24
 800b05a:	ecbd 8b02 	vpop	{d8}
 800b05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b062:	463e      	mov	r6, r7
 800b064:	4625      	mov	r5, r4
 800b066:	2401      	movs	r4, #1
 800b068:	e7ca      	b.n	800b000 <__gethex+0xd4>
 800b06a:	f04f 0900 	mov.w	r9, #0
 800b06e:	1cb1      	adds	r1, r6, #2
 800b070:	e7d3      	b.n	800b01a <__gethex+0xee>
 800b072:	f04f 0901 	mov.w	r9, #1
 800b076:	e7fa      	b.n	800b06e <__gethex+0x142>
 800b078:	230a      	movs	r3, #10
 800b07a:	fb03 0202 	mla	r2, r3, r2, r0
 800b07e:	3a10      	subs	r2, #16
 800b080:	e7d4      	b.n	800b02c <__gethex+0x100>
 800b082:	4631      	mov	r1, r6
 800b084:	e7df      	b.n	800b046 <__gethex+0x11a>
 800b086:	1bf3      	subs	r3, r6, r7
 800b088:	3b01      	subs	r3, #1
 800b08a:	4621      	mov	r1, r4
 800b08c:	2b07      	cmp	r3, #7
 800b08e:	dc0b      	bgt.n	800b0a8 <__gethex+0x17c>
 800b090:	ee18 0a10 	vmov	r0, s16
 800b094:	f000 fa7e 	bl	800b594 <_Balloc>
 800b098:	4604      	mov	r4, r0
 800b09a:	b940      	cbnz	r0, 800b0ae <__gethex+0x182>
 800b09c:	4b5d      	ldr	r3, [pc, #372]	; (800b214 <__gethex+0x2e8>)
 800b09e:	4602      	mov	r2, r0
 800b0a0:	21de      	movs	r1, #222	; 0xde
 800b0a2:	485d      	ldr	r0, [pc, #372]	; (800b218 <__gethex+0x2ec>)
 800b0a4:	f001 f9c6 	bl	800c434 <__assert_func>
 800b0a8:	3101      	adds	r1, #1
 800b0aa:	105b      	asrs	r3, r3, #1
 800b0ac:	e7ee      	b.n	800b08c <__gethex+0x160>
 800b0ae:	f100 0914 	add.w	r9, r0, #20
 800b0b2:	f04f 0b00 	mov.w	fp, #0
 800b0b6:	f1ca 0301 	rsb	r3, sl, #1
 800b0ba:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0be:	f8cd b000 	str.w	fp, [sp]
 800b0c2:	9306      	str	r3, [sp, #24]
 800b0c4:	42b7      	cmp	r7, r6
 800b0c6:	d340      	bcc.n	800b14a <__gethex+0x21e>
 800b0c8:	9802      	ldr	r0, [sp, #8]
 800b0ca:	9b00      	ldr	r3, [sp, #0]
 800b0cc:	f840 3b04 	str.w	r3, [r0], #4
 800b0d0:	eba0 0009 	sub.w	r0, r0, r9
 800b0d4:	1080      	asrs	r0, r0, #2
 800b0d6:	0146      	lsls	r6, r0, #5
 800b0d8:	6120      	str	r0, [r4, #16]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 fb4c 	bl	800b778 <__hi0bits>
 800b0e0:	1a30      	subs	r0, r6, r0
 800b0e2:	f8d8 6000 	ldr.w	r6, [r8]
 800b0e6:	42b0      	cmp	r0, r6
 800b0e8:	dd63      	ble.n	800b1b2 <__gethex+0x286>
 800b0ea:	1b87      	subs	r7, r0, r6
 800b0ec:	4639      	mov	r1, r7
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 fef0 	bl	800bed4 <__any_on>
 800b0f4:	4682      	mov	sl, r0
 800b0f6:	b1a8      	cbz	r0, 800b124 <__gethex+0x1f8>
 800b0f8:	1e7b      	subs	r3, r7, #1
 800b0fa:	1159      	asrs	r1, r3, #5
 800b0fc:	f003 021f 	and.w	r2, r3, #31
 800b100:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b104:	f04f 0a01 	mov.w	sl, #1
 800b108:	fa0a f202 	lsl.w	r2, sl, r2
 800b10c:	420a      	tst	r2, r1
 800b10e:	d009      	beq.n	800b124 <__gethex+0x1f8>
 800b110:	4553      	cmp	r3, sl
 800b112:	dd05      	ble.n	800b120 <__gethex+0x1f4>
 800b114:	1eb9      	subs	r1, r7, #2
 800b116:	4620      	mov	r0, r4
 800b118:	f000 fedc 	bl	800bed4 <__any_on>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d145      	bne.n	800b1ac <__gethex+0x280>
 800b120:	f04f 0a02 	mov.w	sl, #2
 800b124:	4639      	mov	r1, r7
 800b126:	4620      	mov	r0, r4
 800b128:	f7ff fe98 	bl	800ae5c <rshift>
 800b12c:	443d      	add	r5, r7
 800b12e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b132:	42ab      	cmp	r3, r5
 800b134:	da4c      	bge.n	800b1d0 <__gethex+0x2a4>
 800b136:	ee18 0a10 	vmov	r0, s16
 800b13a:	4621      	mov	r1, r4
 800b13c:	f000 fa6a 	bl	800b614 <_Bfree>
 800b140:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b142:	2300      	movs	r3, #0
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	27a3      	movs	r7, #163	; 0xa3
 800b148:	e785      	b.n	800b056 <__gethex+0x12a>
 800b14a:	1e73      	subs	r3, r6, #1
 800b14c:	9a05      	ldr	r2, [sp, #20]
 800b14e:	9303      	str	r3, [sp, #12]
 800b150:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b154:	4293      	cmp	r3, r2
 800b156:	d019      	beq.n	800b18c <__gethex+0x260>
 800b158:	f1bb 0f20 	cmp.w	fp, #32
 800b15c:	d107      	bne.n	800b16e <__gethex+0x242>
 800b15e:	9b02      	ldr	r3, [sp, #8]
 800b160:	9a00      	ldr	r2, [sp, #0]
 800b162:	f843 2b04 	str.w	r2, [r3], #4
 800b166:	9302      	str	r3, [sp, #8]
 800b168:	2300      	movs	r3, #0
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	469b      	mov	fp, r3
 800b16e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b172:	f7ff fec5 	bl	800af00 <__hexdig_fun>
 800b176:	9b00      	ldr	r3, [sp, #0]
 800b178:	f000 000f 	and.w	r0, r0, #15
 800b17c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b180:	4303      	orrs	r3, r0
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	f10b 0b04 	add.w	fp, fp, #4
 800b188:	9b03      	ldr	r3, [sp, #12]
 800b18a:	e00d      	b.n	800b1a8 <__gethex+0x27c>
 800b18c:	9b03      	ldr	r3, [sp, #12]
 800b18e:	9a06      	ldr	r2, [sp, #24]
 800b190:	4413      	add	r3, r2
 800b192:	42bb      	cmp	r3, r7
 800b194:	d3e0      	bcc.n	800b158 <__gethex+0x22c>
 800b196:	4618      	mov	r0, r3
 800b198:	9901      	ldr	r1, [sp, #4]
 800b19a:	9307      	str	r3, [sp, #28]
 800b19c:	4652      	mov	r2, sl
 800b19e:	f001 f927 	bl	800c3f0 <strncmp>
 800b1a2:	9b07      	ldr	r3, [sp, #28]
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d1d7      	bne.n	800b158 <__gethex+0x22c>
 800b1a8:	461e      	mov	r6, r3
 800b1aa:	e78b      	b.n	800b0c4 <__gethex+0x198>
 800b1ac:	f04f 0a03 	mov.w	sl, #3
 800b1b0:	e7b8      	b.n	800b124 <__gethex+0x1f8>
 800b1b2:	da0a      	bge.n	800b1ca <__gethex+0x29e>
 800b1b4:	1a37      	subs	r7, r6, r0
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	ee18 0a10 	vmov	r0, s16
 800b1bc:	463a      	mov	r2, r7
 800b1be:	f000 fc45 	bl	800ba4c <__lshift>
 800b1c2:	1bed      	subs	r5, r5, r7
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	f100 0914 	add.w	r9, r0, #20
 800b1ca:	f04f 0a00 	mov.w	sl, #0
 800b1ce:	e7ae      	b.n	800b12e <__gethex+0x202>
 800b1d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b1d4:	42a8      	cmp	r0, r5
 800b1d6:	dd72      	ble.n	800b2be <__gethex+0x392>
 800b1d8:	1b45      	subs	r5, r0, r5
 800b1da:	42ae      	cmp	r6, r5
 800b1dc:	dc36      	bgt.n	800b24c <__gethex+0x320>
 800b1de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d02a      	beq.n	800b23c <__gethex+0x310>
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	d02c      	beq.n	800b244 <__gethex+0x318>
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d11c      	bne.n	800b228 <__gethex+0x2fc>
 800b1ee:	42ae      	cmp	r6, r5
 800b1f0:	d11a      	bne.n	800b228 <__gethex+0x2fc>
 800b1f2:	2e01      	cmp	r6, #1
 800b1f4:	d112      	bne.n	800b21c <__gethex+0x2f0>
 800b1f6:	9a04      	ldr	r2, [sp, #16]
 800b1f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1fc:	6013      	str	r3, [r2, #0]
 800b1fe:	2301      	movs	r3, #1
 800b200:	6123      	str	r3, [r4, #16]
 800b202:	f8c9 3000 	str.w	r3, [r9]
 800b206:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b208:	2762      	movs	r7, #98	; 0x62
 800b20a:	601c      	str	r4, [r3, #0]
 800b20c:	e723      	b.n	800b056 <__gethex+0x12a>
 800b20e:	bf00      	nop
 800b210:	0800e7b0 	.word	0x0800e7b0
 800b214:	0800e738 	.word	0x0800e738
 800b218:	0800e749 	.word	0x0800e749
 800b21c:	1e71      	subs	r1, r6, #1
 800b21e:	4620      	mov	r0, r4
 800b220:	f000 fe58 	bl	800bed4 <__any_on>
 800b224:	2800      	cmp	r0, #0
 800b226:	d1e6      	bne.n	800b1f6 <__gethex+0x2ca>
 800b228:	ee18 0a10 	vmov	r0, s16
 800b22c:	4621      	mov	r1, r4
 800b22e:	f000 f9f1 	bl	800b614 <_Bfree>
 800b232:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b234:	2300      	movs	r3, #0
 800b236:	6013      	str	r3, [r2, #0]
 800b238:	2750      	movs	r7, #80	; 0x50
 800b23a:	e70c      	b.n	800b056 <__gethex+0x12a>
 800b23c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1f2      	bne.n	800b228 <__gethex+0x2fc>
 800b242:	e7d8      	b.n	800b1f6 <__gethex+0x2ca>
 800b244:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b246:	2b00      	cmp	r3, #0
 800b248:	d1d5      	bne.n	800b1f6 <__gethex+0x2ca>
 800b24a:	e7ed      	b.n	800b228 <__gethex+0x2fc>
 800b24c:	1e6f      	subs	r7, r5, #1
 800b24e:	f1ba 0f00 	cmp.w	sl, #0
 800b252:	d131      	bne.n	800b2b8 <__gethex+0x38c>
 800b254:	b127      	cbz	r7, 800b260 <__gethex+0x334>
 800b256:	4639      	mov	r1, r7
 800b258:	4620      	mov	r0, r4
 800b25a:	f000 fe3b 	bl	800bed4 <__any_on>
 800b25e:	4682      	mov	sl, r0
 800b260:	117b      	asrs	r3, r7, #5
 800b262:	2101      	movs	r1, #1
 800b264:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b268:	f007 071f 	and.w	r7, r7, #31
 800b26c:	fa01 f707 	lsl.w	r7, r1, r7
 800b270:	421f      	tst	r7, r3
 800b272:	4629      	mov	r1, r5
 800b274:	4620      	mov	r0, r4
 800b276:	bf18      	it	ne
 800b278:	f04a 0a02 	orrne.w	sl, sl, #2
 800b27c:	1b76      	subs	r6, r6, r5
 800b27e:	f7ff fded 	bl	800ae5c <rshift>
 800b282:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b286:	2702      	movs	r7, #2
 800b288:	f1ba 0f00 	cmp.w	sl, #0
 800b28c:	d048      	beq.n	800b320 <__gethex+0x3f4>
 800b28e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b292:	2b02      	cmp	r3, #2
 800b294:	d015      	beq.n	800b2c2 <__gethex+0x396>
 800b296:	2b03      	cmp	r3, #3
 800b298:	d017      	beq.n	800b2ca <__gethex+0x39e>
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d109      	bne.n	800b2b2 <__gethex+0x386>
 800b29e:	f01a 0f02 	tst.w	sl, #2
 800b2a2:	d006      	beq.n	800b2b2 <__gethex+0x386>
 800b2a4:	f8d9 0000 	ldr.w	r0, [r9]
 800b2a8:	ea4a 0a00 	orr.w	sl, sl, r0
 800b2ac:	f01a 0f01 	tst.w	sl, #1
 800b2b0:	d10e      	bne.n	800b2d0 <__gethex+0x3a4>
 800b2b2:	f047 0710 	orr.w	r7, r7, #16
 800b2b6:	e033      	b.n	800b320 <__gethex+0x3f4>
 800b2b8:	f04f 0a01 	mov.w	sl, #1
 800b2bc:	e7d0      	b.n	800b260 <__gethex+0x334>
 800b2be:	2701      	movs	r7, #1
 800b2c0:	e7e2      	b.n	800b288 <__gethex+0x35c>
 800b2c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2c4:	f1c3 0301 	rsb	r3, r3, #1
 800b2c8:	9315      	str	r3, [sp, #84]	; 0x54
 800b2ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d0f0      	beq.n	800b2b2 <__gethex+0x386>
 800b2d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2d4:	f104 0314 	add.w	r3, r4, #20
 800b2d8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2dc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2e0:	f04f 0c00 	mov.w	ip, #0
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b2ee:	d01c      	beq.n	800b32a <__gethex+0x3fe>
 800b2f0:	3201      	adds	r2, #1
 800b2f2:	6002      	str	r2, [r0, #0]
 800b2f4:	2f02      	cmp	r7, #2
 800b2f6:	f104 0314 	add.w	r3, r4, #20
 800b2fa:	d13f      	bne.n	800b37c <__gethex+0x450>
 800b2fc:	f8d8 2000 	ldr.w	r2, [r8]
 800b300:	3a01      	subs	r2, #1
 800b302:	42b2      	cmp	r2, r6
 800b304:	d10a      	bne.n	800b31c <__gethex+0x3f0>
 800b306:	1171      	asrs	r1, r6, #5
 800b308:	2201      	movs	r2, #1
 800b30a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b30e:	f006 061f 	and.w	r6, r6, #31
 800b312:	fa02 f606 	lsl.w	r6, r2, r6
 800b316:	421e      	tst	r6, r3
 800b318:	bf18      	it	ne
 800b31a:	4617      	movne	r7, r2
 800b31c:	f047 0720 	orr.w	r7, r7, #32
 800b320:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b322:	601c      	str	r4, [r3, #0]
 800b324:	9b04      	ldr	r3, [sp, #16]
 800b326:	601d      	str	r5, [r3, #0]
 800b328:	e695      	b.n	800b056 <__gethex+0x12a>
 800b32a:	4299      	cmp	r1, r3
 800b32c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b330:	d8d8      	bhi.n	800b2e4 <__gethex+0x3b8>
 800b332:	68a3      	ldr	r3, [r4, #8]
 800b334:	459b      	cmp	fp, r3
 800b336:	db19      	blt.n	800b36c <__gethex+0x440>
 800b338:	6861      	ldr	r1, [r4, #4]
 800b33a:	ee18 0a10 	vmov	r0, s16
 800b33e:	3101      	adds	r1, #1
 800b340:	f000 f928 	bl	800b594 <_Balloc>
 800b344:	4681      	mov	r9, r0
 800b346:	b918      	cbnz	r0, 800b350 <__gethex+0x424>
 800b348:	4b1a      	ldr	r3, [pc, #104]	; (800b3b4 <__gethex+0x488>)
 800b34a:	4602      	mov	r2, r0
 800b34c:	2184      	movs	r1, #132	; 0x84
 800b34e:	e6a8      	b.n	800b0a2 <__gethex+0x176>
 800b350:	6922      	ldr	r2, [r4, #16]
 800b352:	3202      	adds	r2, #2
 800b354:	f104 010c 	add.w	r1, r4, #12
 800b358:	0092      	lsls	r2, r2, #2
 800b35a:	300c      	adds	r0, #12
 800b35c:	f000 f90c 	bl	800b578 <memcpy>
 800b360:	4621      	mov	r1, r4
 800b362:	ee18 0a10 	vmov	r0, s16
 800b366:	f000 f955 	bl	800b614 <_Bfree>
 800b36a:	464c      	mov	r4, r9
 800b36c:	6923      	ldr	r3, [r4, #16]
 800b36e:	1c5a      	adds	r2, r3, #1
 800b370:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b374:	6122      	str	r2, [r4, #16]
 800b376:	2201      	movs	r2, #1
 800b378:	615a      	str	r2, [r3, #20]
 800b37a:	e7bb      	b.n	800b2f4 <__gethex+0x3c8>
 800b37c:	6922      	ldr	r2, [r4, #16]
 800b37e:	455a      	cmp	r2, fp
 800b380:	dd0b      	ble.n	800b39a <__gethex+0x46e>
 800b382:	2101      	movs	r1, #1
 800b384:	4620      	mov	r0, r4
 800b386:	f7ff fd69 	bl	800ae5c <rshift>
 800b38a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b38e:	3501      	adds	r5, #1
 800b390:	42ab      	cmp	r3, r5
 800b392:	f6ff aed0 	blt.w	800b136 <__gethex+0x20a>
 800b396:	2701      	movs	r7, #1
 800b398:	e7c0      	b.n	800b31c <__gethex+0x3f0>
 800b39a:	f016 061f 	ands.w	r6, r6, #31
 800b39e:	d0fa      	beq.n	800b396 <__gethex+0x46a>
 800b3a0:	4453      	add	r3, sl
 800b3a2:	f1c6 0620 	rsb	r6, r6, #32
 800b3a6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b3aa:	f000 f9e5 	bl	800b778 <__hi0bits>
 800b3ae:	42b0      	cmp	r0, r6
 800b3b0:	dbe7      	blt.n	800b382 <__gethex+0x456>
 800b3b2:	e7f0      	b.n	800b396 <__gethex+0x46a>
 800b3b4:	0800e738 	.word	0x0800e738

0800b3b8 <L_shift>:
 800b3b8:	f1c2 0208 	rsb	r2, r2, #8
 800b3bc:	0092      	lsls	r2, r2, #2
 800b3be:	b570      	push	{r4, r5, r6, lr}
 800b3c0:	f1c2 0620 	rsb	r6, r2, #32
 800b3c4:	6843      	ldr	r3, [r0, #4]
 800b3c6:	6804      	ldr	r4, [r0, #0]
 800b3c8:	fa03 f506 	lsl.w	r5, r3, r6
 800b3cc:	432c      	orrs	r4, r5
 800b3ce:	40d3      	lsrs	r3, r2
 800b3d0:	6004      	str	r4, [r0, #0]
 800b3d2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3d6:	4288      	cmp	r0, r1
 800b3d8:	d3f4      	bcc.n	800b3c4 <L_shift+0xc>
 800b3da:	bd70      	pop	{r4, r5, r6, pc}

0800b3dc <__match>:
 800b3dc:	b530      	push	{r4, r5, lr}
 800b3de:	6803      	ldr	r3, [r0, #0]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3e6:	b914      	cbnz	r4, 800b3ee <__match+0x12>
 800b3e8:	6003      	str	r3, [r0, #0]
 800b3ea:	2001      	movs	r0, #1
 800b3ec:	bd30      	pop	{r4, r5, pc}
 800b3ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b3f6:	2d19      	cmp	r5, #25
 800b3f8:	bf98      	it	ls
 800b3fa:	3220      	addls	r2, #32
 800b3fc:	42a2      	cmp	r2, r4
 800b3fe:	d0f0      	beq.n	800b3e2 <__match+0x6>
 800b400:	2000      	movs	r0, #0
 800b402:	e7f3      	b.n	800b3ec <__match+0x10>

0800b404 <__hexnan>:
 800b404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b408:	680b      	ldr	r3, [r1, #0]
 800b40a:	115e      	asrs	r6, r3, #5
 800b40c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b410:	f013 031f 	ands.w	r3, r3, #31
 800b414:	b087      	sub	sp, #28
 800b416:	bf18      	it	ne
 800b418:	3604      	addne	r6, #4
 800b41a:	2500      	movs	r5, #0
 800b41c:	1f37      	subs	r7, r6, #4
 800b41e:	4690      	mov	r8, r2
 800b420:	6802      	ldr	r2, [r0, #0]
 800b422:	9301      	str	r3, [sp, #4]
 800b424:	4682      	mov	sl, r0
 800b426:	f846 5c04 	str.w	r5, [r6, #-4]
 800b42a:	46b9      	mov	r9, r7
 800b42c:	463c      	mov	r4, r7
 800b42e:	9502      	str	r5, [sp, #8]
 800b430:	46ab      	mov	fp, r5
 800b432:	7851      	ldrb	r1, [r2, #1]
 800b434:	1c53      	adds	r3, r2, #1
 800b436:	9303      	str	r3, [sp, #12]
 800b438:	b341      	cbz	r1, 800b48c <__hexnan+0x88>
 800b43a:	4608      	mov	r0, r1
 800b43c:	9205      	str	r2, [sp, #20]
 800b43e:	9104      	str	r1, [sp, #16]
 800b440:	f7ff fd5e 	bl	800af00 <__hexdig_fun>
 800b444:	2800      	cmp	r0, #0
 800b446:	d14f      	bne.n	800b4e8 <__hexnan+0xe4>
 800b448:	9904      	ldr	r1, [sp, #16]
 800b44a:	9a05      	ldr	r2, [sp, #20]
 800b44c:	2920      	cmp	r1, #32
 800b44e:	d818      	bhi.n	800b482 <__hexnan+0x7e>
 800b450:	9b02      	ldr	r3, [sp, #8]
 800b452:	459b      	cmp	fp, r3
 800b454:	dd13      	ble.n	800b47e <__hexnan+0x7a>
 800b456:	454c      	cmp	r4, r9
 800b458:	d206      	bcs.n	800b468 <__hexnan+0x64>
 800b45a:	2d07      	cmp	r5, #7
 800b45c:	dc04      	bgt.n	800b468 <__hexnan+0x64>
 800b45e:	462a      	mov	r2, r5
 800b460:	4649      	mov	r1, r9
 800b462:	4620      	mov	r0, r4
 800b464:	f7ff ffa8 	bl	800b3b8 <L_shift>
 800b468:	4544      	cmp	r4, r8
 800b46a:	d950      	bls.n	800b50e <__hexnan+0x10a>
 800b46c:	2300      	movs	r3, #0
 800b46e:	f1a4 0904 	sub.w	r9, r4, #4
 800b472:	f844 3c04 	str.w	r3, [r4, #-4]
 800b476:	f8cd b008 	str.w	fp, [sp, #8]
 800b47a:	464c      	mov	r4, r9
 800b47c:	461d      	mov	r5, r3
 800b47e:	9a03      	ldr	r2, [sp, #12]
 800b480:	e7d7      	b.n	800b432 <__hexnan+0x2e>
 800b482:	2929      	cmp	r1, #41	; 0x29
 800b484:	d156      	bne.n	800b534 <__hexnan+0x130>
 800b486:	3202      	adds	r2, #2
 800b488:	f8ca 2000 	str.w	r2, [sl]
 800b48c:	f1bb 0f00 	cmp.w	fp, #0
 800b490:	d050      	beq.n	800b534 <__hexnan+0x130>
 800b492:	454c      	cmp	r4, r9
 800b494:	d206      	bcs.n	800b4a4 <__hexnan+0xa0>
 800b496:	2d07      	cmp	r5, #7
 800b498:	dc04      	bgt.n	800b4a4 <__hexnan+0xa0>
 800b49a:	462a      	mov	r2, r5
 800b49c:	4649      	mov	r1, r9
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f7ff ff8a 	bl	800b3b8 <L_shift>
 800b4a4:	4544      	cmp	r4, r8
 800b4a6:	d934      	bls.n	800b512 <__hexnan+0x10e>
 800b4a8:	f1a8 0204 	sub.w	r2, r8, #4
 800b4ac:	4623      	mov	r3, r4
 800b4ae:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4b2:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4b6:	429f      	cmp	r7, r3
 800b4b8:	d2f9      	bcs.n	800b4ae <__hexnan+0xaa>
 800b4ba:	1b3b      	subs	r3, r7, r4
 800b4bc:	f023 0303 	bic.w	r3, r3, #3
 800b4c0:	3304      	adds	r3, #4
 800b4c2:	3401      	adds	r4, #1
 800b4c4:	3e03      	subs	r6, #3
 800b4c6:	42b4      	cmp	r4, r6
 800b4c8:	bf88      	it	hi
 800b4ca:	2304      	movhi	r3, #4
 800b4cc:	4443      	add	r3, r8
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f843 2b04 	str.w	r2, [r3], #4
 800b4d4:	429f      	cmp	r7, r3
 800b4d6:	d2fb      	bcs.n	800b4d0 <__hexnan+0xcc>
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	b91b      	cbnz	r3, 800b4e4 <__hexnan+0xe0>
 800b4dc:	4547      	cmp	r7, r8
 800b4de:	d127      	bne.n	800b530 <__hexnan+0x12c>
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	603b      	str	r3, [r7, #0]
 800b4e4:	2005      	movs	r0, #5
 800b4e6:	e026      	b.n	800b536 <__hexnan+0x132>
 800b4e8:	3501      	adds	r5, #1
 800b4ea:	2d08      	cmp	r5, #8
 800b4ec:	f10b 0b01 	add.w	fp, fp, #1
 800b4f0:	dd06      	ble.n	800b500 <__hexnan+0xfc>
 800b4f2:	4544      	cmp	r4, r8
 800b4f4:	d9c3      	bls.n	800b47e <__hexnan+0x7a>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4fc:	2501      	movs	r5, #1
 800b4fe:	3c04      	subs	r4, #4
 800b500:	6822      	ldr	r2, [r4, #0]
 800b502:	f000 000f 	and.w	r0, r0, #15
 800b506:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b50a:	6022      	str	r2, [r4, #0]
 800b50c:	e7b7      	b.n	800b47e <__hexnan+0x7a>
 800b50e:	2508      	movs	r5, #8
 800b510:	e7b5      	b.n	800b47e <__hexnan+0x7a>
 800b512:	9b01      	ldr	r3, [sp, #4]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d0df      	beq.n	800b4d8 <__hexnan+0xd4>
 800b518:	f04f 32ff 	mov.w	r2, #4294967295
 800b51c:	f1c3 0320 	rsb	r3, r3, #32
 800b520:	fa22 f303 	lsr.w	r3, r2, r3
 800b524:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b528:	401a      	ands	r2, r3
 800b52a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b52e:	e7d3      	b.n	800b4d8 <__hexnan+0xd4>
 800b530:	3f04      	subs	r7, #4
 800b532:	e7d1      	b.n	800b4d8 <__hexnan+0xd4>
 800b534:	2004      	movs	r0, #4
 800b536:	b007      	add	sp, #28
 800b538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b53c <_localeconv_r>:
 800b53c:	4800      	ldr	r0, [pc, #0]	; (800b540 <_localeconv_r+0x4>)
 800b53e:	4770      	bx	lr
 800b540:	20000174 	.word	0x20000174

0800b544 <malloc>:
 800b544:	4b02      	ldr	r3, [pc, #8]	; (800b550 <malloc+0xc>)
 800b546:	4601      	mov	r1, r0
 800b548:	6818      	ldr	r0, [r3, #0]
 800b54a:	f000 bd67 	b.w	800c01c <_malloc_r>
 800b54e:	bf00      	nop
 800b550:	2000001c 	.word	0x2000001c

0800b554 <__ascii_mbtowc>:
 800b554:	b082      	sub	sp, #8
 800b556:	b901      	cbnz	r1, 800b55a <__ascii_mbtowc+0x6>
 800b558:	a901      	add	r1, sp, #4
 800b55a:	b142      	cbz	r2, 800b56e <__ascii_mbtowc+0x1a>
 800b55c:	b14b      	cbz	r3, 800b572 <__ascii_mbtowc+0x1e>
 800b55e:	7813      	ldrb	r3, [r2, #0]
 800b560:	600b      	str	r3, [r1, #0]
 800b562:	7812      	ldrb	r2, [r2, #0]
 800b564:	1e10      	subs	r0, r2, #0
 800b566:	bf18      	it	ne
 800b568:	2001      	movne	r0, #1
 800b56a:	b002      	add	sp, #8
 800b56c:	4770      	bx	lr
 800b56e:	4610      	mov	r0, r2
 800b570:	e7fb      	b.n	800b56a <__ascii_mbtowc+0x16>
 800b572:	f06f 0001 	mvn.w	r0, #1
 800b576:	e7f8      	b.n	800b56a <__ascii_mbtowc+0x16>

0800b578 <memcpy>:
 800b578:	440a      	add	r2, r1
 800b57a:	4291      	cmp	r1, r2
 800b57c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b580:	d100      	bne.n	800b584 <memcpy+0xc>
 800b582:	4770      	bx	lr
 800b584:	b510      	push	{r4, lr}
 800b586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b58a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b58e:	4291      	cmp	r1, r2
 800b590:	d1f9      	bne.n	800b586 <memcpy+0xe>
 800b592:	bd10      	pop	{r4, pc}

0800b594 <_Balloc>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b598:	4604      	mov	r4, r0
 800b59a:	460d      	mov	r5, r1
 800b59c:	b976      	cbnz	r6, 800b5bc <_Balloc+0x28>
 800b59e:	2010      	movs	r0, #16
 800b5a0:	f7ff ffd0 	bl	800b544 <malloc>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	6260      	str	r0, [r4, #36]	; 0x24
 800b5a8:	b920      	cbnz	r0, 800b5b4 <_Balloc+0x20>
 800b5aa:	4b18      	ldr	r3, [pc, #96]	; (800b60c <_Balloc+0x78>)
 800b5ac:	4818      	ldr	r0, [pc, #96]	; (800b610 <_Balloc+0x7c>)
 800b5ae:	2166      	movs	r1, #102	; 0x66
 800b5b0:	f000 ff40 	bl	800c434 <__assert_func>
 800b5b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5b8:	6006      	str	r6, [r0, #0]
 800b5ba:	60c6      	str	r6, [r0, #12]
 800b5bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b5be:	68f3      	ldr	r3, [r6, #12]
 800b5c0:	b183      	cbz	r3, 800b5e4 <_Balloc+0x50>
 800b5c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5ca:	b9b8      	cbnz	r0, 800b5fc <_Balloc+0x68>
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	fa01 f605 	lsl.w	r6, r1, r5
 800b5d2:	1d72      	adds	r2, r6, #5
 800b5d4:	0092      	lsls	r2, r2, #2
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f000 fc9d 	bl	800bf16 <_calloc_r>
 800b5dc:	b160      	cbz	r0, 800b5f8 <_Balloc+0x64>
 800b5de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5e2:	e00e      	b.n	800b602 <_Balloc+0x6e>
 800b5e4:	2221      	movs	r2, #33	; 0x21
 800b5e6:	2104      	movs	r1, #4
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f000 fc94 	bl	800bf16 <_calloc_r>
 800b5ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5f0:	60f0      	str	r0, [r6, #12]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1e4      	bne.n	800b5c2 <_Balloc+0x2e>
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	bd70      	pop	{r4, r5, r6, pc}
 800b5fc:	6802      	ldr	r2, [r0, #0]
 800b5fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b602:	2300      	movs	r3, #0
 800b604:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b608:	e7f7      	b.n	800b5fa <_Balloc+0x66>
 800b60a:	bf00      	nop
 800b60c:	0800e6c6 	.word	0x0800e6c6
 800b610:	0800e7c4 	.word	0x0800e7c4

0800b614 <_Bfree>:
 800b614:	b570      	push	{r4, r5, r6, lr}
 800b616:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b618:	4605      	mov	r5, r0
 800b61a:	460c      	mov	r4, r1
 800b61c:	b976      	cbnz	r6, 800b63c <_Bfree+0x28>
 800b61e:	2010      	movs	r0, #16
 800b620:	f7ff ff90 	bl	800b544 <malloc>
 800b624:	4602      	mov	r2, r0
 800b626:	6268      	str	r0, [r5, #36]	; 0x24
 800b628:	b920      	cbnz	r0, 800b634 <_Bfree+0x20>
 800b62a:	4b09      	ldr	r3, [pc, #36]	; (800b650 <_Bfree+0x3c>)
 800b62c:	4809      	ldr	r0, [pc, #36]	; (800b654 <_Bfree+0x40>)
 800b62e:	218a      	movs	r1, #138	; 0x8a
 800b630:	f000 ff00 	bl	800c434 <__assert_func>
 800b634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b638:	6006      	str	r6, [r0, #0]
 800b63a:	60c6      	str	r6, [r0, #12]
 800b63c:	b13c      	cbz	r4, 800b64e <_Bfree+0x3a>
 800b63e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b640:	6862      	ldr	r2, [r4, #4]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b648:	6021      	str	r1, [r4, #0]
 800b64a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b64e:	bd70      	pop	{r4, r5, r6, pc}
 800b650:	0800e6c6 	.word	0x0800e6c6
 800b654:	0800e7c4 	.word	0x0800e7c4

0800b658 <__multadd>:
 800b658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b65c:	690d      	ldr	r5, [r1, #16]
 800b65e:	4607      	mov	r7, r0
 800b660:	460c      	mov	r4, r1
 800b662:	461e      	mov	r6, r3
 800b664:	f101 0c14 	add.w	ip, r1, #20
 800b668:	2000      	movs	r0, #0
 800b66a:	f8dc 3000 	ldr.w	r3, [ip]
 800b66e:	b299      	uxth	r1, r3
 800b670:	fb02 6101 	mla	r1, r2, r1, r6
 800b674:	0c1e      	lsrs	r6, r3, #16
 800b676:	0c0b      	lsrs	r3, r1, #16
 800b678:	fb02 3306 	mla	r3, r2, r6, r3
 800b67c:	b289      	uxth	r1, r1
 800b67e:	3001      	adds	r0, #1
 800b680:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b684:	4285      	cmp	r5, r0
 800b686:	f84c 1b04 	str.w	r1, [ip], #4
 800b68a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b68e:	dcec      	bgt.n	800b66a <__multadd+0x12>
 800b690:	b30e      	cbz	r6, 800b6d6 <__multadd+0x7e>
 800b692:	68a3      	ldr	r3, [r4, #8]
 800b694:	42ab      	cmp	r3, r5
 800b696:	dc19      	bgt.n	800b6cc <__multadd+0x74>
 800b698:	6861      	ldr	r1, [r4, #4]
 800b69a:	4638      	mov	r0, r7
 800b69c:	3101      	adds	r1, #1
 800b69e:	f7ff ff79 	bl	800b594 <_Balloc>
 800b6a2:	4680      	mov	r8, r0
 800b6a4:	b928      	cbnz	r0, 800b6b2 <__multadd+0x5a>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	4b0c      	ldr	r3, [pc, #48]	; (800b6dc <__multadd+0x84>)
 800b6aa:	480d      	ldr	r0, [pc, #52]	; (800b6e0 <__multadd+0x88>)
 800b6ac:	21b5      	movs	r1, #181	; 0xb5
 800b6ae:	f000 fec1 	bl	800c434 <__assert_func>
 800b6b2:	6922      	ldr	r2, [r4, #16]
 800b6b4:	3202      	adds	r2, #2
 800b6b6:	f104 010c 	add.w	r1, r4, #12
 800b6ba:	0092      	lsls	r2, r2, #2
 800b6bc:	300c      	adds	r0, #12
 800b6be:	f7ff ff5b 	bl	800b578 <memcpy>
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	4638      	mov	r0, r7
 800b6c6:	f7ff ffa5 	bl	800b614 <_Bfree>
 800b6ca:	4644      	mov	r4, r8
 800b6cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6d0:	3501      	adds	r5, #1
 800b6d2:	615e      	str	r6, [r3, #20]
 800b6d4:	6125      	str	r5, [r4, #16]
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6dc:	0800e738 	.word	0x0800e738
 800b6e0:	0800e7c4 	.word	0x0800e7c4

0800b6e4 <__s2b>:
 800b6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6e8:	460c      	mov	r4, r1
 800b6ea:	4615      	mov	r5, r2
 800b6ec:	461f      	mov	r7, r3
 800b6ee:	2209      	movs	r2, #9
 800b6f0:	3308      	adds	r3, #8
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	db09      	blt.n	800b714 <__s2b+0x30>
 800b700:	4630      	mov	r0, r6
 800b702:	f7ff ff47 	bl	800b594 <_Balloc>
 800b706:	b940      	cbnz	r0, 800b71a <__s2b+0x36>
 800b708:	4602      	mov	r2, r0
 800b70a:	4b19      	ldr	r3, [pc, #100]	; (800b770 <__s2b+0x8c>)
 800b70c:	4819      	ldr	r0, [pc, #100]	; (800b774 <__s2b+0x90>)
 800b70e:	21ce      	movs	r1, #206	; 0xce
 800b710:	f000 fe90 	bl	800c434 <__assert_func>
 800b714:	0052      	lsls	r2, r2, #1
 800b716:	3101      	adds	r1, #1
 800b718:	e7f0      	b.n	800b6fc <__s2b+0x18>
 800b71a:	9b08      	ldr	r3, [sp, #32]
 800b71c:	6143      	str	r3, [r0, #20]
 800b71e:	2d09      	cmp	r5, #9
 800b720:	f04f 0301 	mov.w	r3, #1
 800b724:	6103      	str	r3, [r0, #16]
 800b726:	dd16      	ble.n	800b756 <__s2b+0x72>
 800b728:	f104 0909 	add.w	r9, r4, #9
 800b72c:	46c8      	mov	r8, r9
 800b72e:	442c      	add	r4, r5
 800b730:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b734:	4601      	mov	r1, r0
 800b736:	3b30      	subs	r3, #48	; 0x30
 800b738:	220a      	movs	r2, #10
 800b73a:	4630      	mov	r0, r6
 800b73c:	f7ff ff8c 	bl	800b658 <__multadd>
 800b740:	45a0      	cmp	r8, r4
 800b742:	d1f5      	bne.n	800b730 <__s2b+0x4c>
 800b744:	f1a5 0408 	sub.w	r4, r5, #8
 800b748:	444c      	add	r4, r9
 800b74a:	1b2d      	subs	r5, r5, r4
 800b74c:	1963      	adds	r3, r4, r5
 800b74e:	42bb      	cmp	r3, r7
 800b750:	db04      	blt.n	800b75c <__s2b+0x78>
 800b752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b756:	340a      	adds	r4, #10
 800b758:	2509      	movs	r5, #9
 800b75a:	e7f6      	b.n	800b74a <__s2b+0x66>
 800b75c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b760:	4601      	mov	r1, r0
 800b762:	3b30      	subs	r3, #48	; 0x30
 800b764:	220a      	movs	r2, #10
 800b766:	4630      	mov	r0, r6
 800b768:	f7ff ff76 	bl	800b658 <__multadd>
 800b76c:	e7ee      	b.n	800b74c <__s2b+0x68>
 800b76e:	bf00      	nop
 800b770:	0800e738 	.word	0x0800e738
 800b774:	0800e7c4 	.word	0x0800e7c4

0800b778 <__hi0bits>:
 800b778:	0c03      	lsrs	r3, r0, #16
 800b77a:	041b      	lsls	r3, r3, #16
 800b77c:	b9d3      	cbnz	r3, 800b7b4 <__hi0bits+0x3c>
 800b77e:	0400      	lsls	r0, r0, #16
 800b780:	2310      	movs	r3, #16
 800b782:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b786:	bf04      	itt	eq
 800b788:	0200      	lsleq	r0, r0, #8
 800b78a:	3308      	addeq	r3, #8
 800b78c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b790:	bf04      	itt	eq
 800b792:	0100      	lsleq	r0, r0, #4
 800b794:	3304      	addeq	r3, #4
 800b796:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b79a:	bf04      	itt	eq
 800b79c:	0080      	lsleq	r0, r0, #2
 800b79e:	3302      	addeq	r3, #2
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	db05      	blt.n	800b7b0 <__hi0bits+0x38>
 800b7a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b7a8:	f103 0301 	add.w	r3, r3, #1
 800b7ac:	bf08      	it	eq
 800b7ae:	2320      	moveq	r3, #32
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	4770      	bx	lr
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	e7e4      	b.n	800b782 <__hi0bits+0xa>

0800b7b8 <__lo0bits>:
 800b7b8:	6803      	ldr	r3, [r0, #0]
 800b7ba:	f013 0207 	ands.w	r2, r3, #7
 800b7be:	4601      	mov	r1, r0
 800b7c0:	d00b      	beq.n	800b7da <__lo0bits+0x22>
 800b7c2:	07da      	lsls	r2, r3, #31
 800b7c4:	d423      	bmi.n	800b80e <__lo0bits+0x56>
 800b7c6:	0798      	lsls	r0, r3, #30
 800b7c8:	bf49      	itett	mi
 800b7ca:	085b      	lsrmi	r3, r3, #1
 800b7cc:	089b      	lsrpl	r3, r3, #2
 800b7ce:	2001      	movmi	r0, #1
 800b7d0:	600b      	strmi	r3, [r1, #0]
 800b7d2:	bf5c      	itt	pl
 800b7d4:	600b      	strpl	r3, [r1, #0]
 800b7d6:	2002      	movpl	r0, #2
 800b7d8:	4770      	bx	lr
 800b7da:	b298      	uxth	r0, r3
 800b7dc:	b9a8      	cbnz	r0, 800b80a <__lo0bits+0x52>
 800b7de:	0c1b      	lsrs	r3, r3, #16
 800b7e0:	2010      	movs	r0, #16
 800b7e2:	b2da      	uxtb	r2, r3
 800b7e4:	b90a      	cbnz	r2, 800b7ea <__lo0bits+0x32>
 800b7e6:	3008      	adds	r0, #8
 800b7e8:	0a1b      	lsrs	r3, r3, #8
 800b7ea:	071a      	lsls	r2, r3, #28
 800b7ec:	bf04      	itt	eq
 800b7ee:	091b      	lsreq	r3, r3, #4
 800b7f0:	3004      	addeq	r0, #4
 800b7f2:	079a      	lsls	r2, r3, #30
 800b7f4:	bf04      	itt	eq
 800b7f6:	089b      	lsreq	r3, r3, #2
 800b7f8:	3002      	addeq	r0, #2
 800b7fa:	07da      	lsls	r2, r3, #31
 800b7fc:	d403      	bmi.n	800b806 <__lo0bits+0x4e>
 800b7fe:	085b      	lsrs	r3, r3, #1
 800b800:	f100 0001 	add.w	r0, r0, #1
 800b804:	d005      	beq.n	800b812 <__lo0bits+0x5a>
 800b806:	600b      	str	r3, [r1, #0]
 800b808:	4770      	bx	lr
 800b80a:	4610      	mov	r0, r2
 800b80c:	e7e9      	b.n	800b7e2 <__lo0bits+0x2a>
 800b80e:	2000      	movs	r0, #0
 800b810:	4770      	bx	lr
 800b812:	2020      	movs	r0, #32
 800b814:	4770      	bx	lr
	...

0800b818 <__i2b>:
 800b818:	b510      	push	{r4, lr}
 800b81a:	460c      	mov	r4, r1
 800b81c:	2101      	movs	r1, #1
 800b81e:	f7ff feb9 	bl	800b594 <_Balloc>
 800b822:	4602      	mov	r2, r0
 800b824:	b928      	cbnz	r0, 800b832 <__i2b+0x1a>
 800b826:	4b05      	ldr	r3, [pc, #20]	; (800b83c <__i2b+0x24>)
 800b828:	4805      	ldr	r0, [pc, #20]	; (800b840 <__i2b+0x28>)
 800b82a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b82e:	f000 fe01 	bl	800c434 <__assert_func>
 800b832:	2301      	movs	r3, #1
 800b834:	6144      	str	r4, [r0, #20]
 800b836:	6103      	str	r3, [r0, #16]
 800b838:	bd10      	pop	{r4, pc}
 800b83a:	bf00      	nop
 800b83c:	0800e738 	.word	0x0800e738
 800b840:	0800e7c4 	.word	0x0800e7c4

0800b844 <__multiply>:
 800b844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b848:	4691      	mov	r9, r2
 800b84a:	690a      	ldr	r2, [r1, #16]
 800b84c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b850:	429a      	cmp	r2, r3
 800b852:	bfb8      	it	lt
 800b854:	460b      	movlt	r3, r1
 800b856:	460c      	mov	r4, r1
 800b858:	bfbc      	itt	lt
 800b85a:	464c      	movlt	r4, r9
 800b85c:	4699      	movlt	r9, r3
 800b85e:	6927      	ldr	r7, [r4, #16]
 800b860:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b864:	68a3      	ldr	r3, [r4, #8]
 800b866:	6861      	ldr	r1, [r4, #4]
 800b868:	eb07 060a 	add.w	r6, r7, sl
 800b86c:	42b3      	cmp	r3, r6
 800b86e:	b085      	sub	sp, #20
 800b870:	bfb8      	it	lt
 800b872:	3101      	addlt	r1, #1
 800b874:	f7ff fe8e 	bl	800b594 <_Balloc>
 800b878:	b930      	cbnz	r0, 800b888 <__multiply+0x44>
 800b87a:	4602      	mov	r2, r0
 800b87c:	4b44      	ldr	r3, [pc, #272]	; (800b990 <__multiply+0x14c>)
 800b87e:	4845      	ldr	r0, [pc, #276]	; (800b994 <__multiply+0x150>)
 800b880:	f240 115d 	movw	r1, #349	; 0x15d
 800b884:	f000 fdd6 	bl	800c434 <__assert_func>
 800b888:	f100 0514 	add.w	r5, r0, #20
 800b88c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b890:	462b      	mov	r3, r5
 800b892:	2200      	movs	r2, #0
 800b894:	4543      	cmp	r3, r8
 800b896:	d321      	bcc.n	800b8dc <__multiply+0x98>
 800b898:	f104 0314 	add.w	r3, r4, #20
 800b89c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b8a0:	f109 0314 	add.w	r3, r9, #20
 800b8a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b8a8:	9202      	str	r2, [sp, #8]
 800b8aa:	1b3a      	subs	r2, r7, r4
 800b8ac:	3a15      	subs	r2, #21
 800b8ae:	f022 0203 	bic.w	r2, r2, #3
 800b8b2:	3204      	adds	r2, #4
 800b8b4:	f104 0115 	add.w	r1, r4, #21
 800b8b8:	428f      	cmp	r7, r1
 800b8ba:	bf38      	it	cc
 800b8bc:	2204      	movcc	r2, #4
 800b8be:	9201      	str	r2, [sp, #4]
 800b8c0:	9a02      	ldr	r2, [sp, #8]
 800b8c2:	9303      	str	r3, [sp, #12]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d80c      	bhi.n	800b8e2 <__multiply+0x9e>
 800b8c8:	2e00      	cmp	r6, #0
 800b8ca:	dd03      	ble.n	800b8d4 <__multiply+0x90>
 800b8cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d05a      	beq.n	800b98a <__multiply+0x146>
 800b8d4:	6106      	str	r6, [r0, #16]
 800b8d6:	b005      	add	sp, #20
 800b8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8dc:	f843 2b04 	str.w	r2, [r3], #4
 800b8e0:	e7d8      	b.n	800b894 <__multiply+0x50>
 800b8e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8e6:	f1ba 0f00 	cmp.w	sl, #0
 800b8ea:	d024      	beq.n	800b936 <__multiply+0xf2>
 800b8ec:	f104 0e14 	add.w	lr, r4, #20
 800b8f0:	46a9      	mov	r9, r5
 800b8f2:	f04f 0c00 	mov.w	ip, #0
 800b8f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b8fa:	f8d9 1000 	ldr.w	r1, [r9]
 800b8fe:	fa1f fb82 	uxth.w	fp, r2
 800b902:	b289      	uxth	r1, r1
 800b904:	fb0a 110b 	mla	r1, sl, fp, r1
 800b908:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b90c:	f8d9 2000 	ldr.w	r2, [r9]
 800b910:	4461      	add	r1, ip
 800b912:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b916:	fb0a c20b 	mla	r2, sl, fp, ip
 800b91a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b91e:	b289      	uxth	r1, r1
 800b920:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b924:	4577      	cmp	r7, lr
 800b926:	f849 1b04 	str.w	r1, [r9], #4
 800b92a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b92e:	d8e2      	bhi.n	800b8f6 <__multiply+0xb2>
 800b930:	9a01      	ldr	r2, [sp, #4]
 800b932:	f845 c002 	str.w	ip, [r5, r2]
 800b936:	9a03      	ldr	r2, [sp, #12]
 800b938:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b93c:	3304      	adds	r3, #4
 800b93e:	f1b9 0f00 	cmp.w	r9, #0
 800b942:	d020      	beq.n	800b986 <__multiply+0x142>
 800b944:	6829      	ldr	r1, [r5, #0]
 800b946:	f104 0c14 	add.w	ip, r4, #20
 800b94a:	46ae      	mov	lr, r5
 800b94c:	f04f 0a00 	mov.w	sl, #0
 800b950:	f8bc b000 	ldrh.w	fp, [ip]
 800b954:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b958:	fb09 220b 	mla	r2, r9, fp, r2
 800b95c:	4492      	add	sl, r2
 800b95e:	b289      	uxth	r1, r1
 800b960:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b964:	f84e 1b04 	str.w	r1, [lr], #4
 800b968:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b96c:	f8be 1000 	ldrh.w	r1, [lr]
 800b970:	0c12      	lsrs	r2, r2, #16
 800b972:	fb09 1102 	mla	r1, r9, r2, r1
 800b976:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b97a:	4567      	cmp	r7, ip
 800b97c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b980:	d8e6      	bhi.n	800b950 <__multiply+0x10c>
 800b982:	9a01      	ldr	r2, [sp, #4]
 800b984:	50a9      	str	r1, [r5, r2]
 800b986:	3504      	adds	r5, #4
 800b988:	e79a      	b.n	800b8c0 <__multiply+0x7c>
 800b98a:	3e01      	subs	r6, #1
 800b98c:	e79c      	b.n	800b8c8 <__multiply+0x84>
 800b98e:	bf00      	nop
 800b990:	0800e738 	.word	0x0800e738
 800b994:	0800e7c4 	.word	0x0800e7c4

0800b998 <__pow5mult>:
 800b998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b99c:	4615      	mov	r5, r2
 800b99e:	f012 0203 	ands.w	r2, r2, #3
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	460f      	mov	r7, r1
 800b9a6:	d007      	beq.n	800b9b8 <__pow5mult+0x20>
 800b9a8:	4c25      	ldr	r4, [pc, #148]	; (800ba40 <__pow5mult+0xa8>)
 800b9aa:	3a01      	subs	r2, #1
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9b2:	f7ff fe51 	bl	800b658 <__multadd>
 800b9b6:	4607      	mov	r7, r0
 800b9b8:	10ad      	asrs	r5, r5, #2
 800b9ba:	d03d      	beq.n	800ba38 <__pow5mult+0xa0>
 800b9bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b9be:	b97c      	cbnz	r4, 800b9e0 <__pow5mult+0x48>
 800b9c0:	2010      	movs	r0, #16
 800b9c2:	f7ff fdbf 	bl	800b544 <malloc>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	6270      	str	r0, [r6, #36]	; 0x24
 800b9ca:	b928      	cbnz	r0, 800b9d8 <__pow5mult+0x40>
 800b9cc:	4b1d      	ldr	r3, [pc, #116]	; (800ba44 <__pow5mult+0xac>)
 800b9ce:	481e      	ldr	r0, [pc, #120]	; (800ba48 <__pow5mult+0xb0>)
 800b9d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b9d4:	f000 fd2e 	bl	800c434 <__assert_func>
 800b9d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9dc:	6004      	str	r4, [r0, #0]
 800b9de:	60c4      	str	r4, [r0, #12]
 800b9e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b9e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9e8:	b94c      	cbnz	r4, 800b9fe <__pow5mult+0x66>
 800b9ea:	f240 2171 	movw	r1, #625	; 0x271
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	f7ff ff12 	bl	800b818 <__i2b>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	6003      	str	r3, [r0, #0]
 800b9fe:	f04f 0900 	mov.w	r9, #0
 800ba02:	07eb      	lsls	r3, r5, #31
 800ba04:	d50a      	bpl.n	800ba1c <__pow5mult+0x84>
 800ba06:	4639      	mov	r1, r7
 800ba08:	4622      	mov	r2, r4
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	f7ff ff1a 	bl	800b844 <__multiply>
 800ba10:	4639      	mov	r1, r7
 800ba12:	4680      	mov	r8, r0
 800ba14:	4630      	mov	r0, r6
 800ba16:	f7ff fdfd 	bl	800b614 <_Bfree>
 800ba1a:	4647      	mov	r7, r8
 800ba1c:	106d      	asrs	r5, r5, #1
 800ba1e:	d00b      	beq.n	800ba38 <__pow5mult+0xa0>
 800ba20:	6820      	ldr	r0, [r4, #0]
 800ba22:	b938      	cbnz	r0, 800ba34 <__pow5mult+0x9c>
 800ba24:	4622      	mov	r2, r4
 800ba26:	4621      	mov	r1, r4
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f7ff ff0b 	bl	800b844 <__multiply>
 800ba2e:	6020      	str	r0, [r4, #0]
 800ba30:	f8c0 9000 	str.w	r9, [r0]
 800ba34:	4604      	mov	r4, r0
 800ba36:	e7e4      	b.n	800ba02 <__pow5mult+0x6a>
 800ba38:	4638      	mov	r0, r7
 800ba3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba3e:	bf00      	nop
 800ba40:	0800e910 	.word	0x0800e910
 800ba44:	0800e6c6 	.word	0x0800e6c6
 800ba48:	0800e7c4 	.word	0x0800e7c4

0800ba4c <__lshift>:
 800ba4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba50:	460c      	mov	r4, r1
 800ba52:	6849      	ldr	r1, [r1, #4]
 800ba54:	6923      	ldr	r3, [r4, #16]
 800ba56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba5a:	68a3      	ldr	r3, [r4, #8]
 800ba5c:	4607      	mov	r7, r0
 800ba5e:	4691      	mov	r9, r2
 800ba60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba64:	f108 0601 	add.w	r6, r8, #1
 800ba68:	42b3      	cmp	r3, r6
 800ba6a:	db0b      	blt.n	800ba84 <__lshift+0x38>
 800ba6c:	4638      	mov	r0, r7
 800ba6e:	f7ff fd91 	bl	800b594 <_Balloc>
 800ba72:	4605      	mov	r5, r0
 800ba74:	b948      	cbnz	r0, 800ba8a <__lshift+0x3e>
 800ba76:	4602      	mov	r2, r0
 800ba78:	4b2a      	ldr	r3, [pc, #168]	; (800bb24 <__lshift+0xd8>)
 800ba7a:	482b      	ldr	r0, [pc, #172]	; (800bb28 <__lshift+0xdc>)
 800ba7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba80:	f000 fcd8 	bl	800c434 <__assert_func>
 800ba84:	3101      	adds	r1, #1
 800ba86:	005b      	lsls	r3, r3, #1
 800ba88:	e7ee      	b.n	800ba68 <__lshift+0x1c>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f100 0114 	add.w	r1, r0, #20
 800ba90:	f100 0210 	add.w	r2, r0, #16
 800ba94:	4618      	mov	r0, r3
 800ba96:	4553      	cmp	r3, sl
 800ba98:	db37      	blt.n	800bb0a <__lshift+0xbe>
 800ba9a:	6920      	ldr	r0, [r4, #16]
 800ba9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800baa0:	f104 0314 	add.w	r3, r4, #20
 800baa4:	f019 091f 	ands.w	r9, r9, #31
 800baa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800baac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bab0:	d02f      	beq.n	800bb12 <__lshift+0xc6>
 800bab2:	f1c9 0e20 	rsb	lr, r9, #32
 800bab6:	468a      	mov	sl, r1
 800bab8:	f04f 0c00 	mov.w	ip, #0
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	fa02 f209 	lsl.w	r2, r2, r9
 800bac2:	ea42 020c 	orr.w	r2, r2, ip
 800bac6:	f84a 2b04 	str.w	r2, [sl], #4
 800baca:	f853 2b04 	ldr.w	r2, [r3], #4
 800bace:	4298      	cmp	r0, r3
 800bad0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bad4:	d8f2      	bhi.n	800babc <__lshift+0x70>
 800bad6:	1b03      	subs	r3, r0, r4
 800bad8:	3b15      	subs	r3, #21
 800bada:	f023 0303 	bic.w	r3, r3, #3
 800bade:	3304      	adds	r3, #4
 800bae0:	f104 0215 	add.w	r2, r4, #21
 800bae4:	4290      	cmp	r0, r2
 800bae6:	bf38      	it	cc
 800bae8:	2304      	movcc	r3, #4
 800baea:	f841 c003 	str.w	ip, [r1, r3]
 800baee:	f1bc 0f00 	cmp.w	ip, #0
 800baf2:	d001      	beq.n	800baf8 <__lshift+0xac>
 800baf4:	f108 0602 	add.w	r6, r8, #2
 800baf8:	3e01      	subs	r6, #1
 800bafa:	4638      	mov	r0, r7
 800bafc:	612e      	str	r6, [r5, #16]
 800bafe:	4621      	mov	r1, r4
 800bb00:	f7ff fd88 	bl	800b614 <_Bfree>
 800bb04:	4628      	mov	r0, r5
 800bb06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb0e:	3301      	adds	r3, #1
 800bb10:	e7c1      	b.n	800ba96 <__lshift+0x4a>
 800bb12:	3904      	subs	r1, #4
 800bb14:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb18:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb1c:	4298      	cmp	r0, r3
 800bb1e:	d8f9      	bhi.n	800bb14 <__lshift+0xc8>
 800bb20:	e7ea      	b.n	800baf8 <__lshift+0xac>
 800bb22:	bf00      	nop
 800bb24:	0800e738 	.word	0x0800e738
 800bb28:	0800e7c4 	.word	0x0800e7c4

0800bb2c <__mcmp>:
 800bb2c:	b530      	push	{r4, r5, lr}
 800bb2e:	6902      	ldr	r2, [r0, #16]
 800bb30:	690c      	ldr	r4, [r1, #16]
 800bb32:	1b12      	subs	r2, r2, r4
 800bb34:	d10e      	bne.n	800bb54 <__mcmp+0x28>
 800bb36:	f100 0314 	add.w	r3, r0, #20
 800bb3a:	3114      	adds	r1, #20
 800bb3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb4c:	42a5      	cmp	r5, r4
 800bb4e:	d003      	beq.n	800bb58 <__mcmp+0x2c>
 800bb50:	d305      	bcc.n	800bb5e <__mcmp+0x32>
 800bb52:	2201      	movs	r2, #1
 800bb54:	4610      	mov	r0, r2
 800bb56:	bd30      	pop	{r4, r5, pc}
 800bb58:	4283      	cmp	r3, r0
 800bb5a:	d3f3      	bcc.n	800bb44 <__mcmp+0x18>
 800bb5c:	e7fa      	b.n	800bb54 <__mcmp+0x28>
 800bb5e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb62:	e7f7      	b.n	800bb54 <__mcmp+0x28>

0800bb64 <__mdiff>:
 800bb64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb68:	460c      	mov	r4, r1
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	4620      	mov	r0, r4
 800bb70:	4690      	mov	r8, r2
 800bb72:	f7ff ffdb 	bl	800bb2c <__mcmp>
 800bb76:	1e05      	subs	r5, r0, #0
 800bb78:	d110      	bne.n	800bb9c <__mdiff+0x38>
 800bb7a:	4629      	mov	r1, r5
 800bb7c:	4630      	mov	r0, r6
 800bb7e:	f7ff fd09 	bl	800b594 <_Balloc>
 800bb82:	b930      	cbnz	r0, 800bb92 <__mdiff+0x2e>
 800bb84:	4b3a      	ldr	r3, [pc, #232]	; (800bc70 <__mdiff+0x10c>)
 800bb86:	4602      	mov	r2, r0
 800bb88:	f240 2132 	movw	r1, #562	; 0x232
 800bb8c:	4839      	ldr	r0, [pc, #228]	; (800bc74 <__mdiff+0x110>)
 800bb8e:	f000 fc51 	bl	800c434 <__assert_func>
 800bb92:	2301      	movs	r3, #1
 800bb94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb9c:	bfa4      	itt	ge
 800bb9e:	4643      	movge	r3, r8
 800bba0:	46a0      	movge	r8, r4
 800bba2:	4630      	mov	r0, r6
 800bba4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bba8:	bfa6      	itte	ge
 800bbaa:	461c      	movge	r4, r3
 800bbac:	2500      	movge	r5, #0
 800bbae:	2501      	movlt	r5, #1
 800bbb0:	f7ff fcf0 	bl	800b594 <_Balloc>
 800bbb4:	b920      	cbnz	r0, 800bbc0 <__mdiff+0x5c>
 800bbb6:	4b2e      	ldr	r3, [pc, #184]	; (800bc70 <__mdiff+0x10c>)
 800bbb8:	4602      	mov	r2, r0
 800bbba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bbbe:	e7e5      	b.n	800bb8c <__mdiff+0x28>
 800bbc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bbc4:	6926      	ldr	r6, [r4, #16]
 800bbc6:	60c5      	str	r5, [r0, #12]
 800bbc8:	f104 0914 	add.w	r9, r4, #20
 800bbcc:	f108 0514 	add.w	r5, r8, #20
 800bbd0:	f100 0e14 	add.w	lr, r0, #20
 800bbd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bbd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bbdc:	f108 0210 	add.w	r2, r8, #16
 800bbe0:	46f2      	mov	sl, lr
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bbe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bbec:	fa1f f883 	uxth.w	r8, r3
 800bbf0:	fa11 f18b 	uxtah	r1, r1, fp
 800bbf4:	0c1b      	lsrs	r3, r3, #16
 800bbf6:	eba1 0808 	sub.w	r8, r1, r8
 800bbfa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bbfe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc02:	fa1f f888 	uxth.w	r8, r8
 800bc06:	1419      	asrs	r1, r3, #16
 800bc08:	454e      	cmp	r6, r9
 800bc0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc0e:	f84a 3b04 	str.w	r3, [sl], #4
 800bc12:	d8e7      	bhi.n	800bbe4 <__mdiff+0x80>
 800bc14:	1b33      	subs	r3, r6, r4
 800bc16:	3b15      	subs	r3, #21
 800bc18:	f023 0303 	bic.w	r3, r3, #3
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	3415      	adds	r4, #21
 800bc20:	42a6      	cmp	r6, r4
 800bc22:	bf38      	it	cc
 800bc24:	2304      	movcc	r3, #4
 800bc26:	441d      	add	r5, r3
 800bc28:	4473      	add	r3, lr
 800bc2a:	469e      	mov	lr, r3
 800bc2c:	462e      	mov	r6, r5
 800bc2e:	4566      	cmp	r6, ip
 800bc30:	d30e      	bcc.n	800bc50 <__mdiff+0xec>
 800bc32:	f10c 0203 	add.w	r2, ip, #3
 800bc36:	1b52      	subs	r2, r2, r5
 800bc38:	f022 0203 	bic.w	r2, r2, #3
 800bc3c:	3d03      	subs	r5, #3
 800bc3e:	45ac      	cmp	ip, r5
 800bc40:	bf38      	it	cc
 800bc42:	2200      	movcc	r2, #0
 800bc44:	441a      	add	r2, r3
 800bc46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bc4a:	b17b      	cbz	r3, 800bc6c <__mdiff+0x108>
 800bc4c:	6107      	str	r7, [r0, #16]
 800bc4e:	e7a3      	b.n	800bb98 <__mdiff+0x34>
 800bc50:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc54:	fa11 f288 	uxtah	r2, r1, r8
 800bc58:	1414      	asrs	r4, r2, #16
 800bc5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc5e:	b292      	uxth	r2, r2
 800bc60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc64:	f84e 2b04 	str.w	r2, [lr], #4
 800bc68:	1421      	asrs	r1, r4, #16
 800bc6a:	e7e0      	b.n	800bc2e <__mdiff+0xca>
 800bc6c:	3f01      	subs	r7, #1
 800bc6e:	e7ea      	b.n	800bc46 <__mdiff+0xe2>
 800bc70:	0800e738 	.word	0x0800e738
 800bc74:	0800e7c4 	.word	0x0800e7c4

0800bc78 <__ulp>:
 800bc78:	b082      	sub	sp, #8
 800bc7a:	ed8d 0b00 	vstr	d0, [sp]
 800bc7e:	9b01      	ldr	r3, [sp, #4]
 800bc80:	4912      	ldr	r1, [pc, #72]	; (800bccc <__ulp+0x54>)
 800bc82:	4019      	ands	r1, r3
 800bc84:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bc88:	2900      	cmp	r1, #0
 800bc8a:	dd05      	ble.n	800bc98 <__ulp+0x20>
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	ec43 2b10 	vmov	d0, r2, r3
 800bc94:	b002      	add	sp, #8
 800bc96:	4770      	bx	lr
 800bc98:	4249      	negs	r1, r1
 800bc9a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bc9e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bca2:	f04f 0200 	mov.w	r2, #0
 800bca6:	f04f 0300 	mov.w	r3, #0
 800bcaa:	da04      	bge.n	800bcb6 <__ulp+0x3e>
 800bcac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bcb0:	fa41 f300 	asr.w	r3, r1, r0
 800bcb4:	e7ec      	b.n	800bc90 <__ulp+0x18>
 800bcb6:	f1a0 0114 	sub.w	r1, r0, #20
 800bcba:	291e      	cmp	r1, #30
 800bcbc:	bfda      	itte	le
 800bcbe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bcc2:	fa20 f101 	lsrle.w	r1, r0, r1
 800bcc6:	2101      	movgt	r1, #1
 800bcc8:	460a      	mov	r2, r1
 800bcca:	e7e1      	b.n	800bc90 <__ulp+0x18>
 800bccc:	7ff00000 	.word	0x7ff00000

0800bcd0 <__b2d>:
 800bcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd2:	6905      	ldr	r5, [r0, #16]
 800bcd4:	f100 0714 	add.w	r7, r0, #20
 800bcd8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bcdc:	1f2e      	subs	r6, r5, #4
 800bcde:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bce2:	4620      	mov	r0, r4
 800bce4:	f7ff fd48 	bl	800b778 <__hi0bits>
 800bce8:	f1c0 0320 	rsb	r3, r0, #32
 800bcec:	280a      	cmp	r0, #10
 800bcee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bd6c <__b2d+0x9c>
 800bcf2:	600b      	str	r3, [r1, #0]
 800bcf4:	dc14      	bgt.n	800bd20 <__b2d+0x50>
 800bcf6:	f1c0 0e0b 	rsb	lr, r0, #11
 800bcfa:	fa24 f10e 	lsr.w	r1, r4, lr
 800bcfe:	42b7      	cmp	r7, r6
 800bd00:	ea41 030c 	orr.w	r3, r1, ip
 800bd04:	bf34      	ite	cc
 800bd06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bd0a:	2100      	movcs	r1, #0
 800bd0c:	3015      	adds	r0, #21
 800bd0e:	fa04 f000 	lsl.w	r0, r4, r0
 800bd12:	fa21 f10e 	lsr.w	r1, r1, lr
 800bd16:	ea40 0201 	orr.w	r2, r0, r1
 800bd1a:	ec43 2b10 	vmov	d0, r2, r3
 800bd1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd20:	42b7      	cmp	r7, r6
 800bd22:	bf3a      	itte	cc
 800bd24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bd28:	f1a5 0608 	subcc.w	r6, r5, #8
 800bd2c:	2100      	movcs	r1, #0
 800bd2e:	380b      	subs	r0, #11
 800bd30:	d017      	beq.n	800bd62 <__b2d+0x92>
 800bd32:	f1c0 0c20 	rsb	ip, r0, #32
 800bd36:	fa04 f500 	lsl.w	r5, r4, r0
 800bd3a:	42be      	cmp	r6, r7
 800bd3c:	fa21 f40c 	lsr.w	r4, r1, ip
 800bd40:	ea45 0504 	orr.w	r5, r5, r4
 800bd44:	bf8c      	ite	hi
 800bd46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bd4a:	2400      	movls	r4, #0
 800bd4c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bd50:	fa01 f000 	lsl.w	r0, r1, r0
 800bd54:	fa24 f40c 	lsr.w	r4, r4, ip
 800bd58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd5c:	ea40 0204 	orr.w	r2, r0, r4
 800bd60:	e7db      	b.n	800bd1a <__b2d+0x4a>
 800bd62:	ea44 030c 	orr.w	r3, r4, ip
 800bd66:	460a      	mov	r2, r1
 800bd68:	e7d7      	b.n	800bd1a <__b2d+0x4a>
 800bd6a:	bf00      	nop
 800bd6c:	3ff00000 	.word	0x3ff00000

0800bd70 <__d2b>:
 800bd70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd74:	4689      	mov	r9, r1
 800bd76:	2101      	movs	r1, #1
 800bd78:	ec57 6b10 	vmov	r6, r7, d0
 800bd7c:	4690      	mov	r8, r2
 800bd7e:	f7ff fc09 	bl	800b594 <_Balloc>
 800bd82:	4604      	mov	r4, r0
 800bd84:	b930      	cbnz	r0, 800bd94 <__d2b+0x24>
 800bd86:	4602      	mov	r2, r0
 800bd88:	4b25      	ldr	r3, [pc, #148]	; (800be20 <__d2b+0xb0>)
 800bd8a:	4826      	ldr	r0, [pc, #152]	; (800be24 <__d2b+0xb4>)
 800bd8c:	f240 310a 	movw	r1, #778	; 0x30a
 800bd90:	f000 fb50 	bl	800c434 <__assert_func>
 800bd94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bd98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd9c:	bb35      	cbnz	r5, 800bdec <__d2b+0x7c>
 800bd9e:	2e00      	cmp	r6, #0
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	d028      	beq.n	800bdf6 <__d2b+0x86>
 800bda4:	4668      	mov	r0, sp
 800bda6:	9600      	str	r6, [sp, #0]
 800bda8:	f7ff fd06 	bl	800b7b8 <__lo0bits>
 800bdac:	9900      	ldr	r1, [sp, #0]
 800bdae:	b300      	cbz	r0, 800bdf2 <__d2b+0x82>
 800bdb0:	9a01      	ldr	r2, [sp, #4]
 800bdb2:	f1c0 0320 	rsb	r3, r0, #32
 800bdb6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdba:	430b      	orrs	r3, r1
 800bdbc:	40c2      	lsrs	r2, r0
 800bdbe:	6163      	str	r3, [r4, #20]
 800bdc0:	9201      	str	r2, [sp, #4]
 800bdc2:	9b01      	ldr	r3, [sp, #4]
 800bdc4:	61a3      	str	r3, [r4, #24]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	bf14      	ite	ne
 800bdca:	2202      	movne	r2, #2
 800bdcc:	2201      	moveq	r2, #1
 800bdce:	6122      	str	r2, [r4, #16]
 800bdd0:	b1d5      	cbz	r5, 800be08 <__d2b+0x98>
 800bdd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bdd6:	4405      	add	r5, r0
 800bdd8:	f8c9 5000 	str.w	r5, [r9]
 800bddc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bde0:	f8c8 0000 	str.w	r0, [r8]
 800bde4:	4620      	mov	r0, r4
 800bde6:	b003      	add	sp, #12
 800bde8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdf0:	e7d5      	b.n	800bd9e <__d2b+0x2e>
 800bdf2:	6161      	str	r1, [r4, #20]
 800bdf4:	e7e5      	b.n	800bdc2 <__d2b+0x52>
 800bdf6:	a801      	add	r0, sp, #4
 800bdf8:	f7ff fcde 	bl	800b7b8 <__lo0bits>
 800bdfc:	9b01      	ldr	r3, [sp, #4]
 800bdfe:	6163      	str	r3, [r4, #20]
 800be00:	2201      	movs	r2, #1
 800be02:	6122      	str	r2, [r4, #16]
 800be04:	3020      	adds	r0, #32
 800be06:	e7e3      	b.n	800bdd0 <__d2b+0x60>
 800be08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be10:	f8c9 0000 	str.w	r0, [r9]
 800be14:	6918      	ldr	r0, [r3, #16]
 800be16:	f7ff fcaf 	bl	800b778 <__hi0bits>
 800be1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be1e:	e7df      	b.n	800bde0 <__d2b+0x70>
 800be20:	0800e738 	.word	0x0800e738
 800be24:	0800e7c4 	.word	0x0800e7c4

0800be28 <__ratio>:
 800be28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be2c:	4688      	mov	r8, r1
 800be2e:	4669      	mov	r1, sp
 800be30:	4681      	mov	r9, r0
 800be32:	f7ff ff4d 	bl	800bcd0 <__b2d>
 800be36:	a901      	add	r1, sp, #4
 800be38:	4640      	mov	r0, r8
 800be3a:	ec55 4b10 	vmov	r4, r5, d0
 800be3e:	f7ff ff47 	bl	800bcd0 <__b2d>
 800be42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be46:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800be4a:	eba3 0c02 	sub.w	ip, r3, r2
 800be4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be52:	1a9b      	subs	r3, r3, r2
 800be54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800be58:	ec51 0b10 	vmov	r0, r1, d0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	bfd6      	itet	le
 800be60:	460a      	movle	r2, r1
 800be62:	462a      	movgt	r2, r5
 800be64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be68:	468b      	mov	fp, r1
 800be6a:	462f      	mov	r7, r5
 800be6c:	bfd4      	ite	le
 800be6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800be72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be76:	4620      	mov	r0, r4
 800be78:	ee10 2a10 	vmov	r2, s0
 800be7c:	465b      	mov	r3, fp
 800be7e:	4639      	mov	r1, r7
 800be80:	f7f4 fd0c 	bl	800089c <__aeabi_ddiv>
 800be84:	ec41 0b10 	vmov	d0, r0, r1
 800be88:	b003      	add	sp, #12
 800be8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be8e <__copybits>:
 800be8e:	3901      	subs	r1, #1
 800be90:	b570      	push	{r4, r5, r6, lr}
 800be92:	1149      	asrs	r1, r1, #5
 800be94:	6914      	ldr	r4, [r2, #16]
 800be96:	3101      	adds	r1, #1
 800be98:	f102 0314 	add.w	r3, r2, #20
 800be9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bea0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bea4:	1f05      	subs	r5, r0, #4
 800bea6:	42a3      	cmp	r3, r4
 800bea8:	d30c      	bcc.n	800bec4 <__copybits+0x36>
 800beaa:	1aa3      	subs	r3, r4, r2
 800beac:	3b11      	subs	r3, #17
 800beae:	f023 0303 	bic.w	r3, r3, #3
 800beb2:	3211      	adds	r2, #17
 800beb4:	42a2      	cmp	r2, r4
 800beb6:	bf88      	it	hi
 800beb8:	2300      	movhi	r3, #0
 800beba:	4418      	add	r0, r3
 800bebc:	2300      	movs	r3, #0
 800bebe:	4288      	cmp	r0, r1
 800bec0:	d305      	bcc.n	800bece <__copybits+0x40>
 800bec2:	bd70      	pop	{r4, r5, r6, pc}
 800bec4:	f853 6b04 	ldr.w	r6, [r3], #4
 800bec8:	f845 6f04 	str.w	r6, [r5, #4]!
 800becc:	e7eb      	b.n	800bea6 <__copybits+0x18>
 800bece:	f840 3b04 	str.w	r3, [r0], #4
 800bed2:	e7f4      	b.n	800bebe <__copybits+0x30>

0800bed4 <__any_on>:
 800bed4:	f100 0214 	add.w	r2, r0, #20
 800bed8:	6900      	ldr	r0, [r0, #16]
 800beda:	114b      	asrs	r3, r1, #5
 800bedc:	4298      	cmp	r0, r3
 800bede:	b510      	push	{r4, lr}
 800bee0:	db11      	blt.n	800bf06 <__any_on+0x32>
 800bee2:	dd0a      	ble.n	800befa <__any_on+0x26>
 800bee4:	f011 011f 	ands.w	r1, r1, #31
 800bee8:	d007      	beq.n	800befa <__any_on+0x26>
 800beea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800beee:	fa24 f001 	lsr.w	r0, r4, r1
 800bef2:	fa00 f101 	lsl.w	r1, r0, r1
 800bef6:	428c      	cmp	r4, r1
 800bef8:	d10b      	bne.n	800bf12 <__any_on+0x3e>
 800befa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800befe:	4293      	cmp	r3, r2
 800bf00:	d803      	bhi.n	800bf0a <__any_on+0x36>
 800bf02:	2000      	movs	r0, #0
 800bf04:	bd10      	pop	{r4, pc}
 800bf06:	4603      	mov	r3, r0
 800bf08:	e7f7      	b.n	800befa <__any_on+0x26>
 800bf0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf0e:	2900      	cmp	r1, #0
 800bf10:	d0f5      	beq.n	800befe <__any_on+0x2a>
 800bf12:	2001      	movs	r0, #1
 800bf14:	e7f6      	b.n	800bf04 <__any_on+0x30>

0800bf16 <_calloc_r>:
 800bf16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf18:	fba1 2402 	umull	r2, r4, r1, r2
 800bf1c:	b94c      	cbnz	r4, 800bf32 <_calloc_r+0x1c>
 800bf1e:	4611      	mov	r1, r2
 800bf20:	9201      	str	r2, [sp, #4]
 800bf22:	f000 f87b 	bl	800c01c <_malloc_r>
 800bf26:	9a01      	ldr	r2, [sp, #4]
 800bf28:	4605      	mov	r5, r0
 800bf2a:	b930      	cbnz	r0, 800bf3a <_calloc_r+0x24>
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	b003      	add	sp, #12
 800bf30:	bd30      	pop	{r4, r5, pc}
 800bf32:	220c      	movs	r2, #12
 800bf34:	6002      	str	r2, [r0, #0]
 800bf36:	2500      	movs	r5, #0
 800bf38:	e7f8      	b.n	800bf2c <_calloc_r+0x16>
 800bf3a:	4621      	mov	r1, r4
 800bf3c:	f7fc fbbe 	bl	80086bc <memset>
 800bf40:	e7f4      	b.n	800bf2c <_calloc_r+0x16>
	...

0800bf44 <_free_r>:
 800bf44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf46:	2900      	cmp	r1, #0
 800bf48:	d044      	beq.n	800bfd4 <_free_r+0x90>
 800bf4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf4e:	9001      	str	r0, [sp, #4]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f1a1 0404 	sub.w	r4, r1, #4
 800bf56:	bfb8      	it	lt
 800bf58:	18e4      	addlt	r4, r4, r3
 800bf5a:	f000 fab5 	bl	800c4c8 <__malloc_lock>
 800bf5e:	4a1e      	ldr	r2, [pc, #120]	; (800bfd8 <_free_r+0x94>)
 800bf60:	9801      	ldr	r0, [sp, #4]
 800bf62:	6813      	ldr	r3, [r2, #0]
 800bf64:	b933      	cbnz	r3, 800bf74 <_free_r+0x30>
 800bf66:	6063      	str	r3, [r4, #4]
 800bf68:	6014      	str	r4, [r2, #0]
 800bf6a:	b003      	add	sp, #12
 800bf6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf70:	f000 bab0 	b.w	800c4d4 <__malloc_unlock>
 800bf74:	42a3      	cmp	r3, r4
 800bf76:	d908      	bls.n	800bf8a <_free_r+0x46>
 800bf78:	6825      	ldr	r5, [r4, #0]
 800bf7a:	1961      	adds	r1, r4, r5
 800bf7c:	428b      	cmp	r3, r1
 800bf7e:	bf01      	itttt	eq
 800bf80:	6819      	ldreq	r1, [r3, #0]
 800bf82:	685b      	ldreq	r3, [r3, #4]
 800bf84:	1949      	addeq	r1, r1, r5
 800bf86:	6021      	streq	r1, [r4, #0]
 800bf88:	e7ed      	b.n	800bf66 <_free_r+0x22>
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	b10b      	cbz	r3, 800bf94 <_free_r+0x50>
 800bf90:	42a3      	cmp	r3, r4
 800bf92:	d9fa      	bls.n	800bf8a <_free_r+0x46>
 800bf94:	6811      	ldr	r1, [r2, #0]
 800bf96:	1855      	adds	r5, r2, r1
 800bf98:	42a5      	cmp	r5, r4
 800bf9a:	d10b      	bne.n	800bfb4 <_free_r+0x70>
 800bf9c:	6824      	ldr	r4, [r4, #0]
 800bf9e:	4421      	add	r1, r4
 800bfa0:	1854      	adds	r4, r2, r1
 800bfa2:	42a3      	cmp	r3, r4
 800bfa4:	6011      	str	r1, [r2, #0]
 800bfa6:	d1e0      	bne.n	800bf6a <_free_r+0x26>
 800bfa8:	681c      	ldr	r4, [r3, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	6053      	str	r3, [r2, #4]
 800bfae:	4421      	add	r1, r4
 800bfb0:	6011      	str	r1, [r2, #0]
 800bfb2:	e7da      	b.n	800bf6a <_free_r+0x26>
 800bfb4:	d902      	bls.n	800bfbc <_free_r+0x78>
 800bfb6:	230c      	movs	r3, #12
 800bfb8:	6003      	str	r3, [r0, #0]
 800bfba:	e7d6      	b.n	800bf6a <_free_r+0x26>
 800bfbc:	6825      	ldr	r5, [r4, #0]
 800bfbe:	1961      	adds	r1, r4, r5
 800bfc0:	428b      	cmp	r3, r1
 800bfc2:	bf04      	itt	eq
 800bfc4:	6819      	ldreq	r1, [r3, #0]
 800bfc6:	685b      	ldreq	r3, [r3, #4]
 800bfc8:	6063      	str	r3, [r4, #4]
 800bfca:	bf04      	itt	eq
 800bfcc:	1949      	addeq	r1, r1, r5
 800bfce:	6021      	streq	r1, [r4, #0]
 800bfd0:	6054      	str	r4, [r2, #4]
 800bfd2:	e7ca      	b.n	800bf6a <_free_r+0x26>
 800bfd4:	b003      	add	sp, #12
 800bfd6:	bd30      	pop	{r4, r5, pc}
 800bfd8:	20000994 	.word	0x20000994

0800bfdc <sbrk_aligned>:
 800bfdc:	b570      	push	{r4, r5, r6, lr}
 800bfde:	4e0e      	ldr	r6, [pc, #56]	; (800c018 <sbrk_aligned+0x3c>)
 800bfe0:	460c      	mov	r4, r1
 800bfe2:	6831      	ldr	r1, [r6, #0]
 800bfe4:	4605      	mov	r5, r0
 800bfe6:	b911      	cbnz	r1, 800bfee <sbrk_aligned+0x12>
 800bfe8:	f000 f9f2 	bl	800c3d0 <_sbrk_r>
 800bfec:	6030      	str	r0, [r6, #0]
 800bfee:	4621      	mov	r1, r4
 800bff0:	4628      	mov	r0, r5
 800bff2:	f000 f9ed 	bl	800c3d0 <_sbrk_r>
 800bff6:	1c43      	adds	r3, r0, #1
 800bff8:	d00a      	beq.n	800c010 <sbrk_aligned+0x34>
 800bffa:	1cc4      	adds	r4, r0, #3
 800bffc:	f024 0403 	bic.w	r4, r4, #3
 800c000:	42a0      	cmp	r0, r4
 800c002:	d007      	beq.n	800c014 <sbrk_aligned+0x38>
 800c004:	1a21      	subs	r1, r4, r0
 800c006:	4628      	mov	r0, r5
 800c008:	f000 f9e2 	bl	800c3d0 <_sbrk_r>
 800c00c:	3001      	adds	r0, #1
 800c00e:	d101      	bne.n	800c014 <sbrk_aligned+0x38>
 800c010:	f04f 34ff 	mov.w	r4, #4294967295
 800c014:	4620      	mov	r0, r4
 800c016:	bd70      	pop	{r4, r5, r6, pc}
 800c018:	20000998 	.word	0x20000998

0800c01c <_malloc_r>:
 800c01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c020:	1ccd      	adds	r5, r1, #3
 800c022:	f025 0503 	bic.w	r5, r5, #3
 800c026:	3508      	adds	r5, #8
 800c028:	2d0c      	cmp	r5, #12
 800c02a:	bf38      	it	cc
 800c02c:	250c      	movcc	r5, #12
 800c02e:	2d00      	cmp	r5, #0
 800c030:	4607      	mov	r7, r0
 800c032:	db01      	blt.n	800c038 <_malloc_r+0x1c>
 800c034:	42a9      	cmp	r1, r5
 800c036:	d905      	bls.n	800c044 <_malloc_r+0x28>
 800c038:	230c      	movs	r3, #12
 800c03a:	603b      	str	r3, [r7, #0]
 800c03c:	2600      	movs	r6, #0
 800c03e:	4630      	mov	r0, r6
 800c040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c044:	4e2e      	ldr	r6, [pc, #184]	; (800c100 <_malloc_r+0xe4>)
 800c046:	f000 fa3f 	bl	800c4c8 <__malloc_lock>
 800c04a:	6833      	ldr	r3, [r6, #0]
 800c04c:	461c      	mov	r4, r3
 800c04e:	bb34      	cbnz	r4, 800c09e <_malloc_r+0x82>
 800c050:	4629      	mov	r1, r5
 800c052:	4638      	mov	r0, r7
 800c054:	f7ff ffc2 	bl	800bfdc <sbrk_aligned>
 800c058:	1c43      	adds	r3, r0, #1
 800c05a:	4604      	mov	r4, r0
 800c05c:	d14d      	bne.n	800c0fa <_malloc_r+0xde>
 800c05e:	6834      	ldr	r4, [r6, #0]
 800c060:	4626      	mov	r6, r4
 800c062:	2e00      	cmp	r6, #0
 800c064:	d140      	bne.n	800c0e8 <_malloc_r+0xcc>
 800c066:	6823      	ldr	r3, [r4, #0]
 800c068:	4631      	mov	r1, r6
 800c06a:	4638      	mov	r0, r7
 800c06c:	eb04 0803 	add.w	r8, r4, r3
 800c070:	f000 f9ae 	bl	800c3d0 <_sbrk_r>
 800c074:	4580      	cmp	r8, r0
 800c076:	d13a      	bne.n	800c0ee <_malloc_r+0xd2>
 800c078:	6821      	ldr	r1, [r4, #0]
 800c07a:	3503      	adds	r5, #3
 800c07c:	1a6d      	subs	r5, r5, r1
 800c07e:	f025 0503 	bic.w	r5, r5, #3
 800c082:	3508      	adds	r5, #8
 800c084:	2d0c      	cmp	r5, #12
 800c086:	bf38      	it	cc
 800c088:	250c      	movcc	r5, #12
 800c08a:	4629      	mov	r1, r5
 800c08c:	4638      	mov	r0, r7
 800c08e:	f7ff ffa5 	bl	800bfdc <sbrk_aligned>
 800c092:	3001      	adds	r0, #1
 800c094:	d02b      	beq.n	800c0ee <_malloc_r+0xd2>
 800c096:	6823      	ldr	r3, [r4, #0]
 800c098:	442b      	add	r3, r5
 800c09a:	6023      	str	r3, [r4, #0]
 800c09c:	e00e      	b.n	800c0bc <_malloc_r+0xa0>
 800c09e:	6822      	ldr	r2, [r4, #0]
 800c0a0:	1b52      	subs	r2, r2, r5
 800c0a2:	d41e      	bmi.n	800c0e2 <_malloc_r+0xc6>
 800c0a4:	2a0b      	cmp	r2, #11
 800c0a6:	d916      	bls.n	800c0d6 <_malloc_r+0xba>
 800c0a8:	1961      	adds	r1, r4, r5
 800c0aa:	42a3      	cmp	r3, r4
 800c0ac:	6025      	str	r5, [r4, #0]
 800c0ae:	bf18      	it	ne
 800c0b0:	6059      	strne	r1, [r3, #4]
 800c0b2:	6863      	ldr	r3, [r4, #4]
 800c0b4:	bf08      	it	eq
 800c0b6:	6031      	streq	r1, [r6, #0]
 800c0b8:	5162      	str	r2, [r4, r5]
 800c0ba:	604b      	str	r3, [r1, #4]
 800c0bc:	4638      	mov	r0, r7
 800c0be:	f104 060b 	add.w	r6, r4, #11
 800c0c2:	f000 fa07 	bl	800c4d4 <__malloc_unlock>
 800c0c6:	f026 0607 	bic.w	r6, r6, #7
 800c0ca:	1d23      	adds	r3, r4, #4
 800c0cc:	1af2      	subs	r2, r6, r3
 800c0ce:	d0b6      	beq.n	800c03e <_malloc_r+0x22>
 800c0d0:	1b9b      	subs	r3, r3, r6
 800c0d2:	50a3      	str	r3, [r4, r2]
 800c0d4:	e7b3      	b.n	800c03e <_malloc_r+0x22>
 800c0d6:	6862      	ldr	r2, [r4, #4]
 800c0d8:	42a3      	cmp	r3, r4
 800c0da:	bf0c      	ite	eq
 800c0dc:	6032      	streq	r2, [r6, #0]
 800c0de:	605a      	strne	r2, [r3, #4]
 800c0e0:	e7ec      	b.n	800c0bc <_malloc_r+0xa0>
 800c0e2:	4623      	mov	r3, r4
 800c0e4:	6864      	ldr	r4, [r4, #4]
 800c0e6:	e7b2      	b.n	800c04e <_malloc_r+0x32>
 800c0e8:	4634      	mov	r4, r6
 800c0ea:	6876      	ldr	r6, [r6, #4]
 800c0ec:	e7b9      	b.n	800c062 <_malloc_r+0x46>
 800c0ee:	230c      	movs	r3, #12
 800c0f0:	603b      	str	r3, [r7, #0]
 800c0f2:	4638      	mov	r0, r7
 800c0f4:	f000 f9ee 	bl	800c4d4 <__malloc_unlock>
 800c0f8:	e7a1      	b.n	800c03e <_malloc_r+0x22>
 800c0fa:	6025      	str	r5, [r4, #0]
 800c0fc:	e7de      	b.n	800c0bc <_malloc_r+0xa0>
 800c0fe:	bf00      	nop
 800c100:	20000994 	.word	0x20000994

0800c104 <__ssputs_r>:
 800c104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c108:	688e      	ldr	r6, [r1, #8]
 800c10a:	429e      	cmp	r6, r3
 800c10c:	4682      	mov	sl, r0
 800c10e:	460c      	mov	r4, r1
 800c110:	4690      	mov	r8, r2
 800c112:	461f      	mov	r7, r3
 800c114:	d838      	bhi.n	800c188 <__ssputs_r+0x84>
 800c116:	898a      	ldrh	r2, [r1, #12]
 800c118:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c11c:	d032      	beq.n	800c184 <__ssputs_r+0x80>
 800c11e:	6825      	ldr	r5, [r4, #0]
 800c120:	6909      	ldr	r1, [r1, #16]
 800c122:	eba5 0901 	sub.w	r9, r5, r1
 800c126:	6965      	ldr	r5, [r4, #20]
 800c128:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c12c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c130:	3301      	adds	r3, #1
 800c132:	444b      	add	r3, r9
 800c134:	106d      	asrs	r5, r5, #1
 800c136:	429d      	cmp	r5, r3
 800c138:	bf38      	it	cc
 800c13a:	461d      	movcc	r5, r3
 800c13c:	0553      	lsls	r3, r2, #21
 800c13e:	d531      	bpl.n	800c1a4 <__ssputs_r+0xa0>
 800c140:	4629      	mov	r1, r5
 800c142:	f7ff ff6b 	bl	800c01c <_malloc_r>
 800c146:	4606      	mov	r6, r0
 800c148:	b950      	cbnz	r0, 800c160 <__ssputs_r+0x5c>
 800c14a:	230c      	movs	r3, #12
 800c14c:	f8ca 3000 	str.w	r3, [sl]
 800c150:	89a3      	ldrh	r3, [r4, #12]
 800c152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c156:	81a3      	strh	r3, [r4, #12]
 800c158:	f04f 30ff 	mov.w	r0, #4294967295
 800c15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c160:	6921      	ldr	r1, [r4, #16]
 800c162:	464a      	mov	r2, r9
 800c164:	f7ff fa08 	bl	800b578 <memcpy>
 800c168:	89a3      	ldrh	r3, [r4, #12]
 800c16a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c16e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c172:	81a3      	strh	r3, [r4, #12]
 800c174:	6126      	str	r6, [r4, #16]
 800c176:	6165      	str	r5, [r4, #20]
 800c178:	444e      	add	r6, r9
 800c17a:	eba5 0509 	sub.w	r5, r5, r9
 800c17e:	6026      	str	r6, [r4, #0]
 800c180:	60a5      	str	r5, [r4, #8]
 800c182:	463e      	mov	r6, r7
 800c184:	42be      	cmp	r6, r7
 800c186:	d900      	bls.n	800c18a <__ssputs_r+0x86>
 800c188:	463e      	mov	r6, r7
 800c18a:	6820      	ldr	r0, [r4, #0]
 800c18c:	4632      	mov	r2, r6
 800c18e:	4641      	mov	r1, r8
 800c190:	f000 f980 	bl	800c494 <memmove>
 800c194:	68a3      	ldr	r3, [r4, #8]
 800c196:	1b9b      	subs	r3, r3, r6
 800c198:	60a3      	str	r3, [r4, #8]
 800c19a:	6823      	ldr	r3, [r4, #0]
 800c19c:	4433      	add	r3, r6
 800c19e:	6023      	str	r3, [r4, #0]
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	e7db      	b.n	800c15c <__ssputs_r+0x58>
 800c1a4:	462a      	mov	r2, r5
 800c1a6:	f000 f99b 	bl	800c4e0 <_realloc_r>
 800c1aa:	4606      	mov	r6, r0
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d1e1      	bne.n	800c174 <__ssputs_r+0x70>
 800c1b0:	6921      	ldr	r1, [r4, #16]
 800c1b2:	4650      	mov	r0, sl
 800c1b4:	f7ff fec6 	bl	800bf44 <_free_r>
 800c1b8:	e7c7      	b.n	800c14a <__ssputs_r+0x46>
	...

0800c1bc <_svfiprintf_r>:
 800c1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c0:	4698      	mov	r8, r3
 800c1c2:	898b      	ldrh	r3, [r1, #12]
 800c1c4:	061b      	lsls	r3, r3, #24
 800c1c6:	b09d      	sub	sp, #116	; 0x74
 800c1c8:	4607      	mov	r7, r0
 800c1ca:	460d      	mov	r5, r1
 800c1cc:	4614      	mov	r4, r2
 800c1ce:	d50e      	bpl.n	800c1ee <_svfiprintf_r+0x32>
 800c1d0:	690b      	ldr	r3, [r1, #16]
 800c1d2:	b963      	cbnz	r3, 800c1ee <_svfiprintf_r+0x32>
 800c1d4:	2140      	movs	r1, #64	; 0x40
 800c1d6:	f7ff ff21 	bl	800c01c <_malloc_r>
 800c1da:	6028      	str	r0, [r5, #0]
 800c1dc:	6128      	str	r0, [r5, #16]
 800c1de:	b920      	cbnz	r0, 800c1ea <_svfiprintf_r+0x2e>
 800c1e0:	230c      	movs	r3, #12
 800c1e2:	603b      	str	r3, [r7, #0]
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	e0d1      	b.n	800c38e <_svfiprintf_r+0x1d2>
 800c1ea:	2340      	movs	r3, #64	; 0x40
 800c1ec:	616b      	str	r3, [r5, #20]
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1f2:	2320      	movs	r3, #32
 800c1f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1fc:	2330      	movs	r3, #48	; 0x30
 800c1fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c3a8 <_svfiprintf_r+0x1ec>
 800c202:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c206:	f04f 0901 	mov.w	r9, #1
 800c20a:	4623      	mov	r3, r4
 800c20c:	469a      	mov	sl, r3
 800c20e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c212:	b10a      	cbz	r2, 800c218 <_svfiprintf_r+0x5c>
 800c214:	2a25      	cmp	r2, #37	; 0x25
 800c216:	d1f9      	bne.n	800c20c <_svfiprintf_r+0x50>
 800c218:	ebba 0b04 	subs.w	fp, sl, r4
 800c21c:	d00b      	beq.n	800c236 <_svfiprintf_r+0x7a>
 800c21e:	465b      	mov	r3, fp
 800c220:	4622      	mov	r2, r4
 800c222:	4629      	mov	r1, r5
 800c224:	4638      	mov	r0, r7
 800c226:	f7ff ff6d 	bl	800c104 <__ssputs_r>
 800c22a:	3001      	adds	r0, #1
 800c22c:	f000 80aa 	beq.w	800c384 <_svfiprintf_r+0x1c8>
 800c230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c232:	445a      	add	r2, fp
 800c234:	9209      	str	r2, [sp, #36]	; 0x24
 800c236:	f89a 3000 	ldrb.w	r3, [sl]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f000 80a2 	beq.w	800c384 <_svfiprintf_r+0x1c8>
 800c240:	2300      	movs	r3, #0
 800c242:	f04f 32ff 	mov.w	r2, #4294967295
 800c246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c24a:	f10a 0a01 	add.w	sl, sl, #1
 800c24e:	9304      	str	r3, [sp, #16]
 800c250:	9307      	str	r3, [sp, #28]
 800c252:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c256:	931a      	str	r3, [sp, #104]	; 0x68
 800c258:	4654      	mov	r4, sl
 800c25a:	2205      	movs	r2, #5
 800c25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c260:	4851      	ldr	r0, [pc, #324]	; (800c3a8 <_svfiprintf_r+0x1ec>)
 800c262:	f7f3 ffe5 	bl	8000230 <memchr>
 800c266:	9a04      	ldr	r2, [sp, #16]
 800c268:	b9d8      	cbnz	r0, 800c2a2 <_svfiprintf_r+0xe6>
 800c26a:	06d0      	lsls	r0, r2, #27
 800c26c:	bf44      	itt	mi
 800c26e:	2320      	movmi	r3, #32
 800c270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c274:	0711      	lsls	r1, r2, #28
 800c276:	bf44      	itt	mi
 800c278:	232b      	movmi	r3, #43	; 0x2b
 800c27a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c27e:	f89a 3000 	ldrb.w	r3, [sl]
 800c282:	2b2a      	cmp	r3, #42	; 0x2a
 800c284:	d015      	beq.n	800c2b2 <_svfiprintf_r+0xf6>
 800c286:	9a07      	ldr	r2, [sp, #28]
 800c288:	4654      	mov	r4, sl
 800c28a:	2000      	movs	r0, #0
 800c28c:	f04f 0c0a 	mov.w	ip, #10
 800c290:	4621      	mov	r1, r4
 800c292:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c296:	3b30      	subs	r3, #48	; 0x30
 800c298:	2b09      	cmp	r3, #9
 800c29a:	d94e      	bls.n	800c33a <_svfiprintf_r+0x17e>
 800c29c:	b1b0      	cbz	r0, 800c2cc <_svfiprintf_r+0x110>
 800c29e:	9207      	str	r2, [sp, #28]
 800c2a0:	e014      	b.n	800c2cc <_svfiprintf_r+0x110>
 800c2a2:	eba0 0308 	sub.w	r3, r0, r8
 800c2a6:	fa09 f303 	lsl.w	r3, r9, r3
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	9304      	str	r3, [sp, #16]
 800c2ae:	46a2      	mov	sl, r4
 800c2b0:	e7d2      	b.n	800c258 <_svfiprintf_r+0x9c>
 800c2b2:	9b03      	ldr	r3, [sp, #12]
 800c2b4:	1d19      	adds	r1, r3, #4
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	9103      	str	r1, [sp, #12]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	bfbb      	ittet	lt
 800c2be:	425b      	neglt	r3, r3
 800c2c0:	f042 0202 	orrlt.w	r2, r2, #2
 800c2c4:	9307      	strge	r3, [sp, #28]
 800c2c6:	9307      	strlt	r3, [sp, #28]
 800c2c8:	bfb8      	it	lt
 800c2ca:	9204      	strlt	r2, [sp, #16]
 800c2cc:	7823      	ldrb	r3, [r4, #0]
 800c2ce:	2b2e      	cmp	r3, #46	; 0x2e
 800c2d0:	d10c      	bne.n	800c2ec <_svfiprintf_r+0x130>
 800c2d2:	7863      	ldrb	r3, [r4, #1]
 800c2d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c2d6:	d135      	bne.n	800c344 <_svfiprintf_r+0x188>
 800c2d8:	9b03      	ldr	r3, [sp, #12]
 800c2da:	1d1a      	adds	r2, r3, #4
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	9203      	str	r2, [sp, #12]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	bfb8      	it	lt
 800c2e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2e8:	3402      	adds	r4, #2
 800c2ea:	9305      	str	r3, [sp, #20]
 800c2ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c3b8 <_svfiprintf_r+0x1fc>
 800c2f0:	7821      	ldrb	r1, [r4, #0]
 800c2f2:	2203      	movs	r2, #3
 800c2f4:	4650      	mov	r0, sl
 800c2f6:	f7f3 ff9b 	bl	8000230 <memchr>
 800c2fa:	b140      	cbz	r0, 800c30e <_svfiprintf_r+0x152>
 800c2fc:	2340      	movs	r3, #64	; 0x40
 800c2fe:	eba0 000a 	sub.w	r0, r0, sl
 800c302:	fa03 f000 	lsl.w	r0, r3, r0
 800c306:	9b04      	ldr	r3, [sp, #16]
 800c308:	4303      	orrs	r3, r0
 800c30a:	3401      	adds	r4, #1
 800c30c:	9304      	str	r3, [sp, #16]
 800c30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c312:	4826      	ldr	r0, [pc, #152]	; (800c3ac <_svfiprintf_r+0x1f0>)
 800c314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c318:	2206      	movs	r2, #6
 800c31a:	f7f3 ff89 	bl	8000230 <memchr>
 800c31e:	2800      	cmp	r0, #0
 800c320:	d038      	beq.n	800c394 <_svfiprintf_r+0x1d8>
 800c322:	4b23      	ldr	r3, [pc, #140]	; (800c3b0 <_svfiprintf_r+0x1f4>)
 800c324:	bb1b      	cbnz	r3, 800c36e <_svfiprintf_r+0x1b2>
 800c326:	9b03      	ldr	r3, [sp, #12]
 800c328:	3307      	adds	r3, #7
 800c32a:	f023 0307 	bic.w	r3, r3, #7
 800c32e:	3308      	adds	r3, #8
 800c330:	9303      	str	r3, [sp, #12]
 800c332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c334:	4433      	add	r3, r6
 800c336:	9309      	str	r3, [sp, #36]	; 0x24
 800c338:	e767      	b.n	800c20a <_svfiprintf_r+0x4e>
 800c33a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c33e:	460c      	mov	r4, r1
 800c340:	2001      	movs	r0, #1
 800c342:	e7a5      	b.n	800c290 <_svfiprintf_r+0xd4>
 800c344:	2300      	movs	r3, #0
 800c346:	3401      	adds	r4, #1
 800c348:	9305      	str	r3, [sp, #20]
 800c34a:	4619      	mov	r1, r3
 800c34c:	f04f 0c0a 	mov.w	ip, #10
 800c350:	4620      	mov	r0, r4
 800c352:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c356:	3a30      	subs	r2, #48	; 0x30
 800c358:	2a09      	cmp	r2, #9
 800c35a:	d903      	bls.n	800c364 <_svfiprintf_r+0x1a8>
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d0c5      	beq.n	800c2ec <_svfiprintf_r+0x130>
 800c360:	9105      	str	r1, [sp, #20]
 800c362:	e7c3      	b.n	800c2ec <_svfiprintf_r+0x130>
 800c364:	fb0c 2101 	mla	r1, ip, r1, r2
 800c368:	4604      	mov	r4, r0
 800c36a:	2301      	movs	r3, #1
 800c36c:	e7f0      	b.n	800c350 <_svfiprintf_r+0x194>
 800c36e:	ab03      	add	r3, sp, #12
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	462a      	mov	r2, r5
 800c374:	4b0f      	ldr	r3, [pc, #60]	; (800c3b4 <_svfiprintf_r+0x1f8>)
 800c376:	a904      	add	r1, sp, #16
 800c378:	4638      	mov	r0, r7
 800c37a:	f7fc fa47 	bl	800880c <_printf_float>
 800c37e:	1c42      	adds	r2, r0, #1
 800c380:	4606      	mov	r6, r0
 800c382:	d1d6      	bne.n	800c332 <_svfiprintf_r+0x176>
 800c384:	89ab      	ldrh	r3, [r5, #12]
 800c386:	065b      	lsls	r3, r3, #25
 800c388:	f53f af2c 	bmi.w	800c1e4 <_svfiprintf_r+0x28>
 800c38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c38e:	b01d      	add	sp, #116	; 0x74
 800c390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c394:	ab03      	add	r3, sp, #12
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	462a      	mov	r2, r5
 800c39a:	4b06      	ldr	r3, [pc, #24]	; (800c3b4 <_svfiprintf_r+0x1f8>)
 800c39c:	a904      	add	r1, sp, #16
 800c39e:	4638      	mov	r0, r7
 800c3a0:	f7fc fcd8 	bl	8008d54 <_printf_i>
 800c3a4:	e7eb      	b.n	800c37e <_svfiprintf_r+0x1c2>
 800c3a6:	bf00      	nop
 800c3a8:	0800e91c 	.word	0x0800e91c
 800c3ac:	0800e926 	.word	0x0800e926
 800c3b0:	0800880d 	.word	0x0800880d
 800c3b4:	0800c105 	.word	0x0800c105
 800c3b8:	0800e922 	.word	0x0800e922
 800c3bc:	00000000 	.word	0x00000000

0800c3c0 <nan>:
 800c3c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c3c8 <nan+0x8>
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	00000000 	.word	0x00000000
 800c3cc:	7ff80000 	.word	0x7ff80000

0800c3d0 <_sbrk_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	4d06      	ldr	r5, [pc, #24]	; (800c3ec <_sbrk_r+0x1c>)
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	4608      	mov	r0, r1
 800c3da:	602b      	str	r3, [r5, #0]
 800c3dc:	f7f5 ff2e 	bl	800223c <_sbrk>
 800c3e0:	1c43      	adds	r3, r0, #1
 800c3e2:	d102      	bne.n	800c3ea <_sbrk_r+0x1a>
 800c3e4:	682b      	ldr	r3, [r5, #0]
 800c3e6:	b103      	cbz	r3, 800c3ea <_sbrk_r+0x1a>
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	bd38      	pop	{r3, r4, r5, pc}
 800c3ec:	2000099c 	.word	0x2000099c

0800c3f0 <strncmp>:
 800c3f0:	b510      	push	{r4, lr}
 800c3f2:	b17a      	cbz	r2, 800c414 <strncmp+0x24>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	3901      	subs	r1, #1
 800c3f8:	1884      	adds	r4, r0, r2
 800c3fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c3fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c402:	4290      	cmp	r0, r2
 800c404:	d101      	bne.n	800c40a <strncmp+0x1a>
 800c406:	42a3      	cmp	r3, r4
 800c408:	d101      	bne.n	800c40e <strncmp+0x1e>
 800c40a:	1a80      	subs	r0, r0, r2
 800c40c:	bd10      	pop	{r4, pc}
 800c40e:	2800      	cmp	r0, #0
 800c410:	d1f3      	bne.n	800c3fa <strncmp+0xa>
 800c412:	e7fa      	b.n	800c40a <strncmp+0x1a>
 800c414:	4610      	mov	r0, r2
 800c416:	e7f9      	b.n	800c40c <strncmp+0x1c>

0800c418 <__ascii_wctomb>:
 800c418:	b149      	cbz	r1, 800c42e <__ascii_wctomb+0x16>
 800c41a:	2aff      	cmp	r2, #255	; 0xff
 800c41c:	bf85      	ittet	hi
 800c41e:	238a      	movhi	r3, #138	; 0x8a
 800c420:	6003      	strhi	r3, [r0, #0]
 800c422:	700a      	strbls	r2, [r1, #0]
 800c424:	f04f 30ff 	movhi.w	r0, #4294967295
 800c428:	bf98      	it	ls
 800c42a:	2001      	movls	r0, #1
 800c42c:	4770      	bx	lr
 800c42e:	4608      	mov	r0, r1
 800c430:	4770      	bx	lr
	...

0800c434 <__assert_func>:
 800c434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c436:	4614      	mov	r4, r2
 800c438:	461a      	mov	r2, r3
 800c43a:	4b09      	ldr	r3, [pc, #36]	; (800c460 <__assert_func+0x2c>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4605      	mov	r5, r0
 800c440:	68d8      	ldr	r0, [r3, #12]
 800c442:	b14c      	cbz	r4, 800c458 <__assert_func+0x24>
 800c444:	4b07      	ldr	r3, [pc, #28]	; (800c464 <__assert_func+0x30>)
 800c446:	9100      	str	r1, [sp, #0]
 800c448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c44c:	4906      	ldr	r1, [pc, #24]	; (800c468 <__assert_func+0x34>)
 800c44e:	462b      	mov	r3, r5
 800c450:	f000 f80e 	bl	800c470 <fiprintf>
 800c454:	f000 fa8c 	bl	800c970 <abort>
 800c458:	4b04      	ldr	r3, [pc, #16]	; (800c46c <__assert_func+0x38>)
 800c45a:	461c      	mov	r4, r3
 800c45c:	e7f3      	b.n	800c446 <__assert_func+0x12>
 800c45e:	bf00      	nop
 800c460:	2000001c 	.word	0x2000001c
 800c464:	0800e92d 	.word	0x0800e92d
 800c468:	0800e93a 	.word	0x0800e93a
 800c46c:	0800e968 	.word	0x0800e968

0800c470 <fiprintf>:
 800c470:	b40e      	push	{r1, r2, r3}
 800c472:	b503      	push	{r0, r1, lr}
 800c474:	4601      	mov	r1, r0
 800c476:	ab03      	add	r3, sp, #12
 800c478:	4805      	ldr	r0, [pc, #20]	; (800c490 <fiprintf+0x20>)
 800c47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c47e:	6800      	ldr	r0, [r0, #0]
 800c480:	9301      	str	r3, [sp, #4]
 800c482:	f000 f885 	bl	800c590 <_vfiprintf_r>
 800c486:	b002      	add	sp, #8
 800c488:	f85d eb04 	ldr.w	lr, [sp], #4
 800c48c:	b003      	add	sp, #12
 800c48e:	4770      	bx	lr
 800c490:	2000001c 	.word	0x2000001c

0800c494 <memmove>:
 800c494:	4288      	cmp	r0, r1
 800c496:	b510      	push	{r4, lr}
 800c498:	eb01 0402 	add.w	r4, r1, r2
 800c49c:	d902      	bls.n	800c4a4 <memmove+0x10>
 800c49e:	4284      	cmp	r4, r0
 800c4a0:	4623      	mov	r3, r4
 800c4a2:	d807      	bhi.n	800c4b4 <memmove+0x20>
 800c4a4:	1e43      	subs	r3, r0, #1
 800c4a6:	42a1      	cmp	r1, r4
 800c4a8:	d008      	beq.n	800c4bc <memmove+0x28>
 800c4aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4b2:	e7f8      	b.n	800c4a6 <memmove+0x12>
 800c4b4:	4402      	add	r2, r0
 800c4b6:	4601      	mov	r1, r0
 800c4b8:	428a      	cmp	r2, r1
 800c4ba:	d100      	bne.n	800c4be <memmove+0x2a>
 800c4bc:	bd10      	pop	{r4, pc}
 800c4be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4c6:	e7f7      	b.n	800c4b8 <memmove+0x24>

0800c4c8 <__malloc_lock>:
 800c4c8:	4801      	ldr	r0, [pc, #4]	; (800c4d0 <__malloc_lock+0x8>)
 800c4ca:	f000 bc11 	b.w	800ccf0 <__retarget_lock_acquire_recursive>
 800c4ce:	bf00      	nop
 800c4d0:	200009a0 	.word	0x200009a0

0800c4d4 <__malloc_unlock>:
 800c4d4:	4801      	ldr	r0, [pc, #4]	; (800c4dc <__malloc_unlock+0x8>)
 800c4d6:	f000 bc0c 	b.w	800ccf2 <__retarget_lock_release_recursive>
 800c4da:	bf00      	nop
 800c4dc:	200009a0 	.word	0x200009a0

0800c4e0 <_realloc_r>:
 800c4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e4:	4680      	mov	r8, r0
 800c4e6:	4614      	mov	r4, r2
 800c4e8:	460e      	mov	r6, r1
 800c4ea:	b921      	cbnz	r1, 800c4f6 <_realloc_r+0x16>
 800c4ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4f0:	4611      	mov	r1, r2
 800c4f2:	f7ff bd93 	b.w	800c01c <_malloc_r>
 800c4f6:	b92a      	cbnz	r2, 800c504 <_realloc_r+0x24>
 800c4f8:	f7ff fd24 	bl	800bf44 <_free_r>
 800c4fc:	4625      	mov	r5, r4
 800c4fe:	4628      	mov	r0, r5
 800c500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c504:	f000 fc5c 	bl	800cdc0 <_malloc_usable_size_r>
 800c508:	4284      	cmp	r4, r0
 800c50a:	4607      	mov	r7, r0
 800c50c:	d802      	bhi.n	800c514 <_realloc_r+0x34>
 800c50e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c512:	d812      	bhi.n	800c53a <_realloc_r+0x5a>
 800c514:	4621      	mov	r1, r4
 800c516:	4640      	mov	r0, r8
 800c518:	f7ff fd80 	bl	800c01c <_malloc_r>
 800c51c:	4605      	mov	r5, r0
 800c51e:	2800      	cmp	r0, #0
 800c520:	d0ed      	beq.n	800c4fe <_realloc_r+0x1e>
 800c522:	42bc      	cmp	r4, r7
 800c524:	4622      	mov	r2, r4
 800c526:	4631      	mov	r1, r6
 800c528:	bf28      	it	cs
 800c52a:	463a      	movcs	r2, r7
 800c52c:	f7ff f824 	bl	800b578 <memcpy>
 800c530:	4631      	mov	r1, r6
 800c532:	4640      	mov	r0, r8
 800c534:	f7ff fd06 	bl	800bf44 <_free_r>
 800c538:	e7e1      	b.n	800c4fe <_realloc_r+0x1e>
 800c53a:	4635      	mov	r5, r6
 800c53c:	e7df      	b.n	800c4fe <_realloc_r+0x1e>

0800c53e <__sfputc_r>:
 800c53e:	6893      	ldr	r3, [r2, #8]
 800c540:	3b01      	subs	r3, #1
 800c542:	2b00      	cmp	r3, #0
 800c544:	b410      	push	{r4}
 800c546:	6093      	str	r3, [r2, #8]
 800c548:	da08      	bge.n	800c55c <__sfputc_r+0x1e>
 800c54a:	6994      	ldr	r4, [r2, #24]
 800c54c:	42a3      	cmp	r3, r4
 800c54e:	db01      	blt.n	800c554 <__sfputc_r+0x16>
 800c550:	290a      	cmp	r1, #10
 800c552:	d103      	bne.n	800c55c <__sfputc_r+0x1e>
 800c554:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c558:	f000 b94a 	b.w	800c7f0 <__swbuf_r>
 800c55c:	6813      	ldr	r3, [r2, #0]
 800c55e:	1c58      	adds	r0, r3, #1
 800c560:	6010      	str	r0, [r2, #0]
 800c562:	7019      	strb	r1, [r3, #0]
 800c564:	4608      	mov	r0, r1
 800c566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <__sfputs_r>:
 800c56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56e:	4606      	mov	r6, r0
 800c570:	460f      	mov	r7, r1
 800c572:	4614      	mov	r4, r2
 800c574:	18d5      	adds	r5, r2, r3
 800c576:	42ac      	cmp	r4, r5
 800c578:	d101      	bne.n	800c57e <__sfputs_r+0x12>
 800c57a:	2000      	movs	r0, #0
 800c57c:	e007      	b.n	800c58e <__sfputs_r+0x22>
 800c57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c582:	463a      	mov	r2, r7
 800c584:	4630      	mov	r0, r6
 800c586:	f7ff ffda 	bl	800c53e <__sfputc_r>
 800c58a:	1c43      	adds	r3, r0, #1
 800c58c:	d1f3      	bne.n	800c576 <__sfputs_r+0xa>
 800c58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c590 <_vfiprintf_r>:
 800c590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c594:	460d      	mov	r5, r1
 800c596:	b09d      	sub	sp, #116	; 0x74
 800c598:	4614      	mov	r4, r2
 800c59a:	4698      	mov	r8, r3
 800c59c:	4606      	mov	r6, r0
 800c59e:	b118      	cbz	r0, 800c5a8 <_vfiprintf_r+0x18>
 800c5a0:	6983      	ldr	r3, [r0, #24]
 800c5a2:	b90b      	cbnz	r3, 800c5a8 <_vfiprintf_r+0x18>
 800c5a4:	f000 fb06 	bl	800cbb4 <__sinit>
 800c5a8:	4b89      	ldr	r3, [pc, #548]	; (800c7d0 <_vfiprintf_r+0x240>)
 800c5aa:	429d      	cmp	r5, r3
 800c5ac:	d11b      	bne.n	800c5e6 <_vfiprintf_r+0x56>
 800c5ae:	6875      	ldr	r5, [r6, #4]
 800c5b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5b2:	07d9      	lsls	r1, r3, #31
 800c5b4:	d405      	bmi.n	800c5c2 <_vfiprintf_r+0x32>
 800c5b6:	89ab      	ldrh	r3, [r5, #12]
 800c5b8:	059a      	lsls	r2, r3, #22
 800c5ba:	d402      	bmi.n	800c5c2 <_vfiprintf_r+0x32>
 800c5bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5be:	f000 fb97 	bl	800ccf0 <__retarget_lock_acquire_recursive>
 800c5c2:	89ab      	ldrh	r3, [r5, #12]
 800c5c4:	071b      	lsls	r3, r3, #28
 800c5c6:	d501      	bpl.n	800c5cc <_vfiprintf_r+0x3c>
 800c5c8:	692b      	ldr	r3, [r5, #16]
 800c5ca:	b9eb      	cbnz	r3, 800c608 <_vfiprintf_r+0x78>
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	f000 f960 	bl	800c894 <__swsetup_r>
 800c5d4:	b1c0      	cbz	r0, 800c608 <_vfiprintf_r+0x78>
 800c5d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5d8:	07dc      	lsls	r4, r3, #31
 800c5da:	d50e      	bpl.n	800c5fa <_vfiprintf_r+0x6a>
 800c5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e0:	b01d      	add	sp, #116	; 0x74
 800c5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e6:	4b7b      	ldr	r3, [pc, #492]	; (800c7d4 <_vfiprintf_r+0x244>)
 800c5e8:	429d      	cmp	r5, r3
 800c5ea:	d101      	bne.n	800c5f0 <_vfiprintf_r+0x60>
 800c5ec:	68b5      	ldr	r5, [r6, #8]
 800c5ee:	e7df      	b.n	800c5b0 <_vfiprintf_r+0x20>
 800c5f0:	4b79      	ldr	r3, [pc, #484]	; (800c7d8 <_vfiprintf_r+0x248>)
 800c5f2:	429d      	cmp	r5, r3
 800c5f4:	bf08      	it	eq
 800c5f6:	68f5      	ldreq	r5, [r6, #12]
 800c5f8:	e7da      	b.n	800c5b0 <_vfiprintf_r+0x20>
 800c5fa:	89ab      	ldrh	r3, [r5, #12]
 800c5fc:	0598      	lsls	r0, r3, #22
 800c5fe:	d4ed      	bmi.n	800c5dc <_vfiprintf_r+0x4c>
 800c600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c602:	f000 fb76 	bl	800ccf2 <__retarget_lock_release_recursive>
 800c606:	e7e9      	b.n	800c5dc <_vfiprintf_r+0x4c>
 800c608:	2300      	movs	r3, #0
 800c60a:	9309      	str	r3, [sp, #36]	; 0x24
 800c60c:	2320      	movs	r3, #32
 800c60e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c612:	f8cd 800c 	str.w	r8, [sp, #12]
 800c616:	2330      	movs	r3, #48	; 0x30
 800c618:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c7dc <_vfiprintf_r+0x24c>
 800c61c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c620:	f04f 0901 	mov.w	r9, #1
 800c624:	4623      	mov	r3, r4
 800c626:	469a      	mov	sl, r3
 800c628:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c62c:	b10a      	cbz	r2, 800c632 <_vfiprintf_r+0xa2>
 800c62e:	2a25      	cmp	r2, #37	; 0x25
 800c630:	d1f9      	bne.n	800c626 <_vfiprintf_r+0x96>
 800c632:	ebba 0b04 	subs.w	fp, sl, r4
 800c636:	d00b      	beq.n	800c650 <_vfiprintf_r+0xc0>
 800c638:	465b      	mov	r3, fp
 800c63a:	4622      	mov	r2, r4
 800c63c:	4629      	mov	r1, r5
 800c63e:	4630      	mov	r0, r6
 800c640:	f7ff ff94 	bl	800c56c <__sfputs_r>
 800c644:	3001      	adds	r0, #1
 800c646:	f000 80aa 	beq.w	800c79e <_vfiprintf_r+0x20e>
 800c64a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c64c:	445a      	add	r2, fp
 800c64e:	9209      	str	r2, [sp, #36]	; 0x24
 800c650:	f89a 3000 	ldrb.w	r3, [sl]
 800c654:	2b00      	cmp	r3, #0
 800c656:	f000 80a2 	beq.w	800c79e <_vfiprintf_r+0x20e>
 800c65a:	2300      	movs	r3, #0
 800c65c:	f04f 32ff 	mov.w	r2, #4294967295
 800c660:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c664:	f10a 0a01 	add.w	sl, sl, #1
 800c668:	9304      	str	r3, [sp, #16]
 800c66a:	9307      	str	r3, [sp, #28]
 800c66c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c670:	931a      	str	r3, [sp, #104]	; 0x68
 800c672:	4654      	mov	r4, sl
 800c674:	2205      	movs	r2, #5
 800c676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c67a:	4858      	ldr	r0, [pc, #352]	; (800c7dc <_vfiprintf_r+0x24c>)
 800c67c:	f7f3 fdd8 	bl	8000230 <memchr>
 800c680:	9a04      	ldr	r2, [sp, #16]
 800c682:	b9d8      	cbnz	r0, 800c6bc <_vfiprintf_r+0x12c>
 800c684:	06d1      	lsls	r1, r2, #27
 800c686:	bf44      	itt	mi
 800c688:	2320      	movmi	r3, #32
 800c68a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c68e:	0713      	lsls	r3, r2, #28
 800c690:	bf44      	itt	mi
 800c692:	232b      	movmi	r3, #43	; 0x2b
 800c694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c698:	f89a 3000 	ldrb.w	r3, [sl]
 800c69c:	2b2a      	cmp	r3, #42	; 0x2a
 800c69e:	d015      	beq.n	800c6cc <_vfiprintf_r+0x13c>
 800c6a0:	9a07      	ldr	r2, [sp, #28]
 800c6a2:	4654      	mov	r4, sl
 800c6a4:	2000      	movs	r0, #0
 800c6a6:	f04f 0c0a 	mov.w	ip, #10
 800c6aa:	4621      	mov	r1, r4
 800c6ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6b0:	3b30      	subs	r3, #48	; 0x30
 800c6b2:	2b09      	cmp	r3, #9
 800c6b4:	d94e      	bls.n	800c754 <_vfiprintf_r+0x1c4>
 800c6b6:	b1b0      	cbz	r0, 800c6e6 <_vfiprintf_r+0x156>
 800c6b8:	9207      	str	r2, [sp, #28]
 800c6ba:	e014      	b.n	800c6e6 <_vfiprintf_r+0x156>
 800c6bc:	eba0 0308 	sub.w	r3, r0, r8
 800c6c0:	fa09 f303 	lsl.w	r3, r9, r3
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	9304      	str	r3, [sp, #16]
 800c6c8:	46a2      	mov	sl, r4
 800c6ca:	e7d2      	b.n	800c672 <_vfiprintf_r+0xe2>
 800c6cc:	9b03      	ldr	r3, [sp, #12]
 800c6ce:	1d19      	adds	r1, r3, #4
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	9103      	str	r1, [sp, #12]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	bfbb      	ittet	lt
 800c6d8:	425b      	neglt	r3, r3
 800c6da:	f042 0202 	orrlt.w	r2, r2, #2
 800c6de:	9307      	strge	r3, [sp, #28]
 800c6e0:	9307      	strlt	r3, [sp, #28]
 800c6e2:	bfb8      	it	lt
 800c6e4:	9204      	strlt	r2, [sp, #16]
 800c6e6:	7823      	ldrb	r3, [r4, #0]
 800c6e8:	2b2e      	cmp	r3, #46	; 0x2e
 800c6ea:	d10c      	bne.n	800c706 <_vfiprintf_r+0x176>
 800c6ec:	7863      	ldrb	r3, [r4, #1]
 800c6ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c6f0:	d135      	bne.n	800c75e <_vfiprintf_r+0x1ce>
 800c6f2:	9b03      	ldr	r3, [sp, #12]
 800c6f4:	1d1a      	adds	r2, r3, #4
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	9203      	str	r2, [sp, #12]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	bfb8      	it	lt
 800c6fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800c702:	3402      	adds	r4, #2
 800c704:	9305      	str	r3, [sp, #20]
 800c706:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c7ec <_vfiprintf_r+0x25c>
 800c70a:	7821      	ldrb	r1, [r4, #0]
 800c70c:	2203      	movs	r2, #3
 800c70e:	4650      	mov	r0, sl
 800c710:	f7f3 fd8e 	bl	8000230 <memchr>
 800c714:	b140      	cbz	r0, 800c728 <_vfiprintf_r+0x198>
 800c716:	2340      	movs	r3, #64	; 0x40
 800c718:	eba0 000a 	sub.w	r0, r0, sl
 800c71c:	fa03 f000 	lsl.w	r0, r3, r0
 800c720:	9b04      	ldr	r3, [sp, #16]
 800c722:	4303      	orrs	r3, r0
 800c724:	3401      	adds	r4, #1
 800c726:	9304      	str	r3, [sp, #16]
 800c728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c72c:	482c      	ldr	r0, [pc, #176]	; (800c7e0 <_vfiprintf_r+0x250>)
 800c72e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c732:	2206      	movs	r2, #6
 800c734:	f7f3 fd7c 	bl	8000230 <memchr>
 800c738:	2800      	cmp	r0, #0
 800c73a:	d03f      	beq.n	800c7bc <_vfiprintf_r+0x22c>
 800c73c:	4b29      	ldr	r3, [pc, #164]	; (800c7e4 <_vfiprintf_r+0x254>)
 800c73e:	bb1b      	cbnz	r3, 800c788 <_vfiprintf_r+0x1f8>
 800c740:	9b03      	ldr	r3, [sp, #12]
 800c742:	3307      	adds	r3, #7
 800c744:	f023 0307 	bic.w	r3, r3, #7
 800c748:	3308      	adds	r3, #8
 800c74a:	9303      	str	r3, [sp, #12]
 800c74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c74e:	443b      	add	r3, r7
 800c750:	9309      	str	r3, [sp, #36]	; 0x24
 800c752:	e767      	b.n	800c624 <_vfiprintf_r+0x94>
 800c754:	fb0c 3202 	mla	r2, ip, r2, r3
 800c758:	460c      	mov	r4, r1
 800c75a:	2001      	movs	r0, #1
 800c75c:	e7a5      	b.n	800c6aa <_vfiprintf_r+0x11a>
 800c75e:	2300      	movs	r3, #0
 800c760:	3401      	adds	r4, #1
 800c762:	9305      	str	r3, [sp, #20]
 800c764:	4619      	mov	r1, r3
 800c766:	f04f 0c0a 	mov.w	ip, #10
 800c76a:	4620      	mov	r0, r4
 800c76c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c770:	3a30      	subs	r2, #48	; 0x30
 800c772:	2a09      	cmp	r2, #9
 800c774:	d903      	bls.n	800c77e <_vfiprintf_r+0x1ee>
 800c776:	2b00      	cmp	r3, #0
 800c778:	d0c5      	beq.n	800c706 <_vfiprintf_r+0x176>
 800c77a:	9105      	str	r1, [sp, #20]
 800c77c:	e7c3      	b.n	800c706 <_vfiprintf_r+0x176>
 800c77e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c782:	4604      	mov	r4, r0
 800c784:	2301      	movs	r3, #1
 800c786:	e7f0      	b.n	800c76a <_vfiprintf_r+0x1da>
 800c788:	ab03      	add	r3, sp, #12
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	462a      	mov	r2, r5
 800c78e:	4b16      	ldr	r3, [pc, #88]	; (800c7e8 <_vfiprintf_r+0x258>)
 800c790:	a904      	add	r1, sp, #16
 800c792:	4630      	mov	r0, r6
 800c794:	f7fc f83a 	bl	800880c <_printf_float>
 800c798:	4607      	mov	r7, r0
 800c79a:	1c78      	adds	r0, r7, #1
 800c79c:	d1d6      	bne.n	800c74c <_vfiprintf_r+0x1bc>
 800c79e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7a0:	07d9      	lsls	r1, r3, #31
 800c7a2:	d405      	bmi.n	800c7b0 <_vfiprintf_r+0x220>
 800c7a4:	89ab      	ldrh	r3, [r5, #12]
 800c7a6:	059a      	lsls	r2, r3, #22
 800c7a8:	d402      	bmi.n	800c7b0 <_vfiprintf_r+0x220>
 800c7aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7ac:	f000 faa1 	bl	800ccf2 <__retarget_lock_release_recursive>
 800c7b0:	89ab      	ldrh	r3, [r5, #12]
 800c7b2:	065b      	lsls	r3, r3, #25
 800c7b4:	f53f af12 	bmi.w	800c5dc <_vfiprintf_r+0x4c>
 800c7b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7ba:	e711      	b.n	800c5e0 <_vfiprintf_r+0x50>
 800c7bc:	ab03      	add	r3, sp, #12
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	462a      	mov	r2, r5
 800c7c2:	4b09      	ldr	r3, [pc, #36]	; (800c7e8 <_vfiprintf_r+0x258>)
 800c7c4:	a904      	add	r1, sp, #16
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	f7fc fac4 	bl	8008d54 <_printf_i>
 800c7cc:	e7e4      	b.n	800c798 <_vfiprintf_r+0x208>
 800c7ce:	bf00      	nop
 800c7d0:	0800e98c 	.word	0x0800e98c
 800c7d4:	0800e9ac 	.word	0x0800e9ac
 800c7d8:	0800e96c 	.word	0x0800e96c
 800c7dc:	0800e91c 	.word	0x0800e91c
 800c7e0:	0800e926 	.word	0x0800e926
 800c7e4:	0800880d 	.word	0x0800880d
 800c7e8:	0800c56d 	.word	0x0800c56d
 800c7ec:	0800e922 	.word	0x0800e922

0800c7f0 <__swbuf_r>:
 800c7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f2:	460e      	mov	r6, r1
 800c7f4:	4614      	mov	r4, r2
 800c7f6:	4605      	mov	r5, r0
 800c7f8:	b118      	cbz	r0, 800c802 <__swbuf_r+0x12>
 800c7fa:	6983      	ldr	r3, [r0, #24]
 800c7fc:	b90b      	cbnz	r3, 800c802 <__swbuf_r+0x12>
 800c7fe:	f000 f9d9 	bl	800cbb4 <__sinit>
 800c802:	4b21      	ldr	r3, [pc, #132]	; (800c888 <__swbuf_r+0x98>)
 800c804:	429c      	cmp	r4, r3
 800c806:	d12b      	bne.n	800c860 <__swbuf_r+0x70>
 800c808:	686c      	ldr	r4, [r5, #4]
 800c80a:	69a3      	ldr	r3, [r4, #24]
 800c80c:	60a3      	str	r3, [r4, #8]
 800c80e:	89a3      	ldrh	r3, [r4, #12]
 800c810:	071a      	lsls	r2, r3, #28
 800c812:	d52f      	bpl.n	800c874 <__swbuf_r+0x84>
 800c814:	6923      	ldr	r3, [r4, #16]
 800c816:	b36b      	cbz	r3, 800c874 <__swbuf_r+0x84>
 800c818:	6923      	ldr	r3, [r4, #16]
 800c81a:	6820      	ldr	r0, [r4, #0]
 800c81c:	1ac0      	subs	r0, r0, r3
 800c81e:	6963      	ldr	r3, [r4, #20]
 800c820:	b2f6      	uxtb	r6, r6
 800c822:	4283      	cmp	r3, r0
 800c824:	4637      	mov	r7, r6
 800c826:	dc04      	bgt.n	800c832 <__swbuf_r+0x42>
 800c828:	4621      	mov	r1, r4
 800c82a:	4628      	mov	r0, r5
 800c82c:	f000 f92e 	bl	800ca8c <_fflush_r>
 800c830:	bb30      	cbnz	r0, 800c880 <__swbuf_r+0x90>
 800c832:	68a3      	ldr	r3, [r4, #8]
 800c834:	3b01      	subs	r3, #1
 800c836:	60a3      	str	r3, [r4, #8]
 800c838:	6823      	ldr	r3, [r4, #0]
 800c83a:	1c5a      	adds	r2, r3, #1
 800c83c:	6022      	str	r2, [r4, #0]
 800c83e:	701e      	strb	r6, [r3, #0]
 800c840:	6963      	ldr	r3, [r4, #20]
 800c842:	3001      	adds	r0, #1
 800c844:	4283      	cmp	r3, r0
 800c846:	d004      	beq.n	800c852 <__swbuf_r+0x62>
 800c848:	89a3      	ldrh	r3, [r4, #12]
 800c84a:	07db      	lsls	r3, r3, #31
 800c84c:	d506      	bpl.n	800c85c <__swbuf_r+0x6c>
 800c84e:	2e0a      	cmp	r6, #10
 800c850:	d104      	bne.n	800c85c <__swbuf_r+0x6c>
 800c852:	4621      	mov	r1, r4
 800c854:	4628      	mov	r0, r5
 800c856:	f000 f919 	bl	800ca8c <_fflush_r>
 800c85a:	b988      	cbnz	r0, 800c880 <__swbuf_r+0x90>
 800c85c:	4638      	mov	r0, r7
 800c85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c860:	4b0a      	ldr	r3, [pc, #40]	; (800c88c <__swbuf_r+0x9c>)
 800c862:	429c      	cmp	r4, r3
 800c864:	d101      	bne.n	800c86a <__swbuf_r+0x7a>
 800c866:	68ac      	ldr	r4, [r5, #8]
 800c868:	e7cf      	b.n	800c80a <__swbuf_r+0x1a>
 800c86a:	4b09      	ldr	r3, [pc, #36]	; (800c890 <__swbuf_r+0xa0>)
 800c86c:	429c      	cmp	r4, r3
 800c86e:	bf08      	it	eq
 800c870:	68ec      	ldreq	r4, [r5, #12]
 800c872:	e7ca      	b.n	800c80a <__swbuf_r+0x1a>
 800c874:	4621      	mov	r1, r4
 800c876:	4628      	mov	r0, r5
 800c878:	f000 f80c 	bl	800c894 <__swsetup_r>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	d0cb      	beq.n	800c818 <__swbuf_r+0x28>
 800c880:	f04f 37ff 	mov.w	r7, #4294967295
 800c884:	e7ea      	b.n	800c85c <__swbuf_r+0x6c>
 800c886:	bf00      	nop
 800c888:	0800e98c 	.word	0x0800e98c
 800c88c:	0800e9ac 	.word	0x0800e9ac
 800c890:	0800e96c 	.word	0x0800e96c

0800c894 <__swsetup_r>:
 800c894:	4b32      	ldr	r3, [pc, #200]	; (800c960 <__swsetup_r+0xcc>)
 800c896:	b570      	push	{r4, r5, r6, lr}
 800c898:	681d      	ldr	r5, [r3, #0]
 800c89a:	4606      	mov	r6, r0
 800c89c:	460c      	mov	r4, r1
 800c89e:	b125      	cbz	r5, 800c8aa <__swsetup_r+0x16>
 800c8a0:	69ab      	ldr	r3, [r5, #24]
 800c8a2:	b913      	cbnz	r3, 800c8aa <__swsetup_r+0x16>
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	f000 f985 	bl	800cbb4 <__sinit>
 800c8aa:	4b2e      	ldr	r3, [pc, #184]	; (800c964 <__swsetup_r+0xd0>)
 800c8ac:	429c      	cmp	r4, r3
 800c8ae:	d10f      	bne.n	800c8d0 <__swsetup_r+0x3c>
 800c8b0:	686c      	ldr	r4, [r5, #4]
 800c8b2:	89a3      	ldrh	r3, [r4, #12]
 800c8b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8b8:	0719      	lsls	r1, r3, #28
 800c8ba:	d42c      	bmi.n	800c916 <__swsetup_r+0x82>
 800c8bc:	06dd      	lsls	r5, r3, #27
 800c8be:	d411      	bmi.n	800c8e4 <__swsetup_r+0x50>
 800c8c0:	2309      	movs	r3, #9
 800c8c2:	6033      	str	r3, [r6, #0]
 800c8c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8c8:	81a3      	strh	r3, [r4, #12]
 800c8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ce:	e03e      	b.n	800c94e <__swsetup_r+0xba>
 800c8d0:	4b25      	ldr	r3, [pc, #148]	; (800c968 <__swsetup_r+0xd4>)
 800c8d2:	429c      	cmp	r4, r3
 800c8d4:	d101      	bne.n	800c8da <__swsetup_r+0x46>
 800c8d6:	68ac      	ldr	r4, [r5, #8]
 800c8d8:	e7eb      	b.n	800c8b2 <__swsetup_r+0x1e>
 800c8da:	4b24      	ldr	r3, [pc, #144]	; (800c96c <__swsetup_r+0xd8>)
 800c8dc:	429c      	cmp	r4, r3
 800c8de:	bf08      	it	eq
 800c8e0:	68ec      	ldreq	r4, [r5, #12]
 800c8e2:	e7e6      	b.n	800c8b2 <__swsetup_r+0x1e>
 800c8e4:	0758      	lsls	r0, r3, #29
 800c8e6:	d512      	bpl.n	800c90e <__swsetup_r+0x7a>
 800c8e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8ea:	b141      	cbz	r1, 800c8fe <__swsetup_r+0x6a>
 800c8ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8f0:	4299      	cmp	r1, r3
 800c8f2:	d002      	beq.n	800c8fa <__swsetup_r+0x66>
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f7ff fb25 	bl	800bf44 <_free_r>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	6363      	str	r3, [r4, #52]	; 0x34
 800c8fe:	89a3      	ldrh	r3, [r4, #12]
 800c900:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c904:	81a3      	strh	r3, [r4, #12]
 800c906:	2300      	movs	r3, #0
 800c908:	6063      	str	r3, [r4, #4]
 800c90a:	6923      	ldr	r3, [r4, #16]
 800c90c:	6023      	str	r3, [r4, #0]
 800c90e:	89a3      	ldrh	r3, [r4, #12]
 800c910:	f043 0308 	orr.w	r3, r3, #8
 800c914:	81a3      	strh	r3, [r4, #12]
 800c916:	6923      	ldr	r3, [r4, #16]
 800c918:	b94b      	cbnz	r3, 800c92e <__swsetup_r+0x9a>
 800c91a:	89a3      	ldrh	r3, [r4, #12]
 800c91c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c924:	d003      	beq.n	800c92e <__swsetup_r+0x9a>
 800c926:	4621      	mov	r1, r4
 800c928:	4630      	mov	r0, r6
 800c92a:	f000 fa09 	bl	800cd40 <__smakebuf_r>
 800c92e:	89a0      	ldrh	r0, [r4, #12]
 800c930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c934:	f010 0301 	ands.w	r3, r0, #1
 800c938:	d00a      	beq.n	800c950 <__swsetup_r+0xbc>
 800c93a:	2300      	movs	r3, #0
 800c93c:	60a3      	str	r3, [r4, #8]
 800c93e:	6963      	ldr	r3, [r4, #20]
 800c940:	425b      	negs	r3, r3
 800c942:	61a3      	str	r3, [r4, #24]
 800c944:	6923      	ldr	r3, [r4, #16]
 800c946:	b943      	cbnz	r3, 800c95a <__swsetup_r+0xc6>
 800c948:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c94c:	d1ba      	bne.n	800c8c4 <__swsetup_r+0x30>
 800c94e:	bd70      	pop	{r4, r5, r6, pc}
 800c950:	0781      	lsls	r1, r0, #30
 800c952:	bf58      	it	pl
 800c954:	6963      	ldrpl	r3, [r4, #20]
 800c956:	60a3      	str	r3, [r4, #8]
 800c958:	e7f4      	b.n	800c944 <__swsetup_r+0xb0>
 800c95a:	2000      	movs	r0, #0
 800c95c:	e7f7      	b.n	800c94e <__swsetup_r+0xba>
 800c95e:	bf00      	nop
 800c960:	2000001c 	.word	0x2000001c
 800c964:	0800e98c 	.word	0x0800e98c
 800c968:	0800e9ac 	.word	0x0800e9ac
 800c96c:	0800e96c 	.word	0x0800e96c

0800c970 <abort>:
 800c970:	b508      	push	{r3, lr}
 800c972:	2006      	movs	r0, #6
 800c974:	f000 fa54 	bl	800ce20 <raise>
 800c978:	2001      	movs	r0, #1
 800c97a:	f7f5 fc03 	bl	8002184 <_exit>
	...

0800c980 <__sflush_r>:
 800c980:	898a      	ldrh	r2, [r1, #12]
 800c982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c986:	4605      	mov	r5, r0
 800c988:	0710      	lsls	r0, r2, #28
 800c98a:	460c      	mov	r4, r1
 800c98c:	d458      	bmi.n	800ca40 <__sflush_r+0xc0>
 800c98e:	684b      	ldr	r3, [r1, #4]
 800c990:	2b00      	cmp	r3, #0
 800c992:	dc05      	bgt.n	800c9a0 <__sflush_r+0x20>
 800c994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c996:	2b00      	cmp	r3, #0
 800c998:	dc02      	bgt.n	800c9a0 <__sflush_r+0x20>
 800c99a:	2000      	movs	r0, #0
 800c99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9a2:	2e00      	cmp	r6, #0
 800c9a4:	d0f9      	beq.n	800c99a <__sflush_r+0x1a>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9ac:	682f      	ldr	r7, [r5, #0]
 800c9ae:	602b      	str	r3, [r5, #0]
 800c9b0:	d032      	beq.n	800ca18 <__sflush_r+0x98>
 800c9b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9b4:	89a3      	ldrh	r3, [r4, #12]
 800c9b6:	075a      	lsls	r2, r3, #29
 800c9b8:	d505      	bpl.n	800c9c6 <__sflush_r+0x46>
 800c9ba:	6863      	ldr	r3, [r4, #4]
 800c9bc:	1ac0      	subs	r0, r0, r3
 800c9be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9c0:	b10b      	cbz	r3, 800c9c6 <__sflush_r+0x46>
 800c9c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9c4:	1ac0      	subs	r0, r0, r3
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9cc:	6a21      	ldr	r1, [r4, #32]
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	47b0      	blx	r6
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	89a3      	ldrh	r3, [r4, #12]
 800c9d6:	d106      	bne.n	800c9e6 <__sflush_r+0x66>
 800c9d8:	6829      	ldr	r1, [r5, #0]
 800c9da:	291d      	cmp	r1, #29
 800c9dc:	d82c      	bhi.n	800ca38 <__sflush_r+0xb8>
 800c9de:	4a2a      	ldr	r2, [pc, #168]	; (800ca88 <__sflush_r+0x108>)
 800c9e0:	40ca      	lsrs	r2, r1
 800c9e2:	07d6      	lsls	r6, r2, #31
 800c9e4:	d528      	bpl.n	800ca38 <__sflush_r+0xb8>
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	6062      	str	r2, [r4, #4]
 800c9ea:	04d9      	lsls	r1, r3, #19
 800c9ec:	6922      	ldr	r2, [r4, #16]
 800c9ee:	6022      	str	r2, [r4, #0]
 800c9f0:	d504      	bpl.n	800c9fc <__sflush_r+0x7c>
 800c9f2:	1c42      	adds	r2, r0, #1
 800c9f4:	d101      	bne.n	800c9fa <__sflush_r+0x7a>
 800c9f6:	682b      	ldr	r3, [r5, #0]
 800c9f8:	b903      	cbnz	r3, 800c9fc <__sflush_r+0x7c>
 800c9fa:	6560      	str	r0, [r4, #84]	; 0x54
 800c9fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9fe:	602f      	str	r7, [r5, #0]
 800ca00:	2900      	cmp	r1, #0
 800ca02:	d0ca      	beq.n	800c99a <__sflush_r+0x1a>
 800ca04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca08:	4299      	cmp	r1, r3
 800ca0a:	d002      	beq.n	800ca12 <__sflush_r+0x92>
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	f7ff fa99 	bl	800bf44 <_free_r>
 800ca12:	2000      	movs	r0, #0
 800ca14:	6360      	str	r0, [r4, #52]	; 0x34
 800ca16:	e7c1      	b.n	800c99c <__sflush_r+0x1c>
 800ca18:	6a21      	ldr	r1, [r4, #32]
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	47b0      	blx	r6
 800ca20:	1c41      	adds	r1, r0, #1
 800ca22:	d1c7      	bne.n	800c9b4 <__sflush_r+0x34>
 800ca24:	682b      	ldr	r3, [r5, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d0c4      	beq.n	800c9b4 <__sflush_r+0x34>
 800ca2a:	2b1d      	cmp	r3, #29
 800ca2c:	d001      	beq.n	800ca32 <__sflush_r+0xb2>
 800ca2e:	2b16      	cmp	r3, #22
 800ca30:	d101      	bne.n	800ca36 <__sflush_r+0xb6>
 800ca32:	602f      	str	r7, [r5, #0]
 800ca34:	e7b1      	b.n	800c99a <__sflush_r+0x1a>
 800ca36:	89a3      	ldrh	r3, [r4, #12]
 800ca38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca3c:	81a3      	strh	r3, [r4, #12]
 800ca3e:	e7ad      	b.n	800c99c <__sflush_r+0x1c>
 800ca40:	690f      	ldr	r7, [r1, #16]
 800ca42:	2f00      	cmp	r7, #0
 800ca44:	d0a9      	beq.n	800c99a <__sflush_r+0x1a>
 800ca46:	0793      	lsls	r3, r2, #30
 800ca48:	680e      	ldr	r6, [r1, #0]
 800ca4a:	bf08      	it	eq
 800ca4c:	694b      	ldreq	r3, [r1, #20]
 800ca4e:	600f      	str	r7, [r1, #0]
 800ca50:	bf18      	it	ne
 800ca52:	2300      	movne	r3, #0
 800ca54:	eba6 0807 	sub.w	r8, r6, r7
 800ca58:	608b      	str	r3, [r1, #8]
 800ca5a:	f1b8 0f00 	cmp.w	r8, #0
 800ca5e:	dd9c      	ble.n	800c99a <__sflush_r+0x1a>
 800ca60:	6a21      	ldr	r1, [r4, #32]
 800ca62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca64:	4643      	mov	r3, r8
 800ca66:	463a      	mov	r2, r7
 800ca68:	4628      	mov	r0, r5
 800ca6a:	47b0      	blx	r6
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	dc06      	bgt.n	800ca7e <__sflush_r+0xfe>
 800ca70:	89a3      	ldrh	r3, [r4, #12]
 800ca72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca76:	81a3      	strh	r3, [r4, #12]
 800ca78:	f04f 30ff 	mov.w	r0, #4294967295
 800ca7c:	e78e      	b.n	800c99c <__sflush_r+0x1c>
 800ca7e:	4407      	add	r7, r0
 800ca80:	eba8 0800 	sub.w	r8, r8, r0
 800ca84:	e7e9      	b.n	800ca5a <__sflush_r+0xda>
 800ca86:	bf00      	nop
 800ca88:	20400001 	.word	0x20400001

0800ca8c <_fflush_r>:
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	690b      	ldr	r3, [r1, #16]
 800ca90:	4605      	mov	r5, r0
 800ca92:	460c      	mov	r4, r1
 800ca94:	b913      	cbnz	r3, 800ca9c <_fflush_r+0x10>
 800ca96:	2500      	movs	r5, #0
 800ca98:	4628      	mov	r0, r5
 800ca9a:	bd38      	pop	{r3, r4, r5, pc}
 800ca9c:	b118      	cbz	r0, 800caa6 <_fflush_r+0x1a>
 800ca9e:	6983      	ldr	r3, [r0, #24]
 800caa0:	b90b      	cbnz	r3, 800caa6 <_fflush_r+0x1a>
 800caa2:	f000 f887 	bl	800cbb4 <__sinit>
 800caa6:	4b14      	ldr	r3, [pc, #80]	; (800caf8 <_fflush_r+0x6c>)
 800caa8:	429c      	cmp	r4, r3
 800caaa:	d11b      	bne.n	800cae4 <_fflush_r+0x58>
 800caac:	686c      	ldr	r4, [r5, #4]
 800caae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d0ef      	beq.n	800ca96 <_fflush_r+0xa>
 800cab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cab8:	07d0      	lsls	r0, r2, #31
 800caba:	d404      	bmi.n	800cac6 <_fflush_r+0x3a>
 800cabc:	0599      	lsls	r1, r3, #22
 800cabe:	d402      	bmi.n	800cac6 <_fflush_r+0x3a>
 800cac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cac2:	f000 f915 	bl	800ccf0 <__retarget_lock_acquire_recursive>
 800cac6:	4628      	mov	r0, r5
 800cac8:	4621      	mov	r1, r4
 800caca:	f7ff ff59 	bl	800c980 <__sflush_r>
 800cace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cad0:	07da      	lsls	r2, r3, #31
 800cad2:	4605      	mov	r5, r0
 800cad4:	d4e0      	bmi.n	800ca98 <_fflush_r+0xc>
 800cad6:	89a3      	ldrh	r3, [r4, #12]
 800cad8:	059b      	lsls	r3, r3, #22
 800cada:	d4dd      	bmi.n	800ca98 <_fflush_r+0xc>
 800cadc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cade:	f000 f908 	bl	800ccf2 <__retarget_lock_release_recursive>
 800cae2:	e7d9      	b.n	800ca98 <_fflush_r+0xc>
 800cae4:	4b05      	ldr	r3, [pc, #20]	; (800cafc <_fflush_r+0x70>)
 800cae6:	429c      	cmp	r4, r3
 800cae8:	d101      	bne.n	800caee <_fflush_r+0x62>
 800caea:	68ac      	ldr	r4, [r5, #8]
 800caec:	e7df      	b.n	800caae <_fflush_r+0x22>
 800caee:	4b04      	ldr	r3, [pc, #16]	; (800cb00 <_fflush_r+0x74>)
 800caf0:	429c      	cmp	r4, r3
 800caf2:	bf08      	it	eq
 800caf4:	68ec      	ldreq	r4, [r5, #12]
 800caf6:	e7da      	b.n	800caae <_fflush_r+0x22>
 800caf8:	0800e98c 	.word	0x0800e98c
 800cafc:	0800e9ac 	.word	0x0800e9ac
 800cb00:	0800e96c 	.word	0x0800e96c

0800cb04 <std>:
 800cb04:	2300      	movs	r3, #0
 800cb06:	b510      	push	{r4, lr}
 800cb08:	4604      	mov	r4, r0
 800cb0a:	e9c0 3300 	strd	r3, r3, [r0]
 800cb0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb12:	6083      	str	r3, [r0, #8]
 800cb14:	8181      	strh	r1, [r0, #12]
 800cb16:	6643      	str	r3, [r0, #100]	; 0x64
 800cb18:	81c2      	strh	r2, [r0, #14]
 800cb1a:	6183      	str	r3, [r0, #24]
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	2208      	movs	r2, #8
 800cb20:	305c      	adds	r0, #92	; 0x5c
 800cb22:	f7fb fdcb 	bl	80086bc <memset>
 800cb26:	4b05      	ldr	r3, [pc, #20]	; (800cb3c <std+0x38>)
 800cb28:	6263      	str	r3, [r4, #36]	; 0x24
 800cb2a:	4b05      	ldr	r3, [pc, #20]	; (800cb40 <std+0x3c>)
 800cb2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb2e:	4b05      	ldr	r3, [pc, #20]	; (800cb44 <std+0x40>)
 800cb30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb32:	4b05      	ldr	r3, [pc, #20]	; (800cb48 <std+0x44>)
 800cb34:	6224      	str	r4, [r4, #32]
 800cb36:	6323      	str	r3, [r4, #48]	; 0x30
 800cb38:	bd10      	pop	{r4, pc}
 800cb3a:	bf00      	nop
 800cb3c:	0800ce59 	.word	0x0800ce59
 800cb40:	0800ce7b 	.word	0x0800ce7b
 800cb44:	0800ceb3 	.word	0x0800ceb3
 800cb48:	0800ced7 	.word	0x0800ced7

0800cb4c <_cleanup_r>:
 800cb4c:	4901      	ldr	r1, [pc, #4]	; (800cb54 <_cleanup_r+0x8>)
 800cb4e:	f000 b8af 	b.w	800ccb0 <_fwalk_reent>
 800cb52:	bf00      	nop
 800cb54:	0800ca8d 	.word	0x0800ca8d

0800cb58 <__sfmoreglue>:
 800cb58:	b570      	push	{r4, r5, r6, lr}
 800cb5a:	2268      	movs	r2, #104	; 0x68
 800cb5c:	1e4d      	subs	r5, r1, #1
 800cb5e:	4355      	muls	r5, r2
 800cb60:	460e      	mov	r6, r1
 800cb62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb66:	f7ff fa59 	bl	800c01c <_malloc_r>
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	b140      	cbz	r0, 800cb80 <__sfmoreglue+0x28>
 800cb6e:	2100      	movs	r1, #0
 800cb70:	e9c0 1600 	strd	r1, r6, [r0]
 800cb74:	300c      	adds	r0, #12
 800cb76:	60a0      	str	r0, [r4, #8]
 800cb78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb7c:	f7fb fd9e 	bl	80086bc <memset>
 800cb80:	4620      	mov	r0, r4
 800cb82:	bd70      	pop	{r4, r5, r6, pc}

0800cb84 <__sfp_lock_acquire>:
 800cb84:	4801      	ldr	r0, [pc, #4]	; (800cb8c <__sfp_lock_acquire+0x8>)
 800cb86:	f000 b8b3 	b.w	800ccf0 <__retarget_lock_acquire_recursive>
 800cb8a:	bf00      	nop
 800cb8c:	200009a1 	.word	0x200009a1

0800cb90 <__sfp_lock_release>:
 800cb90:	4801      	ldr	r0, [pc, #4]	; (800cb98 <__sfp_lock_release+0x8>)
 800cb92:	f000 b8ae 	b.w	800ccf2 <__retarget_lock_release_recursive>
 800cb96:	bf00      	nop
 800cb98:	200009a1 	.word	0x200009a1

0800cb9c <__sinit_lock_acquire>:
 800cb9c:	4801      	ldr	r0, [pc, #4]	; (800cba4 <__sinit_lock_acquire+0x8>)
 800cb9e:	f000 b8a7 	b.w	800ccf0 <__retarget_lock_acquire_recursive>
 800cba2:	bf00      	nop
 800cba4:	200009a2 	.word	0x200009a2

0800cba8 <__sinit_lock_release>:
 800cba8:	4801      	ldr	r0, [pc, #4]	; (800cbb0 <__sinit_lock_release+0x8>)
 800cbaa:	f000 b8a2 	b.w	800ccf2 <__retarget_lock_release_recursive>
 800cbae:	bf00      	nop
 800cbb0:	200009a2 	.word	0x200009a2

0800cbb4 <__sinit>:
 800cbb4:	b510      	push	{r4, lr}
 800cbb6:	4604      	mov	r4, r0
 800cbb8:	f7ff fff0 	bl	800cb9c <__sinit_lock_acquire>
 800cbbc:	69a3      	ldr	r3, [r4, #24]
 800cbbe:	b11b      	cbz	r3, 800cbc8 <__sinit+0x14>
 800cbc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbc4:	f7ff bff0 	b.w	800cba8 <__sinit_lock_release>
 800cbc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cbcc:	6523      	str	r3, [r4, #80]	; 0x50
 800cbce:	4b13      	ldr	r3, [pc, #76]	; (800cc1c <__sinit+0x68>)
 800cbd0:	4a13      	ldr	r2, [pc, #76]	; (800cc20 <__sinit+0x6c>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	62a2      	str	r2, [r4, #40]	; 0x28
 800cbd6:	42a3      	cmp	r3, r4
 800cbd8:	bf04      	itt	eq
 800cbda:	2301      	moveq	r3, #1
 800cbdc:	61a3      	streq	r3, [r4, #24]
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f000 f820 	bl	800cc24 <__sfp>
 800cbe4:	6060      	str	r0, [r4, #4]
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f000 f81c 	bl	800cc24 <__sfp>
 800cbec:	60a0      	str	r0, [r4, #8]
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f000 f818 	bl	800cc24 <__sfp>
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	60e0      	str	r0, [r4, #12]
 800cbf8:	2104      	movs	r1, #4
 800cbfa:	6860      	ldr	r0, [r4, #4]
 800cbfc:	f7ff ff82 	bl	800cb04 <std>
 800cc00:	68a0      	ldr	r0, [r4, #8]
 800cc02:	2201      	movs	r2, #1
 800cc04:	2109      	movs	r1, #9
 800cc06:	f7ff ff7d 	bl	800cb04 <std>
 800cc0a:	68e0      	ldr	r0, [r4, #12]
 800cc0c:	2202      	movs	r2, #2
 800cc0e:	2112      	movs	r1, #18
 800cc10:	f7ff ff78 	bl	800cb04 <std>
 800cc14:	2301      	movs	r3, #1
 800cc16:	61a3      	str	r3, [r4, #24]
 800cc18:	e7d2      	b.n	800cbc0 <__sinit+0xc>
 800cc1a:	bf00      	nop
 800cc1c:	0800e524 	.word	0x0800e524
 800cc20:	0800cb4d 	.word	0x0800cb4d

0800cc24 <__sfp>:
 800cc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc26:	4607      	mov	r7, r0
 800cc28:	f7ff ffac 	bl	800cb84 <__sfp_lock_acquire>
 800cc2c:	4b1e      	ldr	r3, [pc, #120]	; (800cca8 <__sfp+0x84>)
 800cc2e:	681e      	ldr	r6, [r3, #0]
 800cc30:	69b3      	ldr	r3, [r6, #24]
 800cc32:	b913      	cbnz	r3, 800cc3a <__sfp+0x16>
 800cc34:	4630      	mov	r0, r6
 800cc36:	f7ff ffbd 	bl	800cbb4 <__sinit>
 800cc3a:	3648      	adds	r6, #72	; 0x48
 800cc3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc40:	3b01      	subs	r3, #1
 800cc42:	d503      	bpl.n	800cc4c <__sfp+0x28>
 800cc44:	6833      	ldr	r3, [r6, #0]
 800cc46:	b30b      	cbz	r3, 800cc8c <__sfp+0x68>
 800cc48:	6836      	ldr	r6, [r6, #0]
 800cc4a:	e7f7      	b.n	800cc3c <__sfp+0x18>
 800cc4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc50:	b9d5      	cbnz	r5, 800cc88 <__sfp+0x64>
 800cc52:	4b16      	ldr	r3, [pc, #88]	; (800ccac <__sfp+0x88>)
 800cc54:	60e3      	str	r3, [r4, #12]
 800cc56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc5a:	6665      	str	r5, [r4, #100]	; 0x64
 800cc5c:	f000 f847 	bl	800ccee <__retarget_lock_init_recursive>
 800cc60:	f7ff ff96 	bl	800cb90 <__sfp_lock_release>
 800cc64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc6c:	6025      	str	r5, [r4, #0]
 800cc6e:	61a5      	str	r5, [r4, #24]
 800cc70:	2208      	movs	r2, #8
 800cc72:	4629      	mov	r1, r5
 800cc74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc78:	f7fb fd20 	bl	80086bc <memset>
 800cc7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc84:	4620      	mov	r0, r4
 800cc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc88:	3468      	adds	r4, #104	; 0x68
 800cc8a:	e7d9      	b.n	800cc40 <__sfp+0x1c>
 800cc8c:	2104      	movs	r1, #4
 800cc8e:	4638      	mov	r0, r7
 800cc90:	f7ff ff62 	bl	800cb58 <__sfmoreglue>
 800cc94:	4604      	mov	r4, r0
 800cc96:	6030      	str	r0, [r6, #0]
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d1d5      	bne.n	800cc48 <__sfp+0x24>
 800cc9c:	f7ff ff78 	bl	800cb90 <__sfp_lock_release>
 800cca0:	230c      	movs	r3, #12
 800cca2:	603b      	str	r3, [r7, #0]
 800cca4:	e7ee      	b.n	800cc84 <__sfp+0x60>
 800cca6:	bf00      	nop
 800cca8:	0800e524 	.word	0x0800e524
 800ccac:	ffff0001 	.word	0xffff0001

0800ccb0 <_fwalk_reent>:
 800ccb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccb4:	4606      	mov	r6, r0
 800ccb6:	4688      	mov	r8, r1
 800ccb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ccbc:	2700      	movs	r7, #0
 800ccbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ccc2:	f1b9 0901 	subs.w	r9, r9, #1
 800ccc6:	d505      	bpl.n	800ccd4 <_fwalk_reent+0x24>
 800ccc8:	6824      	ldr	r4, [r4, #0]
 800ccca:	2c00      	cmp	r4, #0
 800cccc:	d1f7      	bne.n	800ccbe <_fwalk_reent+0xe>
 800ccce:	4638      	mov	r0, r7
 800ccd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccd4:	89ab      	ldrh	r3, [r5, #12]
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d907      	bls.n	800ccea <_fwalk_reent+0x3a>
 800ccda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ccde:	3301      	adds	r3, #1
 800cce0:	d003      	beq.n	800ccea <_fwalk_reent+0x3a>
 800cce2:	4629      	mov	r1, r5
 800cce4:	4630      	mov	r0, r6
 800cce6:	47c0      	blx	r8
 800cce8:	4307      	orrs	r7, r0
 800ccea:	3568      	adds	r5, #104	; 0x68
 800ccec:	e7e9      	b.n	800ccc2 <_fwalk_reent+0x12>

0800ccee <__retarget_lock_init_recursive>:
 800ccee:	4770      	bx	lr

0800ccf0 <__retarget_lock_acquire_recursive>:
 800ccf0:	4770      	bx	lr

0800ccf2 <__retarget_lock_release_recursive>:
 800ccf2:	4770      	bx	lr

0800ccf4 <__swhatbuf_r>:
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	460e      	mov	r6, r1
 800ccf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccfc:	2900      	cmp	r1, #0
 800ccfe:	b096      	sub	sp, #88	; 0x58
 800cd00:	4614      	mov	r4, r2
 800cd02:	461d      	mov	r5, r3
 800cd04:	da08      	bge.n	800cd18 <__swhatbuf_r+0x24>
 800cd06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	602a      	str	r2, [r5, #0]
 800cd0e:	061a      	lsls	r2, r3, #24
 800cd10:	d410      	bmi.n	800cd34 <__swhatbuf_r+0x40>
 800cd12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd16:	e00e      	b.n	800cd36 <__swhatbuf_r+0x42>
 800cd18:	466a      	mov	r2, sp
 800cd1a:	f000 f903 	bl	800cf24 <_fstat_r>
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	dbf1      	blt.n	800cd06 <__swhatbuf_r+0x12>
 800cd22:	9a01      	ldr	r2, [sp, #4]
 800cd24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd2c:	425a      	negs	r2, r3
 800cd2e:	415a      	adcs	r2, r3
 800cd30:	602a      	str	r2, [r5, #0]
 800cd32:	e7ee      	b.n	800cd12 <__swhatbuf_r+0x1e>
 800cd34:	2340      	movs	r3, #64	; 0x40
 800cd36:	2000      	movs	r0, #0
 800cd38:	6023      	str	r3, [r4, #0]
 800cd3a:	b016      	add	sp, #88	; 0x58
 800cd3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd40 <__smakebuf_r>:
 800cd40:	898b      	ldrh	r3, [r1, #12]
 800cd42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd44:	079d      	lsls	r5, r3, #30
 800cd46:	4606      	mov	r6, r0
 800cd48:	460c      	mov	r4, r1
 800cd4a:	d507      	bpl.n	800cd5c <__smakebuf_r+0x1c>
 800cd4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	6123      	str	r3, [r4, #16]
 800cd54:	2301      	movs	r3, #1
 800cd56:	6163      	str	r3, [r4, #20]
 800cd58:	b002      	add	sp, #8
 800cd5a:	bd70      	pop	{r4, r5, r6, pc}
 800cd5c:	ab01      	add	r3, sp, #4
 800cd5e:	466a      	mov	r2, sp
 800cd60:	f7ff ffc8 	bl	800ccf4 <__swhatbuf_r>
 800cd64:	9900      	ldr	r1, [sp, #0]
 800cd66:	4605      	mov	r5, r0
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f7ff f957 	bl	800c01c <_malloc_r>
 800cd6e:	b948      	cbnz	r0, 800cd84 <__smakebuf_r+0x44>
 800cd70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd74:	059a      	lsls	r2, r3, #22
 800cd76:	d4ef      	bmi.n	800cd58 <__smakebuf_r+0x18>
 800cd78:	f023 0303 	bic.w	r3, r3, #3
 800cd7c:	f043 0302 	orr.w	r3, r3, #2
 800cd80:	81a3      	strh	r3, [r4, #12]
 800cd82:	e7e3      	b.n	800cd4c <__smakebuf_r+0xc>
 800cd84:	4b0d      	ldr	r3, [pc, #52]	; (800cdbc <__smakebuf_r+0x7c>)
 800cd86:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd88:	89a3      	ldrh	r3, [r4, #12]
 800cd8a:	6020      	str	r0, [r4, #0]
 800cd8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd90:	81a3      	strh	r3, [r4, #12]
 800cd92:	9b00      	ldr	r3, [sp, #0]
 800cd94:	6163      	str	r3, [r4, #20]
 800cd96:	9b01      	ldr	r3, [sp, #4]
 800cd98:	6120      	str	r0, [r4, #16]
 800cd9a:	b15b      	cbz	r3, 800cdb4 <__smakebuf_r+0x74>
 800cd9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cda0:	4630      	mov	r0, r6
 800cda2:	f000 f8d1 	bl	800cf48 <_isatty_r>
 800cda6:	b128      	cbz	r0, 800cdb4 <__smakebuf_r+0x74>
 800cda8:	89a3      	ldrh	r3, [r4, #12]
 800cdaa:	f023 0303 	bic.w	r3, r3, #3
 800cdae:	f043 0301 	orr.w	r3, r3, #1
 800cdb2:	81a3      	strh	r3, [r4, #12]
 800cdb4:	89a0      	ldrh	r0, [r4, #12]
 800cdb6:	4305      	orrs	r5, r0
 800cdb8:	81a5      	strh	r5, [r4, #12]
 800cdba:	e7cd      	b.n	800cd58 <__smakebuf_r+0x18>
 800cdbc:	0800cb4d 	.word	0x0800cb4d

0800cdc0 <_malloc_usable_size_r>:
 800cdc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdc4:	1f18      	subs	r0, r3, #4
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	bfbc      	itt	lt
 800cdca:	580b      	ldrlt	r3, [r1, r0]
 800cdcc:	18c0      	addlt	r0, r0, r3
 800cdce:	4770      	bx	lr

0800cdd0 <_raise_r>:
 800cdd0:	291f      	cmp	r1, #31
 800cdd2:	b538      	push	{r3, r4, r5, lr}
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	460d      	mov	r5, r1
 800cdd8:	d904      	bls.n	800cde4 <_raise_r+0x14>
 800cdda:	2316      	movs	r3, #22
 800cddc:	6003      	str	r3, [r0, #0]
 800cdde:	f04f 30ff 	mov.w	r0, #4294967295
 800cde2:	bd38      	pop	{r3, r4, r5, pc}
 800cde4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cde6:	b112      	cbz	r2, 800cdee <_raise_r+0x1e>
 800cde8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdec:	b94b      	cbnz	r3, 800ce02 <_raise_r+0x32>
 800cdee:	4620      	mov	r0, r4
 800cdf0:	f000 f830 	bl	800ce54 <_getpid_r>
 800cdf4:	462a      	mov	r2, r5
 800cdf6:	4601      	mov	r1, r0
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdfe:	f000 b817 	b.w	800ce30 <_kill_r>
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d00a      	beq.n	800ce1c <_raise_r+0x4c>
 800ce06:	1c59      	adds	r1, r3, #1
 800ce08:	d103      	bne.n	800ce12 <_raise_r+0x42>
 800ce0a:	2316      	movs	r3, #22
 800ce0c:	6003      	str	r3, [r0, #0]
 800ce0e:	2001      	movs	r0, #1
 800ce10:	e7e7      	b.n	800cde2 <_raise_r+0x12>
 800ce12:	2400      	movs	r4, #0
 800ce14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce18:	4628      	mov	r0, r5
 800ce1a:	4798      	blx	r3
 800ce1c:	2000      	movs	r0, #0
 800ce1e:	e7e0      	b.n	800cde2 <_raise_r+0x12>

0800ce20 <raise>:
 800ce20:	4b02      	ldr	r3, [pc, #8]	; (800ce2c <raise+0xc>)
 800ce22:	4601      	mov	r1, r0
 800ce24:	6818      	ldr	r0, [r3, #0]
 800ce26:	f7ff bfd3 	b.w	800cdd0 <_raise_r>
 800ce2a:	bf00      	nop
 800ce2c:	2000001c 	.word	0x2000001c

0800ce30 <_kill_r>:
 800ce30:	b538      	push	{r3, r4, r5, lr}
 800ce32:	4d07      	ldr	r5, [pc, #28]	; (800ce50 <_kill_r+0x20>)
 800ce34:	2300      	movs	r3, #0
 800ce36:	4604      	mov	r4, r0
 800ce38:	4608      	mov	r0, r1
 800ce3a:	4611      	mov	r1, r2
 800ce3c:	602b      	str	r3, [r5, #0]
 800ce3e:	f7f5 f991 	bl	8002164 <_kill>
 800ce42:	1c43      	adds	r3, r0, #1
 800ce44:	d102      	bne.n	800ce4c <_kill_r+0x1c>
 800ce46:	682b      	ldr	r3, [r5, #0]
 800ce48:	b103      	cbz	r3, 800ce4c <_kill_r+0x1c>
 800ce4a:	6023      	str	r3, [r4, #0]
 800ce4c:	bd38      	pop	{r3, r4, r5, pc}
 800ce4e:	bf00      	nop
 800ce50:	2000099c 	.word	0x2000099c

0800ce54 <_getpid_r>:
 800ce54:	f7f5 b97e 	b.w	8002154 <_getpid>

0800ce58 <__sread>:
 800ce58:	b510      	push	{r4, lr}
 800ce5a:	460c      	mov	r4, r1
 800ce5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce60:	f000 f894 	bl	800cf8c <_read_r>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	bfab      	itete	ge
 800ce68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce6a:	89a3      	ldrhlt	r3, [r4, #12]
 800ce6c:	181b      	addge	r3, r3, r0
 800ce6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce72:	bfac      	ite	ge
 800ce74:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce76:	81a3      	strhlt	r3, [r4, #12]
 800ce78:	bd10      	pop	{r4, pc}

0800ce7a <__swrite>:
 800ce7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7e:	461f      	mov	r7, r3
 800ce80:	898b      	ldrh	r3, [r1, #12]
 800ce82:	05db      	lsls	r3, r3, #23
 800ce84:	4605      	mov	r5, r0
 800ce86:	460c      	mov	r4, r1
 800ce88:	4616      	mov	r6, r2
 800ce8a:	d505      	bpl.n	800ce98 <__swrite+0x1e>
 800ce8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce90:	2302      	movs	r3, #2
 800ce92:	2200      	movs	r2, #0
 800ce94:	f000 f868 	bl	800cf68 <_lseek_r>
 800ce98:	89a3      	ldrh	r3, [r4, #12]
 800ce9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cea2:	81a3      	strh	r3, [r4, #12]
 800cea4:	4632      	mov	r2, r6
 800cea6:	463b      	mov	r3, r7
 800cea8:	4628      	mov	r0, r5
 800ceaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceae:	f000 b817 	b.w	800cee0 <_write_r>

0800ceb2 <__sseek>:
 800ceb2:	b510      	push	{r4, lr}
 800ceb4:	460c      	mov	r4, r1
 800ceb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceba:	f000 f855 	bl	800cf68 <_lseek_r>
 800cebe:	1c43      	adds	r3, r0, #1
 800cec0:	89a3      	ldrh	r3, [r4, #12]
 800cec2:	bf15      	itete	ne
 800cec4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ceca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cece:	81a3      	strheq	r3, [r4, #12]
 800ced0:	bf18      	it	ne
 800ced2:	81a3      	strhne	r3, [r4, #12]
 800ced4:	bd10      	pop	{r4, pc}

0800ced6 <__sclose>:
 800ced6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceda:	f000 b813 	b.w	800cf04 <_close_r>
	...

0800cee0 <_write_r>:
 800cee0:	b538      	push	{r3, r4, r5, lr}
 800cee2:	4d07      	ldr	r5, [pc, #28]	; (800cf00 <_write_r+0x20>)
 800cee4:	4604      	mov	r4, r0
 800cee6:	4608      	mov	r0, r1
 800cee8:	4611      	mov	r1, r2
 800ceea:	2200      	movs	r2, #0
 800ceec:	602a      	str	r2, [r5, #0]
 800ceee:	461a      	mov	r2, r3
 800cef0:	f7f4 fcc6 	bl	8001880 <_write>
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	d102      	bne.n	800cefe <_write_r+0x1e>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	b103      	cbz	r3, 800cefe <_write_r+0x1e>
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	bd38      	pop	{r3, r4, r5, pc}
 800cf00:	2000099c 	.word	0x2000099c

0800cf04 <_close_r>:
 800cf04:	b538      	push	{r3, r4, r5, lr}
 800cf06:	4d06      	ldr	r5, [pc, #24]	; (800cf20 <_close_r+0x1c>)
 800cf08:	2300      	movs	r3, #0
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	4608      	mov	r0, r1
 800cf0e:	602b      	str	r3, [r5, #0]
 800cf10:	f7f5 f95f 	bl	80021d2 <_close>
 800cf14:	1c43      	adds	r3, r0, #1
 800cf16:	d102      	bne.n	800cf1e <_close_r+0x1a>
 800cf18:	682b      	ldr	r3, [r5, #0]
 800cf1a:	b103      	cbz	r3, 800cf1e <_close_r+0x1a>
 800cf1c:	6023      	str	r3, [r4, #0]
 800cf1e:	bd38      	pop	{r3, r4, r5, pc}
 800cf20:	2000099c 	.word	0x2000099c

0800cf24 <_fstat_r>:
 800cf24:	b538      	push	{r3, r4, r5, lr}
 800cf26:	4d07      	ldr	r5, [pc, #28]	; (800cf44 <_fstat_r+0x20>)
 800cf28:	2300      	movs	r3, #0
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	4608      	mov	r0, r1
 800cf2e:	4611      	mov	r1, r2
 800cf30:	602b      	str	r3, [r5, #0]
 800cf32:	f7f5 f95a 	bl	80021ea <_fstat>
 800cf36:	1c43      	adds	r3, r0, #1
 800cf38:	d102      	bne.n	800cf40 <_fstat_r+0x1c>
 800cf3a:	682b      	ldr	r3, [r5, #0]
 800cf3c:	b103      	cbz	r3, 800cf40 <_fstat_r+0x1c>
 800cf3e:	6023      	str	r3, [r4, #0]
 800cf40:	bd38      	pop	{r3, r4, r5, pc}
 800cf42:	bf00      	nop
 800cf44:	2000099c 	.word	0x2000099c

0800cf48 <_isatty_r>:
 800cf48:	b538      	push	{r3, r4, r5, lr}
 800cf4a:	4d06      	ldr	r5, [pc, #24]	; (800cf64 <_isatty_r+0x1c>)
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	4604      	mov	r4, r0
 800cf50:	4608      	mov	r0, r1
 800cf52:	602b      	str	r3, [r5, #0]
 800cf54:	f7f5 f959 	bl	800220a <_isatty>
 800cf58:	1c43      	adds	r3, r0, #1
 800cf5a:	d102      	bne.n	800cf62 <_isatty_r+0x1a>
 800cf5c:	682b      	ldr	r3, [r5, #0]
 800cf5e:	b103      	cbz	r3, 800cf62 <_isatty_r+0x1a>
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	bd38      	pop	{r3, r4, r5, pc}
 800cf64:	2000099c 	.word	0x2000099c

0800cf68 <_lseek_r>:
 800cf68:	b538      	push	{r3, r4, r5, lr}
 800cf6a:	4d07      	ldr	r5, [pc, #28]	; (800cf88 <_lseek_r+0x20>)
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	4608      	mov	r0, r1
 800cf70:	4611      	mov	r1, r2
 800cf72:	2200      	movs	r2, #0
 800cf74:	602a      	str	r2, [r5, #0]
 800cf76:	461a      	mov	r2, r3
 800cf78:	f7f5 f952 	bl	8002220 <_lseek>
 800cf7c:	1c43      	adds	r3, r0, #1
 800cf7e:	d102      	bne.n	800cf86 <_lseek_r+0x1e>
 800cf80:	682b      	ldr	r3, [r5, #0]
 800cf82:	b103      	cbz	r3, 800cf86 <_lseek_r+0x1e>
 800cf84:	6023      	str	r3, [r4, #0]
 800cf86:	bd38      	pop	{r3, r4, r5, pc}
 800cf88:	2000099c 	.word	0x2000099c

0800cf8c <_read_r>:
 800cf8c:	b538      	push	{r3, r4, r5, lr}
 800cf8e:	4d07      	ldr	r5, [pc, #28]	; (800cfac <_read_r+0x20>)
 800cf90:	4604      	mov	r4, r0
 800cf92:	4608      	mov	r0, r1
 800cf94:	4611      	mov	r1, r2
 800cf96:	2200      	movs	r2, #0
 800cf98:	602a      	str	r2, [r5, #0]
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	f7f5 f8fc 	bl	8002198 <_read>
 800cfa0:	1c43      	adds	r3, r0, #1
 800cfa2:	d102      	bne.n	800cfaa <_read_r+0x1e>
 800cfa4:	682b      	ldr	r3, [r5, #0]
 800cfa6:	b103      	cbz	r3, 800cfaa <_read_r+0x1e>
 800cfa8:	6023      	str	r3, [r4, #0]
 800cfaa:	bd38      	pop	{r3, r4, r5, pc}
 800cfac:	2000099c 	.word	0x2000099c

0800cfb0 <_init>:
 800cfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb2:	bf00      	nop
 800cfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfb6:	bc08      	pop	{r3}
 800cfb8:	469e      	mov	lr, r3
 800cfba:	4770      	bx	lr

0800cfbc <_fini>:
 800cfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfbe:	bf00      	nop
 800cfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfc2:	bc08      	pop	{r3}
 800cfc4:	469e      	mov	lr, r3
 800cfc6:	4770      	bx	lr
